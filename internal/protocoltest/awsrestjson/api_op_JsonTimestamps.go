// Code generated by smithy-go-codegen DO NOT EDIT.

package awsrestjson

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// This tests how timestamps are serialized, including using the default format of
// date-time and various @timestampFormat trait values.
func (c *Client) JsonTimestamps(ctx context.Context, params *JsonTimestampsInput, optFns ...func(*Options)) (*JsonTimestampsOutput, error) {
	if params == nil {
		params = &JsonTimestampsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "JsonTimestamps", params, optFns, addOperationJsonTimestampsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*JsonTimestampsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type JsonTimestampsInput struct {
	DateTime *time.Time

	EpochSeconds *time.Time

	HttpDate *time.Time

	Normal *time.Time
}

type JsonTimestampsOutput struct {
	DateTime *time.Time

	EpochSeconds *time.Time

	HttpDate *time.Time

	Normal *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationJsonTimestampsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpJsonTimestamps{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpJsonTimestamps{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	addRetryMiddlewares(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opJsonTimestamps(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opJsonTimestamps(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "JsonTimestamps",
	}
}
