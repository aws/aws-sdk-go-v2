// Code generated by smithy-go-codegen DO NOT EDIT.

package awsrestjson

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/internal/protocoltest/awsrestjson/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// The example tests basic map serialization.
func (c *Client) JsonMaps(ctx context.Context, params *JsonMapsInput, optFns ...func(*Options)) (*JsonMapsOutput, error) {
	if params == nil {
		params = &JsonMapsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "JsonMaps", params, optFns, addOperationJsonMapsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*JsonMapsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type JsonMapsInput struct {
	DenseBooleanMap map[string]bool

	DenseNumberMap map[string]int32

	DenseStringMap map[string]string

	DenseStructMap map[string]types.GreetingStruct

	SparseBooleanMap map[string]*bool

	SparseNumberMap map[string]*int32

	SparseStringMap map[string]*string

	SparseStructMap map[string]*types.GreetingStruct
}

type JsonMapsOutput struct {
	DenseBooleanMap map[string]bool

	DenseNumberMap map[string]int32

	DenseStringMap map[string]string

	DenseStructMap map[string]types.GreetingStruct

	SparseBooleanMap map[string]*bool

	SparseNumberMap map[string]*int32

	SparseStringMap map[string]*string

	SparseStructMap map[string]*types.GreetingStruct

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationJsonMapsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpJsonMaps{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpJsonMaps{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opJsonMaps(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opJsonMaps(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "JsonMaps",
	}
}
