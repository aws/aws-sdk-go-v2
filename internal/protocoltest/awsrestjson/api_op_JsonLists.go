// Code generated by smithy-go-codegen DO NOT EDIT.

package awsrestjson

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/internal/protocoltest/awsrestjson/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// This test case serializes JSON lists for the following cases for both input and
// output:
//
//     * Normal JSON lists.
//
//     * Normal JSON sets.
//
//     * JSON lists of
// lists.
//
//     * Lists of structures.
func (c *Client) JsonLists(ctx context.Context, params *JsonListsInput, optFns ...func(*Options)) (*JsonListsOutput, error) {
	stack := middleware.NewStack("JsonLists", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpJsonListsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	addRetryMiddlewares(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opJsonLists(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "JsonLists",
			Err:           err,
		}
	}
	out := result.(*JsonListsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type JsonListsInput struct {
	BooleanList []*bool

	EnumList []types.FooEnum

	IntegerList []*int32

	// A list of lists of strings.
	NestedStringList [][]*string

	StringList []*string

	StringSet []*string

	StructureList []*types.StructureListMember

	TimestampList []*time.Time
}

type JsonListsOutput struct {
	BooleanList []*bool

	EnumList []types.FooEnum

	IntegerList []*int32

	// A list of lists of strings.
	NestedStringList [][]*string

	StringList []*string

	StringSet []*string

	StructureList []*types.StructureListMember

	TimestampList []*time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpJsonListsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpJsonLists{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpJsonLists{}, middleware.After)
}

func newServiceMetadataMiddleware_opJsonLists(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "JsonLists",
	}
}
