// Code generated by smithy-go-codegen DO NOT EDIT.
package awsrestjson

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/internal/protocoltest/awsrestjson/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// This test case serializes JSON lists for the following cases for both input and
// output:
//
//     * Normal JSON lists.
//
//     * Normal JSON sets.
//
//     * JSON lists of
// lists.
//
//     * Lists of structures.
func (c *Client) JsonLists(ctx context.Context, params *JsonListsInput, optFns ...func(*Options)) (*JsonListsOutput, error) {
	stack := middleware.NewStack("JsonLists", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	stack.Initialize.Add(awsmiddleware.RegisterServiceMetadata{
		Region:         options.Region,
		ServiceName:    "Rest Json Protocol",
		ServiceID:      "restjsonprotocol",
		EndpointPrefix: "restjsonprotocol",
		OperationName:  "JsonLists",
	}, middleware.Before)
	stack.Build.Add(awsmiddleware.RequestInvocationIDMiddleware{}, middleware.After)
	awsmiddleware.AddResolveServiceEndpointMiddleware(stack, options)
	stack.Serialize.Add(&awsRestjson1_serializeOpJsonLists{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpJsonLists{}, middleware.After)
	stack.Deserialize.Add(awsmiddleware.AttemptClockSkewMiddleware{}, middleware.After)
	stack.Finalize.Add(retry.NewAttemptMiddleware(options.Retryer, smithyhttp.RequestCloner), middleware.After)
	stack.Finalize.Add(retry.MetricsHeaderMiddleware{}, middleware.After)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     c.ServiceID(),
			OperationName: "JsonLists",
			Err:           err,
		}
	}
	out := result.(*JsonListsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type JsonListsInput struct {
	BooleanList []*bool
	EnumList    []types.FooEnum
	IntegerList []*int32
	// A list of lists of strings.
	NestedStringList [][]*string
	StringList       []*string
	StringSet        []*string
	StructureList    []*types.StructureListMember
	TimestampList    []*time.Time
}

type JsonListsOutput struct {
	BooleanList []*bool
	EnumList    []types.FooEnum
	IntegerList []*int32
	// A list of lists of strings.
	NestedStringList [][]*string
	StringList       []*string
	StringSet        []*string
	StructureList    []*types.StructureListMember
	TimestampList    []*time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}
