// Code generated by smithy-go-codegen DO NOT EDIT.
package awsrestjson

import (
	"bytes"
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/awslabs/smithy-go/middleware"
	"github.com/awslabs/smithy-go/ptr"
	smithytesting "github.com/awslabs/smithy-go/testing"
	smithytime "github.com/awslabs/smithy-go/time"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"testing"
)

func TestClient_TimestampFormatHeaders_awsRestjson1Serialize(t *testing.T) {
	cases := map[string]struct {
		Params        *TimestampFormatHeadersInput
		ExpectMethod  string
		ExpectURIPath string
		ExpectQuery   []smithytesting.QueryItem
		RequireQuery  []string
		ForbidQuery   []string
		ExpectHeader  http.Header
		RequireHeader []string
		ForbidHeader  []string
		BodyMediaType string
		BodyAssert    func(io.Reader) error
	}{
		// Tests how timestamp request headers are serialized
		"RestJsonTimestampFormatHeaders": {
			Params: &TimestampFormatHeadersInput{
				MemberEpochSeconds: ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				MemberHttpDate:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				MemberDateTime:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				DefaultFormat:      ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				TargetEpochSeconds: ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				TargetHttpDate:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				TargetDateTime:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
			},
			ExpectMethod:  "POST",
			ExpectURIPath: "/TimestampFormatHeaders",
			ExpectQuery:   []smithytesting.QueryItem{},
			ExpectHeader: http.Header{
				"X-defaultFormat":      []string{"Mon, 16 Dec 2019 23:48:18 GMT"},
				"X-memberDateTime":     []string{"2019-12-16T23:48:18Z"},
				"X-memberEpochSeconds": []string{"1576540098"},
				"X-memberHttpDate":     []string{"Mon, 16 Dec 2019 23:48:18 GMT"},
				"X-targetDateTime":     []string{"2019-12-16T23:48:18Z"},
				"X-targetEpochSeconds": []string{"1576540098"},
				"X-targetHttpDate":     []string{"Mon, 16 Dec 2019 23:48:18 GMT"},
			},
			BodyAssert: func(actual io.Reader) error {
				return smithytesting.CompareReaderEmpty(actual)
			},
		},
	}
	for name, c := range cases {
		t.Run(name, func(t *testing.T) {
			var actualReq *http.Request
			client := New(Options{
				HTTPClient: smithyhttp.ClientDoFunc(func(r *http.Request) (*http.Response, error) {
					actualReq = r
					return &http.Response{
						StatusCode: 200,
						Header:     http.Header{},
						Body:       ioutil.NopCloser(strings.NewReader("")),
					}, nil
				}),
				APIOptions: []APIOptionFunc{
					func(s *middleware.Stack) error {
						s.Build.Clear()
						s.Finalize.Clear()
						return nil
					},
				},
				EndpointResolver: aws.EndpointResolverFunc(func(service, region string) (e aws.Endpoint, err error) {
					e.URL = "https://127.0.0.1"
					e.SigningRegion = "us-west-2"
					return e, err
				}),
				Region: "us-west-2"})
			result, err := client.TimestampFormatHeaders(context.Background(), c.Params)
			if err != nil {
				t.Fatalf("expect nil err, got %v", err)
			}
			if result == nil {
				t.Fatalf("expect not nil result")
			}
			if e, a := c.ExpectMethod, actualReq.Method; e != a {
				t.Errorf("expect %v method, got %v", e, a)
			}
			if e, a := c.ExpectURIPath, actualReq.URL.Path; e != a {
				t.Errorf("expect %v path, got %v", e, a)
			}
			queryItems := smithytesting.ParseRawQuery(actualReq.URL.RawQuery)
			smithytesting.AssertHasQuery(t, c.ExpectQuery, queryItems)
			smithytesting.AssertHasQueryKeys(t, c.RequireQuery, queryItems)
			smithytesting.AssertNotHaveQueryKeys(t, c.ForbidQuery, queryItems)
			smithytesting.AssertHasHeader(t, c.ExpectHeader, actualReq.Header)
			smithytesting.AssertHasHeaderKeys(t, c.RequireHeader, actualReq.Header)
			smithytesting.AssertNotHaveHeaderKeys(t, c.ForbidHeader, actualReq.Header)
			if actualReq.Body != nil {
				defer actualReq.Body.Close()
			}
			if c.BodyAssert != nil {
				if err := c.BodyAssert(actualReq.Body); err != nil {
					t.Errorf("expect body equal, got %v", err)
				}
			}
		})
	}
}

func TestClient_TimestampFormatHeaders_awsRestjson1Deserialize(t *testing.T) {
	cases := map[string]struct {
		StatusCode    int
		Header        http.Header
		BodyMediaType string
		Body          []byte
		ExpectResult  *TimestampFormatHeadersOutput
	}{
		// Tests how timestamp response headers are serialized
		"RestJsonTimestampFormatHeaders": {
			StatusCode: 200,
			Header: http.Header{
				"X-defaultFormat":      []string{"Mon, 16 Dec 2019 23:48:18 GMT"},
				"X-memberDateTime":     []string{"2019-12-16T23:48:18Z"},
				"X-memberEpochSeconds": []string{"1576540098"},
				"X-memberHttpDate":     []string{"Mon, 16 Dec 2019 23:48:18 GMT"},
				"X-targetDateTime":     []string{"2019-12-16T23:48:18Z"},
				"X-targetEpochSeconds": []string{"1576540098"},
				"X-targetHttpDate":     []string{"Mon, 16 Dec 2019 23:48:18 GMT"},
			},
			Body: []byte(``),
			ExpectResult: &TimestampFormatHeadersOutput{
				MemberEpochSeconds: ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				MemberHttpDate:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				MemberDateTime:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				DefaultFormat:      ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				TargetEpochSeconds: ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				TargetHttpDate:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
				TargetDateTime:     ptr.Time(smithytime.ParseEpochSeconds(1576540098)),
			},
		},
	}
	for name, c := range cases {
		t.Run(name, func(t *testing.T) {
			client := New(Options{
				HTTPClient: smithyhttp.ClientDoFunc(func(r *http.Request) (*http.Response, error) {
					return &http.Response{
						StatusCode: c.StatusCode,
						Header:     c.Header.Clone(),
						Body:       ioutil.NopCloser(bytes.NewReader(c.Body)),
					}, nil
				}),
				APIOptions: []APIOptionFunc{
					func(s *middleware.Stack) error {
						s.Build.Clear()
						s.Finalize.Clear()
						return nil
					},
				},
				EndpointResolver: aws.EndpointResolverFunc(func(service, region string) (e aws.Endpoint, err error) {
					e.URL = "https://127.0.0.1"
					e.SigningRegion = "us-west-2"
					return e, err
				}),
				Region: "us-west-2"})
			var params TimestampFormatHeadersInput
			result, err := client.TimestampFormatHeaders(context.Background(), &params)
			if err != nil {
				t.Fatalf("expect nil err, got %v", err)
			}
			if result == nil {
				t.Fatalf("expect not nil result")
			}
			if diff := cmp.Diff(c.ExpectResult, result, cmpopts.IgnoreUnexported(middleware.Metadata{})); len(diff) != 0 {
				t.Errorf("expect c.ExpectResult value match:\n%s", diff)
			}
		})
	}
}
