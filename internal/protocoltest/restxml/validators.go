// Code generated by smithy-go-codegen DO NOT EDIT.
package restxml

import (
	"context"
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
)

type validateOpConstantQueryString struct {
}

func (*validateOpConstantQueryString) ID() string {
	return "validateOpConstantQueryString"
}

func (m *validateOpConstantQueryString) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ConstantQueryStringInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpConstantQueryStringInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpHttpRequestWithGreedyLabelInPath struct {
}

func (*validateOpHttpRequestWithGreedyLabelInPath) ID() string {
	return "validateOpHttpRequestWithGreedyLabelInPath"
}

func (m *validateOpHttpRequestWithGreedyLabelInPath) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*HttpRequestWithGreedyLabelInPathInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpHttpRequestWithGreedyLabelInPathInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpHttpRequestWithLabelsAndTimestampFormat struct {
}

func (*validateOpHttpRequestWithLabelsAndTimestampFormat) ID() string {
	return "validateOpHttpRequestWithLabelsAndTimestampFormat"
}

func (m *validateOpHttpRequestWithLabelsAndTimestampFormat) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*HttpRequestWithLabelsAndTimestampFormatInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpHttpRequestWithLabelsAndTimestampFormatInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpHttpRequestWithLabels struct {
}

func (*validateOpHttpRequestWithLabels) ID() string {
	return "validateOpHttpRequestWithLabels"
}

func (m *validateOpHttpRequestWithLabels) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*HttpRequestWithLabelsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpHttpRequestWithLabelsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func validateOpConstantQueryStringInput(v *ConstantQueryStringInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ConstantQueryStringInput"}
	if v.Hello == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Hello"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpHttpRequestWithGreedyLabelInPathInput(v *HttpRequestWithGreedyLabelInPathInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "HttpRequestWithGreedyLabelInPathInput"}
	if v.Baz == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Baz"))
	}
	if v.Foo == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Foo"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpHttpRequestWithLabelsAndTimestampFormatInput(v *HttpRequestWithLabelsAndTimestampFormatInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "HttpRequestWithLabelsAndTimestampFormatInput"}
	if v.DefaultFormat == nil {
		invalidParams.Add(smithy.NewErrParamRequired("DefaultFormat"))
	}
	if v.MemberDateTime == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemberDateTime"))
	}
	if v.MemberEpochSeconds == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemberEpochSeconds"))
	}
	if v.MemberHttpDate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MemberHttpDate"))
	}
	if v.TargetDateTime == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetDateTime"))
	}
	if v.TargetEpochSeconds == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetEpochSeconds"))
	}
	if v.TargetHttpDate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetHttpDate"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpHttpRequestWithLabelsInput(v *HttpRequestWithLabelsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "HttpRequestWithLabelsInput"}
	if v.Boolean == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Boolean"))
	}
	if v.Double == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Double"))
	}
	if v.Float == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Float"))
	}
	if v.Integer == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Integer"))
	}
	if v.Long == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Long"))
	}
	if v.Short == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Short"))
	}
	if v.String_ == nil {
		invalidParams.Add(smithy.NewErrParamRequired("String_"))
	}
	if v.Timestamp == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Timestamp"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
