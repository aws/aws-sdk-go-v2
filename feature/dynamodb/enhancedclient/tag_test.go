package enhancedclient

import (
	"fmt"
	"reflect"
	"testing"
)

func TestTagParse(t *testing.T) {
	cases := []struct {
		in       reflect.StructTag
		json, av bool
		expect   tag
	}{
		{`json:""`, true, false, tag{}},
		{`json:"name"`, true, false, tag{Name: "name"}},
		{`json:"name,omitempty"`, true, false, tag{Name: "name", OmitEmpty: true}},
		{`json:"-"`, true, false, tag{Ignore: true}},
		{`json:",omitempty"`, true, false, tag{OmitEmpty: true}},
		{`json:",string"`, true, false, tag{AsString: true}},
		{`dynamodbav:""`, false, true, tag{}},
		{`dynamodbav:","`, false, true, tag{}},
		{`dynamodbav:"name"`, false, true, tag{Name: "name"}},
		{`dynamodbav:"name"`, false, true, tag{Name: "name"}},
		{`dynamodbav:"-"`, false, true, tag{Ignore: true}},
		{`dynamodbav:",omitempty"`, false, true, tag{OmitEmpty: true}},
		{`dynamodbav:",omitemptyelem"`, false, true, tag{OmitEmptyElem: true}},
		{`dynamodbav:",string"`, false, true, tag{AsString: true}},
		{`dynamodbav:",binaryset"`, false, true, tag{AsBinSet: true}},
		{`dynamodbav:",numberset"`, false, true, tag{AsNumSet: true}},
		{`dynamodbav:",stringset"`, false, true, tag{AsStrSet: true}},
		{`dynamodbav:",stringset,omitemptyelem"`, false, true, tag{AsStrSet: true, OmitEmptyElem: true}},
		{`dynamodbav:"name,stringset,omitemptyelem"`, false, true, tag{Name: "name", AsStrSet: true, OmitEmptyElem: true}},
		{`dynamodbav:",version"`, false, true, tag{Version: true}},
		{`dynamodbav:",preserveempty"`, false, true, tag{PreserveEmpty: true}},
		{`dynamodbav:",json"`, false, true, tag{JSON: true}},
		{`dynamodbav:",autogenerated:key"`, false, true, tag{AutoGenerated: true, Generator: "key"}},
		{`dynamodbav:",atomiccounter"`, false, true, tag{AtomicCounter: true}},
		{`dynamodbav:",autogenerated:timestamp"`, false, true, tag{AutoGenerated: true, Generator: "timestamp"}},
		{`dynamodbav:",enumasstring"`, false, true, tag{EnumAsString: true}},
		{`dynamodbav:",partition"`, false, true, tag{Partition: true}},
		{`dynamodbav:",sort"`, false, true, tag{Sort: true}},
		{`dynamodbgetter:"Prop" dynamodbsetter:"SetProp"`, false, true, tag{Getter: "", Setter: ""}},
		{`dynamodbav:"prop" dynamodbgetter:"Prop" dynamodbsetter:"SetProp"`, false, true, tag{Name: "prop", Getter: "Prop", Setter: "SetProp"}},
		{`dynamodbav:"prop" dynamodbindex:"idx"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "idx"}}}},
		{`dynamodbav:"prop" dynamodbindex:"idx,local"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "idx", Local: true}}}},
		{`dynamodbav:"prop" dynamodbindex:"idx,global"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "idx", Global: true}}}},
		{`dynamodbav:"prop" dynamodbindex:"idx,partition"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "idx", Partition: true}}}},
		{`dynamodbav:"prop" dynamodbindex:"idx,sort"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "idx", Sort: true}}}},
		{`dynamodbav:"prop" dynamodbindex:"idx,global,local,partition,sort"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "idx", Global: true, Local: true, Partition: true, Sort: true}}}},
		{`dynamodbav:"prop" dynamodbindex:",global,local,partition,sort"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "", Global: true, Local: true, Partition: true, Sort: true}}}},
		{`dynamodbav:"prop" dynamodbindex:","`, false, true, tag{Name: "prop", Indexes: []Index{{}}}},
		{`dynamodbav:"prop" dynamodbindex:""`, false, true, tag{Name: "prop"}},
		// unsupported tags are ignored
		{`dynamodbav:"prop" dynamodbindex:"idx,unsupportedtag"`, false, true, tag{Name: "prop", Indexes: []Index{{Name: "idx"}}}},
		{`dynamodbav:",unsupportedtag"`, false, true, tag{}},
		//{`dynamodbav:",flatten"`, false, true, tag{Flatten: true}},
	}

	for i, c := range cases {
		t.Run(fmt.Sprintf("%d", i), func(t *testing.T) {
			actual := tag{}
			if c.json {
				actual.parseStructTag("json", c.in)
			}
			if c.av {
				actual.parseAVTag(c.in)
			}
			if e, a := c.expect, actual; !reflect.DeepEqual(e, a) {
				t.Errorf("case %d, expect %v, got %v", i, e, a)
			}
		})
	}
}
