// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package eks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eks/types"
)

const opUpdateNodegroupVersion = "UpdateNodegroupVersion"

// UpdateNodegroupVersionRequest returns a request value for making API operation for
// Amazon Elastic Kubernetes Service.
//
// Updates the Kubernetes version or AMI version of an Amazon EKS managed node
// group.
//
// You can update to the latest available AMI version of a node group's current
// Kubernetes version by not specifying a Kubernetes version in the request.
// You can update to the latest AMI version of your cluster's current Kubernetes
// version by specifying your cluster's Kubernetes version in the request. For
// more information, see Amazon EKS-Optimized Linux AMI Versions (https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html)
// in the Amazon EKS User Guide.
//
// You cannot roll back a node group to an earlier Kubernetes version or AMI
// version.
//
// When a node in a managed node group is terminated due to a scaling action
// or update, the pods in that node are drained first. Amazon EKS attempts to
// drain the nodes gracefully and will fail if it is unable to do so. You can
// force the update if Amazon EKS is unable to drain the nodes as a result of
// a pod disruption budget issue.
//
//    // Example sending a request using UpdateNodegroupVersionRequest.
//    req := client.UpdateNodegroupVersionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/eks-2017-11-01/UpdateNodegroupVersion
func (c *Client) UpdateNodegroupVersionRequest(input *types.UpdateNodegroupVersionInput) UpdateNodegroupVersionRequest {
	op := &aws.Operation{
		Name:       opUpdateNodegroupVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/clusters/{name}/node-groups/{nodegroupName}/update-version",
	}

	if input == nil {
		input = &types.UpdateNodegroupVersionInput{}
	}

	req := c.newRequest(op, input, &types.UpdateNodegroupVersionOutput{})
	return UpdateNodegroupVersionRequest{Request: req, Input: input, Copy: c.UpdateNodegroupVersionRequest}
}

// UpdateNodegroupVersionRequest is the request type for the
// UpdateNodegroupVersion API operation.
type UpdateNodegroupVersionRequest struct {
	*aws.Request
	Input *types.UpdateNodegroupVersionInput
	Copy  func(*types.UpdateNodegroupVersionInput) UpdateNodegroupVersionRequest
}

// Send marshals and sends the UpdateNodegroupVersion API request.
func (r UpdateNodegroupVersionRequest) Send(ctx context.Context) (*UpdateNodegroupVersionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateNodegroupVersionResponse{
		UpdateNodegroupVersionOutput: r.Request.Data.(*types.UpdateNodegroupVersionOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateNodegroupVersionResponse is the response type for the
// UpdateNodegroupVersion API operation.
type UpdateNodegroupVersionResponse struct {
	*types.UpdateNodegroupVersionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateNodegroupVersion request.
func (r *UpdateNodegroupVersionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
