// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package eks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eks/types"
)

const opUpdateClusterVersion = "UpdateClusterVersion"

// UpdateClusterVersionRequest returns a request value for making API operation for
// Amazon Elastic Kubernetes Service.
//
// Updates an Amazon EKS cluster to the specified Kubernetes version. Your cluster
// continues to function during the update. The response output includes an
// update ID that you can use to track the status of your cluster update with
// the DescribeUpdate API operation.
//
// Cluster updates are asynchronous, and they should finish within a few minutes.
// During an update, the cluster status moves to UPDATING (this status transition
// is eventually consistent). When the update is complete (either Failed or
// Successful), the cluster status moves to Active.
//
// If your cluster has managed node groups attached to it, all of your node
// groups’ Kubernetes versions must match the cluster’s Kubernetes version
// in order to update the cluster to a new Kubernetes version.
//
//    // Example sending a request using UpdateClusterVersionRequest.
//    req := client.UpdateClusterVersionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/eks-2017-11-01/UpdateClusterVersion
func (c *Client) UpdateClusterVersionRequest(input *types.UpdateClusterVersionInput) UpdateClusterVersionRequest {
	op := &aws.Operation{
		Name:       opUpdateClusterVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/clusters/{name}/updates",
	}

	if input == nil {
		input = &types.UpdateClusterVersionInput{}
	}

	req := c.newRequest(op, input, &types.UpdateClusterVersionOutput{})
	return UpdateClusterVersionRequest{Request: req, Input: input, Copy: c.UpdateClusterVersionRequest}
}

// UpdateClusterVersionRequest is the request type for the
// UpdateClusterVersion API operation.
type UpdateClusterVersionRequest struct {
	*aws.Request
	Input *types.UpdateClusterVersionInput
	Copy  func(*types.UpdateClusterVersionInput) UpdateClusterVersionRequest
}

// Send marshals and sends the UpdateClusterVersion API request.
func (r UpdateClusterVersionRequest) Send(ctx context.Context) (*UpdateClusterVersionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateClusterVersionResponse{
		UpdateClusterVersionOutput: r.Request.Data.(*types.UpdateClusterVersionOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateClusterVersionResponse is the response type for the
// UpdateClusterVersion API operation.
type UpdateClusterVersionResponse struct {
	*types.UpdateClusterVersionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateClusterVersion request.
func (r *UpdateClusterVersionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
