// Code generated by smithy-go-codegen DO NOT EDIT.

package directoryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Shares a specified directory (DirectoryId) in your AWS account (directory owner)
// with another AWS account (directory consumer). With this operation you can use
// your directory from any AWS account and from any Amazon VPC within an AWS
// Region. When you share your AWS Managed Microsoft AD directory, AWS Directory
// Service creates a shared directory in the directory consumer account. This
// shared directory contains the metadata to provide access to the directory within
// the directory owner account. The shared directory is visible in all VPCs in the
// directory consumer account. The ShareMethod parameter determines whether the
// specified directory can be shared between AWS accounts inside the same AWS
// organization (ORGANIZATIONS). It also determines whether you can share the
// directory with any other AWS account either inside or outside of the
// organization (HANDSHAKE). The ShareNotes parameter is only used when HANDSHAKE
// is called, which sends a directory sharing request to the directory consumer.
func (c *Client) ShareDirectory(ctx context.Context, params *ShareDirectoryInput, optFns ...func(*Options)) (*ShareDirectoryOutput, error) {
	stack := middleware.NewStack("ShareDirectory", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpShareDirectoryMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpShareDirectoryValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opShareDirectory(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ShareDirectory",
			Err:           err,
		}
	}
	out := result.(*ShareDirectoryOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ShareDirectoryInput struct {
	// Identifier of the AWS Managed Microsoft AD directory that you want to share with
	// other AWS accounts.
	DirectoryId *string
	// Identifier for the directory consumer account with whom the directory is to be
	// shared.
	ShareTarget *types.ShareTarget
	// A directory share request that is sent by the directory owner to the directory
	// consumer. The request includes a typed message to help the directory consumer
	// administrator determine whether to approve or reject the share invitation.
	ShareNotes *string
	// The method used when sharing a directory to determine whether the directory
	// should be shared within your AWS organization (ORGANIZATIONS) or with any AWS
	// account by sending a directory sharing request (HANDSHAKE).
	ShareMethod types.ShareMethod
}

type ShareDirectoryOutput struct {
	// Identifier of the directory that is stored in the directory consumer account
	// that is shared from the specified directory (DirectoryId).
	SharedDirectoryId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpShareDirectoryMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpShareDirectory{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpShareDirectory{}, middleware.After)
}

func newServiceMetadataMiddleware_opShareDirectory(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ds",
		OperationName: "ShareDirectory",
	}
}
