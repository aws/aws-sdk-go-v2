// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package directoryservice

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
)

const opRegisterEventTopic = "RegisterEventTopic"

// RegisterEventTopicRequest returns a request value for making API operation for
// AWS Directory Service.
//
// Associates a directory with an SNS topic. This establishes the directory
// as a publisher to the specified SNS topic. You can then receive email or
// text (SMS) messages when the status of your directory changes. You get notified
// if your directory goes from an Active status to an Impaired or Inoperable
// status. You also receive a notification when the directory returns to an
// Active status.
//
//    // Example sending a request using RegisterEventTopicRequest.
//    req := client.RegisterEventTopicRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ds-2015-04-16/RegisterEventTopic
func (c *Client) RegisterEventTopicRequest(input *types.RegisterEventTopicInput) RegisterEventTopicRequest {
	op := &aws.Operation{
		Name:       opRegisterEventTopic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RegisterEventTopicInput{}
	}

	req := c.newRequest(op, input, &types.RegisterEventTopicOutput{})
	return RegisterEventTopicRequest{Request: req, Input: input, Copy: c.RegisterEventTopicRequest}
}

// RegisterEventTopicRequest is the request type for the
// RegisterEventTopic API operation.
type RegisterEventTopicRequest struct {
	*aws.Request
	Input *types.RegisterEventTopicInput
	Copy  func(*types.RegisterEventTopicInput) RegisterEventTopicRequest
}

// Send marshals and sends the RegisterEventTopic API request.
func (r RegisterEventTopicRequest) Send(ctx context.Context) (*RegisterEventTopicResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RegisterEventTopicResponse{
		RegisterEventTopicOutput: r.Request.Data.(*types.RegisterEventTopicOutput),
		response:                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RegisterEventTopicResponse is the response type for the
// RegisterEventTopic API operation.
type RegisterEventTopicResponse struct {
	*types.RegisterEventTopicOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RegisterEventTopic request.
func (r *RegisterEventTopicResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
