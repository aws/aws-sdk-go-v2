// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package directoryservice

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
)

const opAddIpRoutes = "AddIpRoutes"

// AddIpRoutesRequest returns a request value for making API operation for
// AWS Directory Service.
//
// If the DNS server for your on-premises domain uses a publicly addressable
// IP address, you must add a CIDR address block to correctly route traffic
// to and from your Microsoft AD on Amazon Web Services. AddIpRoutes adds this
// address block. You can also use AddIpRoutes to facilitate routing traffic
// that uses public IP ranges from your Microsoft AD on AWS to a peer VPC.
//
// Before you call AddIpRoutes, ensure that all of the required permissions
// have been explicitly granted through a policy. For details about what permissions
// are required to run the AddIpRoutes operation, see AWS Directory Service
// API Permissions: Actions, Resources, and Conditions Reference (http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html).
//
//    // Example sending a request using AddIpRoutesRequest.
//    req := client.AddIpRoutesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ds-2015-04-16/AddIpRoutes
func (c *Client) AddIpRoutesRequest(input *types.AddIpRoutesInput) AddIpRoutesRequest {
	op := &aws.Operation{
		Name:       opAddIpRoutes,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AddIpRoutesInput{}
	}

	req := c.newRequest(op, input, &types.AddIpRoutesOutput{})
	return AddIpRoutesRequest{Request: req, Input: input, Copy: c.AddIpRoutesRequest}
}

// AddIpRoutesRequest is the request type for the
// AddIpRoutes API operation.
type AddIpRoutesRequest struct {
	*aws.Request
	Input *types.AddIpRoutesInput
	Copy  func(*types.AddIpRoutesInput) AddIpRoutesRequest
}

// Send marshals and sends the AddIpRoutes API request.
func (r AddIpRoutesRequest) Send(ctx context.Context) (*AddIpRoutesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AddIpRoutesResponse{
		AddIpRoutesOutput: r.Request.Data.(*types.AddIpRoutesOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AddIpRoutesResponse is the response type for the
// AddIpRoutes API operation.
type AddIpRoutesResponse struct {
	*types.AddIpRoutesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AddIpRoutes request.
func (r *AddIpRoutesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
