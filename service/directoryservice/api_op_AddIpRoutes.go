// Code generated by smithy-go-codegen DO NOT EDIT.

package directoryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// If the DNS server for your on-premises domain uses a publicly addressable IP
// address, you must add a CIDR address block to correctly route traffic to and
// from your Microsoft AD on Amazon Web Services. AddIpRoutes adds this address
// block. You can also use AddIpRoutes to facilitate routing traffic that uses
// public IP ranges from your Microsoft AD on AWS to a peer VPC. Before you call
// AddIpRoutes, ensure that all of the required permissions have been explicitly
// granted through a policy. For details about what permissions are required to run
// the AddIpRoutes operation, see AWS Directory Service API Permissions: Actions,
// Resources, and Conditions Reference
// (http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html).
func (c *Client) AddIpRoutes(ctx context.Context, params *AddIpRoutesInput, optFns ...func(*Options)) (*AddIpRoutesOutput, error) {
	stack := middleware.NewStack("AddIpRoutes", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpAddIpRoutesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAddIpRoutesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAddIpRoutes(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "AddIpRoutes",
			Err:           err,
		}
	}
	out := result.(*AddIpRoutesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AddIpRoutesInput struct {
	// Identifier (ID) of the directory to which to add the address block.
	DirectoryId *string
	// IP address blocks, using CIDR format, of the traffic to route. This is often the
	// IP address block of the DNS server used for your on-premises domain.
	IpRoutes []*types.IpRoute
	// If set to true, updates the inbound and outbound rules of the security group
	// that has the description: "AWS created security group for directory ID directory
	// controllers." Following are the new rules: Inbound:
	//
	//     * Type: Custom UDP
	// Rule, Protocol: UDP, Range: 88, Source: 0.0.0.0/0
	//
	//     * Type: Custom UDP Rule,
	// Protocol: UDP, Range: 123, Source: 0.0.0.0/0
	//
	//     * Type: Custom UDP Rule,
	// Protocol: UDP, Range: 138, Source: 0.0.0.0/0
	//
	//     * Type: Custom UDP Rule,
	// Protocol: UDP, Range: 389, Source: 0.0.0.0/0
	//
	//     * Type: Custom UDP Rule,
	// Protocol: UDP, Range: 464, Source: 0.0.0.0/0
	//
	//     * Type: Custom UDP Rule,
	// Protocol: UDP, Range: 445, Source: 0.0.0.0/0
	//
	//     * Type: Custom TCP Rule,
	// Protocol: TCP, Range: 88, Source: 0.0.0.0/0
	//
	//     * Type: Custom TCP Rule,
	// Protocol: TCP, Range: 135, Source: 0.0.0.0/0
	//
	//     * Type: Custom TCP Rule,
	// Protocol: TCP, Range: 445, Source: 0.0.0.0/0
	//
	//     * Type: Custom TCP Rule,
	// Protocol: TCP, Range: 464, Source: 0.0.0.0/0
	//
	//     * Type: Custom TCP Rule,
	// Protocol: TCP, Range: 636, Source: 0.0.0.0/0
	//
	//     * Type: Custom TCP Rule,
	// Protocol: TCP, Range: 1024-65535, Source: 0.0.0.0/0
	//
	//     * Type: Custom TCP
	// Rule, Protocol: TCP, Range: 3268-33269, Source: 0.0.0.0/0
	//
	//     * Type: DNS
	// (UDP), Protocol: UDP, Range: 53, Source: 0.0.0.0/0
	//
	//     * Type: DNS (TCP),
	// Protocol: TCP, Range: 53, Source: 0.0.0.0/0
	//
	//     * Type: LDAP, Protocol: TCP,
	// Range: 389, Source: 0.0.0.0/0
	//
	//     * Type: All ICMP, Protocol: All, Range: N/A,
	// Source: 0.0.0.0/0
	//
	//     <p></p> <p>Outbound:</p> <ul> <li> <p>Type: All traffic,
	// Protocol: All, Range: All, Destination: 0.0.0.0/0</p> </li> </ul> <p>These
	// security rules impact an internal network interface that is not exposed
	// publicly.</p>
	UpdateSecurityGroupForDirectoryControllers *bool
}

type AddIpRoutesOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpAddIpRoutesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpAddIpRoutes{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpAddIpRoutes{}, middleware.After)
}

func newServiceMetadataMiddleware_opAddIpRoutes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ds",
		OperationName: "AddIpRoutes",
	}
}
