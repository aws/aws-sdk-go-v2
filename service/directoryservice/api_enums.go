// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package directoryservice

type CertificateState string

// Enum values for CertificateState
const (
	CertificateStateRegistering      CertificateState = "Registering"
	CertificateStateRegistered       CertificateState = "Registered"
	CertificateStateRegisterFailed   CertificateState = "RegisterFailed"
	CertificateStateDeregistering    CertificateState = "Deregistering"
	CertificateStateDeregistered     CertificateState = "Deregistered"
	CertificateStateDeregisterFailed CertificateState = "DeregisterFailed"
)

func (enum CertificateState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum CertificateState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DirectoryEdition string

// Enum values for DirectoryEdition
const (
	DirectoryEditionEnterprise DirectoryEdition = "Enterprise"
	DirectoryEditionStandard   DirectoryEdition = "Standard"
)

func (enum DirectoryEdition) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DirectoryEdition) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DirectorySize string

// Enum values for DirectorySize
const (
	DirectorySizeSmall DirectorySize = "Small"
	DirectorySizeLarge DirectorySize = "Large"
)

func (enum DirectorySize) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DirectorySize) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DirectoryStage string

// Enum values for DirectoryStage
const (
	DirectoryStageRequested     DirectoryStage = "Requested"
	DirectoryStageCreating      DirectoryStage = "Creating"
	DirectoryStageCreated       DirectoryStage = "Created"
	DirectoryStageActive        DirectoryStage = "Active"
	DirectoryStageInoperable    DirectoryStage = "Inoperable"
	DirectoryStageImpaired      DirectoryStage = "Impaired"
	DirectoryStageRestoring     DirectoryStage = "Restoring"
	DirectoryStageRestoreFailed DirectoryStage = "RestoreFailed"
	DirectoryStageDeleting      DirectoryStage = "Deleting"
	DirectoryStageDeleted       DirectoryStage = "Deleted"
	DirectoryStageFailed        DirectoryStage = "Failed"
)

func (enum DirectoryStage) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DirectoryStage) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DirectoryType string

// Enum values for DirectoryType
const (
	DirectoryTypeSimpleAd          DirectoryType = "SimpleAD"
	DirectoryTypeAdconnector       DirectoryType = "ADConnector"
	DirectoryTypeMicrosoftAd       DirectoryType = "MicrosoftAD"
	DirectoryTypeSharedMicrosoftAd DirectoryType = "SharedMicrosoftAD"
)

func (enum DirectoryType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DirectoryType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DomainControllerStatus string

// Enum values for DomainControllerStatus
const (
	DomainControllerStatusCreating  DomainControllerStatus = "Creating"
	DomainControllerStatusActive    DomainControllerStatus = "Active"
	DomainControllerStatusImpaired  DomainControllerStatus = "Impaired"
	DomainControllerStatusRestoring DomainControllerStatus = "Restoring"
	DomainControllerStatusDeleting  DomainControllerStatus = "Deleting"
	DomainControllerStatusDeleted   DomainControllerStatus = "Deleted"
	DomainControllerStatusFailed    DomainControllerStatus = "Failed"
)

func (enum DomainControllerStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DomainControllerStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IpRouteStatusMsg string

// Enum values for IpRouteStatusMsg
const (
	IpRouteStatusMsgAdding       IpRouteStatusMsg = "Adding"
	IpRouteStatusMsgAdded        IpRouteStatusMsg = "Added"
	IpRouteStatusMsgRemoving     IpRouteStatusMsg = "Removing"
	IpRouteStatusMsgRemoved      IpRouteStatusMsg = "Removed"
	IpRouteStatusMsgAddFailed    IpRouteStatusMsg = "AddFailed"
	IpRouteStatusMsgRemoveFailed IpRouteStatusMsg = "RemoveFailed"
)

func (enum IpRouteStatusMsg) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IpRouteStatusMsg) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LDAPSStatus string

// Enum values for LDAPSStatus
const (
	LDAPSStatusEnabling     LDAPSStatus = "Enabling"
	LDAPSStatusEnabled      LDAPSStatus = "Enabled"
	LDAPSStatusEnableFailed LDAPSStatus = "EnableFailed"
	LDAPSStatusDisabled     LDAPSStatus = "Disabled"
)

func (enum LDAPSStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LDAPSStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LDAPSType string

// Enum values for LDAPSType
const (
	LDAPSTypeClient LDAPSType = "Client"
)

func (enum LDAPSType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LDAPSType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RadiusAuthenticationProtocol string

// Enum values for RadiusAuthenticationProtocol
const (
	RadiusAuthenticationProtocolPap      RadiusAuthenticationProtocol = "PAP"
	RadiusAuthenticationProtocolChap     RadiusAuthenticationProtocol = "CHAP"
	RadiusAuthenticationProtocolMsChapv1 RadiusAuthenticationProtocol = "MS-CHAPv1"
	RadiusAuthenticationProtocolMsChapv2 RadiusAuthenticationProtocol = "MS-CHAPv2"
)

func (enum RadiusAuthenticationProtocol) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RadiusAuthenticationProtocol) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RadiusStatus string

// Enum values for RadiusStatus
const (
	RadiusStatusCreating  RadiusStatus = "Creating"
	RadiusStatusCompleted RadiusStatus = "Completed"
	RadiusStatusFailed    RadiusStatus = "Failed"
)

func (enum RadiusStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RadiusStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReplicationScope string

// Enum values for ReplicationScope
const (
	ReplicationScopeDomain ReplicationScope = "Domain"
)

func (enum ReplicationScope) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReplicationScope) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SchemaExtensionStatus string

// Enum values for SchemaExtensionStatus
const (
	SchemaExtensionStatusInitializing       SchemaExtensionStatus = "Initializing"
	SchemaExtensionStatusCreatingSnapshot   SchemaExtensionStatus = "CreatingSnapshot"
	SchemaExtensionStatusUpdatingSchema     SchemaExtensionStatus = "UpdatingSchema"
	SchemaExtensionStatusReplicating        SchemaExtensionStatus = "Replicating"
	SchemaExtensionStatusCancelInProgress   SchemaExtensionStatus = "CancelInProgress"
	SchemaExtensionStatusRollbackInProgress SchemaExtensionStatus = "RollbackInProgress"
	SchemaExtensionStatusCancelled          SchemaExtensionStatus = "Cancelled"
	SchemaExtensionStatusFailed             SchemaExtensionStatus = "Failed"
	SchemaExtensionStatusCompleted          SchemaExtensionStatus = "Completed"
)

func (enum SchemaExtensionStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SchemaExtensionStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SelectiveAuth string

// Enum values for SelectiveAuth
const (
	SelectiveAuthEnabled  SelectiveAuth = "Enabled"
	SelectiveAuthDisabled SelectiveAuth = "Disabled"
)

func (enum SelectiveAuth) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SelectiveAuth) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ShareMethod string

// Enum values for ShareMethod
const (
	ShareMethodOrganizations ShareMethod = "ORGANIZATIONS"
	ShareMethodHandshake     ShareMethod = "HANDSHAKE"
)

func (enum ShareMethod) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ShareMethod) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ShareStatus string

// Enum values for ShareStatus
const (
	ShareStatusShared            ShareStatus = "Shared"
	ShareStatusPendingAcceptance ShareStatus = "PendingAcceptance"
	ShareStatusRejected          ShareStatus = "Rejected"
	ShareStatusRejecting         ShareStatus = "Rejecting"
	ShareStatusRejectFailed      ShareStatus = "RejectFailed"
	ShareStatusSharing           ShareStatus = "Sharing"
	ShareStatusShareFailed       ShareStatus = "ShareFailed"
	ShareStatusDeleted           ShareStatus = "Deleted"
	ShareStatusDeleting          ShareStatus = "Deleting"
)

func (enum ShareStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ShareStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SnapshotStatus string

// Enum values for SnapshotStatus
const (
	SnapshotStatusCreating  SnapshotStatus = "Creating"
	SnapshotStatusCompleted SnapshotStatus = "Completed"
	SnapshotStatusFailed    SnapshotStatus = "Failed"
)

func (enum SnapshotStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SnapshotStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SnapshotType string

// Enum values for SnapshotType
const (
	SnapshotTypeAuto   SnapshotType = "Auto"
	SnapshotTypeManual SnapshotType = "Manual"
)

func (enum SnapshotType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SnapshotType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TargetType string

// Enum values for TargetType
const (
	TargetTypeAccount TargetType = "ACCOUNT"
)

func (enum TargetType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TargetType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TopicStatus string

// Enum values for TopicStatus
const (
	TopicStatusRegistered    TopicStatus = "Registered"
	TopicStatusTopicnotfound TopicStatus = "Topic not found"
	TopicStatusFailed        TopicStatus = "Failed"
	TopicStatusDeleted       TopicStatus = "Deleted"
)

func (enum TopicStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TopicStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TrustDirection string

// Enum values for TrustDirection
const (
	TrustDirectionOneWayOutgoing TrustDirection = "One-Way: Outgoing"
	TrustDirectionOneWayIncoming TrustDirection = "One-Way: Incoming"
	TrustDirectionTwoWay         TrustDirection = "Two-Way"
)

func (enum TrustDirection) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TrustDirection) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TrustState string

// Enum values for TrustState
const (
	TrustStateCreating     TrustState = "Creating"
	TrustStateCreated      TrustState = "Created"
	TrustStateVerifying    TrustState = "Verifying"
	TrustStateVerifyFailed TrustState = "VerifyFailed"
	TrustStateVerified     TrustState = "Verified"
	TrustStateUpdating     TrustState = "Updating"
	TrustStateUpdateFailed TrustState = "UpdateFailed"
	TrustStateUpdated      TrustState = "Updated"
	TrustStateDeleting     TrustState = "Deleting"
	TrustStateDeleted      TrustState = "Deleted"
	TrustStateFailed       TrustState = "Failed"
)

func (enum TrustState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TrustState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TrustType string

// Enum values for TrustType
const (
	TrustTypeForest   TrustType = "Forest"
	TrustTypeExternal TrustType = "External"
)

func (enum TrustType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TrustType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
