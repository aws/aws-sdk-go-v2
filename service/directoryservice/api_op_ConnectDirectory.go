// Code generated by smithy-go-codegen DO NOT EDIT.

package directoryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an AD Connector to connect to an on-premises directory. Before you call
// ConnectDirectory, ensure that all of the required permissions have been
// explicitly granted through a policy. For details about what permissions are
// required to run the ConnectDirectory operation, see AWS Directory Service API
// Permissions: Actions, Resources, and Conditions Reference
// (http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html).
func (c *Client) ConnectDirectory(ctx context.Context, params *ConnectDirectoryInput, optFns ...func(*Options)) (*ConnectDirectoryOutput, error) {
	stack := middleware.NewStack("ConnectDirectory", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpConnectDirectoryMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpConnectDirectoryValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opConnectDirectory(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ConnectDirectory",
			Err:           err,
		}
	}
	out := result.(*ConnectDirectoryOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the inputs for the ConnectDirectory () operation.
type ConnectDirectoryInput struct {
	// The password for the on-premises user account.
	Password *string
	// The size of the directory.
	Size types.DirectorySize
	// The fully qualified name of the on-premises directory, such as corp.example.com.
	Name *string
	// A DirectoryConnectSettings () object that contains additional information for
	// the operation.
	ConnectSettings *types.DirectoryConnectSettings
	// The NetBIOS name of the on-premises directory, such as CORP.
	ShortName *string
	// The tags to be assigned to AD Connector.
	Tags []*types.Tag
	// A description for the directory.
	Description *string
}

// Contains the results of the ConnectDirectory () operation.
type ConnectDirectoryOutput struct {
	// The identifier of the new directory.
	DirectoryId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpConnectDirectoryMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpConnectDirectory{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpConnectDirectory{}, middleware.After)
}

func newServiceMetadataMiddleware_opConnectDirectory(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ds",
		OperationName: "ConnectDirectory",
	}
}
