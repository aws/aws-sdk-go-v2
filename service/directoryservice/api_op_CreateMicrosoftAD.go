// Code generated by smithy-go-codegen DO NOT EDIT.

package directoryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a Microsoft AD directory in the AWS Cloud. For more information, see AWS
// Managed Microsoft AD
// (https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html)
// in the AWS Directory Service Admin Guide. Before you call CreateMicrosoftAD,
// ensure that all of the required permissions have been explicitly granted through
// a policy. For details about what permissions are required to run the
// CreateMicrosoftAD operation, see AWS Directory Service API Permissions: Actions,
// Resources, and Conditions Reference
// (http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html).
func (c *Client) CreateMicrosoftAD(ctx context.Context, params *CreateMicrosoftADInput, optFns ...func(*Options)) (*CreateMicrosoftADOutput, error) {
	stack := middleware.NewStack("CreateMicrosoftAD", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateMicrosoftADMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateMicrosoftADValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateMicrosoftAD(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateMicrosoftAD",
			Err:           err,
		}
	}
	out := result.(*CreateMicrosoftADOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Creates an AWS Managed Microsoft AD directory.
type CreateMicrosoftADInput struct {
	// The tags to be assigned to the AWS Managed Microsoft AD directory.
	Tags []*types.Tag
	// A description for the directory. This label will appear on the AWS console
	// Directory Details page after the directory is created.
	Description *string
	// The fully qualified domain name for the AWS Managed Microsoft AD directory, such
	// as corp.example.com. This name will resolve inside your VPC only. It does not
	// need to be publicly resolvable.
	Name *string
	// The password for the default administrative user named Admin. If you need to
	// change the password for the administrator account, you can use the
	// ResetUserPassword () API call.
	Password *string
	// AWS Managed Microsoft AD is available in two editions: Standard and Enterprise.
	// Enterprise is the default.
	Edition types.DirectoryEdition
	// The NetBIOS name for your domain, such as CORP. If you don't specify a NetBIOS
	// name, it will default to the first part of your directory DNS. For example, CORP
	// for the directory DNS corp.example.com.
	ShortName *string
	// Contains VPC information for the CreateDirectory () or CreateMicrosoftAD ()
	// operation.
	VpcSettings *types.DirectoryVpcSettings
}

// Result of a CreateMicrosoftAD request.
type CreateMicrosoftADOutput struct {
	// The identifier of the directory that was created.
	DirectoryId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateMicrosoftADMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateMicrosoftAD{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateMicrosoftAD{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateMicrosoftAD(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ds",
		OperationName: "CreateMicrosoftAD",
	}
}
