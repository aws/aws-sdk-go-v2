// Code generated by smithy-go-codegen DO NOT EDIT.

package directoryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Lists the address blocks that you have added to a directory.
func (c *Client) ListIpRoutes(ctx context.Context, params *ListIpRoutesInput, optFns ...func(*Options)) (*ListIpRoutesOutput, error) {
	stack := middleware.NewStack("ListIpRoutes", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListIpRoutesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListIpRoutesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListIpRoutes(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListIpRoutes",
			Err:           err,
		}
	}
	out := result.(*ListIpRoutesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListIpRoutesInput struct {
	// Identifier (ID) of the directory for which you want to retrieve the IP
	// addresses.
	DirectoryId *string
	// Maximum number of items to return. If this value is zero, the maximum number of
	// items is specified by the limitations of the operation.
	Limit *int32
	// The ListIpRoutes.NextToken value from a previous call to ListIpRoutes (). Pass
	// null if this is the first call.
	NextToken *string
}

type ListIpRoutesOutput struct {
	// If not null, more results are available. Pass this value for the NextToken
	// parameter in a subsequent call to ListIpRoutes () to retrieve the next set of
	// items.
	NextToken *string
	// A list of IpRoute ()s.
	IpRoutesInfo []*types.IpRouteInfo

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListIpRoutesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListIpRoutes{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListIpRoutes{}, middleware.After)
}

func newServiceMetadataMiddleware_opListIpRoutes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ds",
		OperationName: "ListIpRoutes",
	}
}
