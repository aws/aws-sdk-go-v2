// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AngleUnits string

// Enum values for AngleUnits
const (
	AngleUnitsDegree_angle AngleUnits = "DEGREE_ANGLE"
	AngleUnitsRadian       AngleUnits = "RADIAN"
)

// Values returns all known values for AngleUnits. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (AngleUnits) Values() []AngleUnits {
	return []AngleUnits{
		"DEGREE_ANGLE",
		"RADIAN",
	}
}

type BandwidthUnits string

// Enum values for BandwidthUnits
const (
	BandwidthUnitsGhz BandwidthUnits = "GHz"
	BandwidthUnitsMhz BandwidthUnits = "MHz"
	BandwidthUnitsKhz BandwidthUnits = "kHz"
)

// Values returns all known values for BandwidthUnits. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (BandwidthUnits) Values() []BandwidthUnits {
	return []BandwidthUnits{
		"GHz",
		"MHz",
		"kHz",
	}
}

type ConfigCapabilityType string

// Enum values for ConfigCapabilityType
const (
	ConfigCapabilityTypeAntenna_downlink              ConfigCapabilityType = "antenna-downlink"
	ConfigCapabilityTypeAntenna_downlink_demod_decode ConfigCapabilityType = "antenna-downlink-demod-decode"
	ConfigCapabilityTypeTracking                      ConfigCapabilityType = "tracking"
	ConfigCapabilityTypeDataflow_endpoint             ConfigCapabilityType = "dataflow-endpoint"
	ConfigCapabilityTypeAntenna_uplink                ConfigCapabilityType = "antenna-uplink"
	ConfigCapabilityTypeUplink_echo                   ConfigCapabilityType = "uplink-echo"
)

// Values returns all known values for ConfigCapabilityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ConfigCapabilityType) Values() []ConfigCapabilityType {
	return []ConfigCapabilityType{
		"antenna-downlink",
		"antenna-downlink-demod-decode",
		"tracking",
		"dataflow-endpoint",
		"antenna-uplink",
		"uplink-echo",
	}
}

type ContactStatus string

// Enum values for ContactStatus
const (
	ContactStatusScheduling         ContactStatus = "SCHEDULING"
	ContactStatusFailed_to_schedule ContactStatus = "FAILED_TO_SCHEDULE"
	ContactStatusScheduled          ContactStatus = "SCHEDULED"
	ContactStatusCancelled          ContactStatus = "CANCELLED"
	ContactStatusAws_cancelled      ContactStatus = "AWS_CANCELLED"
	ContactStatusPrepass            ContactStatus = "PREPASS"
	ContactStatusPass               ContactStatus = "PASS"
	ContactStatusPostpass           ContactStatus = "POSTPASS"
	ContactStatusCompleted          ContactStatus = "COMPLETED"
	ContactStatusFailed             ContactStatus = "FAILED"
	ContactStatusAvailable          ContactStatus = "AVAILABLE"
	ContactStatusCancelling         ContactStatus = "CANCELLING"
)

// Values returns all known values for ContactStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ContactStatus) Values() []ContactStatus {
	return []ContactStatus{
		"SCHEDULING",
		"FAILED_TO_SCHEDULE",
		"SCHEDULED",
		"CANCELLED",
		"AWS_CANCELLED",
		"PREPASS",
		"PASS",
		"POSTPASS",
		"COMPLETED",
		"FAILED",
		"AVAILABLE",
		"CANCELLING",
	}
}

type Criticality string

// Enum values for Criticality
const (
	CriticalityRequired  Criticality = "REQUIRED"
	CriticalityPreferred Criticality = "PREFERRED"
	CriticalityRemoved   Criticality = "REMOVED"
)

// Values returns all known values for Criticality. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (Criticality) Values() []Criticality {
	return []Criticality{
		"REQUIRED",
		"PREFERRED",
		"REMOVED",
	}
}

type EirpUnits string

// Enum values for EirpUnits
const (
	EirpUnitsDbw EirpUnits = "dBW"
)

// Values returns all known values for EirpUnits. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (EirpUnits) Values() []EirpUnits {
	return []EirpUnits{
		"dBW",
	}
}

type EndpointStatus string

// Enum values for EndpointStatus
const (
	EndpointStatusCreated  EndpointStatus = "created"
	EndpointStatusCreating EndpointStatus = "creating"
	EndpointStatusDeleted  EndpointStatus = "deleted"
	EndpointStatusDeleting EndpointStatus = "deleting"
	EndpointStatusFailed   EndpointStatus = "failed"
)

// Values returns all known values for EndpointStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (EndpointStatus) Values() []EndpointStatus {
	return []EndpointStatus{
		"created",
		"creating",
		"deleted",
		"deleting",
		"failed",
	}
}

type FrequencyUnits string

// Enum values for FrequencyUnits
const (
	FrequencyUnitsGhz FrequencyUnits = "GHz"
	FrequencyUnitsMhz FrequencyUnits = "MHz"
	FrequencyUnitsKhz FrequencyUnits = "kHz"
)

// Values returns all known values for FrequencyUnits. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (FrequencyUnits) Values() []FrequencyUnits {
	return []FrequencyUnits{
		"GHz",
		"MHz",
		"kHz",
	}
}

type Polarization string

// Enum values for Polarization
const (
	PolarizationRight_hand Polarization = "RIGHT_HAND"
	PolarizationLeft_hand  Polarization = "LEFT_HAND"
	PolarizationNone       Polarization = "NONE"
)

// Values returns all known values for Polarization. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (Polarization) Values() []Polarization {
	return []Polarization{
		"RIGHT_HAND",
		"LEFT_HAND",
		"NONE",
	}
}
