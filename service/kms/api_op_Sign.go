// Code generated by smithy-go-codegen DO NOT EDIT.

package kms

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a digital signature (https://en.wikipedia.org/wiki/Digital_signature)
// for a message or message digest by using the private key in an asymmetric CMK.
// To verify the signature, use the Verify () operation, or use the public key in
// the same asymmetric CMK outside of AWS KMS. For information about symmetric and
// asymmetric CMKs, see Using Symmetric and Asymmetric CMKs
// (https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html)
// in the AWS Key Management Service Developer Guide. Digital signatures are
// generated and verified by using asymmetric key pair, such as an RSA or ECC pair
// that is represented by an asymmetric customer master key (CMK). The key owner
// (or an authorized user) uses their private key to sign a message. Anyone with
// the public key can verify that the message was signed with that particular
// private key and that the message hasn't changed since it was signed. To use the
// Sign operation, provide the following information:
//
//     * Use the KeyId
// parameter to identify an asymmetric CMK with a KeyUsage value of SIGN_VERIFY. To
// get the KeyUsage value of a CMK, use the DescribeKey () operation. The caller
// must have kms:Sign permission on the CMK.
//
//     * Use the Message parameter to
// specify the message or message digest to sign. You can submit messages of up to
// 4096 bytes. To sign a larger message, generate a hash digest of the message, and
// then provide the hash digest in the Message parameter. To indicate whether the
// message is a full message or a digest, use the MessageType parameter.
//
//     *
// Choose a signing algorithm that is compatible with the CMK.
//
// When signing a
// message, be sure to record the CMK and the signing algorithm. This information
// is required to verify the signature. To verify the signature that this operation
// generates, use the Verify () operation. Or use the GetPublicKey () operation to
// download the public key and then use the public key to verify the signature
// outside of AWS KMS. The CMK that you use for this operation must be in a
// compatible key state. For details, see How Key State Affects Use of a Customer
// Master Key
// (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the
// AWS Key Management Service Developer Guide.
func (c *Client) Sign(ctx context.Context, params *SignInput, optFns ...func(*Options)) (*SignOutput, error) {
	stack := middleware.NewStack("Sign", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpSignMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSignValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSign(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "Sign",
			Err:           err,
		}
	}
	out := result.(*SignOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SignInput struct {
	// Identifies an asymmetric CMK. AWS KMS uses the private key in the asymmetric CMK
	// to sign the message. The KeyUsage type of the CMK must be SIGN_VERIFY. To find
	// the KeyUsage of a CMK, use the DescribeKey () operation.  <p>To specify a CMK,
	// use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using
	// an alias name, prefix it with <code>"alias/"</code>. To specify a CMK in a
	// different AWS account, you must use the key ARN or alias ARN.</p> <p>For
	// example:</p> <ul> <li> <p>Key ID:
	// <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN:
	// <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
	// </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li>
	// <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
	// </p> </li> </ul> <p>To get the key ID and key ARN for a CMK, use <a>ListKeys</a>
	// or <a>DescribeKey</a>. To get the alias name and alias ARN, use
	// <a>ListAliases</a>.</p>
	KeyId *string
	// Specifies the signing algorithm to use when signing the message. Choose an
	// algorithm that is compatible with the type and size of the specified asymmetric
	// CMK.
	SigningAlgorithm types.SigningAlgorithmSpec
	// A list of grant tokens. For more information, see Grant Tokens
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token)
	// in the AWS Key Management Service Developer Guide.
	GrantTokens []*string
	// Tells AWS KMS whether the value of the Message parameter is a message or message
	// digest. The default value, RAW, indicates a message. To indicate a message
	// digest, enter DIGEST.
	MessageType types.MessageType
	// Specifies the message or message digest to sign. Messages can be 0-4096 bytes.
	// To sign a larger message, provide the message digest. If you provide a message,
	// AWS KMS generates a hash digest of the message and then signs it.
	Message []byte
}

type SignOutput struct {
	// The signing algorithm that was used to sign the message.
	SigningAlgorithm types.SigningAlgorithmSpec
	// The cryptographic signature that was generated for the message.
	//
	//     * When used
	// with the supported RSA signing algorithms, the encoding of this value is defined
	// by PKCS #1 in RFC 8017 (https://tools.ietf.org/html/rfc8017).
	//
	//     * When used
	// with the ECDSA_SHA_256, ECDSA_SHA_384, or ECDSA_SHA_512 signing algorithms, this
	// value is a DER-encoded object as defined by ANS X9.62â€“2005 and RFC 3279 Section
	// 2.2.3 (https://tools.ietf.org/html/rfc3279#section-2.2.3). This is the most
	// commonly used signature format and is appropriate for most uses.
	//
	// When you use
	// the HTTP API or the AWS CLI, the value is Base64-encoded. Otherwise, it is not
	// Base64-encoded.
	Signature []byte
	// The Amazon Resource Name (key ARN
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN))
	// of the asymmetric CMK that was used to sign the message.
	KeyId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpSignMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpSign{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpSign{}, middleware.After)
}

func newServiceMetadataMiddleware_opSign(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kms",
		OperationName: "Sign",
	}
}
