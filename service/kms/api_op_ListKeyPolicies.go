// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kms

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

const opListKeyPolicies = "ListKeyPolicies"

// ListKeyPoliciesRequest returns a request value for making API operation for
// AWS Key Management Service.
//
// Gets the names of the key policies that are attached to a customer master
// key (CMK). This operation is designed to get policy names that you can use
// in a GetKeyPolicy operation. However, the only valid policy name is default.
// You cannot perform this operation on a CMK in a different AWS account.
//
//    // Example sending a request using ListKeyPoliciesRequest.
//    req := client.ListKeyPoliciesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeyPolicies
func (c *Client) ListKeyPoliciesRequest(input *types.ListKeyPoliciesInput) ListKeyPoliciesRequest {
	op := &aws.Operation{
		Name:       opListKeyPolicies,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextMarker"},
			LimitToken:      "Limit",
			TruncationToken: "Truncated",
		},
	}

	if input == nil {
		input = &types.ListKeyPoliciesInput{}
	}

	req := c.newRequest(op, input, &types.ListKeyPoliciesOutput{})
	return ListKeyPoliciesRequest{Request: req, Input: input, Copy: c.ListKeyPoliciesRequest}
}

// ListKeyPoliciesRequest is the request type for the
// ListKeyPolicies API operation.
type ListKeyPoliciesRequest struct {
	*aws.Request
	Input *types.ListKeyPoliciesInput
	Copy  func(*types.ListKeyPoliciesInput) ListKeyPoliciesRequest
}

// Send marshals and sends the ListKeyPolicies API request.
func (r ListKeyPoliciesRequest) Send(ctx context.Context) (*ListKeyPoliciesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListKeyPoliciesResponse{
		ListKeyPoliciesOutput: r.Request.Data.(*types.ListKeyPoliciesOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListKeyPoliciesRequestPaginator returns a paginator for ListKeyPolicies.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListKeyPoliciesRequest(input)
//   p := kms.NewListKeyPoliciesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListKeyPoliciesPaginator(req ListKeyPoliciesRequest) ListKeyPoliciesPaginator {
	return ListKeyPoliciesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListKeyPoliciesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListKeyPoliciesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListKeyPoliciesPaginator struct {
	aws.Pager
}

func (p *ListKeyPoliciesPaginator) CurrentPage() *types.ListKeyPoliciesOutput {
	return p.Pager.CurrentPage().(*types.ListKeyPoliciesOutput)
}

// ListKeyPoliciesResponse is the response type for the
// ListKeyPolicies API operation.
type ListKeyPoliciesResponse struct {
	*types.ListKeyPoliciesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListKeyPolicies request.
func (r *ListKeyPoliciesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
