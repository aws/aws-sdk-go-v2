// Code generated by smithy-go-codegen DO NOT EDIT.

package kms

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Adds a grant to a customer master key (CMK). The grant allows the grantee
// principal to use the CMK when the conditions specified in the grant are met.
// When setting permissions, grants are an alternative to key policies. To create a
// grant that allows a cryptographic operation
// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
// only when the request includes a particular encryption context
// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context),
// use the Constraints parameter. For details, see GrantConstraints. You can create
// grants on symmetric and asymmetric CMKs. However, if the grant allows an
// operation that the CMK does not support, CreateGrant fails with a
// ValidationException.
//
// * Grants for symmetric CMKs cannot allow operations that
// are not supported for symmetric CMKs, including Sign, Verify, and GetPublicKey.
// (There are limited exceptions to this rule for legacy operations, but you should
// not create a grant for an operation that AWS KMS does not support.)
//
// * Grants
// for asymmetric CMKs cannot allow operations that are not supported for
// asymmetric CMKs, including operations that generate data keys
// (https://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKey) or
// data key pairs
// (https://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKeyPair),
// or operations related to automatic key rotation
// (https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html),
// imported key material
// (https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html), or
// CMKs in custom key stores
// (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html).
//
// *
// Grants for asymmetric CMKs with a KeyUsage of ENCRYPT_DECRYPT cannot allow the
// Sign or Verify operations. Grants for asymmetric CMKs with a KeyUsage of
// SIGN_VERIFY cannot allow the Encrypt or Decrypt operations.
//
// * Grants for
// asymmetric CMKs cannot include an encryption context grant constraint. An
// encryption context is not supported on asymmetric CMKs.
//
// For information about
// symmetric and asymmetric CMKs, see Using Symmetric and Asymmetric CMKs
// (https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html)
// in the AWS Key Management Service Developer Guide. For more information about
// grants, see Grants
// (https://docs.aws.amazon.com/kms/latest/developerguide/grants.html) in the AWS
// Key Management Service Developer Guide . The CMK that you use for this operation
// must be in a compatible key state. For details, see How Key State Affects Use of
// a Customer Master Key
// (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the
// AWS Key Management Service Developer Guide. Cross-account use: Yes. To perform
// this operation on a CMK in a different AWS account, specify the key ARN in the
// value of the KeyId parameter. Required permissions: kms:CreateGrant
// (https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html)
// (key policy) Related operations:
//
// * ListGrants
//
// * ListRetirableGrants
//
// *
// RetireGrant
//
// * RevokeGrant
func (c *Client) CreateGrant(ctx context.Context, params *CreateGrantInput, optFns ...func(*Options)) (*CreateGrantOutput, error) {
	if params == nil {
		params = &CreateGrantInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateGrant", params, optFns, addOperationCreateGrantMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateGrantOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateGrantInput struct {

	// The principal that is given permission to perform the operations that the grant
	// permits. To specify the principal, use the Amazon Resource Name (ARN)
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
	// an AWS principal. Valid AWS principals include AWS accounts (root), IAM users,
	// IAM roles, federated users, and assumed role users. For examples of the ARN
	// syntax to use for specifying a principal, see AWS Identity and Access Management
	// (IAM)
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam)
	// in the Example ARNs section of the AWS General Reference.
	//
	// This member is required.
	GranteePrincipal *string

	// The unique identifier for the customer master key (CMK) that the grant applies
	// to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify
	// a CMK in a different AWS account, you must use the key ARN. For example:
	//
	// * Key
	// ID: 1234abcd-12ab-34cd-56ef-1234567890ab
	//
	// * Key ARN:
	// arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
	//
	// To
	// get the key ID and key ARN for a CMK, use ListKeys or DescribeKey.
	//
	// This member is required.
	KeyId *string

	// A list of operations that the grant permits.
	//
	// This member is required.
	Operations []types.GrantOperation

	// Allows a cryptographic operation
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
	// only when the encryption context matches or includes the encryption context
	// specified in this structure. For more information about encryption context, see
	// Encryption Context
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context)
	// in the AWS Key Management Service Developer Guide . Grant constraints are not
	// applied to operations that do not support an encryption context, such as
	// cryptographic operations with asymmetric CMKs and management operations, such as
	// DescribeKey or RetireGrant.
	Constraints *types.GrantConstraints

	// A list of grant tokens. For more information, see Grant Tokens
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token)
	// in the AWS Key Management Service Developer Guide.
	GrantTokens []string

	// A friendly name for the grant. Use this value to prevent the unintended creation
	// of duplicate grants when retrying this request. When this value is absent, all
	// CreateGrant requests result in a new grant with a unique GrantId even if all the
	// supplied parameters are identical. This can result in unintended duplicates when
	// you retry the CreateGrant request. When this value is present, you can retry a
	// CreateGrant request with identical parameters; if the grant already exists, the
	// original GrantId is returned without creating a new grant. Note that the
	// returned grant token is unique with every CreateGrant request, even when a
	// duplicate GrantId is returned. All grant tokens for the same grant ID can be
	// used interchangeably.
	Name *string

	// The principal that is given permission to retire the grant by using RetireGrant
	// operation. To specify the principal, use the Amazon Resource Name (ARN)
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
	// an AWS principal. Valid AWS principals include AWS accounts (root), IAM users,
	// federated users, and assumed role users. For examples of the ARN syntax to use
	// for specifying a principal, see AWS Identity and Access Management (IAM)
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam)
	// in the Example ARNs section of the AWS General Reference.
	RetiringPrincipal *string
}

type CreateGrantOutput struct {

	// The unique identifier for the grant. You can use the GrantId in a subsequent
	// RetireGrant or RevokeGrant operation.
	GrantId *string

	// The grant token. For more information, see Grant Tokens
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token)
	// in the AWS Key Management Service Developer Guide.
	GrantToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateGrantMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateGrant{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateGrant{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateGrantValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateGrant(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateGrant(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kms",
		OperationName: "CreateGrant",
	}
}
