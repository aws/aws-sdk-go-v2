// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kms

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

const opGenerateDataKey = "GenerateDataKey"

// GenerateDataKeyRequest returns a request value for making API operation for
// AWS Key Management Service.
//
// Generates a unique data key. This operation returns a plaintext copy of the
// data key and a copy that is encrypted under a customer master key (CMK) that
// you specify. You can use the plaintext key to encrypt your data outside of
// KMS and store the encrypted data key with the encrypted data.
//
// GenerateDataKey returns a unique data key for each request. The bytes in
// the key are not related to the caller or CMK that is used to encrypt the
// data key.
//
// To generate a data key, you need to specify the customer master key (CMK)
// that will be used to encrypt the data key. You must also specify the length
// of the data key using either the KeySpec or NumberOfBytes field (but not
// both). For common key lengths (128-bit and 256-bit symmetric keys), we recommend
// that you use KeySpec. To perform this operation on a CMK in a different AWS
// account, specify the key ARN or alias ARN in the value of the KeyId parameter.
//
// You will find the plaintext copy of the data key in the Plaintext field of
// the response, and the encrypted copy of the data key in the CiphertextBlob
// field.
//
// We recommend that you use the following pattern to encrypt data locally in
// your application:
//
// Use the GenerateDataKey operation to get a data encryption key.
//
// Use the plaintext data key (returned in the Plaintext field of the response)
// to encrypt data locally, then erase the plaintext data key from memory.
//
// Store the encrypted data key (returned in the CiphertextBlob field of the
// response) alongside the locally encrypted data.
//
// To decrypt data locally:
//
// Use the Decrypt operation to decrypt the encrypted data key. The operation
// returns a plaintext copy of the data key.
//
// Use the plaintext data key to decrypt data locally, then erase the plaintext
// data key from memory.
//
// To get only an encrypted copy of the data key, use GenerateDataKeyWithoutPlaintext.
// To get a cryptographically secure random byte string, use GenerateRandom.
//
// You can use the optional encryption context to add additional security to
// your encryption operation. When you specify an EncryptionContext in the GenerateDataKey
// operation, you must specify the same encryption context (a case-sensitive
// exact match) in your request to Decrypt the data key. Otherwise, the request
// to decrypt fails with an InvalidCiphertextException. For more information,
// see Encryption Context (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context)
// in the AWS Key Management Service Developer Guide .
//
// The result of this operation varies with the key state of the CMK. For details,
// see How Key State Affects Use of a Customer Master Key (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
// in the AWS Key Management Service Developer Guide.
//
//    // Example sending a request using GenerateDataKeyRequest.
//    req := client.GenerateDataKeyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKey
func (c *Client) GenerateDataKeyRequest(input *types.GenerateDataKeyInput) GenerateDataKeyRequest {
	op := &aws.Operation{
		Name:       opGenerateDataKey,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.GenerateDataKeyInput{}
	}

	req := c.newRequest(op, input, &types.GenerateDataKeyOutput{})
	return GenerateDataKeyRequest{Request: req, Input: input, Copy: c.GenerateDataKeyRequest}
}

// GenerateDataKeyRequest is the request type for the
// GenerateDataKey API operation.
type GenerateDataKeyRequest struct {
	*aws.Request
	Input *types.GenerateDataKeyInput
	Copy  func(*types.GenerateDataKeyInput) GenerateDataKeyRequest
}

// Send marshals and sends the GenerateDataKey API request.
func (r GenerateDataKeyRequest) Send(ctx context.Context) (*GenerateDataKeyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GenerateDataKeyResponse{
		GenerateDataKeyOutput: r.Request.Data.(*types.GenerateDataKeyOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GenerateDataKeyResponse is the response type for the
// GenerateDataKey API operation.
type GenerateDataKeyResponse struct {
	*types.GenerateDataKeyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GenerateDataKey request.
func (r *GenerateDataKeyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
