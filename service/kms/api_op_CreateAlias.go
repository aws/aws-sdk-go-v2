// Code generated by smithy-go-codegen DO NOT EDIT.

package kms

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a display name for a customer managed customer master key (CMK). You can
// use an alias to identify a CMK in cryptographic operations
// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations),
// such as Encrypt and GenerateDataKey. You can change the CMK associated with the
// alias at any time. Aliases are easier to remember than key IDs. They can also
// help to simplify your applications. For example, if you use an alias in your
// code, you can change the CMK your code uses by associating a given alias with a
// different CMK. To run the same code in multiple AWS regions, use an alias in
// your code, such as alias/ApplicationKey. Then, in each AWS Region, create an
// alias/ApplicationKey alias that is associated with a CMK in that Region. When
// you run your code, it uses the alias/ApplicationKey CMK for that AWS Region
// without any Region-specific code. This operation does not return a response. To
// get the alias that you created, use the ListAliases operation. To use aliases
// successfully, be aware of the following information.
//
// * Each alias points to
// only one CMK at a time, although a single CMK can have multiple aliases. The
// alias and its associated CMK must be in the same AWS account and Region.
//
// * You
// can associate an alias with any customer managed CMK in the same AWS account and
// Region. However, you do not have permission to associate an alias with an AWS
// managed CMK
// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk)
// or an AWS owned CMK
// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk).
//
// *
// To change the CMK associated with an alias, use the UpdateAlias operation. The
// current CMK and the new CMK must be the same type (both symmetric or both
// asymmetric) and they must have the same key usage (ENCRYPT_DECRYPT or
// SIGN_VERIFY). This restriction prevents cryptographic errors in code that uses
// aliases.
//
// * The alias name must begin with alias/ followed by a name, such as
// alias/ExampleAlias. It can contain only alphanumeric characters, forward slashes
// (/), underscores (_), and dashes (-). The alias name cannot begin with
// alias/aws/. The alias/aws/ prefix is reserved for AWS managed CMKs
// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk).
//
// *
// The alias name must be unique within an AWS Region. However, you can use the
// same alias name in multiple Regions of the same AWS account. Each instance of
// the alias is associated with a CMK in its Region.
//
// * After you create an alias,
// you cannot change its alias name. However, you can use the DeleteAlias operation
// to delete the alias and then create a new alias with the desired name.
//
// * You
// can use an alias name or alias ARN to identify a CMK in AWS KMS cryptographic
// operations
// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
// and in the DescribeKey operation. However, you cannot use alias names or alias
// ARNs in API operations that manage CMKs, such as DisableKey or GetKeyPolicy. For
// information about the valid CMK identifiers for each AWS KMS API operation, see
// the descriptions of the KeyId parameter in the API operation
// documentation.
//
// Because an alias is not a property of a CMK, you can delete and
// change the aliases of a CMK without affecting the CMK. Also, aliases do not
// appear in the response from the DescribeKey operation. To get the aliases and
// alias ARNs of CMKs in each AWS account and Region, use the ListAliases
// operation. The CMK that you use for this operation must be in a compatible key
// state. For details, see How Key State Affects Use of a Customer Master Key
// (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the
// AWS Key Management Service Developer Guide.
func (c *Client) CreateAlias(ctx context.Context, params *CreateAliasInput, optFns ...func(*Options)) (*CreateAliasOutput, error) {
	if params == nil {
		params = &CreateAliasInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateAlias", params, optFns, addOperationCreateAliasMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateAliasOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateAliasInput struct {

	// Specifies the alias name. This value must begin with alias/ followed by a name,
	// such as alias/ExampleAlias. The alias name cannot begin with alias/aws/. The
	// alias/aws/ prefix is reserved for AWS managed CMKs.
	//
	// This member is required.
	AliasName *string

	// Identifies the CMK to which the alias refers. Specify the key ID or the Amazon
	// Resource Name (ARN) of the CMK. You cannot specify another alias. For help
	// finding the key ID and ARN, see Finding the Key ID and ARN
	// (https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn)
	// in the AWS Key Management Service Developer Guide.
	//
	// This member is required.
	TargetKeyId *string
}

type CreateAliasOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateAliasMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateAlias{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateAlias{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateAliasValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateAlias(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateAlias(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kms",
		OperationName: "CreateAlias",
	}
}
