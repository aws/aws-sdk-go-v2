// Code generated by smithy-go-codegen DO NOT EDIT.

package kms

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Encrypts plaintext into ciphertext by using a customer master key (CMK). The
// Encrypt operation has two primary use cases:
//
//     * You can encrypt small
// amounts of arbitrary data, such as a personal identifier or database password,
// or other sensitive information.
//
//     * You can use the Encrypt operation to move
// encrypted data from one AWS Region to another. For example, in Region A,
// generate a data key and use the plaintext key to encrypt your data. Then, in
// Region A, use the Encrypt operation to encrypt the plaintext data key under a
// CMK in Region B. Now, you can move the encrypted data and the encrypted data key
// to Region B. When necessary, you can decrypt the encrypted data key and the
// encrypted data entirely within in Region B.
//
// <p>You don't need to use the
// <code>Encrypt</code> operation to encrypt a data key. The <a>GenerateDataKey</a>
// and <a>GenerateDataKeyPair</a> operations return a plaintext data key and an
// encrypted copy of that data key.</p> <p>When you encrypt data, you must specify
// a symmetric or asymmetric CMK to use in the encryption operation. The CMK must
// have a <code>KeyUsage</code> value of <code>ENCRYPT_DECRYPT.</code> To find the
// <code>KeyUsage</code> of a CMK, use the <a>DescribeKey</a> operation. </p> <p>If
// you use a symmetric CMK, you can use an encryption context to add additional
// security to your encryption operation. If you specify an
// <code>EncryptionContext</code> when encrypting data, you must specify the same
// encryption context (a case-sensitive exact match) when decrypting the data.
// Otherwise, the request to decrypt fails with an
// <code>InvalidCiphertextException</code>. For more information, see <a
// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p> <p>If
// you specify an asymmetric CMK, you must also specify the encryption algorithm.
// The algorithm must be compatible with the CMK type.</p> <important> <p>When you
// use an asymmetric CMK to encrypt or reencrypt data, be sure to record the CMK
// and encryption algorithm that you choose. You will be required to provide the
// same CMK and encryption algorithm when you decrypt the data. If the CMK and
// algorithm do not match the values used to encrypt the data, the decrypt
// operation fails.</p> <p>You are not required to supply the CMK ID and encryption
// algorithm when you decrypt with symmetric CMKs because AWS KMS stores this
// information in the ciphertext blob. AWS KMS cannot store metadata in ciphertext
// generated with asymmetric keys. The standard format for asymmetric key
// ciphertext does not include configurable fields.</p> </important> <p>The maximum
// size of the data that you can encrypt varies with the type of CMK and the
// encryption algorithm that you choose.</p> <ul> <li> <p>Symmetric CMKs</p> <ul>
// <li> <p> <code>SYMMETRIC_DEFAULT</code>: 4096 bytes</p> </li> </ul> </li> <li>
// <p> <code>RSA_2048</code> </p> <ul> <li> <p> <code>RSAES_OAEP_SHA_1</code>: 214
// bytes</p> </li> <li> <p> <code>RSAES_OAEP_SHA_256</code>: 190 bytes</p> </li>
// </ul> </li> <li> <p> <code>RSA_3072</code> </p> <ul> <li> <p>
// <code>RSAES_OAEP_SHA_1</code>: 342 bytes</p> </li> <li> <p>
// <code>RSAES_OAEP_SHA_256</code>: 318 bytes</p> </li> </ul> </li> <li> <p>
// <code>RSA_4096</code> </p> <ul> <li> <p> <code>RSAES_OAEP_SHA_1</code>: 470
// bytes</p> </li> <li> <p> <code>RSAES_OAEP_SHA_256</code>: 446 bytes</p> </li>
// </ul> </li> </ul> <p>The CMK that you use for this operation must be in a
// compatible key state. For  details, see How Key State Affects Use of a Customer
// Master Key
// (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the
// AWS Key Management Service Developer Guide. To perform this operation on a CMK
// in a different AWS account, specify the key ARN or alias ARN in the value of the
// KeyId parameter.
func (c *Client) Encrypt(ctx context.Context, params *EncryptInput, optFns ...func(*Options)) (*EncryptOutput, error) {
	stack := middleware.NewStack("Encrypt", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpEncryptMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpEncryptValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opEncrypt(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "Encrypt",
			Err:           err,
		}
	}
	out := result.(*EncryptOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type EncryptInput struct {
	// A list of grant tokens. For more information, see Grant Tokens
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token)
	// in the AWS Key Management Service Developer Guide.
	GrantTokens []*string
	// A unique identifier for the customer master key (CMK). To specify a CMK, use its
	// key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an
	// alias name, prefix it with "alias/". To specify a CMK in a different AWS
	// account, you must use the key ARN or alias ARN. For example:
	//
	//     * Key ID:
	// 1234abcd-12ab-34cd-56ef-1234567890ab
	//
	//     * Key ARN:
	// arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
	//
	//
	// * Alias name: alias/ExampleAlias
	//
	//     * Alias ARN:
	// arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
	//
	// To get the key ID and key
	// ARN for a CMK, use ListKeys () or DescribeKey (). To get the alias name and
	// alias ARN, use ListAliases ().
	KeyId *string
	// Specifies the encryption algorithm that AWS KMS will use to encrypt the
	// plaintext message. The algorithm must be compatible with the CMK that you
	// specify. This parameter is required only for asymmetric CMKs. The default value,
	// SYMMETRIC_DEFAULT, is the algorithm used for symmetric CMKs. If you are using an
	// asymmetric CMK, we recommend RSAES_OAEP_SHA_256.
	EncryptionAlgorithm types.EncryptionAlgorithmSpec
	// Specifies the encryption context that will be used to encrypt the data. An
	// encryption context is valid only for cryptographic operations
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
	// with a symmetric CMK. The standard asymmetric encryption algorithms that AWS KMS
	// uses do not support an encryption context. An encryption context is a collection
	// of non-secret key-value pairs that represents additional authenticated data.
	// When you use an encryption context to encrypt data, you must specify the same
	// (an exact case-sensitive match) encryption context to decrypt the data. An
	// encryption context is optional when encrypting with a symmetric CMK, but it is
	// highly recommended. For more information, see Encryption Context
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context)
	// in the AWS Key Management Service Developer Guide.
	EncryptionContext map[string]*string
	// Data to be encrypted.
	Plaintext []byte
}

type EncryptOutput struct {
	// The Amazon Resource Name (key ARN
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN))
	// of the CMK that was used to encrypt the plaintext.
	KeyId *string
	// The encrypted plaintext. When you use the HTTP API or the AWS CLI, the value is
	// Base64-encoded. Otherwise, it is not Base64-encoded.
	CiphertextBlob []byte
	// The encryption algorithm that was used to encrypt the plaintext.
	EncryptionAlgorithm types.EncryptionAlgorithmSpec

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpEncryptMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpEncrypt{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpEncrypt{}, middleware.After)
}

func newServiceMetadataMiddleware_opEncrypt(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kms",
		OperationName: "Encrypt",
	}
}
