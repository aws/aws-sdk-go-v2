// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kms

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

const opListKeys = "ListKeys"

// ListKeysRequest returns a request value for making API operation for
// AWS Key Management Service.
//
// Gets a list of all customer master keys (CMKs) in the caller's AWS account
// and region.
//
//    // Example sending a request using ListKeysRequest.
//    req := client.ListKeysRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeys
func (c *Client) ListKeysRequest(input *types.ListKeysInput) ListKeysRequest {
	op := &aws.Operation{
		Name:       opListKeys,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextMarker"},
			LimitToken:      "Limit",
			TruncationToken: "Truncated",
		},
	}

	if input == nil {
		input = &types.ListKeysInput{}
	}

	req := c.newRequest(op, input, &types.ListKeysOutput{})
	return ListKeysRequest{Request: req, Input: input, Copy: c.ListKeysRequest}
}

// ListKeysRequest is the request type for the
// ListKeys API operation.
type ListKeysRequest struct {
	*aws.Request
	Input *types.ListKeysInput
	Copy  func(*types.ListKeysInput) ListKeysRequest
}

// Send marshals and sends the ListKeys API request.
func (r ListKeysRequest) Send(ctx context.Context) (*ListKeysResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListKeysResponse{
		ListKeysOutput: r.Request.Data.(*types.ListKeysOutput),
		response:       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListKeysRequestPaginator returns a paginator for ListKeys.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListKeysRequest(input)
//   p := kms.NewListKeysRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListKeysPaginator(req ListKeysRequest) ListKeysPaginator {
	return ListKeysPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListKeysInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListKeysPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListKeysPaginator struct {
	aws.Pager
}

func (p *ListKeysPaginator) CurrentPage() *types.ListKeysOutput {
	return p.Pager.CurrentPage().(*types.ListKeysOutput)
}

// ListKeysResponse is the response type for the
// ListKeys API operation.
type ListKeysResponse struct {
	*types.ListKeysOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListKeys request.
func (r *ListKeysResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
