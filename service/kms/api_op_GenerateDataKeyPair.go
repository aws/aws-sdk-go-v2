// Code generated by smithy-go-codegen DO NOT EDIT.

package kms

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Generates a unique asymmetric data key pair. The GenerateDataKeyPair operation
// returns a plaintext public key, a plaintext private key, and a copy of the
// private key that is encrypted under the symmetric CMK you specify. You can use
// the data key pair to perform asymmetric cryptography outside of AWS KMS.  <p>
// <code>GenerateDataKeyPair</code> returns a unique data key pair for each
// request. The bytes in the keys are not related to the caller or the CMK that is
// used to encrypt the private key.</p> <p>You can use the public key that
// <code>GenerateDataKeyPair</code> returns to encrypt data or verify a signature
// outside of AWS KMS. Then, store the encrypted private key with the data. When
// you are ready to decrypt data or sign a message, you can use the <a>Decrypt</a>
// operation to decrypt the encrypted private key.</p> <p>To generate a data key
// pair, you must specify a symmetric customer master key (CMK) to encrypt the
// private key in a data key pair. You cannot use an asymmetric CMK or a CMK in a
// custom key store. To get the type and origin of your CMK, use the
// <a>DescribeKey</a> operation. </p> <p>If you are using the data key pair to
// encrypt data, or for any operation where you don't immediately need a private
// key, consider using the <a>GenerateDataKeyPairWithoutPlaintext</a> operation.
// <code>GenerateDataKeyPairWithoutPlaintext</code> returns a plaintext public key
// and an encrypted private key, but omits the plaintext private key that you need
// only to decrypt ciphertext or sign a message. Later, when you need to decrypt
// the data or sign a message, use the <a>Decrypt</a> operation to decrypt the
// encrypted private key in the data key pair.</p> <p>You can use the optional
// encryption context to add additional security to the encryption operation. If
// you specify an <code>EncryptionContext</code>, you must specify the same
// encryption context (a case-sensitive exact match) when decrypting the encrypted
// data key. Otherwise, the request to decrypt fails with an
// <code>InvalidCiphertextException</code>. For more information, see <a
// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
// Context</a> in the <i>AWS Key Management Service Developer Guide</i>.</p> <p>The
// CMK that you use for this operation must be in a compatible key state. For
// details, see How Key State Affects Use of a Customer Master Key
// (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the
// AWS Key Management Service Developer Guide.
func (c *Client) GenerateDataKeyPair(ctx context.Context, params *GenerateDataKeyPairInput, optFns ...func(*Options)) (*GenerateDataKeyPairOutput, error) {
	stack := middleware.NewStack("GenerateDataKeyPair", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGenerateDataKeyPairMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGenerateDataKeyPairValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGenerateDataKeyPair(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GenerateDataKeyPair",
			Err:           err,
		}
	}
	out := result.(*GenerateDataKeyPairOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GenerateDataKeyPairInput struct {
	// Specifies the encryption context that will be used when encrypting the private
	// key in the data key pair. An encryption context is a collection of non-secret
	// key-value pairs that represents additional authenticated data. When you use an
	// encryption context to encrypt data, you must specify the same (an exact
	// case-sensitive match) encryption context to decrypt the data. An encryption
	// context is optional when encrypting with a symmetric CMK, but it is highly
	// recommended. For more information, see Encryption Context
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context)
	// in the AWS Key Management Service Developer Guide.
	EncryptionContext map[string]*string
	// A list of grant tokens. For more information, see Grant Tokens
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token)
	// in the AWS Key Management Service Developer Guide.
	GrantTokens []*string
	// Specifies the symmetric CMK that encrypts the private key in the data key pair.
	// You cannot specify an asymmetric CMK or a CMK in a custom key store. To get the
	// type and origin of your CMK, use the DescribeKey () operation. To specify a CMK,
	// use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using
	// an alias name, prefix it with "alias/". To specify a CMK in a different AWS
	// account, you must use the key ARN or alias ARN. For example:
	//
	//     * Key ID:
	// 1234abcd-12ab-34cd-56ef-1234567890ab
	//
	//     * Key ARN:
	// arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
	//
	//
	// * Alias name: alias/ExampleAlias
	//
	//     * Alias ARN:
	// arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias
	//
	// To get the key ID and key
	// ARN for a CMK, use ListKeys () or DescribeKey (). To get the alias name and
	// alias ARN, use ListAliases ().
	KeyId *string
	// Determines the type of data key pair that is generated. The AWS KMS rule that
	// restricts the use of asymmetric RSA CMKs to encrypt and decrypt or to sign and
	// verify (but not both), and the rule that permits you to use ECC CMKs only to
	// sign and verify, are not effective outside of AWS KMS.
	KeyPairSpec types.DataKeyPairSpec
}

type GenerateDataKeyPairOutput struct {
	// The encrypted copy of the private key. When you use the HTTP API or the AWS CLI,
	// the value is Base64-encoded. Otherwise, it is not Base64-encoded.
	PrivateKeyCiphertextBlob []byte
	// The Amazon Resource Name (key ARN
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN))
	// of the CMK that encrypted the private key.
	KeyId *string
	// The type of data key pair that was generated.
	KeyPairSpec types.DataKeyPairSpec
	// The plaintext copy of the private key. When you use the HTTP API or the AWS CLI,
	// the value is Base64-encoded. Otherwise, it is not Base64-encoded.
	PrivateKeyPlaintext []byte
	// The public key (in plaintext).
	PublicKey []byte

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGenerateDataKeyPairMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGenerateDataKeyPair{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGenerateDataKeyPair{}, middleware.After)
}

func newServiceMetadataMiddleware_opGenerateDataKeyPair(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kms",
		OperationName: "GenerateDataKeyPair",
	}
}
