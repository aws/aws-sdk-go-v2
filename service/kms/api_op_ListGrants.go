// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kms

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

const opListGrants = "ListGrants"

// ListGrantsRequest returns a request value for making API operation for
// AWS Key Management Service.
//
// Gets a list of all grants for the specified customer master key (CMK).
//
// To perform this operation on a CMK in a different AWS account, specify the
// key ARN in the value of the KeyId parameter.
//
//    // Example sending a request using ListGrantsRequest.
//    req := client.ListGrantsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListGrants
func (c *Client) ListGrantsRequest(input *types.ListGrantsInput) ListGrantsRequest {
	op := &aws.Operation{
		Name:       opListGrants,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextMarker"},
			LimitToken:      "Limit",
			TruncationToken: "Truncated",
		},
	}

	if input == nil {
		input = &types.ListGrantsInput{}
	}

	req := c.newRequest(op, input, &types.ListGrantsOutput{})
	return ListGrantsRequest{Request: req, Input: input, Copy: c.ListGrantsRequest}
}

// ListGrantsRequest is the request type for the
// ListGrants API operation.
type ListGrantsRequest struct {
	*aws.Request
	Input *types.ListGrantsInput
	Copy  func(*types.ListGrantsInput) ListGrantsRequest
}

// Send marshals and sends the ListGrants API request.
func (r ListGrantsRequest) Send(ctx context.Context) (*ListGrantsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListGrantsResponse{
		ListGrantsOutput: r.Request.Data.(*types.ListGrantsOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListGrantsRequestPaginator returns a paginator for ListGrants.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListGrantsRequest(input)
//   p := kms.NewListGrantsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListGrantsPaginator(req ListGrantsRequest) ListGrantsPaginator {
	return ListGrantsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListGrantsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListGrantsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListGrantsPaginator struct {
	aws.Pager
}

func (p *ListGrantsPaginator) CurrentPage() *types.ListGrantsOutput {
	return p.Pager.CurrentPage().(*types.ListGrantsOutput)
}

// ListGrantsResponse is the response type for the
// ListGrants API operation.
type ListGrantsResponse struct {
	*types.ListGrantsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListGrants request.
func (r *ListGrantsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
