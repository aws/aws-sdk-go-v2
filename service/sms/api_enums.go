// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sms

type AppLaunchStatus string

// Enum values for AppLaunchStatus
const (
	AppLaunchStatusReadyForConfiguration   AppLaunchStatus = "READY_FOR_CONFIGURATION"
	AppLaunchStatusConfigurationInProgress AppLaunchStatus = "CONFIGURATION_IN_PROGRESS"
	AppLaunchStatusConfigurationInvalid    AppLaunchStatus = "CONFIGURATION_INVALID"
	AppLaunchStatusReadyForLaunch          AppLaunchStatus = "READY_FOR_LAUNCH"
	AppLaunchStatusValidationInProgress    AppLaunchStatus = "VALIDATION_IN_PROGRESS"
	AppLaunchStatusLaunchPending           AppLaunchStatus = "LAUNCH_PENDING"
	AppLaunchStatusLaunchInProgress        AppLaunchStatus = "LAUNCH_IN_PROGRESS"
	AppLaunchStatusLaunched                AppLaunchStatus = "LAUNCHED"
	AppLaunchStatusDeltaLaunchInProgress   AppLaunchStatus = "DELTA_LAUNCH_IN_PROGRESS"
	AppLaunchStatusDeltaLaunchFailed       AppLaunchStatus = "DELTA_LAUNCH_FAILED"
	AppLaunchStatusLaunchFailed            AppLaunchStatus = "LAUNCH_FAILED"
	AppLaunchStatusTerminateInProgress     AppLaunchStatus = "TERMINATE_IN_PROGRESS"
	AppLaunchStatusTerminateFailed         AppLaunchStatus = "TERMINATE_FAILED"
	AppLaunchStatusTerminated              AppLaunchStatus = "TERMINATED"
)

func (enum AppLaunchStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AppLaunchStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AppReplicationStatus string

// Enum values for AppReplicationStatus
const (
	AppReplicationStatusReadyForConfiguration      AppReplicationStatus = "READY_FOR_CONFIGURATION"
	AppReplicationStatusConfigurationInProgress    AppReplicationStatus = "CONFIGURATION_IN_PROGRESS"
	AppReplicationStatusConfigurationInvalid       AppReplicationStatus = "CONFIGURATION_INVALID"
	AppReplicationStatusReadyForReplication        AppReplicationStatus = "READY_FOR_REPLICATION"
	AppReplicationStatusValidationInProgress       AppReplicationStatus = "VALIDATION_IN_PROGRESS"
	AppReplicationStatusReplicationPending         AppReplicationStatus = "REPLICATION_PENDING"
	AppReplicationStatusReplicationInProgress      AppReplicationStatus = "REPLICATION_IN_PROGRESS"
	AppReplicationStatusReplicated                 AppReplicationStatus = "REPLICATED"
	AppReplicationStatusDeltaReplicationInProgress AppReplicationStatus = "DELTA_REPLICATION_IN_PROGRESS"
	AppReplicationStatusDeltaReplicated            AppReplicationStatus = "DELTA_REPLICATED"
	AppReplicationStatusDeltaReplicationFailed     AppReplicationStatus = "DELTA_REPLICATION_FAILED"
	AppReplicationStatusReplicationFailed          AppReplicationStatus = "REPLICATION_FAILED"
	AppReplicationStatusReplicationStopping        AppReplicationStatus = "REPLICATION_STOPPING"
	AppReplicationStatusReplicationStopFailed      AppReplicationStatus = "REPLICATION_STOP_FAILED"
	AppReplicationStatusReplicationStopped         AppReplicationStatus = "REPLICATION_STOPPED"
)

func (enum AppReplicationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AppReplicationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AppStatus string

// Enum values for AppStatus
const (
	AppStatusCreating     AppStatus = "CREATING"
	AppStatusActive       AppStatus = "ACTIVE"
	AppStatusUpdating     AppStatus = "UPDATING"
	AppStatusDeleting     AppStatus = "DELETING"
	AppStatusDeleted      AppStatus = "DELETED"
	AppStatusDeleteFailed AppStatus = "DELETE_FAILED"
)

func (enum AppStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AppStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ConnectorCapability string

// Enum values for ConnectorCapability
const (
	ConnectorCapabilityVsphere          ConnectorCapability = "VSPHERE"
	ConnectorCapabilityScvmm            ConnectorCapability = "SCVMM"
	ConnectorCapabilityHypervManager    ConnectorCapability = "HYPERV-MANAGER"
	ConnectorCapabilitySnapshotBatching ConnectorCapability = "SNAPSHOT_BATCHING"
)

func (enum ConnectorCapability) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ConnectorCapability) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ConnectorStatus string

// Enum values for ConnectorStatus
const (
	ConnectorStatusHealthy   ConnectorStatus = "HEALTHY"
	ConnectorStatusUnhealthy ConnectorStatus = "UNHEALTHY"
)

func (enum ConnectorStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ConnectorStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LicenseType string

// Enum values for LicenseType
const (
	LicenseTypeAws  LicenseType = "AWS"
	LicenseTypeByol LicenseType = "BYOL"
)

func (enum LicenseType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LicenseType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OutputFormat string

// Enum values for OutputFormat
const (
	OutputFormatJson OutputFormat = "JSON"
	OutputFormatYaml OutputFormat = "YAML"
)

func (enum OutputFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OutputFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReplicationJobState string

// Enum values for ReplicationJobState
const (
	ReplicationJobStatePending         ReplicationJobState = "PENDING"
	ReplicationJobStateActive          ReplicationJobState = "ACTIVE"
	ReplicationJobStateFailed          ReplicationJobState = "FAILED"
	ReplicationJobStateDeleting        ReplicationJobState = "DELETING"
	ReplicationJobStateDeleted         ReplicationJobState = "DELETED"
	ReplicationJobStateCompleted       ReplicationJobState = "COMPLETED"
	ReplicationJobStatePausedOnFailure ReplicationJobState = "PAUSED_ON_FAILURE"
	ReplicationJobStateFailing         ReplicationJobState = "FAILING"
)

func (enum ReplicationJobState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReplicationJobState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReplicationRunState string

// Enum values for ReplicationRunState
const (
	ReplicationRunStatePending   ReplicationRunState = "PENDING"
	ReplicationRunStateMissed    ReplicationRunState = "MISSED"
	ReplicationRunStateActive    ReplicationRunState = "ACTIVE"
	ReplicationRunStateFailed    ReplicationRunState = "FAILED"
	ReplicationRunStateCompleted ReplicationRunState = "COMPLETED"
	ReplicationRunStateDeleting  ReplicationRunState = "DELETING"
	ReplicationRunStateDeleted   ReplicationRunState = "DELETED"
)

func (enum ReplicationRunState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReplicationRunState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReplicationRunType string

// Enum values for ReplicationRunType
const (
	ReplicationRunTypeOnDemand  ReplicationRunType = "ON_DEMAND"
	ReplicationRunTypeAutomatic ReplicationRunType = "AUTOMATIC"
)

func (enum ReplicationRunType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReplicationRunType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ServerCatalogStatus string

// Enum values for ServerCatalogStatus
const (
	ServerCatalogStatusNotImported ServerCatalogStatus = "NOT_IMPORTED"
	ServerCatalogStatusImporting   ServerCatalogStatus = "IMPORTING"
	ServerCatalogStatusAvailable   ServerCatalogStatus = "AVAILABLE"
	ServerCatalogStatusDeleted     ServerCatalogStatus = "DELETED"
	ServerCatalogStatusExpired     ServerCatalogStatus = "EXPIRED"
)

func (enum ServerCatalogStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ServerCatalogStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ServerType string

// Enum values for ServerType
const (
	ServerTypeVirtualMachine ServerType = "VIRTUAL_MACHINE"
)

func (enum ServerType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ServerType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type VmManagerType string

// Enum values for VmManagerType
const (
	VmManagerTypeVsphere       VmManagerType = "VSPHERE"
	VmManagerTypeScvmm         VmManagerType = "SCVMM"
	VmManagerTypeHypervManager VmManagerType = "HYPERV-MANAGER"
)

func (enum VmManagerType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum VmManagerType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
