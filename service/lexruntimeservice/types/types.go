// Code generated by smithy-go-codegen DO NOT EDIT.

package types

// Describes the next action that the bot should take in its interaction with the
// user and provides information about the context in which the action takes place.
// Use the DialogAction data type to set the interaction to a specific state, or to
// return the interaction to a previous state.
type DialogAction struct {
	// The fulfillment state of the intent. The possible values are:
	//
	//     * Failed -
	// The Lambda function associated with the intent failed to fulfill the intent.
	//
	//
	// * Fulfilled - The intent has fulfilled by the Lambda function associated with
	// the intent.
	//
	//     * ReadyForFulfillment - All of the information necessary for
	// the intent is present and the intent ready to be fulfilled by the client
	// application.
	FulfillmentState FulfillmentState
	// The name of the intent.
	IntentName *string
	// The message that should be shown to the user. If you don't specify a message,
	// Amazon Lex will use the message configured for the intent.
	Message *string
	// * PlainText - The message contains plain UTF-8 text.
	//
	//     * CustomPayload - The
	// message is a custom format for the client.
	//
	//     * SSML - The message contains
	// text formatted for voice output.
	//
	//     * Composite - The message contains an
	// escaped JSON object containing one or more messages. For more information, see
	// Message Groups
	// (https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html).
	MessageFormat MessageFormatType
	// The name of the slot that should be elicited from the user.
	SlotToElicit *string
	// Map of the slots that have been gathered and their values.
	Slots map[string]*string
	// The next action that the bot should take in its interaction with the user. The
	// possible values are:
	//
	//     * ConfirmIntent - The next action is asking the user
	// if the intent is complete and ready to be fulfilled. This is a yes/no question
	// such as "Place the order?"
	//
	//     * Close - Indicates that the there will not be a
	// response from the user. For example, the statement "Your order has been placed"
	// does not require a response.
	//
	//     * Delegate - The next action is determined by
	// Amazon Lex.
	//
	//     * ElicitIntent - The next action is to determine the intent
	// that the user wants to fulfill.
	//
	//     * ElicitSlot - The next action is to elicit
	// a slot value from the user.
	Type DialogActionType
}

// Provides information about the state of an intent. You can use this information
// to get the current state of an intent so that you can process the intent, or so
// that you can return the intent to its previous state.
type IntentSummary struct {
	// A user-defined label that identifies a particular intent. You can use this label
	// to return to a previous intent. Use the checkpointLabelFilter parameter of the
	// GetSessionRequest operation to filter the intents returned by the operation to
	// those with only the specified label.
	CheckpointLabel *string
	// The status of the intent after the user responds to the confirmation prompt. If
	// the user confirms the intent, Amazon Lex sets this field to Confirmed. If the
	// user denies the intent, Amazon Lex sets this value to Denied. The possible
	// values are:
	//
	//     * Confirmed - The user has responded "Yes" to the confirmation
	// prompt, confirming that the intent is complete and that it is ready to be
	// fulfilled.
	//
	//     * Denied - The user has responded "No" to the confirmation
	// prompt.
	//
	//     * None - The user has never been prompted for confirmation; or, the
	// user was prompted but did not confirm or deny the prompt.
	ConfirmationStatus ConfirmationStatus
	// The next action that the bot should take in its interaction with the user. The
	// possible values are:
	//
	//     * ConfirmIntent - The next action is asking the user
	// if the intent is complete and ready to be fulfilled. This is a yes/no question
	// such as "Place the order?"
	//
	//     * Close - Indicates that the there will not be a
	// response from the user. For example, the statement "Your order has been placed"
	// does not require a response.
	//
	//     * ElicitIntent - The next action is to
	// determine the intent that the user wants to fulfill.
	//
	//     * ElicitSlot - The
	// next action is to elicit a slot value from the user.
	DialogActionType DialogActionType
	// The fulfillment state of the intent. The possible values are:
	//
	//     * Failed -
	// The Lambda function associated with the intent failed to fulfill the intent.
	//
	//
	// * Fulfilled - The intent has fulfilled by the Lambda function associated with
	// the intent.
	//
	//     * ReadyForFulfillment - All of the information necessary for
	// the intent is present and the intent ready to be fulfilled by the client
	// application.
	FulfillmentState FulfillmentState
	// The name of the intent.
	IntentName *string
	// The next slot to elicit from the user. If there is not slot to elicit, the field
	// is blank.
	SlotToElicit *string
	// Map of the slots that have been gathered and their values.
	Slots map[string]*string
}

// The sentiment expressed in an utterance. When the bot is configured to send
// utterances to Amazon Comprehend for sentiment analysis, this field structure
// contains the result of the analysis.
type SentimentResponse struct {
	// The inferred sentiment that Amazon Comprehend has the highest confidence in.
	SentimentLabel *string
	// The likelihood that the sentiment was correctly inferred.
	SentimentScore *string
}

// Represents an option to be shown on the client platform (Facebook, Slack, etc.)
type Button struct {
	// Text that is visible to the user on the button.
	Text *string
	// The value sent to Amazon Lex when a user chooses the button. For example,
	// consider button text "NYC." When the user chooses the button, the value sent can
	// be "New York City."
	Value *string
}

// Represents an option rendered to the user when a prompt is shown. It could be an
// image, a button, a link, or text.
type GenericAttachment struct {
	// The URL of an attachment to the response card.
	AttachmentLinkUrl *string
	// The list of options to show to the user.
	Buttons []*Button
	// The URL of an image that is displayed to the user.
	ImageUrl *string
	// The subtitle shown below the title.
	SubTitle *string
	// The title of the option.
	Title *string
}

// If you configure a response card when creating your bots, Amazon Lex substitutes
// the session attributes and slot values that are available, and then returns it.
// The response card can also come from a Lambda function ( dialogCodeHook and
// fulfillmentActivity on an intent).
type ResponseCard struct {
	// The content type of the response.
	ContentType ContentType
	// An array of attachment objects representing options.
	GenericAttachments []*GenericAttachment
	// The version of the response card format.
	Version *string
}
