// Code generated by smithy-go-codegen DO NOT EDIT.

package costexplorer

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves the Savings Plans covered for your account. This enables you to see
// how much of your cost is covered by a Savings Plan. An organizationâ€™s master
// account can see the coverage of the associated member accounts. This supports
// dimensions, Cost Categories, and nested expressions. For any time period, you
// can filter data for Savings Plans usage with the following dimensions:
//
//     *
// LINKED_ACCOUNT
//
//     * REGION
//
//     * SERVICE
//
//     * INSTANCE_FAMILY
//
// To determine
// valid values for a dimension, use the GetDimensionValues operation.
func (c *Client) GetSavingsPlansCoverage(ctx context.Context, params *GetSavingsPlansCoverageInput, optFns ...func(*Options)) (*GetSavingsPlansCoverageOutput, error) {
	stack := middleware.NewStack("GetSavingsPlansCoverage", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetSavingsPlansCoverageMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetSavingsPlansCoverageValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetSavingsPlansCoverage(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetSavingsPlansCoverage",
			Err:           err,
		}
	}
	out := result.(*GetSavingsPlansCoverageOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetSavingsPlansCoverageInput struct {
	// The time period that you want the usage and costs for. The Start date must be
	// within 13 months. The End date must be after the Start date, and before the
	// current date. Future dates can't be used as an End date.
	TimePeriod *types.DateInterval
	// Filters Savings Plans coverage data by dimensions. You can filter data for
	// Savings Plans usage with the following dimensions:
	//
	//     * LINKED_ACCOUNT
	//
	//     *
	// REGION
	//
	//     * SERVICE
	//
	//     * INSTANCE_FAMILY
	//
	// GetSavingsPlansCoverage uses the
	// same Expression
	// (https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html)
	// object as the other operations, but only AND is supported among each dimension.
	// If there are multiple values for a dimension, they are OR'd together. Cost
	// category is also supported.
	Filter *types.Expression
	// The token to retrieve the next set of results. Amazon Web Services provides the
	// token when the response from a previous call has more results than the maximum
	// page size.
	NextToken *string
	// The number of items to be returned in a response. The default is 20, with a
	// minimum value of 1.
	MaxResults *int32
	// You can group the data using the attributes INSTANCE_FAMILY, REGION, or SERVICE.
	GroupBy []*types.GroupDefinition
	// The measurement that you want your Savings Plans coverage reported in. The only
	// valid value is SpendCoveredBySavingsPlans.
	Metrics []*string
	// The granularity of the Amazon Web Services cost data for your Savings Plans.
	// Granularity can't be set if GroupBy is set. The GetSavingsPlansCoverage
	// operation supports only DAILY and MONTHLY granularities.
	Granularity types.Granularity
}

type GetSavingsPlansCoverageOutput struct {
	// The amount of spend that your Savings Plans covered.
	SavingsPlansCoverages []*types.SavingsPlansCoverage
	// The token to retrieve the next set of results. Amazon Web Services provides the
	// token when the response from a previous call has more results than the maximum
	// page size.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetSavingsPlansCoverageMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetSavingsPlansCoverage{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetSavingsPlansCoverage{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetSavingsPlansCoverage(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ce",
		OperationName: "GetSavingsPlansCoverage",
	}
}
