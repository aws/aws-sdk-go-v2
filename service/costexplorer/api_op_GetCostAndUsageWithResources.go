// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package costexplorer

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
)

const opGetCostAndUsageWithResources = "GetCostAndUsageWithResources"

// GetCostAndUsageWithResourcesRequest returns a request value for making API operation for
// AWS Cost Explorer Service.
//
// Retrieves cost and usage metrics with resources for your account. You can
// specify which cost and usage-related metric, such as BlendedCosts or UsageQuantity,
// that you want the request to return. You can also filter and group your data
// by various dimensions, such as SERVICE or AZ, in a specific time range. For
// a complete list of valid dimensions, see the GetDimensionValues (http://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html)
// operation. Master accounts in an organization in AWS Organizations have access
// to all member accounts. This API is currently available for the Amazon Elastic
// Compute Cloud â€“ Compute service only.
//
// This is an opt-in only feature. You can enable this feature from the Cost
// Explorer Settings page. For information on how to access the Settings page,
// see Controlling Access for Cost Explorer (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/ce-access.html)
// in the AWS Billing and Cost Management User Guide.
//
//    // Example sending a request using GetCostAndUsageWithResourcesRequest.
//    req := client.GetCostAndUsageWithResourcesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ce-2017-10-25/GetCostAndUsageWithResources
func (c *Client) GetCostAndUsageWithResourcesRequest(input *types.GetCostAndUsageWithResourcesInput) GetCostAndUsageWithResourcesRequest {
	op := &aws.Operation{
		Name:       opGetCostAndUsageWithResources,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.GetCostAndUsageWithResourcesInput{}
	}

	req := c.newRequest(op, input, &types.GetCostAndUsageWithResourcesOutput{})
	return GetCostAndUsageWithResourcesRequest{Request: req, Input: input, Copy: c.GetCostAndUsageWithResourcesRequest}
}

// GetCostAndUsageWithResourcesRequest is the request type for the
// GetCostAndUsageWithResources API operation.
type GetCostAndUsageWithResourcesRequest struct {
	*aws.Request
	Input *types.GetCostAndUsageWithResourcesInput
	Copy  func(*types.GetCostAndUsageWithResourcesInput) GetCostAndUsageWithResourcesRequest
}

// Send marshals and sends the GetCostAndUsageWithResources API request.
func (r GetCostAndUsageWithResourcesRequest) Send(ctx context.Context) (*GetCostAndUsageWithResourcesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetCostAndUsageWithResourcesResponse{
		GetCostAndUsageWithResourcesOutput: r.Request.Data.(*types.GetCostAndUsageWithResourcesOutput),
		response:                           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetCostAndUsageWithResourcesResponse is the response type for the
// GetCostAndUsageWithResources API operation.
type GetCostAndUsageWithResourcesResponse struct {
	*types.GetCostAndUsageWithResourcesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetCostAndUsageWithResources request.
func (r *GetCostAndUsageWithResourcesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
