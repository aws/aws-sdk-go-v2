// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package costexplorer

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
)

const opGetSavingsPlansUtilizationDetails = "GetSavingsPlansUtilizationDetails"

// GetSavingsPlansUtilizationDetailsRequest returns a request value for making API operation for
// AWS Cost Explorer Service.
//
// Retrieves attribute data along with aggregate utilization and savings data
// for a given time period. This doesn't support granular or grouped data (daily/monthly)
// in response. You can't retrieve data by dates in a single response similar
// to GetSavingsPlanUtilization, but you have the option to make multiple calls
// to GetSavingsPlanUtilizationDetails by providing individual dates. You can
// use GetDimensionValues in SAVINGS_PLANS to determine the possible dimension
// values.
//
// GetSavingsPlanUtilizationDetails internally groups data by SavingsPlansArn.
//
//    // Example sending a request using GetSavingsPlansUtilizationDetailsRequest.
//    req := client.GetSavingsPlansUtilizationDetailsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ce-2017-10-25/GetSavingsPlansUtilizationDetails
func (c *Client) GetSavingsPlansUtilizationDetailsRequest(input *types.GetSavingsPlansUtilizationDetailsInput) GetSavingsPlansUtilizationDetailsRequest {
	op := &aws.Operation{
		Name:       opGetSavingsPlansUtilizationDetails,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetSavingsPlansUtilizationDetailsInput{}
	}

	req := c.newRequest(op, input, &types.GetSavingsPlansUtilizationDetailsOutput{})
	return GetSavingsPlansUtilizationDetailsRequest{Request: req, Input: input, Copy: c.GetSavingsPlansUtilizationDetailsRequest}
}

// GetSavingsPlansUtilizationDetailsRequest is the request type for the
// GetSavingsPlansUtilizationDetails API operation.
type GetSavingsPlansUtilizationDetailsRequest struct {
	*aws.Request
	Input *types.GetSavingsPlansUtilizationDetailsInput
	Copy  func(*types.GetSavingsPlansUtilizationDetailsInput) GetSavingsPlansUtilizationDetailsRequest
}

// Send marshals and sends the GetSavingsPlansUtilizationDetails API request.
func (r GetSavingsPlansUtilizationDetailsRequest) Send(ctx context.Context) (*GetSavingsPlansUtilizationDetailsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetSavingsPlansUtilizationDetailsResponse{
		GetSavingsPlansUtilizationDetailsOutput: r.Request.Data.(*types.GetSavingsPlansUtilizationDetailsOutput),
		response:                                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetSavingsPlansUtilizationDetailsRequestPaginator returns a paginator for GetSavingsPlansUtilizationDetails.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetSavingsPlansUtilizationDetailsRequest(input)
//   p := costexplorer.NewGetSavingsPlansUtilizationDetailsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetSavingsPlansUtilizationDetailsPaginator(req GetSavingsPlansUtilizationDetailsRequest) GetSavingsPlansUtilizationDetailsPaginator {
	return GetSavingsPlansUtilizationDetailsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetSavingsPlansUtilizationDetailsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetSavingsPlansUtilizationDetailsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetSavingsPlansUtilizationDetailsPaginator struct {
	aws.Pager
}

func (p *GetSavingsPlansUtilizationDetailsPaginator) CurrentPage() *types.GetSavingsPlansUtilizationDetailsOutput {
	return p.Pager.CurrentPage().(*types.GetSavingsPlansUtilizationDetailsOutput)
}

// GetSavingsPlansUtilizationDetailsResponse is the response type for the
// GetSavingsPlansUtilizationDetails API operation.
type GetSavingsPlansUtilizationDetailsResponse struct {
	*types.GetSavingsPlansUtilizationDetailsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetSavingsPlansUtilizationDetails request.
func (r *GetSavingsPlansUtilizationDetailsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
