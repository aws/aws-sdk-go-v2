// Code generated by smithy-go-codegen DO NOT EDIT.

package costexplorer

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves all available filter values for a specified filter over a period of
// time. You can search the dimension values for an arbitrary string.
func (c *Client) GetDimensionValues(ctx context.Context, params *GetDimensionValuesInput, optFns ...func(*Options)) (*GetDimensionValuesOutput, error) {
	stack := middleware.NewStack("GetDimensionValues", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetDimensionValuesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetDimensionValuesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetDimensionValues(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetDimensionValues",
			Err:           err,
		}
	}
	out := result.(*GetDimensionValuesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetDimensionValuesInput struct {
	// The token to retrieve the next set of results. AWS provides the token when the
	// response from a previous call has more results than the maximum page size.
	NextPageToken *string
	// The value that you want to search the filter values for.
	SearchString *string
	// The start and end dates for retrieving the dimension values. The start date is
	// inclusive, but the end date is exclusive. For example, if start is 2017-01-01
	// and end is 2017-05-01, then the cost and usage data is retrieved from 2017-01-01
	// up to and including 2017-04-30 but not including 2017-05-01.
	TimePeriod *types.DateInterval
	// The context for the call to GetDimensionValues. This can be RESERVATIONS or
	// COST_AND_USAGE. The default value is COST_AND_USAGE. If the context is set to
	// RESERVATIONS, the resulting dimension values can be used in the
	// GetReservationUtilization operation. If the context is set to COST_AND_USAGE,
	// the resulting dimension values can be used in the GetCostAndUsage operation. If
	// you set the context to COST_AND_USAGE, you can use the following dimensions for
	// searching:
	//
	//     * AZ - The Availability Zone. An example is us-east-1a.
	//
	//     *
	// DATABASE_ENGINE - The Amazon Relational Database Service database. Examples are
	// Aurora or MySQL.
	//
	//     * INSTANCE_TYPE - The type of Amazon EC2 instance. An
	// example is m4.xlarge.
	//
	//     * LEGAL_ENTITY_NAME - The name of the organization
	// that sells you AWS services, such as Amazon Web Services.
	//
	//     * LINKED_ACCOUNT
	// - The description in the attribute map that includes the full name of the member
	// account. The value field contains the AWS ID of the member account.
	//
	//     *
	// OPERATING_SYSTEM - The operating system. Examples are Windows or Linux.
	//
	//     *
	// OPERATION - The action performed. Examples include RunInstance and
	// CreateBucket.
	//
	//     * PLATFORM - The Amazon EC2 operating system. Examples are
	// Windows or Linux.
	//
	//     * PURCHASE_TYPE - The reservation type of the purchase to
	// which this usage is related. Examples include On-Demand Instances and Standard
	// Reserved Instances.
	//
	//     * SERVICE - The AWS service such as Amazon DynamoDB.
	//
	//
	// * USAGE_TYPE - The type of usage. An example is DataTransfer-In-Bytes. The
	// response for the GetDimensionValues operation includes a unit attribute.
	// Examples include GB and Hrs.
	//
	//     * USAGE_TYPE_GROUP - The grouping of common
	// usage types. An example is Amazon EC2: CloudWatch – Alarms. The response for
	// this operation includes a unit attribute.
	//
	//     * RECORD_TYPE - The different
	// types of charges such as RI fees, usage costs, tax refunds, and credits.
	//
	//     *
	// RESOURCE_ID - The unique identifier of the resource. ResourceId is an opt-in
	// feature only available for last 14 days for EC2-Compute Service.
	//
	// If you set the
	// context to RESERVATIONS, you can use the following dimensions for searching:
	//
	//
	// * AZ - The Availability Zone. An example is us-east-1a.
	//
	//     * CACHE_ENGINE -
	// The Amazon ElastiCache operating system. Examples are Windows or Linux.
	//
	//     *
	// DEPLOYMENT_OPTION - The scope of Amazon Relational Database Service deployments.
	// Valid values are SingleAZ and MultiAZ.
	//
	//     * INSTANCE_TYPE - The type of Amazon
	// EC2 instance. An example is m4.xlarge.
	//
	//     * LINKED_ACCOUNT - The description
	// in the attribute map that includes the full name of the member account. The
	// value field contains the AWS ID of the member account.
	//
	//     * PLATFORM - The
	// Amazon EC2 operating system. Examples are Windows or Linux.
	//
	//     * REGION - The
	// AWS Region.
	//
	//     * SCOPE (Utilization only) - The scope of a Reserved Instance
	// (RI). Values are regional or a single Availability Zone.
	//
	//     * TAG (Coverage
	// only) - The tags that are associated with a Reserved Instance (RI).
	//
	//     *
	// TENANCY - The tenancy of a resource. Examples are shared or dedicated.
	//
	// If you
	// set the context to SAVINGS_PLANS, you can use the following dimensions for
	// searching:
	//
	//     * SAVINGS_PLANS_TYPE - Type of Savings Plans (EC2 Instance or
	// Compute)
	//
	//     * PAYMENT_OPTION - Payment option for the given Savings Plans (for
	// example, All Upfront)
	//
	//     * REGION - The AWS Region.
	//
	//     *
	// INSTANCE_TYPE_FAMILY - The family of instances (For example, m5)
	//
	//     *
	// LINKED_ACCOUNT - The description in the attribute map that includes the full
	// name of the member account. The value field contains the AWS ID of the member
	// account.
	//
	//     * SAVINGS_PLAN_ARN - The unique identifier for your Savings Plan
	Context types.Context
	// The name of the dimension. Each Dimension is available for a different Context.
	// For more information, see Context.  </p>
	Dimension types.Dimension
}

type GetDimensionValuesOutput struct {
	// The number of results that AWS returned at one time.
	ReturnSize *int32
	// The total number of search results.
	TotalSize *int32
	// The token for the next set of retrievable results. AWS provides the token when
	// the response from a previous call has more results than the maximum page size.
	NextPageToken *string
	// The filters that you used to filter your request. Some dimensions are available
	// only for a specific context. If you set the context to COST_AND_USAGE, you can
	// use the following dimensions for searching:
	//
	//     * AZ - The Availability Zone.
	// An example is us-east-1a.
	//
	//     * DATABASE_ENGINE - The Amazon Relational
	// Database Service database. Examples are Aurora or MySQL.
	//
	//     * INSTANCE_TYPE -
	// The type of Amazon EC2 instance. An example is m4.xlarge.
	//
	//     *
	// LEGAL_ENTITY_NAME - The name of the organization that sells you AWS services,
	// such as Amazon Web Services.
	//
	//     * LINKED_ACCOUNT - The description in the
	// attribute map that includes the full name of the member account. The value field
	// contains the AWS ID of the member account.
	//
	//     * OPERATING_SYSTEM - The
	// operating system. Examples are Windows or Linux.
	//
	//     * OPERATION - The action
	// performed. Examples include RunInstance and CreateBucket.
	//
	//     * PLATFORM - The
	// Amazon EC2 operating system. Examples are Windows or Linux.
	//
	//     * PURCHASE_TYPE
	// - The reservation type of the purchase to which this usage is related. Examples
	// include On-Demand Instances and Standard Reserved Instances.
	//
	//     * SERVICE -
	// The AWS service such as Amazon DynamoDB.
	//
	//     * USAGE_TYPE - The type of usage.
	// An example is DataTransfer-In-Bytes. The response for the GetDimensionValues
	// operation includes a unit attribute. Examples include GB and Hrs.
	//
	//     *
	// USAGE_TYPE_GROUP - The grouping of common usage types. An example is Amazon EC2:
	// CloudWatch – Alarms. The response for this operation includes a unit
	// attribute.
	//
	//     * RECORD_TYPE - The different types of charges such as RI fees,
	// usage costs, tax refunds, and credits.
	//
	//     * RESOURCE_ID - The unique
	// identifier of the resource. ResourceId is an opt-in feature only available for
	// last 14 days for EC2-Compute Service.
	//
	// If you set the context to RESERVATIONS,
	// you can use the following dimensions for searching:
	//
	//     * AZ - The Availability
	// Zone. An example is us-east-1a.
	//
	//     * CACHE_ENGINE - The Amazon ElastiCache
	// operating system. Examples are Windows or Linux.
	//
	//     * DEPLOYMENT_OPTION - The
	// scope of Amazon Relational Database Service deployments. Valid values are
	// SingleAZ and MultiAZ.
	//
	//     * INSTANCE_TYPE - The type of Amazon EC2 instance. An
	// example is m4.xlarge.
	//
	//     * LINKED_ACCOUNT - The description in the attribute
	// map that includes the full name of the member account. The value field contains
	// the AWS ID of the member account.
	//
	//     * PLATFORM - The Amazon EC2 operating
	// system. Examples are Windows or Linux.
	//
	//     * REGION - The AWS Region.
	//
	//     *
	// SCOPE (Utilization only) - The scope of a Reserved Instance (RI). Values are
	// regional or a single Availability Zone.
	//
	//     * TAG (Coverage only) - The tags
	// that are associated with a Reserved Instance (RI).
	//
	//     * TENANCY - The tenancy
	// of a resource. Examples are shared or dedicated.
	//
	// If you set the context to
	// SAVINGS_PLANS, you can use the following dimensions for searching:
	//
	//     *
	// SAVINGS_PLANS_TYPE - Type of Savings Plans (EC2 Instance or Compute)
	//
	//     *
	// PAYMENT_OPTION - Payment option for the given Savings Plans (for example, All
	// Upfront)
	//
	//     * REGION - The AWS Region.
	//
	//     * INSTANCE_TYPE_FAMILY - The
	// family of instances (For example, m5)
	//
	//     * LINKED_ACCOUNT - The description in
	// the attribute map that includes the full name of the member account. The value
	// field contains the AWS ID of the member account.
	//
	//     * SAVINGS_PLAN_ARN - The
	// unique identifier for your Savings Plan
	DimensionValues []*types.DimensionValuesWithAttributes

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetDimensionValuesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetDimensionValues{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetDimensionValues{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetDimensionValues(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ce",
		OperationName: "GetDimensionValues",
	}
}
