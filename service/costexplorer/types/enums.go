// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AccountScope string

// Enum values for AccountScope
const (
	AccountScopePayer  AccountScope = "PAYER"
	AccountScopeLinked AccountScope = "LINKED"
)

// Values returns all known values for AccountScope. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (AccountScope) Values() []AccountScope {
	return []AccountScope{
		"PAYER",
		"LINKED",
	}
}

type AnomalyFeedbackType string

// Enum values for AnomalyFeedbackType
const (
	AnomalyFeedbackTypeYes              AnomalyFeedbackType = "YES"
	AnomalyFeedbackTypeNo               AnomalyFeedbackType = "NO"
	AnomalyFeedbackTypePlanned_activity AnomalyFeedbackType = "PLANNED_ACTIVITY"
)

// Values returns all known values for AnomalyFeedbackType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AnomalyFeedbackType) Values() []AnomalyFeedbackType {
	return []AnomalyFeedbackType{
		"YES",
		"NO",
		"PLANNED_ACTIVITY",
	}
}

type AnomalySubscriptionFrequency string

// Enum values for AnomalySubscriptionFrequency
const (
	AnomalySubscriptionFrequencyDaily     AnomalySubscriptionFrequency = "DAILY"
	AnomalySubscriptionFrequencyImmediate AnomalySubscriptionFrequency = "IMMEDIATE"
	AnomalySubscriptionFrequencyWeekly    AnomalySubscriptionFrequency = "WEEKLY"
)

// Values returns all known values for AnomalySubscriptionFrequency. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnomalySubscriptionFrequency) Values() []AnomalySubscriptionFrequency {
	return []AnomalySubscriptionFrequency{
		"DAILY",
		"IMMEDIATE",
		"WEEKLY",
	}
}

type Context string

// Enum values for Context
const (
	ContextCost_and_usage Context = "COST_AND_USAGE"
	ContextReservations   Context = "RESERVATIONS"
	ContextSavings_plans  Context = "SAVINGS_PLANS"
)

// Values returns all known values for Context. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Context) Values() []Context {
	return []Context{
		"COST_AND_USAGE",
		"RESERVATIONS",
		"SAVINGS_PLANS",
	}
}

type CostCategoryRuleVersion string

// Enum values for CostCategoryRuleVersion
const (
	CostCategoryRuleVersionCostcategoryexpressionv1 CostCategoryRuleVersion = "CostCategoryExpression.v1"
)

// Values returns all known values for CostCategoryRuleVersion. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CostCategoryRuleVersion) Values() []CostCategoryRuleVersion {
	return []CostCategoryRuleVersion{
		"CostCategoryExpression.v1",
	}
}

type CostCategoryStatus string

// Enum values for CostCategoryStatus
const (
	CostCategoryStatusProcessing CostCategoryStatus = "PROCESSING"
	CostCategoryStatusApplied    CostCategoryStatus = "APPLIED"
)

// Values returns all known values for CostCategoryStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CostCategoryStatus) Values() []CostCategoryStatus {
	return []CostCategoryStatus{
		"PROCESSING",
		"APPLIED",
	}
}

type CostCategoryStatusComponent string

// Enum values for CostCategoryStatusComponent
const (
	CostCategoryStatusComponentCost_explorer CostCategoryStatusComponent = "COST_EXPLORER"
)

// Values returns all known values for CostCategoryStatusComponent. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (CostCategoryStatusComponent) Values() []CostCategoryStatusComponent {
	return []CostCategoryStatusComponent{
		"COST_EXPLORER",
	}
}

type Dimension string

// Enum values for Dimension
const (
	DimensionAz                   Dimension = "AZ"
	DimensionInstance_type        Dimension = "INSTANCE_TYPE"
	DimensionLinked_account       Dimension = "LINKED_ACCOUNT"
	DimensionLinked_account_name  Dimension = "LINKED_ACCOUNT_NAME"
	DimensionOperation            Dimension = "OPERATION"
	DimensionPurchase_type        Dimension = "PURCHASE_TYPE"
	DimensionRegion               Dimension = "REGION"
	DimensionService              Dimension = "SERVICE"
	DimensionService_code         Dimension = "SERVICE_CODE"
	DimensionUsage_type           Dimension = "USAGE_TYPE"
	DimensionUsage_type_group     Dimension = "USAGE_TYPE_GROUP"
	DimensionRecord_type          Dimension = "RECORD_TYPE"
	DimensionOperating_system     Dimension = "OPERATING_SYSTEM"
	DimensionTenancy              Dimension = "TENANCY"
	DimensionScope                Dimension = "SCOPE"
	DimensionPlatform             Dimension = "PLATFORM"
	DimensionSubscription_id      Dimension = "SUBSCRIPTION_ID"
	DimensionLegal_entity_name    Dimension = "LEGAL_ENTITY_NAME"
	DimensionDeployment_option    Dimension = "DEPLOYMENT_OPTION"
	DimensionDatabase_engine      Dimension = "DATABASE_ENGINE"
	DimensionCache_engine         Dimension = "CACHE_ENGINE"
	DimensionInstance_type_family Dimension = "INSTANCE_TYPE_FAMILY"
	DimensionBilling_entity       Dimension = "BILLING_ENTITY"
	DimensionReservation_id       Dimension = "RESERVATION_ID"
	DimensionResource_id          Dimension = "RESOURCE_ID"
	DimensionRightsizing_type     Dimension = "RIGHTSIZING_TYPE"
	DimensionSavings_plans_type   Dimension = "SAVINGS_PLANS_TYPE"
	DimensionSavings_plan_arn     Dimension = "SAVINGS_PLAN_ARN"
	DimensionPayment_option       Dimension = "PAYMENT_OPTION"
)

// Values returns all known values for Dimension. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Dimension) Values() []Dimension {
	return []Dimension{
		"AZ",
		"INSTANCE_TYPE",
		"LINKED_ACCOUNT",
		"LINKED_ACCOUNT_NAME",
		"OPERATION",
		"PURCHASE_TYPE",
		"REGION",
		"SERVICE",
		"SERVICE_CODE",
		"USAGE_TYPE",
		"USAGE_TYPE_GROUP",
		"RECORD_TYPE",
		"OPERATING_SYSTEM",
		"TENANCY",
		"SCOPE",
		"PLATFORM",
		"SUBSCRIPTION_ID",
		"LEGAL_ENTITY_NAME",
		"DEPLOYMENT_OPTION",
		"DATABASE_ENGINE",
		"CACHE_ENGINE",
		"INSTANCE_TYPE_FAMILY",
		"BILLING_ENTITY",
		"RESERVATION_ID",
		"RESOURCE_ID",
		"RIGHTSIZING_TYPE",
		"SAVINGS_PLANS_TYPE",
		"SAVINGS_PLAN_ARN",
		"PAYMENT_OPTION",
	}
}

type Granularity string

// Enum values for Granularity
const (
	GranularityDaily   Granularity = "DAILY"
	GranularityMonthly Granularity = "MONTHLY"
	GranularityHourly  Granularity = "HOURLY"
)

// Values returns all known values for Granularity. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (Granularity) Values() []Granularity {
	return []Granularity{
		"DAILY",
		"MONTHLY",
		"HOURLY",
	}
}

type GroupDefinitionType string

// Enum values for GroupDefinitionType
const (
	GroupDefinitionTypeDimension     GroupDefinitionType = "DIMENSION"
	GroupDefinitionTypeTag           GroupDefinitionType = "TAG"
	GroupDefinitionTypeCost_category GroupDefinitionType = "COST_CATEGORY"
)

// Values returns all known values for GroupDefinitionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (GroupDefinitionType) Values() []GroupDefinitionType {
	return []GroupDefinitionType{
		"DIMENSION",
		"TAG",
		"COST_CATEGORY",
	}
}

type LookbackPeriodInDays string

// Enum values for LookbackPeriodInDays
const (
	LookbackPeriodInDaysSeven_days  LookbackPeriodInDays = "SEVEN_DAYS"
	LookbackPeriodInDaysThirty_days LookbackPeriodInDays = "THIRTY_DAYS"
	LookbackPeriodInDaysSixty_days  LookbackPeriodInDays = "SIXTY_DAYS"
)

// Values returns all known values for LookbackPeriodInDays. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LookbackPeriodInDays) Values() []LookbackPeriodInDays {
	return []LookbackPeriodInDays{
		"SEVEN_DAYS",
		"THIRTY_DAYS",
		"SIXTY_DAYS",
	}
}

type MatchOption string

// Enum values for MatchOption
const (
	MatchOptionEquals           MatchOption = "EQUALS"
	MatchOptionStarts_with      MatchOption = "STARTS_WITH"
	MatchOptionEnds_with        MatchOption = "ENDS_WITH"
	MatchOptionContains         MatchOption = "CONTAINS"
	MatchOptionCase_sensitive   MatchOption = "CASE_SENSITIVE"
	MatchOptionCase_insensitive MatchOption = "CASE_INSENSITIVE"
)

// Values returns all known values for MatchOption. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (MatchOption) Values() []MatchOption {
	return []MatchOption{
		"EQUALS",
		"STARTS_WITH",
		"ENDS_WITH",
		"CONTAINS",
		"CASE_SENSITIVE",
		"CASE_INSENSITIVE",
	}
}

type Metric string

// Enum values for Metric
const (
	MetricBlended_cost            Metric = "BLENDED_COST"
	MetricUnblended_cost          Metric = "UNBLENDED_COST"
	MetricAmortized_cost          Metric = "AMORTIZED_COST"
	MetricNet_unblended_cost      Metric = "NET_UNBLENDED_COST"
	MetricNet_amortized_cost      Metric = "NET_AMORTIZED_COST"
	MetricUsage_quantity          Metric = "USAGE_QUANTITY"
	MetricNormalized_usage_amount Metric = "NORMALIZED_USAGE_AMOUNT"
)

// Values returns all known values for Metric. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Metric) Values() []Metric {
	return []Metric{
		"BLENDED_COST",
		"UNBLENDED_COST",
		"AMORTIZED_COST",
		"NET_UNBLENDED_COST",
		"NET_AMORTIZED_COST",
		"USAGE_QUANTITY",
		"NORMALIZED_USAGE_AMOUNT",
	}
}

type MonitorDimension string

// Enum values for MonitorDimension
const (
	MonitorDimensionService MonitorDimension = "SERVICE"
)

// Values returns all known values for MonitorDimension. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (MonitorDimension) Values() []MonitorDimension {
	return []MonitorDimension{
		"SERVICE",
	}
}

type MonitorType string

// Enum values for MonitorType
const (
	MonitorTypeDimensional MonitorType = "DIMENSIONAL"
	MonitorTypeCustom      MonitorType = "CUSTOM"
)

// Values returns all known values for MonitorType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (MonitorType) Values() []MonitorType {
	return []MonitorType{
		"DIMENSIONAL",
		"CUSTOM",
	}
}

type NumericOperator string

// Enum values for NumericOperator
const (
	NumericOperatorEqual                 NumericOperator = "EQUAL"
	NumericOperatorGreater_than_or_equal NumericOperator = "GREATER_THAN_OR_EQUAL"
	NumericOperatorLess_than_or_equal    NumericOperator = "LESS_THAN_OR_EQUAL"
	NumericOperatorGreater_than          NumericOperator = "GREATER_THAN"
	NumericOperatorLess_than             NumericOperator = "LESS_THAN"
	NumericOperatorBetween               NumericOperator = "BETWEEN"
)

// Values returns all known values for NumericOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NumericOperator) Values() []NumericOperator {
	return []NumericOperator{
		"EQUAL",
		"GREATER_THAN_OR_EQUAL",
		"LESS_THAN_OR_EQUAL",
		"GREATER_THAN",
		"LESS_THAN",
		"BETWEEN",
	}
}

type OfferingClass string

// Enum values for OfferingClass
const (
	OfferingClassStandard    OfferingClass = "STANDARD"
	OfferingClassConvertible OfferingClass = "CONVERTIBLE"
)

// Values returns all known values for OfferingClass. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OfferingClass) Values() []OfferingClass {
	return []OfferingClass{
		"STANDARD",
		"CONVERTIBLE",
	}
}

type PaymentOption string

// Enum values for PaymentOption
const (
	PaymentOptionNo_upfront         PaymentOption = "NO_UPFRONT"
	PaymentOptionPartial_upfront    PaymentOption = "PARTIAL_UPFRONT"
	PaymentOptionAll_upfront        PaymentOption = "ALL_UPFRONT"
	PaymentOptionLight_utilization  PaymentOption = "LIGHT_UTILIZATION"
	PaymentOptionMedium_utilization PaymentOption = "MEDIUM_UTILIZATION"
	PaymentOptionHeavy_utilization  PaymentOption = "HEAVY_UTILIZATION"
)

// Values returns all known values for PaymentOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PaymentOption) Values() []PaymentOption {
	return []PaymentOption{
		"NO_UPFRONT",
		"PARTIAL_UPFRONT",
		"ALL_UPFRONT",
		"LIGHT_UTILIZATION",
		"MEDIUM_UTILIZATION",
		"HEAVY_UTILIZATION",
	}
}

type RecommendationTarget string

// Enum values for RecommendationTarget
const (
	RecommendationTargetSame_instance_family  RecommendationTarget = "SAME_INSTANCE_FAMILY"
	RecommendationTargetCross_instance_family RecommendationTarget = "CROSS_INSTANCE_FAMILY"
)

// Values returns all known values for RecommendationTarget. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RecommendationTarget) Values() []RecommendationTarget {
	return []RecommendationTarget{
		"SAME_INSTANCE_FAMILY",
		"CROSS_INSTANCE_FAMILY",
	}
}

type RightsizingType string

// Enum values for RightsizingType
const (
	RightsizingTypeTerminate RightsizingType = "TERMINATE"
	RightsizingTypeModify    RightsizingType = "MODIFY"
)

// Values returns all known values for RightsizingType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RightsizingType) Values() []RightsizingType {
	return []RightsizingType{
		"TERMINATE",
		"MODIFY",
	}
}

type SubscriberStatus string

// Enum values for SubscriberStatus
const (
	SubscriberStatusConfirmed SubscriberStatus = "CONFIRMED"
	SubscriberStatusDeclined  SubscriberStatus = "DECLINED"
)

// Values returns all known values for SubscriberStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SubscriberStatus) Values() []SubscriberStatus {
	return []SubscriberStatus{
		"CONFIRMED",
		"DECLINED",
	}
}

type SubscriberType string

// Enum values for SubscriberType
const (
	SubscriberTypeEmail SubscriberType = "EMAIL"
	SubscriberTypeSns   SubscriberType = "SNS"
)

// Values returns all known values for SubscriberType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SubscriberType) Values() []SubscriberType {
	return []SubscriberType{
		"EMAIL",
		"SNS",
	}
}

type SupportedSavingsPlansType string

// Enum values for SupportedSavingsPlansType
const (
	SupportedSavingsPlansTypeCompute_sp      SupportedSavingsPlansType = "COMPUTE_SP"
	SupportedSavingsPlansTypeEc2_instance_sp SupportedSavingsPlansType = "EC2_INSTANCE_SP"
)

// Values returns all known values for SupportedSavingsPlansType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (SupportedSavingsPlansType) Values() []SupportedSavingsPlansType {
	return []SupportedSavingsPlansType{
		"COMPUTE_SP",
		"EC2_INSTANCE_SP",
	}
}

type TermInYears string

// Enum values for TermInYears
const (
	TermInYearsOne_year    TermInYears = "ONE_YEAR"
	TermInYearsThree_years TermInYears = "THREE_YEARS"
)

// Values returns all known values for TermInYears. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (TermInYears) Values() []TermInYears {
	return []TermInYears{
		"ONE_YEAR",
		"THREE_YEARS",
	}
}
