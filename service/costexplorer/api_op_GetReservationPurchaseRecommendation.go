// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package costexplorer

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
)

const opGetReservationPurchaseRecommendation = "GetReservationPurchaseRecommendation"

// GetReservationPurchaseRecommendationRequest returns a request value for making API operation for
// AWS Cost Explorer Service.
//
// Gets recommendations for which reservations to purchase. These recommendations
// could help you reduce your costs. Reservations provide a discounted hourly
// rate (up to 75%) compared to On-Demand pricing.
//
// AWS generates your recommendations by identifying your On-Demand usage during
// a specific time period and collecting your usage into categories that are
// eligible for a reservation. After AWS has these categories, it simulates
// every combination of reservations in each category of usage to identify the
// best number of each type of RI to purchase to maximize your estimated savings.
//
// For example, AWS automatically aggregates your Amazon EC2 Linux, shared tenancy,
// and c4 family usage in the US West (Oregon) Region and recommends that you
// buy size-flexible regional reservations to apply to the c4 family usage.
// AWS recommends the smallest size instance in an instance family. This makes
// it easier to purchase a size-flexible RI. AWS also shows the equal number
// of normalized units so that you can purchase any instance size that you want.
// For this example, your RI recommendation would be for c4.large because that
// is the smallest size instance in the c4 instance family.
//
//    // Example sending a request using GetReservationPurchaseRecommendationRequest.
//    req := client.GetReservationPurchaseRecommendationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ce-2017-10-25/GetReservationPurchaseRecommendation
func (c *Client) GetReservationPurchaseRecommendationRequest(input *types.GetReservationPurchaseRecommendationInput) GetReservationPurchaseRecommendationRequest {
	op := &aws.Operation{
		Name:       opGetReservationPurchaseRecommendation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.GetReservationPurchaseRecommendationInput{}
	}

	req := c.newRequest(op, input, &types.GetReservationPurchaseRecommendationOutput{})
	return GetReservationPurchaseRecommendationRequest{Request: req, Input: input, Copy: c.GetReservationPurchaseRecommendationRequest}
}

// GetReservationPurchaseRecommendationRequest is the request type for the
// GetReservationPurchaseRecommendation API operation.
type GetReservationPurchaseRecommendationRequest struct {
	*aws.Request
	Input *types.GetReservationPurchaseRecommendationInput
	Copy  func(*types.GetReservationPurchaseRecommendationInput) GetReservationPurchaseRecommendationRequest
}

// Send marshals and sends the GetReservationPurchaseRecommendation API request.
func (r GetReservationPurchaseRecommendationRequest) Send(ctx context.Context) (*GetReservationPurchaseRecommendationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetReservationPurchaseRecommendationResponse{
		GetReservationPurchaseRecommendationOutput: r.Request.Data.(*types.GetReservationPurchaseRecommendationOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetReservationPurchaseRecommendationResponse is the response type for the
// GetReservationPurchaseRecommendation API operation.
type GetReservationPurchaseRecommendationResponse struct {
	*types.GetReservationPurchaseRecommendationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetReservationPurchaseRecommendation request.
func (r *GetReservationPurchaseRecommendationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
