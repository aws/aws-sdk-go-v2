// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package xray

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/xray/types"
)

const opGetTraceSummaries = "GetTraceSummaries"

// GetTraceSummariesRequest returns a request value for making API operation for
// AWS X-Ray.
//
// Retrieves IDs and metadata for traces available for a specified time frame
// using an optional filter. To get the full traces, pass the trace IDs to BatchGetTraces.
//
// A filter expression can target traced requests that hit specific service
// nodes or edges, have errors, or come from a known user. For example, the
// following filter expression targets traces that pass through api.example.com:
//
// service("api.example.com")
//
// This filter expression finds traces that have an annotation named account
// with the value 12345:
//
// annotation.account = "12345"
//
// For a full list of indexed fields and keywords that you can use in filter
// expressions, see Using Filter Expressions (https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html)
// in the AWS X-Ray Developer Guide.
//
//    // Example sending a request using GetTraceSummariesRequest.
//    req := client.GetTraceSummariesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/xray-2016-04-12/GetTraceSummaries
func (c *Client) GetTraceSummariesRequest(input *types.GetTraceSummariesInput) GetTraceSummariesRequest {
	op := &aws.Operation{
		Name:       opGetTraceSummaries,
		HTTPMethod: "POST",
		HTTPPath:   "/TraceSummaries",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetTraceSummariesInput{}
	}

	req := c.newRequest(op, input, &types.GetTraceSummariesOutput{})
	return GetTraceSummariesRequest{Request: req, Input: input, Copy: c.GetTraceSummariesRequest}
}

// GetTraceSummariesRequest is the request type for the
// GetTraceSummaries API operation.
type GetTraceSummariesRequest struct {
	*aws.Request
	Input *types.GetTraceSummariesInput
	Copy  func(*types.GetTraceSummariesInput) GetTraceSummariesRequest
}

// Send marshals and sends the GetTraceSummaries API request.
func (r GetTraceSummariesRequest) Send(ctx context.Context) (*GetTraceSummariesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetTraceSummariesResponse{
		GetTraceSummariesOutput: r.Request.Data.(*types.GetTraceSummariesOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetTraceSummariesRequestPaginator returns a paginator for GetTraceSummaries.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetTraceSummariesRequest(input)
//   p := xray.NewGetTraceSummariesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetTraceSummariesPaginator(req GetTraceSummariesRequest) GetTraceSummariesPaginator {
	return GetTraceSummariesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetTraceSummariesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetTraceSummariesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetTraceSummariesPaginator struct {
	aws.Pager
}

func (p *GetTraceSummariesPaginator) CurrentPage() *types.GetTraceSummariesOutput {
	return p.Pager.CurrentPage().(*types.GetTraceSummariesOutput)
}

// GetTraceSummariesResponse is the response type for the
// GetTraceSummaries API operation.
type GetTraceSummariesResponse struct {
	*types.GetTraceSummariesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetTraceSummaries request.
func (r *GetTraceSummariesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
