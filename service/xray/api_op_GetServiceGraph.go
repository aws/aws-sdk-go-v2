// Code generated by smithy-go-codegen DO NOT EDIT.

package xray

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/xray/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves a document that describes services that process incoming requests, and
// downstream services that they call as a result. Root services process incoming
// requests and make calls to downstream services. Root services are applications
// that use the AWS X-Ray SDK (https://docs.aws.amazon.com/xray/index.html).
// Downstream services can be other applications, AWS resources, HTTP web APIs, or
// SQL databases.
func (c *Client) GetServiceGraph(ctx context.Context, params *GetServiceGraphInput, optFns ...func(*Options)) (*GetServiceGraphOutput, error) {
	stack := middleware.NewStack("GetServiceGraph", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetServiceGraphMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetServiceGraphValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetServiceGraph(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetServiceGraph",
			Err:           err,
		}
	}
	out := result.(*GetServiceGraphOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetServiceGraphInput struct {
	// The name of a group to generate a graph based on.
	GroupName *string
	// The end of the timeframe for which to generate a graph.
	EndTime *time.Time
	// The ARN of a group to generate a graph based on.
	GroupARN *string
	// Pagination token.
	NextToken *string
	// The start of the time frame for which to generate a graph.
	StartTime *time.Time
}

type GetServiceGraphOutput struct {
	// A flag indicating whether the group's filter expression has been consistent, or
	// if the returned service graph may show traces from an older version of the
	// group's filter expression.
	ContainsOldGroupVersions *bool
	// Pagination token.
	NextToken *string
	// The end of the time frame for which the graph was generated.
	EndTime *time.Time
	// The start of the time frame for which the graph was generated.
	StartTime *time.Time
	// The services that have processed a traced request during the specified time
	// frame.
	Services []*types.Service

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetServiceGraphMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetServiceGraph{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetServiceGraph{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetServiceGraph(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "xray",
		OperationName: "GetServiceGraph",
	}
}
