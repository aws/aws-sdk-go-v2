// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package xrayiface provides an interface to enable mocking the AWS X-Ray service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package xrayiface

import (
	"github.com/aws/aws-sdk-go-v2/service/xray"
	"github.com/aws/aws-sdk-go-v2/service/xray/types"
)

// ClientAPI provides an interface to enable mocking the
// xray.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // AWS X-Ray.
//    func myFunc(svc xrayiface.ClientAPI) bool {
//        // Make svc.BatchGetTraces request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := xray.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        xrayiface.ClientPI
//    }
//    func (m *mockClientClient) BatchGetTraces(input *types.BatchGetTracesInput) (*types.BatchGetTracesOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	BatchGetTracesRequest(*types.BatchGetTracesInput) xray.BatchGetTracesRequest

	CreateGroupRequest(*types.CreateGroupInput) xray.CreateGroupRequest

	CreateSamplingRuleRequest(*types.CreateSamplingRuleInput) xray.CreateSamplingRuleRequest

	DeleteGroupRequest(*types.DeleteGroupInput) xray.DeleteGroupRequest

	DeleteSamplingRuleRequest(*types.DeleteSamplingRuleInput) xray.DeleteSamplingRuleRequest

	GetEncryptionConfigRequest(*types.GetEncryptionConfigInput) xray.GetEncryptionConfigRequest

	GetGroupRequest(*types.GetGroupInput) xray.GetGroupRequest

	GetGroupsRequest(*types.GetGroupsInput) xray.GetGroupsRequest

	GetSamplingRulesRequest(*types.GetSamplingRulesInput) xray.GetSamplingRulesRequest

	GetSamplingStatisticSummariesRequest(*types.GetSamplingStatisticSummariesInput) xray.GetSamplingStatisticSummariesRequest

	GetSamplingTargetsRequest(*types.GetSamplingTargetsInput) xray.GetSamplingTargetsRequest

	GetServiceGraphRequest(*types.GetServiceGraphInput) xray.GetServiceGraphRequest

	GetTimeSeriesServiceStatisticsRequest(*types.GetTimeSeriesServiceStatisticsInput) xray.GetTimeSeriesServiceStatisticsRequest

	GetTraceGraphRequest(*types.GetTraceGraphInput) xray.GetTraceGraphRequest

	GetTraceSummariesRequest(*types.GetTraceSummariesInput) xray.GetTraceSummariesRequest

	PutEncryptionConfigRequest(*types.PutEncryptionConfigInput) xray.PutEncryptionConfigRequest

	PutTelemetryRecordsRequest(*types.PutTelemetryRecordsInput) xray.PutTelemetryRecordsRequest

	PutTraceSegmentsRequest(*types.PutTraceSegmentsInput) xray.PutTraceSegmentsRequest

	UpdateGroupRequest(*types.UpdateGroupInput) xray.UpdateGroupRequest

	UpdateSamplingRuleRequest(*types.UpdateSamplingRuleInput) xray.UpdateSamplingRuleRequest
}

var _ ClientAPI = (*xray.Client)(nil)
