// Code generated by smithy-go-codegen DO NOT EDIT.

package xray

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/xray/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Creates a group resource with a name and a filter expression.
func (c *Client) CreateGroup(ctx context.Context, params *CreateGroupInput, optFns ...func(*Options)) (*CreateGroupOutput, error) {
	if params == nil {
		params = &CreateGroupInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateGroup", params, optFns, c.addOperationCreateGroupMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateGroupOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateGroupInput struct {

	// The case-sensitive name of the new group. Default is a reserved name and names
	// must be unique.
	//
	// This member is required.
	GroupName *string

	// The filter expression defining criteria by which to group traces.
	FilterExpression *string

	// The structure containing configurations related to insights.
	//
	// * The
	// InsightsEnabled boolean can be set to true to enable insights for the new group
	// or false to disable insights for the new group.
	//
	// * The NotifcationsEnabled
	// boolean can be set to true to enable insights notifications for the new group.
	// Notifications may only be enabled on a group with InsightsEnabled set to true.
	InsightsConfiguration *types.InsightsConfiguration

	// A map that contains one or more tag keys and tag values to attach to an X-Ray
	// group. For more information about ways to use tags, see Tagging Amazon Web
	// Services resources
	// (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon
	// Web Services General Reference. The following restrictions apply to tags:
	//
	// *
	// Maximum number of user-applied tags per resource: 50
	//
	// * Maximum tag key length:
	// 128 Unicode characters
	//
	// * Maximum tag value length: 256 Unicode characters
	//
	// *
	// Valid values for key and value: a-z, A-Z, 0-9, space, and the following
	// characters: _ . : / = + - and @
	//
	// * Tag keys and values are case sensitive.
	//
	// *
	// Don't use aws: as a prefix for keys; it's reserved for Amazon Web Services use.
	Tags []types.Tag

	noSmithyDocumentSerde
}

type CreateGroupOutput struct {

	// The group that was created. Contains the name of the group that was created, the
	// Amazon Resource Name (ARN) of the group that was generated based on the group
	// name, the filter expression, and the insight configuration that was assigned to
	// the group.
	Group *types.Group

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateGroupMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateGroup{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateGroup{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateGroupValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateGroup(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateGroup(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "xray",
		OperationName: "CreateGroup",
	}
}
