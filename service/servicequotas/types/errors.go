// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// You do not have sufficient access to perform this action.
type AccessDeniedException struct {
	Message *string
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// The action you attempted is not allowed unless Service Access with Service
// Quotas is enabled in your organization. To enable, call
// AssociateServiceQuotaTemplate ().
type AWSServiceAccessNotEnabledException struct {
	Message *string
}

func (e *AWSServiceAccessNotEnabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AWSServiceAccessNotEnabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AWSServiceAccessNotEnabledException) ErrorCode() string {
	return "AWSServiceAccessNotEnabledException"
}
func (e *AWSServiceAccessNotEnabledException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *AWSServiceAccessNotEnabledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AWSServiceAccessNotEnabledException) HasMessage() bool {
	return e.Message != nil
}

// You can't perform this action because a dependency does not have access.
type DependencyAccessDeniedException struct {
	Message *string
}

func (e *DependencyAccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DependencyAccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DependencyAccessDeniedException) ErrorCode() string {
	return "DependencyAccessDeniedException"
}
func (e *DependencyAccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DependencyAccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DependencyAccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// Invalid input was provided.
type IllegalArgumentException struct {
	Message *string
}

func (e *IllegalArgumentException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IllegalArgumentException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IllegalArgumentException) ErrorCode() string             { return "IllegalArgumentException" }
func (e *IllegalArgumentException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IllegalArgumentException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IllegalArgumentException) HasMessage() bool {
	return e.Message != nil
}

// Invalid input was provided.
type InvalidPaginationTokenException struct {
	Message *string
}

func (e *InvalidPaginationTokenException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidPaginationTokenException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidPaginationTokenException) ErrorCode() string {
	return "InvalidPaginationTokenException"
}
func (e *InvalidPaginationTokenException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidPaginationTokenException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidPaginationTokenException) HasMessage() bool {
	return e.Message != nil
}

// Invalid input was provided for the .
type InvalidResourceStateException struct {
	Message *string
}

func (e *InvalidResourceStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidResourceStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidResourceStateException) ErrorCode() string             { return "InvalidResourceStateException" }
func (e *InvalidResourceStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidResourceStateException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidResourceStateException) HasMessage() bool {
	return e.Message != nil
}

// The account making this call is not a member of an organization.
type NoAvailableOrganizationException struct {
	Message *string
}

func (e *NoAvailableOrganizationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NoAvailableOrganizationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NoAvailableOrganizationException) ErrorCode() string {
	return "NoAvailableOrganizationException"
}
func (e *NoAvailableOrganizationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NoAvailableOrganizationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NoAvailableOrganizationException) HasMessage() bool {
	return e.Message != nil
}

// The specified resource does not exist.
type NoSuchResourceException struct {
	Message *string
}

func (e *NoSuchResourceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NoSuchResourceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NoSuchResourceException) ErrorCode() string             { return "NoSuchResourceException" }
func (e *NoSuchResourceException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NoSuchResourceException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NoSuchResourceException) HasMessage() bool {
	return e.Message != nil
}

// The organization that your account belongs to, is not in All Features mode. To
// enable all features mode, see EnableAllFeatures
// (https://docs.aws.amazon.com/organizations/latest/APIReference/API_EnableAllFeatures.html).
type OrganizationNotInAllFeaturesModeException struct {
	Message *string
}

func (e *OrganizationNotInAllFeaturesModeException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OrganizationNotInAllFeaturesModeException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OrganizationNotInAllFeaturesModeException) ErrorCode() string {
	return "OrganizationNotInAllFeaturesModeException"
}
func (e *OrganizationNotInAllFeaturesModeException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *OrganizationNotInAllFeaturesModeException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OrganizationNotInAllFeaturesModeException) HasMessage() bool {
	return e.Message != nil
}

// You have exceeded your service quota. To perform the requested action, remove
// some of the relevant resources, or use Service Quotas to request a service quota
// increase.
type QuotaExceededException struct {
	Message *string
}

func (e *QuotaExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *QuotaExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *QuotaExceededException) ErrorCode() string             { return "QuotaExceededException" }
func (e *QuotaExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *QuotaExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *QuotaExceededException) HasMessage() bool {
	return e.Message != nil
}

// The specified resource already exists.
type ResourceAlreadyExistsException struct {
	Message *string
}

func (e *ResourceAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceAlreadyExistsException) ErrorCode() string             { return "ResourceAlreadyExistsException" }
func (e *ResourceAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// Something went wrong.
type ServiceException struct {
	Message *string
}

func (e *ServiceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServiceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServiceException) ErrorCode() string             { return "ServiceException" }
func (e *ServiceException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *ServiceException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ServiceException) HasMessage() bool {
	return e.Message != nil
}

// The quota request template is not associated with your organization. To use the
// template, call AssociateServiceQuotaTemplate ().
type ServiceQuotaTemplateNotInUseException struct {
	Message *string
}

func (e *ServiceQuotaTemplateNotInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServiceQuotaTemplateNotInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServiceQuotaTemplateNotInUseException) ErrorCode() string {
	return "ServiceQuotaTemplateNotInUseException"
}
func (e *ServiceQuotaTemplateNotInUseException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ServiceQuotaTemplateNotInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ServiceQuotaTemplateNotInUseException) HasMessage() bool {
	return e.Message != nil
}

// The Service Quotas template is not available in the Region where you are making
// the request. Please make the request in us-east-1.
type TemplatesNotAvailableInRegionException struct {
	Message *string
}

func (e *TemplatesNotAvailableInRegionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TemplatesNotAvailableInRegionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TemplatesNotAvailableInRegionException) ErrorCode() string {
	return "TemplatesNotAvailableInRegionException"
}
func (e *TemplatesNotAvailableInRegionException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *TemplatesNotAvailableInRegionException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TemplatesNotAvailableInRegionException) HasMessage() bool {
	return e.Message != nil
}

// Due to throttling, the request was denied. Slow down the rate of request calls,
// or request an increase for this quota.
type TooManyRequestsException struct {
	Message *string
}

func (e *TooManyRequestsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyRequestsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyRequestsException) ErrorCode() string             { return "TooManyRequestsException" }
func (e *TooManyRequestsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyRequestsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyRequestsException) HasMessage() bool {
	return e.Message != nil
}
