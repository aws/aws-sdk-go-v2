// Code generated by smithy-go-codegen DO NOT EDIT.

package billing

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/billing/types"
	smithy "github.com/aws/smithy-go"
	"github.com/aws/smithy-go/middleware"
)

type validateOpListBillingViews struct {
}

func (*validateOpListBillingViews) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListBillingViews) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListBillingViewsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListBillingViewsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpListBillingViewsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListBillingViews{}, middleware.After)
}

func validateActiveTimeRange(v *types.ActiveTimeRange) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ActiveTimeRange"}
	if v.ActiveAfterInclusive == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ActiveAfterInclusive"))
	}
	if v.ActiveBeforeInclusive == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ActiveBeforeInclusive"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListBillingViewsInput(v *ListBillingViewsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListBillingViewsInput"}
	if v.ActiveTimeRange == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ActiveTimeRange"))
	} else if v.ActiveTimeRange != nil {
		if err := validateActiveTimeRange(v.ActiveTimeRange); err != nil {
			invalidParams.AddNested("ActiveTimeRange", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
