// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cognitoidentityprovider

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
)

const opAdminLinkProviderForUser = "AdminLinkProviderForUser"

// AdminLinkProviderForUserRequest returns a request value for making API operation for
// Amazon Cognito Identity Provider.
//
// Links an existing user account in a user pool (DestinationUser) to an identity
// from an external identity provider (SourceUser) based on a specified attribute
// name and value from the external identity provider. This allows you to create
// a link from the existing user account to an external federated user identity
// that has not yet been used to sign in, so that the federated user identity
// can be used to sign in as the existing user account.
//
// For example, if there is an existing user with a username and password, this
// API links that user to a federated user identity, so that when the federated
// user identity is used, the user signs in as the existing user account.
//
// Because this API allows a user with an external federated identity to sign
// in as an existing user in the user pool, it is critical that it only be used
// with external identity providers and provider attributes that have been trusted
// by the application owner.
//
// See also .
//
// This action is enabled only for admin access and requires developer credentials.
//
//    // Example sending a request using AdminLinkProviderForUserRequest.
//    req := client.AdminLinkProviderForUserRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cognito-idp-2016-04-18/AdminLinkProviderForUser
func (c *Client) AdminLinkProviderForUserRequest(input *types.AdminLinkProviderForUserInput) AdminLinkProviderForUserRequest {
	op := &aws.Operation{
		Name:       opAdminLinkProviderForUser,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AdminLinkProviderForUserInput{}
	}

	req := c.newRequest(op, input, &types.AdminLinkProviderForUserOutput{})
	return AdminLinkProviderForUserRequest{Request: req, Input: input, Copy: c.AdminLinkProviderForUserRequest}
}

// AdminLinkProviderForUserRequest is the request type for the
// AdminLinkProviderForUser API operation.
type AdminLinkProviderForUserRequest struct {
	*aws.Request
	Input *types.AdminLinkProviderForUserInput
	Copy  func(*types.AdminLinkProviderForUserInput) AdminLinkProviderForUserRequest
}

// Send marshals and sends the AdminLinkProviderForUser API request.
func (r AdminLinkProviderForUserRequest) Send(ctx context.Context) (*AdminLinkProviderForUserResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AdminLinkProviderForUserResponse{
		AdminLinkProviderForUserOutput: r.Request.Data.(*types.AdminLinkProviderForUserOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AdminLinkProviderForUserResponse is the response type for the
// AdminLinkProviderForUser API operation.
type AdminLinkProviderForUserResponse struct {
	*types.AdminLinkProviderForUserOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AdminLinkProviderForUser request.
func (r *AdminLinkProviderForUserResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
