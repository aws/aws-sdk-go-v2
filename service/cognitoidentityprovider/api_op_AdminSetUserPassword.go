// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cognitoidentityprovider

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
)

const opAdminSetUserPassword = "AdminSetUserPassword"

// AdminSetUserPasswordRequest returns a request value for making API operation for
// Amazon Cognito Identity Provider.
//
// Sets the specified user's password in a user pool as an administrator. Works
// on any user.
//
// The password can be temporary or permanent. If it is temporary, the user
// status will be placed into the FORCE_CHANGE_PASSWORD state. When the user
// next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain
// the NEW_PASSWORD_REQUIRED challenge. If the user does not sign in before
// it expires, the user will not be able to sign in and their password will
// need to be reset by an administrator.
//
// Once the user has set a new password, or the password is permanent, the user
// status will be set to Confirmed.
//
//    // Example sending a request using AdminSetUserPasswordRequest.
//    req := client.AdminSetUserPasswordRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cognito-idp-2016-04-18/AdminSetUserPassword
func (c *Client) AdminSetUserPasswordRequest(input *types.AdminSetUserPasswordInput) AdminSetUserPasswordRequest {
	op := &aws.Operation{
		Name:       opAdminSetUserPassword,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AdminSetUserPasswordInput{}
	}

	req := c.newRequest(op, input, &types.AdminSetUserPasswordOutput{})
	return AdminSetUserPasswordRequest{Request: req, Input: input, Copy: c.AdminSetUserPasswordRequest}
}

// AdminSetUserPasswordRequest is the request type for the
// AdminSetUserPassword API operation.
type AdminSetUserPasswordRequest struct {
	*aws.Request
	Input *types.AdminSetUserPasswordInput
	Copy  func(*types.AdminSetUserPasswordInput) AdminSetUserPasswordRequest
}

// Send marshals and sends the AdminSetUserPassword API request.
func (r AdminSetUserPasswordRequest) Send(ctx context.Context) (*AdminSetUserPasswordResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AdminSetUserPasswordResponse{
		AdminSetUserPasswordOutput: r.Request.Data.(*types.AdminSetUserPasswordOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AdminSetUserPasswordResponse is the response type for the
// AdminSetUserPassword API operation.
type AdminSetUserPasswordResponse struct {
	*types.AdminSetUserPasswordOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AdminSetUserPassword request.
func (r *AdminSetUserPasswordResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
