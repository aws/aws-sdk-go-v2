// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cognitoidentityprovider

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
)

const opSignUp = "SignUp"

// SignUpRequest returns a request value for making API operation for
// Amazon Cognito Identity Provider.
//
// Registers the user in the specified user pool and creates a user name, password,
// and user attributes.
//
//    // Example sending a request using SignUpRequest.
//    req := client.SignUpRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cognito-idp-2016-04-18/SignUp
func (c *Client) SignUpRequest(input *types.SignUpInput) SignUpRequest {
	op := &aws.Operation{
		Name:       opSignUp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.SignUpInput{}
	}

	req := c.newRequest(op, input, &types.SignUpOutput{})
	req.Config.Credentials = aws.AnonymousCredentials
	return SignUpRequest{Request: req, Input: input, Copy: c.SignUpRequest}
}

// SignUpRequest is the request type for the
// SignUp API operation.
type SignUpRequest struct {
	*aws.Request
	Input *types.SignUpInput
	Copy  func(*types.SignUpInput) SignUpRequest
}

// Send marshals and sends the SignUp API request.
func (r SignUpRequest) Send(ctx context.Context) (*SignUpResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SignUpResponse{
		SignUpOutput: r.Request.Data.(*types.SignUpOutput),
		response:     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SignUpResponse is the response type for the
// SignUp API operation.
type SignUpResponse struct {
	*types.SignUpOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SignUp request.
func (r *SignUpResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
