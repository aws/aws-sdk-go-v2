// Code generated by smithy-go-codegen DO NOT EDIT.

package cognitoidentityprovider

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates the Secure Sockets Layer (SSL) certificate for the custom domain for
// your user pool. You can use this operation to provide the Amazon Resource Name
// (ARN) of a new certificate to Amazon Cognito. You cannot use it to change the
// domain for a user pool. A custom domain is used to host the Amazon Cognito
// hosted UI, which provides sign-up and sign-in pages for your application. When
// you set up a custom domain, you provide a certificate that you manage with AWS
// Certificate Manager (ACM). When necessary, you can use this operation to change
// the certificate that you applied to your custom domain. Usually, this is
// unnecessary following routine certificate renewal with ACM. When you renew your
// existing certificate in ACM, the ARN for your certificate remains the same, and
// your custom domain uses the new certificate automatically. However, if you
// replace your existing certificate with a new one, ACM gives the new certificate
// a new ARN. To apply the new certificate to your custom domain, you must provide
// this ARN to Amazon Cognito. When you add your new certificate in ACM, you must
// choose US East (N. Virginia) as the AWS Region. After you submit your request,
// Amazon Cognito requires up to 1 hour to distribute your new certificate to your
// custom domain. For more information about adding a custom domain to your user
// pool, see Using Your Own Domain for the Hosted UI
// (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).
func (c *Client) UpdateUserPoolDomain(ctx context.Context, params *UpdateUserPoolDomainInput, optFns ...func(*Options)) (*UpdateUserPoolDomainOutput, error) {
	stack := middleware.NewStack("UpdateUserPoolDomain", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpUpdateUserPoolDomainMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateUserPoolDomainValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateUserPoolDomain(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateUserPoolDomain",
			Err:           err,
		}
	}
	out := result.(*UpdateUserPoolDomainOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The UpdateUserPoolDomain request input.
type UpdateUserPoolDomainInput struct {
	// The domain name for the custom domain that hosts the sign-up and sign-in pages
	// for your application. For example: auth.example.com. This string can include
	// only lowercase letters, numbers, and hyphens. Do not use a hyphen for the first
	// or last character. Use periods to separate subdomain names.
	Domain *string
	// The configuration for a custom domain that hosts the sign-up and sign-in pages
	// for your application. Use this object to specify an SSL certificate that is
	// managed by ACM.
	CustomDomainConfig *types.CustomDomainConfigType
	// The ID of the user pool that is associated with the custom domain that you are
	// updating the certificate for.
	UserPoolId *string
}

// The UpdateUserPoolDomain response output.
type UpdateUserPoolDomainOutput struct {
	// The Amazon CloudFront endpoint that Amazon Cognito set up when you added the
	// custom domain to your user pool.
	CloudFrontDomain *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpUpdateUserPoolDomainMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpUpdateUserPoolDomain{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpUpdateUserPoolDomain{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateUserPoolDomain(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cognito-idp",
		OperationName: "UpdateUserPoolDomain",
	}
}
