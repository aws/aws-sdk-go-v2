// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ssm

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm/types"
)

const opGetParametersByPath = "GetParametersByPath"

// GetParametersByPathRequest returns a request value for making API operation for
// Amazon Simple Systems Manager (SSM).
//
// Retrieve information about one or more parameters in a specific hierarchy.
//
// Request results are returned on a best-effort basis. If you specify MaxResults
// in the request, the response includes information up to the limit specified.
// The number of items returned, however, can be between zero and the value
// of MaxResults. If the service reaches an internal limit while processing
// the results, it stops the operation and returns the matching values up to
// that point and a NextToken. You can specify the NextToken in a subsequent
// call to get the next set of results.
//
//    // Example sending a request using GetParametersByPathRequest.
//    req := client.GetParametersByPathRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/GetParametersByPath
func (c *Client) GetParametersByPathRequest(input *types.GetParametersByPathInput) GetParametersByPathRequest {
	op := &aws.Operation{
		Name:       opGetParametersByPath,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetParametersByPathInput{}
	}

	req := c.newRequest(op, input, &types.GetParametersByPathOutput{})
	return GetParametersByPathRequest{Request: req, Input: input, Copy: c.GetParametersByPathRequest}
}

// GetParametersByPathRequest is the request type for the
// GetParametersByPath API operation.
type GetParametersByPathRequest struct {
	*aws.Request
	Input *types.GetParametersByPathInput
	Copy  func(*types.GetParametersByPathInput) GetParametersByPathRequest
}

// Send marshals and sends the GetParametersByPath API request.
func (r GetParametersByPathRequest) Send(ctx context.Context) (*GetParametersByPathResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetParametersByPathResponse{
		GetParametersByPathOutput: r.Request.Data.(*types.GetParametersByPathOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetParametersByPathRequestPaginator returns a paginator for GetParametersByPath.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetParametersByPathRequest(input)
//   p := ssm.NewGetParametersByPathRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetParametersByPathPaginator(req GetParametersByPathRequest) GetParametersByPathPaginator {
	return GetParametersByPathPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetParametersByPathInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetParametersByPathPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetParametersByPathPaginator struct {
	aws.Pager
}

func (p *GetParametersByPathPaginator) CurrentPage() *types.GetParametersByPathOutput {
	return p.Pager.CurrentPage().(*types.GetParametersByPathOutput)
}

// GetParametersByPathResponse is the response type for the
// GetParametersByPath API operation.
type GetParametersByPathResponse struct {
	*types.GetParametersByPathOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetParametersByPath request.
func (r *GetParametersByPathResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
