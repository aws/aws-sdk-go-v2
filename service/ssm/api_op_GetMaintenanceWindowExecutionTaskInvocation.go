// Code generated by smithy-go-codegen DO NOT EDIT.

package ssm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ssm/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves information about a specific task running on a specific target.
func (c *Client) GetMaintenanceWindowExecutionTaskInvocation(ctx context.Context, params *GetMaintenanceWindowExecutionTaskInvocationInput, optFns ...func(*Options)) (*GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	stack := middleware.NewStack("GetMaintenanceWindowExecutionTaskInvocation", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetMaintenanceWindowExecutionTaskInvocationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetMaintenanceWindowExecutionTaskInvocationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetMaintenanceWindowExecutionTaskInvocation(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetMaintenanceWindowExecutionTaskInvocation",
			Err:           err,
		}
	}
	out := result.(*GetMaintenanceWindowExecutionTaskInvocationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetMaintenanceWindowExecutionTaskInvocationInput struct {
	// The invocation ID to retrieve.
	InvocationId *string
	// The ID of the specific task in the maintenance window task that should be
	// retrieved.
	TaskId *string
	// The ID of the maintenance window execution for which the task is a part.
	WindowExecutionId *string
}

type GetMaintenanceWindowExecutionTaskInvocationOutput struct {
	// The task execution ID.
	TaskExecutionId *string
	// User-provided value to be included in any CloudWatch events raised while running
	// tasks for these targets in this maintenance window.
	OwnerInformation *string
	// The task status for an invocation.
	Status types.MaintenanceWindowExecutionStatus
	// The maintenance window execution ID.
	WindowExecutionId *string
	// The time that the task finished running on the target.
	EndTime *time.Time
	// The parameters used at the time that the task ran.
	Parameters *string
	// The time that the task started running on the target.
	StartTime *time.Time
	// The details explaining the status. Details are only available for certain status
	// values.
	StatusDetails *string
	// Retrieves the task type for a maintenance window. Task types include the
	// following: LAMBDA, STEP_FUNCTIONS, AUTOMATION, RUN_COMMAND.
	TaskType types.MaintenanceWindowTaskType
	// The invocation ID.
	InvocationId *string
	// The maintenance window target ID.
	WindowTargetId *string
	// The execution ID.
	ExecutionId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetMaintenanceWindowExecutionTaskInvocationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetMaintenanceWindowExecutionTaskInvocation{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetMaintenanceWindowExecutionTaskInvocation{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetMaintenanceWindowExecutionTaskInvocation(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ssm",
		OperationName: "GetMaintenanceWindowExecutionTaskInvocation",
	}
}
