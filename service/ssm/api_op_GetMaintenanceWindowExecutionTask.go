// Code generated by smithy-go-codegen DO NOT EDIT.

package ssm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ssm/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves the details about a specific task run as part of a maintenance window
// execution.
func (c *Client) GetMaintenanceWindowExecutionTask(ctx context.Context, params *GetMaintenanceWindowExecutionTaskInput, optFns ...func(*Options)) (*GetMaintenanceWindowExecutionTaskOutput, error) {
	stack := middleware.NewStack("GetMaintenanceWindowExecutionTask", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetMaintenanceWindowExecutionTaskMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetMaintenanceWindowExecutionTaskValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetMaintenanceWindowExecutionTask(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetMaintenanceWindowExecutionTask",
			Err:           err,
		}
	}
	out := result.(*GetMaintenanceWindowExecutionTaskOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetMaintenanceWindowExecutionTaskInput struct {
	// The ID of the specific task execution in the maintenance window task that should
	// be retrieved.
	TaskId *string
	// The ID of the maintenance window execution that includes the task.
	WindowExecutionId *string
}

type GetMaintenanceWindowExecutionTaskOutput struct {
	// The defined maximum number of task executions that could be run in parallel.
	MaxConcurrency *string
	// The time the task execution started.
	StartTime *time.Time
	// The details explaining the Status. Only available for certain status values.
	StatusDetails *string
	// The role that was assumed when running the task.
	ServiceRole *string
	// The defined maximum number of task execution errors allowed before scheduling of
	// the task execution would have been stopped.
	MaxErrors *string
	// The type of task that was run.
	Type types.MaintenanceWindowTaskType
	// The ID of the specific task execution in the maintenance window task that was
	// retrieved.
	TaskExecutionId *string
	// The status of the task.
	Status types.MaintenanceWindowExecutionStatus
	// The ID of the maintenance window execution that includes the task.
	WindowExecutionId *string
	// The time the task execution completed.
	EndTime *time.Time
	// The priority of the task.
	Priority *int32
	// The parameters passed to the task when it was run. TaskParameters has been
	// deprecated. To specify parameters to pass to a task when it runs, instead use
	// the Parameters option in the TaskInvocationParameters structure. For information
	// about how Systems Manager handles these options for the supported maintenance
	// window task types, see MaintenanceWindowTaskInvocationParameters (). The map has
	// the following format: Key: string, between 1 and 255 characters Value: an array
	// of strings, each string is between 1 and 255 characters
	TaskParameters []map[string]*types.MaintenanceWindowTaskParameterValueExpression
	// The ARN of the task that ran.
	TaskArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetMaintenanceWindowExecutionTaskMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetMaintenanceWindowExecutionTask{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetMaintenanceWindowExecutionTask{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetMaintenanceWindowExecutionTask(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ssm",
		OperationName: "GetMaintenanceWindowExecutionTask",
	}
}
