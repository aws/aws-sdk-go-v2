// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AssociationComplianceSeverity string

// Enum values for AssociationComplianceSeverity
const (
	AssociationComplianceSeverityCritical    AssociationComplianceSeverity = "CRITICAL"
	AssociationComplianceSeverityHigh        AssociationComplianceSeverity = "HIGH"
	AssociationComplianceSeverityMedium      AssociationComplianceSeverity = "MEDIUM"
	AssociationComplianceSeverityLow         AssociationComplianceSeverity = "LOW"
	AssociationComplianceSeverityUnspecified AssociationComplianceSeverity = "UNSPECIFIED"
)

// Values returns all known values for AssociationComplianceSeverity. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (AssociationComplianceSeverity) Values() []AssociationComplianceSeverity {
	return []AssociationComplianceSeverity{
		"CRITICAL",
		"HIGH",
		"MEDIUM",
		"LOW",
		"UNSPECIFIED",
	}
}

type AssociationExecutionFilterKey string

// Enum values for AssociationExecutionFilterKey
const (
	AssociationExecutionFilterKeyExecutionid AssociationExecutionFilterKey = "ExecutionId"
	AssociationExecutionFilterKeyStatus      AssociationExecutionFilterKey = "Status"
	AssociationExecutionFilterKeyCreatedtime AssociationExecutionFilterKey = "CreatedTime"
)

// Values returns all known values for AssociationExecutionFilterKey. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (AssociationExecutionFilterKey) Values() []AssociationExecutionFilterKey {
	return []AssociationExecutionFilterKey{
		"ExecutionId",
		"Status",
		"CreatedTime",
	}
}

type AssociationExecutionTargetsFilterKey string

// Enum values for AssociationExecutionTargetsFilterKey
const (
	AssociationExecutionTargetsFilterKeyStatus       AssociationExecutionTargetsFilterKey = "Status"
	AssociationExecutionTargetsFilterKeyResourceid   AssociationExecutionTargetsFilterKey = "ResourceId"
	AssociationExecutionTargetsFilterKeyResourcetype AssociationExecutionTargetsFilterKey = "ResourceType"
)

// Values returns all known values for AssociationExecutionTargetsFilterKey. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (AssociationExecutionTargetsFilterKey) Values() []AssociationExecutionTargetsFilterKey {
	return []AssociationExecutionTargetsFilterKey{
		"Status",
		"ResourceId",
		"ResourceType",
	}
}

type AssociationFilterKey string

// Enum values for AssociationFilterKey
const (
	AssociationFilterKeyInstanceid         AssociationFilterKey = "InstanceId"
	AssociationFilterKeyName               AssociationFilterKey = "Name"
	AssociationFilterKeyAssociationid      AssociationFilterKey = "AssociationId"
	AssociationFilterKeyStatus             AssociationFilterKey = "AssociationStatusName"
	AssociationFilterKeyLastexecutedbefore AssociationFilterKey = "LastExecutedBefore"
	AssociationFilterKeyLastexecutedafter  AssociationFilterKey = "LastExecutedAfter"
	AssociationFilterKeyAssociationname    AssociationFilterKey = "AssociationName"
	AssociationFilterKeyResourcegroupname  AssociationFilterKey = "ResourceGroupName"
)

// Values returns all known values for AssociationFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AssociationFilterKey) Values() []AssociationFilterKey {
	return []AssociationFilterKey{
		"InstanceId",
		"Name",
		"AssociationId",
		"AssociationStatusName",
		"LastExecutedBefore",
		"LastExecutedAfter",
		"AssociationName",
		"ResourceGroupName",
	}
}

type AssociationFilterOperatorType string

// Enum values for AssociationFilterOperatorType
const (
	AssociationFilterOperatorTypeEqual       AssociationFilterOperatorType = "EQUAL"
	AssociationFilterOperatorTypeLessthan    AssociationFilterOperatorType = "LESS_THAN"
	AssociationFilterOperatorTypeGreaterthan AssociationFilterOperatorType = "GREATER_THAN"
)

// Values returns all known values for AssociationFilterOperatorType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (AssociationFilterOperatorType) Values() []AssociationFilterOperatorType {
	return []AssociationFilterOperatorType{
		"EQUAL",
		"LESS_THAN",
		"GREATER_THAN",
	}
}

type AssociationStatusName string

// Enum values for AssociationStatusName
const (
	AssociationStatusNamePending AssociationStatusName = "Pending"
	AssociationStatusNameSuccess AssociationStatusName = "Success"
	AssociationStatusNameFailed  AssociationStatusName = "Failed"
)

// Values returns all known values for AssociationStatusName. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AssociationStatusName) Values() []AssociationStatusName {
	return []AssociationStatusName{
		"Pending",
		"Success",
		"Failed",
	}
}

type AssociationSyncCompliance string

// Enum values for AssociationSyncCompliance
const (
	AssociationSyncComplianceAuto   AssociationSyncCompliance = "AUTO"
	AssociationSyncComplianceManual AssociationSyncCompliance = "MANUAL"
)

// Values returns all known values for AssociationSyncCompliance. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationSyncCompliance) Values() []AssociationSyncCompliance {
	return []AssociationSyncCompliance{
		"AUTO",
		"MANUAL",
	}
}

type AttachmentHashType string

// Enum values for AttachmentHashType
const (
	AttachmentHashTypeSha256 AttachmentHashType = "Sha256"
)

// Values returns all known values for AttachmentHashType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AttachmentHashType) Values() []AttachmentHashType {
	return []AttachmentHashType{
		"Sha256",
	}
}

type AttachmentsSourceKey string

// Enum values for AttachmentsSourceKey
const (
	AttachmentsSourceKeySourceurl           AttachmentsSourceKey = "SourceUrl"
	AttachmentsSourceKeyS3fileurl           AttachmentsSourceKey = "S3FileUrl"
	AttachmentsSourceKeyAttachmentreference AttachmentsSourceKey = "AttachmentReference"
)

// Values returns all known values for AttachmentsSourceKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AttachmentsSourceKey) Values() []AttachmentsSourceKey {
	return []AttachmentsSourceKey{
		"SourceUrl",
		"S3FileUrl",
		"AttachmentReference",
	}
}

type AutomationExecutionFilterKey string

// Enum values for AutomationExecutionFilterKey
const (
	AutomationExecutionFilterKeyDocument_name_prefix AutomationExecutionFilterKey = "DocumentNamePrefix"
	AutomationExecutionFilterKeyExecution_status     AutomationExecutionFilterKey = "ExecutionStatus"
	AutomationExecutionFilterKeyExecution_id         AutomationExecutionFilterKey = "ExecutionId"
	AutomationExecutionFilterKeyParent_execution_id  AutomationExecutionFilterKey = "ParentExecutionId"
	AutomationExecutionFilterKeyCurrent_action       AutomationExecutionFilterKey = "CurrentAction"
	AutomationExecutionFilterKeyStart_time_before    AutomationExecutionFilterKey = "StartTimeBefore"
	AutomationExecutionFilterKeyStart_time_after     AutomationExecutionFilterKey = "StartTimeAfter"
	AutomationExecutionFilterKeyAutomation_type      AutomationExecutionFilterKey = "AutomationType"
	AutomationExecutionFilterKeyTag_key              AutomationExecutionFilterKey = "TagKey"
)

// Values returns all known values for AutomationExecutionFilterKey. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutomationExecutionFilterKey) Values() []AutomationExecutionFilterKey {
	return []AutomationExecutionFilterKey{
		"DocumentNamePrefix",
		"ExecutionStatus",
		"ExecutionId",
		"ParentExecutionId",
		"CurrentAction",
		"StartTimeBefore",
		"StartTimeAfter",
		"AutomationType",
		"TagKey",
	}
}

type AutomationExecutionStatus string

// Enum values for AutomationExecutionStatus
const (
	AutomationExecutionStatusPending    AutomationExecutionStatus = "Pending"
	AutomationExecutionStatusInprogress AutomationExecutionStatus = "InProgress"
	AutomationExecutionStatusWaiting    AutomationExecutionStatus = "Waiting"
	AutomationExecutionStatusSuccess    AutomationExecutionStatus = "Success"
	AutomationExecutionStatusTimedout   AutomationExecutionStatus = "TimedOut"
	AutomationExecutionStatusCancelling AutomationExecutionStatus = "Cancelling"
	AutomationExecutionStatusCancelled  AutomationExecutionStatus = "Cancelled"
	AutomationExecutionStatusFailed     AutomationExecutionStatus = "Failed"
)

// Values returns all known values for AutomationExecutionStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutomationExecutionStatus) Values() []AutomationExecutionStatus {
	return []AutomationExecutionStatus{
		"Pending",
		"InProgress",
		"Waiting",
		"Success",
		"TimedOut",
		"Cancelling",
		"Cancelled",
		"Failed",
	}
}

type AutomationType string

// Enum values for AutomationType
const (
	AutomationTypeCrossaccount AutomationType = "CrossAccount"
	AutomationTypeLocal        AutomationType = "Local"
)

// Values returns all known values for AutomationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AutomationType) Values() []AutomationType {
	return []AutomationType{
		"CrossAccount",
		"Local",
	}
}

type CalendarState string

// Enum values for CalendarState
const (
	CalendarStateOpen   CalendarState = "OPEN"
	CalendarStateClosed CalendarState = "CLOSED"
)

// Values returns all known values for CalendarState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CalendarState) Values() []CalendarState {
	return []CalendarState{
		"OPEN",
		"CLOSED",
	}
}

type CommandFilterKey string

// Enum values for CommandFilterKey
const (
	CommandFilterKeyInvoked_after   CommandFilterKey = "InvokedAfter"
	CommandFilterKeyInvoked_before  CommandFilterKey = "InvokedBefore"
	CommandFilterKeyStatus          CommandFilterKey = "Status"
	CommandFilterKeyExecution_stage CommandFilterKey = "ExecutionStage"
	CommandFilterKeyDocument_name   CommandFilterKey = "DocumentName"
)

// Values returns all known values for CommandFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CommandFilterKey) Values() []CommandFilterKey {
	return []CommandFilterKey{
		"InvokedAfter",
		"InvokedBefore",
		"Status",
		"ExecutionStage",
		"DocumentName",
	}
}

type CommandInvocationStatus string

// Enum values for CommandInvocationStatus
const (
	CommandInvocationStatusPending     CommandInvocationStatus = "Pending"
	CommandInvocationStatusIn_progress CommandInvocationStatus = "InProgress"
	CommandInvocationStatusDelayed     CommandInvocationStatus = "Delayed"
	CommandInvocationStatusSuccess     CommandInvocationStatus = "Success"
	CommandInvocationStatusCancelled   CommandInvocationStatus = "Cancelled"
	CommandInvocationStatusTimed_out   CommandInvocationStatus = "TimedOut"
	CommandInvocationStatusFailed      CommandInvocationStatus = "Failed"
	CommandInvocationStatusCancelling  CommandInvocationStatus = "Cancelling"
)

// Values returns all known values for CommandInvocationStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CommandInvocationStatus) Values() []CommandInvocationStatus {
	return []CommandInvocationStatus{
		"Pending",
		"InProgress",
		"Delayed",
		"Success",
		"Cancelled",
		"TimedOut",
		"Failed",
		"Cancelling",
	}
}

type CommandPluginStatus string

// Enum values for CommandPluginStatus
const (
	CommandPluginStatusPending     CommandPluginStatus = "Pending"
	CommandPluginStatusIn_progress CommandPluginStatus = "InProgress"
	CommandPluginStatusSuccess     CommandPluginStatus = "Success"
	CommandPluginStatusTimed_out   CommandPluginStatus = "TimedOut"
	CommandPluginStatusCancelled   CommandPluginStatus = "Cancelled"
	CommandPluginStatusFailed      CommandPluginStatus = "Failed"
)

// Values returns all known values for CommandPluginStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CommandPluginStatus) Values() []CommandPluginStatus {
	return []CommandPluginStatus{
		"Pending",
		"InProgress",
		"Success",
		"TimedOut",
		"Cancelled",
		"Failed",
	}
}

type CommandStatus string

// Enum values for CommandStatus
const (
	CommandStatusPending     CommandStatus = "Pending"
	CommandStatusIn_progress CommandStatus = "InProgress"
	CommandStatusSuccess     CommandStatus = "Success"
	CommandStatusCancelled   CommandStatus = "Cancelled"
	CommandStatusFailed      CommandStatus = "Failed"
	CommandStatusTimed_out   CommandStatus = "TimedOut"
	CommandStatusCancelling  CommandStatus = "Cancelling"
)

// Values returns all known values for CommandStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CommandStatus) Values() []CommandStatus {
	return []CommandStatus{
		"Pending",
		"InProgress",
		"Success",
		"Cancelled",
		"Failed",
		"TimedOut",
		"Cancelling",
	}
}

type ComplianceQueryOperatorType string

// Enum values for ComplianceQueryOperatorType
const (
	ComplianceQueryOperatorTypeEqual       ComplianceQueryOperatorType = "EQUAL"
	ComplianceQueryOperatorTypeNotequal    ComplianceQueryOperatorType = "NOT_EQUAL"
	ComplianceQueryOperatorTypeBeginwith   ComplianceQueryOperatorType = "BEGIN_WITH"
	ComplianceQueryOperatorTypeLessthan    ComplianceQueryOperatorType = "LESS_THAN"
	ComplianceQueryOperatorTypeGreaterthan ComplianceQueryOperatorType = "GREATER_THAN"
)

// Values returns all known values for ComplianceQueryOperatorType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceQueryOperatorType) Values() []ComplianceQueryOperatorType {
	return []ComplianceQueryOperatorType{
		"EQUAL",
		"NOT_EQUAL",
		"BEGIN_WITH",
		"LESS_THAN",
		"GREATER_THAN",
	}
}

type ComplianceSeverity string

// Enum values for ComplianceSeverity
const (
	ComplianceSeverityCritical      ComplianceSeverity = "CRITICAL"
	ComplianceSeverityHigh          ComplianceSeverity = "HIGH"
	ComplianceSeverityMedium        ComplianceSeverity = "MEDIUM"
	ComplianceSeverityLow           ComplianceSeverity = "LOW"
	ComplianceSeverityInformational ComplianceSeverity = "INFORMATIONAL"
	ComplianceSeverityUnspecified   ComplianceSeverity = "UNSPECIFIED"
)

// Values returns all known values for ComplianceSeverity. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceSeverity) Values() []ComplianceSeverity {
	return []ComplianceSeverity{
		"CRITICAL",
		"HIGH",
		"MEDIUM",
		"LOW",
		"INFORMATIONAL",
		"UNSPECIFIED",
	}
}

type ComplianceStatus string

// Enum values for ComplianceStatus
const (
	ComplianceStatusCompliant    ComplianceStatus = "COMPLIANT"
	ComplianceStatusNoncompliant ComplianceStatus = "NON_COMPLIANT"
)

// Values returns all known values for ComplianceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceStatus) Values() []ComplianceStatus {
	return []ComplianceStatus{
		"COMPLIANT",
		"NON_COMPLIANT",
	}
}

type ComplianceUploadType string

// Enum values for ComplianceUploadType
const (
	ComplianceUploadTypeComplete ComplianceUploadType = "COMPLETE"
	ComplianceUploadTypePartial  ComplianceUploadType = "PARTIAL"
)

// Values returns all known values for ComplianceUploadType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComplianceUploadType) Values() []ComplianceUploadType {
	return []ComplianceUploadType{
		"COMPLETE",
		"PARTIAL",
	}
}

type ConnectionStatus string

// Enum values for ConnectionStatus
const (
	ConnectionStatusConnected     ConnectionStatus = "Connected"
	ConnectionStatusNot_connected ConnectionStatus = "NotConnected"
)

// Values returns all known values for ConnectionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ConnectionStatus) Values() []ConnectionStatus {
	return []ConnectionStatus{
		"Connected",
		"NotConnected",
	}
}

type DescribeActivationsFilterKeys string

// Enum values for DescribeActivationsFilterKeys
const (
	DescribeActivationsFilterKeysActivation_ids        DescribeActivationsFilterKeys = "ActivationIds"
	DescribeActivationsFilterKeysDefault_instance_name DescribeActivationsFilterKeys = "DefaultInstanceName"
	DescribeActivationsFilterKeysIam_role              DescribeActivationsFilterKeys = "IamRole"
)

// Values returns all known values for DescribeActivationsFilterKeys. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (DescribeActivationsFilterKeys) Values() []DescribeActivationsFilterKeys {
	return []DescribeActivationsFilterKeys{
		"ActivationIds",
		"DefaultInstanceName",
		"IamRole",
	}
}

type DocumentFilterKey string

// Enum values for DocumentFilterKey
const (
	DocumentFilterKeyName          DocumentFilterKey = "Name"
	DocumentFilterKeyOwner         DocumentFilterKey = "Owner"
	DocumentFilterKeyPlatformtypes DocumentFilterKey = "PlatformTypes"
	DocumentFilterKeyDocumenttype  DocumentFilterKey = "DocumentType"
)

// Values returns all known values for DocumentFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DocumentFilterKey) Values() []DocumentFilterKey {
	return []DocumentFilterKey{
		"Name",
		"Owner",
		"PlatformTypes",
		"DocumentType",
	}
}

type DocumentFormat string

// Enum values for DocumentFormat
const (
	DocumentFormatYaml DocumentFormat = "YAML"
	DocumentFormatJson DocumentFormat = "JSON"
	DocumentFormatText DocumentFormat = "TEXT"
)

// Values returns all known values for DocumentFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DocumentFormat) Values() []DocumentFormat {
	return []DocumentFormat{
		"YAML",
		"JSON",
		"TEXT",
	}
}

type DocumentHashType string

// Enum values for DocumentHashType
const (
	DocumentHashTypeSha256 DocumentHashType = "Sha256"
	DocumentHashTypeSha1   DocumentHashType = "Sha1"
)

// Values returns all known values for DocumentHashType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DocumentHashType) Values() []DocumentHashType {
	return []DocumentHashType{
		"Sha256",
		"Sha1",
	}
}

type DocumentParameterType string

// Enum values for DocumentParameterType
const (
	DocumentParameterTypeString     DocumentParameterType = "String"
	DocumentParameterTypeStringlist DocumentParameterType = "StringList"
)

// Values returns all known values for DocumentParameterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DocumentParameterType) Values() []DocumentParameterType {
	return []DocumentParameterType{
		"String",
		"StringList",
	}
}

type DocumentPermissionType string

// Enum values for DocumentPermissionType
const (
	DocumentPermissionTypeShare DocumentPermissionType = "Share"
)

// Values returns all known values for DocumentPermissionType. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DocumentPermissionType) Values() []DocumentPermissionType {
	return []DocumentPermissionType{
		"Share",
	}
}

type DocumentStatus string

// Enum values for DocumentStatus
const (
	DocumentStatusCreating DocumentStatus = "Creating"
	DocumentStatusActive   DocumentStatus = "Active"
	DocumentStatusUpdating DocumentStatus = "Updating"
	DocumentStatusDeleting DocumentStatus = "Deleting"
	DocumentStatusFailed   DocumentStatus = "Failed"
)

// Values returns all known values for DocumentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DocumentStatus) Values() []DocumentStatus {
	return []DocumentStatus{
		"Creating",
		"Active",
		"Updating",
		"Deleting",
		"Failed",
	}
}

type DocumentType string

// Enum values for DocumentType
const (
	DocumentTypeCommand                        DocumentType = "Command"
	DocumentTypePolicy                         DocumentType = "Policy"
	DocumentTypeAutomation                     DocumentType = "Automation"
	DocumentTypeSession                        DocumentType = "Session"
	DocumentTypePackage                        DocumentType = "Package"
	DocumentTypeApplicationconfiguration       DocumentType = "ApplicationConfiguration"
	DocumentTypeApplicationconfigurationschema DocumentType = "ApplicationConfigurationSchema"
	DocumentTypeDeploymentstrategy             DocumentType = "DeploymentStrategy"
	DocumentTypeChangecalendar                 DocumentType = "ChangeCalendar"
)

// Values returns all known values for DocumentType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (DocumentType) Values() []DocumentType {
	return []DocumentType{
		"Command",
		"Policy",
		"Automation",
		"Session",
		"Package",
		"ApplicationConfiguration",
		"ApplicationConfigurationSchema",
		"DeploymentStrategy",
		"ChangeCalendar",
	}
}

type ExecutionMode string

// Enum values for ExecutionMode
const (
	ExecutionModeAuto        ExecutionMode = "Auto"
	ExecutionModeInteractive ExecutionMode = "Interactive"
)

// Values returns all known values for ExecutionMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionMode) Values() []ExecutionMode {
	return []ExecutionMode{
		"Auto",
		"Interactive",
	}
}

type Fault string

// Enum values for Fault
const (
	FaultClient  Fault = "Client"
	FaultServer  Fault = "Server"
	FaultUnknown Fault = "Unknown"
)

// Values returns all known values for Fault. Note that this can be expanded in the
// future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Fault) Values() []Fault {
	return []Fault{
		"Client",
		"Server",
		"Unknown",
	}
}

type InstanceInformationFilterKey string

// Enum values for InstanceInformationFilterKey
const (
	InstanceInformationFilterKeyInstance_ids       InstanceInformationFilterKey = "InstanceIds"
	InstanceInformationFilterKeyAgent_version      InstanceInformationFilterKey = "AgentVersion"
	InstanceInformationFilterKeyPing_status        InstanceInformationFilterKey = "PingStatus"
	InstanceInformationFilterKeyPlatform_types     InstanceInformationFilterKey = "PlatformTypes"
	InstanceInformationFilterKeyActivation_ids     InstanceInformationFilterKey = "ActivationIds"
	InstanceInformationFilterKeyIam_role           InstanceInformationFilterKey = "IamRole"
	InstanceInformationFilterKeyResource_type      InstanceInformationFilterKey = "ResourceType"
	InstanceInformationFilterKeyAssociation_status InstanceInformationFilterKey = "AssociationStatus"
)

// Values returns all known values for InstanceInformationFilterKey. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (InstanceInformationFilterKey) Values() []InstanceInformationFilterKey {
	return []InstanceInformationFilterKey{
		"InstanceIds",
		"AgentVersion",
		"PingStatus",
		"PlatformTypes",
		"ActivationIds",
		"IamRole",
		"ResourceType",
		"AssociationStatus",
	}
}

type InstancePatchStateOperatorType string

// Enum values for InstancePatchStateOperatorType
const (
	InstancePatchStateOperatorTypeEqual        InstancePatchStateOperatorType = "Equal"
	InstancePatchStateOperatorTypeNot_equal    InstancePatchStateOperatorType = "NotEqual"
	InstancePatchStateOperatorTypeLess_than    InstancePatchStateOperatorType = "LessThan"
	InstancePatchStateOperatorTypeGreater_than InstancePatchStateOperatorType = "GreaterThan"
)

// Values returns all known values for InstancePatchStateOperatorType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (InstancePatchStateOperatorType) Values() []InstancePatchStateOperatorType {
	return []InstancePatchStateOperatorType{
		"Equal",
		"NotEqual",
		"LessThan",
		"GreaterThan",
	}
}

type InventoryAttributeDataType string

// Enum values for InventoryAttributeDataType
const (
	InventoryAttributeDataTypeString InventoryAttributeDataType = "string"
	InventoryAttributeDataTypeNumber InventoryAttributeDataType = "number"
)

// Values returns all known values for InventoryAttributeDataType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (InventoryAttributeDataType) Values() []InventoryAttributeDataType {
	return []InventoryAttributeDataType{
		"string",
		"number",
	}
}

type InventoryDeletionStatus string

// Enum values for InventoryDeletionStatus
const (
	InventoryDeletionStatusIn_progress InventoryDeletionStatus = "InProgress"
	InventoryDeletionStatusComplete    InventoryDeletionStatus = "Complete"
)

// Values returns all known values for InventoryDeletionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InventoryDeletionStatus) Values() []InventoryDeletionStatus {
	return []InventoryDeletionStatus{
		"InProgress",
		"Complete",
	}
}

type InventoryQueryOperatorType string

// Enum values for InventoryQueryOperatorType
const (
	InventoryQueryOperatorTypeEqual        InventoryQueryOperatorType = "Equal"
	InventoryQueryOperatorTypeNot_equal    InventoryQueryOperatorType = "NotEqual"
	InventoryQueryOperatorTypeBegin_with   InventoryQueryOperatorType = "BeginWith"
	InventoryQueryOperatorTypeLess_than    InventoryQueryOperatorType = "LessThan"
	InventoryQueryOperatorTypeGreater_than InventoryQueryOperatorType = "GreaterThan"
	InventoryQueryOperatorTypeExists       InventoryQueryOperatorType = "Exists"
)

// Values returns all known values for InventoryQueryOperatorType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (InventoryQueryOperatorType) Values() []InventoryQueryOperatorType {
	return []InventoryQueryOperatorType{
		"Equal",
		"NotEqual",
		"BeginWith",
		"LessThan",
		"GreaterThan",
		"Exists",
	}
}

type InventorySchemaDeleteOption string

// Enum values for InventorySchemaDeleteOption
const (
	InventorySchemaDeleteOptionDisable_schema InventorySchemaDeleteOption = "DisableSchema"
	InventorySchemaDeleteOptionDelete_schema  InventorySchemaDeleteOption = "DeleteSchema"
)

// Values returns all known values for InventorySchemaDeleteOption. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (InventorySchemaDeleteOption) Values() []InventorySchemaDeleteOption {
	return []InventorySchemaDeleteOption{
		"DisableSchema",
		"DeleteSchema",
	}
}

type LastResourceDataSyncStatus string

// Enum values for LastResourceDataSyncStatus
const (
	LastResourceDataSyncStatusSuccessful LastResourceDataSyncStatus = "Successful"
	LastResourceDataSyncStatusFailed     LastResourceDataSyncStatus = "Failed"
	LastResourceDataSyncStatusInprogress LastResourceDataSyncStatus = "InProgress"
)

// Values returns all known values for LastResourceDataSyncStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (LastResourceDataSyncStatus) Values() []LastResourceDataSyncStatus {
	return []LastResourceDataSyncStatus{
		"Successful",
		"Failed",
		"InProgress",
	}
}

type MaintenanceWindowExecutionStatus string

// Enum values for MaintenanceWindowExecutionStatus
const (
	MaintenanceWindowExecutionStatusPending            MaintenanceWindowExecutionStatus = "PENDING"
	MaintenanceWindowExecutionStatusInprogress         MaintenanceWindowExecutionStatus = "IN_PROGRESS"
	MaintenanceWindowExecutionStatusSuccess            MaintenanceWindowExecutionStatus = "SUCCESS"
	MaintenanceWindowExecutionStatusFailed             MaintenanceWindowExecutionStatus = "FAILED"
	MaintenanceWindowExecutionStatusTimedout           MaintenanceWindowExecutionStatus = "TIMED_OUT"
	MaintenanceWindowExecutionStatusCancelling         MaintenanceWindowExecutionStatus = "CANCELLING"
	MaintenanceWindowExecutionStatusCancelled          MaintenanceWindowExecutionStatus = "CANCELLED"
	MaintenanceWindowExecutionStatusSkippedoverlapping MaintenanceWindowExecutionStatus = "SKIPPED_OVERLAPPING"
)

// Values returns all known values for MaintenanceWindowExecutionStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (MaintenanceWindowExecutionStatus) Values() []MaintenanceWindowExecutionStatus {
	return []MaintenanceWindowExecutionStatus{
		"PENDING",
		"IN_PROGRESS",
		"SUCCESS",
		"FAILED",
		"TIMED_OUT",
		"CANCELLING",
		"CANCELLED",
		"SKIPPED_OVERLAPPING",
	}
}

type MaintenanceWindowResourceType string

// Enum values for MaintenanceWindowResourceType
const (
	MaintenanceWindowResourceTypeInstance      MaintenanceWindowResourceType = "INSTANCE"
	MaintenanceWindowResourceTypeResourcegroup MaintenanceWindowResourceType = "RESOURCE_GROUP"
)

// Values returns all known values for MaintenanceWindowResourceType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (MaintenanceWindowResourceType) Values() []MaintenanceWindowResourceType {
	return []MaintenanceWindowResourceType{
		"INSTANCE",
		"RESOURCE_GROUP",
	}
}

type MaintenanceWindowTaskType string

// Enum values for MaintenanceWindowTaskType
const (
	MaintenanceWindowTaskTypeRuncommand    MaintenanceWindowTaskType = "RUN_COMMAND"
	MaintenanceWindowTaskTypeAutomation    MaintenanceWindowTaskType = "AUTOMATION"
	MaintenanceWindowTaskTypeStepfunctions MaintenanceWindowTaskType = "STEP_FUNCTIONS"
	MaintenanceWindowTaskTypeLambda        MaintenanceWindowTaskType = "LAMBDA"
)

// Values returns all known values for MaintenanceWindowTaskType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (MaintenanceWindowTaskType) Values() []MaintenanceWindowTaskType {
	return []MaintenanceWindowTaskType{
		"RUN_COMMAND",
		"AUTOMATION",
		"STEP_FUNCTIONS",
		"LAMBDA",
	}
}

type NotificationEvent string

// Enum values for NotificationEvent
const (
	NotificationEventAll         NotificationEvent = "All"
	NotificationEventIn_progress NotificationEvent = "InProgress"
	NotificationEventSuccess     NotificationEvent = "Success"
	NotificationEventTimed_out   NotificationEvent = "TimedOut"
	NotificationEventCancelled   NotificationEvent = "Cancelled"
	NotificationEventFailed      NotificationEvent = "Failed"
)

// Values returns all known values for NotificationEvent. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NotificationEvent) Values() []NotificationEvent {
	return []NotificationEvent{
		"All",
		"InProgress",
		"Success",
		"TimedOut",
		"Cancelled",
		"Failed",
	}
}

type NotificationType string

// Enum values for NotificationType
const (
	NotificationTypeCommand    NotificationType = "Command"
	NotificationTypeInvocation NotificationType = "Invocation"
)

// Values returns all known values for NotificationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NotificationType) Values() []NotificationType {
	return []NotificationType{
		"Command",
		"Invocation",
	}
}

type OperatingSystem string

// Enum values for OperatingSystem
const (
	OperatingSystemWindows               OperatingSystem = "WINDOWS"
	OperatingSystemAmazonlinux           OperatingSystem = "AMAZON_LINUX"
	OperatingSystemAmazonlinux2          OperatingSystem = "AMAZON_LINUX_2"
	OperatingSystemUbuntu                OperatingSystem = "UBUNTU"
	OperatingSystemRedhatenterpriselinux OperatingSystem = "REDHAT_ENTERPRISE_LINUX"
	OperatingSystemSuse                  OperatingSystem = "SUSE"
	OperatingSystemCentos                OperatingSystem = "CENTOS"
	OperatingSystemOraclelinux           OperatingSystem = "ORACLE_LINUX"
	OperatingSystemDebian                OperatingSystem = "DEBIAN"
)

// Values returns all known values for OperatingSystem. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OperatingSystem) Values() []OperatingSystem {
	return []OperatingSystem{
		"WINDOWS",
		"AMAZON_LINUX",
		"AMAZON_LINUX_2",
		"UBUNTU",
		"REDHAT_ENTERPRISE_LINUX",
		"SUSE",
		"CENTOS",
		"ORACLE_LINUX",
		"DEBIAN",
	}
}

type OpsFilterOperatorType string

// Enum values for OpsFilterOperatorType
const (
	OpsFilterOperatorTypeEqual        OpsFilterOperatorType = "Equal"
	OpsFilterOperatorTypeNot_equal    OpsFilterOperatorType = "NotEqual"
	OpsFilterOperatorTypeBegin_with   OpsFilterOperatorType = "BeginWith"
	OpsFilterOperatorTypeLess_than    OpsFilterOperatorType = "LessThan"
	OpsFilterOperatorTypeGreater_than OpsFilterOperatorType = "GreaterThan"
	OpsFilterOperatorTypeExists       OpsFilterOperatorType = "Exists"
)

// Values returns all known values for OpsFilterOperatorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OpsFilterOperatorType) Values() []OpsFilterOperatorType {
	return []OpsFilterOperatorType{
		"Equal",
		"NotEqual",
		"BeginWith",
		"LessThan",
		"GreaterThan",
		"Exists",
	}
}

type OpsItemDataType string

// Enum values for OpsItemDataType
const (
	OpsItemDataTypeSearchable_string OpsItemDataType = "SearchableString"
	OpsItemDataTypeString            OpsItemDataType = "String"
)

// Values returns all known values for OpsItemDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemDataType) Values() []OpsItemDataType {
	return []OpsItemDataType{
		"SearchableString",
		"String",
	}
}

type OpsItemFilterKey string

// Enum values for OpsItemFilterKey
const (
	OpsItemFilterKeyStatus                 OpsItemFilterKey = "Status"
	OpsItemFilterKeyCreated_by             OpsItemFilterKey = "CreatedBy"
	OpsItemFilterKeySource                 OpsItemFilterKey = "Source"
	OpsItemFilterKeyPriority               OpsItemFilterKey = "Priority"
	OpsItemFilterKeyTitle                  OpsItemFilterKey = "Title"
	OpsItemFilterKeyOpsitem_id             OpsItemFilterKey = "OpsItemId"
	OpsItemFilterKeyCreated_time           OpsItemFilterKey = "CreatedTime"
	OpsItemFilterKeyLast_modified_time     OpsItemFilterKey = "LastModifiedTime"
	OpsItemFilterKeyOperational_data       OpsItemFilterKey = "OperationalData"
	OpsItemFilterKeyOperational_data_key   OpsItemFilterKey = "OperationalDataKey"
	OpsItemFilterKeyOperational_data_value OpsItemFilterKey = "OperationalDataValue"
	OpsItemFilterKeyResource_id            OpsItemFilterKey = "ResourceId"
	OpsItemFilterKeyAutomation_id          OpsItemFilterKey = "AutomationId"
	OpsItemFilterKeyCategory               OpsItemFilterKey = "Category"
	OpsItemFilterKeySeverity               OpsItemFilterKey = "Severity"
)

// Values returns all known values for OpsItemFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemFilterKey) Values() []OpsItemFilterKey {
	return []OpsItemFilterKey{
		"Status",
		"CreatedBy",
		"Source",
		"Priority",
		"Title",
		"OpsItemId",
		"CreatedTime",
		"LastModifiedTime",
		"OperationalData",
		"OperationalDataKey",
		"OperationalDataValue",
		"ResourceId",
		"AutomationId",
		"Category",
		"Severity",
	}
}

type OpsItemFilterOperator string

// Enum values for OpsItemFilterOperator
const (
	OpsItemFilterOperatorEqual        OpsItemFilterOperator = "Equal"
	OpsItemFilterOperatorContains     OpsItemFilterOperator = "Contains"
	OpsItemFilterOperatorGreater_than OpsItemFilterOperator = "GreaterThan"
	OpsItemFilterOperatorLess_than    OpsItemFilterOperator = "LessThan"
)

// Values returns all known values for OpsItemFilterOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemFilterOperator) Values() []OpsItemFilterOperator {
	return []OpsItemFilterOperator{
		"Equal",
		"Contains",
		"GreaterThan",
		"LessThan",
	}
}

type OpsItemStatus string

// Enum values for OpsItemStatus
const (
	OpsItemStatusOpen        OpsItemStatus = "Open"
	OpsItemStatusIn_progress OpsItemStatus = "InProgress"
	OpsItemStatusResolved    OpsItemStatus = "Resolved"
)

// Values returns all known values for OpsItemStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OpsItemStatus) Values() []OpsItemStatus {
	return []OpsItemStatus{
		"Open",
		"InProgress",
		"Resolved",
	}
}

type ParametersFilterKey string

// Enum values for ParametersFilterKey
const (
	ParametersFilterKeyName   ParametersFilterKey = "Name"
	ParametersFilterKeyType   ParametersFilterKey = "Type"
	ParametersFilterKeyKey_id ParametersFilterKey = "KeyId"
)

// Values returns all known values for ParametersFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ParametersFilterKey) Values() []ParametersFilterKey {
	return []ParametersFilterKey{
		"Name",
		"Type",
		"KeyId",
	}
}

type ParameterTier string

// Enum values for ParameterTier
const (
	ParameterTierStandard            ParameterTier = "Standard"
	ParameterTierAdvanced            ParameterTier = "Advanced"
	ParameterTierIntelligent_tiering ParameterTier = "Intelligent-Tiering"
)

// Values returns all known values for ParameterTier. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ParameterTier) Values() []ParameterTier {
	return []ParameterTier{
		"Standard",
		"Advanced",
		"Intelligent-Tiering",
	}
}

type ParameterType string

// Enum values for ParameterType
const (
	ParameterTypeString        ParameterType = "String"
	ParameterTypeString_list   ParameterType = "StringList"
	ParameterTypeSecure_string ParameterType = "SecureString"
)

// Values returns all known values for ParameterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ParameterType) Values() []ParameterType {
	return []ParameterType{
		"String",
		"StringList",
		"SecureString",
	}
}

type PatchAction string

// Enum values for PatchAction
const (
	PatchActionAllowasdependency PatchAction = "ALLOW_AS_DEPENDENCY"
	PatchActionBlock             PatchAction = "BLOCK"
)

// Values returns all known values for PatchAction. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (PatchAction) Values() []PatchAction {
	return []PatchAction{
		"ALLOW_AS_DEPENDENCY",
		"BLOCK",
	}
}

type PatchComplianceDataState string

// Enum values for PatchComplianceDataState
const (
	PatchComplianceDataStateInstalled              PatchComplianceDataState = "INSTALLED"
	PatchComplianceDataStateInstalledother         PatchComplianceDataState = "INSTALLED_OTHER"
	PatchComplianceDataStateInstalledpendingreboot PatchComplianceDataState = "INSTALLED_PENDING_REBOOT"
	PatchComplianceDataStateInstalledrejected      PatchComplianceDataState = "INSTALLED_REJECTED"
	PatchComplianceDataStateMissing                PatchComplianceDataState = "MISSING"
	PatchComplianceDataStateNotapplicable          PatchComplianceDataState = "NOT_APPLICABLE"
	PatchComplianceDataStateFailed                 PatchComplianceDataState = "FAILED"
)

// Values returns all known values for PatchComplianceDataState. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PatchComplianceDataState) Values() []PatchComplianceDataState {
	return []PatchComplianceDataState{
		"INSTALLED",
		"INSTALLED_OTHER",
		"INSTALLED_PENDING_REBOOT",
		"INSTALLED_REJECTED",
		"MISSING",
		"NOT_APPLICABLE",
		"FAILED",
	}
}

type PatchComplianceLevel string

// Enum values for PatchComplianceLevel
const (
	PatchComplianceLevelCritical      PatchComplianceLevel = "CRITICAL"
	PatchComplianceLevelHigh          PatchComplianceLevel = "HIGH"
	PatchComplianceLevelMedium        PatchComplianceLevel = "MEDIUM"
	PatchComplianceLevelLow           PatchComplianceLevel = "LOW"
	PatchComplianceLevelInformational PatchComplianceLevel = "INFORMATIONAL"
	PatchComplianceLevelUnspecified   PatchComplianceLevel = "UNSPECIFIED"
)

// Values returns all known values for PatchComplianceLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PatchComplianceLevel) Values() []PatchComplianceLevel {
	return []PatchComplianceLevel{
		"CRITICAL",
		"HIGH",
		"MEDIUM",
		"LOW",
		"INFORMATIONAL",
		"UNSPECIFIED",
	}
}

type PatchDeploymentStatus string

// Enum values for PatchDeploymentStatus
const (
	PatchDeploymentStatusApproved         PatchDeploymentStatus = "APPROVED"
	PatchDeploymentStatusPendingapproval  PatchDeploymentStatus = "PENDING_APPROVAL"
	PatchDeploymentStatusExplicitapproved PatchDeploymentStatus = "EXPLICIT_APPROVED"
	PatchDeploymentStatusExplicitrejected PatchDeploymentStatus = "EXPLICIT_REJECTED"
)

// Values returns all known values for PatchDeploymentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PatchDeploymentStatus) Values() []PatchDeploymentStatus {
	return []PatchDeploymentStatus{
		"APPROVED",
		"PENDING_APPROVAL",
		"EXPLICIT_APPROVED",
		"EXPLICIT_REJECTED",
	}
}

type PatchFilterKey string

// Enum values for PatchFilterKey
const (
	PatchFilterKeyArch           PatchFilterKey = "ARCH"
	PatchFilterKeyAdvisoryid     PatchFilterKey = "ADVISORY_ID"
	PatchFilterKeyBugzillaid     PatchFilterKey = "BUGZILLA_ID"
	PatchFilterKeyPatchset       PatchFilterKey = "PATCH_SET"
	PatchFilterKeyProduct        PatchFilterKey = "PRODUCT"
	PatchFilterKeyProductfamily  PatchFilterKey = "PRODUCT_FAMILY"
	PatchFilterKeyClassification PatchFilterKey = "CLASSIFICATION"
	PatchFilterKeyCveid          PatchFilterKey = "CVE_ID"
	PatchFilterKeyEpoch          PatchFilterKey = "EPOCH"
	PatchFilterKeyMsrcseverity   PatchFilterKey = "MSRC_SEVERITY"
	PatchFilterKeyName           PatchFilterKey = "NAME"
	PatchFilterKeyPatchid        PatchFilterKey = "PATCH_ID"
	PatchFilterKeySection        PatchFilterKey = "SECTION"
	PatchFilterKeyPriority       PatchFilterKey = "PRIORITY"
	PatchFilterKeyRepository     PatchFilterKey = "REPOSITORY"
	PatchFilterKeyRelease        PatchFilterKey = "RELEASE"
	PatchFilterKeySeverity       PatchFilterKey = "SEVERITY"
	PatchFilterKeySecurity       PatchFilterKey = "SECURITY"
	PatchFilterKeyVersion        PatchFilterKey = "VERSION"
)

// Values returns all known values for PatchFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PatchFilterKey) Values() []PatchFilterKey {
	return []PatchFilterKey{
		"ARCH",
		"ADVISORY_ID",
		"BUGZILLA_ID",
		"PATCH_SET",
		"PRODUCT",
		"PRODUCT_FAMILY",
		"CLASSIFICATION",
		"CVE_ID",
		"EPOCH",
		"MSRC_SEVERITY",
		"NAME",
		"PATCH_ID",
		"SECTION",
		"PRIORITY",
		"REPOSITORY",
		"RELEASE",
		"SEVERITY",
		"SECURITY",
		"VERSION",
	}
}

type PatchOperationType string

// Enum values for PatchOperationType
const (
	PatchOperationTypeScan    PatchOperationType = "Scan"
	PatchOperationTypeInstall PatchOperationType = "Install"
)

// Values returns all known values for PatchOperationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PatchOperationType) Values() []PatchOperationType {
	return []PatchOperationType{
		"Scan",
		"Install",
	}
}

type PatchProperty string

// Enum values for PatchProperty
const (
	PatchPropertyProduct             PatchProperty = "PRODUCT"
	PatchPropertyPatchproductfamily  PatchProperty = "PRODUCT_FAMILY"
	PatchPropertyPatchclassification PatchProperty = "CLASSIFICATION"
	PatchPropertyPatchmsrcseverity   PatchProperty = "MSRC_SEVERITY"
	PatchPropertyPatchpriority       PatchProperty = "PRIORITY"
	PatchPropertyPatchseverity       PatchProperty = "SEVERITY"
)

// Values returns all known values for PatchProperty. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PatchProperty) Values() []PatchProperty {
	return []PatchProperty{
		"PRODUCT",
		"PRODUCT_FAMILY",
		"CLASSIFICATION",
		"MSRC_SEVERITY",
		"PRIORITY",
		"SEVERITY",
	}
}

type PatchSet string

// Enum values for PatchSet
const (
	PatchSetOs          PatchSet = "OS"
	PatchSetApplication PatchSet = "APPLICATION"
)

// Values returns all known values for PatchSet. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (PatchSet) Values() []PatchSet {
	return []PatchSet{
		"OS",
		"APPLICATION",
	}
}

type PingStatus string

// Enum values for PingStatus
const (
	PingStatusOnline          PingStatus = "Online"
	PingStatusConnection_lost PingStatus = "ConnectionLost"
	PingStatusInactive        PingStatus = "Inactive"
)

// Values returns all known values for PingStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (PingStatus) Values() []PingStatus {
	return []PingStatus{
		"Online",
		"ConnectionLost",
		"Inactive",
	}
}

type PlatformType string

// Enum values for PlatformType
const (
	PlatformTypeWindows PlatformType = "Windows"
	PlatformTypeLinux   PlatformType = "Linux"
)

// Values returns all known values for PlatformType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (PlatformType) Values() []PlatformType {
	return []PlatformType{
		"Windows",
		"Linux",
	}
}

type RebootOption string

// Enum values for RebootOption
const (
	RebootOptionReboot_if_needed RebootOption = "RebootIfNeeded"
	RebootOptionNo_reboot        RebootOption = "NoReboot"
)

// Values returns all known values for RebootOption. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (RebootOption) Values() []RebootOption {
	return []RebootOption{
		"RebootIfNeeded",
		"NoReboot",
	}
}

type ResourceDataSyncS3Format string

// Enum values for ResourceDataSyncS3Format
const (
	ResourceDataSyncS3FormatJson_serde ResourceDataSyncS3Format = "JsonSerDe"
)

// Values returns all known values for ResourceDataSyncS3Format. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ResourceDataSyncS3Format) Values() []ResourceDataSyncS3Format {
	return []ResourceDataSyncS3Format{
		"JsonSerDe",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeManaged_instance ResourceType = "ManagedInstance"
	ResourceTypeDocument         ResourceType = "Document"
	ResourceTypeEc2_instance     ResourceType = "EC2Instance"
)

// Values returns all known values for ResourceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"ManagedInstance",
		"Document",
		"EC2Instance",
	}
}

type ResourceTypeForTagging string

// Enum values for ResourceTypeForTagging
const (
	ResourceTypeForTaggingDocument           ResourceTypeForTagging = "Document"
	ResourceTypeForTaggingManaged_instance   ResourceTypeForTagging = "ManagedInstance"
	ResourceTypeForTaggingMaintenance_window ResourceTypeForTagging = "MaintenanceWindow"
	ResourceTypeForTaggingParameter          ResourceTypeForTagging = "Parameter"
	ResourceTypeForTaggingPatch_baseline     ResourceTypeForTagging = "PatchBaseline"
	ResourceTypeForTaggingOps_item           ResourceTypeForTagging = "OpsItem"
)

// Values returns all known values for ResourceTypeForTagging. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ResourceTypeForTagging) Values() []ResourceTypeForTagging {
	return []ResourceTypeForTagging{
		"Document",
		"ManagedInstance",
		"MaintenanceWindow",
		"Parameter",
		"PatchBaseline",
		"OpsItem",
	}
}

type SessionFilterKey string

// Enum values for SessionFilterKey
const (
	SessionFilterKeyInvoked_after  SessionFilterKey = "InvokedAfter"
	SessionFilterKeyInvoked_before SessionFilterKey = "InvokedBefore"
	SessionFilterKeyTarget_id      SessionFilterKey = "Target"
	SessionFilterKeyOwner          SessionFilterKey = "Owner"
	SessionFilterKeyStatus         SessionFilterKey = "Status"
)

// Values returns all known values for SessionFilterKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SessionFilterKey) Values() []SessionFilterKey {
	return []SessionFilterKey{
		"InvokedAfter",
		"InvokedBefore",
		"Target",
		"Owner",
		"Status",
	}
}

type SessionState string

// Enum values for SessionState
const (
	SessionStateActive  SessionState = "Active"
	SessionStateHistory SessionState = "History"
)

// Values returns all known values for SessionState. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (SessionState) Values() []SessionState {
	return []SessionState{
		"Active",
		"History",
	}
}

type SessionStatus string

// Enum values for SessionStatus
const (
	SessionStatusConnected    SessionStatus = "Connected"
	SessionStatusConnecting   SessionStatus = "Connecting"
	SessionStatusDisconnected SessionStatus = "Disconnected"
	SessionStatusTerminated   SessionStatus = "Terminated"
	SessionStatusTerminating  SessionStatus = "Terminating"
	SessionStatusFailed       SessionStatus = "Failed"
)

// Values returns all known values for SessionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SessionStatus) Values() []SessionStatus {
	return []SessionStatus{
		"Connected",
		"Connecting",
		"Disconnected",
		"Terminated",
		"Terminating",
		"Failed",
	}
}

type SignalType string

// Enum values for SignalType
const (
	SignalTypeApprove    SignalType = "Approve"
	SignalTypeReject     SignalType = "Reject"
	SignalTypeStart_step SignalType = "StartStep"
	SignalTypeStop_step  SignalType = "StopStep"
	SignalTypeResume     SignalType = "Resume"
)

// Values returns all known values for SignalType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (SignalType) Values() []SignalType {
	return []SignalType{
		"Approve",
		"Reject",
		"StartStep",
		"StopStep",
		"Resume",
	}
}

type StepExecutionFilterKey string

// Enum values for StepExecutionFilterKey
const (
	StepExecutionFilterKeyStart_time_before     StepExecutionFilterKey = "StartTimeBefore"
	StepExecutionFilterKeyStart_time_after      StepExecutionFilterKey = "StartTimeAfter"
	StepExecutionFilterKeyStep_execution_status StepExecutionFilterKey = "StepExecutionStatus"
	StepExecutionFilterKeyStep_execution_id     StepExecutionFilterKey = "StepExecutionId"
	StepExecutionFilterKeyStep_name             StepExecutionFilterKey = "StepName"
	StepExecutionFilterKeyAction                StepExecutionFilterKey = "Action"
)

// Values returns all known values for StepExecutionFilterKey. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StepExecutionFilterKey) Values() []StepExecutionFilterKey {
	return []StepExecutionFilterKey{
		"StartTimeBefore",
		"StartTimeAfter",
		"StepExecutionStatus",
		"StepExecutionId",
		"StepName",
		"Action",
	}
}

type StopType string

// Enum values for StopType
const (
	StopTypeComplete StopType = "Complete"
	StopTypeCancel   StopType = "Cancel"
)

// Values returns all known values for StopType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (StopType) Values() []StopType {
	return []StopType{
		"Complete",
		"Cancel",
	}
}
