// Code generated by smithy-go-codegen DO NOT EDIT.

package ssm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ssm/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Generates an activation code and activation ID you can use to register your
// on-premises server or virtual machine (VM) with Systems Manager. Registering
// these machines with Systems Manager makes it possible to manage them using
// Systems Manager capabilities. You use the activation code and ID when installing
// SSM Agent on machines in your hybrid environment. For more information about
// requirements for managing on-premises instances and VMs using Systems Manager,
// see Setting up AWS Systems Manager for hybrid environments
// (https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html)
// in the AWS Systems Manager User Guide. On-premises servers or VMs that are
// registered with Systems Manager and EC2 instances that you manage with Systems
// Manager are all called managed instances.
func (c *Client) CreateActivation(ctx context.Context, params *CreateActivationInput, optFns ...func(*Options)) (*CreateActivationOutput, error) {
	stack := middleware.NewStack("CreateActivation", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateActivationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateActivationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateActivation(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateActivation",
			Err:           err,
		}
	}
	out := result.(*CreateActivationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateActivationInput struct {
	// Specify the maximum number of managed instances you want to register. The
	// default value is 1 instance.
	RegistrationLimit *int32
	// A user-defined description of the resource that you want to register with
	// Systems Manager. Do not enter personally identifiable information in this field.
	Description *string
	// The date by which this activation request should expire. The default value is 24
	// hours.
	ExpirationDate *time.Time
	// The name of the registered, managed instance as it will appear in the Systems
	// Manager console or when you use the AWS command line tools to list Systems
	// Manager resources. Do not enter personally identifiable information in this
	// field.
	DefaultInstanceName *string
	// Optional metadata that you assign to a resource. Tags enable you to categorize a
	// resource in different ways, such as by purpose, owner, or environment. For
	// example, you might want to tag an activation to identify which servers or
	// virtual machines (VMs) in your on-premises environment you intend to activate.
	// In this case, you could specify the following key name/value pairs:
	//
	//     *
	// Key=OS,Value=Windows
	//
	//     * Key=Environment,Value=Production
	//
	// When you install
	// SSM Agent on your on-premises servers and VMs, you specify an activation ID and
	// code. When you specify the activation ID and code, tags assigned to the
	// activation are automatically applied to the on-premises servers or VMs.  <p>You
	// can't add tags to or delete tags from an existing activation. You can tag your
	// on-premises servers and VMs after they connect to Systems Manager for the first
	// time and are assigned a managed instance ID. This means they are listed in the
	// AWS Systems Manager console with an ID that is prefixed with "mi-". For
	// information about how to add tags to your managed instances, see
	// AddTagsToResource (). For information about how to remove tags from your managed
	// instances, see RemoveTagsFromResource ().
	Tags []*types.Tag
	// The Amazon Identity and Access Management (IAM) role that you want to assign to
	// the managed instance. This IAM role must provide AssumeRole permissions for the
	// Systems Manager service principal ssm.amazonaws.com. For more information, see
	// Create an IAM service role for a hybrid environment
	// (https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-service-role.html)
	// in the AWS Systems Manager User Guide.
	IamRole *string
}

type CreateActivationOutput struct {
	// The ID number generated by the system when it processed the activation. The
	// activation ID functions like a user name.
	ActivationId *string
	// The code the system generates when it processes the activation. The activation
	// code functions like a password to validate the activation ID.
	ActivationCode *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateActivationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateActivation{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateActivation{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateActivation(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ssm",
		OperationName: "CreateActivation",
	}
}
