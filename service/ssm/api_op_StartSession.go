// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ssm

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm/types"
)

const opStartSession = "StartSession"

// StartSessionRequest returns a request value for making API operation for
// Amazon Simple Systems Manager (SSM).
//
// Initiates a connection to a target (for example, an instance) for a Session
// Manager session. Returns a URL and token that can be used to open a WebSocket
// connection for sending input and receiving outputs.
//
// AWS CLI usage: start-session is an interactive command that requires the
// Session Manager plugin to be installed on the client machine making the call.
// For information, see Install the Session Manager Plugin for the AWS CLI (http://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html)
// in the AWS Systems Manager User Guide.
//
// AWS Tools for PowerShell usage: Start-SSMSession is not currently supported
// by AWS Tools for PowerShell on Windows local machines.
//
//    // Example sending a request using StartSessionRequest.
//    req := client.StartSessionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/StartSession
func (c *Client) StartSessionRequest(input *types.StartSessionInput) StartSessionRequest {
	op := &aws.Operation{
		Name:       opStartSession,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StartSessionInput{}
	}

	req := c.newRequest(op, input, &types.StartSessionOutput{})
	return StartSessionRequest{Request: req, Input: input, Copy: c.StartSessionRequest}
}

// StartSessionRequest is the request type for the
// StartSession API operation.
type StartSessionRequest struct {
	*aws.Request
	Input *types.StartSessionInput
	Copy  func(*types.StartSessionInput) StartSessionRequest
}

// Send marshals and sends the StartSession API request.
func (r StartSessionRequest) Send(ctx context.Context) (*StartSessionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartSessionResponse{
		StartSessionOutput: r.Request.Data.(*types.StartSessionOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartSessionResponse is the response type for the
// StartSession API operation.
type StartSessionResponse struct {
	*types.StartSessionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartSession request.
func (r *StartSessionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
