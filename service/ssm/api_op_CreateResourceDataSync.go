// Code generated by smithy-go-codegen DO NOT EDIT.

package ssm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ssm/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// A resource data sync helps you view data from multiple sources in a single
// location. Systems Manager offers two types of resource data sync:
// SyncToDestination and SyncFromSource. You can configure Systems Manager
// Inventory to use the SyncToDestination type to synchronize Inventory data from
// multiple AWS Regions to a single S3 bucket. For more information, see
// Configuring Resource Data Sync for Inventory
// (https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-datasync.html)
// in the AWS Systems Manager User Guide.  <p>You can configure Systems Manager
// Explorer to use the <code>SyncFromSource</code> type to synchronize  operational
// work items (OpsItems) and operational data (OpsData) from multiple AWS Regions
// to a single S3 bucket. This type can synchronize OpsItems and OpsData from
// multiple AWS accounts and Regions or EntireOrganization by using AWS
// Organizations. For more information, see Setting up Systems Manager Explorer to
// display data from multiple accounts and Regions
// (https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resource-data-sync.html)
// in the AWS Systems Manager User Guide.  <p>A resource data sync is an
// asynchronous operation that returns immediately. After a  successful initial
// sync is completed, the system continuously syncs data. To check the status of a
// sync, use the ListResourceDataSync ().  <note> <p>By default, data is not
// encrypted in Amazon S3. We strongly recommend that you enable encryption in
// Amazon S3 to ensure secure data storage. We also recommend that you secure
// access to the Amazon S3 bucket by creating a restrictive bucket policy. </p>
// </note>
func (c *Client) CreateResourceDataSync(ctx context.Context, params *CreateResourceDataSyncInput, optFns ...func(*Options)) (*CreateResourceDataSyncOutput, error) {
	stack := middleware.NewStack("CreateResourceDataSync", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateResourceDataSyncMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateResourceDataSyncValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateResourceDataSync(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateResourceDataSync",
			Err:           err,
		}
	}
	out := result.(*CreateResourceDataSyncOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateResourceDataSyncInput struct {
	// Specify SyncToDestination to create a resource data sync that synchronizes data
	// to an S3 bucket for Inventory. If you specify SyncToDestination, you must
	// provide a value for S3Destination. Specify SyncFromSource to synchronize data
	// from a single account and multiple Regions, or multiple AWS accounts and
	// Regions, as listed in AWS Organizations for Explorer. If you specify
	// SyncFromSource, you must provide a value for SyncSource. The default value is
	// SyncToDestination.
	SyncType *string
	// A name for the configuration.
	SyncName *string
	// Specify information about the data sources to synchronize. This parameter is
	// required if the SyncType value is SyncFromSource.
	SyncSource *types.ResourceDataSyncSource
	// Amazon S3 configuration details for the sync. This parameter is required if the
	// SyncType value is SyncToDestination.
	S3Destination *types.ResourceDataSyncS3Destination
}

type CreateResourceDataSyncOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateResourceDataSyncMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateResourceDataSync{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateResourceDataSync{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateResourceDataSync(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ssm",
		OperationName: "CreateResourceDataSync",
	}
}
