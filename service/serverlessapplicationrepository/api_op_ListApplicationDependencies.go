// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package serverlessapplicationrepository

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/serverlessapplicationrepository/types"
)

const opListApplicationDependencies = "ListApplicationDependencies"

// ListApplicationDependenciesRequest returns a request value for making API operation for
// AWSServerlessApplicationRepository.
//
// Retrieves the list of applications nested in the containing application.
//
//    // Example sending a request using ListApplicationDependenciesRequest.
//    req := client.ListApplicationDependenciesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/serverlessrepo-2017-09-08/ListApplicationDependencies
func (c *Client) ListApplicationDependenciesRequest(input *types.ListApplicationDependenciesInput) ListApplicationDependenciesRequest {
	op := &aws.Operation{
		Name:       opListApplicationDependencies,
		HTTPMethod: "GET",
		HTTPPath:   "/applications/{applicationId}/dependencies",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxItems",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListApplicationDependenciesInput{}
	}

	req := c.newRequest(op, input, &types.ListApplicationDependenciesOutput{})
	return ListApplicationDependenciesRequest{Request: req, Input: input, Copy: c.ListApplicationDependenciesRequest}
}

// ListApplicationDependenciesRequest is the request type for the
// ListApplicationDependencies API operation.
type ListApplicationDependenciesRequest struct {
	*aws.Request
	Input *types.ListApplicationDependenciesInput
	Copy  func(*types.ListApplicationDependenciesInput) ListApplicationDependenciesRequest
}

// Send marshals and sends the ListApplicationDependencies API request.
func (r ListApplicationDependenciesRequest) Send(ctx context.Context) (*ListApplicationDependenciesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListApplicationDependenciesResponse{
		ListApplicationDependenciesOutput: r.Request.Data.(*types.ListApplicationDependenciesOutput),
		response:                          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListApplicationDependenciesRequestPaginator returns a paginator for ListApplicationDependencies.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListApplicationDependenciesRequest(input)
//   p := serverlessapplicationrepository.NewListApplicationDependenciesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListApplicationDependenciesPaginator(req ListApplicationDependenciesRequest) ListApplicationDependenciesPaginator {
	return ListApplicationDependenciesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListApplicationDependenciesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListApplicationDependenciesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListApplicationDependenciesPaginator struct {
	aws.Pager
}

func (p *ListApplicationDependenciesPaginator) CurrentPage() *types.ListApplicationDependenciesOutput {
	return p.Pager.CurrentPage().(*types.ListApplicationDependenciesOutput)
}

// ListApplicationDependenciesResponse is the response type for the
// ListApplicationDependencies API operation.
type ListApplicationDependenciesResponse struct {
	*types.ListApplicationDependenciesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListApplicationDependencies request.
func (r *ListApplicationDependenciesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
