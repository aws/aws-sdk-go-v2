// Code generated by smithy-go-codegen DO NOT EDIT.

package location

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/location/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Creates a map resource in your AWS account, which provides map tiles of
// different styles sourced from global location data providers. By using Maps, you
// agree that AWS may transmit your API queries to your selected third party
// provider for processing, which may be outside the AWS region you are currently
// using. For more information, see the AWS Service Terms
// (https://aws.amazon.com/service-terms/) for Amazon Location Service.
func (c *Client) CreateMap(ctx context.Context, params *CreateMapInput, optFns ...func(*Options)) (*CreateMapOutput, error) {
	if params == nil {
		params = &CreateMapInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateMap", params, optFns, addOperationCreateMapMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateMapOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateMapInput struct {

	// Specifies the map style selected from an available data provider.
	//
	// This member is required.
	Configuration *types.MapConfiguration

	// The name for the map resource. Requirements:
	//
	// * Must contain only alphanumeric
	// characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).
	//
	// *
	// Must be a unique map resource name.
	//
	// * No spaces allowed. For example,
	// ExampleMap.
	//
	// This member is required.
	MapName *string

	// Specifies the pricing plan for your map resource. For additional details and
	// restrictions on each pricing plan option, see the Amazon Location Service
	// pricing page (https://aws.amazon.com/location/pricing/).
	//
	// This member is required.
	PricingPlan types.PricingPlan

	// An optional description for the map resource.
	Description *string
}

type CreateMapOutput struct {

	// The timestamp for when the map resource was created in ISO 8601
	// (https://www.iso.org/iso-8601-date-and-time-format.html) format:
	// YYYY-MM-DDThh:mm:ss.sssZ.
	//
	// This member is required.
	CreateTime *time.Time

	// The Amazon Resource Name (ARN) for the map resource. Used when you need to
	// specify a resource across all AWS.
	//
	// * Format example:
	// arn:partition:service:region:account-id:resource-type:resource-id
	//
	// This member is required.
	MapArn *string

	// The name of the map resource.
	//
	// This member is required.
	MapName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateMapMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateMap{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateMap{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateMapValidationMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}
