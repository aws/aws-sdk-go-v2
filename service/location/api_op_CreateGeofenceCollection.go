// Code generated by smithy-go-codegen DO NOT EDIT.

package location

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/location/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Creates a geofence collection, which manages and stores geofences.
func (c *Client) CreateGeofenceCollection(ctx context.Context, params *CreateGeofenceCollectionInput, optFns ...func(*Options)) (*CreateGeofenceCollectionOutput, error) {
	if params == nil {
		params = &CreateGeofenceCollectionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateGeofenceCollection", params, optFns, addOperationCreateGeofenceCollectionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateGeofenceCollectionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateGeofenceCollectionInput struct {

	// A custom name for the geofence collection. Requirements:
	//
	// * Contain only
	// alphanumeric characters (A–Z, a–z, 0-9), hyphens (-), periods (.), and
	// underscores (_).
	//
	// * Must be a unique geofence collection name.
	//
	// * No spaces
	// allowed. For example, ExampleGeofenceCollection.
	//
	// This member is required.
	CollectionName *string

	// Specifies the pricing plan for your geofence collection. For additional details
	// and restrictions on each pricing plan option, see the Amazon Location Service
	// pricing page (https://aws.amazon.com/location/pricing/).
	//
	// This member is required.
	PricingPlan types.PricingPlan

	// An optional description for the geofence collection.
	Description *string

	// Specifies the plan data source. Required if the Mobile Asset Tracking (MAT) or
	// the Mobile Asset Management (MAM) pricing plan is selected. Billing is
	// determined by the resource usage, the associated pricing plan, and the data
	// source that was specified. For more information about each pricing plan option
	// and restrictions, see the Amazon Location Service pricing page
	// (https://aws.amazon.com/location/pricing/). Valid Values: Esri | Here
	PricingPlanDataSource *string
}

type CreateGeofenceCollectionOutput struct {

	// The Amazon Resource Name (ARN) for the geofence collection resource. Used when
	// you need to specify a resource across all AWS.
	//
	// This member is required.
	CollectionArn *string

	// The name for the geofence collection.
	//
	// This member is required.
	CollectionName *string

	// The timestamp for when the geofence collection was created in ISO 8601
	// (https://www.iso.org/iso-8601-date-and-time-format.html) format:
	// YYYY-MM-DDThh:mm:ss.sssZ
	//
	// This member is required.
	CreateTime *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateGeofenceCollectionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateGeofenceCollection{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateGeofenceCollection{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateGeofenceCollectionValidationMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}
