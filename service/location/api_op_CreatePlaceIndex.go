// Code generated by smithy-go-codegen DO NOT EDIT.

package location

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/location/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Creates a Place index resource in your AWS account, which supports Places
// functions with geospatial data sourced from your chosen data provider. By using
// Places, you agree that AWS may transmit your API queries to your selected third
// party provider for processing, which may be outside the AWS region you are
// currently using. Because of licensing limitations, you may not use HERE to store
// results for locations in Japan. For more information, see the AWS Service Terms
// (https://aws.amazon.com/service-terms/) for Amazon Location Service.
func (c *Client) CreatePlaceIndex(ctx context.Context, params *CreatePlaceIndexInput, optFns ...func(*Options)) (*CreatePlaceIndexOutput, error) {
	if params == nil {
		params = &CreatePlaceIndexInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreatePlaceIndex", params, optFns, addOperationCreatePlaceIndexMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreatePlaceIndexOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreatePlaceIndexInput struct {

	// Specifies the data provider of geospatial data. This field is case-sensitive.
	// Enter the valid values as shown. For example, entering HERE will return an
	// error. Valid values include:
	//
	// * Esri
	//
	// * Here
	//
	// For additional details on data
	// providers, see the Amazon Location Service data providers page
	// (https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html).
	//
	// This member is required.
	DataSource *string

	// The name of the Place index resource. Requirements:
	//
	// * Contain only alphanumeric
	// characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).
	//
	// *
	// Must be a unique Place index resource name.
	//
	// * No spaces allowed. For example,
	// ExamplePlaceIndex.
	//
	// This member is required.
	IndexName *string

	// Specifies the pricing plan for your Place index resource. For additional details
	// and restrictions on each pricing plan option, see the Amazon Location Service
	// pricing page (https://aws.amazon.com/location/pricing/).
	//
	// This member is required.
	PricingPlan types.PricingPlan

	// Specifies the data storage option for requesting Places.
	DataSourceConfiguration *types.DataSourceConfiguration

	// The optional description for the Place index resource.
	Description *string
}

type CreatePlaceIndexOutput struct {

	// The timestamp for when the Place index resource was created in ISO 8601
	// (https://www.iso.org/iso-8601-date-and-time-format.html) format:
	// YYYY-MM-DDThh:mm:ss.sssZ.
	//
	// This member is required.
	CreateTime *time.Time

	// The Amazon Resource Name (ARN) for the Place index resource. Used when you need
	// to specify a resource across all AWS.
	//
	// This member is required.
	IndexArn *string

	// The name for the Place index resource.
	//
	// This member is required.
	IndexName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreatePlaceIndexMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreatePlaceIndex{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreatePlaceIndex{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreatePlaceIndexValidationMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}
