// Code generated by smithy-go-codegen DO NOT EDIT.

package location

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Retrieves a vector data tile from the map resource. Map tiles are used by
// clients to render a map. they're addressed using a grid arrangement with an X
// coordinate, Y coordinate, and Z (zoom) level. The origin (0, 0) is the top left
// of the map. Increasing the zoom level by 1 doubles both the X and Y dimensions,
// so a tile containing data for the entire world at (0/0/0) will be split into 4
// tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).
func (c *Client) GetMapTile(ctx context.Context, params *GetMapTileInput, optFns ...func(*Options)) (*GetMapTileOutput, error) {
	if params == nil {
		params = &GetMapTileInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GetMapTile", params, optFns, c.addOperationGetMapTileMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GetMapTileOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetMapTileInput struct {

	// The map resource to retrieve the map tiles from.
	//
	// This member is required.
	MapName *string

	// The X axis value for the map tile.
	//
	// This member is required.
	X *string

	// The Y axis value for the map tile.
	//
	// This member is required.
	Y *string

	// The zoom value for the map tile.
	//
	// This member is required.
	Z *string
}

type GetMapTileOutput struct {

	// Contains Mapbox Vector Tile (MVT) data.
	Blob []byte

	// The map tile's content type. For example, application/vnd.mapbox-vector-tile.
	ContentType *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func (c *Client) addOperationGetMapTileMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpGetMapTile{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpGetMapTile{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpGetMapTileValidationMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}
