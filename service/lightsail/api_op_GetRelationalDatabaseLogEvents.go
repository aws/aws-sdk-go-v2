// Code generated by smithy-go-codegen DO NOT EDIT.

package lightsail

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns a list of log events for a database in Amazon Lightsail.
func (c *Client) GetRelationalDatabaseLogEvents(ctx context.Context, params *GetRelationalDatabaseLogEventsInput, optFns ...func(*Options)) (*GetRelationalDatabaseLogEventsOutput, error) {
	stack := middleware.NewStack("GetRelationalDatabaseLogEvents", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetRelationalDatabaseLogEventsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetRelationalDatabaseLogEventsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetRelationalDatabaseLogEvents(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetRelationalDatabaseLogEvents",
			Err:           err,
		}
	}
	out := result.(*GetRelationalDatabaseLogEventsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetRelationalDatabaseLogEventsInput struct {
	// The end of the time interval from which to get log events. Constraints:
	//
	//     *
	// Specified in Coordinated Universal Time (UTC).
	//
	//     * Specified in the Unix time
	// format. For example, if you wish to use an end time of October 1, 2018, at 8 PM
	// UTC, then you input 1538424000 as the end time.  </li> </ul>
	EndTime *time.Time
	// The name of your database for which to get log events.
	RelationalDatabaseName *string
	// The start of the time interval from which to get log events. Constraints:
	//
	//     *
	// Specified in Coordinated Universal Time (UTC).
	//
	//     * Specified in the Unix time
	// format. For example, if you wish to use a start time of October 1, 2018, at 8 PM
	// UTC, then you input 1538424000 as the start time.
	StartTime *time.Time
	// The token to advance to the next or previous page of results from your request.
	// To get a page token, perform an initial GetRelationalDatabaseLogEvents request.
	// If your results are paginated, the response will return a next forward token
	// and/or next backward token that you can specify as the page token in a
	// subsequent request.
	PageToken *string
	// Parameter to specify if the log should start from head or tail. If true is
	// specified, the log event starts from the head of the log. If false is specified,
	// the log event starts from the tail of the log. For PostgreSQL, the default value
	// of false is the only option available.
	StartFromHead *bool
	// The name of the log stream. Use the get relational database log streams
	// operation to get a list of available log streams.
	LogStreamName *string
}

type GetRelationalDatabaseLogEventsOutput struct {
	// An object describing the result of your get relational database log events
	// request.
	ResourceLogEvents []*types.LogEvent
	// A token used for advancing to the previous page of results from your get
	// relational database log events request.
	NextBackwardToken *string
	// A token used for advancing to the next page of results from your get relational
	// database log events request.
	NextForwardToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetRelationalDatabaseLogEventsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetRelationalDatabaseLogEvents{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetRelationalDatabaseLogEvents{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetRelationalDatabaseLogEvents(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lightsail",
		OperationName: "GetRelationalDatabaseLogEvents",
	}
}
