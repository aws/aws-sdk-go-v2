// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lightsail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
)

const opStartInstance = "StartInstance"

// StartInstanceRequest returns a request value for making API operation for
// Amazon Lightsail.
//
// Starts a specific Amazon Lightsail instance from a stopped state. To restart
// an instance, use the reboot instance operation.
//
// When you start a stopped instance, Lightsail assigns a new public IP address
// to the instance. To use the same IP address after stopping and starting an
// instance, create a static IP address and attach it to the instance. For more
// information, see the Lightsail Dev Guide (https://lightsail.aws.amazon.com/ls/docs/en/articles/lightsail-create-static-ip).
//
// The start instance operation supports tag-based access control via resource
// tags applied to the resource identified by instance name. For more information,
// see the Lightsail Dev Guide (https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags).
//
//    // Example sending a request using StartInstanceRequest.
//    req := client.StartInstanceRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lightsail-2016-11-28/StartInstance
func (c *Client) StartInstanceRequest(input *types.StartInstanceInput) StartInstanceRequest {
	op := &aws.Operation{
		Name:       opStartInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StartInstanceInput{}
	}

	req := c.newRequest(op, input, &types.StartInstanceOutput{})
	return StartInstanceRequest{Request: req, Input: input, Copy: c.StartInstanceRequest}
}

// StartInstanceRequest is the request type for the
// StartInstance API operation.
type StartInstanceRequest struct {
	*aws.Request
	Input *types.StartInstanceInput
	Copy  func(*types.StartInstanceInput) StartInstanceRequest
}

// Send marshals and sends the StartInstance API request.
func (r StartInstanceRequest) Send(ctx context.Context) (*StartInstanceResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartInstanceResponse{
		StartInstanceOutput: r.Request.Data.(*types.StartInstanceOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartInstanceResponse is the response type for the
// StartInstance API operation.
type StartInstanceResponse struct {
	*types.StartInstanceOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartInstance request.
func (r *StartInstanceResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
