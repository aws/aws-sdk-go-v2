// Code generated by smithy-go-codegen DO NOT EDIT.

package lightsail

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an Amazon Lightsail content delivery network (CDN) distribution.  <p>A
// distribution is a globally distributed network of caching servers that improve
// the performance of your website or web application hosted on a Lightsail
// instance. For more information, see <a
// href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-networks">Content
// delivery networks in Amazon Lightsail</a>.</p>
func (c *Client) CreateDistribution(ctx context.Context, params *CreateDistributionInput, optFns ...func(*Options)) (*CreateDistributionOutput, error) {
	stack := middleware.NewStack("CreateDistribution", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateDistributionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateDistributionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateDistribution(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateDistribution",
			Err:           err,
		}
	}
	out := result.(*CreateDistributionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateDistributionInput struct {
	// The tag keys and optional values to add to the distribution during create.
	// <p>Use the <code>TagResource</code> action to tag a resource after it's
	// created.</p>
	Tags []*types.Tag
	// The name for the distribution.
	DistributionName *string
	// An array of objects that describe the per-path cache behavior for the
	// distribution.
	CacheBehaviors []*types.CacheBehaviorPerPath
	// An object that describes the cache behavior settings for the distribution.
	CacheBehaviorSettings *types.CacheSettings
	// An object that describes the default cache behavior for the distribution.
	DefaultCacheBehavior *types.CacheBehavior
	// An object that describes the origin resource for the distribution, such as a
	// Lightsail instance or load balancer.  <p>The distribution pulls, caches, and
	// serves content from the origin.</p>
	Origin *types.InputOrigin
	// The bundle ID to use for the distribution.  <p>A distribution bundle describes
	// the specifications of your distribution, such as the monthly cost and monthly
	// network transfer quota.</p> <p>Use the <code>GetDistributionBundles</code>
	// action to get a list of distribution bundle IDs that you can specify.</p>
	BundleId *string
}

type CreateDistributionOutput struct {
	// An array of objects that describe the result of the action, such as the status
	// of the request, the timestamp of the request, and the resources affected by the
	// request.
	Operation *types.Operation
	// An object that describes the distribution created.
	Distribution *types.LightsailDistribution

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateDistributionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateDistribution{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateDistribution{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateDistribution(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lightsail",
		OperationName: "CreateDistribution",
	}
}
