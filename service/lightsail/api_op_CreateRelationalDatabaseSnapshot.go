// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lightsail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
)

const opCreateRelationalDatabaseSnapshot = "CreateRelationalDatabaseSnapshot"

// CreateRelationalDatabaseSnapshotRequest returns a request value for making API operation for
// Amazon Lightsail.
//
// Creates a snapshot of your database in Amazon Lightsail. You can use snapshots
// for backups, to make copies of a database, and to save data before deleting
// a database.
//
// The create relational database snapshot operation supports tag-based access
// control via request tags. For more information, see the Lightsail Dev Guide
// (https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags).
//
//    // Example sending a request using CreateRelationalDatabaseSnapshotRequest.
//    req := client.CreateRelationalDatabaseSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lightsail-2016-11-28/CreateRelationalDatabaseSnapshot
func (c *Client) CreateRelationalDatabaseSnapshotRequest(input *types.CreateRelationalDatabaseSnapshotInput) CreateRelationalDatabaseSnapshotRequest {
	op := &aws.Operation{
		Name:       opCreateRelationalDatabaseSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateRelationalDatabaseSnapshotInput{}
	}

	req := c.newRequest(op, input, &types.CreateRelationalDatabaseSnapshotOutput{})
	return CreateRelationalDatabaseSnapshotRequest{Request: req, Input: input, Copy: c.CreateRelationalDatabaseSnapshotRequest}
}

// CreateRelationalDatabaseSnapshotRequest is the request type for the
// CreateRelationalDatabaseSnapshot API operation.
type CreateRelationalDatabaseSnapshotRequest struct {
	*aws.Request
	Input *types.CreateRelationalDatabaseSnapshotInput
	Copy  func(*types.CreateRelationalDatabaseSnapshotInput) CreateRelationalDatabaseSnapshotRequest
}

// Send marshals and sends the CreateRelationalDatabaseSnapshot API request.
func (r CreateRelationalDatabaseSnapshotRequest) Send(ctx context.Context) (*CreateRelationalDatabaseSnapshotResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateRelationalDatabaseSnapshotResponse{
		CreateRelationalDatabaseSnapshotOutput: r.Request.Data.(*types.CreateRelationalDatabaseSnapshotOutput),
		response:                               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateRelationalDatabaseSnapshotResponse is the response type for the
// CreateRelationalDatabaseSnapshot API operation.
type CreateRelationalDatabaseSnapshotResponse struct {
	*types.CreateRelationalDatabaseSnapshotOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateRelationalDatabaseSnapshot request.
func (r *CreateRelationalDatabaseSnapshotResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
