// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lightsail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
)

const opRebootRelationalDatabase = "RebootRelationalDatabase"

// RebootRelationalDatabaseRequest returns a request value for making API operation for
// Amazon Lightsail.
//
// Restarts a specific database in Amazon Lightsail.
//
// The reboot relational database operation supports tag-based access control
// via resource tags applied to the resource identified by relationalDatabaseName.
// For more information, see the Lightsail Dev Guide (https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags).
//
//    // Example sending a request using RebootRelationalDatabaseRequest.
//    req := client.RebootRelationalDatabaseRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lightsail-2016-11-28/RebootRelationalDatabase
func (c *Client) RebootRelationalDatabaseRequest(input *types.RebootRelationalDatabaseInput) RebootRelationalDatabaseRequest {
	op := &aws.Operation{
		Name:       opRebootRelationalDatabase,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RebootRelationalDatabaseInput{}
	}

	req := c.newRequest(op, input, &types.RebootRelationalDatabaseOutput{})
	return RebootRelationalDatabaseRequest{Request: req, Input: input, Copy: c.RebootRelationalDatabaseRequest}
}

// RebootRelationalDatabaseRequest is the request type for the
// RebootRelationalDatabase API operation.
type RebootRelationalDatabaseRequest struct {
	*aws.Request
	Input *types.RebootRelationalDatabaseInput
	Copy  func(*types.RebootRelationalDatabaseInput) RebootRelationalDatabaseRequest
}

// Send marshals and sends the RebootRelationalDatabase API request.
func (r RebootRelationalDatabaseRequest) Send(ctx context.Context) (*RebootRelationalDatabaseResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RebootRelationalDatabaseResponse{
		RebootRelationalDatabaseOutput: r.Request.Data.(*types.RebootRelationalDatabaseOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RebootRelationalDatabaseResponse is the response type for the
// RebootRelationalDatabase API operation.
type RebootRelationalDatabaseResponse struct {
	*types.RebootRelationalDatabaseOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RebootRelationalDatabase request.
func (r *RebootRelationalDatabaseResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
