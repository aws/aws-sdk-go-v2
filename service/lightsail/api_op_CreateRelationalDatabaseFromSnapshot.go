// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lightsail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
)

const opCreateRelationalDatabaseFromSnapshot = "CreateRelationalDatabaseFromSnapshot"

// CreateRelationalDatabaseFromSnapshotRequest returns a request value for making API operation for
// Amazon Lightsail.
//
// Creates a new database from an existing database snapshot in Amazon Lightsail.
//
// You can create a new database from a snapshot in if something goes wrong
// with your original database, or to change it to a different plan, such as
// a high availability or standard plan.
//
// The create relational database from snapshot operation supports tag-based
// access control via request tags and resource tags applied to the resource
// identified by relationalDatabaseSnapshotName. For more information, see the
// Lightsail Dev Guide (https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags).
//
//    // Example sending a request using CreateRelationalDatabaseFromSnapshotRequest.
//    req := client.CreateRelationalDatabaseFromSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lightsail-2016-11-28/CreateRelationalDatabaseFromSnapshot
func (c *Client) CreateRelationalDatabaseFromSnapshotRequest(input *types.CreateRelationalDatabaseFromSnapshotInput) CreateRelationalDatabaseFromSnapshotRequest {
	op := &aws.Operation{
		Name:       opCreateRelationalDatabaseFromSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateRelationalDatabaseFromSnapshotInput{}
	}

	req := c.newRequest(op, input, &types.CreateRelationalDatabaseFromSnapshotOutput{})
	return CreateRelationalDatabaseFromSnapshotRequest{Request: req, Input: input, Copy: c.CreateRelationalDatabaseFromSnapshotRequest}
}

// CreateRelationalDatabaseFromSnapshotRequest is the request type for the
// CreateRelationalDatabaseFromSnapshot API operation.
type CreateRelationalDatabaseFromSnapshotRequest struct {
	*aws.Request
	Input *types.CreateRelationalDatabaseFromSnapshotInput
	Copy  func(*types.CreateRelationalDatabaseFromSnapshotInput) CreateRelationalDatabaseFromSnapshotRequest
}

// Send marshals and sends the CreateRelationalDatabaseFromSnapshot API request.
func (r CreateRelationalDatabaseFromSnapshotRequest) Send(ctx context.Context) (*CreateRelationalDatabaseFromSnapshotResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateRelationalDatabaseFromSnapshotResponse{
		CreateRelationalDatabaseFromSnapshotOutput: r.Request.Data.(*types.CreateRelationalDatabaseFromSnapshotOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateRelationalDatabaseFromSnapshotResponse is the response type for the
// CreateRelationalDatabaseFromSnapshot API operation.
type CreateRelationalDatabaseFromSnapshotResponse struct {
	*types.CreateRelationalDatabaseFromSnapshotOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateRelationalDatabaseFromSnapshot request.
func (r *CreateRelationalDatabaseFromSnapshotResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
