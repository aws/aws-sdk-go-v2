// Code generated by smithy-go-codegen DO NOT EDIT.

package lightsail

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Attaches an SSL/TLS certificate to your Amazon Lightsail content delivery
// network (CDN) distribution.  <p>After the certificate is attached, your
// distribution accepts HTTPS traffic for all of the domains that are associated
// with the certificate.</p> <p>Use the <code>CreateCertificate</code> action to
// create a certificate that you can attach to your distribution.</p> <important>
// <p>Only certificates created in the <code>us-east-1</code> AWS Region can be
// attached to Lightsail distributions. Lightsail distributions are global
// resources that can reference an origin in any AWS Region, and distribute its
// content globally. However, all distributions are located in the
// <code>us-east-1</code> Region.</p> </important>
func (c *Client) AttachCertificateToDistribution(ctx context.Context, params *AttachCertificateToDistributionInput, optFns ...func(*Options)) (*AttachCertificateToDistributionOutput, error) {
	stack := middleware.NewStack("AttachCertificateToDistribution", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpAttachCertificateToDistributionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAttachCertificateToDistributionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAttachCertificateToDistribution(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "AttachCertificateToDistribution",
			Err:           err,
		}
	}
	out := result.(*AttachCertificateToDistributionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AttachCertificateToDistributionInput struct {
	// The name of the certificate to attach to a distribution.  <p>Only certificates
	// with a status of <code>ISSUED</code> can be attached to a distribution.</p>
	// <p>Use the <code>GetCertificates</code> action to get a list of certificate
	// names that you can specify.</p> <note> <p>This is the name of the certificate
	// resource type and is used only to reference the certificate in other API
	// actions. It can be different than the domain name of the certificate. For
	// example, your certificate name might be <code>WordPress-Blog-Certificate</code>
	// and the domain name of the certificate might be <code>example.com</code>.</p>
	// </note>
	CertificateName *string
	// The name of the distribution that the certificate will be attached to.  <p>Use
	// the <code>GetDistributions</code> action to get a list of distribution names
	// that you can specify.</p>
	DistributionName *string
}

type AttachCertificateToDistributionOutput struct {
	// An object that describes the result of the action, such as the status of the
	// request, the timestamp of the request, and the resources affected by the
	// request.
	Operation *types.Operation

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpAttachCertificateToDistributionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpAttachCertificateToDistribution{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpAttachCertificateToDistribution{}, middleware.After)
}

func newServiceMetadataMiddleware_opAttachCertificateToDistribution(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lightsail",
		OperationName: "AttachCertificateToDistribution",
	}
}
