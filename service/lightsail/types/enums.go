// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AccessDirection string

// Enum values for AccessDirection
const (
	AccessDirectionInbound  AccessDirection = "inbound"
	AccessDirectionOutbound AccessDirection = "outbound"
)

// Values returns all known values for AccessDirection. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AccessDirection) Values() []AccessDirection {
	return []AccessDirection{
		"inbound",
		"outbound",
	}
}

type AddOnType string

// Enum values for AddOnType
const (
	AddOnTypeAutosnapshot AddOnType = "AutoSnapshot"
)

// Values returns all known values for AddOnType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (AddOnType) Values() []AddOnType {
	return []AddOnType{
		"AutoSnapshot",
	}
}

type AlarmState string

// Enum values for AlarmState
const (
	AlarmStateOk                AlarmState = "OK"
	AlarmStateAlarm             AlarmState = "ALARM"
	AlarmStateInsufficient_data AlarmState = "INSUFFICIENT_DATA"
)

// Values returns all known values for AlarmState. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (AlarmState) Values() []AlarmState {
	return []AlarmState{
		"OK",
		"ALARM",
		"INSUFFICIENT_DATA",
	}
}

type AutoSnapshotStatus string

// Enum values for AutoSnapshotStatus
const (
	AutoSnapshotStatusSuccess     AutoSnapshotStatus = "Success"
	AutoSnapshotStatusFailed      AutoSnapshotStatus = "Failed"
	AutoSnapshotStatusIn_progress AutoSnapshotStatus = "InProgress"
	AutoSnapshotStatusNot_found   AutoSnapshotStatus = "NotFound"
)

// Values returns all known values for AutoSnapshotStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AutoSnapshotStatus) Values() []AutoSnapshotStatus {
	return []AutoSnapshotStatus{
		"Success",
		"Failed",
		"InProgress",
		"NotFound",
	}
}

type BehaviorEnum string

// Enum values for BehaviorEnum
const (
	BehaviorEnumDontcachesetting BehaviorEnum = "dont-cache"
	BehaviorEnumCachesetting     BehaviorEnum = "cache"
)

// Values returns all known values for BehaviorEnum. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (BehaviorEnum) Values() []BehaviorEnum {
	return []BehaviorEnum{
		"dont-cache",
		"cache",
	}
}

type BlueprintType string

// Enum values for BlueprintType
const (
	BlueprintTypeOs  BlueprintType = "os"
	BlueprintTypeApp BlueprintType = "app"
)

// Values returns all known values for BlueprintType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (BlueprintType) Values() []BlueprintType {
	return []BlueprintType{
		"os",
		"app",
	}
}

type CertificateStatus string

// Enum values for CertificateStatus
const (
	CertificateStatusPendingvalidation  CertificateStatus = "PENDING_VALIDATION"
	CertificateStatusIssued             CertificateStatus = "ISSUED"
	CertificateStatusInactive           CertificateStatus = "INACTIVE"
	CertificateStatusExpired            CertificateStatus = "EXPIRED"
	CertificateStatusValidationtimedout CertificateStatus = "VALIDATION_TIMED_OUT"
	CertificateStatusRevoked            CertificateStatus = "REVOKED"
	CertificateStatusFailed             CertificateStatus = "FAILED"
)

// Values returns all known values for CertificateStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CertificateStatus) Values() []CertificateStatus {
	return []CertificateStatus{
		"PENDING_VALIDATION",
		"ISSUED",
		"INACTIVE",
		"EXPIRED",
		"VALIDATION_TIMED_OUT",
		"REVOKED",
		"FAILED",
	}
}

type CloudFormationStackRecordSourceType string

// Enum values for CloudFormationStackRecordSourceType
const (
	CloudFormationStackRecordSourceTypeExportsnapshotrecord CloudFormationStackRecordSourceType = "ExportSnapshotRecord"
)

// Values returns all known values for CloudFormationStackRecordSourceType. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (CloudFormationStackRecordSourceType) Values() []CloudFormationStackRecordSourceType {
	return []CloudFormationStackRecordSourceType{
		"ExportSnapshotRecord",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorGreaterthanorequaltothreshold ComparisonOperator = "GreaterThanOrEqualToThreshold"
	ComparisonOperatorGreaterthanthreshold          ComparisonOperator = "GreaterThanThreshold"
	ComparisonOperatorLessthanthreshold             ComparisonOperator = "LessThanThreshold"
	ComparisonOperatorLessthanorequaltothreshold    ComparisonOperator = "LessThanOrEqualToThreshold"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"GreaterThanOrEqualToThreshold",
		"GreaterThanThreshold",
		"LessThanThreshold",
		"LessThanOrEqualToThreshold",
	}
}

type ContactMethodStatus string

// Enum values for ContactMethodStatus
const (
	ContactMethodStatusPendingverification ContactMethodStatus = "PendingVerification"
	ContactMethodStatusValid               ContactMethodStatus = "Valid"
	ContactMethodStatusInvalid             ContactMethodStatus = "Invalid"
)

// Values returns all known values for ContactMethodStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ContactMethodStatus) Values() []ContactMethodStatus {
	return []ContactMethodStatus{
		"PendingVerification",
		"Valid",
		"Invalid",
	}
}

type ContactMethodVerificationProtocol string

// Enum values for ContactMethodVerificationProtocol
const (
	ContactMethodVerificationProtocolEmail ContactMethodVerificationProtocol = "Email"
)

// Values returns all known values for ContactMethodVerificationProtocol. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (ContactMethodVerificationProtocol) Values() []ContactMethodVerificationProtocol {
	return []ContactMethodVerificationProtocol{
		"Email",
	}
}

type ContactProtocol string

// Enum values for ContactProtocol
const (
	ContactProtocolEmail ContactProtocol = "Email"
	ContactProtocolSms   ContactProtocol = "SMS"
)

// Values returns all known values for ContactProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ContactProtocol) Values() []ContactProtocol {
	return []ContactProtocol{
		"Email",
		"SMS",
	}
}

type DiskSnapshotState string

// Enum values for DiskSnapshotState
const (
	DiskSnapshotStatePending   DiskSnapshotState = "pending"
	DiskSnapshotStateCompleted DiskSnapshotState = "completed"
	DiskSnapshotStateError     DiskSnapshotState = "error"
	DiskSnapshotStateUnknown   DiskSnapshotState = "unknown"
)

// Values returns all known values for DiskSnapshotState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DiskSnapshotState) Values() []DiskSnapshotState {
	return []DiskSnapshotState{
		"pending",
		"completed",
		"error",
		"unknown",
	}
}

type DiskState string

// Enum values for DiskState
const (
	DiskStatePending   DiskState = "pending"
	DiskStateError     DiskState = "error"
	DiskStateAvailable DiskState = "available"
	DiskStateInuse     DiskState = "in-use"
	DiskStateUnknown   DiskState = "unknown"
)

// Values returns all known values for DiskState. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (DiskState) Values() []DiskState {
	return []DiskState{
		"pending",
		"error",
		"available",
		"in-use",
		"unknown",
	}
}

type DistributionMetricName string

// Enum values for DistributionMetricName
const (
	DistributionMetricNameRequests         DistributionMetricName = "Requests"
	DistributionMetricNameBytesdownloaded  DistributionMetricName = "BytesDownloaded"
	DistributionMetricNameBytesuploaded    DistributionMetricName = "BytesUploaded"
	DistributionMetricNameTotalerrorrate   DistributionMetricName = "TotalErrorRate"
	DistributionMetricNameHttp4xxerrorrate DistributionMetricName = "Http4xxErrorRate"
	DistributionMetricNameHttp5xxerrorrate DistributionMetricName = "Http5xxErrorRate"
)

// Values returns all known values for DistributionMetricName. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DistributionMetricName) Values() []DistributionMetricName {
	return []DistributionMetricName{
		"Requests",
		"BytesDownloaded",
		"BytesUploaded",
		"TotalErrorRate",
		"Http4xxErrorRate",
		"Http5xxErrorRate",
	}
}

type ExportSnapshotRecordSourceType string

// Enum values for ExportSnapshotRecordSourceType
const (
	ExportSnapshotRecordSourceTypeInstancesnapshot ExportSnapshotRecordSourceType = "InstanceSnapshot"
	ExportSnapshotRecordSourceTypeDisksnapshot     ExportSnapshotRecordSourceType = "DiskSnapshot"
)

// Values returns all known values for ExportSnapshotRecordSourceType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (ExportSnapshotRecordSourceType) Values() []ExportSnapshotRecordSourceType {
	return []ExportSnapshotRecordSourceType{
		"InstanceSnapshot",
		"DiskSnapshot",
	}
}

type ForwardValues string

// Enum values for ForwardValues
const (
	ForwardValuesNone      ForwardValues = "none"
	ForwardValuesAllowlist ForwardValues = "allow-list"
	ForwardValuesAll       ForwardValues = "all"
)

// Values returns all known values for ForwardValues. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ForwardValues) Values() []ForwardValues {
	return []ForwardValues{
		"none",
		"allow-list",
		"all",
	}
}

type HeaderEnum string

// Enum values for HeaderEnum
const (
	HeaderEnumAccept                    HeaderEnum = "Accept"
	HeaderEnumAcceptcharset             HeaderEnum = "Accept-Charset"
	HeaderEnumAcceptdatetime            HeaderEnum = "Accept-Datetime"
	HeaderEnumAcceptencoding            HeaderEnum = "Accept-Encoding"
	HeaderEnumAcceptlanguage            HeaderEnum = "Accept-Language"
	HeaderEnumAuthorization             HeaderEnum = "Authorization"
	HeaderEnumCloudfrontforwardedproto  HeaderEnum = "CloudFront-Forwarded-Proto"
	HeaderEnumCloudfrontisdesktopviewer HeaderEnum = "CloudFront-Is-Desktop-Viewer"
	HeaderEnumCloudfrontismobileviewer  HeaderEnum = "CloudFront-Is-Mobile-Viewer"
	HeaderEnumCloudfrontissmarttvviewer HeaderEnum = "CloudFront-Is-SmartTV-Viewer"
	HeaderEnumCloudfrontistabletviewer  HeaderEnum = "CloudFront-Is-Tablet-Viewer"
	HeaderEnumCloudfrontviewercountry   HeaderEnum = "CloudFront-Viewer-Country"
	HeaderEnumHost                      HeaderEnum = "Host"
	HeaderEnumOrigin                    HeaderEnum = "Origin"
	HeaderEnumReferer                   HeaderEnum = "Referer"
)

// Values returns all known values for HeaderEnum. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (HeaderEnum) Values() []HeaderEnum {
	return []HeaderEnum{
		"Accept",
		"Accept-Charset",
		"Accept-Datetime",
		"Accept-Encoding",
		"Accept-Language",
		"Authorization",
		"CloudFront-Forwarded-Proto",
		"CloudFront-Is-Desktop-Viewer",
		"CloudFront-Is-Mobile-Viewer",
		"CloudFront-Is-SmartTV-Viewer",
		"CloudFront-Is-Tablet-Viewer",
		"CloudFront-Viewer-Country",
		"Host",
		"Origin",
		"Referer",
	}
}

type InstanceAccessProtocol string

// Enum values for InstanceAccessProtocol
const (
	InstanceAccessProtocolSsh InstanceAccessProtocol = "ssh"
	InstanceAccessProtocolRdp InstanceAccessProtocol = "rdp"
)

// Values returns all known values for InstanceAccessProtocol. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceAccessProtocol) Values() []InstanceAccessProtocol {
	return []InstanceAccessProtocol{
		"ssh",
		"rdp",
	}
}

type InstanceHealthReason string

// Enum values for InstanceHealthReason
const (
	InstanceHealthReasonLbregistrationinprogress         InstanceHealthReason = "Lb.RegistrationInProgress"
	InstanceHealthReasonLbinitialhealthchecking          InstanceHealthReason = "Lb.InitialHealthChecking"
	InstanceHealthReasonLbinternalerror                  InstanceHealthReason = "Lb.InternalError"
	InstanceHealthReasonInstanceresponsecodemismatch     InstanceHealthReason = "Instance.ResponseCodeMismatch"
	InstanceHealthReasonInstancetimeout                  InstanceHealthReason = "Instance.Timeout"
	InstanceHealthReasonInstancefailedhealthchecks       InstanceHealthReason = "Instance.FailedHealthChecks"
	InstanceHealthReasonInstancenotregistered            InstanceHealthReason = "Instance.NotRegistered"
	InstanceHealthReasonInstancenotinuse                 InstanceHealthReason = "Instance.NotInUse"
	InstanceHealthReasonInstancederegistrationinprogress InstanceHealthReason = "Instance.DeregistrationInProgress"
	InstanceHealthReasonInstanceinvalidstate             InstanceHealthReason = "Instance.InvalidState"
	InstanceHealthReasonInstanceipunusable               InstanceHealthReason = "Instance.IpUnusable"
)

// Values returns all known values for InstanceHealthReason. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceHealthReason) Values() []InstanceHealthReason {
	return []InstanceHealthReason{
		"Lb.RegistrationInProgress",
		"Lb.InitialHealthChecking",
		"Lb.InternalError",
		"Instance.ResponseCodeMismatch",
		"Instance.Timeout",
		"Instance.FailedHealthChecks",
		"Instance.NotRegistered",
		"Instance.NotInUse",
		"Instance.DeregistrationInProgress",
		"Instance.InvalidState",
		"Instance.IpUnusable",
	}
}

type InstanceHealthState string

// Enum values for InstanceHealthState
const (
	InstanceHealthStateInitial     InstanceHealthState = "initial"
	InstanceHealthStateHealthy     InstanceHealthState = "healthy"
	InstanceHealthStateUnhealthy   InstanceHealthState = "unhealthy"
	InstanceHealthStateUnused      InstanceHealthState = "unused"
	InstanceHealthStateDraining    InstanceHealthState = "draining"
	InstanceHealthStateUnavailable InstanceHealthState = "unavailable"
)

// Values returns all known values for InstanceHealthState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceHealthState) Values() []InstanceHealthState {
	return []InstanceHealthState{
		"initial",
		"healthy",
		"unhealthy",
		"unused",
		"draining",
		"unavailable",
	}
}

type InstanceMetricName string

// Enum values for InstanceMetricName
const (
	InstanceMetricNameCpuutilization             InstanceMetricName = "CPUUtilization"
	InstanceMetricNameNetworkin                  InstanceMetricName = "NetworkIn"
	InstanceMetricNameNetworkout                 InstanceMetricName = "NetworkOut"
	InstanceMetricNameStatuscheckfailed          InstanceMetricName = "StatusCheckFailed"
	InstanceMetricNameStatuscheckfailed_instance InstanceMetricName = "StatusCheckFailed_Instance"
	InstanceMetricNameStatuscheckfailed_system   InstanceMetricName = "StatusCheckFailed_System"
	InstanceMetricNameBurstcapacitytime          InstanceMetricName = "BurstCapacityTime"
	InstanceMetricNameBurstcapacitypercentage    InstanceMetricName = "BurstCapacityPercentage"
)

// Values returns all known values for InstanceMetricName. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceMetricName) Values() []InstanceMetricName {
	return []InstanceMetricName{
		"CPUUtilization",
		"NetworkIn",
		"NetworkOut",
		"StatusCheckFailed",
		"StatusCheckFailed_Instance",
		"StatusCheckFailed_System",
		"BurstCapacityTime",
		"BurstCapacityPercentage",
	}
}

type InstancePlatform string

// Enum values for InstancePlatform
const (
	InstancePlatformLinuxunix InstancePlatform = "LINUX_UNIX"
	InstancePlatformWindows   InstancePlatform = "WINDOWS"
)

// Values returns all known values for InstancePlatform. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstancePlatform) Values() []InstancePlatform {
	return []InstancePlatform{
		"LINUX_UNIX",
		"WINDOWS",
	}
}

type InstanceSnapshotState string

// Enum values for InstanceSnapshotState
const (
	InstanceSnapshotStatePending   InstanceSnapshotState = "pending"
	InstanceSnapshotStateError     InstanceSnapshotState = "error"
	InstanceSnapshotStateAvailable InstanceSnapshotState = "available"
)

// Values returns all known values for InstanceSnapshotState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceSnapshotState) Values() []InstanceSnapshotState {
	return []InstanceSnapshotState{
		"pending",
		"error",
		"available",
	}
}

type LoadBalancerAttributeName string

// Enum values for LoadBalancerAttributeName
const (
	LoadBalancerAttributeNameHealthcheckpath                            LoadBalancerAttributeName = "HealthCheckPath"
	LoadBalancerAttributeNameSessionstickinessenabled                   LoadBalancerAttributeName = "SessionStickinessEnabled"
	LoadBalancerAttributeNameSessionstickiness_lb_cookiedurationseconds LoadBalancerAttributeName = "SessionStickiness_LB_CookieDurationSeconds"
)

// Values returns all known values for LoadBalancerAttributeName. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (LoadBalancerAttributeName) Values() []LoadBalancerAttributeName {
	return []LoadBalancerAttributeName{
		"HealthCheckPath",
		"SessionStickinessEnabled",
		"SessionStickiness_LB_CookieDurationSeconds",
	}
}

type LoadBalancerMetricName string

// Enum values for LoadBalancerMetricName
const (
	LoadBalancerMetricNameClienttlsnegotiationerrorcount LoadBalancerMetricName = "ClientTLSNegotiationErrorCount"
	LoadBalancerMetricNameHealthyhostcount               LoadBalancerMetricName = "HealthyHostCount"
	LoadBalancerMetricNameUnhealthyhostcount             LoadBalancerMetricName = "UnhealthyHostCount"
	LoadBalancerMetricNameHttpcode_lb_4xx_count          LoadBalancerMetricName = "HTTPCode_LB_4XX_Count"
	LoadBalancerMetricNameHttpcode_lb_5xx_count          LoadBalancerMetricName = "HTTPCode_LB_5XX_Count"
	LoadBalancerMetricNameHttpcode_instance_2xx_count    LoadBalancerMetricName = "HTTPCode_Instance_2XX_Count"
	LoadBalancerMetricNameHttpcode_instance_3xx_count    LoadBalancerMetricName = "HTTPCode_Instance_3XX_Count"
	LoadBalancerMetricNameHttpcode_instance_4xx_count    LoadBalancerMetricName = "HTTPCode_Instance_4XX_Count"
	LoadBalancerMetricNameHttpcode_instance_5xx_count    LoadBalancerMetricName = "HTTPCode_Instance_5XX_Count"
	LoadBalancerMetricNameInstanceresponsetime           LoadBalancerMetricName = "InstanceResponseTime"
	LoadBalancerMetricNameRejectedconnectioncount        LoadBalancerMetricName = "RejectedConnectionCount"
	LoadBalancerMetricNameRequestcount                   LoadBalancerMetricName = "RequestCount"
)

// Values returns all known values for LoadBalancerMetricName. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LoadBalancerMetricName) Values() []LoadBalancerMetricName {
	return []LoadBalancerMetricName{
		"ClientTLSNegotiationErrorCount",
		"HealthyHostCount",
		"UnhealthyHostCount",
		"HTTPCode_LB_4XX_Count",
		"HTTPCode_LB_5XX_Count",
		"HTTPCode_Instance_2XX_Count",
		"HTTPCode_Instance_3XX_Count",
		"HTTPCode_Instance_4XX_Count",
		"HTTPCode_Instance_5XX_Count",
		"InstanceResponseTime",
		"RejectedConnectionCount",
		"RequestCount",
	}
}

type LoadBalancerProtocol string

// Enum values for LoadBalancerProtocol
const (
	LoadBalancerProtocolHttp_https LoadBalancerProtocol = "HTTP_HTTPS"
	LoadBalancerProtocolHttp       LoadBalancerProtocol = "HTTP"
)

// Values returns all known values for LoadBalancerProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LoadBalancerProtocol) Values() []LoadBalancerProtocol {
	return []LoadBalancerProtocol{
		"HTTP_HTTPS",
		"HTTP",
	}
}

type LoadBalancerState string

// Enum values for LoadBalancerState
const (
	LoadBalancerStateActive         LoadBalancerState = "active"
	LoadBalancerStateProvisioning   LoadBalancerState = "provisioning"
	LoadBalancerStateActiveimpaired LoadBalancerState = "active_impaired"
	LoadBalancerStateFailed         LoadBalancerState = "failed"
	LoadBalancerStateUnknown        LoadBalancerState = "unknown"
)

// Values returns all known values for LoadBalancerState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LoadBalancerState) Values() []LoadBalancerState {
	return []LoadBalancerState{
		"active",
		"provisioning",
		"active_impaired",
		"failed",
		"unknown",
	}
}

type LoadBalancerTlsCertificateDomainStatus string

// Enum values for LoadBalancerTlsCertificateDomainStatus
const (
	LoadBalancerTlsCertificateDomainStatusPendingvalidation LoadBalancerTlsCertificateDomainStatus = "PENDING_VALIDATION"
	LoadBalancerTlsCertificateDomainStatusFailed            LoadBalancerTlsCertificateDomainStatus = "FAILED"
	LoadBalancerTlsCertificateDomainStatusSuccess           LoadBalancerTlsCertificateDomainStatus = "SUCCESS"
)

// Values returns all known values for LoadBalancerTlsCertificateDomainStatus. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (LoadBalancerTlsCertificateDomainStatus) Values() []LoadBalancerTlsCertificateDomainStatus {
	return []LoadBalancerTlsCertificateDomainStatus{
		"PENDING_VALIDATION",
		"FAILED",
		"SUCCESS",
	}
}

type LoadBalancerTlsCertificateFailureReason string

// Enum values for LoadBalancerTlsCertificateFailureReason
const (
	LoadBalancerTlsCertificateFailureReasonNoavailablecontacts            LoadBalancerTlsCertificateFailureReason = "NO_AVAILABLE_CONTACTS"
	LoadBalancerTlsCertificateFailureReasonAdditionalverificationrequired LoadBalancerTlsCertificateFailureReason = "ADDITIONAL_VERIFICATION_REQUIRED"
	LoadBalancerTlsCertificateFailureReasonDomainnotallowed               LoadBalancerTlsCertificateFailureReason = "DOMAIN_NOT_ALLOWED"
	LoadBalancerTlsCertificateFailureReasonInvalidpublicdomain            LoadBalancerTlsCertificateFailureReason = "INVALID_PUBLIC_DOMAIN"
	LoadBalancerTlsCertificateFailureReasonOther                          LoadBalancerTlsCertificateFailureReason = "OTHER"
)

// Values returns all known values for LoadBalancerTlsCertificateFailureReason.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (LoadBalancerTlsCertificateFailureReason) Values() []LoadBalancerTlsCertificateFailureReason {
	return []LoadBalancerTlsCertificateFailureReason{
		"NO_AVAILABLE_CONTACTS",
		"ADDITIONAL_VERIFICATION_REQUIRED",
		"DOMAIN_NOT_ALLOWED",
		"INVALID_PUBLIC_DOMAIN",
		"OTHER",
	}
}

type LoadBalancerTlsCertificateRenewalStatus string

// Enum values for LoadBalancerTlsCertificateRenewalStatus
const (
	LoadBalancerTlsCertificateRenewalStatusPendingautorenewal LoadBalancerTlsCertificateRenewalStatus = "PENDING_AUTO_RENEWAL"
	LoadBalancerTlsCertificateRenewalStatusPendingvalidation  LoadBalancerTlsCertificateRenewalStatus = "PENDING_VALIDATION"
	LoadBalancerTlsCertificateRenewalStatusSuccess            LoadBalancerTlsCertificateRenewalStatus = "SUCCESS"
	LoadBalancerTlsCertificateRenewalStatusFailed             LoadBalancerTlsCertificateRenewalStatus = "FAILED"
)

// Values returns all known values for LoadBalancerTlsCertificateRenewalStatus.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (LoadBalancerTlsCertificateRenewalStatus) Values() []LoadBalancerTlsCertificateRenewalStatus {
	return []LoadBalancerTlsCertificateRenewalStatus{
		"PENDING_AUTO_RENEWAL",
		"PENDING_VALIDATION",
		"SUCCESS",
		"FAILED",
	}
}

type LoadBalancerTlsCertificateRevocationReason string

// Enum values for LoadBalancerTlsCertificateRevocationReason
const (
	LoadBalancerTlsCertificateRevocationReasonUnspecified          LoadBalancerTlsCertificateRevocationReason = "UNSPECIFIED"
	LoadBalancerTlsCertificateRevocationReasonKeycompromise        LoadBalancerTlsCertificateRevocationReason = "KEY_COMPROMISE"
	LoadBalancerTlsCertificateRevocationReasonCacompromise         LoadBalancerTlsCertificateRevocationReason = "CA_COMPROMISE"
	LoadBalancerTlsCertificateRevocationReasonAffiliationchanged   LoadBalancerTlsCertificateRevocationReason = "AFFILIATION_CHANGED"
	LoadBalancerTlsCertificateRevocationReasonSuperceded           LoadBalancerTlsCertificateRevocationReason = "SUPERCEDED"
	LoadBalancerTlsCertificateRevocationReasonCessationofoperation LoadBalancerTlsCertificateRevocationReason = "CESSATION_OF_OPERATION"
	LoadBalancerTlsCertificateRevocationReasonCertificatehold      LoadBalancerTlsCertificateRevocationReason = "CERTIFICATE_HOLD"
	LoadBalancerTlsCertificateRevocationReasonRemovefromcrl        LoadBalancerTlsCertificateRevocationReason = "REMOVE_FROM_CRL"
	LoadBalancerTlsCertificateRevocationReasonPrivilegewithdrawn   LoadBalancerTlsCertificateRevocationReason = "PRIVILEGE_WITHDRAWN"
	LoadBalancerTlsCertificateRevocationReasonAacompromise         LoadBalancerTlsCertificateRevocationReason = "A_A_COMPROMISE"
)

// Values returns all known values for LoadBalancerTlsCertificateRevocationReason.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (LoadBalancerTlsCertificateRevocationReason) Values() []LoadBalancerTlsCertificateRevocationReason {
	return []LoadBalancerTlsCertificateRevocationReason{
		"UNSPECIFIED",
		"KEY_COMPROMISE",
		"CA_COMPROMISE",
		"AFFILIATION_CHANGED",
		"SUPERCEDED",
		"CESSATION_OF_OPERATION",
		"CERTIFICATE_HOLD",
		"REMOVE_FROM_CRL",
		"PRIVILEGE_WITHDRAWN",
		"A_A_COMPROMISE",
	}
}

type LoadBalancerTlsCertificateStatus string

// Enum values for LoadBalancerTlsCertificateStatus
const (
	LoadBalancerTlsCertificateStatusPendingvalidation  LoadBalancerTlsCertificateStatus = "PENDING_VALIDATION"
	LoadBalancerTlsCertificateStatusIssued             LoadBalancerTlsCertificateStatus = "ISSUED"
	LoadBalancerTlsCertificateStatusInactive           LoadBalancerTlsCertificateStatus = "INACTIVE"
	LoadBalancerTlsCertificateStatusExpired            LoadBalancerTlsCertificateStatus = "EXPIRED"
	LoadBalancerTlsCertificateStatusValidationtimedout LoadBalancerTlsCertificateStatus = "VALIDATION_TIMED_OUT"
	LoadBalancerTlsCertificateStatusRevoked            LoadBalancerTlsCertificateStatus = "REVOKED"
	LoadBalancerTlsCertificateStatusFailed             LoadBalancerTlsCertificateStatus = "FAILED"
	LoadBalancerTlsCertificateStatusUnknown            LoadBalancerTlsCertificateStatus = "UNKNOWN"
)

// Values returns all known values for LoadBalancerTlsCertificateStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (LoadBalancerTlsCertificateStatus) Values() []LoadBalancerTlsCertificateStatus {
	return []LoadBalancerTlsCertificateStatus{
		"PENDING_VALIDATION",
		"ISSUED",
		"INACTIVE",
		"EXPIRED",
		"VALIDATION_TIMED_OUT",
		"REVOKED",
		"FAILED",
		"UNKNOWN",
	}
}

type MetricName string

// Enum values for MetricName
const (
	MetricNameCpuutilization                 MetricName = "CPUUtilization"
	MetricNameNetworkin                      MetricName = "NetworkIn"
	MetricNameNetworkout                     MetricName = "NetworkOut"
	MetricNameStatuscheckfailed              MetricName = "StatusCheckFailed"
	MetricNameStatuscheckfailed_instance     MetricName = "StatusCheckFailed_Instance"
	MetricNameStatuscheckfailed_system       MetricName = "StatusCheckFailed_System"
	MetricNameClienttlsnegotiationerrorcount MetricName = "ClientTLSNegotiationErrorCount"
	MetricNameHealthyhostcount               MetricName = "HealthyHostCount"
	MetricNameUnhealthyhostcount             MetricName = "UnhealthyHostCount"
	MetricNameHttpcode_lb_4xx_count          MetricName = "HTTPCode_LB_4XX_Count"
	MetricNameHttpcode_lb_5xx_count          MetricName = "HTTPCode_LB_5XX_Count"
	MetricNameHttpcode_instance_2xx_count    MetricName = "HTTPCode_Instance_2XX_Count"
	MetricNameHttpcode_instance_3xx_count    MetricName = "HTTPCode_Instance_3XX_Count"
	MetricNameHttpcode_instance_4xx_count    MetricName = "HTTPCode_Instance_4XX_Count"
	MetricNameHttpcode_instance_5xx_count    MetricName = "HTTPCode_Instance_5XX_Count"
	MetricNameInstanceresponsetime           MetricName = "InstanceResponseTime"
	MetricNameRejectedconnectioncount        MetricName = "RejectedConnectionCount"
	MetricNameRequestcount                   MetricName = "RequestCount"
	MetricNameDatabaseconnections            MetricName = "DatabaseConnections"
	MetricNameDiskqueuedepth                 MetricName = "DiskQueueDepth"
	MetricNameFreestoragespace               MetricName = "FreeStorageSpace"
	MetricNameNetworkreceivethroughput       MetricName = "NetworkReceiveThroughput"
	MetricNameNetworktransmitthroughput      MetricName = "NetworkTransmitThroughput"
	MetricNameBurstcapacitytime              MetricName = "BurstCapacityTime"
	MetricNameBurstcapacitypercentage        MetricName = "BurstCapacityPercentage"
)

// Values returns all known values for MetricName. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (MetricName) Values() []MetricName {
	return []MetricName{
		"CPUUtilization",
		"NetworkIn",
		"NetworkOut",
		"StatusCheckFailed",
		"StatusCheckFailed_Instance",
		"StatusCheckFailed_System",
		"ClientTLSNegotiationErrorCount",
		"HealthyHostCount",
		"UnhealthyHostCount",
		"HTTPCode_LB_4XX_Count",
		"HTTPCode_LB_5XX_Count",
		"HTTPCode_Instance_2XX_Count",
		"HTTPCode_Instance_3XX_Count",
		"HTTPCode_Instance_4XX_Count",
		"HTTPCode_Instance_5XX_Count",
		"InstanceResponseTime",
		"RejectedConnectionCount",
		"RequestCount",
		"DatabaseConnections",
		"DiskQueueDepth",
		"FreeStorageSpace",
		"NetworkReceiveThroughput",
		"NetworkTransmitThroughput",
		"BurstCapacityTime",
		"BurstCapacityPercentage",
	}
}

type MetricStatistic string

// Enum values for MetricStatistic
const (
	MetricStatisticMinimum     MetricStatistic = "Minimum"
	MetricStatisticMaximum     MetricStatistic = "Maximum"
	MetricStatisticSum         MetricStatistic = "Sum"
	MetricStatisticAverage     MetricStatistic = "Average"
	MetricStatisticSamplecount MetricStatistic = "SampleCount"
)

// Values returns all known values for MetricStatistic. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (MetricStatistic) Values() []MetricStatistic {
	return []MetricStatistic{
		"Minimum",
		"Maximum",
		"Sum",
		"Average",
		"SampleCount",
	}
}

type MetricUnit string

// Enum values for MetricUnit
const (
	MetricUnitSeconds         MetricUnit = "Seconds"
	MetricUnitMicroseconds    MetricUnit = "Microseconds"
	MetricUnitMilliseconds    MetricUnit = "Milliseconds"
	MetricUnitBytes           MetricUnit = "Bytes"
	MetricUnitKilobytes       MetricUnit = "Kilobytes"
	MetricUnitMegabytes       MetricUnit = "Megabytes"
	MetricUnitGigabytes       MetricUnit = "Gigabytes"
	MetricUnitTerabytes       MetricUnit = "Terabytes"
	MetricUnitBits            MetricUnit = "Bits"
	MetricUnitKilobits        MetricUnit = "Kilobits"
	MetricUnitMegabits        MetricUnit = "Megabits"
	MetricUnitGigabits        MetricUnit = "Gigabits"
	MetricUnitTerabits        MetricUnit = "Terabits"
	MetricUnitPercent         MetricUnit = "Percent"
	MetricUnitCount           MetricUnit = "Count"
	MetricUnitBytessecond     MetricUnit = "Bytes/Second"
	MetricUnitKilobytessecond MetricUnit = "Kilobytes/Second"
	MetricUnitMegabytessecond MetricUnit = "Megabytes/Second"
	MetricUnitGigabytessecond MetricUnit = "Gigabytes/Second"
	MetricUnitTerabytessecond MetricUnit = "Terabytes/Second"
	MetricUnitBitssecond      MetricUnit = "Bits/Second"
	MetricUnitKilobitssecond  MetricUnit = "Kilobits/Second"
	MetricUnitMegabitssecond  MetricUnit = "Megabits/Second"
	MetricUnitGigabitssecond  MetricUnit = "Gigabits/Second"
	MetricUnitTerabitssecond  MetricUnit = "Terabits/Second"
	MetricUnitCountsecond     MetricUnit = "Count/Second"
	MetricUnitNone            MetricUnit = "None"
)

// Values returns all known values for MetricUnit. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (MetricUnit) Values() []MetricUnit {
	return []MetricUnit{
		"Seconds",
		"Microseconds",
		"Milliseconds",
		"Bytes",
		"Kilobytes",
		"Megabytes",
		"Gigabytes",
		"Terabytes",
		"Bits",
		"Kilobits",
		"Megabits",
		"Gigabits",
		"Terabits",
		"Percent",
		"Count",
		"Bytes/Second",
		"Kilobytes/Second",
		"Megabytes/Second",
		"Gigabytes/Second",
		"Terabytes/Second",
		"Bits/Second",
		"Kilobits/Second",
		"Megabits/Second",
		"Gigabits/Second",
		"Terabits/Second",
		"Count/Second",
		"None",
	}
}

type NetworkProtocol string

// Enum values for NetworkProtocol
const (
	NetworkProtocolTcp  NetworkProtocol = "tcp"
	NetworkProtocolAll  NetworkProtocol = "all"
	NetworkProtocolUdp  NetworkProtocol = "udp"
	NetworkProtocolIcmp NetworkProtocol = "icmp"
)

// Values returns all known values for NetworkProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NetworkProtocol) Values() []NetworkProtocol {
	return []NetworkProtocol{
		"tcp",
		"all",
		"udp",
		"icmp",
	}
}

type OperationStatus string

// Enum values for OperationStatus
const (
	OperationStatusNotstarted OperationStatus = "NotStarted"
	OperationStatusStarted    OperationStatus = "Started"
	OperationStatusFailed     OperationStatus = "Failed"
	OperationStatusCompleted  OperationStatus = "Completed"
	OperationStatusSucceeded  OperationStatus = "Succeeded"
)

// Values returns all known values for OperationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OperationStatus) Values() []OperationStatus {
	return []OperationStatus{
		"NotStarted",
		"Started",
		"Failed",
		"Completed",
		"Succeeded",
	}
}

type OperationType string

// Enum values for OperationType
const (
	OperationTypeDeleteknownhostkeys                  OperationType = "DeleteKnownHostKeys"
	OperationTypeDeleteinstance                       OperationType = "DeleteInstance"
	OperationTypeCreateinstance                       OperationType = "CreateInstance"
	OperationTypeStopinstance                         OperationType = "StopInstance"
	OperationTypeStartinstance                        OperationType = "StartInstance"
	OperationTypeRebootinstance                       OperationType = "RebootInstance"
	OperationTypeOpeninstancepublicports              OperationType = "OpenInstancePublicPorts"
	OperationTypePutinstancepublicports               OperationType = "PutInstancePublicPorts"
	OperationTypeCloseinstancepublicports             OperationType = "CloseInstancePublicPorts"
	OperationTypeAllocatestaticip                     OperationType = "AllocateStaticIp"
	OperationTypeReleasestaticip                      OperationType = "ReleaseStaticIp"
	OperationTypeAttachstaticip                       OperationType = "AttachStaticIp"
	OperationTypeDetachstaticip                       OperationType = "DetachStaticIp"
	OperationTypeUpdatedomainentry                    OperationType = "UpdateDomainEntry"
	OperationTypeDeletedomainentry                    OperationType = "DeleteDomainEntry"
	OperationTypeCreatedomain                         OperationType = "CreateDomain"
	OperationTypeDeletedomain                         OperationType = "DeleteDomain"
	OperationTypeCreateinstancesnapshot               OperationType = "CreateInstanceSnapshot"
	OperationTypeDeleteinstancesnapshot               OperationType = "DeleteInstanceSnapshot"
	OperationTypeCreateinstancesfromsnapshot          OperationType = "CreateInstancesFromSnapshot"
	OperationTypeCreateloadbalancer                   OperationType = "CreateLoadBalancer"
	OperationTypeDeleteloadbalancer                   OperationType = "DeleteLoadBalancer"
	OperationTypeAttachinstancestoloadbalancer        OperationType = "AttachInstancesToLoadBalancer"
	OperationTypeDetachinstancesfromloadbalancer      OperationType = "DetachInstancesFromLoadBalancer"
	OperationTypeUpdateloadbalancerattribute          OperationType = "UpdateLoadBalancerAttribute"
	OperationTypeCreateloadbalancertlscertificate     OperationType = "CreateLoadBalancerTlsCertificate"
	OperationTypeDeleteloadbalancertlscertificate     OperationType = "DeleteLoadBalancerTlsCertificate"
	OperationTypeAttachloadbalancertlscertificate     OperationType = "AttachLoadBalancerTlsCertificate"
	OperationTypeCreatedisk                           OperationType = "CreateDisk"
	OperationTypeDeletedisk                           OperationType = "DeleteDisk"
	OperationTypeAttachdisk                           OperationType = "AttachDisk"
	OperationTypeDetachdisk                           OperationType = "DetachDisk"
	OperationTypeCreatedisksnapshot                   OperationType = "CreateDiskSnapshot"
	OperationTypeDeletedisksnapshot                   OperationType = "DeleteDiskSnapshot"
	OperationTypeCreatediskfromsnapshot               OperationType = "CreateDiskFromSnapshot"
	OperationTypeCreaterelationaldatabase             OperationType = "CreateRelationalDatabase"
	OperationTypeUpdaterelationaldatabase             OperationType = "UpdateRelationalDatabase"
	OperationTypeDeleterelationaldatabase             OperationType = "DeleteRelationalDatabase"
	OperationTypeCreaterelationaldatabasefromsnapshot OperationType = "CreateRelationalDatabaseFromSnapshot"
	OperationTypeCreaterelationaldatabasesnapshot     OperationType = "CreateRelationalDatabaseSnapshot"
	OperationTypeDeleterelationaldatabasesnapshot     OperationType = "DeleteRelationalDatabaseSnapshot"
	OperationTypeUpdaterelationaldatabaseparameters   OperationType = "UpdateRelationalDatabaseParameters"
	OperationTypeStartrelationaldatabase              OperationType = "StartRelationalDatabase"
	OperationTypeRebootrelationaldatabase             OperationType = "RebootRelationalDatabase"
	OperationTypeStoprelationaldatabase               OperationType = "StopRelationalDatabase"
	OperationTypeEnableaddon                          OperationType = "EnableAddOn"
	OperationTypeDisableaddon                         OperationType = "DisableAddOn"
	OperationTypePutalarm                             OperationType = "PutAlarm"
	OperationTypeGetalarms                            OperationType = "GetAlarms"
	OperationTypeDeletealarm                          OperationType = "DeleteAlarm"
	OperationTypeTestalarm                            OperationType = "TestAlarm"
	OperationTypeCreatecontactmethod                  OperationType = "CreateContactMethod"
	OperationTypeGetcontactmethods                    OperationType = "GetContactMethods"
	OperationTypeSendcontactmethodverification        OperationType = "SendContactMethodVerification"
	OperationTypeDeletecontactmethod                  OperationType = "DeleteContactMethod"
	OperationTypeCreatedistribution                   OperationType = "CreateDistribution"
	OperationTypeUpdatedistribution                   OperationType = "UpdateDistribution"
	OperationTypeDeletedistribution                   OperationType = "DeleteDistribution"
	OperationTypeResetdistributioncache               OperationType = "ResetDistributionCache"
	OperationTypeAttachcertificatetodistribution      OperationType = "AttachCertificateToDistribution"
	OperationTypeDetachcertificatefromdistribution    OperationType = "DetachCertificateFromDistribution"
	OperationTypeUpdatedistributionbundle             OperationType = "UpdateDistributionBundle"
	OperationTypeCreatecertificate                    OperationType = "CreateCertificate"
	OperationTypeDeletecertificate                    OperationType = "DeleteCertificate"
)

// Values returns all known values for OperationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OperationType) Values() []OperationType {
	return []OperationType{
		"DeleteKnownHostKeys",
		"DeleteInstance",
		"CreateInstance",
		"StopInstance",
		"StartInstance",
		"RebootInstance",
		"OpenInstancePublicPorts",
		"PutInstancePublicPorts",
		"CloseInstancePublicPorts",
		"AllocateStaticIp",
		"ReleaseStaticIp",
		"AttachStaticIp",
		"DetachStaticIp",
		"UpdateDomainEntry",
		"DeleteDomainEntry",
		"CreateDomain",
		"DeleteDomain",
		"CreateInstanceSnapshot",
		"DeleteInstanceSnapshot",
		"CreateInstancesFromSnapshot",
		"CreateLoadBalancer",
		"DeleteLoadBalancer",
		"AttachInstancesToLoadBalancer",
		"DetachInstancesFromLoadBalancer",
		"UpdateLoadBalancerAttribute",
		"CreateLoadBalancerTlsCertificate",
		"DeleteLoadBalancerTlsCertificate",
		"AttachLoadBalancerTlsCertificate",
		"CreateDisk",
		"DeleteDisk",
		"AttachDisk",
		"DetachDisk",
		"CreateDiskSnapshot",
		"DeleteDiskSnapshot",
		"CreateDiskFromSnapshot",
		"CreateRelationalDatabase",
		"UpdateRelationalDatabase",
		"DeleteRelationalDatabase",
		"CreateRelationalDatabaseFromSnapshot",
		"CreateRelationalDatabaseSnapshot",
		"DeleteRelationalDatabaseSnapshot",
		"UpdateRelationalDatabaseParameters",
		"StartRelationalDatabase",
		"RebootRelationalDatabase",
		"StopRelationalDatabase",
		"EnableAddOn",
		"DisableAddOn",
		"PutAlarm",
		"GetAlarms",
		"DeleteAlarm",
		"TestAlarm",
		"CreateContactMethod",
		"GetContactMethods",
		"SendContactMethodVerification",
		"DeleteContactMethod",
		"CreateDistribution",
		"UpdateDistribution",
		"DeleteDistribution",
		"ResetDistributionCache",
		"AttachCertificateToDistribution",
		"DetachCertificateFromDistribution",
		"UpdateDistributionBundle",
		"CreateCertificate",
		"DeleteCertificate",
	}
}

type OriginProtocolPolicyEnum string

// Enum values for OriginProtocolPolicyEnum
const (
	OriginProtocolPolicyEnumHttponly  OriginProtocolPolicyEnum = "http-only"
	OriginProtocolPolicyEnumHttpsonly OriginProtocolPolicyEnum = "https-only"
)

// Values returns all known values for OriginProtocolPolicyEnum. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OriginProtocolPolicyEnum) Values() []OriginProtocolPolicyEnum {
	return []OriginProtocolPolicyEnum{
		"http-only",
		"https-only",
	}
}

type PortAccessType string

// Enum values for PortAccessType
const (
	PortAccessTypePublic  PortAccessType = "Public"
	PortAccessTypePrivate PortAccessType = "Private"
)

// Values returns all known values for PortAccessType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PortAccessType) Values() []PortAccessType {
	return []PortAccessType{
		"Public",
		"Private",
	}
}

type PortInfoSourceType string

// Enum values for PortInfoSourceType
const (
	PortInfoSourceTypeDefault  PortInfoSourceType = "DEFAULT"
	PortInfoSourceTypeInstance PortInfoSourceType = "INSTANCE"
	PortInfoSourceTypeNone     PortInfoSourceType = "NONE"
	PortInfoSourceTypeClosed   PortInfoSourceType = "CLOSED"
)

// Values returns all known values for PortInfoSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PortInfoSourceType) Values() []PortInfoSourceType {
	return []PortInfoSourceType{
		"DEFAULT",
		"INSTANCE",
		"NONE",
		"CLOSED",
	}
}

type PortState string

// Enum values for PortState
const (
	PortStateOpen   PortState = "open"
	PortStateClosed PortState = "closed"
)

// Values returns all known values for PortState. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (PortState) Values() []PortState {
	return []PortState{
		"open",
		"closed",
	}
}

type RecordState string

// Enum values for RecordState
const (
	RecordStateStarted   RecordState = "Started"
	RecordStateSucceeded RecordState = "Succeeded"
	RecordStateFailed    RecordState = "Failed"
)

// Values returns all known values for RecordState. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (RecordState) Values() []RecordState {
	return []RecordState{
		"Started",
		"Succeeded",
		"Failed",
	}
}

type RegionName string

// Enum values for RegionName
const (
	RegionNameUs_east_1      RegionName = "us-east-1"
	RegionNameUs_east_2      RegionName = "us-east-2"
	RegionNameUs_west_1      RegionName = "us-west-1"
	RegionNameUs_west_2      RegionName = "us-west-2"
	RegionNameEu_west_1      RegionName = "eu-west-1"
	RegionNameEu_west_2      RegionName = "eu-west-2"
	RegionNameEu_west_3      RegionName = "eu-west-3"
	RegionNameEu_central_1   RegionName = "eu-central-1"
	RegionNameCa_central_1   RegionName = "ca-central-1"
	RegionNameAp_south_1     RegionName = "ap-south-1"
	RegionNameAp_southeast_1 RegionName = "ap-southeast-1"
	RegionNameAp_southeast_2 RegionName = "ap-southeast-2"
	RegionNameAp_northeast_1 RegionName = "ap-northeast-1"
	RegionNameAp_northeast_2 RegionName = "ap-northeast-2"
)

// Values returns all known values for RegionName. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (RegionName) Values() []RegionName {
	return []RegionName{
		"us-east-1",
		"us-east-2",
		"us-west-1",
		"us-west-2",
		"eu-west-1",
		"eu-west-2",
		"eu-west-3",
		"eu-central-1",
		"ca-central-1",
		"ap-south-1",
		"ap-southeast-1",
		"ap-southeast-2",
		"ap-northeast-1",
		"ap-northeast-2",
	}
}

type RelationalDatabaseEngine string

// Enum values for RelationalDatabaseEngine
const (
	RelationalDatabaseEngineMysql RelationalDatabaseEngine = "mysql"
)

// Values returns all known values for RelationalDatabaseEngine. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RelationalDatabaseEngine) Values() []RelationalDatabaseEngine {
	return []RelationalDatabaseEngine{
		"mysql",
	}
}

type RelationalDatabaseMetricName string

// Enum values for RelationalDatabaseMetricName
const (
	RelationalDatabaseMetricNameCpuutilization            RelationalDatabaseMetricName = "CPUUtilization"
	RelationalDatabaseMetricNameDatabaseconnections       RelationalDatabaseMetricName = "DatabaseConnections"
	RelationalDatabaseMetricNameDiskqueuedepth            RelationalDatabaseMetricName = "DiskQueueDepth"
	RelationalDatabaseMetricNameFreestoragespace          RelationalDatabaseMetricName = "FreeStorageSpace"
	RelationalDatabaseMetricNameNetworkreceivethroughput  RelationalDatabaseMetricName = "NetworkReceiveThroughput"
	RelationalDatabaseMetricNameNetworktransmitthroughput RelationalDatabaseMetricName = "NetworkTransmitThroughput"
)

// Values returns all known values for RelationalDatabaseMetricName. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelationalDatabaseMetricName) Values() []RelationalDatabaseMetricName {
	return []RelationalDatabaseMetricName{
		"CPUUtilization",
		"DatabaseConnections",
		"DiskQueueDepth",
		"FreeStorageSpace",
		"NetworkReceiveThroughput",
		"NetworkTransmitThroughput",
	}
}

type RelationalDatabasePasswordVersion string

// Enum values for RelationalDatabasePasswordVersion
const (
	RelationalDatabasePasswordVersionCurrent  RelationalDatabasePasswordVersion = "CURRENT"
	RelationalDatabasePasswordVersionPrevious RelationalDatabasePasswordVersion = "PREVIOUS"
	RelationalDatabasePasswordVersionPending  RelationalDatabasePasswordVersion = "PENDING"
)

// Values returns all known values for RelationalDatabasePasswordVersion. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (RelationalDatabasePasswordVersion) Values() []RelationalDatabasePasswordVersion {
	return []RelationalDatabasePasswordVersion{
		"CURRENT",
		"PREVIOUS",
		"PENDING",
	}
}

type RenewalStatus string

// Enum values for RenewalStatus
const (
	RenewalStatusPendingautorenewal RenewalStatus = "PendingAutoRenewal"
	RenewalStatusPendingvalidation  RenewalStatus = "PendingValidation"
	RenewalStatusSuccess            RenewalStatus = "Success"
	RenewalStatusFailed             RenewalStatus = "Failed"
)

// Values returns all known values for RenewalStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RenewalStatus) Values() []RenewalStatus {
	return []RenewalStatus{
		"PendingAutoRenewal",
		"PendingValidation",
		"Success",
		"Failed",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeInstance                   ResourceType = "Instance"
	ResourceTypeStaticip                   ResourceType = "StaticIp"
	ResourceTypeKeypair                    ResourceType = "KeyPair"
	ResourceTypeInstancesnapshot           ResourceType = "InstanceSnapshot"
	ResourceTypeDomain                     ResourceType = "Domain"
	ResourceTypePeeredvpc                  ResourceType = "PeeredVpc"
	ResourceTypeLoadbalancer               ResourceType = "LoadBalancer"
	ResourceTypeLoadbalancertlscertificate ResourceType = "LoadBalancerTlsCertificate"
	ResourceTypeDisk                       ResourceType = "Disk"
	ResourceTypeDisksnapshot               ResourceType = "DiskSnapshot"
	ResourceTypeRelationaldatabase         ResourceType = "RelationalDatabase"
	ResourceTypeRelationaldatabasesnapshot ResourceType = "RelationalDatabaseSnapshot"
	ResourceTypeExportsnapshotrecord       ResourceType = "ExportSnapshotRecord"
	ResourceTypeCloudformationstackrecord  ResourceType = "CloudFormationStackRecord"
	ResourceTypeAlarm                      ResourceType = "Alarm"
	ResourceTypeContactmethod              ResourceType = "ContactMethod"
	ResourceTypeDistribution               ResourceType = "Distribution"
	ResourceTypeCertificate                ResourceType = "Certificate"
)

// Values returns all known values for ResourceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"Instance",
		"StaticIp",
		"KeyPair",
		"InstanceSnapshot",
		"Domain",
		"PeeredVpc",
		"LoadBalancer",
		"LoadBalancerTlsCertificate",
		"Disk",
		"DiskSnapshot",
		"RelationalDatabase",
		"RelationalDatabaseSnapshot",
		"ExportSnapshotRecord",
		"CloudFormationStackRecord",
		"Alarm",
		"ContactMethod",
		"Distribution",
		"Certificate",
	}
}

type TreatMissingData string

// Enum values for TreatMissingData
const (
	TreatMissingDataBreaching    TreatMissingData = "breaching"
	TreatMissingDataNotbreaching TreatMissingData = "notBreaching"
	TreatMissingDataIgnore       TreatMissingData = "ignore"
	TreatMissingDataMissing      TreatMissingData = "missing"
)

// Values returns all known values for TreatMissingData. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TreatMissingData) Values() []TreatMissingData {
	return []TreatMissingData{
		"breaching",
		"notBreaching",
		"ignore",
		"missing",
	}
}
