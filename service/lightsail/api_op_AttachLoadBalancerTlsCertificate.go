// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lightsail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
)

const opAttachLoadBalancerTlsCertificate = "AttachLoadBalancerTlsCertificate"

// AttachLoadBalancerTlsCertificateRequest returns a request value for making API operation for
// Amazon Lightsail.
//
// Attaches a Transport Layer Security (TLS) certificate to your load balancer.
// TLS is just an updated, more secure version of Secure Socket Layer (SSL).
//
// Once you create and validate your certificate, you can attach it to your
// load balancer. You can also use this API to rotate the certificates on your
// account. Use the attach load balancer tls certificate operation with the
// non-attached certificate, and it will replace the existing one and become
// the attached certificate.
//
// The attach load balancer tls certificate operation supports tag-based access
// control via resource tags applied to the resource identified by load balancer
// name. For more information, see the Lightsail Dev Guide (https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags).
//
//    // Example sending a request using AttachLoadBalancerTlsCertificateRequest.
//    req := client.AttachLoadBalancerTlsCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lightsail-2016-11-28/AttachLoadBalancerTlsCertificate
func (c *Client) AttachLoadBalancerTlsCertificateRequest(input *types.AttachLoadBalancerTlsCertificateInput) AttachLoadBalancerTlsCertificateRequest {
	op := &aws.Operation{
		Name:       opAttachLoadBalancerTlsCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AttachLoadBalancerTlsCertificateInput{}
	}

	req := c.newRequest(op, input, &types.AttachLoadBalancerTlsCertificateOutput{})
	return AttachLoadBalancerTlsCertificateRequest{Request: req, Input: input, Copy: c.AttachLoadBalancerTlsCertificateRequest}
}

// AttachLoadBalancerTlsCertificateRequest is the request type for the
// AttachLoadBalancerTlsCertificate API operation.
type AttachLoadBalancerTlsCertificateRequest struct {
	*aws.Request
	Input *types.AttachLoadBalancerTlsCertificateInput
	Copy  func(*types.AttachLoadBalancerTlsCertificateInput) AttachLoadBalancerTlsCertificateRequest
}

// Send marshals and sends the AttachLoadBalancerTlsCertificate API request.
func (r AttachLoadBalancerTlsCertificateRequest) Send(ctx context.Context) (*AttachLoadBalancerTlsCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AttachLoadBalancerTlsCertificateResponse{
		AttachLoadBalancerTlsCertificateOutput: r.Request.Data.(*types.AttachLoadBalancerTlsCertificateOutput),
		response:                               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AttachLoadBalancerTlsCertificateResponse is the response type for the
// AttachLoadBalancerTlsCertificate API operation.
type AttachLoadBalancerTlsCertificateResponse struct {
	*types.AttachLoadBalancerTlsCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AttachLoadBalancerTlsCertificate request.
func (r *AttachLoadBalancerTlsCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
