// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionTypeEnum string

// Enum values for ActionTypeEnum
const (
	ActionTypeEnumForward              ActionTypeEnum = "forward"
	ActionTypeEnumAuthenticate_oidc    ActionTypeEnum = "authenticate-oidc"
	ActionTypeEnumAuthenticate_cognito ActionTypeEnum = "authenticate-cognito"
	ActionTypeEnumRedirect             ActionTypeEnum = "redirect"
	ActionTypeEnumFixed_response       ActionTypeEnum = "fixed-response"
)

// Values returns all known values for ActionTypeEnum. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ActionTypeEnum) Values() []ActionTypeEnum {
	return []ActionTypeEnum{
		"forward",
		"authenticate-oidc",
		"authenticate-cognito",
		"redirect",
		"fixed-response",
	}
}

type AuthenticateCognitoActionConditionalBehaviorEnum string

// Enum values for AuthenticateCognitoActionConditionalBehaviorEnum
const (
	AuthenticateCognitoActionConditionalBehaviorEnumDeny         AuthenticateCognitoActionConditionalBehaviorEnum = "deny"
	AuthenticateCognitoActionConditionalBehaviorEnumAllow        AuthenticateCognitoActionConditionalBehaviorEnum = "allow"
	AuthenticateCognitoActionConditionalBehaviorEnumAuthenticate AuthenticateCognitoActionConditionalBehaviorEnum = "authenticate"
)

// Values returns all known values for
// AuthenticateCognitoActionConditionalBehaviorEnum. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (AuthenticateCognitoActionConditionalBehaviorEnum) Values() []AuthenticateCognitoActionConditionalBehaviorEnum {
	return []AuthenticateCognitoActionConditionalBehaviorEnum{
		"deny",
		"allow",
		"authenticate",
	}
}

type AuthenticateOidcActionConditionalBehaviorEnum string

// Enum values for AuthenticateOidcActionConditionalBehaviorEnum
const (
	AuthenticateOidcActionConditionalBehaviorEnumDeny         AuthenticateOidcActionConditionalBehaviorEnum = "deny"
	AuthenticateOidcActionConditionalBehaviorEnumAllow        AuthenticateOidcActionConditionalBehaviorEnum = "allow"
	AuthenticateOidcActionConditionalBehaviorEnumAuthenticate AuthenticateOidcActionConditionalBehaviorEnum = "authenticate"
)

// Values returns all known values for
// AuthenticateOidcActionConditionalBehaviorEnum. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (AuthenticateOidcActionConditionalBehaviorEnum) Values() []AuthenticateOidcActionConditionalBehaviorEnum {
	return []AuthenticateOidcActionConditionalBehaviorEnum{
		"deny",
		"allow",
		"authenticate",
	}
}

type IpAddressType string

// Enum values for IpAddressType
const (
	IpAddressTypeIpv4      IpAddressType = "ipv4"
	IpAddressTypeDualstack IpAddressType = "dualstack"
)

// Values returns all known values for IpAddressType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IpAddressType) Values() []IpAddressType {
	return []IpAddressType{
		"ipv4",
		"dualstack",
	}
}

type LoadBalancerSchemeEnum string

// Enum values for LoadBalancerSchemeEnum
const (
	LoadBalancerSchemeEnumInternet_facing LoadBalancerSchemeEnum = "internet-facing"
	LoadBalancerSchemeEnumInternal        LoadBalancerSchemeEnum = "internal"
)

// Values returns all known values for LoadBalancerSchemeEnum. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LoadBalancerSchemeEnum) Values() []LoadBalancerSchemeEnum {
	return []LoadBalancerSchemeEnum{
		"internet-facing",
		"internal",
	}
}

type LoadBalancerStateEnum string

// Enum values for LoadBalancerStateEnum
const (
	LoadBalancerStateEnumActive          LoadBalancerStateEnum = "active"
	LoadBalancerStateEnumProvisioning    LoadBalancerStateEnum = "provisioning"
	LoadBalancerStateEnumActive_impaired LoadBalancerStateEnum = "active_impaired"
	LoadBalancerStateEnumFailed          LoadBalancerStateEnum = "failed"
)

// Values returns all known values for LoadBalancerStateEnum. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LoadBalancerStateEnum) Values() []LoadBalancerStateEnum {
	return []LoadBalancerStateEnum{
		"active",
		"provisioning",
		"active_impaired",
		"failed",
	}
}

type LoadBalancerTypeEnum string

// Enum values for LoadBalancerTypeEnum
const (
	LoadBalancerTypeEnumApplication LoadBalancerTypeEnum = "application"
	LoadBalancerTypeEnumNetwork     LoadBalancerTypeEnum = "network"
)

// Values returns all known values for LoadBalancerTypeEnum. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LoadBalancerTypeEnum) Values() []LoadBalancerTypeEnum {
	return []LoadBalancerTypeEnum{
		"application",
		"network",
	}
}

type ProtocolEnum string

// Enum values for ProtocolEnum
const (
	ProtocolEnumHttp    ProtocolEnum = "HTTP"
	ProtocolEnumHttps   ProtocolEnum = "HTTPS"
	ProtocolEnumTcp     ProtocolEnum = "TCP"
	ProtocolEnumTls     ProtocolEnum = "TLS"
	ProtocolEnumUdp     ProtocolEnum = "UDP"
	ProtocolEnumTcp_udp ProtocolEnum = "TCP_UDP"
)

// Values returns all known values for ProtocolEnum. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ProtocolEnum) Values() []ProtocolEnum {
	return []ProtocolEnum{
		"HTTP",
		"HTTPS",
		"TCP",
		"TLS",
		"UDP",
		"TCP_UDP",
	}
}

type RedirectActionStatusCodeEnum string

// Enum values for RedirectActionStatusCodeEnum
const (
	RedirectActionStatusCodeEnumHttp_301 RedirectActionStatusCodeEnum = "HTTP_301"
	RedirectActionStatusCodeEnumHttp_302 RedirectActionStatusCodeEnum = "HTTP_302"
)

// Values returns all known values for RedirectActionStatusCodeEnum. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (RedirectActionStatusCodeEnum) Values() []RedirectActionStatusCodeEnum {
	return []RedirectActionStatusCodeEnum{
		"HTTP_301",
		"HTTP_302",
	}
}

type TargetHealthReasonEnum string

// Enum values for TargetHealthReasonEnum
const (
	TargetHealthReasonEnumRegistration_in_progress   TargetHealthReasonEnum = "Elb.RegistrationInProgress"
	TargetHealthReasonEnumInitial_health_checking    TargetHealthReasonEnum = "Elb.InitialHealthChecking"
	TargetHealthReasonEnumResponse_code_mismatch     TargetHealthReasonEnum = "Target.ResponseCodeMismatch"
	TargetHealthReasonEnumTimeout                    TargetHealthReasonEnum = "Target.Timeout"
	TargetHealthReasonEnumFailed_health_checks       TargetHealthReasonEnum = "Target.FailedHealthChecks"
	TargetHealthReasonEnumNot_registered             TargetHealthReasonEnum = "Target.NotRegistered"
	TargetHealthReasonEnumNot_in_use                 TargetHealthReasonEnum = "Target.NotInUse"
	TargetHealthReasonEnumDeregistration_in_progress TargetHealthReasonEnum = "Target.DeregistrationInProgress"
	TargetHealthReasonEnumInvalid_state              TargetHealthReasonEnum = "Target.InvalidState"
	TargetHealthReasonEnumIp_unusable                TargetHealthReasonEnum = "Target.IpUnusable"
	TargetHealthReasonEnumHealth_check_disabled      TargetHealthReasonEnum = "Target.HealthCheckDisabled"
	TargetHealthReasonEnumInternal_error             TargetHealthReasonEnum = "Elb.InternalError"
)

// Values returns all known values for TargetHealthReasonEnum. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TargetHealthReasonEnum) Values() []TargetHealthReasonEnum {
	return []TargetHealthReasonEnum{
		"Elb.RegistrationInProgress",
		"Elb.InitialHealthChecking",
		"Target.ResponseCodeMismatch",
		"Target.Timeout",
		"Target.FailedHealthChecks",
		"Target.NotRegistered",
		"Target.NotInUse",
		"Target.DeregistrationInProgress",
		"Target.InvalidState",
		"Target.IpUnusable",
		"Target.HealthCheckDisabled",
		"Elb.InternalError",
	}
}

type TargetHealthStateEnum string

// Enum values for TargetHealthStateEnum
const (
	TargetHealthStateEnumInitial     TargetHealthStateEnum = "initial"
	TargetHealthStateEnumHealthy     TargetHealthStateEnum = "healthy"
	TargetHealthStateEnumUnhealthy   TargetHealthStateEnum = "unhealthy"
	TargetHealthStateEnumUnused      TargetHealthStateEnum = "unused"
	TargetHealthStateEnumDraining    TargetHealthStateEnum = "draining"
	TargetHealthStateEnumUnavailable TargetHealthStateEnum = "unavailable"
)

// Values returns all known values for TargetHealthStateEnum. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TargetHealthStateEnum) Values() []TargetHealthStateEnum {
	return []TargetHealthStateEnum{
		"initial",
		"healthy",
		"unhealthy",
		"unused",
		"draining",
		"unavailable",
	}
}

type TargetTypeEnum string

// Enum values for TargetTypeEnum
const (
	TargetTypeEnumInstance TargetTypeEnum = "instance"
	TargetTypeEnumIp       TargetTypeEnum = "ip"
	TargetTypeEnumLambda   TargetTypeEnum = "lambda"
)

// Values returns all known values for TargetTypeEnum. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TargetTypeEnum) Values() []TargetTypeEnum {
	return []TargetTypeEnum{
		"instance",
		"ip",
		"lambda",
	}
}
