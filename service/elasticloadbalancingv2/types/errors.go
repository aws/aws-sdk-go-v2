// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// The specified allocation ID does not exist.
type AllocationIdNotFoundException struct {
	Message *string
}

func (e *AllocationIdNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AllocationIdNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AllocationIdNotFoundException) ErrorCode() string             { return "AllocationIdNotFoundException" }
func (e *AllocationIdNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AllocationIdNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AllocationIdNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The specified ALPN policy is not supported.
type ALPNPolicyNotSupportedException struct {
	Message *string
}

func (e *ALPNPolicyNotSupportedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ALPNPolicyNotSupportedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ALPNPolicyNotSupportedException) ErrorCode() string {
	return "ALPNPolicyNotSupportedException"
}
func (e *ALPNPolicyNotSupportedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ALPNPolicyNotSupportedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ALPNPolicyNotSupportedException) HasMessage() bool {
	return e.Message != nil
}

// The specified Availability Zone is not supported.
type AvailabilityZoneNotSupportedException struct {
	Message *string
}

func (e *AvailabilityZoneNotSupportedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AvailabilityZoneNotSupportedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AvailabilityZoneNotSupportedException) ErrorCode() string {
	return "AvailabilityZoneNotSupportedException"
}
func (e *AvailabilityZoneNotSupportedException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *AvailabilityZoneNotSupportedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AvailabilityZoneNotSupportedException) HasMessage() bool {
	return e.Message != nil
}

// The specified certificate does not exist.
type CertificateNotFoundException struct {
	Message *string
}

func (e *CertificateNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CertificateNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CertificateNotFoundException) ErrorCode() string             { return "CertificateNotFoundException" }
func (e *CertificateNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *CertificateNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CertificateNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// A listener with the specified port already exists.
type DuplicateListenerException struct {
	Message *string
}

func (e *DuplicateListenerException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateListenerException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateListenerException) ErrorCode() string             { return "DuplicateListenerException" }
func (e *DuplicateListenerException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DuplicateListenerException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateListenerException) HasMessage() bool {
	return e.Message != nil
}

// A load balancer with the specified name already exists.
type DuplicateLoadBalancerNameException struct {
	Message *string
}

func (e *DuplicateLoadBalancerNameException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateLoadBalancerNameException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateLoadBalancerNameException) ErrorCode() string {
	return "DuplicateLoadBalancerNameException"
}
func (e *DuplicateLoadBalancerNameException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DuplicateLoadBalancerNameException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateLoadBalancerNameException) HasMessage() bool {
	return e.Message != nil
}

// A tag key was specified more than once.
type DuplicateTagKeysException struct {
	Message *string
}

func (e *DuplicateTagKeysException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateTagKeysException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateTagKeysException) ErrorCode() string             { return "DuplicateTagKeysException" }
func (e *DuplicateTagKeysException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DuplicateTagKeysException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateTagKeysException) HasMessage() bool {
	return e.Message != nil
}

// A target group with the specified name already exists.
type DuplicateTargetGroupNameException struct {
	Message *string
}

func (e *DuplicateTargetGroupNameException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateTargetGroupNameException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateTargetGroupNameException) ErrorCode() string {
	return "DuplicateTargetGroupNameException"
}
func (e *DuplicateTargetGroupNameException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DuplicateTargetGroupNameException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateTargetGroupNameException) HasMessage() bool {
	return e.Message != nil
}

// The health of the specified targets could not be retrieved due to an internal
// error.
type HealthUnavailableException struct {
	Message *string
}

func (e *HealthUnavailableException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *HealthUnavailableException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *HealthUnavailableException) ErrorCode() string             { return "HealthUnavailableException" }
func (e *HealthUnavailableException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *HealthUnavailableException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *HealthUnavailableException) HasMessage() bool {
	return e.Message != nil
}

// The specified configuration is not valid with this protocol.
type IncompatibleProtocolsException struct {
	Message *string
}

func (e *IncompatibleProtocolsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IncompatibleProtocolsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IncompatibleProtocolsException) ErrorCode() string             { return "IncompatibleProtocolsException" }
func (e *IncompatibleProtocolsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IncompatibleProtocolsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IncompatibleProtocolsException) HasMessage() bool {
	return e.Message != nil
}

// The requested configuration is not valid.
type InvalidConfigurationRequestException struct {
	Message *string
}

func (e *InvalidConfigurationRequestException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidConfigurationRequestException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidConfigurationRequestException) ErrorCode() string {
	return "InvalidConfigurationRequestException"
}
func (e *InvalidConfigurationRequestException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InvalidConfigurationRequestException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidConfigurationRequestException) HasMessage() bool {
	return e.Message != nil
}

// The requested action is not valid.
type InvalidLoadBalancerActionException struct {
	Message *string
}

func (e *InvalidLoadBalancerActionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidLoadBalancerActionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidLoadBalancerActionException) ErrorCode() string {
	return "InvalidLoadBalancerActionException"
}
func (e *InvalidLoadBalancerActionException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InvalidLoadBalancerActionException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidLoadBalancerActionException) HasMessage() bool {
	return e.Message != nil
}

// The requested scheme is not valid.
type InvalidSchemeException struct {
	Message *string
}

func (e *InvalidSchemeException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidSchemeException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidSchemeException) ErrorCode() string             { return "InvalidSchemeException" }
func (e *InvalidSchemeException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidSchemeException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidSchemeException) HasMessage() bool {
	return e.Message != nil
}

// The specified security group does not exist.
type InvalidSecurityGroupException struct {
	Message *string
}

func (e *InvalidSecurityGroupException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidSecurityGroupException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidSecurityGroupException) ErrorCode() string             { return "InvalidSecurityGroupException" }
func (e *InvalidSecurityGroupException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidSecurityGroupException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidSecurityGroupException) HasMessage() bool {
	return e.Message != nil
}

// The specified subnet is out of available addresses.
type InvalidSubnetException struct {
	Message *string
}

func (e *InvalidSubnetException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidSubnetException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidSubnetException) ErrorCode() string             { return "InvalidSubnetException" }
func (e *InvalidSubnetException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidSubnetException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidSubnetException) HasMessage() bool {
	return e.Message != nil
}

// The specified target does not exist, is not in the same VPC as the target group,
// or has an unsupported instance type.
type InvalidTargetException struct {
	Message *string
}

func (e *InvalidTargetException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidTargetException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidTargetException) ErrorCode() string             { return "InvalidTargetException" }
func (e *InvalidTargetException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidTargetException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidTargetException) HasMessage() bool {
	return e.Message != nil
}

// The specified listener does not exist.
type ListenerNotFoundException struct {
	Message *string
}

func (e *ListenerNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ListenerNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ListenerNotFoundException) ErrorCode() string             { return "ListenerNotFoundException" }
func (e *ListenerNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ListenerNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ListenerNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The specified load balancer does not exist.
type LoadBalancerNotFoundException struct {
	Message *string
}

func (e *LoadBalancerNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LoadBalancerNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LoadBalancerNotFoundException) ErrorCode() string             { return "LoadBalancerNotFoundException" }
func (e *LoadBalancerNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LoadBalancerNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LoadBalancerNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// This operation is not allowed.
type OperationNotPermittedException struct {
	Message *string
}

func (e *OperationNotPermittedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OperationNotPermittedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OperationNotPermittedException) ErrorCode() string             { return "OperationNotPermittedException" }
func (e *OperationNotPermittedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OperationNotPermittedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OperationNotPermittedException) HasMessage() bool {
	return e.Message != nil
}

// The specified priority is in use.
type PriorityInUseException struct {
	Message *string
}

func (e *PriorityInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PriorityInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PriorityInUseException) ErrorCode() string             { return "PriorityInUseException" }
func (e *PriorityInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PriorityInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PriorityInUseException) HasMessage() bool {
	return e.Message != nil
}

// A specified resource is in use.
type ResourceInUseException struct {
	Message *string
}

func (e *ResourceInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceInUseException) ErrorCode() string             { return "ResourceInUseException" }
func (e *ResourceInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceInUseException) HasMessage() bool {
	return e.Message != nil
}

// The specified rule does not exist.
type RuleNotFoundException struct {
	Message *string
}

func (e *RuleNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *RuleNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *RuleNotFoundException) ErrorCode() string             { return "RuleNotFoundException" }
func (e *RuleNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *RuleNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *RuleNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The specified SSL policy does not exist.
type SSLPolicyNotFoundException struct {
	Message *string
}

func (e *SSLPolicyNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SSLPolicyNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SSLPolicyNotFoundException) ErrorCode() string             { return "SSLPolicyNotFoundException" }
func (e *SSLPolicyNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SSLPolicyNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SSLPolicyNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The specified subnet does not exist.
type SubnetNotFoundException struct {
	Message *string
}

func (e *SubnetNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SubnetNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SubnetNotFoundException) ErrorCode() string             { return "SubnetNotFoundException" }
func (e *SubnetNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SubnetNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SubnetNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of load balancers per target group.
type TargetGroupAssociationLimitException struct {
	Message *string
}

func (e *TargetGroupAssociationLimitException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TargetGroupAssociationLimitException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TargetGroupAssociationLimitException) ErrorCode() string {
	return "TargetGroupAssociationLimitException"
}
func (e *TargetGroupAssociationLimitException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *TargetGroupAssociationLimitException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TargetGroupAssociationLimitException) HasMessage() bool {
	return e.Message != nil
}

// The specified target group does not exist.
type TargetGroupNotFoundException struct {
	Message *string
}

func (e *TargetGroupNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TargetGroupNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TargetGroupNotFoundException) ErrorCode() string             { return "TargetGroupNotFoundException" }
func (e *TargetGroupNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TargetGroupNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TargetGroupNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of actions per rule.
type TooManyActionsException struct {
	Message *string
}

func (e *TooManyActionsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyActionsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyActionsException) ErrorCode() string             { return "TooManyActionsException" }
func (e *TooManyActionsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyActionsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyActionsException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of certificates per load balancer.
type TooManyCertificatesException struct {
	Message *string
}

func (e *TooManyCertificatesException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyCertificatesException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyCertificatesException) ErrorCode() string             { return "TooManyCertificatesException" }
func (e *TooManyCertificatesException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyCertificatesException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyCertificatesException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of listeners per load balancer.
type TooManyListenersException struct {
	Message *string
}

func (e *TooManyListenersException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyListenersException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyListenersException) ErrorCode() string             { return "TooManyListenersException" }
func (e *TooManyListenersException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyListenersException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyListenersException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of load balancers for your AWS account.
type TooManyLoadBalancersException struct {
	Message *string
}

func (e *TooManyLoadBalancersException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyLoadBalancersException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyLoadBalancersException) ErrorCode() string             { return "TooManyLoadBalancersException" }
func (e *TooManyLoadBalancersException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyLoadBalancersException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyLoadBalancersException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of times a target can be registered with
// a load balancer.
type TooManyRegistrationsForTargetIdException struct {
	Message *string
}

func (e *TooManyRegistrationsForTargetIdException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyRegistrationsForTargetIdException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyRegistrationsForTargetIdException) ErrorCode() string {
	return "TooManyRegistrationsForTargetIdException"
}
func (e *TooManyRegistrationsForTargetIdException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *TooManyRegistrationsForTargetIdException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyRegistrationsForTargetIdException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of rules per load balancer.
type TooManyRulesException struct {
	Message *string
}

func (e *TooManyRulesException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyRulesException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyRulesException) ErrorCode() string             { return "TooManyRulesException" }
func (e *TooManyRulesException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyRulesException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyRulesException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of tags per load balancer.
type TooManyTagsException struct {
	Message *string
}

func (e *TooManyTagsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyTagsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyTagsException) ErrorCode() string             { return "TooManyTagsException" }
func (e *TooManyTagsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyTagsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyTagsException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of target groups for your AWS account.
type TooManyTargetGroupsException struct {
	Message *string
}

func (e *TooManyTargetGroupsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyTargetGroupsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyTargetGroupsException) ErrorCode() string             { return "TooManyTargetGroupsException" }
func (e *TooManyTargetGroupsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyTargetGroupsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyTargetGroupsException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of targets.
type TooManyTargetsException struct {
	Message *string
}

func (e *TooManyTargetsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyTargetsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyTargetsException) ErrorCode() string             { return "TooManyTargetsException" }
func (e *TooManyTargetsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyTargetsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyTargetsException) HasMessage() bool {
	return e.Message != nil
}

// You've reached the limit on the number of unique target groups per load balancer
// across all listeners. If a target group is used by multiple actions for a load
// balancer, it is counted as only one use.
type TooManyUniqueTargetGroupsPerLoadBalancerException struct {
	Message *string
}

func (e *TooManyUniqueTargetGroupsPerLoadBalancerException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyUniqueTargetGroupsPerLoadBalancerException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyUniqueTargetGroupsPerLoadBalancerException) ErrorCode() string {
	return "TooManyUniqueTargetGroupsPerLoadBalancerException"
}
func (e *TooManyUniqueTargetGroupsPerLoadBalancerException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *TooManyUniqueTargetGroupsPerLoadBalancerException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyUniqueTargetGroupsPerLoadBalancerException) HasMessage() bool {
	return e.Message != nil
}

// The specified protocol is not supported.
type UnsupportedProtocolException struct {
	Message *string
}

func (e *UnsupportedProtocolException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *UnsupportedProtocolException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *UnsupportedProtocolException) ErrorCode() string             { return "UnsupportedProtocolException" }
func (e *UnsupportedProtocolException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *UnsupportedProtocolException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *UnsupportedProtocolException) HasMessage() bool {
	return e.Message != nil
}
