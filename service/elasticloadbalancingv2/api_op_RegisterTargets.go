// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticloadbalancingv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Registers the specified targets with the specified target group.  <p>If the
// target is an EC2 instance, it must be in the <code>running</code> state when you
// register it.</p> <p>By default, the load balancer routes requests to registered
// targets using the protocol and port for the target group. Alternatively, you can
// override the port for a target when you register it. You can register each EC2
// instance or IP address with the same target group multiple times using different
// ports.</p> <p>With a Network Load Balancer, you cannot register instances by
// instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2,
// CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of
// these types by IP address.</p> <p>To remove a target from a target group, use
// <a>DeregisterTargets</a>.</p>
func (c *Client) RegisterTargets(ctx context.Context, params *RegisterTargetsInput, optFns ...func(*Options)) (*RegisterTargetsOutput, error) {
	stack := middleware.NewStack("RegisterTargets", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpRegisterTargetsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRegisterTargetsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRegisterTargets(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RegisterTargets",
			Err:           err,
		}
	}
	out := result.(*RegisterTargetsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RegisterTargetsInput struct {
	// The targets. To register a target by instance ID, specify the instance ID. To
	// register a target by IP address, specify the IP address. To register a Lambda
	// function, specify the ARN of the Lambda function.
	Targets []*types.TargetDescription
	// The Amazon Resource Name (ARN) of the target group.
	TargetGroupArn *string
}

type RegisterTargetsOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpRegisterTargetsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpRegisterTargets{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpRegisterTargets{}, middleware.After)
}

func newServiceMetadataMiddleware_opRegisterTargets(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticloadbalancing",
		OperationName: "RegisterTargets",
	}
}
