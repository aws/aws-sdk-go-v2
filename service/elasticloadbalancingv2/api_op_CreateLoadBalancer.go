// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticloadbalancingv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an Application Load Balancer or a Network Load Balancer. When you create
// a load balancer, you can specify security groups, public subnets, IP address
// type, and tags. Otherwise, you could do so later using SetSecurityGroups (),
// SetSubnets (), SetIpAddressType (), and AddTags (). To create listeners for your
// load balancer, use CreateListener (). To describe your current load balancers,
// see DescribeLoadBalancers (). When you are finished with a load balancer, you
// can delete it using DeleteLoadBalancer (). For limit information, see Limits for
// Your Application Load Balancer
// (https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html)
// in the Application Load Balancers Guide and Limits for Your Network Load
// Balancer
// (https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html)
// in the Network Load Balancers Guide. This operation is idempotent, which means
// that it completes at most one time. If you attempt to create multiple load
// balancers with the same settings, each call succeeds. For more information, see
// Application Load Balancers
// (https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html)
// in the Application Load Balancers Guide and Network Load Balancers
// (https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html)
// in the Network Load Balancers Guide.
func (c *Client) CreateLoadBalancer(ctx context.Context, params *CreateLoadBalancerInput, optFns ...func(*Options)) (*CreateLoadBalancerOutput, error) {
	stack := middleware.NewStack("CreateLoadBalancer", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateLoadBalancerMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateLoadBalancerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateLoadBalancer(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateLoadBalancer",
			Err:           err,
		}
	}
	out := result.(*CreateLoadBalancerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateLoadBalancerInput struct {
	// [Application Load Balancers] The type of IP addresses used by the subnets for
	// your load balancer. The possible values are ipv4 (for IPv4 addresses) and
	// dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4.
	IpAddressType types.IpAddressType
	// One or more tags to assign to the load balancer.
	Tags []*types.Tag
	// The type of load balancer. The default is application.
	Type types.LoadBalancerTypeEnum
	// [Application Load Balancers] The IDs of the security groups for the load
	// balancer.
	SecurityGroups []*string
	// The nodes of an Internet-facing load balancer have public IP addresses. The DNS
	// name of an Internet-facing load balancer is publicly resolvable to the public IP
	// addresses of the nodes. Therefore, Internet-facing load balancers can route
	// requests from clients over the internet. The nodes of an internal load balancer
	// have only private IP addresses. The DNS name of an internal load balancer is
	// publicly resolvable to the private IP addresses of the nodes. Therefore,
	// internal load balancers can route requests only from clients with access to the
	// VPC for the load balancer. The default is an Internet-facing load balancer.
	Scheme types.LoadBalancerSchemeEnum
	// The IDs of the public subnets. You can specify only one subnet per Availability
	// Zone. You must specify either subnets or subnet mappings. [Application Load
	// Balancers] You must specify subnets from at least two Availability Zones.
	// [Network Load Balancers] You can specify subnets from one or more Availability
	// Zones.
	Subnets []*string
	// The IDs of the public subnets. You can specify only one subnet per Availability
	// Zone. You must specify either subnets or subnet mappings. [Application Load
	// Balancers] You must specify subnets from at least two Availability Zones. You
	// cannot specify Elastic IP addresses for your subnets. [Network Load Balancers]
	// You can specify subnets from one or more Availability Zones. You can specify one
	// Elastic IP address per subnet if you need static IP addresses for your
	// internet-facing load balancer. For internal load balancers, you can specify one
	// private IP address per subnet from the IPv4 range of the subnet.
	SubnetMappings []*types.SubnetMapping
	// The name of the load balancer. This name must be unique per region per account,
	// can have a maximum of 32 characters, must contain only alphanumeric characters
	// or hyphens, must not begin or end with a hyphen, and must not begin with
	// "internal-".
	Name *string
}

type CreateLoadBalancerOutput struct {
	// Information about the load balancer.
	LoadBalancers []*types.LoadBalancer

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateLoadBalancerMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateLoadBalancer{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateLoadBalancer{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateLoadBalancer(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticloadbalancing",
		OperationName: "CreateLoadBalancer",
	}
}
