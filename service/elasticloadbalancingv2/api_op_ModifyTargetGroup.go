// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticloadbalancingv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Modifies the health checks used when evaluating the health state of the targets
// in the specified target group. To monitor the health of the targets, use
// DescribeTargetHealth ().
func (c *Client) ModifyTargetGroup(ctx context.Context, params *ModifyTargetGroupInput, optFns ...func(*Options)) (*ModifyTargetGroupOutput, error) {
	stack := middleware.NewStack("ModifyTargetGroup", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpModifyTargetGroupMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpModifyTargetGroupValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opModifyTargetGroup(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ModifyTargetGroup",
			Err:           err,
		}
	}
	out := result.(*ModifyTargetGroupOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ModifyTargetGroupInput struct {
	// The number of consecutive health check failures required before considering the
	// target unhealthy. For Network Load Balancers, this value must be the same as the
	// healthy threshold count.
	UnhealthyThresholdCount *int32
	// [HTTP/HTTPS health checks] The amount of time, in seconds, during which no
	// response means a failed health check. With Network Load Balancers, you can't
	// modify this setting.
	HealthCheckTimeoutSeconds *int32
	// The approximate amount of time, in seconds, between health checks of an
	// individual target. For Application Load Balancers, the range is 5 to 300
	// seconds. For Network Load Balancers, the supported values are 10 or 30 seconds.
	// With Network Load Balancers, you can't modify this setting.
	HealthCheckIntervalSeconds *int32
	// Indicates whether health checks are enabled.
	HealthCheckEnabled *bool
	// [HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful
	// response from a target. With Network Load Balancers, you can't modify this
	// setting.
	Matcher *types.Matcher
	// The number of consecutive health checks successes required before considering an
	// unhealthy target healthy.
	HealthyThresholdCount *int32
	// [HTTP/HTTPS health checks] The ping path that is the destination for the health
	// check request.
	HealthCheckPath *string
	// The Amazon Resource Name (ARN) of the target group.
	TargetGroupArn *string
	// The protocol the load balancer uses when performing health checks on targets.
	// The TCP protocol is supported for health checks only if the protocol of the
	// target group is TCP, TLS, UDP, or TCP_UDP. The TLS, UDP, and TCP_UDP protocols
	// are not supported for health checks. With Network Load Balancers, you can't
	// modify this setting.
	HealthCheckProtocol types.ProtocolEnum
	// The port the load balancer uses when performing health checks on targets.
	HealthCheckPort *string
}

type ModifyTargetGroupOutput struct {
	// Information about the modified target group.
	TargetGroups []*types.TargetGroup

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpModifyTargetGroupMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpModifyTargetGroup{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpModifyTargetGroup{}, middleware.After)
}

func newServiceMetadataMiddleware_opModifyTargetGroup(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticloadbalancing",
		OperationName: "ModifyTargetGroup",
	}
}
