// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticloadbalancingv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Enables the Availability Zones for the specified public subnets for the
// specified load balancer. The specified subnets replace the previously enabled
// subnets. When you specify subnets for a Network Load Balancer, you must include
// all subnets that were enabled previously, with their existing configurations,
// plus any additional subnets.
func (c *Client) SetSubnets(ctx context.Context, params *SetSubnetsInput, optFns ...func(*Options)) (*SetSubnetsOutput, error) {
	stack := middleware.NewStack("SetSubnets", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpSetSubnetsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSetSubnetsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSetSubnets(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SetSubnets",
			Err:           err,
		}
	}
	out := result.(*SetSubnetsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SetSubnetsInput struct {
	// The Amazon Resource Name (ARN) of the load balancer.
	LoadBalancerArn *string
	// The IDs of the public subnets. You must specify subnets from at least two
	// Availability Zones. You can specify only one subnet per Availability Zone. You
	// must specify either subnets or subnet mappings.
	Subnets []*string
	// The IDs of the public subnets. You can specify only one subnet per Availability
	// Zone. You must specify either subnets or subnet mappings. [Application Load
	// Balancers] You must specify subnets from at least two Availability Zones. You
	// cannot specify Elastic IP addresses for your subnets. [Network Load Balancers]
	// You can specify subnets from one or more Availability Zones. If you need static
	// IP addresses for your internet-facing load balancer, you can specify one Elastic
	// IP address per subnet. For internal load balancers, you can specify one private
	// IP address per subnet from the IPv4 range of the subnet.
	SubnetMappings []*types.SubnetMapping
}

type SetSubnetsOutput struct {
	// Information about the subnet and Availability Zone.
	AvailabilityZones []*types.AvailabilityZone

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpSetSubnetsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpSetSubnets{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpSetSubnets{}, middleware.After)
}

func newServiceMetadataMiddleware_opSetSubnets(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticloadbalancing",
		OperationName: "SetSubnets",
	}
}
