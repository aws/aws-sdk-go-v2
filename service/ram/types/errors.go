// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/aws/smithy-go"
)

// The client token input parameter was matched one used with a previous call to
// the operation, but at least one of the other input parameters is different from
// the previous call.
type IdempotentParameterMismatchException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *IdempotentParameterMismatchException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IdempotentParameterMismatchException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IdempotentParameterMismatchException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "IdempotentParameterMismatchException"
	}
	return *e.DynamicErrorCode
}
func (e *IdempotentParameterMismatchException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The client token is not valid.
type InvalidClientTokenException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidClientTokenException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidClientTokenException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidClientTokenException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidClientTokenException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidClientTokenException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified value for MaxResults is not valid.
type InvalidMaxResultsException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidMaxResultsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidMaxResultsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidMaxResultsException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidMaxResultsException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidMaxResultsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified value for NextToken is not valid.
type InvalidNextTokenException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidNextTokenException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidNextTokenException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidNextTokenException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidNextTokenException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidNextTokenException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// A parameter is not valid.
type InvalidParameterException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidParameterException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified resource type is not valid.
type InvalidResourceTypeException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidResourceTypeException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidResourceTypeException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidResourceTypeException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidResourceTypeException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidResourceTypeException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The requested state transition is not valid.
type InvalidStateTransitionException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidStateTransitionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidStateTransitionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidStateTransitionException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidStateTransitionException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidStateTransitionException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The format of an Amazon Resource Name (ARN) is not valid.
type MalformedArnException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *MalformedArnException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MalformedArnException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MalformedArnException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "MalformedArnException"
	}
	return *e.DynamicErrorCode
}
func (e *MalformedArnException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// A required input parameter is missing.
type MissingRequiredParameterException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *MissingRequiredParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MissingRequiredParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MissingRequiredParameterException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "MissingRequiredParameterException"
	}
	return *e.DynamicErrorCode
}
func (e *MissingRequiredParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The requested operation is not permitted.
type OperationNotPermittedException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *OperationNotPermittedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OperationNotPermittedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OperationNotPermittedException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "OperationNotPermittedException"
	}
	return *e.DynamicErrorCode
}
func (e *OperationNotPermittedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified Amazon Resource Name (ARN) was not found.
type ResourceArnNotFoundException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceArnNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceArnNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceArnNotFoundException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceArnNotFoundException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceArnNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified invitation was already accepted.
type ResourceShareInvitationAlreadyAcceptedException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceShareInvitationAlreadyAcceptedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceShareInvitationAlreadyAcceptedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceShareInvitationAlreadyAcceptedException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceShareInvitationAlreadyAcceptedException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceShareInvitationAlreadyAcceptedException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The specified invitation was already rejected.
type ResourceShareInvitationAlreadyRejectedException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceShareInvitationAlreadyRejectedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceShareInvitationAlreadyRejectedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceShareInvitationAlreadyRejectedException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceShareInvitationAlreadyRejectedException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceShareInvitationAlreadyRejectedException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The specified Amazon Resource Name (ARN) for an invitation was not found.
type ResourceShareInvitationArnNotFoundException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceShareInvitationArnNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceShareInvitationArnNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceShareInvitationArnNotFoundException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceShareInvitationArnNotFoundException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceShareInvitationArnNotFoundException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The specified invitation is expired.
type ResourceShareInvitationExpiredException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceShareInvitationExpiredException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceShareInvitationExpiredException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceShareInvitationExpiredException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceShareInvitationExpiredException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceShareInvitationExpiredException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// This request would exceed the limit for resource shares for your account.
type ResourceShareLimitExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceShareLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceShareLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceShareLimitExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceShareLimitExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceShareLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The service could not respond to the request due to an internal problem.
type ServerInternalException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ServerInternalException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServerInternalException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServerInternalException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ServerInternalException"
	}
	return *e.DynamicErrorCode
}
func (e *ServerInternalException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// The service is not available.
type ServiceUnavailableException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ServiceUnavailableException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServiceUnavailableException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServiceUnavailableException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ServiceUnavailableException"
	}
	return *e.DynamicErrorCode
}
func (e *ServiceUnavailableException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// This request would exceed the limit for tags for your account.
type TagLimitExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *TagLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagLimitExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "TagLimitExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *TagLimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified tag key is a reserved word and can't be used.
type TagPolicyViolationException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *TagPolicyViolationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagPolicyViolationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagPolicyViolationException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "TagPolicyViolationException"
	}
	return *e.DynamicErrorCode
}
func (e *TagPolicyViolationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// You exceeded the rate at which you are allowed to perform this operation. Please
// try again later.
type ThrottlingException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ThrottlingException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ThrottlingException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ThrottlingException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ThrottlingException"
	}
	return *e.DynamicErrorCode
}
func (e *ThrottlingException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// A specified resource was not found.
type UnknownResourceException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *UnknownResourceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *UnknownResourceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *UnknownResourceException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "UnknownResourceException"
	}
	return *e.DynamicErrorCode
}
func (e *UnknownResourceException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
