// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dataexchange

// The type of file your data is stored in. Currently, the supported asset type
// is S3_SNAPSHOT.
type AssetType string

// Enum values for AssetType
const (
	AssetTypeS3Snapshot AssetType = "S3_SNAPSHOT"
)

func (enum AssetType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AssetType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type Code string

// Enum values for Code
const (
	CodeAccessDeniedException         Code = "ACCESS_DENIED_EXCEPTION"
	CodeInternalServerException       Code = "INTERNAL_SERVER_EXCEPTION"
	CodeMalwareDetected               Code = "MALWARE_DETECTED"
	CodeResourceNotFoundException     Code = "RESOURCE_NOT_FOUND_EXCEPTION"
	CodeServiceQuotaExceededException Code = "SERVICE_QUOTA_EXCEEDED_EXCEPTION"
	CodeValidationException           Code = "VALIDATION_EXCEPTION"
	CodeMalwareScanEncryptedFile      Code = "MALWARE_SCAN_ENCRYPTED_FILE"
)

func (enum Code) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Code) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// The name of the limit that was reached.
type JobErrorLimitName string

// Enum values for JobErrorLimitName
const (
	JobErrorLimitNameAssetsperrevision JobErrorLimitName = "Assets per revision"
	JobErrorLimitNameAssetsizeinGb     JobErrorLimitName = "Asset size in GB"
)

func (enum JobErrorLimitName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum JobErrorLimitName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// The types of resource which the job error can apply to.
type JobErrorResourceTypes string

// Enum values for JobErrorResourceTypes
const (
	JobErrorResourceTypesRevision JobErrorResourceTypes = "REVISION"
	JobErrorResourceTypesAsset    JobErrorResourceTypes = "ASSET"
)

func (enum JobErrorResourceTypes) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum JobErrorResourceTypes) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LimitName string

// Enum values for LimitName
const (
	LimitNameProductsperaccount                                   LimitName = "Products per account"
	LimitNameDatasetsperaccount                                   LimitName = "Data sets per account"
	LimitNameDatasetsperproduct                                   LimitName = "Data sets per product"
	LimitNameRevisionsperdataset                                  LimitName = "Revisions per data set"
	LimitNameAssetsperrevision                                    LimitName = "Assets per revision"
	LimitNameAssetsperimportjobfromAmazonS3                       LimitName = "Assets per import job from Amazon S3"
	LimitNameAssetperexportjobfromAmazonS3                        LimitName = "Asset per export job from Amazon S3"
	LimitNameAssetsizeinGb                                        LimitName = "Asset size in GB"
	LimitNameConcurrentinprogressjobstoimportassetsfromAmazonS3   LimitName = "Concurrent in progress jobs to import assets from Amazon S3"
	LimitNameConcurrentinprogressjobstoimportassetsfromasignedUrl LimitName = "Concurrent in progress jobs to import assets from a signed URL"
	LimitNameConcurrentinprogressjobstoexportassetstoAmazonS3     LimitName = "Concurrent in progress jobs to export assets to Amazon S3"
	LimitNameConcurrentinprogressjobstoexportassetstoasignedUrl   LimitName = "Concurrent in progress jobs to export assets to a signed URL"
)

func (enum LimitName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LimitName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// A property that defines the data set as OWNED by the account (for providers)
// or ENTITLED to the account (for subscribers). When an owned data set is published
// in a product, AWS Data Exchange creates a copy of the data set. Subscribers
// can access that copy of the data set as an entitled data set.
type Origin string

// Enum values for Origin
const (
	OriginOwned    Origin = "OWNED"
	OriginEntitled Origin = "ENTITLED"
)

func (enum Origin) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Origin) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeDataSet  ResourceType = "DATA_SET"
	ResourceTypeRevision ResourceType = "REVISION"
	ResourceTypeAsset    ResourceType = "ASSET"
	ResourceTypeJob      ResourceType = "JOB"
)

func (enum ResourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ResourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type State string

// Enum values for State
const (
	StateWaiting    State = "WAITING"
	StateInProgress State = "IN_PROGRESS"
	StateError      State = "ERROR"
	StateCompleted  State = "COMPLETED"
	StateCancelled  State = "CANCELLED"
	StateTimedOut   State = "TIMED_OUT"
)

func (enum State) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum State) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type Type string

// Enum values for Type
const (
	TypeImportAssetsFromS3       Type = "IMPORT_ASSETS_FROM_S3"
	TypeImportAssetFromSignedUrl Type = "IMPORT_ASSET_FROM_SIGNED_URL"
	TypeExportAssetsToS3         Type = "EXPORT_ASSETS_TO_S3"
	TypeExportAssetToSignedUrl   Type = "EXPORT_ASSET_TO_SIGNED_URL"
)

func (enum Type) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Type) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
