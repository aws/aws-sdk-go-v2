// Code generated by smithy-go-codegen DO NOT EDIT.

package directconnect

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Accepts ownership of a transit virtual interface created by another AWS account.
// <p> After the owner of the transit virtual interface makes this call, the
// specified transit virtual interface is created and made available to handle
// traffic.</p>
func (c *Client) ConfirmTransitVirtualInterface(ctx context.Context, params *ConfirmTransitVirtualInterfaceInput, optFns ...func(*Options)) (*ConfirmTransitVirtualInterfaceOutput, error) {
	stack := middleware.NewStack("ConfirmTransitVirtualInterface", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpConfirmTransitVirtualInterfaceMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpConfirmTransitVirtualInterfaceValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opConfirmTransitVirtualInterface(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ConfirmTransitVirtualInterface",
			Err:           err,
		}
	}
	out := result.(*ConfirmTransitVirtualInterfaceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ConfirmTransitVirtualInterfaceInput struct {
	// The ID of the virtual interface.
	VirtualInterfaceId *string
	// The ID of the Direct Connect gateway.
	DirectConnectGatewayId *string
}

type ConfirmTransitVirtualInterfaceOutput struct {
	// The state of the virtual interface. The following are the possible values:
	//
	//
	// * confirming: The creation of the virtual interface is pending confirmation from
	// the virtual interface owner. If the owner of the virtual interface is different
	// from the owner of the connection on which it is provisioned, then the virtual
	// interface will remain in this state until it is confirmed by the virtual
	// interface owner.
	//
	//     * verifying: This state only applies to public virtual
	// interfaces. Each public virtual interface needs validation before the virtual
	// interface can be created.
	//
	//     * pending: A virtual interface is in this state
	// from the time that it is created until the virtual interface is ready to forward
	// traffic.
	//
	//     * available: A virtual interface that is able to forward
	// traffic.
	//
	//     * down: A virtual interface that is BGP down.
	//
	//     * deleting: A
	// virtual interface is in this state immediately after calling
	// DeleteVirtualInterface () until it can no longer forward traffic.
	//
	//     *
	// deleted: A virtual interface that cannot forward traffic.
	//
	//     * rejected: The
	// virtual interface owner has declined creation of the virtual interface. If a
	// virtual interface in the Confirming state is deleted by the virtual interface
	// owner, the virtual interface enters the Rejected state.
	//
	//     * unknown: The
	// state of the virtual interface is not available.
	VirtualInterfaceState types.VirtualInterfaceState

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpConfirmTransitVirtualInterfaceMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpConfirmTransitVirtualInterface{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpConfirmTransitVirtualInterface{}, middleware.After)
}

func newServiceMetadataMiddleware_opConfirmTransitVirtualInterface(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "directconnect",
		OperationName: "ConfirmTransitVirtualInterface",
	}
}
