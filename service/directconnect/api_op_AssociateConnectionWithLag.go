// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
)

const opAssociateConnectionWithLag = "AssociateConnectionWithLag"

// AssociateConnectionWithLagRequest returns a request value for making API operation for
// AWS Direct Connect.
//
// Associates an existing connection with a link aggregation group (LAG). The
// connection is interrupted and re-established as a member of the LAG (connectivity
// to AWS is interrupted). The connection must be hosted on the same AWS Direct
// Connect endpoint as the LAG, and its bandwidth must match the bandwidth for
// the LAG. You can re-associate a connection that's currently associated with
// a different LAG; however, if removing the connection would cause the original
// LAG to fall below its setting for minimum number of operational connections,
// the request fails.
//
// Any virtual interfaces that are directly associated with the connection are
// automatically re-associated with the LAG. If the connection was originally
// associated with a different LAG, the virtual interfaces remain associated
// with the original LAG.
//
// For interconnects, any hosted connections are automatically re-associated
// with the LAG. If the interconnect was originally associated with a different
// LAG, the hosted connections remain associated with the original LAG.
//
//    // Example sending a request using AssociateConnectionWithLagRequest.
//    req := client.AssociateConnectionWithLagRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/directconnect-2012-10-25/AssociateConnectionWithLag
func (c *Client) AssociateConnectionWithLagRequest(input *types.AssociateConnectionWithLagInput) AssociateConnectionWithLagRequest {
	op := &aws.Operation{
		Name:       opAssociateConnectionWithLag,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AssociateConnectionWithLagInput{}
	}

	req := c.newRequest(op, input, &types.AssociateConnectionWithLagOutput{})
	return AssociateConnectionWithLagRequest{Request: req, Input: input, Copy: c.AssociateConnectionWithLagRequest}
}

// AssociateConnectionWithLagRequest is the request type for the
// AssociateConnectionWithLag API operation.
type AssociateConnectionWithLagRequest struct {
	*aws.Request
	Input *types.AssociateConnectionWithLagInput
	Copy  func(*types.AssociateConnectionWithLagInput) AssociateConnectionWithLagRequest
}

// Send marshals and sends the AssociateConnectionWithLag API request.
func (r AssociateConnectionWithLagRequest) Send(ctx context.Context) (*AssociateConnectionWithLagResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AssociateConnectionWithLagResponse{
		AssociateConnectionWithLagOutput: r.Request.Data.(*types.AssociateConnectionWithLagOutput),
		response:                         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AssociateConnectionWithLagResponse is the response type for the
// AssociateConnectionWithLag API operation.
type AssociateConnectionWithLagResponse struct {
	*types.AssociateConnectionWithLagOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AssociateConnectionWithLag request.
func (r *AssociateConnectionWithLagResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
