// Code generated by smithy-go-codegen DO NOT EDIT.

package directconnect

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Starts the virtual interface failover test that verifies your configuration
// meets your resiliency requirements by placing the BGP peering session in the
// DOWN state. You can then send traffic to verify that there are no outages. You
// can run the test on public, private, transit, and hosted virtual interfaces. You
// can use ListVirtualInterfaceTestHistory
// (https://docs.aws.amazon.com/directconnect/latest/APIReference/API_ListVirtualInterfaceTestHistory.html)
// to view the virtual interface test history. If you need to stop the test before
// the test interval completes, use StopBgpFailoverTest
// (https://docs.aws.amazon.com/directconnect/latest/APIReference/API_StopBgpFailoverTest.html).
func (c *Client) StartBgpFailoverTest(ctx context.Context, params *StartBgpFailoverTestInput, optFns ...func(*Options)) (*StartBgpFailoverTestOutput, error) {
	if params == nil {
		params = &StartBgpFailoverTestInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "StartBgpFailoverTest", params, optFns, addOperationStartBgpFailoverTestMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*StartBgpFailoverTestOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartBgpFailoverTestInput struct {

	// The ID of the virtual interface you want to test.
	//
	// This member is required.
	VirtualInterfaceId *string

	// The BGP peers to place in the DOWN state.
	BgpPeers []*string

	// The time in minutes that the virtual interface failover test will last. Maximum
	// value: 180 minutes (3 hours). Default: 180 minutes (3 hours).
	TestDurationInMinutes *int32
}

type StartBgpFailoverTestOutput struct {

	// Information about the virtual interface failover test.
	VirtualInterfaceTest *types.VirtualInterfaceTestHistory

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationStartBgpFailoverTestMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpStartBgpFailoverTest{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpStartBgpFailoverTest{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStartBgpFailoverTestValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartBgpFailoverTest(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opStartBgpFailoverTest(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "directconnect",
		OperationName: "StartBgpFailoverTest",
	}
}
