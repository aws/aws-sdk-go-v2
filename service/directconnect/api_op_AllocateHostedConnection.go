// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
)

const opAllocateHostedConnection = "AllocateHostedConnection"

// AllocateHostedConnectionRequest returns a request value for making API operation for
// AWS Direct Connect.
//
// Creates a hosted connection on the specified interconnect or a link aggregation
// group (LAG) of interconnects.
//
// Allocates a VLAN number and a specified amount of capacity (bandwidth) for
// use by a hosted connection on the specified interconnect or LAG of interconnects.
// AWS polices the hosted connection for the specified capacity and the AWS
// Direct Connect Partner must also police the hosted connection for the specified
// capacity.
//
// Intended for use by AWS Direct Connect Partners only.
//
//    // Example sending a request using AllocateHostedConnectionRequest.
//    req := client.AllocateHostedConnectionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/directconnect-2012-10-25/AllocateHostedConnection
func (c *Client) AllocateHostedConnectionRequest(input *types.AllocateHostedConnectionInput) AllocateHostedConnectionRequest {
	op := &aws.Operation{
		Name:       opAllocateHostedConnection,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AllocateHostedConnectionInput{}
	}

	req := c.newRequest(op, input, &types.AllocateHostedConnectionOutput{})
	return AllocateHostedConnectionRequest{Request: req, Input: input, Copy: c.AllocateHostedConnectionRequest}
}

// AllocateHostedConnectionRequest is the request type for the
// AllocateHostedConnection API operation.
type AllocateHostedConnectionRequest struct {
	*aws.Request
	Input *types.AllocateHostedConnectionInput
	Copy  func(*types.AllocateHostedConnectionInput) AllocateHostedConnectionRequest
}

// Send marshals and sends the AllocateHostedConnection API request.
func (r AllocateHostedConnectionRequest) Send(ctx context.Context) (*AllocateHostedConnectionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AllocateHostedConnectionResponse{
		AllocateHostedConnectionOutput: r.Request.Data.(*types.AllocateHostedConnectionOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AllocateHostedConnectionResponse is the response type for the
// AllocateHostedConnection API operation.
type AllocateHostedConnectionResponse struct {
	*types.AllocateHostedConnectionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AllocateHostedConnection request.
func (r *AllocateHostedConnectionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
