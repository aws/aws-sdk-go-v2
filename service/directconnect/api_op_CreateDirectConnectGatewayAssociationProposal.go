// Code generated by smithy-go-codegen DO NOT EDIT.

package directconnect

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a proposal to associate the specified virtual private gateway or transit
// gateway with the specified Direct Connect gateway. You can associate a Direct
// Connect gateway and virtual private gateway or transit gateway that is owned by
// any AWS account.
func (c *Client) CreateDirectConnectGatewayAssociationProposal(ctx context.Context, params *CreateDirectConnectGatewayAssociationProposalInput, optFns ...func(*Options)) (*CreateDirectConnectGatewayAssociationProposalOutput, error) {
	stack := middleware.NewStack("CreateDirectConnectGatewayAssociationProposal", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateDirectConnectGatewayAssociationProposalMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateDirectConnectGatewayAssociationProposalValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateDirectConnectGatewayAssociationProposal(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateDirectConnectGatewayAssociationProposal",
			Err:           err,
		}
	}
	out := result.(*CreateDirectConnectGatewayAssociationProposalOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateDirectConnectGatewayAssociationProposalInput struct {
	// The ID of the virtual private gateway or transit gateway.
	GatewayId *string
	// The ID of the Direct Connect gateway.
	DirectConnectGatewayId *string
	// The Amazon VPC prefixes to advertise to the Direct Connect gateway.
	AddAllowedPrefixesToDirectConnectGateway []*types.RouteFilterPrefix
	// The Amazon VPC prefixes to no longer advertise to the Direct Connect gateway.
	RemoveAllowedPrefixesToDirectConnectGateway []*types.RouteFilterPrefix
	// The ID of the AWS account that owns the Direct Connect gateway.
	DirectConnectGatewayOwnerAccount *string
}

type CreateDirectConnectGatewayAssociationProposalOutput struct {
	// Information about the Direct Connect gateway proposal.
	DirectConnectGatewayAssociationProposal *types.DirectConnectGatewayAssociationProposal

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateDirectConnectGatewayAssociationProposalMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateDirectConnectGatewayAssociationProposal{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateDirectConnectGatewayAssociationProposal{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateDirectConnectGatewayAssociationProposal(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "directconnect",
		OperationName: "CreateDirectConnectGatewayAssociationProposal",
	}
}
