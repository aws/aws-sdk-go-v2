// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
)

const opCreateLag = "CreateLag"

// CreateLagRequest returns a request value for making API operation for
// AWS Direct Connect.
//
// Creates a link aggregation group (LAG) with the specified number of bundled
// physical connections between the customer network and a specific AWS Direct
// Connect location. A LAG is a logical interface that uses the Link Aggregation
// Control Protocol (LACP) to aggregate multiple interfaces, enabling you to
// treat them as a single interface.
//
// All connections in a LAG must use the same bandwidth and must terminate at
// the same AWS Direct Connect endpoint.
//
// You can have up to 10 connections per LAG. Regardless of this limit, if you
// request more connections for the LAG than AWS Direct Connect can allocate
// on a single endpoint, no LAG is created.
//
// You can specify an existing physical connection or interconnect to include
// in the LAG (which counts towards the total number of connections). Doing
// so interrupts the current physical connection or hosted connections, and
// re-establishes them as a member of the LAG. The LAG will be created on the
// same AWS Direct Connect endpoint to which the connection terminates. Any
// virtual interfaces associated with the connection are automatically disassociated
// and re-associated with the LAG. The connection ID does not change.
//
// If the AWS account used to create a LAG is a registered AWS Direct Connect
// Partner, the LAG is automatically enabled to host sub-connections. For a
// LAG owned by a partner, any associated virtual interfaces cannot be directly
// configured.
//
//    // Example sending a request using CreateLagRequest.
//    req := client.CreateLagRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/directconnect-2012-10-25/CreateLag
func (c *Client) CreateLagRequest(input *types.CreateLagInput) CreateLagRequest {
	op := &aws.Operation{
		Name:       opCreateLag,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateLagInput{}
	}

	req := c.newRequest(op, input, &types.CreateLagOutput{})
	return CreateLagRequest{Request: req, Input: input, Copy: c.CreateLagRequest}
}

// CreateLagRequest is the request type for the
// CreateLag API operation.
type CreateLagRequest struct {
	*aws.Request
	Input *types.CreateLagInput
	Copy  func(*types.CreateLagInput) CreateLagRequest
}

// Send marshals and sends the CreateLag API request.
func (r CreateLagRequest) Send(ctx context.Context) (*CreateLagResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateLagResponse{
		CreateLagOutput: r.Request.Data.(*types.CreateLagOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateLagResponse is the response type for the
// CreateLag API operation.
type CreateLagResponse struct {
	*types.CreateLagOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateLag request.
func (r *CreateLagResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
