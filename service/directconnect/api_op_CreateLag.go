// Code generated by smithy-go-codegen DO NOT EDIT.

package directconnect

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a link aggregation group (LAG) with the specified number of bundled
// physical connections between the customer network and a specific AWS Direct
// Connect location. A LAG is a logical interface that uses the Link Aggregation
// Control Protocol (LACP) to aggregate multiple interfaces, enabling you to treat
// them as a single interface. All connections in a LAG must use the same bandwidth
// and must terminate at the same AWS Direct Connect endpoint. You can have up to
// 10 connections per LAG. Regardless of this limit, if you request more
// connections for the LAG than AWS Direct Connect can allocate on a single
// endpoint, no LAG is created. You can specify an existing physical connection or
// interconnect to include in the LAG (which counts towards the total number of
// connections). Doing so interrupts the current physical connection or hosted
// connections, and re-establishes them as a member of the LAG. The LAG will be
// created on the same AWS Direct Connect endpoint to which the connection
// terminates. Any virtual interfaces associated with the connection are
// automatically disassociated and re-associated with the LAG. The connection ID
// does not change. If the AWS account used to create a LAG is a registered AWS
// Direct Connect Partner, the LAG is automatically enabled to host
// sub-connections. For a LAG owned by a partner, any associated virtual interfaces
// cannot be directly configured.
func (c *Client) CreateLag(ctx context.Context, params *CreateLagInput, optFns ...func(*Options)) (*CreateLagOutput, error) {
	stack := middleware.NewStack("CreateLag", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateLagMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateLagValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateLag(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateLag",
			Err:           err,
		}
	}
	out := result.(*CreateLagOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateLagInput struct {
	// The ID of an existing connection to migrate to the LAG.
	ConnectionId *string
	// The name of the service provider associated with the LAG.
	ProviderName *string
	// The number of physical connections initially provisioned and bundled by the LAG.
	NumberOfConnections *int32
	// The tags to associate with the LAG.
	Tags []*types.Tag
	// The tags to associate with the automtically created LAGs.
	ChildConnectionTags []*types.Tag
	// The location for the LAG.
	Location *string
	// The bandwidth of the individual physical connections bundled by the LAG. The
	// possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps,
	// 2Gbps, 5Gbps, and 10Gbps.
	ConnectionsBandwidth *string
	// The name of the LAG.
	LagName *string
}

// Information about a link aggregation group (LAG).
type CreateLagOutput struct {
	// The name of the service provider associated with the LAG.
	ProviderName *string
	// Indicates whether the LAG supports a secondary BGP peer in the same address
	// family (IPv4/IPv6).
	HasLogicalRedundancy types.HasLogicalRedundancy
	// The AWS Direct Connect endpoint that hosts the LAG.
	AwsDeviceV2 *string
	// The AWS Direct Connect endpoint that hosts the LAG.
	AwsDevice *string
	// The ID of the LAG.
	LagId *string
	// The state of the LAG. The following are the possible values:
	//
	//     * requested:
	// The initial state of a LAG. The LAG stays in the requested state until the
	// Letter of Authorization (LOA) is available.
	//
	//     * pending: The LAG has been
	// approved and is being initialized.
	//
	//     * available: The network link is
	// established and the LAG is ready for use.
	//
	//     * down: The network link is
	// down.
	//
	//     * deleting: The LAG is being deleted.
	//
	//     * deleted: The LAG is
	// deleted.
	//
	//     * unknown: The state of the LAG is not available.
	LagState types.LagState
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable *bool
	// Indicates whether the LAG can host other connections.
	AllowsHostedConnections *bool
	// The individual bandwidth of the physical connections bundled by the LAG. The
	// possible values are 1Gbps and 10Gbps.
	ConnectionsBandwidth *string
	// The tags associated with the LAG.
	Tags []*types.Tag
	// The location of the LAG.
	Location *string
	// The name of the LAG.
	LagName *string
	// The number of physical connections bundled by the LAG, up to a maximum of 10.
	NumberOfConnections *int32
	// The ID of the AWS account that owns the LAG.
	OwnerAccount *string
	// The connections bundled by the LAG.
	Connections []*types.Connection
	// The AWS Region where the connection is located.
	Region *string
	// The minimum number of physical connections that must be operational for the LAG
	// itself to be operational.
	MinimumLinks *int32

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateLagMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateLag{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateLag{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateLag(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "directconnect",
		OperationName: "CreateLag",
	}
}
