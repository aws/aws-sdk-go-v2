// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect/types"
)

const opCreateInterconnect = "CreateInterconnect"

// CreateInterconnectRequest returns a request value for making API operation for
// AWS Direct Connect.
//
// Creates an interconnect between an AWS Direct Connect Partner's network and
// a specific AWS Direct Connect location.
//
// An interconnect is a connection that is capable of hosting other connections.
// The AWS Direct Connect partner can use an interconnect to provide AWS Direct
// Connect hosted connections to customers through their own network services.
// Like a standard connection, an interconnect links the partner's network to
// an AWS Direct Connect location over a standard Ethernet fiber-optic cable.
// One end is connected to the partner's router, the other to an AWS Direct
// Connect router.
//
// You can automatically add the new interconnect to a link aggregation group
// (LAG) by specifying a LAG ID in the request. This ensures that the new interconnect
// is allocated on the same AWS Direct Connect endpoint that hosts the specified
// LAG. If there are no available ports on the endpoint, the request fails and
// no interconnect is created.
//
// For each end customer, the AWS Direct Connect Partner provisions a connection
// on their interconnect by calling AllocateHostedConnection. The end customer
// can then connect to AWS resources by creating a virtual interface on their
// connection, using the VLAN assigned to them by the AWS Direct Connect Partner.
//
// Intended for use by AWS Direct Connect Partners only.
//
//    // Example sending a request using CreateInterconnectRequest.
//    req := client.CreateInterconnectRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/directconnect-2012-10-25/CreateInterconnect
func (c *Client) CreateInterconnectRequest(input *types.CreateInterconnectInput) CreateInterconnectRequest {
	op := &aws.Operation{
		Name:       opCreateInterconnect,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateInterconnectInput{}
	}

	req := c.newRequest(op, input, &types.CreateInterconnectOutput{})
	return CreateInterconnectRequest{Request: req, Input: input, Copy: c.CreateInterconnectRequest}
}

// CreateInterconnectRequest is the request type for the
// CreateInterconnect API operation.
type CreateInterconnectRequest struct {
	*aws.Request
	Input *types.CreateInterconnectInput
	Copy  func(*types.CreateInterconnectInput) CreateInterconnectRequest
}

// Send marshals and sends the CreateInterconnect API request.
func (r CreateInterconnectRequest) Send(ctx context.Context) (*CreateInterconnectResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateInterconnectResponse{
		CreateInterconnectOutput: r.Request.Data.(*types.CreateInterconnectOutput),
		response:                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateInterconnectResponse is the response type for the
// CreateInterconnect API operation.
type CreateInterconnectResponse struct {
	*types.CreateInterconnectOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateInterconnect request.
func (r *CreateInterconnectResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
