// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package snowball

type ClusterState string

// Enum values for ClusterState
const (
	ClusterStateAwaitingQuorum ClusterState = "AwaitingQuorum"
	ClusterStatePending        ClusterState = "Pending"
	ClusterStateInUse          ClusterState = "InUse"
	ClusterStateComplete       ClusterState = "Complete"
	ClusterStateCancelled      ClusterState = "Cancelled"
)

func (enum ClusterState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ClusterState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type JobState string

// Enum values for JobState
const (
	JobStateNew                    JobState = "New"
	JobStatePreparingAppliance     JobState = "PreparingAppliance"
	JobStatePreparingShipment      JobState = "PreparingShipment"
	JobStateInTransitToCustomer    JobState = "InTransitToCustomer"
	JobStateWithCustomer           JobState = "WithCustomer"
	JobStateInTransitToAws         JobState = "InTransitToAWS"
	JobStateWithAwssortingFacility JobState = "WithAWSSortingFacility"
	JobStateWithAws                JobState = "WithAWS"
	JobStateInProgress             JobState = "InProgress"
	JobStateComplete               JobState = "Complete"
	JobStateCancelled              JobState = "Cancelled"
	JobStateListing                JobState = "Listing"
	JobStatePending                JobState = "Pending"
)

func (enum JobState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum JobState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type JobType string

// Enum values for JobType
const (
	JobTypeImport   JobType = "IMPORT"
	JobTypeExport   JobType = "EXPORT"
	JobTypeLocalUse JobType = "LOCAL_USE"
)

func (enum JobType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum JobType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ShippingOption string

// Enum values for ShippingOption
const (
	ShippingOptionSecondDay ShippingOption = "SECOND_DAY"
	ShippingOptionNextDay   ShippingOption = "NEXT_DAY"
	ShippingOptionExpress   ShippingOption = "EXPRESS"
	ShippingOptionStandard  ShippingOption = "STANDARD"
)

func (enum ShippingOption) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ShippingOption) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SnowballCapacity string

// Enum values for SnowballCapacity
const (
	SnowballCapacityT50          SnowballCapacity = "T50"
	SnowballCapacityT80          SnowballCapacity = "T80"
	SnowballCapacityT100         SnowballCapacity = "T100"
	SnowballCapacityT42          SnowballCapacity = "T42"
	SnowballCapacityT98          SnowballCapacity = "T98"
	SnowballCapacityNoPreference SnowballCapacity = "NoPreference"
)

func (enum SnowballCapacity) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SnowballCapacity) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SnowballType string

// Enum values for SnowballType
const (
	SnowballTypeStandard SnowballType = "STANDARD"
	SnowballTypeEdge     SnowballType = "EDGE"
	SnowballTypeEdgeC    SnowballType = "EDGE_C"
	SnowballTypeEdgeCg   SnowballType = "EDGE_CG"
	SnowballTypeEdgeS    SnowballType = "EDGE_S"
)

func (enum SnowballType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SnowballType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
