// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package snowballiface provides an interface to enable mocking the Amazon Import/Export Snowball service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package snowballiface

import (
	"github.com/aws/aws-sdk-go-v2/service/snowball"
	"github.com/aws/aws-sdk-go-v2/service/snowball/types"
)

// ClientAPI provides an interface to enable mocking the
// snowball.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon Snowball.
//    func myFunc(svc snowballiface.ClientAPI) bool {
//        // Make svc.CancelCluster request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := snowball.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        snowballiface.ClientPI
//    }
//    func (m *mockClientClient) CancelCluster(input *types.CancelClusterInput) (*types.CancelClusterOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	CancelClusterRequest(*types.CancelClusterInput) snowball.CancelClusterRequest

	CancelJobRequest(*types.CancelJobInput) snowball.CancelJobRequest

	CreateAddressRequest(*types.CreateAddressInput) snowball.CreateAddressRequest

	CreateClusterRequest(*types.CreateClusterInput) snowball.CreateClusterRequest

	CreateJobRequest(*types.CreateJobInput) snowball.CreateJobRequest

	DescribeAddressRequest(*types.DescribeAddressInput) snowball.DescribeAddressRequest

	DescribeAddressesRequest(*types.DescribeAddressesInput) snowball.DescribeAddressesRequest

	DescribeClusterRequest(*types.DescribeClusterInput) snowball.DescribeClusterRequest

	DescribeJobRequest(*types.DescribeJobInput) snowball.DescribeJobRequest

	GetJobManifestRequest(*types.GetJobManifestInput) snowball.GetJobManifestRequest

	GetJobUnlockCodeRequest(*types.GetJobUnlockCodeInput) snowball.GetJobUnlockCodeRequest

	GetSnowballUsageRequest(*types.GetSnowballUsageInput) snowball.GetSnowballUsageRequest

	GetSoftwareUpdatesRequest(*types.GetSoftwareUpdatesInput) snowball.GetSoftwareUpdatesRequest

	ListClusterJobsRequest(*types.ListClusterJobsInput) snowball.ListClusterJobsRequest

	ListClustersRequest(*types.ListClustersInput) snowball.ListClustersRequest

	ListCompatibleImagesRequest(*types.ListCompatibleImagesInput) snowball.ListCompatibleImagesRequest

	ListJobsRequest(*types.ListJobsInput) snowball.ListJobsRequest

	UpdateClusterRequest(*types.UpdateClusterInput) snowball.UpdateClusterRequest

	UpdateJobRequest(*types.UpdateJobInput) snowball.UpdateJobRequest
}

var _ ClientAPI = (*snowball.Client)(nil)
