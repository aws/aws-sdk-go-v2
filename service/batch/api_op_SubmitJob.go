// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package batch

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/batch/types"
)

const opSubmitJob = "SubmitJob"

// SubmitJobRequest returns a request value for making API operation for
// AWS Batch.
//
// Submits an AWS Batch job from a job definition. Parameters specified during
// SubmitJob override parameters defined in the job definition.
//
//    // Example sending a request using SubmitJobRequest.
//    req := client.SubmitJobRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/batch-2016-08-10/SubmitJob
func (c *Client) SubmitJobRequest(input *types.SubmitJobInput) SubmitJobRequest {
	op := &aws.Operation{
		Name:       opSubmitJob,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/submitjob",
	}

	if input == nil {
		input = &types.SubmitJobInput{}
	}

	req := c.newRequest(op, input, &types.SubmitJobOutput{})
	return SubmitJobRequest{Request: req, Input: input, Copy: c.SubmitJobRequest}
}

// SubmitJobRequest is the request type for the
// SubmitJob API operation.
type SubmitJobRequest struct {
	*aws.Request
	Input *types.SubmitJobInput
	Copy  func(*types.SubmitJobInput) SubmitJobRequest
}

// Send marshals and sends the SubmitJob API request.
func (r SubmitJobRequest) Send(ctx context.Context) (*SubmitJobResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SubmitJobResponse{
		SubmitJobOutput: r.Request.Data.(*types.SubmitJobOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SubmitJobResponse is the response type for the
// SubmitJob API operation.
type SubmitJobResponse struct {
	*types.SubmitJobOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SubmitJob request.
func (r *SubmitJobResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
