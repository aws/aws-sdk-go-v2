// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package workdocs

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workdocs/types"
)

const opDescribeUsers = "DescribeUsers"

// DescribeUsersRequest returns a request value for making API operation for
// Amazon WorkDocs.
//
// Describes the specified users. You can describe all users or filter the results
// (for example, by status or organization).
//
// By default, Amazon WorkDocs returns the first 24 active or pending users.
// If there are more results, the response includes a marker that you can use
// to request the next set of results.
//
//    // Example sending a request using DescribeUsersRequest.
//    req := client.DescribeUsersRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/workdocs-2016-05-01/DescribeUsers
func (c *Client) DescribeUsersRequest(input *types.DescribeUsersInput) DescribeUsersRequest {
	op := &aws.Operation{
		Name:       opDescribeUsers,
		HTTPMethod: "GET",
		HTTPPath:   "/api/v1/users",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "Limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeUsersInput{}
	}

	req := c.newRequest(op, input, &types.DescribeUsersOutput{})
	return DescribeUsersRequest{Request: req, Input: input, Copy: c.DescribeUsersRequest}
}

// DescribeUsersRequest is the request type for the
// DescribeUsers API operation.
type DescribeUsersRequest struct {
	*aws.Request
	Input *types.DescribeUsersInput
	Copy  func(*types.DescribeUsersInput) DescribeUsersRequest
}

// Send marshals and sends the DescribeUsers API request.
func (r DescribeUsersRequest) Send(ctx context.Context) (*DescribeUsersResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeUsersResponse{
		DescribeUsersOutput: r.Request.Data.(*types.DescribeUsersOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeUsersRequestPaginator returns a paginator for DescribeUsers.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeUsersRequest(input)
//   p := workdocs.NewDescribeUsersRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeUsersPaginator(req DescribeUsersRequest) DescribeUsersPaginator {
	return DescribeUsersPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeUsersInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeUsersPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeUsersPaginator struct {
	aws.Pager
}

func (p *DescribeUsersPaginator) CurrentPage() *types.DescribeUsersOutput {
	return p.Pager.CurrentPage().(*types.DescribeUsersOutput)
}

// DescribeUsersResponse is the response type for the
// DescribeUsers API operation.
type DescribeUsersResponse struct {
	*types.DescribeUsersOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeUsers request.
func (r *DescribeUsersResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
