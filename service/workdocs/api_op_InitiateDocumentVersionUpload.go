// Code generated by smithy-go-codegen DO NOT EDIT.

package workdocs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/workdocs/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Creates a new document object and version object. The client specifies the
// parent folder ID and name of the document to upload. The ID is optionally
// specified when creating a new version of an existing document. This is the first
// step to upload a document. Next, upload the document to the URL returned from
// the call, and then call UpdateDocumentVersion (). To cancel the document upload,
// call AbortDocumentVersionUpload ().
func (c *Client) InitiateDocumentVersionUpload(ctx context.Context, params *InitiateDocumentVersionUploadInput, optFns ...func(*Options)) (*InitiateDocumentVersionUploadOutput, error) {
	stack := middleware.NewStack("InitiateDocumentVersionUpload", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpInitiateDocumentVersionUploadMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpInitiateDocumentVersionUploadValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opInitiateDocumentVersionUpload(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "InitiateDocumentVersionUpload",
			Err:           err,
		}
	}
	out := result.(*InitiateDocumentVersionUploadOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type InitiateDocumentVersionUploadInput struct {
	// The content type of the document.
	ContentType *string
	// The ID of the document.
	Id *string
	// The ID of the parent folder.
	ParentFolderId *string
	// Amazon WorkDocs authentication token. Not required when using AWS administrator
	// credentials to access the API.
	AuthenticationToken *string
	// The timestamp when the content of the document was modified.
	ContentModifiedTimestamp *time.Time
	// The name of the document.
	Name *string
	// The size of the document, in bytes.
	DocumentSizeInBytes *int64
	// The timestamp when the content of the document was originally created.
	ContentCreatedTimestamp *time.Time
}

type InitiateDocumentVersionUploadOutput struct {
	// The upload metadata.
	UploadMetadata *types.UploadMetadata
	// The document metadata.
	Metadata *types.DocumentMetadata

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpInitiateDocumentVersionUploadMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpInitiateDocumentVersionUpload{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpInitiateDocumentVersionUpload{}, middleware.After)
}

func newServiceMetadataMiddleware_opInitiateDocumentVersionUpload(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "workdocs",
		OperationName: "InitiateDocumentVersionUpload",
	}
}
