// Code generated by smithy-go-codegen DO NOT EDIT.

package firehose

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a Kinesis Data Firehose delivery stream.  <p>By default, you can create
// up to 50 delivery streams per AWS Region.</p> <p>This is an asynchronous
// operation that immediately returns. The initial status of the delivery stream is
// <code>CREATING</code>. After the delivery stream is created, its status is
// <code>ACTIVE</code> and it now accepts data. If the delivery stream creation
// fails, the status transitions to <code>CREATING_FAILED</code>. Attempts to send
// data to a delivery stream that is not in the <code>ACTIVE</code> state cause an
// exception. To check the state of a delivery stream, use
// <a>DescribeDeliveryStream</a>.</p> <p>If the status of a delivery stream is
// <code>CREATING_FAILED</code>, this status doesn't change, and you can't invoke
// <code>CreateDeliveryStream</code> again on it. However, you can invoke the
// <a>DeleteDeliveryStream</a> operation to delete it.</p> <p>A Kinesis Data
// Firehose delivery stream can be configured to receive records directly from
// providers using <a>PutRecord</a> or <a>PutRecordBatch</a>, or it can be
// configured to use an existing Kinesis stream as its source. To specify a Kinesis
// data stream as input, set the <code>DeliveryStreamType</code> parameter to
// <code>KinesisStreamAsSource</code>, and provide the Kinesis stream Amazon
// Resource Name (ARN) and role ARN in the
// <code>KinesisStreamSourceConfiguration</code> parameter.</p> <p>To create a
// delivery stream with server-side encryption (SSE) enabled, include
// <a>DeliveryStreamEncryptionConfigurationInput</a> in your request. This is
// optional. You can also invoke <a>StartDeliveryStreamEncryption</a> to turn on
// SSE for an existing delivery stream that doesn't have SSE enabled.</p> <p>A
// delivery stream is configured with a single destination: Amazon S3, Amazon ES,
// Amazon Redshift, or Splunk. You must specify only one of the following
// destination configuration parameters:
// <code>ExtendedS3DestinationConfiguration</code>,
// <code>S3DestinationConfiguration</code>,
// <code>ElasticsearchDestinationConfiguration</code>,
// <code>RedshiftDestinationConfiguration</code>, or
// <code>SplunkDestinationConfiguration</code>.</p> <p>When you specify
// <code>S3DestinationConfiguration</code>, you can also provide the following
// optional values: BufferingHints, <code>EncryptionConfiguration</code>, and
// <code>CompressionFormat</code>. By default, if no <code>BufferingHints</code>
// value is provided, Kinesis Data Firehose buffers data up to 5 MB or for 5
// minutes, whichever condition is satisfied first. <code>BufferingHints</code> is
// a hint, so there are some cases where the service cannot adhere to these
// conditions strictly. For example, record boundaries might be such that the size
// is a little over or under the configured buffering size. By default, no
// encryption is performed. We strongly recommend that you enable encryption to
// ensure secure data storage in Amazon S3.</p> <p>A few notes about Amazon
// Redshift as a destination:</p> <ul> <li> <p>An Amazon Redshift destination
// requires an S3 bucket as intermediate location. Kinesis Data Firehose first
// delivers data to Amazon S3 and then uses <code>COPY</code> syntax to load data
// into an Amazon Redshift table. This is specified in the
// <code>RedshiftDestinationConfiguration.S3Configuration</code> parameter.</p>
// </li> <li> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code>
// cannot be specified in
// <code>RedshiftDestinationConfiguration.S3Configuration</code> because the Amazon
// Redshift <code>COPY</code> operation that reads from the S3 bucket doesn't
// support these compression formats.</p> </li> <li> <p>We strongly recommend that
// you use the user name and password you provide exclusively with Kinesis Data
// Firehose, and that the permissions for the account are restricted for Amazon
// Redshift <code>INSERT</code> permissions.</p> </li> </ul> <p>Kinesis Data
// Firehose assumes the IAM role that is configured as part of the destination. The
// role should allow the Kinesis Data Firehose principal to assume the role, and
// the role should have permissions that allow the service to deliver the data. For
// more information, see <a
// href="https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3">Grant
// Kinesis Data Firehose Access to an Amazon S3 Destination</a> in the <i>Amazon
// Kinesis Data Firehose Developer Guide</i>.</p>
func (c *Client) CreateDeliveryStream(ctx context.Context, params *CreateDeliveryStreamInput, optFns ...func(*Options)) (*CreateDeliveryStreamOutput, error) {
	stack := middleware.NewStack("CreateDeliveryStream", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateDeliveryStreamMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateDeliveryStreamValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateDeliveryStream(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateDeliveryStream",
			Err:           err,
		}
	}
	out := result.(*CreateDeliveryStreamOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateDeliveryStreamInput struct {
	// The destination in Amazon Redshift. You can specify only one destination.
	RedshiftDestinationConfiguration *types.RedshiftDestinationConfiguration
	// [Deprecated] The destination in Amazon S3. You can specify only one destination.
	S3DestinationConfiguration *types.S3DestinationConfiguration
	// The delivery stream type. This parameter can be one of the following values:
	//
	//
	// * DirectPut: Provider applications access the delivery stream directly.
	//
	//     *
	// KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a
	// source.
	DeliveryStreamType types.DeliveryStreamType
	// The destination in Splunk. You can specify only one destination.
	SplunkDestinationConfiguration *types.SplunkDestinationConfiguration
	// The name of the delivery stream. This name must be unique per AWS account in the
	// same AWS Region. If the delivery streams are in different accounts or different
	// Regions, you can have multiple delivery streams with the same name.
	DeliveryStreamName *string
	// When a Kinesis data stream is used as the source for the delivery stream, a
	// KinesisStreamSourceConfiguration () containing the Kinesis data stream Amazon
	// Resource Name (ARN) and the role ARN for the source stream.
	KinesisStreamSourceConfiguration *types.KinesisStreamSourceConfiguration
	// The destination in Amazon ES. You can specify only one destination.
	ElasticsearchDestinationConfiguration *types.ElasticsearchDestinationConfiguration
	// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed
	// for Server-Side Encryption (SSE).
	DeliveryStreamEncryptionConfigurationInput *types.DeliveryStreamEncryptionConfigurationInput
	// Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint
	// destination. You can specify only one destination.
	HttpEndpointDestinationConfiguration *types.HttpEndpointDestinationConfiguration
	// A set of tags to assign to the delivery stream. A tag is a key-value pair that
	// you can define and assign to AWS resources. Tags are metadata. For example, you
	// can add friendly names and descriptions or other types of information that can
	// help you distinguish the delivery stream. For more information about tags, see
	// Using Cost Allocation Tags
	// (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the AWS Billing and Cost Management User Guide.  <p>You can specify up to 50
	// tags when creating a delivery stream.</p>
	Tags []*types.Tag
	// The destination in Amazon S3. You can specify only one destination.
	ExtendedS3DestinationConfiguration *types.ExtendedS3DestinationConfiguration
}

type CreateDeliveryStreamOutput struct {
	// The ARN of the delivery stream.
	DeliveryStreamARN *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateDeliveryStreamMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateDeliveryStream{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateDeliveryStream{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateDeliveryStream(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "firehose",
		OperationName: "CreateDeliveryStream",
	}
}
