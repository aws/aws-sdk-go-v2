// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elasticloadbalancing

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing/types"
)

const opAttachLoadBalancerToSubnets = "AttachLoadBalancerToSubnets"

// AttachLoadBalancerToSubnetsRequest returns a request value for making API operation for
// Elastic Load Balancing.
//
// Adds one or more subnets to the set of configured subnets for the specified
// load balancer.
//
// The load balancer evenly distributes requests across all registered subnets.
// For more information, see Add or Remove Subnets for Your Load Balancer in
// a VPC (http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html)
// in the Classic Load Balancers Guide.
//
//    // Example sending a request using AttachLoadBalancerToSubnetsRequest.
//    req := client.AttachLoadBalancerToSubnetsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/elasticloadbalancing-2012-06-01/AttachLoadBalancerToSubnets
func (c *Client) AttachLoadBalancerToSubnetsRequest(input *types.AttachLoadBalancerToSubnetsInput) AttachLoadBalancerToSubnetsRequest {
	op := &aws.Operation{
		Name:       opAttachLoadBalancerToSubnets,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AttachLoadBalancerToSubnetsInput{}
	}

	req := c.newRequest(op, input, &types.AttachLoadBalancerToSubnetsOutput{})
	return AttachLoadBalancerToSubnetsRequest{Request: req, Input: input, Copy: c.AttachLoadBalancerToSubnetsRequest}
}

// AttachLoadBalancerToSubnetsRequest is the request type for the
// AttachLoadBalancerToSubnets API operation.
type AttachLoadBalancerToSubnetsRequest struct {
	*aws.Request
	Input *types.AttachLoadBalancerToSubnetsInput
	Copy  func(*types.AttachLoadBalancerToSubnetsInput) AttachLoadBalancerToSubnetsRequest
}

// Send marshals and sends the AttachLoadBalancerToSubnets API request.
func (r AttachLoadBalancerToSubnetsRequest) Send(ctx context.Context) (*AttachLoadBalancerToSubnetsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AttachLoadBalancerToSubnetsResponse{
		AttachLoadBalancerToSubnetsOutput: r.Request.Data.(*types.AttachLoadBalancerToSubnetsOutput),
		response:                          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AttachLoadBalancerToSubnetsResponse is the response type for the
// AttachLoadBalancerToSubnets API operation.
type AttachLoadBalancerToSubnetsResponse struct {
	*types.AttachLoadBalancerToSubnetsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AttachLoadBalancerToSubnets request.
func (r *AttachLoadBalancerToSubnetsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
