// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elasticloadbalancing

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing/types"
)

const opSetLoadBalancerListenerSSLCertificate = "SetLoadBalancerListenerSSLCertificate"

// SetLoadBalancerListenerSSLCertificateRequest returns a request value for making API operation for
// Elastic Load Balancing.
//
// Sets the certificate that terminates the specified listener's SSL connections.
// The specified certificate replaces any prior certificate that was used on
// the same load balancer and port.
//
// For more information about updating your SSL certificate, see Replace the
// SSL Certificate for Your Load Balancer (http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html)
// in the Classic Load Balancers Guide.
//
//    // Example sending a request using SetLoadBalancerListenerSSLCertificateRequest.
//    req := client.SetLoadBalancerListenerSSLCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/elasticloadbalancing-2012-06-01/SetLoadBalancerListenerSSLCertificate
func (c *Client) SetLoadBalancerListenerSSLCertificateRequest(input *types.SetLoadBalancerListenerSSLCertificateInput) SetLoadBalancerListenerSSLCertificateRequest {
	op := &aws.Operation{
		Name:       opSetLoadBalancerListenerSSLCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.SetLoadBalancerListenerSSLCertificateInput{}
	}

	req := c.newRequest(op, input, &types.SetLoadBalancerListenerSSLCertificateOutput{})
	return SetLoadBalancerListenerSSLCertificateRequest{Request: req, Input: input, Copy: c.SetLoadBalancerListenerSSLCertificateRequest}
}

// SetLoadBalancerListenerSSLCertificateRequest is the request type for the
// SetLoadBalancerListenerSSLCertificate API operation.
type SetLoadBalancerListenerSSLCertificateRequest struct {
	*aws.Request
	Input *types.SetLoadBalancerListenerSSLCertificateInput
	Copy  func(*types.SetLoadBalancerListenerSSLCertificateInput) SetLoadBalancerListenerSSLCertificateRequest
}

// Send marshals and sends the SetLoadBalancerListenerSSLCertificate API request.
func (r SetLoadBalancerListenerSSLCertificateRequest) Send(ctx context.Context) (*SetLoadBalancerListenerSSLCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SetLoadBalancerListenerSSLCertificateResponse{
		SetLoadBalancerListenerSSLCertificateOutput: r.Request.Data.(*types.SetLoadBalancerListenerSSLCertificateOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SetLoadBalancerListenerSSLCertificateResponse is the response type for the
// SetLoadBalancerListenerSSLCertificate API operation.
type SetLoadBalancerListenerSSLCertificateResponse struct {
	*types.SetLoadBalancerListenerSSLCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SetLoadBalancerListenerSSLCertificate request.
func (r *SetLoadBalancerListenerSSLCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
