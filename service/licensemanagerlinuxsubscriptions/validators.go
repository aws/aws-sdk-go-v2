// Code generated by smithy-go-codegen DO NOT EDIT.

package licensemanagerlinuxsubscriptions

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/licensemanagerlinuxsubscriptions/types"
	smithy "github.com/aws/smithy-go"
	"github.com/aws/smithy-go/middleware"
)

type validateOpUpdateServiceSettings struct {
}

func (*validateOpUpdateServiceSettings) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateServiceSettings) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateServiceSettingsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateServiceSettingsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpUpdateServiceSettingsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateServiceSettings{}, middleware.After)
}

func validateLinuxSubscriptionsDiscoverySettings(v *types.LinuxSubscriptionsDiscoverySettings) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "LinuxSubscriptionsDiscoverySettings"}
	if v.SourceRegions == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SourceRegions"))
	}
	if len(v.OrganizationIntegration) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("OrganizationIntegration"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateServiceSettingsInput(v *UpdateServiceSettingsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateServiceSettingsInput"}
	if len(v.LinuxSubscriptionsDiscovery) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("LinuxSubscriptionsDiscovery"))
	}
	if v.LinuxSubscriptionsDiscoverySettings == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LinuxSubscriptionsDiscoverySettings"))
	} else if v.LinuxSubscriptionsDiscoverySettings != nil {
		if err := validateLinuxSubscriptionsDiscoverySettings(v.LinuxSubscriptionsDiscoverySettings); err != nil {
			invalidParams.AddNested("LinuxSubscriptionsDiscoverySettings", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
