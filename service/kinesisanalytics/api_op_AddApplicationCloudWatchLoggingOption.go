// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kinesisanalytics

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalytics/types"
)

const opAddApplicationCloudWatchLoggingOption = "AddApplicationCloudWatchLoggingOption"

// AddApplicationCloudWatchLoggingOptionRequest returns a request value for making API operation for
// Amazon Kinesis Analytics.
//
//
// This documentation is for version 1 of the Amazon Kinesis Data Analytics
// API, which only supports SQL applications. Version 2 of the API supports
// SQL and Java applications. For more information about version 2, see Amazon
// Kinesis Data Analytics API V2 Documentation (/kinesisanalytics/latest/apiv2/Welcome.html).
//
// Adds a CloudWatch log stream to monitor application configuration errors.
// For more information about using CloudWatch log streams with Amazon Kinesis
// Analytics applications, see Working with Amazon CloudWatch Logs (https://docs.aws.amazon.com/kinesisanalytics/latest/dev/cloudwatch-logs.html).
//
//    // Example sending a request using AddApplicationCloudWatchLoggingOptionRequest.
//    req := client.AddApplicationCloudWatchLoggingOptionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kinesisanalytics-2015-08-14/AddApplicationCloudWatchLoggingOption
func (c *Client) AddApplicationCloudWatchLoggingOptionRequest(input *types.AddApplicationCloudWatchLoggingOptionInput) AddApplicationCloudWatchLoggingOptionRequest {
	op := &aws.Operation{
		Name:       opAddApplicationCloudWatchLoggingOption,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AddApplicationCloudWatchLoggingOptionInput{}
	}

	req := c.newRequest(op, input, &types.AddApplicationCloudWatchLoggingOptionOutput{})
	return AddApplicationCloudWatchLoggingOptionRequest{Request: req, Input: input, Copy: c.AddApplicationCloudWatchLoggingOptionRequest}
}

// AddApplicationCloudWatchLoggingOptionRequest is the request type for the
// AddApplicationCloudWatchLoggingOption API operation.
type AddApplicationCloudWatchLoggingOptionRequest struct {
	*aws.Request
	Input *types.AddApplicationCloudWatchLoggingOptionInput
	Copy  func(*types.AddApplicationCloudWatchLoggingOptionInput) AddApplicationCloudWatchLoggingOptionRequest
}

// Send marshals and sends the AddApplicationCloudWatchLoggingOption API request.
func (r AddApplicationCloudWatchLoggingOptionRequest) Send(ctx context.Context) (*AddApplicationCloudWatchLoggingOptionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AddApplicationCloudWatchLoggingOptionResponse{
		AddApplicationCloudWatchLoggingOptionOutput: r.Request.Data.(*types.AddApplicationCloudWatchLoggingOptionOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AddApplicationCloudWatchLoggingOptionResponse is the response type for the
// AddApplicationCloudWatchLoggingOption API operation.
type AddApplicationCloudWatchLoggingOptionResponse struct {
	*types.AddApplicationCloudWatchLoggingOptionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AddApplicationCloudWatchLoggingOption request.
func (r *AddApplicationCloudWatchLoggingOptionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
