// Code generated by smithy-go-codegen DO NOT EDIT.

package sts

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Decodes additional information about the authorization status of a request from
// an encoded message returned in response to an AWS request. For example, if a
// user is not authorized to perform an operation that he or she has requested, the
// request returns a Client.UnauthorizedOperation response (an HTTP 403 response).
// Some AWS operations additionally return an encoded message that can provide
// details about this authorization failure. Only certain AWS operations return an
// encoded authorization message. The documentation for an individual operation
// indicates whether that operation returns an encoded message in addition to
// returning an HTTP code. The message is encoded because the details of the
// authorization status can constitute privileged information that the user who
// requested the operation should not see. To decode an authorization status
// message, a user must be granted permissions via an IAM policy to request the
// DecodeAuthorizationMessage (sts:DecodeAuthorizationMessage) action. The decoded
// message includes the following type of information:
//
//     * Whether the request
// was denied due to an explicit deny or due to the absence of an explicit allow.
// For more information, see Determining Whether a Request is Allowed or Denied
// (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow)
// in the IAM User Guide.
//
//     * The principal who made the request.
//
//     * The
// requested action.
//
//     * The requested resource.
//
//     * The values of condition
// keys in the context of the user's request.
func (c *Client) DecodeAuthorizationMessage(ctx context.Context, params *DecodeAuthorizationMessageInput, optFns ...func(*Options)) (*DecodeAuthorizationMessageOutput, error) {
	stack := middleware.NewStack("DecodeAuthorizationMessage", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpDecodeAuthorizationMessageMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDecodeAuthorizationMessageValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDecodeAuthorizationMessage(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DecodeAuthorizationMessage",
			Err:           err,
		}
	}
	out := result.(*DecodeAuthorizationMessageOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DecodeAuthorizationMessageInput struct {
	// The encoded message that was returned with the response.
	EncodedMessage *string
}

// A document that contains additional information about the authorization status
// of a request from an encoded message that is returned in response to an AWS
// request.
type DecodeAuthorizationMessageOutput struct {
	// An XML document that contains the decoded message.
	DecodedMessage *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpDecodeAuthorizationMessageMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpDecodeAuthorizationMessage{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpDecodeAuthorizationMessage{}, middleware.After)
}

func newServiceMetadataMiddleware_opDecodeAuthorizationMessage(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sts",
		OperationName: "DecodeAuthorizationMessage",
	}
}
