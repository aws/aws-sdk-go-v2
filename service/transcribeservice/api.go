// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package transcribeservice

import (
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opGetTranscriptionJob = "GetTranscriptionJob"

// GetTranscriptionJobRequest is a API request type for the GetTranscriptionJob API operation.
type GetTranscriptionJobRequest struct {
	*aws.Request
	Input *GetTranscriptionJobInput
	Copy  func(*GetTranscriptionJobInput) GetTranscriptionJobRequest
}

// Send marshals and sends the GetTranscriptionJob API request.
func (r GetTranscriptionJobRequest) Send() (*GetTranscriptionJobOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetTranscriptionJobOutput), nil
}

// GetTranscriptionJobRequest returns a request value for making API operation for
// Amazon Transcribe Service.
//
// Returns information about a transcription job. To see the status of the job,
// check the Status field. If the status is COMPLETE, the job is finished and
// you can find the results at the location specified in the TranscriptionFileUri
// field.
//
//    // Example sending a request using the GetTranscriptionJobRequest method.
//    req := client.GetTranscriptionJobRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/GetTranscriptionJob
func (c *TranscribeService) GetTranscriptionJobRequest(input *GetTranscriptionJobInput) GetTranscriptionJobRequest {
	op := &aws.Operation{
		Name:       opGetTranscriptionJob,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetTranscriptionJobInput{}
	}

	output := &GetTranscriptionJobOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetTranscriptionJobRequest{Request: req, Input: input, Copy: c.GetTranscriptionJobRequest}
}

const opListTranscriptionJobs = "ListTranscriptionJobs"

// ListTranscriptionJobsRequest is a API request type for the ListTranscriptionJobs API operation.
type ListTranscriptionJobsRequest struct {
	*aws.Request
	Input *ListTranscriptionJobsInput
	Copy  func(*ListTranscriptionJobsInput) ListTranscriptionJobsRequest
}

// Send marshals and sends the ListTranscriptionJobs API request.
func (r ListTranscriptionJobsRequest) Send() (*ListTranscriptionJobsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListTranscriptionJobsOutput), nil
}

// ListTranscriptionJobsRequest returns a request value for making API operation for
// Amazon Transcribe Service.
//
// Lists transcription jobs with the specified status.
//
//    // Example sending a request using the ListTranscriptionJobsRequest method.
//    req := client.ListTranscriptionJobsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/ListTranscriptionJobs
func (c *TranscribeService) ListTranscriptionJobsRequest(input *ListTranscriptionJobsInput) ListTranscriptionJobsRequest {
	op := &aws.Operation{
		Name:       opListTranscriptionJobs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListTranscriptionJobsInput{}
	}

	output := &ListTranscriptionJobsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListTranscriptionJobsRequest{Request: req, Input: input, Copy: c.ListTranscriptionJobsRequest}
}

// Paginate pages iterates over the pages of a ListTranscriptionJobsRequest operation,
// calling the Next method for each page. Using the paginators Next
// method will depict whether or not there are more pages.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListTranscriptionJobs operation.
//		req := client.ListTranscriptionJobsRequest(input)
//		p := req.Paginate()
//		for p.Next() {
//			page := p.CurrentPage()
//		}
//
//		if err := p.Err(); err != nil {
//			return err
//		}
//
func (p *ListTranscriptionJobsRequest) Paginate(opts ...aws.Option) ListTranscriptionJobsPager {
	return ListTranscriptionJobsPager{
		Pager: aws.Pager{
			NewRequest: func() (*aws.Request, error) {
				var inCpy *ListTranscriptionJobsInput
				if p.Input != nil {
					tmp := *p.Input
					inCpy = &tmp
				}

				req := p.Copy(inCpy)
				req.ApplyOptions(opts...)

				return req.Request, nil
			},
		},
	}
}

// ListTranscriptionJobsPager is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListTranscriptionJobsPager struct {
	aws.Pager
}

func (p *ListTranscriptionJobsPager) CurrentPage() *ListTranscriptionJobsOutput {
	return p.Pager.CurrentPage().(*ListTranscriptionJobsOutput)
}

const opStartTranscriptionJob = "StartTranscriptionJob"

// StartTranscriptionJobRequest is a API request type for the StartTranscriptionJob API operation.
type StartTranscriptionJobRequest struct {
	*aws.Request
	Input *StartTranscriptionJobInput
	Copy  func(*StartTranscriptionJobInput) StartTranscriptionJobRequest
}

// Send marshals and sends the StartTranscriptionJob API request.
func (r StartTranscriptionJobRequest) Send() (*StartTranscriptionJobOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*StartTranscriptionJobOutput), nil
}

// StartTranscriptionJobRequest returns a request value for making API operation for
// Amazon Transcribe Service.
//
// Starts an asynchronous job to transcribe speech to text.
//
//    // Example sending a request using the StartTranscriptionJobRequest method.
//    req := client.StartTranscriptionJobRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/StartTranscriptionJob
func (c *TranscribeService) StartTranscriptionJobRequest(input *StartTranscriptionJobInput) StartTranscriptionJobRequest {
	op := &aws.Operation{
		Name:       opStartTranscriptionJob,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartTranscriptionJobInput{}
	}

	output := &StartTranscriptionJobOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return StartTranscriptionJobRequest{Request: req, Input: input, Copy: c.StartTranscriptionJobRequest}
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/GetTranscriptionJobRequest
type GetTranscriptionJobInput struct {
	_ struct{} `type:"structure"`

	// The name of the job.
	//
	// TranscriptionJobName is a required field
	TranscriptionJobName *string `min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s GetTranscriptionJobInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTranscriptionJobInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetTranscriptionJobInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetTranscriptionJobInput"}

	if s.TranscriptionJobName == nil {
		invalidParams.Add(aws.NewErrParamRequired("TranscriptionJobName"))
	}
	if s.TranscriptionJobName != nil && len(*s.TranscriptionJobName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TranscriptionJobName", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/GetTranscriptionJobResponse
type GetTranscriptionJobOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// An object that contains the results of the transcription job.
	TranscriptionJob *TranscriptionJob `type:"structure"`
}

// String returns the string representation
func (s GetTranscriptionJobOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTranscriptionJobOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetTranscriptionJobOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/ListTranscriptionJobsRequest
type ListTranscriptionJobsInput struct {
	_ struct{} `type:"structure"`

	// The maximum number of jobs to return in the response.
	MaxResults *int64 `min:"1" type:"integer"`

	// If the result of the previous request to ListTranscriptionJobs was truncated,
	// include the NextToken to fetch the next set of jobs.
	NextToken *string `type:"string"`

	// When specified, returns only transcription jobs with the specified status.
	//
	// Status is a required field
	Status TranscriptionJobStatus `type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s ListTranscriptionJobsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTranscriptionJobsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTranscriptionJobsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListTranscriptionJobsInput"}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 1))
	}
	if len(s.Status) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Status"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/ListTranscriptionJobsResponse
type ListTranscriptionJobsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The ListTranscriptionJobs operation returns a page of jobs at a time. The
	// size of the page is set by the MaxResults parameter. If there are more jobs
	// in the list than the page size, Amazon Transcribe returns the NextPage token.
	// Include the token in the next request to the ListTranscriptionJobs operation
	// to return in the next page of jobs.
	NextToken *string `type:"string"`

	// The requested status of the jobs returned.
	Status TranscriptionJobStatus `type:"string" enum:"true"`

	// A list of objects containing summary information for a transcription job.
	TranscriptionJobSummaries []TranscriptionJobSummary `type:"list"`
}

// String returns the string representation
func (s ListTranscriptionJobsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTranscriptionJobsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListTranscriptionJobsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Describes the input media file in a transcription request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/Media
type Media struct {
	_ struct{} `type:"structure"`

	// The S3 location of the input media file. The general form is:
	//
	// https://<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
	//
	// For example:
	//
	// https://s3-us-west-2.amazonaws.com/examplebucket/example.mp4
	//
	// https://s3-us-west-2.amazonaws.com/examplebucket/mediadocs/example.mp4
	MediaFileUri *string `min:"1" type:"string"`
}

// String returns the string representation
func (s Media) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Media) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Media) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Media"}
	if s.MediaFileUri != nil && len(*s.MediaFileUri) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("MediaFileUri", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/StartTranscriptionJobRequest
type StartTranscriptionJobInput struct {
	_ struct{} `type:"structure"`

	// The language code for the language used in the input media file.
	//
	// LanguageCode is a required field
	LanguageCode LanguageCode `type:"string" required:"true" enum:"true"`

	// An object that describes the input media for a transcription job.
	//
	// Media is a required field
	Media *Media `type:"structure" required:"true"`

	// The format of the input media file.
	//
	// MediaFormat is a required field
	MediaFormat MediaFormat `type:"string" required:"true" enum:"true"`

	// The sample rate, in Hertz, of the audio track in the input media file.
	MediaSampleRateHertz *int64 `min:"8000" type:"integer"`

	// The name of the job. The name must be unique within an AWS account.
	//
	// TranscriptionJobName is a required field
	TranscriptionJobName *string `min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s StartTranscriptionJobInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StartTranscriptionJobInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StartTranscriptionJobInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "StartTranscriptionJobInput"}
	if len(s.LanguageCode) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("LanguageCode"))
	}

	if s.Media == nil {
		invalidParams.Add(aws.NewErrParamRequired("Media"))
	}
	if len(s.MediaFormat) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("MediaFormat"))
	}
	if s.MediaSampleRateHertz != nil && *s.MediaSampleRateHertz < 8000 {
		invalidParams.Add(aws.NewErrParamMinValue("MediaSampleRateHertz", 8000))
	}

	if s.TranscriptionJobName == nil {
		invalidParams.Add(aws.NewErrParamRequired("TranscriptionJobName"))
	}
	if s.TranscriptionJobName != nil && len(*s.TranscriptionJobName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TranscriptionJobName", 1))
	}
	if s.Media != nil {
		if err := s.Media.Validate(); err != nil {
			invalidParams.AddNested("Media", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/StartTranscriptionJobResponse
type StartTranscriptionJobOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// An object containing details of the asynchronous transcription job.
	TranscriptionJob *TranscriptionJob `type:"structure"`
}

// String returns the string representation
func (s StartTranscriptionJobOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StartTranscriptionJobOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s StartTranscriptionJobOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Describes the output of a transcription job.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/Transcript
type Transcript struct {
	_ struct{} `type:"structure"`

	// The S3 location where the transcription result is stored. The general form
	// of this Uri is:
	//
	// https://<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
	//
	// For example:
	//
	// https://s3-us-west-2.amazonaws.com/examplebucket/example.json
	//
	// https://s3-us-west-2.amazonaws.com/examplebucket/mediadocs/example.json
	TranscriptFileUri *string `min:"1" type:"string"`
}

// String returns the string representation
func (s Transcript) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Transcript) GoString() string {
	return s.String()
}

// Describes an asynchronous transcription job that was created with the StartTranscriptionJob
// operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/TranscriptionJob
type TranscriptionJob struct {
	_ struct{} `type:"structure"`

	// Timestamp of the date and time that the job completed.
	CompletionTime *time.Time `type:"timestamp" timestampFormat:"unix"`

	// Timestamp of the date and time that the job was created.
	CreationTime *time.Time `type:"timestamp" timestampFormat:"unix"`

	// If the TranscriptionJobStatus field is FAILED, this field contains information
	// about why the job failed.
	FailureReason *string `type:"string"`

	// The language code for the input speech.
	LanguageCode LanguageCode `type:"string" enum:"true"`

	// An object that describes the input media for a transcription job.
	Media *Media `type:"structure"`

	// The format of the input media file.
	MediaFormat MediaFormat `type:"string" enum:"true"`

	// The sample rate, in Hertz, of the audio track in the input media file.
	MediaSampleRateHertz *int64 `min:"8000" type:"integer"`

	// An object that describes the output of the transcription job.
	Transcript *Transcript `type:"structure"`

	// A name to identify the transcription job.
	TranscriptionJobName *string `min:"1" type:"string"`

	// The identifier assigned to the job when it was created.
	TranscriptionJobStatus TranscriptionJobStatus `type:"string" enum:"true"`
}

// String returns the string representation
func (s TranscriptionJob) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TranscriptionJob) GoString() string {
	return s.String()
}

// Provides a summary of information about a transcription job.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/transcribe-2017-10-26/TranscriptionJobSummary
type TranscriptionJobSummary struct {
	_ struct{} `type:"structure"`

	// Timestamp of the date and time that the job completed.
	CompletionTime *time.Time `type:"timestamp" timestampFormat:"unix"`

	// Timestamp of the date and time that the job was created.
	CreationTime *time.Time `type:"timestamp" timestampFormat:"unix"`

	// If the TranscriptionJobStatus field is FAILED, this field contains a description
	// of the error.
	FailureReason *string `type:"string"`

	// The language code for the input speech.
	LanguageCode LanguageCode `type:"string" enum:"true"`

	// The name assigned to the transcription job when it was created.
	TranscriptionJobName *string `min:"1" type:"string"`

	// The status of the transcription job. When the status is COMPLETED, use the
	// GetTranscriptionJob operation to get the results of the transcription.
	TranscriptionJobStatus TranscriptionJobStatus `type:"string" enum:"true"`
}

// String returns the string representation
func (s TranscriptionJobSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TranscriptionJobSummary) GoString() string {
	return s.String()
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeEnUs LanguageCode = "en-US"
	LanguageCodeEsUs LanguageCode = "es-US"
)

func (enum LanguageCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LanguageCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type MediaFormat string

// Enum values for MediaFormat
const (
	MediaFormatMp3  MediaFormat = "mp3"
	MediaFormatMp4  MediaFormat = "mp4"
	MediaFormatWav  MediaFormat = "wav"
	MediaFormatFlac MediaFormat = "flac"
)

func (enum MediaFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum MediaFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TranscriptionJobStatus string

// Enum values for TranscriptionJobStatus
const (
	TranscriptionJobStatusInProgress TranscriptionJobStatus = "IN_PROGRESS"
	TranscriptionJobStatusFailed     TranscriptionJobStatus = "FAILED"
	TranscriptionJobStatusCompleted  TranscriptionJobStatus = "COMPLETED"
)

func (enum TranscriptionJobStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TranscriptionJobStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
