// Code generated by smithy-go-codegen DO NOT EDIT.

package sesv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Used to enable or disable the custom Mail-From domain configuration for an email
// identity.
func (c *Client) PutEmailIdentityMailFromAttributes(ctx context.Context, params *PutEmailIdentityMailFromAttributesInput, optFns ...func(*Options)) (*PutEmailIdentityMailFromAttributesOutput, error) {
	stack := middleware.NewStack("PutEmailIdentityMailFromAttributes", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpPutEmailIdentityMailFromAttributesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutEmailIdentityMailFromAttributesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutEmailIdentityMailFromAttributes(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutEmailIdentityMailFromAttributes",
			Err:           err,
		}
	}
	out := result.(*PutEmailIdentityMailFromAttributesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to configure the custom MAIL FROM domain for a verified identity.
type PutEmailIdentityMailFromAttributesInput struct {
	// The verified email identity that you want to set up the custom MAIL FROM domain
	// for.
	EmailIdentity *string
	// The action that you want to take if the required MX record isn't found when you
	// send an email. When you set this value to UseDefaultValue, the mail is sent
	// using amazonses.com as the MAIL FROM domain. When you set this value to
	// RejectMessage, the Amazon SES API v2 returns a MailFromDomainNotVerified error,
	// and doesn't attempt to deliver the email. These behaviors are taken when the
	// custom MAIL FROM domain configuration is in the Pending, Failed, and
	// TemporaryFailure states.
	BehaviorOnMxFailure types.BehaviorOnMxFailure
	// The custom MAIL FROM domain that you want the verified identity to use. The MAIL
	// FROM domain must meet the following criteria:
	//
	//     * It has to be a subdomain of
	// the verified identity.
	//
	//     * It can't be used to receive email.
	//
	//     * It can't
	// be used in a "From" address if the MAIL FROM domain is a destination for
	// feedback forwarding emails.
	MailFromDomain *string
}

// An HTTP 200 response if the request succeeds, or an error message if the request
// fails.
type PutEmailIdentityMailFromAttributesOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpPutEmailIdentityMailFromAttributesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpPutEmailIdentityMailFromAttributes{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpPutEmailIdentityMailFromAttributes{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutEmailIdentityMailFromAttributes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ses",
		OperationName: "PutEmailIdentityMailFromAttributes",
	}
}
