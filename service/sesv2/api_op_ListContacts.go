// Code generated by smithy-go-codegen DO NOT EDIT.

package sesv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Lists the contacts present in a specific contact list.
func (c *Client) ListContacts(ctx context.Context, params *ListContactsInput, optFns ...func(*Options)) (*ListContactsOutput, error) {
	if params == nil {
		params = &ListContactsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListContacts", params, optFns, addOperationListContactsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListContactsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListContactsInput struct {

	// The name of the contact list.
	//
	// This member is required.
	ContactListName *string

	// A filter that can be applied to a list of contacts.
	Filter *types.ListContactsFilter

	// A string token indicating that there might be additional contacts available to
	// be listed. Use the token provided in the Response to use in the subsequent call
	// to ListContacts with the same parameters to retrieve the next page of contacts.
	NextToken *string

	// The number of contacts that may be returned at once, which is dependent on if
	// there are more or less contacts than the value of the PageSize. Use this
	// parameter to paginate results. If additional contacts exist beyond the specified
	// limit, the NextToken element is sent in the response. Use the NextToken value in
	// subsequent requests to retrieve additional contacts.
	PageSize *int32
}

type ListContactsOutput struct {

	// The contacts present in a specific contact list.
	Contacts []*types.Contact

	// A string token indicating that there might be additional contacts available to
	// be listed. Copy this token to a subsequent call to ListContacts with the same
	// parameters to retrieve the next page of contacts.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListContactsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpListContacts{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpListContacts{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpListContactsValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListContacts(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opListContacts(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ses",
		OperationName: "ListContacts",
	}
}
