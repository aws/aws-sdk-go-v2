// Code generated by smithy-go-codegen DO NOT EDIT.

package sesv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Update your Amazon SES account details.
func (c *Client) PutAccountDetails(ctx context.Context, params *PutAccountDetailsInput, optFns ...func(*Options)) (*PutAccountDetailsOutput, error) {
	stack := middleware.NewStack("PutAccountDetails", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpPutAccountDetailsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutAccountDetailsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutAccountDetails(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutAccountDetails",
			Err:           err,
		}
	}
	out := result.(*PutAccountDetailsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to submit new account details.
type PutAccountDetailsInput struct {
	// Indicates whether or not your account should have production access in the
	// current AWS Region. If the value is false, then your account is in the sandbox.
	// When your account is in the sandbox, you can only send email to verified
	// identities. Additionally, the maximum number of emails you can send in a 24-hour
	// period (your sending quota) is 200, and the maximum number of emails you can
	// send per second (your maximum sending rate) is 1. If the value is true, then
	// your account has production access. When your account has production access, you
	// can send email to any address. The sending quota and maximum sending rate for
	// your account vary based on your specific use case.
	ProductionAccessEnabled *bool
	// The type of email your account will send.
	MailType types.MailType
	// The language you would prefer to be contacted with.
	ContactLanguage types.ContactLanguage
	// A description of the types of email that you plan to send.
	UseCaseDescription *string
	// Additional email addresses that you would like to be notified regarding Amazon
	// SES matters.
	AdditionalContactEmailAddresses []*string
	// The URL of your website. This information helps us better understand the type of
	// content that you plan to send.
	WebsiteURL *string
}

// An HTTP 200 response if the request succeeds, or an error message if the request
// fails.
type PutAccountDetailsOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpPutAccountDetailsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpPutAccountDetails{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpPutAccountDetails{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutAccountDetails(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ses",
		OperationName: "PutAccountDetails",
	}
}
