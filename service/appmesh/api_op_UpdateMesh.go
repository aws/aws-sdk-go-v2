// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package appmesh

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appmesh/types"
)

const opUpdateMesh = "UpdateMesh"

// UpdateMeshRequest returns a request value for making API operation for
// AWS App Mesh.
//
// Updates an existing service mesh.
//
//    // Example sending a request using UpdateMeshRequest.
//    req := client.UpdateMeshRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateMesh
func (c *Client) UpdateMeshRequest(input *types.UpdateMeshInput) UpdateMeshRequest {
	op := &aws.Operation{
		Name:       opUpdateMesh,
		HTTPMethod: "PUT",
		HTTPPath:   "/v20190125/meshes/{meshName}",
	}

	if input == nil {
		input = &types.UpdateMeshInput{}
	}

	req := c.newRequest(op, input, &types.UpdateMeshOutput{})
	return UpdateMeshRequest{Request: req, Input: input, Copy: c.UpdateMeshRequest}
}

// UpdateMeshRequest is the request type for the
// UpdateMesh API operation.
type UpdateMeshRequest struct {
	*aws.Request
	Input *types.UpdateMeshInput
	Copy  func(*types.UpdateMeshInput) UpdateMeshRequest
}

// Send marshals and sends the UpdateMesh API request.
func (r UpdateMeshRequest) Send(ctx context.Context) (*UpdateMeshResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateMeshResponse{
		UpdateMeshOutput: r.Request.Data.(*types.UpdateMeshOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateMeshResponse is the response type for the
// UpdateMesh API operation.
type UpdateMeshResponse struct {
	*types.UpdateMeshOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateMesh request.
func (r *UpdateMeshResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
