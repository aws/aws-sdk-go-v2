// Code generated by smithy-go-codegen DO NOT EDIT.

package appmesh

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a virtual node within a service mesh. A virtual node acts as a logical
// pointer to a particular task group, such as an Amazon ECS service or a
// Kubernetes deployment. When you create a virtual node, you can specify the
// service discovery information for your task group, and whether the proxy running
// in a task group will communicate with other proxies using Transport Layer
// Security (TLS). You define a listener for any inbound traffic that your virtual
// node expects. Any virtual service that your virtual node expects to communicate
// to is specified as a backend. The response metadata for your new virtual node
// contains the arn that is associated with the virtual node. Set this value
// (either the full ARN or the truncated resource name: for example,
// mesh/default/virtualNode/simpleapp) as the APPMESH_VIRTUAL_NODE_NAME environment
// variable for your task group's Envoy proxy container in your task definition or
// pod spec. This is then mapped to the node.id and node.cluster Envoy parameters.
// If you require your Envoy stats or tracing to use a different name, you can
// override the node.cluster value that is set by APPMESH_VIRTUAL_NODE_NAME with
// the APPMESH_VIRTUAL_NODE_CLUSTER environment variable. For more information
// about virtual nodes, see Virtual nodes
// (https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html).
func (c *Client) CreateVirtualNode(ctx context.Context, params *CreateVirtualNodeInput, optFns ...func(*Options)) (*CreateVirtualNodeOutput, error) {
	stack := middleware.NewStack("CreateVirtualNode", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateVirtualNodeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateVirtualNodeValidationMiddleware(stack)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateVirtualNode",
			Err:           err,
		}
	}
	out := result.(*CreateVirtualNodeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type CreateVirtualNodeInput struct {
	// The name to use for the virtual node.
	VirtualNodeName *string
	// The name of the service mesh to create the virtual node in.
	MeshName *string
	// The virtual node specification to apply.
	Spec *types.VirtualNodeSpec
	// Optional metadata that you can apply to the virtual node to assist with
	// categorization and organization. Each tag consists of a key and an optional
	// value, both of which you define. Tag keys can have a maximum character length of
	// 128 characters, and tag values can have a maximum length of 256 characters.
	Tags []*types.TagRef
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of
	// the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
	ClientToken *string
	// The AWS IAM account ID of the service mesh owner. If the account ID is not your
	// own, then the account that you specify must share the mesh with your account
	// before you can create the resource in the service mesh. For more information
	// about mesh sharing, see Working with shared meshes
	// (https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
	MeshOwner *string
}

//
type CreateVirtualNodeOutput struct {
	// The full description of your virtual node following the create call.
	VirtualNode *types.VirtualNodeData

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateVirtualNodeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateVirtualNode{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateVirtualNode{}, middleware.After)
}
