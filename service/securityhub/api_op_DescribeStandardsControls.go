// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package securityhub

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

type DescribeStandardsControlsInput struct {
	_ struct{} `type:"structure"`

	// The maximum number of compliance standard controls to return.
	MaxResults *int64 `location:"querystring" locationName:"MaxResults" min:"1" type:"integer"`

	// For requests to get the next page of results, the pagination token that was
	// returned with the previous set of results. The initial request does not include
	// a pagination token.
	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`

	// The ARN of a resource that represents your subscription to a supported standard.
	//
	// StandardsSubscriptionArn is a required field
	StandardsSubscriptionArn *string `location:"uri" locationName:"StandardsSubscriptionArn" type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeStandardsControlsInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeStandardsControlsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeStandardsControlsInput"}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 1))
	}

	if s.StandardsSubscriptionArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("StandardsSubscriptionArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DescribeStandardsControlsInput) MarshalFields(e protocol.FieldEncoder) error {
	e.SetValue(protocol.HeaderTarget, "Content-Type", protocol.StringValue("application/json"), protocol.Metadata{})

	if s.StandardsSubscriptionArn != nil {
		v := *s.StandardsSubscriptionArn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "StandardsSubscriptionArn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.MaxResults != nil {
		v := *s.MaxResults

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "MaxResults", protocol.Int64Value(v), metadata)
	}
	if s.NextToken != nil {
		v := *s.NextToken

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "NextToken", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type DescribeStandardsControlsOutput struct {
	_ struct{} `type:"structure"`

	// A list of compliance standards controls.
	Controls []StandardsControl `type:"list"`

	// If there are more compliance standards control remaining in the results,
	// then this is the pagination token to use to request the next page of compliance
	// standard controls.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeStandardsControlsOutput) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DescribeStandardsControlsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.Controls != nil {
		v := s.Controls

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "Controls", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.NextToken != nil {
		v := *s.NextToken

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "NextToken", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

const opDescribeStandardsControls = "DescribeStandardsControls"

// DescribeStandardsControlsRequest returns a request value for making API operation for
// AWS SecurityHub.
//
// Returns a list of compliance standards controls.
//
// For each control, the results include information about whether it is currently
// enabled, the severity, and a link to remediation information.
//
//    // Example sending a request using DescribeStandardsControlsRequest.
//    req := client.DescribeStandardsControlsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/securityhub-2018-10-26/DescribeStandardsControls
func (c *Client) DescribeStandardsControlsRequest(input *DescribeStandardsControlsInput) DescribeStandardsControlsRequest {
	op := &aws.Operation{
		Name:       opDescribeStandardsControls,
		HTTPMethod: "GET",
		HTTPPath:   "/standards/controls/{StandardsSubscriptionArn+}",
	}

	if input == nil {
		input = &DescribeStandardsControlsInput{}
	}

	req := c.newRequest(op, input, &DescribeStandardsControlsOutput{})
	return DescribeStandardsControlsRequest{Request: req, Input: input, Copy: c.DescribeStandardsControlsRequest}
}

// DescribeStandardsControlsRequest is the request type for the
// DescribeStandardsControls API operation.
type DescribeStandardsControlsRequest struct {
	*aws.Request
	Input *DescribeStandardsControlsInput
	Copy  func(*DescribeStandardsControlsInput) DescribeStandardsControlsRequest
}

// Send marshals and sends the DescribeStandardsControls API request.
func (r DescribeStandardsControlsRequest) Send(ctx context.Context) (*DescribeStandardsControlsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeStandardsControlsResponse{
		DescribeStandardsControlsOutput: r.Request.Data.(*DescribeStandardsControlsOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DescribeStandardsControlsResponse is the response type for the
// DescribeStandardsControls API operation.
type DescribeStandardsControlsResponse struct {
	*DescribeStandardsControlsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeStandardsControls request.
func (r *DescribeStandardsControlsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
