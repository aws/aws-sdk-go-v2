// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchlogs

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/types"
)

const opPutDestination = "PutDestination"

// PutDestinationRequest returns a request value for making API operation for
// Amazon CloudWatch Logs.
//
// Creates or updates a destination. This operation is used only to create destinations
// for cross-account subscriptions.
//
// A destination encapsulates a physical resource (such as an Amazon Kinesis
// stream) and enables you to subscribe to a real-time stream of log events
// for a different account, ingested using PutLogEvents.
//
// Through an access policy, a destination controls what is written to it. By
// default, PutDestination does not set any access policy with the destination,
// which means a cross-account user cannot call PutSubscriptionFilter against
// this destination. To enable this, the destination owner must call PutDestinationPolicy
// after PutDestination.
//
//    // Example sending a request using PutDestinationRequest.
//    req := client.PutDestinationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/logs-2014-03-28/PutDestination
func (c *Client) PutDestinationRequest(input *types.PutDestinationInput) PutDestinationRequest {
	op := &aws.Operation{
		Name:       opPutDestination,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutDestinationInput{}
	}

	req := c.newRequest(op, input, &types.PutDestinationOutput{})
	return PutDestinationRequest{Request: req, Input: input, Copy: c.PutDestinationRequest}
}

// PutDestinationRequest is the request type for the
// PutDestination API operation.
type PutDestinationRequest struct {
	*aws.Request
	Input *types.PutDestinationInput
	Copy  func(*types.PutDestinationInput) PutDestinationRequest
}

// Send marshals and sends the PutDestination API request.
func (r PutDestinationRequest) Send(ctx context.Context) (*PutDestinationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutDestinationResponse{
		PutDestinationOutput: r.Request.Data.(*types.PutDestinationOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutDestinationResponse is the response type for the
// PutDestination API operation.
type PutDestinationResponse struct {
	*types.PutDestinationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutDestination request.
func (r *PutDestinationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
