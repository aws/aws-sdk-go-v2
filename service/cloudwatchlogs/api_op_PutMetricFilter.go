// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchlogs

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/types"
)

const opPutMetricFilter = "PutMetricFilter"

// PutMetricFilterRequest returns a request value for making API operation for
// Amazon CloudWatch Logs.
//
// Creates or updates a metric filter and associates it with the specified log
// group. Metric filters allow you to configure rules to extract metric data
// from log events ingested through PutLogEvents.
//
// The maximum number of metric filters that can be associated with a log group
// is 100.
//
//    // Example sending a request using PutMetricFilterRequest.
//    req := client.PutMetricFilterRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/logs-2014-03-28/PutMetricFilter
func (c *Client) PutMetricFilterRequest(input *types.PutMetricFilterInput) PutMetricFilterRequest {
	op := &aws.Operation{
		Name:       opPutMetricFilter,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutMetricFilterInput{}
	}

	req := c.newRequest(op, input, &types.PutMetricFilterOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return PutMetricFilterRequest{Request: req, Input: input, Copy: c.PutMetricFilterRequest}
}

// PutMetricFilterRequest is the request type for the
// PutMetricFilter API operation.
type PutMetricFilterRequest struct {
	*aws.Request
	Input *types.PutMetricFilterInput
	Copy  func(*types.PutMetricFilterInput) PutMetricFilterRequest
}

// Send marshals and sends the PutMetricFilter API request.
func (r PutMetricFilterRequest) Send(ctx context.Context) (*PutMetricFilterResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutMetricFilterResponse{
		PutMetricFilterOutput: r.Request.Data.(*types.PutMetricFilterOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutMetricFilterResponse is the response type for the
// PutMetricFilter API operation.
type PutMetricFilterResponse struct {
	*types.PutMetricFilterOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutMetricFilter request.
func (r *PutMetricFilterResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
