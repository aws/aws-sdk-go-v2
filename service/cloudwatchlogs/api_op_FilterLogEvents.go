// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchlogs

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/types"
)

const opFilterLogEvents = "FilterLogEvents"

// FilterLogEventsRequest returns a request value for making API operation for
// Amazon CloudWatch Logs.
//
// Lists log events from the specified log group. You can list all the log events
// or filter the results using a filter pattern, a time range, and the name
// of the log stream.
//
// By default, this operation returns as many log events as can fit in 1 MB
// (up to 10,000 log events), or all the events found within the time range
// that you specify. If the results include a token, then there are more log
// events available, and you can get additional results by specifying the token
// in a subsequent call.
//
//    // Example sending a request using FilterLogEventsRequest.
//    req := client.FilterLogEventsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/logs-2014-03-28/FilterLogEvents
func (c *Client) FilterLogEventsRequest(input *types.FilterLogEventsInput) FilterLogEventsRequest {
	op := &aws.Operation{
		Name:       opFilterLogEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.FilterLogEventsInput{}
	}

	req := c.newRequest(op, input, &types.FilterLogEventsOutput{})
	return FilterLogEventsRequest{Request: req, Input: input, Copy: c.FilterLogEventsRequest}
}

// FilterLogEventsRequest is the request type for the
// FilterLogEvents API operation.
type FilterLogEventsRequest struct {
	*aws.Request
	Input *types.FilterLogEventsInput
	Copy  func(*types.FilterLogEventsInput) FilterLogEventsRequest
}

// Send marshals and sends the FilterLogEvents API request.
func (r FilterLogEventsRequest) Send(ctx context.Context) (*FilterLogEventsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &FilterLogEventsResponse{
		FilterLogEventsOutput: r.Request.Data.(*types.FilterLogEventsOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewFilterLogEventsRequestPaginator returns a paginator for FilterLogEvents.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.FilterLogEventsRequest(input)
//   p := cloudwatchlogs.NewFilterLogEventsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewFilterLogEventsPaginator(req FilterLogEventsRequest) FilterLogEventsPaginator {
	return FilterLogEventsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.FilterLogEventsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// FilterLogEventsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type FilterLogEventsPaginator struct {
	aws.Pager
}

func (p *FilterLogEventsPaginator) CurrentPage() *types.FilterLogEventsOutput {
	return p.Pager.CurrentPage().(*types.FilterLogEventsOutput)
}

// FilterLogEventsResponse is the response type for the
// FilterLogEvents API operation.
type FilterLogEventsResponse struct {
	*types.FilterLogEventsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// FilterLogEvents request.
func (r *FilterLogEventsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
