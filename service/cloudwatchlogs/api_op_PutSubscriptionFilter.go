// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchlogs

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/types"
)

const opPutSubscriptionFilter = "PutSubscriptionFilter"

// PutSubscriptionFilterRequest returns a request value for making API operation for
// Amazon CloudWatch Logs.
//
// Creates or updates a subscription filter and associates it with the specified
// log group. Subscription filters allow you to subscribe to a real-time stream
// of log events ingested through PutLogEvents and have them delivered to a
// specific destination. Currently, the supported destinations are:
//
//    * An Amazon Kinesis stream belonging to the same account as the subscription
//    filter, for same-account delivery.
//
//    * A logical destination that belongs to a different account, for cross-account
//    delivery.
//
//    * An Amazon Kinesis Firehose delivery stream that belongs to the same
//    account as the subscription filter, for same-account delivery.
//
//    * An AWS Lambda function that belongs to the same account as the subscription
//    filter, for same-account delivery.
//
// There can only be one subscription filter associated with a log group. If
// you are updating an existing filter, you must specify the correct name in
// filterName. Otherwise, the call fails because you cannot associate a second
// filter with a log group.
//
//    // Example sending a request using PutSubscriptionFilterRequest.
//    req := client.PutSubscriptionFilterRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/logs-2014-03-28/PutSubscriptionFilter
func (c *Client) PutSubscriptionFilterRequest(input *types.PutSubscriptionFilterInput) PutSubscriptionFilterRequest {
	op := &aws.Operation{
		Name:       opPutSubscriptionFilter,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutSubscriptionFilterInput{}
	}

	req := c.newRequest(op, input, &types.PutSubscriptionFilterOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return PutSubscriptionFilterRequest{Request: req, Input: input, Copy: c.PutSubscriptionFilterRequest}
}

// PutSubscriptionFilterRequest is the request type for the
// PutSubscriptionFilter API operation.
type PutSubscriptionFilterRequest struct {
	*aws.Request
	Input *types.PutSubscriptionFilterInput
	Copy  func(*types.PutSubscriptionFilterInput) PutSubscriptionFilterRequest
}

// Send marshals and sends the PutSubscriptionFilter API request.
func (r PutSubscriptionFilterRequest) Send(ctx context.Context) (*PutSubscriptionFilterResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutSubscriptionFilterResponse{
		PutSubscriptionFilterOutput: r.Request.Data.(*types.PutSubscriptionFilterOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutSubscriptionFilterResponse is the response type for the
// PutSubscriptionFilter API operation.
type PutSubscriptionFilterResponse struct {
	*types.PutSubscriptionFilterOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutSubscriptionFilter request.
func (r *PutSubscriptionFilterResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
