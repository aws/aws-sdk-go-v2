// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudwatchlogs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates or updates a subscription filter and associates it with the specified
// log group. Subscription filters allow you to subscribe to a real-time stream of
// log events ingested through PutLogEvents
// (https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html)
// and have them delivered to a specific destination. Currently, the supported
// destinations are:
//
//     * An Amazon Kinesis stream belonging to the same account
// as the subscription filter, for same-account delivery.
//
//     * A logical
// destination that belongs to a different account, for cross-account delivery.
//
//
// * An Amazon Kinesis Firehose delivery stream that belongs to the same account as
// the subscription filter, for same-account delivery.
//
//     * An AWS Lambda
// function that belongs to the same account as the subscription filter, for
// same-account delivery.
//
// There can only be one subscription filter associated
// with a log group. If you are updating an existing filter, you must specify the
// correct name in filterName. Otherwise, the call fails because you cannot
// associate a second filter with a log group.
func (c *Client) PutSubscriptionFilter(ctx context.Context, params *PutSubscriptionFilterInput, optFns ...func(*Options)) (*PutSubscriptionFilterOutput, error) {
	stack := middleware.NewStack("PutSubscriptionFilter", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpPutSubscriptionFilterMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutSubscriptionFilterValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutSubscriptionFilter(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutSubscriptionFilter",
			Err:           err,
		}
	}
	out := result.(*PutSubscriptionFilterOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutSubscriptionFilterInput struct {
	// The name of the log group.
	LogGroupName *string
	// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver
	// ingested log events to the destination stream. You don't need to provide the ARN
	// when you are working with a logical destination for cross-account delivery.
	RoleArn *string
	// The ARN of the destination to deliver matching log events to. Currently, the
	// supported destinations are:
	//
	//     * An Amazon Kinesis stream belonging to the
	// same account as the subscription filter, for same-account delivery.
	//
	//     * A
	// logical destination (specified using an ARN) belonging to a different account,
	// for cross-account delivery.
	//
	//     * An Amazon Kinesis Firehose delivery stream
	// belonging to the same account as the subscription filter, for same-account
	// delivery.
	//
	//     * An AWS Lambda function belonging to the same account as the
	// subscription filter, for same-account delivery.
	DestinationArn *string
	// A name for the subscription filter. If you are updating an existing filter, you
	// must specify the correct name in filterName. Otherwise, the call fails because
	// you cannot associate a second filter with a log group. To find the name of the
	// filter currently associated with a log group, use DescribeSubscriptionFilters
	// (https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html).
	FilterName *string
	// The method used to distribute log data to the destination. By default log data
	// is grouped by log stream, but the grouping can be set to random for a more even
	// distribution. This property is only applicable when the destination is an Amazon
	// Kinesis stream.
	Distribution types.Distribution
	// A filter pattern for subscribing to a filtered stream of log events.
	FilterPattern *string
}

type PutSubscriptionFilterOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpPutSubscriptionFilterMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpPutSubscriptionFilter{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutSubscriptionFilter{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutSubscriptionFilter(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "logs",
		OperationName: "PutSubscriptionFilter",
	}
}
