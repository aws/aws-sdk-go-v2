// Code generated by smithy-go-codegen DO NOT EDIT.

package kinesisanalyticsv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Creates and returns a URL that you can use to connect to an application's
// extension. Currently, the only available extension is the Apache Flink
// dashboard. The IAM role or user used to call this API defines the permissions to
// access the extension. Once the presigned URL is created, no additional
// permission is required to access this URL. IAM authorization policies for this
// API are also enforced for every HTTP request that attempts to connect to the
// extension. The URL that you get from a call to CreateApplicationPresignedUrl
// must be used within 3 minutes to be valid. If you first try to use the URL after
// the 3-minute limit expires, the service returns an HTTP 403 Forbidden error.
func (c *Client) CreateApplicationPresignedUrl(ctx context.Context, params *CreateApplicationPresignedUrlInput, optFns ...func(*Options)) (*CreateApplicationPresignedUrlOutput, error) {
	if params == nil {
		params = &CreateApplicationPresignedUrlInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateApplicationPresignedUrl", params, optFns, addOperationCreateApplicationPresignedUrlMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateApplicationPresignedUrlOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateApplicationPresignedUrlInput struct {

	// The name of the application.
	//
	// This member is required.
	ApplicationName *string

	// The type of the extension for which to create and return a URL. Currently, the
	// only valid extension URL type is FLINK_DASHBOARD_URL.
	//
	// This member is required.
	UrlType types.UrlType

	// The duration in seconds for which the returned URL will be valid.
	SessionExpirationDurationInSeconds *int64
}

type CreateApplicationPresignedUrlOutput struct {

	// The URL of the extension.
	AuthorizedUrl *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateApplicationPresignedUrlMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateApplicationPresignedUrl{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateApplicationPresignedUrl{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateApplicationPresignedUrlValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateApplicationPresignedUrl(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateApplicationPresignedUrl(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kinesisanalytics",
		OperationName: "CreateApplicationPresignedUrl",
	}
}
