// Code generated by smithy-go-codegen DO NOT EDIT.

package kinesisanalyticsv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Adds an InputProcessingConfiguration () to an SQL-based Kinesis Data Analytics
// application. An input processor pre-processes records on the input stream before
// the application's SQL code executes. Currently, the only input processor
// available is AWS Lambda (https://aws.amazon.com/documentation/lambda/).
func (c *Client) AddApplicationInputProcessingConfiguration(ctx context.Context, params *AddApplicationInputProcessingConfigurationInput, optFns ...func(*Options)) (*AddApplicationInputProcessingConfigurationOutput, error) {
	stack := middleware.NewStack("AddApplicationInputProcessingConfiguration", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpAddApplicationInputProcessingConfigurationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAddApplicationInputProcessingConfigurationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAddApplicationInputProcessingConfiguration(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "AddApplicationInputProcessingConfiguration",
			Err:           err,
		}
	}
	out := result.(*AddApplicationInputProcessingConfigurationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AddApplicationInputProcessingConfigurationInput struct {
	// The version of the application to which you want to add the input processing
	// configuration. You can use the DescribeApplication () operation to get the
	// current application version. If the version specified is not the current
	// version, the ConcurrentModificationException is returned.
	CurrentApplicationVersionId *int64
	// The InputProcessingConfiguration () to add to the application.
	InputProcessingConfiguration *types.InputProcessingConfiguration
	// The ID of the input configuration to add the input processing configuration to.
	// You can get a list of the input IDs for an application using the
	// DescribeApplication () operation.
	InputId *string
	// The name of the application to which you want to add the input processing
	// configuration.
	ApplicationName *string
}

type AddApplicationInputProcessingConfigurationOutput struct {
	// The description of the preprocessor that executes on records in this input
	// before the application's code is run.
	InputProcessingConfigurationDescription *types.InputProcessingConfigurationDescription
	// The Amazon Resource Name (ARN) of the application.
	ApplicationARN *string
	// Provides the current application version.
	ApplicationVersionId *int64
	// The input ID that is associated with the application input. This is the ID that
	// Amazon Kinesis Data Analytics assigns to each input configuration that you add
	// to your application.
	InputId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpAddApplicationInputProcessingConfigurationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpAddApplicationInputProcessingConfiguration{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpAddApplicationInputProcessingConfiguration{}, middleware.After)
}

func newServiceMetadataMiddleware_opAddApplicationInputProcessingConfiguration(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kinesisanalytics",
		OperationName: "AddApplicationInputProcessingConfiguration",
	}
}
