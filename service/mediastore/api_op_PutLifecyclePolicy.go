// Code generated by smithy-go-codegen DO NOT EDIT.

package mediastore

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Writes an object lifecycle policy to a container. If the container already has
// an object lifecycle policy, the service replaces the existing policy with the
// new policy. It takes up to 20 minutes for the change to take effect. For
// information about how to construct an object lifecycle policy, see Components of
// an Object Lifecycle Policy
// (https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html).
func (c *Client) PutLifecyclePolicy(ctx context.Context, params *PutLifecyclePolicyInput, optFns ...func(*Options)) (*PutLifecyclePolicyOutput, error) {
	if params == nil {
		params = &PutLifecyclePolicyInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutLifecyclePolicy", params, optFns, addOperationPutLifecyclePolicyMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutLifecyclePolicyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutLifecyclePolicyInput struct {

	// The name of the container that you want to assign the object lifecycle policy
	// to.
	//
	// This member is required.
	ContainerName *string

	// The object lifecycle policy to apply to the container.
	//
	// This member is required.
	LifecyclePolicy *string
}

type PutLifecyclePolicyOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutLifecyclePolicyMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpPutLifecyclePolicy{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutLifecyclePolicy{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutLifecyclePolicyValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutLifecyclePolicy(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutLifecyclePolicy(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mediastore",
		OperationName: "PutLifecyclePolicy",
	}
}
