// Code generated by smithy-go-codegen DO NOT EDIT.

package mediastore

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/mediastore/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sets the cross-origin resource sharing (CORS) configuration on a container so
// that the container can service cross-origin requests. For example, you might
// want to enable a request whose origin is http://www.example.com to access your
// AWS Elemental MediaStore container at my.example.container.com by using the
// browser's XMLHttpRequest capability. To enable CORS on a container, you attach a
// CORS policy to the container. In the CORS policy, you configure rules that
// identify origins and the HTTP methods that can be executed on your container.
// The policy can contain up to 398,000 characters. You can add up to 100 rules to
// a CORS policy. If more than one rule applies, the service uses the first
// applicable rule listed. To learn more about CORS, see Cross-Origin Resource
// Sharing (CORS) in AWS Elemental MediaStore
// (https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html).
func (c *Client) PutCorsPolicy(ctx context.Context, params *PutCorsPolicyInput, optFns ...func(*Options)) (*PutCorsPolicyOutput, error) {
	if params == nil {
		params = &PutCorsPolicyInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutCorsPolicy", params, optFns, addOperationPutCorsPolicyMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutCorsPolicyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutCorsPolicyInput struct {

	// The name of the container that you want to assign the CORS policy to.
	//
	// This member is required.
	ContainerName *string

	// The CORS policy to apply to the container.
	//
	// This member is required.
	CorsPolicy []*types.CorsRule
}

type PutCorsPolicyOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutCorsPolicyMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpPutCorsPolicy{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutCorsPolicy{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutCorsPolicyValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutCorsPolicy(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutCorsPolicy(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mediastore",
		OperationName: "PutCorsPolicy",
	}
}
