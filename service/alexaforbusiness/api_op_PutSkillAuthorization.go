// Code generated by smithy-go-codegen DO NOT EDIT.

package alexaforbusiness

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Links a user's account to a third-party skill provider. If this API operation is
// called by an assumed IAM role, the skill being linked must be a private skill.
// Also, the skill must be owned by the AWS account that assumed the IAM role.
func (c *Client) PutSkillAuthorization(ctx context.Context, params *PutSkillAuthorizationInput, optFns ...func(*Options)) (*PutSkillAuthorizationOutput, error) {
	if params == nil {
		params = &PutSkillAuthorizationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutSkillAuthorization", params, optFns, addOperationPutSkillAuthorizationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutSkillAuthorizationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutSkillAuthorizationInput struct {

	// The authorization result specific to OAUTH code grant output. "Code‚Äù must be
	// populated in the AuthorizationResult map to establish the authorization.
	//
	// This member is required.
	AuthorizationResult map[string]*string

	// The unique identifier of a skill.
	//
	// This member is required.
	SkillId *string

	// The room that the skill is authorized for.
	RoomArn *string
}

type PutSkillAuthorizationOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutSkillAuthorizationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpPutSkillAuthorization{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutSkillAuthorization{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutSkillAuthorizationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutSkillAuthorization(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutSkillAuthorization(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "a4b",
		OperationName: "PutSkillAuthorization",
	}
}
