// Code generated by smithy-go-codegen DO NOT EDIT.

package alexaforbusiness

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/alexaforbusiness/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Resets a device and its account to the known default settings. This clears all
// information and settings set by previous users in the following ways:
//
//     *
// Bluetooth - This unpairs all bluetooth devices paired with your echo device.
//
//
// * Volume - This resets the echo device's volume to the default value.
//
//     *
// Notifications - This clears all notifications from your echo device.
//
//     *
// Lists - This clears all to-do items from your echo device.
//
//     * Settings -
// This internally syncs the room's profile (if the device is assigned to a room),
// contacts, address books, delegation access for account linking, and
// communications (if enabled on the room profile).
func (c *Client) StartDeviceSync(ctx context.Context, params *StartDeviceSyncInput, optFns ...func(*Options)) (*StartDeviceSyncOutput, error) {
	stack := middleware.NewStack("StartDeviceSync", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpStartDeviceSyncMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStartDeviceSyncValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartDeviceSync(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartDeviceSync",
			Err:           err,
		}
	}
	out := result.(*StartDeviceSyncOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartDeviceSyncInput struct {
	// The ARN of the room with which the device to sync is associated. Required.
	RoomArn *string
	// The ARN of the device to sync. Required.
	DeviceArn *string
	// Request structure to start the device sync. Required.
	Features []types.Feature
}

type StartDeviceSyncOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpStartDeviceSyncMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpStartDeviceSync{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpStartDeviceSync{}, middleware.After)
}

func newServiceMetadataMiddleware_opStartDeviceSync(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "a4b",
		OperationName: "StartDeviceSync",
	}
}
