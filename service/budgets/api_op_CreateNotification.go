// Code generated by smithy-go-codegen DO NOT EDIT.

package budgets

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/budgets/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a notification. You must create the budget before you create the
// associated notification.
func (c *Client) CreateNotification(ctx context.Context, params *CreateNotificationInput, optFns ...func(*Options)) (*CreateNotificationOutput, error) {
	if params == nil {
		params = &CreateNotificationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateNotification", params, optFns, addOperationCreateNotificationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateNotificationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request of CreateNotification
type CreateNotificationInput struct {

	// The accountId that is associated with the budget that you want to create a
	// notification for.
	//
	// This member is required.
	AccountId *string

	// The name of the budget that you want AWS to notify you about. Budget names must
	// be unique within an account.
	//
	// This member is required.
	BudgetName *string

	// The notification that you want to create.
	//
	// This member is required.
	Notification *types.Notification

	// A list of subscribers that you want to associate with the notification. Each
	// notification can have one SNS subscriber and up to 10 email subscribers.
	//
	// This member is required.
	Subscribers []*types.Subscriber
}

// Response of CreateNotification
type CreateNotificationOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateNotificationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateNotification{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateNotification{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateNotificationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateNotification(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opCreateNotification(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "budgets",
		OperationName: "CreateNotification",
	}
}
