// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type BudgetType string

// Enum values for BudgetType
const (
	BudgetTypeUsage         BudgetType = "USAGE"
	BudgetTypeCost          BudgetType = "COST"
	BudgetTypeRiutilization BudgetType = "RI_UTILIZATION"
	BudgetTypeRicoverage    BudgetType = "RI_COVERAGE"
	BudgetTypeSputilization BudgetType = "SAVINGS_PLANS_UTILIZATION"
	BudgetTypeSpcoverage    BudgetType = "SAVINGS_PLANS_COVERAGE"
)

// Values returns all known values for BudgetType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (BudgetType) Values() []BudgetType {
	return []BudgetType{
		"USAGE",
		"COST",
		"RI_UTILIZATION",
		"RI_COVERAGE",
		"SAVINGS_PLANS_UTILIZATION",
		"SAVINGS_PLANS_COVERAGE",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorGreater_than ComparisonOperator = "GREATER_THAN"
	ComparisonOperatorLess_than    ComparisonOperator = "LESS_THAN"
	ComparisonOperatorEqual_to     ComparisonOperator = "EQUAL_TO"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"GREATER_THAN",
		"LESS_THAN",
		"EQUAL_TO",
	}
}

type NotificationState string

// Enum values for NotificationState
const (
	NotificationStateOk    NotificationState = "OK"
	NotificationStateAlarm NotificationState = "ALARM"
)

// Values returns all known values for NotificationState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NotificationState) Values() []NotificationState {
	return []NotificationState{
		"OK",
		"ALARM",
	}
}

type NotificationType string

// Enum values for NotificationType
const (
	NotificationTypeActual     NotificationType = "ACTUAL"
	NotificationTypeForecasted NotificationType = "FORECASTED"
)

// Values returns all known values for NotificationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NotificationType) Values() []NotificationType {
	return []NotificationType{
		"ACTUAL",
		"FORECASTED",
	}
}

type SubscriptionType string

// Enum values for SubscriptionType
const (
	SubscriptionTypeSns   SubscriptionType = "SNS"
	SubscriptionTypeEmail SubscriptionType = "EMAIL"
)

// Values returns all known values for SubscriptionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SubscriptionType) Values() []SubscriptionType {
	return []SubscriptionType{
		"SNS",
		"EMAIL",
	}
}

type ThresholdType string

// Enum values for ThresholdType
const (
	ThresholdTypePercentage     ThresholdType = "PERCENTAGE"
	ThresholdTypeAbsolute_value ThresholdType = "ABSOLUTE_VALUE"
)

// Values returns all known values for ThresholdType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ThresholdType) Values() []ThresholdType {
	return []ThresholdType{
		"PERCENTAGE",
		"ABSOLUTE_VALUE",
	}
}

type TimeUnit string

// Enum values for TimeUnit
const (
	TimeUnitDaily     TimeUnit = "DAILY"
	TimeUnitMonthly   TimeUnit = "MONTHLY"
	TimeUnitQuarterly TimeUnit = "QUARTERLY"
	TimeUnitAnnually  TimeUnit = "ANNUALLY"
)

// Values returns all known values for TimeUnit. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (TimeUnit) Values() []TimeUnit {
	return []TimeUnit{
		"DAILY",
		"MONTHLY",
		"QUARTERLY",
		"ANNUALLY",
	}
}
