// Code generated by smithy-go-codegen DO NOT EDIT.

package budgets

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/budgets/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes the history for DAILY, MONTHLY, and QUARTERLY budgets. Budget history
// isn't available for ANNUAL budgets.
func (c *Client) DescribeBudgetPerformanceHistory(ctx context.Context, params *DescribeBudgetPerformanceHistoryInput, optFns ...func(*Options)) (*DescribeBudgetPerformanceHistoryOutput, error) {
	stack := middleware.NewStack("DescribeBudgetPerformanceHistory", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeBudgetPerformanceHistoryMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeBudgetPerformanceHistoryValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeBudgetPerformanceHistory(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeBudgetPerformanceHistory",
			Err:           err,
		}
	}
	out := result.(*DescribeBudgetPerformanceHistoryOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeBudgetPerformanceHistoryInput struct {
	// A string that represents the budget name. The ":" and "\" characters aren't
	// allowed.
	BudgetName *string
	// A generic string.
	NextToken *string
	// An integer that represents how many entries a paginated response contains. The
	// maximum is 100.
	MaxResults *int32
	// Retrieves how often the budget went into an ALARM state for the specified time
	// period.
	TimePeriod *types.TimePeriod
	// The account ID of the user. It should be a 12-digit number.
	AccountId *string
}

type DescribeBudgetPerformanceHistoryOutput struct {
	// A generic string.
	NextToken *string
	// The history of how often the budget has gone into an ALARM state. For DAILY
	// budgets, the history saves the state of the budget for the last 60 days. For
	// MONTHLY budgets, the history saves the state of the budget for the current month
	// plus the last 12 months. For QUARTERLY budgets, the history saves the state of
	// the budget for the last four quarters.
	BudgetPerformanceHistory *types.BudgetPerformanceHistory

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeBudgetPerformanceHistoryMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeBudgetPerformanceHistory{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeBudgetPerformanceHistory{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeBudgetPerformanceHistory(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "budgets",
		OperationName: "DescribeBudgetPerformanceHistory",
	}
}
