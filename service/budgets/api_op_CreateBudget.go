// Code generated by smithy-go-codegen DO NOT EDIT.

package budgets

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/budgets/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a budget and, if included, notifications and subscribers. Only one of
// BudgetLimit or PlannedBudgetLimits can be present in the syntax at one time. Use
// the syntax that matches your case. The Request Syntax section shows the
// BudgetLimit syntax. For PlannedBudgetLimits, see the Examples
// (https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_CreateBudget.html#API_CreateBudget_Examples)
// section.
func (c *Client) CreateBudget(ctx context.Context, params *CreateBudgetInput, optFns ...func(*Options)) (*CreateBudgetOutput, error) {
	stack := middleware.NewStack("CreateBudget", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateBudgetMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateBudgetValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateBudget(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateBudget",
			Err:           err,
		}
	}
	out := result.(*CreateBudgetOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request of CreateBudget
type CreateBudgetInput struct {
	// A notification that you want to associate with a budget. A budget can have up to
	// five notifications, and each notification can have one SNS subscriber and up to
	// 10 email subscribers. If you include notifications and subscribers in your
	// CreateBudget call, AWS creates the notifications and subscribers for you.
	NotificationsWithSubscribers []*types.NotificationWithSubscribers
	// The budget object that you want to create.
	Budget *types.Budget
	// The accountId that is associated with the budget.
	AccountId *string
}

// Response of CreateBudget
type CreateBudgetOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateBudgetMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateBudget{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateBudget{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateBudget(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "budgets",
		OperationName: "CreateBudget",
	}
}
