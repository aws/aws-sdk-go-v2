// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package acmpca

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/types"
)

const opUpdateCertificateAuthority = "UpdateCertificateAuthority"

// UpdateCertificateAuthorityRequest returns a request value for making API operation for
// AWS Certificate Manager Private Certificate Authority.
//
// Updates the status or configuration of a private certificate authority (CA).
// Your private CA must be in the ACTIVE or DISABLED state before you can update
// it. You can disable a private CA that is in the ACTIVE state or make a CA
// that is in the DISABLED state active again.
//
//    // Example sending a request using UpdateCertificateAuthorityRequest.
//    req := client.UpdateCertificateAuthorityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/acm-pca-2017-08-22/UpdateCertificateAuthority
func (c *Client) UpdateCertificateAuthorityRequest(input *types.UpdateCertificateAuthorityInput) UpdateCertificateAuthorityRequest {
	op := &aws.Operation{
		Name:       opUpdateCertificateAuthority,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UpdateCertificateAuthorityInput{}
	}

	req := c.newRequest(op, input, &types.UpdateCertificateAuthorityOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return UpdateCertificateAuthorityRequest{Request: req, Input: input, Copy: c.UpdateCertificateAuthorityRequest}
}

// UpdateCertificateAuthorityRequest is the request type for the
// UpdateCertificateAuthority API operation.
type UpdateCertificateAuthorityRequest struct {
	*aws.Request
	Input *types.UpdateCertificateAuthorityInput
	Copy  func(*types.UpdateCertificateAuthorityInput) UpdateCertificateAuthorityRequest
}

// Send marshals and sends the UpdateCertificateAuthority API request.
func (r UpdateCertificateAuthorityRequest) Send(ctx context.Context) (*UpdateCertificateAuthorityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateCertificateAuthorityResponse{
		UpdateCertificateAuthorityOutput: r.Request.Data.(*types.UpdateCertificateAuthorityOutput),
		response:                         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateCertificateAuthorityResponse is the response type for the
// UpdateCertificateAuthority API operation.
type UpdateCertificateAuthorityResponse struct {
	*types.UpdateCertificateAuthorityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateCertificateAuthority request.
func (r *UpdateCertificateAuthorityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
