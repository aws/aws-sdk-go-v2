// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package acmpca

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/types"
)

const opCreateCertificateAuthority = "CreateCertificateAuthority"

// CreateCertificateAuthorityRequest returns a request value for making API operation for
// AWS Certificate Manager Private Certificate Authority.
//
// Creates a root or subordinate private certificate authority (CA). You must
// specify the CA configuration, the certificate revocation list (CRL) configuration,
// the CA type, and an optional idempotency token to avoid accidental creation
// of multiple CAs. The CA configuration specifies the name of the algorithm
// and key size to be used to create the CA private key, the type of signing
// algorithm that the CA uses, and X.500 subject information. The CRL configuration
// specifies the CRL expiration period in days (the validity period of the CRL),
// the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the
// S3 bucket that is included in certificates issued by the CA. If successful,
// this action returns the Amazon Resource Name (ARN) of the CA.
//
//    // Example sending a request using CreateCertificateAuthorityRequest.
//    req := client.CreateCertificateAuthorityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/acm-pca-2017-08-22/CreateCertificateAuthority
func (c *Client) CreateCertificateAuthorityRequest(input *types.CreateCertificateAuthorityInput) CreateCertificateAuthorityRequest {
	op := &aws.Operation{
		Name:       opCreateCertificateAuthority,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateCertificateAuthorityInput{}
	}

	req := c.newRequest(op, input, &types.CreateCertificateAuthorityOutput{})
	return CreateCertificateAuthorityRequest{Request: req, Input: input, Copy: c.CreateCertificateAuthorityRequest}
}

// CreateCertificateAuthorityRequest is the request type for the
// CreateCertificateAuthority API operation.
type CreateCertificateAuthorityRequest struct {
	*aws.Request
	Input *types.CreateCertificateAuthorityInput
	Copy  func(*types.CreateCertificateAuthorityInput) CreateCertificateAuthorityRequest
}

// Send marshals and sends the CreateCertificateAuthority API request.
func (r CreateCertificateAuthorityRequest) Send(ctx context.Context) (*CreateCertificateAuthorityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateCertificateAuthorityResponse{
		CreateCertificateAuthorityOutput: r.Request.Data.(*types.CreateCertificateAuthorityOutput),
		response:                         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateCertificateAuthorityResponse is the response type for the
// CreateCertificateAuthority API operation.
type CreateCertificateAuthorityResponse struct {
	*types.CreateCertificateAuthorityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateCertificateAuthority request.
func (r *CreateCertificateAuthorityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
