// Code generated by smithy-go-codegen DO NOT EDIT.

package acmpca

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a root or subordinate private certificate authority (CA). You must
// specify the CA configuration, the certificate revocation list (CRL)
// configuration, the CA type, and an optional idempotency token to avoid
// accidental creation of multiple CAs. The CA configuration specifies the name of
// the algorithm and key size to be used to create the CA private key, the type of
// signing algorithm that the CA uses, and X.500 subject information. The CRL
// configuration specifies the CRL expiration period in days (the validity period
// of the CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias
// for the S3 bucket that is included in certificates issued by the CA. If
// successful, this action returns the Amazon Resource Name (ARN) of the CA.
func (c *Client) CreateCertificateAuthority(ctx context.Context, params *CreateCertificateAuthorityInput, optFns ...func(*Options)) (*CreateCertificateAuthorityOutput, error) {
	stack := middleware.NewStack("CreateCertificateAuthority", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateCertificateAuthorityMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateCertificateAuthorityValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateCertificateAuthority(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateCertificateAuthority",
			Err:           err,
		}
	}
	out := result.(*CreateCertificateAuthorityOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateCertificateAuthorityInput struct {
	// Contains a Boolean value that you can use to enable a certification revocation
	// list (CRL) for the CA, the name of the S3 bucket to which ACM Private CA will
	// write the CRL, and an optional CNAME alias that you can use to hide the name of
	// your bucket in the CRL Distribution Points extension of your CA certificate. For
	// more information, see the CrlConfiguration () structure.
	RevocationConfiguration *types.RevocationConfiguration
	// The type of the certificate authority.
	CertificateAuthorityType types.CertificateAuthorityType
	// Name and bit size of the private key algorithm, the name of the signing
	// algorithm, and X.500 certificate subject information.
	CertificateAuthorityConfiguration *types.CertificateAuthorityConfiguration
	// Alphanumeric string that can be used to distinguish between calls to
	// CreateCertificateAuthority. Idempotency tokens time out after five minutes.
	// Therefore, if you call CreateCertificateAuthority multiple times with the same
	// idempotency token within a five minute period, ACM Private CA recognizes that
	// you are requesting only one certificate. As a result, ACM Private CA issues only
	// one. If you change the idempotency token for each call, however, ACM Private CA
	// recognizes that you are requesting multiple certificates.
	IdempotencyToken *string
	// Key-value pairs that will be attached to the new private CA. You can associate
	// up to 50 tags with a private CA. For information using tags with IAM to manage
	// permissions, see Controlling Access Using IAM Tags
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
	Tags []*types.Tag
}

type CreateCertificateAuthorityOutput struct {
	// If successful, the Amazon Resource Name (ARN) of the certificate authority (CA).
	// This is of the form:
	// arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
	// .
	CertificateAuthorityArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateCertificateAuthorityMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateCertificateAuthority{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateCertificateAuthority{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateCertificateAuthority(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "acm-pca",
		OperationName: "CreateCertificateAuthority",
	}
}
