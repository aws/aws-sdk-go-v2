// Code generated by smithy-go-codegen DO NOT EDIT.

package acmpca

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Lists information about a specific audit report created by calling the
// CreateCertificateAuthorityAuditReport () action. Audit information is created
// every time the certificate authority (CA) private key is used. The private key
// is used when you call the IssueCertificate () action or the RevokeCertificate ()
// action.
func (c *Client) DescribeCertificateAuthorityAuditReport(ctx context.Context, params *DescribeCertificateAuthorityAuditReportInput, optFns ...func(*Options)) (*DescribeCertificateAuthorityAuditReportOutput, error) {
	stack := middleware.NewStack("DescribeCertificateAuthorityAuditReport", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeCertificateAuthorityAuditReportMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeCertificateAuthorityAuditReportValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeCertificateAuthorityAuditReport(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeCertificateAuthorityAuditReport",
			Err:           err,
		}
	}
	out := result.(*DescribeCertificateAuthorityAuditReportOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeCertificateAuthorityAuditReportInput struct {
	// The report ID returned by calling the CreateCertificateAuthorityAuditReport ()
	// action.
	AuditReportId *string
	// The Amazon Resource Name (ARN) of the private CA. This must be of the form:
	// arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
	// .
	CertificateAuthorityArn *string
}

type DescribeCertificateAuthorityAuditReportOutput struct {
	// Specifies whether report creation is in progress, has succeeded, or has failed.
	AuditReportStatus types.AuditReportStatus
	// Name of the S3 bucket that contains the report.
	S3BucketName *string
	// S3 key that uniquely identifies the report file in your S3 bucket.
	S3Key *string
	// The date and time at which the report was created.
	CreatedAt *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeCertificateAuthorityAuditReportMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeCertificateAuthorityAuditReport{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeCertificateAuthorityAuditReport{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeCertificateAuthorityAuditReport(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "acm-pca",
		OperationName: "DescribeCertificateAuthorityAuditReport",
	}
}
