// Code generated by smithy-go-codegen DO NOT EDIT.

package acmpca

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Imports a signed private CA certificate into ACM Private CA. This action is used
// when you are using a chain of trust whose root is located outside ACM Private
// CA. Before you can call this action, the following preparations must in place:
// <ol> <li> <p>In ACM Private CA, call the <a>CreateCertificateAuthority</a>
// action to create the private CA that that you plan to back with the imported
// certificate.</p> </li> <li> <p>Call the <a>GetCertificateAuthorityCsr</a> action
// to generate a certificate signing request (CSR).</p> </li> <li> <p>Sign the CSR
// using a root or intermediate CA hosted either by an on-premises PKI hierarchy or
// a commercial CA..</p> </li> <li> <p>Create a certificate chain and copy the
// signed certificate and the certificate chain to your working directory.</p>
// </li> </ol> <p>The following requirements apply when you import a CA
// certificate.</p> <ul> <li> <p>You cannot import a non-self-signed certificate
// for use as a root CA.</p> </li> <li> <p>You cannot import a self-signed
// certificate for use as a subordinate CA.</p> </li> <li> <p>Your certificate
// chain must not include the private CA certificate that you are importing.</p>
// </li> <li> <p>Your ACM Private CA-hosted or on-premises CA certificate must be
// the last certificate in your chain. The subordinate certificate, if any, that
// your root CA signed must be next to last. The subordinate certificate signed by
// the preceding subordinate CA must come next, and so on until your chain is
// built. </p> </li> <li> <p>The chain must be PEM-encoded.</p> </li> </ul>
func (c *Client) ImportCertificateAuthorityCertificate(ctx context.Context, params *ImportCertificateAuthorityCertificateInput, optFns ...func(*Options)) (*ImportCertificateAuthorityCertificateOutput, error) {
	stack := middleware.NewStack("ImportCertificateAuthorityCertificate", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpImportCertificateAuthorityCertificateMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpImportCertificateAuthorityCertificateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opImportCertificateAuthorityCertificate(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ImportCertificateAuthorityCertificate",
			Err:           err,
		}
	}
	out := result.(*ImportCertificateAuthorityCertificateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ImportCertificateAuthorityCertificateInput struct {
	// A PEM-encoded file that contains all of your certificates, other than the
	// certificate you're importing, chaining up to your root CA. Your ACM Private
	// CA-hosted or on-premises root certificate is the last in the chain, and each
	// certificate in the chain signs the one preceding. This parameter must be
	// supplied when you import a subordinate CA. When you import a root CA, there is
	// no chain.
	CertificateChain []byte
	// The Amazon Resource Name (ARN) that was returned when you called
	// CreateCertificateAuthority (). This must be of the form:
	// arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
	CertificateAuthorityArn *string
	// The PEM-encoded certificate for a private CA. This may be a self-signed
	// certificate in the case of a root CA, or it may be signed by another CA that you
	// control.
	Certificate []byte
}

type ImportCertificateAuthorityCertificateOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpImportCertificateAuthorityCertificateMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpImportCertificateAuthorityCertificate{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpImportCertificateAuthorityCertificate{}, middleware.After)
}

func newServiceMetadataMiddleware_opImportCertificateAuthorityCertificate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "acm-pca",
		OperationName: "ImportCertificateAuthorityCertificate",
	}
}
