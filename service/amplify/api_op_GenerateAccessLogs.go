// Code generated by smithy-go-codegen DO NOT EDIT.

package amplify

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns the website access logs for a specific time range using a presigned URL.
func (c *Client) GenerateAccessLogs(ctx context.Context, params *GenerateAccessLogsInput, optFns ...func(*Options)) (*GenerateAccessLogsOutput, error) {
	stack := middleware.NewStack("GenerateAccessLogs", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGenerateAccessLogsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGenerateAccessLogsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGenerateAccessLogs(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GenerateAccessLogs",
			Err:           err,
		}
	}
	out := result.(*GenerateAccessLogsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The request structure for the generate access logs request.
type GenerateAccessLogsInput struct {
	// The time at which the logs should end. The time range specified is inclusive of
	// the end time.
	EndTime *time.Time
	// The name of the domain.
	DomainName *string
	// The unique ID for an Amplify app.
	AppId *string
	// The time at which the logs should start. The time range specified is inclusive
	// of the start time.
	StartTime *time.Time
}

// The result structure for the generate access logs request.
type GenerateAccessLogsOutput struct {
	// The pre-signed URL for the requested access logs.
	LogUrl *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGenerateAccessLogsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGenerateAccessLogs{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGenerateAccessLogs{}, middleware.After)
}

func newServiceMetadataMiddleware_opGenerateAccessLogs(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "amplify",
		OperationName: "GenerateAccessLogs",
	}
}
