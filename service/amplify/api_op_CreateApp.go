// Code generated by smithy-go-codegen DO NOT EDIT.

package amplify

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/amplify/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new Amplify app.
func (c *Client) CreateApp(ctx context.Context, params *CreateAppInput, optFns ...func(*Options)) (*CreateAppOutput, error) {
	stack := middleware.NewStack("CreateApp", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateAppMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateAppValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateApp(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateApp",
			Err:           err,
		}
	}
	out := result.(*CreateAppOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The request structure used to create apps in Amplify.
type CreateAppInput struct {
	// The tag for an Amplify app.
	Tags map[string]*string
	// The repository for an Amplify app.
	Repository *string
	// Enables the auto building of branches for an Amplify app.
	EnableBranchAutoBuild *bool
	// Automatically disconnects a branch in the Amplify Console when you delete a
	// branch from your Git repository.
	EnableBranchAutoDeletion *bool
	// The credentials for basic authorization for an Amplify app.
	BasicAuthCredentials *string
	// The description for an Amplify app.
	Description *string
	// The personal access token for a third-party source control system for an Amplify
	// app. The personal access token is used to create a webhook and a read-only
	// deploy key. The token is not stored.
	AccessToken *string
	// The build specification (build spec) for an Amplify app.
	BuildSpec *string
	// Enables automated branch creation for the Amplify app.
	EnableAutoBranchCreation *bool
	// The AWS Identity and Access Management (IAM) service role for an Amplify app.
	IamServiceRoleArn *string
	// The OAuth token for a third-party source control system for an Amplify app. The
	// OAuth token is used to create a webhook and a read-only deploy key. The OAuth
	// token is not stored.
	OauthToken *string
	// The automated branch creation glob patterns for the Amplify app.
	AutoBranchCreationPatterns []*string
	// The environment variables map for an Amplify app.
	EnvironmentVariables map[string]*string
	// Enables basic authorization for an Amplify app. This will apply to all branches
	// that are part of this app.
	EnableBasicAuth *bool
	// The name for the Amplify app.
	Name *string
	// The platform or framework for an Amplify app.
	Platform types.Platform
	// The automated branch creation configuration for the Amplify app.
	AutoBranchCreationConfig *types.AutoBranchCreationConfig
	// The custom rewrite and redirect rules for an Amplify app.
	CustomRules []*types.CustomRule
}

type CreateAppOutput struct {
	// Represents the different branches of a repository for building, deploying, and
	// hosting an Amplify app.
	App *types.App

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateAppMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateApp{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateApp{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateApp(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "amplify",
		OperationName: "CreateApp",
	}
}
