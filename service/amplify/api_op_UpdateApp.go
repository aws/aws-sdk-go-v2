// Code generated by smithy-go-codegen DO NOT EDIT.

package amplify

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/amplify/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates an existing Amplify app.
func (c *Client) UpdateApp(ctx context.Context, params *UpdateAppInput, optFns ...func(*Options)) (*UpdateAppOutput, error) {
	stack := middleware.NewStack("UpdateApp", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpUpdateAppMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateAppValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateApp(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateApp",
			Err:           err,
		}
	}
	out := result.(*UpdateAppOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The request structure for the update app request.
type UpdateAppInput struct {
	// Enables branch auto-building for an Amplify app.
	EnableBranchAutoBuild *bool
	// The name of the repository for an Amplify app
	Repository *string
	// The basic authorization credentials for an Amplify app.
	BasicAuthCredentials *string
	// The personal access token for a third-party source control system for an Amplify
	// app. The token is used to create webhook and a read-only deploy key. The token
	// is not stored.
	AccessToken *string
	// Enables automated branch creation for the Amplify app.
	EnableAutoBranchCreation *bool
	// The description for an Amplify app.
	Description *string
	// Enables basic authorization for an Amplify app.
	EnableBasicAuth *bool
	// The OAuth token for a third-party source control system for an Amplify app. The
	// token is used to create a webhook and a read-only deploy key. The OAuth token is
	// not stored.
	OauthToken *string
	// The platform for an Amplify app.
	Platform types.Platform
	// The AWS Identity and Access Management (IAM) service role for an Amplify app.
	IamServiceRoleArn *string
	// The environment variables for an Amplify app.
	EnvironmentVariables map[string]*string
	// Describes the automated branch creation glob patterns for the Amplify app.
	AutoBranchCreationPatterns []*string
	// The custom redirect and rewrite rules for an Amplify app.
	CustomRules []*types.CustomRule
	// The unique ID for an Amplify app.
	AppId *string
	// The automated branch creation configuration for the Amplify app.
	AutoBranchCreationConfig *types.AutoBranchCreationConfig
	// The build specification (build spec) for an Amplify app.
	BuildSpec *string
	// The name for an Amplify app.
	Name *string
	// Automatically disconnects a branch in the Amplify Console when you delete a
	// branch from your Git repository.
	EnableBranchAutoDeletion *bool
}

// The result structure for an Amplify app update request.
type UpdateAppOutput struct {
	// Represents the updated Amplify app.
	App *types.App

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpUpdateAppMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpUpdateApp{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateApp{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateApp(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "amplify",
		OperationName: "UpdateApp",
	}
}
