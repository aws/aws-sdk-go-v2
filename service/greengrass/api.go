// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package greengrass

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opAssociateRoleToGroup = "AssociateRoleToGroup"

// AssociateRoleToGroupRequest is a API request type for the AssociateRoleToGroup API operation.
type AssociateRoleToGroupRequest struct {
	*aws.Request
	Input *AssociateRoleToGroupInput
}

// Send marshals and sends the AssociateRoleToGroup API request.
func (r AssociateRoleToGroupRequest) Send() (*AssociateRoleToGroupOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*AssociateRoleToGroupOutput), nil
}

// AssociateRoleToGroupRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Associates a role with a group. The role will be used by the AWS Greengrass
// core in order to access AWS cloud services. The role's permissions will allow
// Greengrass core Lambda functions to perform actions against the cloud.
//
//    // Example sending a request using the AssociateRoleToGroupRequest method.
//    req := client.AssociateRoleToGroupRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/AssociateRoleToGroup
func (c *Greengrass) AssociateRoleToGroupRequest(input *AssociateRoleToGroupInput) AssociateRoleToGroupRequest {
	op := &aws.Operation{
		Name:       opAssociateRoleToGroup,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/groups/{GroupId}/role",
	}

	if input == nil {
		input = &AssociateRoleToGroupInput{}
	}

	output := &AssociateRoleToGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return AssociateRoleToGroupRequest{Request: req, Input: input}
}

const opAssociateServiceRoleToAccount = "AssociateServiceRoleToAccount"

// AssociateServiceRoleToAccountRequest is a API request type for the AssociateServiceRoleToAccount API operation.
type AssociateServiceRoleToAccountRequest struct {
	*aws.Request
	Input *AssociateServiceRoleToAccountInput
}

// Send marshals and sends the AssociateServiceRoleToAccount API request.
func (r AssociateServiceRoleToAccountRequest) Send() (*AssociateServiceRoleToAccountOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*AssociateServiceRoleToAccountOutput), nil
}

// AssociateServiceRoleToAccountRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Associates a role which is used by AWS Greengrass. AWS Greengrass uses the
// role to access your Lambda functions and AWS IoT resources. This is necessary
// for deployments to succeed. It needs to have minimum permissions in policy
// ``AWSGreengrassResourceAccessRolePolicy``
//
//    // Example sending a request using the AssociateServiceRoleToAccountRequest method.
//    req := client.AssociateServiceRoleToAccountRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/AssociateServiceRoleToAccount
func (c *Greengrass) AssociateServiceRoleToAccountRequest(input *AssociateServiceRoleToAccountInput) AssociateServiceRoleToAccountRequest {
	op := &aws.Operation{
		Name:       opAssociateServiceRoleToAccount,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/servicerole",
	}

	if input == nil {
		input = &AssociateServiceRoleToAccountInput{}
	}

	output := &AssociateServiceRoleToAccountOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return AssociateServiceRoleToAccountRequest{Request: req, Input: input}
}

const opCreateCoreDefinition = "CreateCoreDefinition"

// CreateCoreDefinitionRequest is a API request type for the CreateCoreDefinition API operation.
type CreateCoreDefinitionRequest struct {
	*aws.Request
	Input *CreateCoreDefinitionInput
}

// Send marshals and sends the CreateCoreDefinition API request.
func (r CreateCoreDefinitionRequest) Send() (*CreateCoreDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateCoreDefinitionOutput), nil
}

// CreateCoreDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a core definition. You may optionally provide the initial version
// of the core definition or use ''CreateCoreDefinitionVersion'' at a later
// time. AWS Greengrass Groups must each contain exactly 1 AWS Greengrass Core.
//
//    // Example sending a request using the CreateCoreDefinitionRequest method.
//    req := client.CreateCoreDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateCoreDefinition
func (c *Greengrass) CreateCoreDefinitionRequest(input *CreateCoreDefinitionInput) CreateCoreDefinitionRequest {
	op := &aws.Operation{
		Name:       opCreateCoreDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/cores",
	}

	if input == nil {
		input = &CreateCoreDefinitionInput{}
	}

	output := &CreateCoreDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateCoreDefinitionRequest{Request: req, Input: input}
}

const opCreateCoreDefinitionVersion = "CreateCoreDefinitionVersion"

// CreateCoreDefinitionVersionRequest is a API request type for the CreateCoreDefinitionVersion API operation.
type CreateCoreDefinitionVersionRequest struct {
	*aws.Request
	Input *CreateCoreDefinitionVersionInput
}

// Send marshals and sends the CreateCoreDefinitionVersion API request.
func (r CreateCoreDefinitionVersionRequest) Send() (*CreateCoreDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateCoreDefinitionVersionOutput), nil
}

// CreateCoreDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a version of a core definition that has already been defined. AWS
// Greengrass Groups must each contain exactly 1 AWS Greengrass Core.
//
//    // Example sending a request using the CreateCoreDefinitionVersionRequest method.
//    req := client.CreateCoreDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateCoreDefinitionVersion
func (c *Greengrass) CreateCoreDefinitionVersionRequest(input *CreateCoreDefinitionVersionInput) CreateCoreDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opCreateCoreDefinitionVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/cores/{CoreDefinitionId}/versions",
	}

	if input == nil {
		input = &CreateCoreDefinitionVersionInput{}
	}

	output := &CreateCoreDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateCoreDefinitionVersionRequest{Request: req, Input: input}
}

const opCreateDeployment = "CreateDeployment"

// CreateDeploymentRequest is a API request type for the CreateDeployment API operation.
type CreateDeploymentRequest struct {
	*aws.Request
	Input *CreateDeploymentInput
}

// Send marshals and sends the CreateDeployment API request.
func (r CreateDeploymentRequest) Send() (*CreateDeploymentOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateDeploymentOutput), nil
}

// CreateDeploymentRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a deployment.
//
//    // Example sending a request using the CreateDeploymentRequest method.
//    req := client.CreateDeploymentRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeployment
func (c *Greengrass) CreateDeploymentRequest(input *CreateDeploymentInput) CreateDeploymentRequest {
	op := &aws.Operation{
		Name:       opCreateDeployment,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/groups/{GroupId}/deployments",
	}

	if input == nil {
		input = &CreateDeploymentInput{}
	}

	output := &CreateDeploymentOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateDeploymentRequest{Request: req, Input: input}
}

const opCreateDeviceDefinition = "CreateDeviceDefinition"

// CreateDeviceDefinitionRequest is a API request type for the CreateDeviceDefinition API operation.
type CreateDeviceDefinitionRequest struct {
	*aws.Request
	Input *CreateDeviceDefinitionInput
}

// Send marshals and sends the CreateDeviceDefinition API request.
func (r CreateDeviceDefinitionRequest) Send() (*CreateDeviceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateDeviceDefinitionOutput), nil
}

// CreateDeviceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a device definition. You may optinally provide the initial version
// of the device definition or use ``CreateDeviceDefinitionVersion`` at a later
// time.
//
//    // Example sending a request using the CreateDeviceDefinitionRequest method.
//    req := client.CreateDeviceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeviceDefinition
func (c *Greengrass) CreateDeviceDefinitionRequest(input *CreateDeviceDefinitionInput) CreateDeviceDefinitionRequest {
	op := &aws.Operation{
		Name:       opCreateDeviceDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/devices",
	}

	if input == nil {
		input = &CreateDeviceDefinitionInput{}
	}

	output := &CreateDeviceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateDeviceDefinitionRequest{Request: req, Input: input}
}

const opCreateDeviceDefinitionVersion = "CreateDeviceDefinitionVersion"

// CreateDeviceDefinitionVersionRequest is a API request type for the CreateDeviceDefinitionVersion API operation.
type CreateDeviceDefinitionVersionRequest struct {
	*aws.Request
	Input *CreateDeviceDefinitionVersionInput
}

// Send marshals and sends the CreateDeviceDefinitionVersion API request.
func (r CreateDeviceDefinitionVersionRequest) Send() (*CreateDeviceDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateDeviceDefinitionVersionOutput), nil
}

// CreateDeviceDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a version of a device definition that has already been defined.
//
//    // Example sending a request using the CreateDeviceDefinitionVersionRequest method.
//    req := client.CreateDeviceDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeviceDefinitionVersion
func (c *Greengrass) CreateDeviceDefinitionVersionRequest(input *CreateDeviceDefinitionVersionInput) CreateDeviceDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opCreateDeviceDefinitionVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/devices/{DeviceDefinitionId}/versions",
	}

	if input == nil {
		input = &CreateDeviceDefinitionVersionInput{}
	}

	output := &CreateDeviceDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateDeviceDefinitionVersionRequest{Request: req, Input: input}
}

const opCreateFunctionDefinition = "CreateFunctionDefinition"

// CreateFunctionDefinitionRequest is a API request type for the CreateFunctionDefinition API operation.
type CreateFunctionDefinitionRequest struct {
	*aws.Request
	Input *CreateFunctionDefinitionInput
}

// Send marshals and sends the CreateFunctionDefinition API request.
func (r CreateFunctionDefinitionRequest) Send() (*CreateFunctionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateFunctionDefinitionOutput), nil
}

// CreateFunctionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a Lambda function definition which contains a list of Lambda functions
// and their configurations to be used in a group. You can create an initial
// version of the definition by providing a list of Lambda functions and their
// configurations now, or use ``CreateFunctionDefinitionVersion`` later.
//
//    // Example sending a request using the CreateFunctionDefinitionRequest method.
//    req := client.CreateFunctionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateFunctionDefinition
func (c *Greengrass) CreateFunctionDefinitionRequest(input *CreateFunctionDefinitionInput) CreateFunctionDefinitionRequest {
	op := &aws.Operation{
		Name:       opCreateFunctionDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/functions",
	}

	if input == nil {
		input = &CreateFunctionDefinitionInput{}
	}

	output := &CreateFunctionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateFunctionDefinitionRequest{Request: req, Input: input}
}

const opCreateFunctionDefinitionVersion = "CreateFunctionDefinitionVersion"

// CreateFunctionDefinitionVersionRequest is a API request type for the CreateFunctionDefinitionVersion API operation.
type CreateFunctionDefinitionVersionRequest struct {
	*aws.Request
	Input *CreateFunctionDefinitionVersionInput
}

// Send marshals and sends the CreateFunctionDefinitionVersion API request.
func (r CreateFunctionDefinitionVersionRequest) Send() (*CreateFunctionDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateFunctionDefinitionVersionOutput), nil
}

// CreateFunctionDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Create a version of a Lambda function definition that has already been defined.
//
//    // Example sending a request using the CreateFunctionDefinitionVersionRequest method.
//    req := client.CreateFunctionDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateFunctionDefinitionVersion
func (c *Greengrass) CreateFunctionDefinitionVersionRequest(input *CreateFunctionDefinitionVersionInput) CreateFunctionDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opCreateFunctionDefinitionVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/functions/{FunctionDefinitionId}/versions",
	}

	if input == nil {
		input = &CreateFunctionDefinitionVersionInput{}
	}

	output := &CreateFunctionDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateFunctionDefinitionVersionRequest{Request: req, Input: input}
}

const opCreateGroup = "CreateGroup"

// CreateGroupRequest is a API request type for the CreateGroup API operation.
type CreateGroupRequest struct {
	*aws.Request
	Input *CreateGroupInput
}

// Send marshals and sends the CreateGroup API request.
func (r CreateGroupRequest) Send() (*CreateGroupOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateGroupOutput), nil
}

// CreateGroupRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a group. You may optionally provide the initial version of the group
// or use ''CreateGroupVersion'' at a later time.
//
//    // Example sending a request using the CreateGroupRequest method.
//    req := client.CreateGroupRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroup
func (c *Greengrass) CreateGroupRequest(input *CreateGroupInput) CreateGroupRequest {
	op := &aws.Operation{
		Name:       opCreateGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/groups",
	}

	if input == nil {
		input = &CreateGroupInput{}
	}

	output := &CreateGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateGroupRequest{Request: req, Input: input}
}

const opCreateGroupCertificateAuthority = "CreateGroupCertificateAuthority"

// CreateGroupCertificateAuthorityRequest is a API request type for the CreateGroupCertificateAuthority API operation.
type CreateGroupCertificateAuthorityRequest struct {
	*aws.Request
	Input *CreateGroupCertificateAuthorityInput
}

// Send marshals and sends the CreateGroupCertificateAuthority API request.
func (r CreateGroupCertificateAuthorityRequest) Send() (*CreateGroupCertificateAuthorityOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateGroupCertificateAuthorityOutput), nil
}

// CreateGroupCertificateAuthorityRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a CA for the group. If a CA already exists, it will rotate the existing
// CA.
//
//    // Example sending a request using the CreateGroupCertificateAuthorityRequest method.
//    req := client.CreateGroupCertificateAuthorityRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupCertificateAuthority
func (c *Greengrass) CreateGroupCertificateAuthorityRequest(input *CreateGroupCertificateAuthorityInput) CreateGroupCertificateAuthorityRequest {
	op := &aws.Operation{
		Name:       opCreateGroupCertificateAuthority,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/groups/{GroupId}/certificateauthorities",
	}

	if input == nil {
		input = &CreateGroupCertificateAuthorityInput{}
	}

	output := &CreateGroupCertificateAuthorityOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateGroupCertificateAuthorityRequest{Request: req, Input: input}
}

const opCreateGroupVersion = "CreateGroupVersion"

// CreateGroupVersionRequest is a API request type for the CreateGroupVersion API operation.
type CreateGroupVersionRequest struct {
	*aws.Request
	Input *CreateGroupVersionInput
}

// Send marshals and sends the CreateGroupVersion API request.
func (r CreateGroupVersionRequest) Send() (*CreateGroupVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateGroupVersionOutput), nil
}

// CreateGroupVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a version of a group which has already been defined.
//
//    // Example sending a request using the CreateGroupVersionRequest method.
//    req := client.CreateGroupVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupVersion
func (c *Greengrass) CreateGroupVersionRequest(input *CreateGroupVersionInput) CreateGroupVersionRequest {
	op := &aws.Operation{
		Name:       opCreateGroupVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/groups/{GroupId}/versions",
	}

	if input == nil {
		input = &CreateGroupVersionInput{}
	}

	output := &CreateGroupVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateGroupVersionRequest{Request: req, Input: input}
}

const opCreateLoggerDefinition = "CreateLoggerDefinition"

// CreateLoggerDefinitionRequest is a API request type for the CreateLoggerDefinition API operation.
type CreateLoggerDefinitionRequest struct {
	*aws.Request
	Input *CreateLoggerDefinitionInput
}

// Send marshals and sends the CreateLoggerDefinition API request.
func (r CreateLoggerDefinitionRequest) Send() (*CreateLoggerDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateLoggerDefinitionOutput), nil
}

// CreateLoggerDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a logger definition. You may optionally provide the initial version
// of the logger definition or use ``CreateLoggerDefinitionVersion`` at a later
// time.
//
//    // Example sending a request using the CreateLoggerDefinitionRequest method.
//    req := client.CreateLoggerDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateLoggerDefinition
func (c *Greengrass) CreateLoggerDefinitionRequest(input *CreateLoggerDefinitionInput) CreateLoggerDefinitionRequest {
	op := &aws.Operation{
		Name:       opCreateLoggerDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/loggers",
	}

	if input == nil {
		input = &CreateLoggerDefinitionInput{}
	}

	output := &CreateLoggerDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateLoggerDefinitionRequest{Request: req, Input: input}
}

const opCreateLoggerDefinitionVersion = "CreateLoggerDefinitionVersion"

// CreateLoggerDefinitionVersionRequest is a API request type for the CreateLoggerDefinitionVersion API operation.
type CreateLoggerDefinitionVersionRequest struct {
	*aws.Request
	Input *CreateLoggerDefinitionVersionInput
}

// Send marshals and sends the CreateLoggerDefinitionVersion API request.
func (r CreateLoggerDefinitionVersionRequest) Send() (*CreateLoggerDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateLoggerDefinitionVersionOutput), nil
}

// CreateLoggerDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a version of a logger definition that has already been defined.
//
//    // Example sending a request using the CreateLoggerDefinitionVersionRequest method.
//    req := client.CreateLoggerDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateLoggerDefinitionVersion
func (c *Greengrass) CreateLoggerDefinitionVersionRequest(input *CreateLoggerDefinitionVersionInput) CreateLoggerDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opCreateLoggerDefinitionVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/loggers/{LoggerDefinitionId}/versions",
	}

	if input == nil {
		input = &CreateLoggerDefinitionVersionInput{}
	}

	output := &CreateLoggerDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateLoggerDefinitionVersionRequest{Request: req, Input: input}
}

const opCreateResourceDefinition = "CreateResourceDefinition"

// CreateResourceDefinitionRequest is a API request type for the CreateResourceDefinition API operation.
type CreateResourceDefinitionRequest struct {
	*aws.Request
	Input *CreateResourceDefinitionInput
}

// Send marshals and sends the CreateResourceDefinition API request.
func (r CreateResourceDefinitionRequest) Send() (*CreateResourceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateResourceDefinitionOutput), nil
}

// CreateResourceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a resource definition which contains a list of resources to be used
// in a group. You can create an initial version of the definition by providing
// a list of resources now, or use ``CreateResourceDefinitionVersion`` later.
//
//    // Example sending a request using the CreateResourceDefinitionRequest method.
//    req := client.CreateResourceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateResourceDefinition
func (c *Greengrass) CreateResourceDefinitionRequest(input *CreateResourceDefinitionInput) CreateResourceDefinitionRequest {
	op := &aws.Operation{
		Name:       opCreateResourceDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/resources",
	}

	if input == nil {
		input = &CreateResourceDefinitionInput{}
	}

	output := &CreateResourceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateResourceDefinitionRequest{Request: req, Input: input}
}

const opCreateResourceDefinitionVersion = "CreateResourceDefinitionVersion"

// CreateResourceDefinitionVersionRequest is a API request type for the CreateResourceDefinitionVersion API operation.
type CreateResourceDefinitionVersionRequest struct {
	*aws.Request
	Input *CreateResourceDefinitionVersionInput
}

// Send marshals and sends the CreateResourceDefinitionVersion API request.
func (r CreateResourceDefinitionVersionRequest) Send() (*CreateResourceDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateResourceDefinitionVersionOutput), nil
}

// CreateResourceDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Create a version of a resource definition that has already been defined.
//
//    // Example sending a request using the CreateResourceDefinitionVersionRequest method.
//    req := client.CreateResourceDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateResourceDefinitionVersion
func (c *Greengrass) CreateResourceDefinitionVersionRequest(input *CreateResourceDefinitionVersionInput) CreateResourceDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opCreateResourceDefinitionVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/resources/{ResourceDefinitionId}/versions",
	}

	if input == nil {
		input = &CreateResourceDefinitionVersionInput{}
	}

	output := &CreateResourceDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateResourceDefinitionVersionRequest{Request: req, Input: input}
}

const opCreateSoftwareUpdateJob = "CreateSoftwareUpdateJob"

// CreateSoftwareUpdateJobRequest is a API request type for the CreateSoftwareUpdateJob API operation.
type CreateSoftwareUpdateJobRequest struct {
	*aws.Request
	Input *CreateSoftwareUpdateJobInput
}

// Send marshals and sends the CreateSoftwareUpdateJob API request.
func (r CreateSoftwareUpdateJobRequest) Send() (*CreateSoftwareUpdateJobOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateSoftwareUpdateJobOutput), nil
}

// CreateSoftwareUpdateJobRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates an Iot Job that will trigger your Greengrass Cores to update the
// software they are running.
//
//    // Example sending a request using the CreateSoftwareUpdateJobRequest method.
//    req := client.CreateSoftwareUpdateJobRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSoftwareUpdateJob
func (c *Greengrass) CreateSoftwareUpdateJobRequest(input *CreateSoftwareUpdateJobInput) CreateSoftwareUpdateJobRequest {
	op := &aws.Operation{
		Name:       opCreateSoftwareUpdateJob,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/updates",
	}

	if input == nil {
		input = &CreateSoftwareUpdateJobInput{}
	}

	output := &CreateSoftwareUpdateJobOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateSoftwareUpdateJobRequest{Request: req, Input: input}
}

const opCreateSubscriptionDefinition = "CreateSubscriptionDefinition"

// CreateSubscriptionDefinitionRequest is a API request type for the CreateSubscriptionDefinition API operation.
type CreateSubscriptionDefinitionRequest struct {
	*aws.Request
	Input *CreateSubscriptionDefinitionInput
}

// Send marshals and sends the CreateSubscriptionDefinition API request.
func (r CreateSubscriptionDefinitionRequest) Send() (*CreateSubscriptionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateSubscriptionDefinitionOutput), nil
}

// CreateSubscriptionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a subscription definition. You may optionally provide the initial
// version of the subscription definition or use ``CreateSubscriptionDefinitionVersion``
// at a later time.
//
//    // Example sending a request using the CreateSubscriptionDefinitionRequest method.
//    req := client.CreateSubscriptionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSubscriptionDefinition
func (c *Greengrass) CreateSubscriptionDefinitionRequest(input *CreateSubscriptionDefinitionInput) CreateSubscriptionDefinitionRequest {
	op := &aws.Operation{
		Name:       opCreateSubscriptionDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/subscriptions",
	}

	if input == nil {
		input = &CreateSubscriptionDefinitionInput{}
	}

	output := &CreateSubscriptionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateSubscriptionDefinitionRequest{Request: req, Input: input}
}

const opCreateSubscriptionDefinitionVersion = "CreateSubscriptionDefinitionVersion"

// CreateSubscriptionDefinitionVersionRequest is a API request type for the CreateSubscriptionDefinitionVersion API operation.
type CreateSubscriptionDefinitionVersionRequest struct {
	*aws.Request
	Input *CreateSubscriptionDefinitionVersionInput
}

// Send marshals and sends the CreateSubscriptionDefinitionVersion API request.
func (r CreateSubscriptionDefinitionVersionRequest) Send() (*CreateSubscriptionDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateSubscriptionDefinitionVersionOutput), nil
}

// CreateSubscriptionDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Creates a version of a subscription definition which has already been defined.
//
//    // Example sending a request using the CreateSubscriptionDefinitionVersionRequest method.
//    req := client.CreateSubscriptionDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSubscriptionDefinitionVersion
func (c *Greengrass) CreateSubscriptionDefinitionVersionRequest(input *CreateSubscriptionDefinitionVersionInput) CreateSubscriptionDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opCreateSubscriptionDefinitionVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions",
	}

	if input == nil {
		input = &CreateSubscriptionDefinitionVersionInput{}
	}

	output := &CreateSubscriptionDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateSubscriptionDefinitionVersionRequest{Request: req, Input: input}
}

const opDeleteCoreDefinition = "DeleteCoreDefinition"

// DeleteCoreDefinitionRequest is a API request type for the DeleteCoreDefinition API operation.
type DeleteCoreDefinitionRequest struct {
	*aws.Request
	Input *DeleteCoreDefinitionInput
}

// Send marshals and sends the DeleteCoreDefinition API request.
func (r DeleteCoreDefinitionRequest) Send() (*DeleteCoreDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteCoreDefinitionOutput), nil
}

// DeleteCoreDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deletes a core definition. The core definition must not have been used in
// a deployment.
//
//    // Example sending a request using the DeleteCoreDefinitionRequest method.
//    req := client.DeleteCoreDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteCoreDefinition
func (c *Greengrass) DeleteCoreDefinitionRequest(input *DeleteCoreDefinitionInput) DeleteCoreDefinitionRequest {
	op := &aws.Operation{
		Name:       opDeleteCoreDefinition,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/definition/cores/{CoreDefinitionId}",
	}

	if input == nil {
		input = &DeleteCoreDefinitionInput{}
	}

	output := &DeleteCoreDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteCoreDefinitionRequest{Request: req, Input: input}
}

const opDeleteDeviceDefinition = "DeleteDeviceDefinition"

// DeleteDeviceDefinitionRequest is a API request type for the DeleteDeviceDefinition API operation.
type DeleteDeviceDefinitionRequest struct {
	*aws.Request
	Input *DeleteDeviceDefinitionInput
}

// Send marshals and sends the DeleteDeviceDefinition API request.
func (r DeleteDeviceDefinitionRequest) Send() (*DeleteDeviceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteDeviceDefinitionOutput), nil
}

// DeleteDeviceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deletes a device definition. The device definition must not have been used
// in a deployment.
//
//    // Example sending a request using the DeleteDeviceDefinitionRequest method.
//    req := client.DeleteDeviceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteDeviceDefinition
func (c *Greengrass) DeleteDeviceDefinitionRequest(input *DeleteDeviceDefinitionInput) DeleteDeviceDefinitionRequest {
	op := &aws.Operation{
		Name:       opDeleteDeviceDefinition,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/definition/devices/{DeviceDefinitionId}",
	}

	if input == nil {
		input = &DeleteDeviceDefinitionInput{}
	}

	output := &DeleteDeviceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteDeviceDefinitionRequest{Request: req, Input: input}
}

const opDeleteFunctionDefinition = "DeleteFunctionDefinition"

// DeleteFunctionDefinitionRequest is a API request type for the DeleteFunctionDefinition API operation.
type DeleteFunctionDefinitionRequest struct {
	*aws.Request
	Input *DeleteFunctionDefinitionInput
}

// Send marshals and sends the DeleteFunctionDefinition API request.
func (r DeleteFunctionDefinitionRequest) Send() (*DeleteFunctionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteFunctionDefinitionOutput), nil
}

// DeleteFunctionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deletes a Lambda function definition. The Lambda function definition must
// not have been used in a deployment.
//
//    // Example sending a request using the DeleteFunctionDefinitionRequest method.
//    req := client.DeleteFunctionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteFunctionDefinition
func (c *Greengrass) DeleteFunctionDefinitionRequest(input *DeleteFunctionDefinitionInput) DeleteFunctionDefinitionRequest {
	op := &aws.Operation{
		Name:       opDeleteFunctionDefinition,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/definition/functions/{FunctionDefinitionId}",
	}

	if input == nil {
		input = &DeleteFunctionDefinitionInput{}
	}

	output := &DeleteFunctionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteFunctionDefinitionRequest{Request: req, Input: input}
}

const opDeleteGroup = "DeleteGroup"

// DeleteGroupRequest is a API request type for the DeleteGroup API operation.
type DeleteGroupRequest struct {
	*aws.Request
	Input *DeleteGroupInput
}

// Send marshals and sends the DeleteGroup API request.
func (r DeleteGroupRequest) Send() (*DeleteGroupOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteGroupOutput), nil
}

// DeleteGroupRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deletes a group. The group must not have been used in deployment.
//
//    // Example sending a request using the DeleteGroupRequest method.
//    req := client.DeleteGroupRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteGroup
func (c *Greengrass) DeleteGroupRequest(input *DeleteGroupInput) DeleteGroupRequest {
	op := &aws.Operation{
		Name:       opDeleteGroup,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/groups/{GroupId}",
	}

	if input == nil {
		input = &DeleteGroupInput{}
	}

	output := &DeleteGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteGroupRequest{Request: req, Input: input}
}

const opDeleteLoggerDefinition = "DeleteLoggerDefinition"

// DeleteLoggerDefinitionRequest is a API request type for the DeleteLoggerDefinition API operation.
type DeleteLoggerDefinitionRequest struct {
	*aws.Request
	Input *DeleteLoggerDefinitionInput
}

// Send marshals and sends the DeleteLoggerDefinition API request.
func (r DeleteLoggerDefinitionRequest) Send() (*DeleteLoggerDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteLoggerDefinitionOutput), nil
}

// DeleteLoggerDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deletes a logger definition. The logger definition must not have been used
// in a deployment.
//
//    // Example sending a request using the DeleteLoggerDefinitionRequest method.
//    req := client.DeleteLoggerDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteLoggerDefinition
func (c *Greengrass) DeleteLoggerDefinitionRequest(input *DeleteLoggerDefinitionInput) DeleteLoggerDefinitionRequest {
	op := &aws.Operation{
		Name:       opDeleteLoggerDefinition,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/definition/loggers/{LoggerDefinitionId}",
	}

	if input == nil {
		input = &DeleteLoggerDefinitionInput{}
	}

	output := &DeleteLoggerDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteLoggerDefinitionRequest{Request: req, Input: input}
}

const opDeleteResourceDefinition = "DeleteResourceDefinition"

// DeleteResourceDefinitionRequest is a API request type for the DeleteResourceDefinition API operation.
type DeleteResourceDefinitionRequest struct {
	*aws.Request
	Input *DeleteResourceDefinitionInput
}

// Send marshals and sends the DeleteResourceDefinition API request.
func (r DeleteResourceDefinitionRequest) Send() (*DeleteResourceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteResourceDefinitionOutput), nil
}

// DeleteResourceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deletes a resource definition.
//
//    // Example sending a request using the DeleteResourceDefinitionRequest method.
//    req := client.DeleteResourceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteResourceDefinition
func (c *Greengrass) DeleteResourceDefinitionRequest(input *DeleteResourceDefinitionInput) DeleteResourceDefinitionRequest {
	op := &aws.Operation{
		Name:       opDeleteResourceDefinition,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/definition/resources/{ResourceDefinitionId}",
	}

	if input == nil {
		input = &DeleteResourceDefinitionInput{}
	}

	output := &DeleteResourceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteResourceDefinitionRequest{Request: req, Input: input}
}

const opDeleteSubscriptionDefinition = "DeleteSubscriptionDefinition"

// DeleteSubscriptionDefinitionRequest is a API request type for the DeleteSubscriptionDefinition API operation.
type DeleteSubscriptionDefinitionRequest struct {
	*aws.Request
	Input *DeleteSubscriptionDefinitionInput
}

// Send marshals and sends the DeleteSubscriptionDefinition API request.
func (r DeleteSubscriptionDefinitionRequest) Send() (*DeleteSubscriptionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteSubscriptionDefinitionOutput), nil
}

// DeleteSubscriptionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deletes a subscription definition. The subscription definition must not have
// been used in a deployment.
//
//    // Example sending a request using the DeleteSubscriptionDefinitionRequest method.
//    req := client.DeleteSubscriptionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteSubscriptionDefinition
func (c *Greengrass) DeleteSubscriptionDefinitionRequest(input *DeleteSubscriptionDefinitionInput) DeleteSubscriptionDefinitionRequest {
	op := &aws.Operation{
		Name:       opDeleteSubscriptionDefinition,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
	}

	if input == nil {
		input = &DeleteSubscriptionDefinitionInput{}
	}

	output := &DeleteSubscriptionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteSubscriptionDefinitionRequest{Request: req, Input: input}
}

const opDisassociateRoleFromGroup = "DisassociateRoleFromGroup"

// DisassociateRoleFromGroupRequest is a API request type for the DisassociateRoleFromGroup API operation.
type DisassociateRoleFromGroupRequest struct {
	*aws.Request
	Input *DisassociateRoleFromGroupInput
}

// Send marshals and sends the DisassociateRoleFromGroup API request.
func (r DisassociateRoleFromGroupRequest) Send() (*DisassociateRoleFromGroupOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DisassociateRoleFromGroupOutput), nil
}

// DisassociateRoleFromGroupRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Disassociates the role from a group.
//
//    // Example sending a request using the DisassociateRoleFromGroupRequest method.
//    req := client.DisassociateRoleFromGroupRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DisassociateRoleFromGroup
func (c *Greengrass) DisassociateRoleFromGroupRequest(input *DisassociateRoleFromGroupInput) DisassociateRoleFromGroupRequest {
	op := &aws.Operation{
		Name:       opDisassociateRoleFromGroup,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/groups/{GroupId}/role",
	}

	if input == nil {
		input = &DisassociateRoleFromGroupInput{}
	}

	output := &DisassociateRoleFromGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DisassociateRoleFromGroupRequest{Request: req, Input: input}
}

const opDisassociateServiceRoleFromAccount = "DisassociateServiceRoleFromAccount"

// DisassociateServiceRoleFromAccountRequest is a API request type for the DisassociateServiceRoleFromAccount API operation.
type DisassociateServiceRoleFromAccountRequest struct {
	*aws.Request
	Input *DisassociateServiceRoleFromAccountInput
}

// Send marshals and sends the DisassociateServiceRoleFromAccount API request.
func (r DisassociateServiceRoleFromAccountRequest) Send() (*DisassociateServiceRoleFromAccountOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DisassociateServiceRoleFromAccountOutput), nil
}

// DisassociateServiceRoleFromAccountRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Disassociates the service role from the account. Without a service role,
// deployments will not work.
//
//    // Example sending a request using the DisassociateServiceRoleFromAccountRequest method.
//    req := client.DisassociateServiceRoleFromAccountRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DisassociateServiceRoleFromAccount
func (c *Greengrass) DisassociateServiceRoleFromAccountRequest(input *DisassociateServiceRoleFromAccountInput) DisassociateServiceRoleFromAccountRequest {
	op := &aws.Operation{
		Name:       opDisassociateServiceRoleFromAccount,
		HTTPMethod: "DELETE",
		HTTPPath:   "/greengrass/servicerole",
	}

	if input == nil {
		input = &DisassociateServiceRoleFromAccountInput{}
	}

	output := &DisassociateServiceRoleFromAccountOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DisassociateServiceRoleFromAccountRequest{Request: req, Input: input}
}

const opGetAssociatedRole = "GetAssociatedRole"

// GetAssociatedRoleRequest is a API request type for the GetAssociatedRole API operation.
type GetAssociatedRoleRequest struct {
	*aws.Request
	Input *GetAssociatedRoleInput
}

// Send marshals and sends the GetAssociatedRole API request.
func (r GetAssociatedRoleRequest) Send() (*GetAssociatedRoleOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetAssociatedRoleOutput), nil
}

// GetAssociatedRoleRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves the role associated with a particular group.
//
//    // Example sending a request using the GetAssociatedRoleRequest method.
//    req := client.GetAssociatedRoleRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetAssociatedRole
func (c *Greengrass) GetAssociatedRoleRequest(input *GetAssociatedRoleInput) GetAssociatedRoleRequest {
	op := &aws.Operation{
		Name:       opGetAssociatedRole,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/role",
	}

	if input == nil {
		input = &GetAssociatedRoleInput{}
	}

	output := &GetAssociatedRoleOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetAssociatedRoleRequest{Request: req, Input: input}
}

const opGetConnectivityInfo = "GetConnectivityInfo"

// GetConnectivityInfoRequest is a API request type for the GetConnectivityInfo API operation.
type GetConnectivityInfoRequest struct {
	*aws.Request
	Input *GetConnectivityInfoInput
}

// Send marshals and sends the GetConnectivityInfo API request.
func (r GetConnectivityInfoRequest) Send() (*GetConnectivityInfoOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetConnectivityInfoOutput), nil
}

// GetConnectivityInfoRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves the connectivity information for a core.
//
//    // Example sending a request using the GetConnectivityInfoRequest method.
//    req := client.GetConnectivityInfoRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetConnectivityInfo
func (c *Greengrass) GetConnectivityInfoRequest(input *GetConnectivityInfoInput) GetConnectivityInfoRequest {
	op := &aws.Operation{
		Name:       opGetConnectivityInfo,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/things/{ThingName}/connectivityInfo",
	}

	if input == nil {
		input = &GetConnectivityInfoInput{}
	}

	output := &GetConnectivityInfoOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetConnectivityInfoRequest{Request: req, Input: input}
}

const opGetCoreDefinition = "GetCoreDefinition"

// GetCoreDefinitionRequest is a API request type for the GetCoreDefinition API operation.
type GetCoreDefinitionRequest struct {
	*aws.Request
	Input *GetCoreDefinitionInput
}

// Send marshals and sends the GetCoreDefinition API request.
func (r GetCoreDefinitionRequest) Send() (*GetCoreDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetCoreDefinitionOutput), nil
}

// GetCoreDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a core definition version.
//
//    // Example sending a request using the GetCoreDefinitionRequest method.
//    req := client.GetCoreDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetCoreDefinition
func (c *Greengrass) GetCoreDefinitionRequest(input *GetCoreDefinitionInput) GetCoreDefinitionRequest {
	op := &aws.Operation{
		Name:       opGetCoreDefinition,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/cores/{CoreDefinitionId}",
	}

	if input == nil {
		input = &GetCoreDefinitionInput{}
	}

	output := &GetCoreDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetCoreDefinitionRequest{Request: req, Input: input}
}

const opGetCoreDefinitionVersion = "GetCoreDefinitionVersion"

// GetCoreDefinitionVersionRequest is a API request type for the GetCoreDefinitionVersion API operation.
type GetCoreDefinitionVersionRequest struct {
	*aws.Request
	Input *GetCoreDefinitionVersionInput
}

// Send marshals and sends the GetCoreDefinitionVersion API request.
func (r GetCoreDefinitionVersionRequest) Send() (*GetCoreDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetCoreDefinitionVersionOutput), nil
}

// GetCoreDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a core definition version.
//
//    // Example sending a request using the GetCoreDefinitionVersionRequest method.
//    req := client.GetCoreDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetCoreDefinitionVersion
func (c *Greengrass) GetCoreDefinitionVersionRequest(input *GetCoreDefinitionVersionInput) GetCoreDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opGetCoreDefinitionVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}",
	}

	if input == nil {
		input = &GetCoreDefinitionVersionInput{}
	}

	output := &GetCoreDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetCoreDefinitionVersionRequest{Request: req, Input: input}
}

const opGetDeploymentStatus = "GetDeploymentStatus"

// GetDeploymentStatusRequest is a API request type for the GetDeploymentStatus API operation.
type GetDeploymentStatusRequest struct {
	*aws.Request
	Input *GetDeploymentStatusInput
}

// Send marshals and sends the GetDeploymentStatus API request.
func (r GetDeploymentStatusRequest) Send() (*GetDeploymentStatusOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetDeploymentStatusOutput), nil
}

// GetDeploymentStatusRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Returns the status of a deployment.
//
//    // Example sending a request using the GetDeploymentStatusRequest method.
//    req := client.GetDeploymentStatusRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeploymentStatus
func (c *Greengrass) GetDeploymentStatusRequest(input *GetDeploymentStatusInput) GetDeploymentStatusRequest {
	op := &aws.Operation{
		Name:       opGetDeploymentStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status",
	}

	if input == nil {
		input = &GetDeploymentStatusInput{}
	}

	output := &GetDeploymentStatusOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetDeploymentStatusRequest{Request: req, Input: input}
}

const opGetDeviceDefinition = "GetDeviceDefinition"

// GetDeviceDefinitionRequest is a API request type for the GetDeviceDefinition API operation.
type GetDeviceDefinitionRequest struct {
	*aws.Request
	Input *GetDeviceDefinitionInput
}

// Send marshals and sends the GetDeviceDefinition API request.
func (r GetDeviceDefinitionRequest) Send() (*GetDeviceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetDeviceDefinitionOutput), nil
}

// GetDeviceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a device definition.
//
//    // Example sending a request using the GetDeviceDefinitionRequest method.
//    req := client.GetDeviceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeviceDefinition
func (c *Greengrass) GetDeviceDefinitionRequest(input *GetDeviceDefinitionInput) GetDeviceDefinitionRequest {
	op := &aws.Operation{
		Name:       opGetDeviceDefinition,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/devices/{DeviceDefinitionId}",
	}

	if input == nil {
		input = &GetDeviceDefinitionInput{}
	}

	output := &GetDeviceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetDeviceDefinitionRequest{Request: req, Input: input}
}

const opGetDeviceDefinitionVersion = "GetDeviceDefinitionVersion"

// GetDeviceDefinitionVersionRequest is a API request type for the GetDeviceDefinitionVersion API operation.
type GetDeviceDefinitionVersionRequest struct {
	*aws.Request
	Input *GetDeviceDefinitionVersionInput
}

// Send marshals and sends the GetDeviceDefinitionVersion API request.
func (r GetDeviceDefinitionVersionRequest) Send() (*GetDeviceDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetDeviceDefinitionVersionOutput), nil
}

// GetDeviceDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a device definition version.
//
//    // Example sending a request using the GetDeviceDefinitionVersionRequest method.
//    req := client.GetDeviceDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeviceDefinitionVersion
func (c *Greengrass) GetDeviceDefinitionVersionRequest(input *GetDeviceDefinitionVersionInput) GetDeviceDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opGetDeviceDefinitionVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}",
	}

	if input == nil {
		input = &GetDeviceDefinitionVersionInput{}
	}

	output := &GetDeviceDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetDeviceDefinitionVersionRequest{Request: req, Input: input}
}

const opGetFunctionDefinition = "GetFunctionDefinition"

// GetFunctionDefinitionRequest is a API request type for the GetFunctionDefinition API operation.
type GetFunctionDefinitionRequest struct {
	*aws.Request
	Input *GetFunctionDefinitionInput
}

// Send marshals and sends the GetFunctionDefinition API request.
func (r GetFunctionDefinitionRequest) Send() (*GetFunctionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetFunctionDefinitionOutput), nil
}

// GetFunctionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a Lambda function definition, such as its creation
// time and latest version.
//
//    // Example sending a request using the GetFunctionDefinitionRequest method.
//    req := client.GetFunctionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetFunctionDefinition
func (c *Greengrass) GetFunctionDefinitionRequest(input *GetFunctionDefinitionInput) GetFunctionDefinitionRequest {
	op := &aws.Operation{
		Name:       opGetFunctionDefinition,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/functions/{FunctionDefinitionId}",
	}

	if input == nil {
		input = &GetFunctionDefinitionInput{}
	}

	output := &GetFunctionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetFunctionDefinitionRequest{Request: req, Input: input}
}

const opGetFunctionDefinitionVersion = "GetFunctionDefinitionVersion"

// GetFunctionDefinitionVersionRequest is a API request type for the GetFunctionDefinitionVersion API operation.
type GetFunctionDefinitionVersionRequest struct {
	*aws.Request
	Input *GetFunctionDefinitionVersionInput
}

// Send marshals and sends the GetFunctionDefinitionVersion API request.
func (r GetFunctionDefinitionVersionRequest) Send() (*GetFunctionDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetFunctionDefinitionVersionOutput), nil
}

// GetFunctionDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a Lambda function definition version, such as
// which Lambda functions are included in the version and their configurations.
//
//    // Example sending a request using the GetFunctionDefinitionVersionRequest method.
//    req := client.GetFunctionDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetFunctionDefinitionVersion
func (c *Greengrass) GetFunctionDefinitionVersionRequest(input *GetFunctionDefinitionVersionInput) GetFunctionDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opGetFunctionDefinitionVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}",
	}

	if input == nil {
		input = &GetFunctionDefinitionVersionInput{}
	}

	output := &GetFunctionDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetFunctionDefinitionVersionRequest{Request: req, Input: input}
}

const opGetGroup = "GetGroup"

// GetGroupRequest is a API request type for the GetGroup API operation.
type GetGroupRequest struct {
	*aws.Request
	Input *GetGroupInput
}

// Send marshals and sends the GetGroup API request.
func (r GetGroupRequest) Send() (*GetGroupOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetGroupOutput), nil
}

// GetGroupRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a group.
//
//    // Example sending a request using the GetGroupRequest method.
//    req := client.GetGroupRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroup
func (c *Greengrass) GetGroupRequest(input *GetGroupInput) GetGroupRequest {
	op := &aws.Operation{
		Name:       opGetGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}",
	}

	if input == nil {
		input = &GetGroupInput{}
	}

	output := &GetGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetGroupRequest{Request: req, Input: input}
}

const opGetGroupCertificateAuthority = "GetGroupCertificateAuthority"

// GetGroupCertificateAuthorityRequest is a API request type for the GetGroupCertificateAuthority API operation.
type GetGroupCertificateAuthorityRequest struct {
	*aws.Request
	Input *GetGroupCertificateAuthorityInput
}

// Send marshals and sends the GetGroupCertificateAuthority API request.
func (r GetGroupCertificateAuthorityRequest) Send() (*GetGroupCertificateAuthorityOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetGroupCertificateAuthorityOutput), nil
}

// GetGroupCertificateAuthorityRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retreives the CA associated with a group. Returns the public key of the CA.
//
//    // Example sending a request using the GetGroupCertificateAuthorityRequest method.
//    req := client.GetGroupCertificateAuthorityRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupCertificateAuthority
func (c *Greengrass) GetGroupCertificateAuthorityRequest(input *GetGroupCertificateAuthorityInput) GetGroupCertificateAuthorityRequest {
	op := &aws.Operation{
		Name:       opGetGroupCertificateAuthority,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}",
	}

	if input == nil {
		input = &GetGroupCertificateAuthorityInput{}
	}

	output := &GetGroupCertificateAuthorityOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetGroupCertificateAuthorityRequest{Request: req, Input: input}
}

const opGetGroupCertificateConfiguration = "GetGroupCertificateConfiguration"

// GetGroupCertificateConfigurationRequest is a API request type for the GetGroupCertificateConfiguration API operation.
type GetGroupCertificateConfigurationRequest struct {
	*aws.Request
	Input *GetGroupCertificateConfigurationInput
}

// Send marshals and sends the GetGroupCertificateConfiguration API request.
func (r GetGroupCertificateConfigurationRequest) Send() (*GetGroupCertificateConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetGroupCertificateConfigurationOutput), nil
}

// GetGroupCertificateConfigurationRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves the current configuration for the CA used by the group.
//
//    // Example sending a request using the GetGroupCertificateConfigurationRequest method.
//    req := client.GetGroupCertificateConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupCertificateConfiguration
func (c *Greengrass) GetGroupCertificateConfigurationRequest(input *GetGroupCertificateConfigurationInput) GetGroupCertificateConfigurationRequest {
	op := &aws.Operation{
		Name:       opGetGroupCertificateConfiguration,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry",
	}

	if input == nil {
		input = &GetGroupCertificateConfigurationInput{}
	}

	output := &GetGroupCertificateConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetGroupCertificateConfigurationRequest{Request: req, Input: input}
}

const opGetGroupVersion = "GetGroupVersion"

// GetGroupVersionRequest is a API request type for the GetGroupVersion API operation.
type GetGroupVersionRequest struct {
	*aws.Request
	Input *GetGroupVersionInput
}

// Send marshals and sends the GetGroupVersion API request.
func (r GetGroupVersionRequest) Send() (*GetGroupVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetGroupVersionOutput), nil
}

// GetGroupVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a group version.
//
//    // Example sending a request using the GetGroupVersionRequest method.
//    req := client.GetGroupVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupVersion
func (c *Greengrass) GetGroupVersionRequest(input *GetGroupVersionInput) GetGroupVersionRequest {
	op := &aws.Operation{
		Name:       opGetGroupVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/versions/{GroupVersionId}",
	}

	if input == nil {
		input = &GetGroupVersionInput{}
	}

	output := &GetGroupVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetGroupVersionRequest{Request: req, Input: input}
}

const opGetLoggerDefinition = "GetLoggerDefinition"

// GetLoggerDefinitionRequest is a API request type for the GetLoggerDefinition API operation.
type GetLoggerDefinitionRequest struct {
	*aws.Request
	Input *GetLoggerDefinitionInput
}

// Send marshals and sends the GetLoggerDefinition API request.
func (r GetLoggerDefinitionRequest) Send() (*GetLoggerDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetLoggerDefinitionOutput), nil
}

// GetLoggerDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a logger definition.
//
//    // Example sending a request using the GetLoggerDefinitionRequest method.
//    req := client.GetLoggerDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetLoggerDefinition
func (c *Greengrass) GetLoggerDefinitionRequest(input *GetLoggerDefinitionInput) GetLoggerDefinitionRequest {
	op := &aws.Operation{
		Name:       opGetLoggerDefinition,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/loggers/{LoggerDefinitionId}",
	}

	if input == nil {
		input = &GetLoggerDefinitionInput{}
	}

	output := &GetLoggerDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetLoggerDefinitionRequest{Request: req, Input: input}
}

const opGetLoggerDefinitionVersion = "GetLoggerDefinitionVersion"

// GetLoggerDefinitionVersionRequest is a API request type for the GetLoggerDefinitionVersion API operation.
type GetLoggerDefinitionVersionRequest struct {
	*aws.Request
	Input *GetLoggerDefinitionVersionInput
}

// Send marshals and sends the GetLoggerDefinitionVersion API request.
func (r GetLoggerDefinitionVersionRequest) Send() (*GetLoggerDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetLoggerDefinitionVersionOutput), nil
}

// GetLoggerDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a logger definition version.
//
//    // Example sending a request using the GetLoggerDefinitionVersionRequest method.
//    req := client.GetLoggerDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetLoggerDefinitionVersion
func (c *Greengrass) GetLoggerDefinitionVersionRequest(input *GetLoggerDefinitionVersionInput) GetLoggerDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opGetLoggerDefinitionVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}",
	}

	if input == nil {
		input = &GetLoggerDefinitionVersionInput{}
	}

	output := &GetLoggerDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetLoggerDefinitionVersionRequest{Request: req, Input: input}
}

const opGetResourceDefinition = "GetResourceDefinition"

// GetResourceDefinitionRequest is a API request type for the GetResourceDefinition API operation.
type GetResourceDefinitionRequest struct {
	*aws.Request
	Input *GetResourceDefinitionInput
}

// Send marshals and sends the GetResourceDefinition API request.
func (r GetResourceDefinitionRequest) Send() (*GetResourceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetResourceDefinitionOutput), nil
}

// GetResourceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a resource definition, such as its creation time
// and latest version.
//
//    // Example sending a request using the GetResourceDefinitionRequest method.
//    req := client.GetResourceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetResourceDefinition
func (c *Greengrass) GetResourceDefinitionRequest(input *GetResourceDefinitionInput) GetResourceDefinitionRequest {
	op := &aws.Operation{
		Name:       opGetResourceDefinition,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/resources/{ResourceDefinitionId}",
	}

	if input == nil {
		input = &GetResourceDefinitionInput{}
	}

	output := &GetResourceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetResourceDefinitionRequest{Request: req, Input: input}
}

const opGetResourceDefinitionVersion = "GetResourceDefinitionVersion"

// GetResourceDefinitionVersionRequest is a API request type for the GetResourceDefinitionVersion API operation.
type GetResourceDefinitionVersionRequest struct {
	*aws.Request
	Input *GetResourceDefinitionVersionInput
}

// Send marshals and sends the GetResourceDefinitionVersion API request.
func (r GetResourceDefinitionVersionRequest) Send() (*GetResourceDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetResourceDefinitionVersionOutput), nil
}

// GetResourceDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a resource definition version, such as which
// resources are included in the version.
//
//    // Example sending a request using the GetResourceDefinitionVersionRequest method.
//    req := client.GetResourceDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetResourceDefinitionVersion
func (c *Greengrass) GetResourceDefinitionVersionRequest(input *GetResourceDefinitionVersionInput) GetResourceDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opGetResourceDefinitionVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}",
	}

	if input == nil {
		input = &GetResourceDefinitionVersionInput{}
	}

	output := &GetResourceDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetResourceDefinitionVersionRequest{Request: req, Input: input}
}

const opGetServiceRoleForAccount = "GetServiceRoleForAccount"

// GetServiceRoleForAccountRequest is a API request type for the GetServiceRoleForAccount API operation.
type GetServiceRoleForAccountRequest struct {
	*aws.Request
	Input *GetServiceRoleForAccountInput
}

// Send marshals and sends the GetServiceRoleForAccount API request.
func (r GetServiceRoleForAccountRequest) Send() (*GetServiceRoleForAccountOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetServiceRoleForAccountOutput), nil
}

// GetServiceRoleForAccountRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves the service role that is attached to the account.
//
//    // Example sending a request using the GetServiceRoleForAccountRequest method.
//    req := client.GetServiceRoleForAccountRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetServiceRoleForAccount
func (c *Greengrass) GetServiceRoleForAccountRequest(input *GetServiceRoleForAccountInput) GetServiceRoleForAccountRequest {
	op := &aws.Operation{
		Name:       opGetServiceRoleForAccount,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/servicerole",
	}

	if input == nil {
		input = &GetServiceRoleForAccountInput{}
	}

	output := &GetServiceRoleForAccountOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetServiceRoleForAccountRequest{Request: req, Input: input}
}

const opGetSubscriptionDefinition = "GetSubscriptionDefinition"

// GetSubscriptionDefinitionRequest is a API request type for the GetSubscriptionDefinition API operation.
type GetSubscriptionDefinitionRequest struct {
	*aws.Request
	Input *GetSubscriptionDefinitionInput
}

// Send marshals and sends the GetSubscriptionDefinition API request.
func (r GetSubscriptionDefinitionRequest) Send() (*GetSubscriptionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetSubscriptionDefinitionOutput), nil
}

// GetSubscriptionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a subscription definition.
//
//    // Example sending a request using the GetSubscriptionDefinitionRequest method.
//    req := client.GetSubscriptionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetSubscriptionDefinition
func (c *Greengrass) GetSubscriptionDefinitionRequest(input *GetSubscriptionDefinitionInput) GetSubscriptionDefinitionRequest {
	op := &aws.Operation{
		Name:       opGetSubscriptionDefinition,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
	}

	if input == nil {
		input = &GetSubscriptionDefinitionInput{}
	}

	output := &GetSubscriptionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetSubscriptionDefinitionRequest{Request: req, Input: input}
}

const opGetSubscriptionDefinitionVersion = "GetSubscriptionDefinitionVersion"

// GetSubscriptionDefinitionVersionRequest is a API request type for the GetSubscriptionDefinitionVersion API operation.
type GetSubscriptionDefinitionVersionRequest struct {
	*aws.Request
	Input *GetSubscriptionDefinitionVersionInput
}

// Send marshals and sends the GetSubscriptionDefinitionVersion API request.
func (r GetSubscriptionDefinitionVersionRequest) Send() (*GetSubscriptionDefinitionVersionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetSubscriptionDefinitionVersionOutput), nil
}

// GetSubscriptionDefinitionVersionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves information about a subscription definition version.
//
//    // Example sending a request using the GetSubscriptionDefinitionVersionRequest method.
//    req := client.GetSubscriptionDefinitionVersionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetSubscriptionDefinitionVersion
func (c *Greengrass) GetSubscriptionDefinitionVersionRequest(input *GetSubscriptionDefinitionVersionInput) GetSubscriptionDefinitionVersionRequest {
	op := &aws.Operation{
		Name:       opGetSubscriptionDefinitionVersion,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}",
	}

	if input == nil {
		input = &GetSubscriptionDefinitionVersionInput{}
	}

	output := &GetSubscriptionDefinitionVersionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetSubscriptionDefinitionVersionRequest{Request: req, Input: input}
}

const opListCoreDefinitionVersions = "ListCoreDefinitionVersions"

// ListCoreDefinitionVersionsRequest is a API request type for the ListCoreDefinitionVersions API operation.
type ListCoreDefinitionVersionsRequest struct {
	*aws.Request
	Input *ListCoreDefinitionVersionsInput
}

// Send marshals and sends the ListCoreDefinitionVersions API request.
func (r ListCoreDefinitionVersionsRequest) Send() (*ListCoreDefinitionVersionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListCoreDefinitionVersionsOutput), nil
}

// ListCoreDefinitionVersionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Lists versions of a core definition.
//
//    // Example sending a request using the ListCoreDefinitionVersionsRequest method.
//    req := client.ListCoreDefinitionVersionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListCoreDefinitionVersions
func (c *Greengrass) ListCoreDefinitionVersionsRequest(input *ListCoreDefinitionVersionsInput) ListCoreDefinitionVersionsRequest {
	op := &aws.Operation{
		Name:       opListCoreDefinitionVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/cores/{CoreDefinitionId}/versions",
	}

	if input == nil {
		input = &ListCoreDefinitionVersionsInput{}
	}

	output := &ListCoreDefinitionVersionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListCoreDefinitionVersionsRequest{Request: req, Input: input}
}

const opListCoreDefinitions = "ListCoreDefinitions"

// ListCoreDefinitionsRequest is a API request type for the ListCoreDefinitions API operation.
type ListCoreDefinitionsRequest struct {
	*aws.Request
	Input *ListCoreDefinitionsInput
}

// Send marshals and sends the ListCoreDefinitions API request.
func (r ListCoreDefinitionsRequest) Send() (*ListCoreDefinitionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListCoreDefinitionsOutput), nil
}

// ListCoreDefinitionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves a list of core definitions.
//
//    // Example sending a request using the ListCoreDefinitionsRequest method.
//    req := client.ListCoreDefinitionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListCoreDefinitions
func (c *Greengrass) ListCoreDefinitionsRequest(input *ListCoreDefinitionsInput) ListCoreDefinitionsRequest {
	op := &aws.Operation{
		Name:       opListCoreDefinitions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/cores",
	}

	if input == nil {
		input = &ListCoreDefinitionsInput{}
	}

	output := &ListCoreDefinitionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListCoreDefinitionsRequest{Request: req, Input: input}
}

const opListDeployments = "ListDeployments"

// ListDeploymentsRequest is a API request type for the ListDeployments API operation.
type ListDeploymentsRequest struct {
	*aws.Request
	Input *ListDeploymentsInput
}

// Send marshals and sends the ListDeployments API request.
func (r ListDeploymentsRequest) Send() (*ListDeploymentsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListDeploymentsOutput), nil
}

// ListDeploymentsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Returns a history of deployments for the group.
//
//    // Example sending a request using the ListDeploymentsRequest method.
//    req := client.ListDeploymentsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeployments
func (c *Greengrass) ListDeploymentsRequest(input *ListDeploymentsInput) ListDeploymentsRequest {
	op := &aws.Operation{
		Name:       opListDeployments,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/deployments",
	}

	if input == nil {
		input = &ListDeploymentsInput{}
	}

	output := &ListDeploymentsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListDeploymentsRequest{Request: req, Input: input}
}

const opListDeviceDefinitionVersions = "ListDeviceDefinitionVersions"

// ListDeviceDefinitionVersionsRequest is a API request type for the ListDeviceDefinitionVersions API operation.
type ListDeviceDefinitionVersionsRequest struct {
	*aws.Request
	Input *ListDeviceDefinitionVersionsInput
}

// Send marshals and sends the ListDeviceDefinitionVersions API request.
func (r ListDeviceDefinitionVersionsRequest) Send() (*ListDeviceDefinitionVersionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListDeviceDefinitionVersionsOutput), nil
}

// ListDeviceDefinitionVersionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Lists the versions of a device definition.
//
//    // Example sending a request using the ListDeviceDefinitionVersionsRequest method.
//    req := client.ListDeviceDefinitionVersionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeviceDefinitionVersions
func (c *Greengrass) ListDeviceDefinitionVersionsRequest(input *ListDeviceDefinitionVersionsInput) ListDeviceDefinitionVersionsRequest {
	op := &aws.Operation{
		Name:       opListDeviceDefinitionVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/devices/{DeviceDefinitionId}/versions",
	}

	if input == nil {
		input = &ListDeviceDefinitionVersionsInput{}
	}

	output := &ListDeviceDefinitionVersionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListDeviceDefinitionVersionsRequest{Request: req, Input: input}
}

const opListDeviceDefinitions = "ListDeviceDefinitions"

// ListDeviceDefinitionsRequest is a API request type for the ListDeviceDefinitions API operation.
type ListDeviceDefinitionsRequest struct {
	*aws.Request
	Input *ListDeviceDefinitionsInput
}

// Send marshals and sends the ListDeviceDefinitions API request.
func (r ListDeviceDefinitionsRequest) Send() (*ListDeviceDefinitionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListDeviceDefinitionsOutput), nil
}

// ListDeviceDefinitionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves a list of device definitions.
//
//    // Example sending a request using the ListDeviceDefinitionsRequest method.
//    req := client.ListDeviceDefinitionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeviceDefinitions
func (c *Greengrass) ListDeviceDefinitionsRequest(input *ListDeviceDefinitionsInput) ListDeviceDefinitionsRequest {
	op := &aws.Operation{
		Name:       opListDeviceDefinitions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/devices",
	}

	if input == nil {
		input = &ListDeviceDefinitionsInput{}
	}

	output := &ListDeviceDefinitionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListDeviceDefinitionsRequest{Request: req, Input: input}
}

const opListFunctionDefinitionVersions = "ListFunctionDefinitionVersions"

// ListFunctionDefinitionVersionsRequest is a API request type for the ListFunctionDefinitionVersions API operation.
type ListFunctionDefinitionVersionsRequest struct {
	*aws.Request
	Input *ListFunctionDefinitionVersionsInput
}

// Send marshals and sends the ListFunctionDefinitionVersions API request.
func (r ListFunctionDefinitionVersionsRequest) Send() (*ListFunctionDefinitionVersionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListFunctionDefinitionVersionsOutput), nil
}

// ListFunctionDefinitionVersionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Lists the versions of a Lambda function definition.
//
//    // Example sending a request using the ListFunctionDefinitionVersionsRequest method.
//    req := client.ListFunctionDefinitionVersionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListFunctionDefinitionVersions
func (c *Greengrass) ListFunctionDefinitionVersionsRequest(input *ListFunctionDefinitionVersionsInput) ListFunctionDefinitionVersionsRequest {
	op := &aws.Operation{
		Name:       opListFunctionDefinitionVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/functions/{FunctionDefinitionId}/versions",
	}

	if input == nil {
		input = &ListFunctionDefinitionVersionsInput{}
	}

	output := &ListFunctionDefinitionVersionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListFunctionDefinitionVersionsRequest{Request: req, Input: input}
}

const opListFunctionDefinitions = "ListFunctionDefinitions"

// ListFunctionDefinitionsRequest is a API request type for the ListFunctionDefinitions API operation.
type ListFunctionDefinitionsRequest struct {
	*aws.Request
	Input *ListFunctionDefinitionsInput
}

// Send marshals and sends the ListFunctionDefinitions API request.
func (r ListFunctionDefinitionsRequest) Send() (*ListFunctionDefinitionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListFunctionDefinitionsOutput), nil
}

// ListFunctionDefinitionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves a list of Lambda function definitions.
//
//    // Example sending a request using the ListFunctionDefinitionsRequest method.
//    req := client.ListFunctionDefinitionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListFunctionDefinitions
func (c *Greengrass) ListFunctionDefinitionsRequest(input *ListFunctionDefinitionsInput) ListFunctionDefinitionsRequest {
	op := &aws.Operation{
		Name:       opListFunctionDefinitions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/functions",
	}

	if input == nil {
		input = &ListFunctionDefinitionsInput{}
	}

	output := &ListFunctionDefinitionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListFunctionDefinitionsRequest{Request: req, Input: input}
}

const opListGroupCertificateAuthorities = "ListGroupCertificateAuthorities"

// ListGroupCertificateAuthoritiesRequest is a API request type for the ListGroupCertificateAuthorities API operation.
type ListGroupCertificateAuthoritiesRequest struct {
	*aws.Request
	Input *ListGroupCertificateAuthoritiesInput
}

// Send marshals and sends the ListGroupCertificateAuthorities API request.
func (r ListGroupCertificateAuthoritiesRequest) Send() (*ListGroupCertificateAuthoritiesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListGroupCertificateAuthoritiesOutput), nil
}

// ListGroupCertificateAuthoritiesRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves the current CAs for a group.
//
//    // Example sending a request using the ListGroupCertificateAuthoritiesRequest method.
//    req := client.ListGroupCertificateAuthoritiesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupCertificateAuthorities
func (c *Greengrass) ListGroupCertificateAuthoritiesRequest(input *ListGroupCertificateAuthoritiesInput) ListGroupCertificateAuthoritiesRequest {
	op := &aws.Operation{
		Name:       opListGroupCertificateAuthorities,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/certificateauthorities",
	}

	if input == nil {
		input = &ListGroupCertificateAuthoritiesInput{}
	}

	output := &ListGroupCertificateAuthoritiesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListGroupCertificateAuthoritiesRequest{Request: req, Input: input}
}

const opListGroupVersions = "ListGroupVersions"

// ListGroupVersionsRequest is a API request type for the ListGroupVersions API operation.
type ListGroupVersionsRequest struct {
	*aws.Request
	Input *ListGroupVersionsInput
}

// Send marshals and sends the ListGroupVersions API request.
func (r ListGroupVersionsRequest) Send() (*ListGroupVersionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListGroupVersionsOutput), nil
}

// ListGroupVersionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// List the versions of a group.
//
//    // Example sending a request using the ListGroupVersionsRequest method.
//    req := client.ListGroupVersionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupVersions
func (c *Greengrass) ListGroupVersionsRequest(input *ListGroupVersionsInput) ListGroupVersionsRequest {
	op := &aws.Operation{
		Name:       opListGroupVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups/{GroupId}/versions",
	}

	if input == nil {
		input = &ListGroupVersionsInput{}
	}

	output := &ListGroupVersionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListGroupVersionsRequest{Request: req, Input: input}
}

const opListGroups = "ListGroups"

// ListGroupsRequest is a API request type for the ListGroups API operation.
type ListGroupsRequest struct {
	*aws.Request
	Input *ListGroupsInput
}

// Send marshals and sends the ListGroups API request.
func (r ListGroupsRequest) Send() (*ListGroupsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListGroupsOutput), nil
}

// ListGroupsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves a list of groups.
//
//    // Example sending a request using the ListGroupsRequest method.
//    req := client.ListGroupsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroups
func (c *Greengrass) ListGroupsRequest(input *ListGroupsInput) ListGroupsRequest {
	op := &aws.Operation{
		Name:       opListGroups,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/groups",
	}

	if input == nil {
		input = &ListGroupsInput{}
	}

	output := &ListGroupsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListGroupsRequest{Request: req, Input: input}
}

const opListLoggerDefinitionVersions = "ListLoggerDefinitionVersions"

// ListLoggerDefinitionVersionsRequest is a API request type for the ListLoggerDefinitionVersions API operation.
type ListLoggerDefinitionVersionsRequest struct {
	*aws.Request
	Input *ListLoggerDefinitionVersionsInput
}

// Send marshals and sends the ListLoggerDefinitionVersions API request.
func (r ListLoggerDefinitionVersionsRequest) Send() (*ListLoggerDefinitionVersionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListLoggerDefinitionVersionsOutput), nil
}

// ListLoggerDefinitionVersionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Lists the versions of a logger definition.
//
//    // Example sending a request using the ListLoggerDefinitionVersionsRequest method.
//    req := client.ListLoggerDefinitionVersionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListLoggerDefinitionVersions
func (c *Greengrass) ListLoggerDefinitionVersionsRequest(input *ListLoggerDefinitionVersionsInput) ListLoggerDefinitionVersionsRequest {
	op := &aws.Operation{
		Name:       opListLoggerDefinitionVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/loggers/{LoggerDefinitionId}/versions",
	}

	if input == nil {
		input = &ListLoggerDefinitionVersionsInput{}
	}

	output := &ListLoggerDefinitionVersionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListLoggerDefinitionVersionsRequest{Request: req, Input: input}
}

const opListLoggerDefinitions = "ListLoggerDefinitions"

// ListLoggerDefinitionsRequest is a API request type for the ListLoggerDefinitions API operation.
type ListLoggerDefinitionsRequest struct {
	*aws.Request
	Input *ListLoggerDefinitionsInput
}

// Send marshals and sends the ListLoggerDefinitions API request.
func (r ListLoggerDefinitionsRequest) Send() (*ListLoggerDefinitionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListLoggerDefinitionsOutput), nil
}

// ListLoggerDefinitionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves a list of logger definitions.
//
//    // Example sending a request using the ListLoggerDefinitionsRequest method.
//    req := client.ListLoggerDefinitionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListLoggerDefinitions
func (c *Greengrass) ListLoggerDefinitionsRequest(input *ListLoggerDefinitionsInput) ListLoggerDefinitionsRequest {
	op := &aws.Operation{
		Name:       opListLoggerDefinitions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/loggers",
	}

	if input == nil {
		input = &ListLoggerDefinitionsInput{}
	}

	output := &ListLoggerDefinitionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListLoggerDefinitionsRequest{Request: req, Input: input}
}

const opListResourceDefinitionVersions = "ListResourceDefinitionVersions"

// ListResourceDefinitionVersionsRequest is a API request type for the ListResourceDefinitionVersions API operation.
type ListResourceDefinitionVersionsRequest struct {
	*aws.Request
	Input *ListResourceDefinitionVersionsInput
}

// Send marshals and sends the ListResourceDefinitionVersions API request.
func (r ListResourceDefinitionVersionsRequest) Send() (*ListResourceDefinitionVersionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListResourceDefinitionVersionsOutput), nil
}

// ListResourceDefinitionVersionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Lists the versions of a resource definition.
//
//    // Example sending a request using the ListResourceDefinitionVersionsRequest method.
//    req := client.ListResourceDefinitionVersionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListResourceDefinitionVersions
func (c *Greengrass) ListResourceDefinitionVersionsRequest(input *ListResourceDefinitionVersionsInput) ListResourceDefinitionVersionsRequest {
	op := &aws.Operation{
		Name:       opListResourceDefinitionVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/resources/{ResourceDefinitionId}/versions",
	}

	if input == nil {
		input = &ListResourceDefinitionVersionsInput{}
	}

	output := &ListResourceDefinitionVersionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListResourceDefinitionVersionsRequest{Request: req, Input: input}
}

const opListResourceDefinitions = "ListResourceDefinitions"

// ListResourceDefinitionsRequest is a API request type for the ListResourceDefinitions API operation.
type ListResourceDefinitionsRequest struct {
	*aws.Request
	Input *ListResourceDefinitionsInput
}

// Send marshals and sends the ListResourceDefinitions API request.
func (r ListResourceDefinitionsRequest) Send() (*ListResourceDefinitionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListResourceDefinitionsOutput), nil
}

// ListResourceDefinitionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves a list of resource definitions.
//
//    // Example sending a request using the ListResourceDefinitionsRequest method.
//    req := client.ListResourceDefinitionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListResourceDefinitions
func (c *Greengrass) ListResourceDefinitionsRequest(input *ListResourceDefinitionsInput) ListResourceDefinitionsRequest {
	op := &aws.Operation{
		Name:       opListResourceDefinitions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/resources",
	}

	if input == nil {
		input = &ListResourceDefinitionsInput{}
	}

	output := &ListResourceDefinitionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListResourceDefinitionsRequest{Request: req, Input: input}
}

const opListSubscriptionDefinitionVersions = "ListSubscriptionDefinitionVersions"

// ListSubscriptionDefinitionVersionsRequest is a API request type for the ListSubscriptionDefinitionVersions API operation.
type ListSubscriptionDefinitionVersionsRequest struct {
	*aws.Request
	Input *ListSubscriptionDefinitionVersionsInput
}

// Send marshals and sends the ListSubscriptionDefinitionVersions API request.
func (r ListSubscriptionDefinitionVersionsRequest) Send() (*ListSubscriptionDefinitionVersionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListSubscriptionDefinitionVersionsOutput), nil
}

// ListSubscriptionDefinitionVersionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Lists the versions of a subscription definition.
//
//    // Example sending a request using the ListSubscriptionDefinitionVersionsRequest method.
//    req := client.ListSubscriptionDefinitionVersionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListSubscriptionDefinitionVersions
func (c *Greengrass) ListSubscriptionDefinitionVersionsRequest(input *ListSubscriptionDefinitionVersionsInput) ListSubscriptionDefinitionVersionsRequest {
	op := &aws.Operation{
		Name:       opListSubscriptionDefinitionVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions",
	}

	if input == nil {
		input = &ListSubscriptionDefinitionVersionsInput{}
	}

	output := &ListSubscriptionDefinitionVersionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListSubscriptionDefinitionVersionsRequest{Request: req, Input: input}
}

const opListSubscriptionDefinitions = "ListSubscriptionDefinitions"

// ListSubscriptionDefinitionsRequest is a API request type for the ListSubscriptionDefinitions API operation.
type ListSubscriptionDefinitionsRequest struct {
	*aws.Request
	Input *ListSubscriptionDefinitionsInput
}

// Send marshals and sends the ListSubscriptionDefinitions API request.
func (r ListSubscriptionDefinitionsRequest) Send() (*ListSubscriptionDefinitionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListSubscriptionDefinitionsOutput), nil
}

// ListSubscriptionDefinitionsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Retrieves a list of subscription definitions.
//
//    // Example sending a request using the ListSubscriptionDefinitionsRequest method.
//    req := client.ListSubscriptionDefinitionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListSubscriptionDefinitions
func (c *Greengrass) ListSubscriptionDefinitionsRequest(input *ListSubscriptionDefinitionsInput) ListSubscriptionDefinitionsRequest {
	op := &aws.Operation{
		Name:       opListSubscriptionDefinitions,
		HTTPMethod: "GET",
		HTTPPath:   "/greengrass/definition/subscriptions",
	}

	if input == nil {
		input = &ListSubscriptionDefinitionsInput{}
	}

	output := &ListSubscriptionDefinitionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListSubscriptionDefinitionsRequest{Request: req, Input: input}
}

const opResetDeployments = "ResetDeployments"

// ResetDeploymentsRequest is a API request type for the ResetDeployments API operation.
type ResetDeploymentsRequest struct {
	*aws.Request
	Input *ResetDeploymentsInput
}

// Send marshals and sends the ResetDeployments API request.
func (r ResetDeploymentsRequest) Send() (*ResetDeploymentsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ResetDeploymentsOutput), nil
}

// ResetDeploymentsRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Resets a group's deployments.
//
//    // Example sending a request using the ResetDeploymentsRequest method.
//    req := client.ResetDeploymentsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ResetDeployments
func (c *Greengrass) ResetDeploymentsRequest(input *ResetDeploymentsInput) ResetDeploymentsRequest {
	op := &aws.Operation{
		Name:       opResetDeployments,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/groups/{GroupId}/deployments/$reset",
	}

	if input == nil {
		input = &ResetDeploymentsInput{}
	}

	output := &ResetDeploymentsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ResetDeploymentsRequest{Request: req, Input: input}
}

const opUpdateConnectivityInfo = "UpdateConnectivityInfo"

// UpdateConnectivityInfoRequest is a API request type for the UpdateConnectivityInfo API operation.
type UpdateConnectivityInfoRequest struct {
	*aws.Request
	Input *UpdateConnectivityInfoInput
}

// Send marshals and sends the UpdateConnectivityInfo API request.
func (r UpdateConnectivityInfoRequest) Send() (*UpdateConnectivityInfoOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateConnectivityInfoOutput), nil
}

// UpdateConnectivityInfoRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates the connectivity information for the core. Any devices that belong
// to the group which has this core will receive this information in order to
// find the location of the core and connect to it.
//
//    // Example sending a request using the UpdateConnectivityInfoRequest method.
//    req := client.UpdateConnectivityInfoRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateConnectivityInfo
func (c *Greengrass) UpdateConnectivityInfoRequest(input *UpdateConnectivityInfoInput) UpdateConnectivityInfoRequest {
	op := &aws.Operation{
		Name:       opUpdateConnectivityInfo,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/things/{ThingName}/connectivityInfo",
	}

	if input == nil {
		input = &UpdateConnectivityInfoInput{}
	}

	output := &UpdateConnectivityInfoOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateConnectivityInfoRequest{Request: req, Input: input}
}

const opUpdateCoreDefinition = "UpdateCoreDefinition"

// UpdateCoreDefinitionRequest is a API request type for the UpdateCoreDefinition API operation.
type UpdateCoreDefinitionRequest struct {
	*aws.Request
	Input *UpdateCoreDefinitionInput
}

// Send marshals and sends the UpdateCoreDefinition API request.
func (r UpdateCoreDefinitionRequest) Send() (*UpdateCoreDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateCoreDefinitionOutput), nil
}

// UpdateCoreDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates a core definition.
//
//    // Example sending a request using the UpdateCoreDefinitionRequest method.
//    req := client.UpdateCoreDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateCoreDefinition
func (c *Greengrass) UpdateCoreDefinitionRequest(input *UpdateCoreDefinitionInput) UpdateCoreDefinitionRequest {
	op := &aws.Operation{
		Name:       opUpdateCoreDefinition,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/definition/cores/{CoreDefinitionId}",
	}

	if input == nil {
		input = &UpdateCoreDefinitionInput{}
	}

	output := &UpdateCoreDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateCoreDefinitionRequest{Request: req, Input: input}
}

const opUpdateDeviceDefinition = "UpdateDeviceDefinition"

// UpdateDeviceDefinitionRequest is a API request type for the UpdateDeviceDefinition API operation.
type UpdateDeviceDefinitionRequest struct {
	*aws.Request
	Input *UpdateDeviceDefinitionInput
}

// Send marshals and sends the UpdateDeviceDefinition API request.
func (r UpdateDeviceDefinitionRequest) Send() (*UpdateDeviceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateDeviceDefinitionOutput), nil
}

// UpdateDeviceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates a device definition.
//
//    // Example sending a request using the UpdateDeviceDefinitionRequest method.
//    req := client.UpdateDeviceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateDeviceDefinition
func (c *Greengrass) UpdateDeviceDefinitionRequest(input *UpdateDeviceDefinitionInput) UpdateDeviceDefinitionRequest {
	op := &aws.Operation{
		Name:       opUpdateDeviceDefinition,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/definition/devices/{DeviceDefinitionId}",
	}

	if input == nil {
		input = &UpdateDeviceDefinitionInput{}
	}

	output := &UpdateDeviceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateDeviceDefinitionRequest{Request: req, Input: input}
}

const opUpdateFunctionDefinition = "UpdateFunctionDefinition"

// UpdateFunctionDefinitionRequest is a API request type for the UpdateFunctionDefinition API operation.
type UpdateFunctionDefinitionRequest struct {
	*aws.Request
	Input *UpdateFunctionDefinitionInput
}

// Send marshals and sends the UpdateFunctionDefinition API request.
func (r UpdateFunctionDefinitionRequest) Send() (*UpdateFunctionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateFunctionDefinitionOutput), nil
}

// UpdateFunctionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates a Lambda function definition.
//
//    // Example sending a request using the UpdateFunctionDefinitionRequest method.
//    req := client.UpdateFunctionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateFunctionDefinition
func (c *Greengrass) UpdateFunctionDefinitionRequest(input *UpdateFunctionDefinitionInput) UpdateFunctionDefinitionRequest {
	op := &aws.Operation{
		Name:       opUpdateFunctionDefinition,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/definition/functions/{FunctionDefinitionId}",
	}

	if input == nil {
		input = &UpdateFunctionDefinitionInput{}
	}

	output := &UpdateFunctionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateFunctionDefinitionRequest{Request: req, Input: input}
}

const opUpdateGroup = "UpdateGroup"

// UpdateGroupRequest is a API request type for the UpdateGroup API operation.
type UpdateGroupRequest struct {
	*aws.Request
	Input *UpdateGroupInput
}

// Send marshals and sends the UpdateGroup API request.
func (r UpdateGroupRequest) Send() (*UpdateGroupOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateGroupOutput), nil
}

// UpdateGroupRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates a group.
//
//    // Example sending a request using the UpdateGroupRequest method.
//    req := client.UpdateGroupRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateGroup
func (c *Greengrass) UpdateGroupRequest(input *UpdateGroupInput) UpdateGroupRequest {
	op := &aws.Operation{
		Name:       opUpdateGroup,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/groups/{GroupId}",
	}

	if input == nil {
		input = &UpdateGroupInput{}
	}

	output := &UpdateGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateGroupRequest{Request: req, Input: input}
}

const opUpdateGroupCertificateConfiguration = "UpdateGroupCertificateConfiguration"

// UpdateGroupCertificateConfigurationRequest is a API request type for the UpdateGroupCertificateConfiguration API operation.
type UpdateGroupCertificateConfigurationRequest struct {
	*aws.Request
	Input *UpdateGroupCertificateConfigurationInput
}

// Send marshals and sends the UpdateGroupCertificateConfiguration API request.
func (r UpdateGroupCertificateConfigurationRequest) Send() (*UpdateGroupCertificateConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateGroupCertificateConfigurationOutput), nil
}

// UpdateGroupCertificateConfigurationRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates the Cert expiry time for a group.
//
//    // Example sending a request using the UpdateGroupCertificateConfigurationRequest method.
//    req := client.UpdateGroupCertificateConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateGroupCertificateConfiguration
func (c *Greengrass) UpdateGroupCertificateConfigurationRequest(input *UpdateGroupCertificateConfigurationInput) UpdateGroupCertificateConfigurationRequest {
	op := &aws.Operation{
		Name:       opUpdateGroupCertificateConfiguration,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry",
	}

	if input == nil {
		input = &UpdateGroupCertificateConfigurationInput{}
	}

	output := &UpdateGroupCertificateConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateGroupCertificateConfigurationRequest{Request: req, Input: input}
}

const opUpdateLoggerDefinition = "UpdateLoggerDefinition"

// UpdateLoggerDefinitionRequest is a API request type for the UpdateLoggerDefinition API operation.
type UpdateLoggerDefinitionRequest struct {
	*aws.Request
	Input *UpdateLoggerDefinitionInput
}

// Send marshals and sends the UpdateLoggerDefinition API request.
func (r UpdateLoggerDefinitionRequest) Send() (*UpdateLoggerDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateLoggerDefinitionOutput), nil
}

// UpdateLoggerDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates a logger definition.
//
//    // Example sending a request using the UpdateLoggerDefinitionRequest method.
//    req := client.UpdateLoggerDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateLoggerDefinition
func (c *Greengrass) UpdateLoggerDefinitionRequest(input *UpdateLoggerDefinitionInput) UpdateLoggerDefinitionRequest {
	op := &aws.Operation{
		Name:       opUpdateLoggerDefinition,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/definition/loggers/{LoggerDefinitionId}",
	}

	if input == nil {
		input = &UpdateLoggerDefinitionInput{}
	}

	output := &UpdateLoggerDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateLoggerDefinitionRequest{Request: req, Input: input}
}

const opUpdateResourceDefinition = "UpdateResourceDefinition"

// UpdateResourceDefinitionRequest is a API request type for the UpdateResourceDefinition API operation.
type UpdateResourceDefinitionRequest struct {
	*aws.Request
	Input *UpdateResourceDefinitionInput
}

// Send marshals and sends the UpdateResourceDefinition API request.
func (r UpdateResourceDefinitionRequest) Send() (*UpdateResourceDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateResourceDefinitionOutput), nil
}

// UpdateResourceDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates a resource definition.
//
//    // Example sending a request using the UpdateResourceDefinitionRequest method.
//    req := client.UpdateResourceDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateResourceDefinition
func (c *Greengrass) UpdateResourceDefinitionRequest(input *UpdateResourceDefinitionInput) UpdateResourceDefinitionRequest {
	op := &aws.Operation{
		Name:       opUpdateResourceDefinition,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/definition/resources/{ResourceDefinitionId}",
	}

	if input == nil {
		input = &UpdateResourceDefinitionInput{}
	}

	output := &UpdateResourceDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateResourceDefinitionRequest{Request: req, Input: input}
}

const opUpdateSubscriptionDefinition = "UpdateSubscriptionDefinition"

// UpdateSubscriptionDefinitionRequest is a API request type for the UpdateSubscriptionDefinition API operation.
type UpdateSubscriptionDefinitionRequest struct {
	*aws.Request
	Input *UpdateSubscriptionDefinitionInput
}

// Send marshals and sends the UpdateSubscriptionDefinition API request.
func (r UpdateSubscriptionDefinitionRequest) Send() (*UpdateSubscriptionDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateSubscriptionDefinitionOutput), nil
}

// UpdateSubscriptionDefinitionRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Updates a subscription definition.
//
//    // Example sending a request using the UpdateSubscriptionDefinitionRequest method.
//    req := client.UpdateSubscriptionDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateSubscriptionDefinition
func (c *Greengrass) UpdateSubscriptionDefinitionRequest(input *UpdateSubscriptionDefinitionInput) UpdateSubscriptionDefinitionRequest {
	op := &aws.Operation{
		Name:       opUpdateSubscriptionDefinition,
		HTTPMethod: "PUT",
		HTTPPath:   "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
	}

	if input == nil {
		input = &UpdateSubscriptionDefinitionInput{}
	}

	output := &UpdateSubscriptionDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateSubscriptionDefinitionRequest{Request: req, Input: input}
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/AssociateRoleToGroupRequest
type AssociateRoleToGroupInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`

	// Role arn you wish to associate with this group.
	RoleArn *string `type:"string"`
}

// String returns the string representation
func (s AssociateRoleToGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateRoleToGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociateRoleToGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AssociateRoleToGroupInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *AssociateRoleToGroupInput) SetGroupId(v string) *AssociateRoleToGroupInput {
	s.GroupId = &v
	return s
}

// SetRoleArn sets the RoleArn field's value.
func (s *AssociateRoleToGroupInput) SetRoleArn(v string) *AssociateRoleToGroupInput {
	s.RoleArn = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/AssociateRoleToGroupResponse
type AssociateRoleToGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Time the role arn was associated to your group.
	AssociatedAt *string `type:"string"`
}

// String returns the string representation
func (s AssociateRoleToGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateRoleToGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s AssociateRoleToGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetAssociatedAt sets the AssociatedAt field's value.
func (s *AssociateRoleToGroupOutput) SetAssociatedAt(v string) *AssociateRoleToGroupOutput {
	s.AssociatedAt = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/AssociateServiceRoleToAccountRequest
type AssociateServiceRoleToAccountInput struct {
	_ struct{} `type:"structure"`

	// Role arn you wish to associate with this account.
	RoleArn *string `type:"string"`
}

// String returns the string representation
func (s AssociateServiceRoleToAccountInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateServiceRoleToAccountInput) GoString() string {
	return s.String()
}

// SetRoleArn sets the RoleArn field's value.
func (s *AssociateServiceRoleToAccountInput) SetRoleArn(v string) *AssociateServiceRoleToAccountInput {
	s.RoleArn = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/AssociateServiceRoleToAccountResponse
type AssociateServiceRoleToAccountOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Time when the service role was associated to the account.
	AssociatedAt *string `type:"string"`
}

// String returns the string representation
func (s AssociateServiceRoleToAccountOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateServiceRoleToAccountOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s AssociateServiceRoleToAccountOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetAssociatedAt sets the AssociatedAt field's value.
func (s *AssociateServiceRoleToAccountOutput) SetAssociatedAt(v string) *AssociateServiceRoleToAccountOutput {
	s.AssociatedAt = &v
	return s
}

// Connectivity Info
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ConnectivityInfo
type ConnectivityInfo struct {
	_ struct{} `type:"structure"`

	// Endpoint for the GGC. Can be an IP address or DNS.
	HostAddress *string `type:"string"`

	// Element Id for this entry in the list.
	Id *string `type:"string"`

	// Metadata for this endpoint.
	Metadata *string `type:"string"`

	// Port of the GGC. Usually 8883.
	PortNumber *int64 `type:"integer"`
}

// String returns the string representation
func (s ConnectivityInfo) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ConnectivityInfo) GoString() string {
	return s.String()
}

// SetHostAddress sets the HostAddress field's value.
func (s *ConnectivityInfo) SetHostAddress(v string) *ConnectivityInfo {
	s.HostAddress = &v
	return s
}

// SetId sets the Id field's value.
func (s *ConnectivityInfo) SetId(v string) *ConnectivityInfo {
	s.Id = &v
	return s
}

// SetMetadata sets the Metadata field's value.
func (s *ConnectivityInfo) SetMetadata(v string) *ConnectivityInfo {
	s.Metadata = &v
	return s
}

// SetPortNumber sets the PortNumber field's value.
func (s *ConnectivityInfo) SetPortNumber(v int64) *ConnectivityInfo {
	s.PortNumber = &v
	return s
}

// Information on the core
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/Core
type Core struct {
	_ struct{} `type:"structure"`

	// Certificate arn of the core.
	CertificateArn *string `type:"string"`

	// Element Id for this entry in the list.
	Id *string `type:"string"`

	// If true, the local shadow value automatically syncs with the cloud's shadow
	// state.
	SyncShadow *bool `type:"boolean"`

	// Thing arn of the core.
	ThingArn *string `type:"string"`
}

// String returns the string representation
func (s Core) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Core) GoString() string {
	return s.String()
}

// SetCertificateArn sets the CertificateArn field's value.
func (s *Core) SetCertificateArn(v string) *Core {
	s.CertificateArn = &v
	return s
}

// SetId sets the Id field's value.
func (s *Core) SetId(v string) *Core {
	s.Id = &v
	return s
}

// SetSyncShadow sets the SyncShadow field's value.
func (s *Core) SetSyncShadow(v bool) *Core {
	s.SyncShadow = &v
	return s
}

// SetThingArn sets the ThingArn field's value.
func (s *Core) SetThingArn(v string) *Core {
	s.ThingArn = &v
	return s
}

// Information on core definition version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CoreDefinitionVersion
type CoreDefinitionVersion struct {
	_ struct{} `type:"structure"`

	// Cores in the definition version.
	Cores []Core `type:"list"`
}

// String returns the string representation
func (s CoreDefinitionVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CoreDefinitionVersion) GoString() string {
	return s.String()
}

// SetCores sets the Cores field's value.
func (s *CoreDefinitionVersion) SetCores(v []Core) *CoreDefinitionVersion {
	s.Cores = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateCoreDefinitionRequest
type CreateCoreDefinitionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Information on core definition version
	InitialVersion *CoreDefinitionVersion `type:"structure"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateCoreDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCoreDefinitionInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateCoreDefinitionInput) SetAmznClientToken(v string) *CreateCoreDefinitionInput {
	s.AmznClientToken = &v
	return s
}

// SetInitialVersion sets the InitialVersion field's value.
func (s *CreateCoreDefinitionInput) SetInitialVersion(v *CoreDefinitionVersion) *CreateCoreDefinitionInput {
	s.InitialVersion = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateCoreDefinitionInput) SetName(v string) *CreateCoreDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateCoreDefinitionResponse
type CreateCoreDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateCoreDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCoreDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateCoreDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateCoreDefinitionOutput) SetArn(v string) *CreateCoreDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateCoreDefinitionOutput) SetCreationTimestamp(v string) *CreateCoreDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateCoreDefinitionOutput) SetId(v string) *CreateCoreDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *CreateCoreDefinitionOutput) SetLastUpdatedTimestamp(v string) *CreateCoreDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *CreateCoreDefinitionOutput) SetLatestVersion(v string) *CreateCoreDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *CreateCoreDefinitionOutput) SetLatestVersionArn(v string) *CreateCoreDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateCoreDefinitionOutput) SetName(v string) *CreateCoreDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateCoreDefinitionVersionRequest
type CreateCoreDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// CoreDefinitionId is a required field
	CoreDefinitionId *string `location:"uri" locationName:"CoreDefinitionId" type:"string" required:"true"`

	Cores []Core `type:"list"`
}

// String returns the string representation
func (s CreateCoreDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCoreDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateCoreDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateCoreDefinitionVersionInput"}

	if s.CoreDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CoreDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateCoreDefinitionVersionInput) SetAmznClientToken(v string) *CreateCoreDefinitionVersionInput {
	s.AmznClientToken = &v
	return s
}

// SetCoreDefinitionId sets the CoreDefinitionId field's value.
func (s *CreateCoreDefinitionVersionInput) SetCoreDefinitionId(v string) *CreateCoreDefinitionVersionInput {
	s.CoreDefinitionId = &v
	return s
}

// SetCores sets the Cores field's value.
func (s *CreateCoreDefinitionVersionInput) SetCores(v []Core) *CreateCoreDefinitionVersionInput {
	s.Cores = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateCoreDefinitionVersionResponse
type CreateCoreDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s CreateCoreDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCoreDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateCoreDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateCoreDefinitionVersionOutput) SetArn(v string) *CreateCoreDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateCoreDefinitionVersionOutput) SetCreationTimestamp(v string) *CreateCoreDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateCoreDefinitionVersionOutput) SetId(v string) *CreateCoreDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *CreateCoreDefinitionVersionOutput) SetVersion(v string) *CreateCoreDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Information on Deployment
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeploymentRequest
type CreateDeploymentInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Id of the deployment if you wish to redeploy a previous deployment.
	DeploymentId *string `type:"string"`

	// Type of deployment. When used in CreateDeployment, only NewDeployment and
	// Redeployment are valid.
	DeploymentType DeploymentType `type:"string" enum:"true"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`

	// Group Version you wish to deploy.
	GroupVersionId *string `type:"string"`
}

// String returns the string representation
func (s CreateDeploymentInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeploymentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDeploymentInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateDeploymentInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateDeploymentInput) SetAmznClientToken(v string) *CreateDeploymentInput {
	s.AmznClientToken = &v
	return s
}

// SetDeploymentId sets the DeploymentId field's value.
func (s *CreateDeploymentInput) SetDeploymentId(v string) *CreateDeploymentInput {
	s.DeploymentId = &v
	return s
}

// SetDeploymentType sets the DeploymentType field's value.
func (s *CreateDeploymentInput) SetDeploymentType(v DeploymentType) *CreateDeploymentInput {
	s.DeploymentType = v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *CreateDeploymentInput) SetGroupId(v string) *CreateDeploymentInput {
	s.GroupId = &v
	return s
}

// SetGroupVersionId sets the GroupVersionId field's value.
func (s *CreateDeploymentInput) SetGroupVersionId(v string) *CreateDeploymentInput {
	s.GroupVersionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeploymentResponse
type CreateDeploymentOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The arn of the deployment.
	DeploymentArn *string `type:"string"`

	// The id of the deployment.
	DeploymentId *string `type:"string"`
}

// String returns the string representation
func (s CreateDeploymentOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeploymentOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateDeploymentOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDeploymentArn sets the DeploymentArn field's value.
func (s *CreateDeploymentOutput) SetDeploymentArn(v string) *CreateDeploymentOutput {
	s.DeploymentArn = &v
	return s
}

// SetDeploymentId sets the DeploymentId field's value.
func (s *CreateDeploymentOutput) SetDeploymentId(v string) *CreateDeploymentOutput {
	s.DeploymentId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeviceDefinitionRequest
type CreateDeviceDefinitionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Information on device definition version
	InitialVersion *DeviceDefinitionVersion `type:"structure"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateDeviceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeviceDefinitionInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateDeviceDefinitionInput) SetAmznClientToken(v string) *CreateDeviceDefinitionInput {
	s.AmznClientToken = &v
	return s
}

// SetInitialVersion sets the InitialVersion field's value.
func (s *CreateDeviceDefinitionInput) SetInitialVersion(v *DeviceDefinitionVersion) *CreateDeviceDefinitionInput {
	s.InitialVersion = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateDeviceDefinitionInput) SetName(v string) *CreateDeviceDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeviceDefinitionResponse
type CreateDeviceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateDeviceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeviceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateDeviceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateDeviceDefinitionOutput) SetArn(v string) *CreateDeviceDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateDeviceDefinitionOutput) SetCreationTimestamp(v string) *CreateDeviceDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateDeviceDefinitionOutput) SetId(v string) *CreateDeviceDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *CreateDeviceDefinitionOutput) SetLastUpdatedTimestamp(v string) *CreateDeviceDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *CreateDeviceDefinitionOutput) SetLatestVersion(v string) *CreateDeviceDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *CreateDeviceDefinitionOutput) SetLatestVersionArn(v string) *CreateDeviceDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateDeviceDefinitionOutput) SetName(v string) *CreateDeviceDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeviceDefinitionVersionRequest
type CreateDeviceDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// DeviceDefinitionId is a required field
	DeviceDefinitionId *string `location:"uri" locationName:"DeviceDefinitionId" type:"string" required:"true"`

	Devices []Device `type:"list"`
}

// String returns the string representation
func (s CreateDeviceDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeviceDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDeviceDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateDeviceDefinitionVersionInput"}

	if s.DeviceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeviceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateDeviceDefinitionVersionInput) SetAmznClientToken(v string) *CreateDeviceDefinitionVersionInput {
	s.AmznClientToken = &v
	return s
}

// SetDeviceDefinitionId sets the DeviceDefinitionId field's value.
func (s *CreateDeviceDefinitionVersionInput) SetDeviceDefinitionId(v string) *CreateDeviceDefinitionVersionInput {
	s.DeviceDefinitionId = &v
	return s
}

// SetDevices sets the Devices field's value.
func (s *CreateDeviceDefinitionVersionInput) SetDevices(v []Device) *CreateDeviceDefinitionVersionInput {
	s.Devices = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateDeviceDefinitionVersionResponse
type CreateDeviceDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s CreateDeviceDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeviceDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateDeviceDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateDeviceDefinitionVersionOutput) SetArn(v string) *CreateDeviceDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateDeviceDefinitionVersionOutput) SetCreationTimestamp(v string) *CreateDeviceDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateDeviceDefinitionVersionOutput) SetId(v string) *CreateDeviceDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *CreateDeviceDefinitionVersionOutput) SetVersion(v string) *CreateDeviceDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateFunctionDefinitionRequest
type CreateFunctionDefinitionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Information on the function definition version
	InitialVersion *FunctionDefinitionVersion `type:"structure"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateFunctionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFunctionDefinitionInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateFunctionDefinitionInput) SetAmznClientToken(v string) *CreateFunctionDefinitionInput {
	s.AmznClientToken = &v
	return s
}

// SetInitialVersion sets the InitialVersion field's value.
func (s *CreateFunctionDefinitionInput) SetInitialVersion(v *FunctionDefinitionVersion) *CreateFunctionDefinitionInput {
	s.InitialVersion = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateFunctionDefinitionInput) SetName(v string) *CreateFunctionDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateFunctionDefinitionResponse
type CreateFunctionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateFunctionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFunctionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateFunctionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateFunctionDefinitionOutput) SetArn(v string) *CreateFunctionDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateFunctionDefinitionOutput) SetCreationTimestamp(v string) *CreateFunctionDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateFunctionDefinitionOutput) SetId(v string) *CreateFunctionDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *CreateFunctionDefinitionOutput) SetLastUpdatedTimestamp(v string) *CreateFunctionDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *CreateFunctionDefinitionOutput) SetLatestVersion(v string) *CreateFunctionDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *CreateFunctionDefinitionOutput) SetLatestVersionArn(v string) *CreateFunctionDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateFunctionDefinitionOutput) SetName(v string) *CreateFunctionDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateFunctionDefinitionVersionRequest
type CreateFunctionDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// FunctionDefinitionId is a required field
	FunctionDefinitionId *string `location:"uri" locationName:"FunctionDefinitionId" type:"string" required:"true"`

	Functions []Function `type:"list"`
}

// String returns the string representation
func (s CreateFunctionDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFunctionDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateFunctionDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateFunctionDefinitionVersionInput"}

	if s.FunctionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("FunctionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateFunctionDefinitionVersionInput) SetAmznClientToken(v string) *CreateFunctionDefinitionVersionInput {
	s.AmznClientToken = &v
	return s
}

// SetFunctionDefinitionId sets the FunctionDefinitionId field's value.
func (s *CreateFunctionDefinitionVersionInput) SetFunctionDefinitionId(v string) *CreateFunctionDefinitionVersionInput {
	s.FunctionDefinitionId = &v
	return s
}

// SetFunctions sets the Functions field's value.
func (s *CreateFunctionDefinitionVersionInput) SetFunctions(v []Function) *CreateFunctionDefinitionVersionInput {
	s.Functions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateFunctionDefinitionVersionResponse
type CreateFunctionDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s CreateFunctionDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFunctionDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateFunctionDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateFunctionDefinitionVersionOutput) SetArn(v string) *CreateFunctionDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateFunctionDefinitionVersionOutput) SetCreationTimestamp(v string) *CreateFunctionDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateFunctionDefinitionVersionOutput) SetId(v string) *CreateFunctionDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *CreateFunctionDefinitionVersionOutput) SetVersion(v string) *CreateFunctionDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupCertificateAuthorityRequest
type CreateGroupCertificateAuthorityInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s CreateGroupCertificateAuthorityInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateGroupCertificateAuthorityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateGroupCertificateAuthorityInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateGroupCertificateAuthorityInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateGroupCertificateAuthorityInput) SetAmznClientToken(v string) *CreateGroupCertificateAuthorityInput {
	s.AmznClientToken = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *CreateGroupCertificateAuthorityInput) SetGroupId(v string) *CreateGroupCertificateAuthorityInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupCertificateAuthorityResponse
type CreateGroupCertificateAuthorityOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the group certificate authority.
	GroupCertificateAuthorityArn *string `type:"string"`
}

// String returns the string representation
func (s CreateGroupCertificateAuthorityOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateGroupCertificateAuthorityOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateGroupCertificateAuthorityOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetGroupCertificateAuthorityArn sets the GroupCertificateAuthorityArn field's value.
func (s *CreateGroupCertificateAuthorityOutput) SetGroupCertificateAuthorityArn(v string) *CreateGroupCertificateAuthorityOutput {
	s.GroupCertificateAuthorityArn = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupRequest
type CreateGroupInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Information on group version
	InitialVersion *GroupVersion `type:"structure"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateGroupInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateGroupInput) SetAmznClientToken(v string) *CreateGroupInput {
	s.AmznClientToken = &v
	return s
}

// SetInitialVersion sets the InitialVersion field's value.
func (s *CreateGroupInput) SetInitialVersion(v *GroupVersion) *CreateGroupInput {
	s.InitialVersion = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateGroupInput) SetName(v string) *CreateGroupInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupResponse
type CreateGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateGroupOutput) SetArn(v string) *CreateGroupOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateGroupOutput) SetCreationTimestamp(v string) *CreateGroupOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateGroupOutput) SetId(v string) *CreateGroupOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *CreateGroupOutput) SetLastUpdatedTimestamp(v string) *CreateGroupOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *CreateGroupOutput) SetLatestVersion(v string) *CreateGroupOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *CreateGroupOutput) SetLatestVersionArn(v string) *CreateGroupOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateGroupOutput) SetName(v string) *CreateGroupOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupVersionRequest
type CreateGroupVersionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	CoreDefinitionVersionArn *string `type:"string"`

	DeviceDefinitionVersionArn *string `type:"string"`

	FunctionDefinitionVersionArn *string `type:"string"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`

	LoggerDefinitionVersionArn *string `type:"string"`

	ResourceDefinitionVersionArn *string `type:"string"`

	SubscriptionDefinitionVersionArn *string `type:"string"`
}

// String returns the string representation
func (s CreateGroupVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateGroupVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateGroupVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateGroupVersionInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateGroupVersionInput) SetAmznClientToken(v string) *CreateGroupVersionInput {
	s.AmznClientToken = &v
	return s
}

// SetCoreDefinitionVersionArn sets the CoreDefinitionVersionArn field's value.
func (s *CreateGroupVersionInput) SetCoreDefinitionVersionArn(v string) *CreateGroupVersionInput {
	s.CoreDefinitionVersionArn = &v
	return s
}

// SetDeviceDefinitionVersionArn sets the DeviceDefinitionVersionArn field's value.
func (s *CreateGroupVersionInput) SetDeviceDefinitionVersionArn(v string) *CreateGroupVersionInput {
	s.DeviceDefinitionVersionArn = &v
	return s
}

// SetFunctionDefinitionVersionArn sets the FunctionDefinitionVersionArn field's value.
func (s *CreateGroupVersionInput) SetFunctionDefinitionVersionArn(v string) *CreateGroupVersionInput {
	s.FunctionDefinitionVersionArn = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *CreateGroupVersionInput) SetGroupId(v string) *CreateGroupVersionInput {
	s.GroupId = &v
	return s
}

// SetLoggerDefinitionVersionArn sets the LoggerDefinitionVersionArn field's value.
func (s *CreateGroupVersionInput) SetLoggerDefinitionVersionArn(v string) *CreateGroupVersionInput {
	s.LoggerDefinitionVersionArn = &v
	return s
}

// SetResourceDefinitionVersionArn sets the ResourceDefinitionVersionArn field's value.
func (s *CreateGroupVersionInput) SetResourceDefinitionVersionArn(v string) *CreateGroupVersionInput {
	s.ResourceDefinitionVersionArn = &v
	return s
}

// SetSubscriptionDefinitionVersionArn sets the SubscriptionDefinitionVersionArn field's value.
func (s *CreateGroupVersionInput) SetSubscriptionDefinitionVersionArn(v string) *CreateGroupVersionInput {
	s.SubscriptionDefinitionVersionArn = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateGroupVersionResponse
type CreateGroupVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s CreateGroupVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateGroupVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateGroupVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateGroupVersionOutput) SetArn(v string) *CreateGroupVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateGroupVersionOutput) SetCreationTimestamp(v string) *CreateGroupVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateGroupVersionOutput) SetId(v string) *CreateGroupVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *CreateGroupVersionOutput) SetVersion(v string) *CreateGroupVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateLoggerDefinitionRequest
type CreateLoggerDefinitionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Information on logger definition version
	InitialVersion *LoggerDefinitionVersion `type:"structure"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateLoggerDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoggerDefinitionInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateLoggerDefinitionInput) SetAmznClientToken(v string) *CreateLoggerDefinitionInput {
	s.AmznClientToken = &v
	return s
}

// SetInitialVersion sets the InitialVersion field's value.
func (s *CreateLoggerDefinitionInput) SetInitialVersion(v *LoggerDefinitionVersion) *CreateLoggerDefinitionInput {
	s.InitialVersion = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateLoggerDefinitionInput) SetName(v string) *CreateLoggerDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateLoggerDefinitionResponse
type CreateLoggerDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateLoggerDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoggerDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateLoggerDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateLoggerDefinitionOutput) SetArn(v string) *CreateLoggerDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateLoggerDefinitionOutput) SetCreationTimestamp(v string) *CreateLoggerDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateLoggerDefinitionOutput) SetId(v string) *CreateLoggerDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *CreateLoggerDefinitionOutput) SetLastUpdatedTimestamp(v string) *CreateLoggerDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *CreateLoggerDefinitionOutput) SetLatestVersion(v string) *CreateLoggerDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *CreateLoggerDefinitionOutput) SetLatestVersionArn(v string) *CreateLoggerDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateLoggerDefinitionOutput) SetName(v string) *CreateLoggerDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateLoggerDefinitionVersionRequest
type CreateLoggerDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// LoggerDefinitionId is a required field
	LoggerDefinitionId *string `location:"uri" locationName:"LoggerDefinitionId" type:"string" required:"true"`

	Loggers []Logger `type:"list"`
}

// String returns the string representation
func (s CreateLoggerDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoggerDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateLoggerDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateLoggerDefinitionVersionInput"}

	if s.LoggerDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoggerDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateLoggerDefinitionVersionInput) SetAmznClientToken(v string) *CreateLoggerDefinitionVersionInput {
	s.AmznClientToken = &v
	return s
}

// SetLoggerDefinitionId sets the LoggerDefinitionId field's value.
func (s *CreateLoggerDefinitionVersionInput) SetLoggerDefinitionId(v string) *CreateLoggerDefinitionVersionInput {
	s.LoggerDefinitionId = &v
	return s
}

// SetLoggers sets the Loggers field's value.
func (s *CreateLoggerDefinitionVersionInput) SetLoggers(v []Logger) *CreateLoggerDefinitionVersionInput {
	s.Loggers = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateLoggerDefinitionVersionResponse
type CreateLoggerDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s CreateLoggerDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoggerDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateLoggerDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateLoggerDefinitionVersionOutput) SetArn(v string) *CreateLoggerDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateLoggerDefinitionVersionOutput) SetCreationTimestamp(v string) *CreateLoggerDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateLoggerDefinitionVersionOutput) SetId(v string) *CreateLoggerDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *CreateLoggerDefinitionVersionOutput) SetVersion(v string) *CreateLoggerDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateResourceDefinitionRequest
type CreateResourceDefinitionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Information on resource definition version
	InitialVersion *ResourceDefinitionVersion `type:"structure"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateResourceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateResourceDefinitionInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateResourceDefinitionInput) SetAmznClientToken(v string) *CreateResourceDefinitionInput {
	s.AmznClientToken = &v
	return s
}

// SetInitialVersion sets the InitialVersion field's value.
func (s *CreateResourceDefinitionInput) SetInitialVersion(v *ResourceDefinitionVersion) *CreateResourceDefinitionInput {
	s.InitialVersion = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateResourceDefinitionInput) SetName(v string) *CreateResourceDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateResourceDefinitionResponse
type CreateResourceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateResourceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateResourceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateResourceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateResourceDefinitionOutput) SetArn(v string) *CreateResourceDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateResourceDefinitionOutput) SetCreationTimestamp(v string) *CreateResourceDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateResourceDefinitionOutput) SetId(v string) *CreateResourceDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *CreateResourceDefinitionOutput) SetLastUpdatedTimestamp(v string) *CreateResourceDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *CreateResourceDefinitionOutput) SetLatestVersion(v string) *CreateResourceDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *CreateResourceDefinitionOutput) SetLatestVersionArn(v string) *CreateResourceDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateResourceDefinitionOutput) SetName(v string) *CreateResourceDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateResourceDefinitionVersionRequest
type CreateResourceDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// ResourceDefinitionId is a required field
	ResourceDefinitionId *string `location:"uri" locationName:"ResourceDefinitionId" type:"string" required:"true"`

	Resources []Resource `type:"list"`
}

// String returns the string representation
func (s CreateResourceDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateResourceDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateResourceDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateResourceDefinitionVersionInput"}

	if s.ResourceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateResourceDefinitionVersionInput) SetAmznClientToken(v string) *CreateResourceDefinitionVersionInput {
	s.AmznClientToken = &v
	return s
}

// SetResourceDefinitionId sets the ResourceDefinitionId field's value.
func (s *CreateResourceDefinitionVersionInput) SetResourceDefinitionId(v string) *CreateResourceDefinitionVersionInput {
	s.ResourceDefinitionId = &v
	return s
}

// SetResources sets the Resources field's value.
func (s *CreateResourceDefinitionVersionInput) SetResources(v []Resource) *CreateResourceDefinitionVersionInput {
	s.Resources = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateResourceDefinitionVersionResponse
type CreateResourceDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s CreateResourceDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateResourceDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateResourceDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateResourceDefinitionVersionOutput) SetArn(v string) *CreateResourceDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateResourceDefinitionVersionOutput) SetCreationTimestamp(v string) *CreateResourceDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateResourceDefinitionVersionOutput) SetId(v string) *CreateResourceDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *CreateResourceDefinitionVersionOutput) SetVersion(v string) *CreateResourceDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Request for the CreateSoftwareUpdateJob API
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSoftwareUpdateJobRequest
type CreateSoftwareUpdateJobInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// The IAM Role that Greengrass will use to create pre-signed URLs pointing
	// towards the update artifact.
	S3UrlSignerRole *string `type:"string"`

	// The piece of software on the Greengrass Core that will be updated.
	SoftwareToUpdate SoftwareToUpdate `type:"string" enum:"true"`

	// The minimum level of log statements that should be logged by the OTA Agent
	// during an update.
	UpdateAgentLogLevel UpdateAgentLogLevel `type:"string" enum:"true"`

	// The target arns that this update will be applied to.
	UpdateTargets []string `type:"list"`

	// The architecture of the Cores in the targets of an update
	UpdateTargetsArchitecture UpdateTargetsArchitecture `type:"string" enum:"true"`

	// The operating system of the Cores in the targets of an update
	UpdateTargetsOperatingSystem UpdateTargetsOperatingSystem `type:"string" enum:"true"`
}

// String returns the string representation
func (s CreateSoftwareUpdateJobInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSoftwareUpdateJobInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateSoftwareUpdateJobInput) SetAmznClientToken(v string) *CreateSoftwareUpdateJobInput {
	s.AmznClientToken = &v
	return s
}

// SetS3UrlSignerRole sets the S3UrlSignerRole field's value.
func (s *CreateSoftwareUpdateJobInput) SetS3UrlSignerRole(v string) *CreateSoftwareUpdateJobInput {
	s.S3UrlSignerRole = &v
	return s
}

// SetSoftwareToUpdate sets the SoftwareToUpdate field's value.
func (s *CreateSoftwareUpdateJobInput) SetSoftwareToUpdate(v SoftwareToUpdate) *CreateSoftwareUpdateJobInput {
	s.SoftwareToUpdate = v
	return s
}

// SetUpdateAgentLogLevel sets the UpdateAgentLogLevel field's value.
func (s *CreateSoftwareUpdateJobInput) SetUpdateAgentLogLevel(v UpdateAgentLogLevel) *CreateSoftwareUpdateJobInput {
	s.UpdateAgentLogLevel = v
	return s
}

// SetUpdateTargets sets the UpdateTargets field's value.
func (s *CreateSoftwareUpdateJobInput) SetUpdateTargets(v []string) *CreateSoftwareUpdateJobInput {
	s.UpdateTargets = v
	return s
}

// SetUpdateTargetsArchitecture sets the UpdateTargetsArchitecture field's value.
func (s *CreateSoftwareUpdateJobInput) SetUpdateTargetsArchitecture(v UpdateTargetsArchitecture) *CreateSoftwareUpdateJobInput {
	s.UpdateTargetsArchitecture = v
	return s
}

// SetUpdateTargetsOperatingSystem sets the UpdateTargetsOperatingSystem field's value.
func (s *CreateSoftwareUpdateJobInput) SetUpdateTargetsOperatingSystem(v UpdateTargetsOperatingSystem) *CreateSoftwareUpdateJobInput {
	s.UpdateTargetsOperatingSystem = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSoftwareUpdateJobResponse
type CreateSoftwareUpdateJobOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The Iot Job Arn corresponding to this update.
	IotJobArn *string `type:"string"`

	// The Iot Job Id corresponding to this update.
	IotJobId *string `type:"string"`
}

// String returns the string representation
func (s CreateSoftwareUpdateJobOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSoftwareUpdateJobOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateSoftwareUpdateJobOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetIotJobArn sets the IotJobArn field's value.
func (s *CreateSoftwareUpdateJobOutput) SetIotJobArn(v string) *CreateSoftwareUpdateJobOutput {
	s.IotJobArn = &v
	return s
}

// SetIotJobId sets the IotJobId field's value.
func (s *CreateSoftwareUpdateJobOutput) SetIotJobId(v string) *CreateSoftwareUpdateJobOutput {
	s.IotJobId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSubscriptionDefinitionRequest
type CreateSubscriptionDefinitionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// Information on subscription definition version
	InitialVersion *SubscriptionDefinitionVersion `type:"structure"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateSubscriptionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubscriptionDefinitionInput) GoString() string {
	return s.String()
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateSubscriptionDefinitionInput) SetAmznClientToken(v string) *CreateSubscriptionDefinitionInput {
	s.AmznClientToken = &v
	return s
}

// SetInitialVersion sets the InitialVersion field's value.
func (s *CreateSubscriptionDefinitionInput) SetInitialVersion(v *SubscriptionDefinitionVersion) *CreateSubscriptionDefinitionInput {
	s.InitialVersion = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateSubscriptionDefinitionInput) SetName(v string) *CreateSubscriptionDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSubscriptionDefinitionResponse
type CreateSubscriptionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateSubscriptionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubscriptionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateSubscriptionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateSubscriptionDefinitionOutput) SetArn(v string) *CreateSubscriptionDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateSubscriptionDefinitionOutput) SetCreationTimestamp(v string) *CreateSubscriptionDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateSubscriptionDefinitionOutput) SetId(v string) *CreateSubscriptionDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *CreateSubscriptionDefinitionOutput) SetLastUpdatedTimestamp(v string) *CreateSubscriptionDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *CreateSubscriptionDefinitionOutput) SetLatestVersion(v string) *CreateSubscriptionDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *CreateSubscriptionDefinitionOutput) SetLatestVersionArn(v string) *CreateSubscriptionDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateSubscriptionDefinitionOutput) SetName(v string) *CreateSubscriptionDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSubscriptionDefinitionVersionRequest
type CreateSubscriptionDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// SubscriptionDefinitionId is a required field
	SubscriptionDefinitionId *string `location:"uri" locationName:"SubscriptionDefinitionId" type:"string" required:"true"`

	Subscriptions []Subscription `type:"list"`
}

// String returns the string representation
func (s CreateSubscriptionDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubscriptionDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSubscriptionDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateSubscriptionDefinitionVersionInput"}

	if s.SubscriptionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("SubscriptionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *CreateSubscriptionDefinitionVersionInput) SetAmznClientToken(v string) *CreateSubscriptionDefinitionVersionInput {
	s.AmznClientToken = &v
	return s
}

// SetSubscriptionDefinitionId sets the SubscriptionDefinitionId field's value.
func (s *CreateSubscriptionDefinitionVersionInput) SetSubscriptionDefinitionId(v string) *CreateSubscriptionDefinitionVersionInput {
	s.SubscriptionDefinitionId = &v
	return s
}

// SetSubscriptions sets the Subscriptions field's value.
func (s *CreateSubscriptionDefinitionVersionInput) SetSubscriptions(v []Subscription) *CreateSubscriptionDefinitionVersionInput {
	s.Subscriptions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/CreateSubscriptionDefinitionVersionResponse
type CreateSubscriptionDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	Version *string `type:"string"`
}

// String returns the string representation
func (s CreateSubscriptionDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSubscriptionDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateSubscriptionDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *CreateSubscriptionDefinitionVersionOutput) SetArn(v string) *CreateSubscriptionDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *CreateSubscriptionDefinitionVersionOutput) SetCreationTimestamp(v string) *CreateSubscriptionDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *CreateSubscriptionDefinitionVersionOutput) SetId(v string) *CreateSubscriptionDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *CreateSubscriptionDefinitionVersionOutput) SetVersion(v string) *CreateSubscriptionDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Information on the Definition
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DefinitionInformation
type DefinitionInformation struct {
	_ struct{} `type:"structure"`

	// Arn of the definition.
	Arn *string `type:"string"`

	// Timestamp of when the definition was created.
	CreationTimestamp *string `type:"string"`

	// Id of the definition.
	Id *string `type:"string"`

	// Last updated timestamp of the definition.
	LastUpdatedTimestamp *string `type:"string"`

	// Last version of the definition.
	LatestVersion *string `type:"string"`

	// Latest version arn of the definition.
	LatestVersionArn *string `type:"string"`

	// Name of the definition.
	Name *string `type:"string"`
}

// String returns the string representation
func (s DefinitionInformation) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DefinitionInformation) GoString() string {
	return s.String()
}

// SetArn sets the Arn field's value.
func (s *DefinitionInformation) SetArn(v string) *DefinitionInformation {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *DefinitionInformation) SetCreationTimestamp(v string) *DefinitionInformation {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *DefinitionInformation) SetId(v string) *DefinitionInformation {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *DefinitionInformation) SetLastUpdatedTimestamp(v string) *DefinitionInformation {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *DefinitionInformation) SetLatestVersion(v string) *DefinitionInformation {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *DefinitionInformation) SetLatestVersionArn(v string) *DefinitionInformation {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *DefinitionInformation) SetName(v string) *DefinitionInformation {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteCoreDefinitionRequest
type DeleteCoreDefinitionInput struct {
	_ struct{} `type:"structure"`

	// CoreDefinitionId is a required field
	CoreDefinitionId *string `location:"uri" locationName:"CoreDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteCoreDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCoreDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteCoreDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteCoreDefinitionInput"}

	if s.CoreDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CoreDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCoreDefinitionId sets the CoreDefinitionId field's value.
func (s *DeleteCoreDefinitionInput) SetCoreDefinitionId(v string) *DeleteCoreDefinitionInput {
	s.CoreDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteCoreDefinitionResponse
type DeleteCoreDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteCoreDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCoreDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteCoreDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteDeviceDefinitionRequest
type DeleteDeviceDefinitionInput struct {
	_ struct{} `type:"structure"`

	// DeviceDefinitionId is a required field
	DeviceDefinitionId *string `location:"uri" locationName:"DeviceDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteDeviceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDeviceDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDeviceDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteDeviceDefinitionInput"}

	if s.DeviceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeviceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceDefinitionId sets the DeviceDefinitionId field's value.
func (s *DeleteDeviceDefinitionInput) SetDeviceDefinitionId(v string) *DeleteDeviceDefinitionInput {
	s.DeviceDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteDeviceDefinitionResponse
type DeleteDeviceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteDeviceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDeviceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteDeviceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteFunctionDefinitionRequest
type DeleteFunctionDefinitionInput struct {
	_ struct{} `type:"structure"`

	// FunctionDefinitionId is a required field
	FunctionDefinitionId *string `location:"uri" locationName:"FunctionDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteFunctionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFunctionDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteFunctionDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteFunctionDefinitionInput"}

	if s.FunctionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("FunctionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionDefinitionId sets the FunctionDefinitionId field's value.
func (s *DeleteFunctionDefinitionInput) SetFunctionDefinitionId(v string) *DeleteFunctionDefinitionInput {
	s.FunctionDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteFunctionDefinitionResponse
type DeleteFunctionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteFunctionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFunctionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteFunctionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteGroupRequest
type DeleteGroupInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteGroupInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *DeleteGroupInput) SetGroupId(v string) *DeleteGroupInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteGroupResponse
type DeleteGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteLoggerDefinitionRequest
type DeleteLoggerDefinitionInput struct {
	_ struct{} `type:"structure"`

	// LoggerDefinitionId is a required field
	LoggerDefinitionId *string `location:"uri" locationName:"LoggerDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteLoggerDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLoggerDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteLoggerDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteLoggerDefinitionInput"}

	if s.LoggerDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoggerDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoggerDefinitionId sets the LoggerDefinitionId field's value.
func (s *DeleteLoggerDefinitionInput) SetLoggerDefinitionId(v string) *DeleteLoggerDefinitionInput {
	s.LoggerDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteLoggerDefinitionResponse
type DeleteLoggerDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteLoggerDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLoggerDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteLoggerDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteResourceDefinitionRequest
type DeleteResourceDefinitionInput struct {
	_ struct{} `type:"structure"`

	// ResourceDefinitionId is a required field
	ResourceDefinitionId *string `location:"uri" locationName:"ResourceDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteResourceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteResourceDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteResourceDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteResourceDefinitionInput"}

	if s.ResourceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceDefinitionId sets the ResourceDefinitionId field's value.
func (s *DeleteResourceDefinitionInput) SetResourceDefinitionId(v string) *DeleteResourceDefinitionInput {
	s.ResourceDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteResourceDefinitionResponse
type DeleteResourceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteResourceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteResourceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteResourceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteSubscriptionDefinitionRequest
type DeleteSubscriptionDefinitionInput struct {
	_ struct{} `type:"structure"`

	// SubscriptionDefinitionId is a required field
	SubscriptionDefinitionId *string `location:"uri" locationName:"SubscriptionDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSubscriptionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSubscriptionDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSubscriptionDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteSubscriptionDefinitionInput"}

	if s.SubscriptionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("SubscriptionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSubscriptionDefinitionId sets the SubscriptionDefinitionId field's value.
func (s *DeleteSubscriptionDefinitionInput) SetSubscriptionDefinitionId(v string) *DeleteSubscriptionDefinitionInput {
	s.SubscriptionDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeleteSubscriptionDefinitionResponse
type DeleteSubscriptionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteSubscriptionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSubscriptionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteSubscriptionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Information on the deployment
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/Deployment
type Deployment struct {
	_ struct{} `type:"structure"`

	// Timestamp when the deployment was created.
	CreatedAt *string `type:"string"`

	// Arn of the deployment.
	DeploymentArn *string `type:"string"`

	// Id of the deployment.
	DeploymentId *string `type:"string"`

	// The type of deployment.
	DeploymentType DeploymentType `type:"string" enum:"true"`

	// Arn of the group for this deployment.
	GroupArn *string `type:"string"`
}

// String returns the string representation
func (s Deployment) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Deployment) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *Deployment) SetCreatedAt(v string) *Deployment {
	s.CreatedAt = &v
	return s
}

// SetDeploymentArn sets the DeploymentArn field's value.
func (s *Deployment) SetDeploymentArn(v string) *Deployment {
	s.DeploymentArn = &v
	return s
}

// SetDeploymentId sets the DeploymentId field's value.
func (s *Deployment) SetDeploymentId(v string) *Deployment {
	s.DeploymentId = &v
	return s
}

// SetDeploymentType sets the DeploymentType field's value.
func (s *Deployment) SetDeploymentType(v DeploymentType) *Deployment {
	s.DeploymentType = v
	return s
}

// SetGroupArn sets the GroupArn field's value.
func (s *Deployment) SetGroupArn(v string) *Deployment {
	s.GroupArn = &v
	return s
}

// Information on a Device
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/Device
type Device struct {
	_ struct{} `type:"structure"`

	// Certificate arn of the device.
	CertificateArn *string `type:"string"`

	// Element Id for this entry in the list.
	Id *string `type:"string"`

	// If true, the local shadow value automatically syncs with the cloud's shadow
	// state.
	SyncShadow *bool `type:"boolean"`

	// Thing arn of the device.
	ThingArn *string `type:"string"`
}

// String returns the string representation
func (s Device) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Device) GoString() string {
	return s.String()
}

// SetCertificateArn sets the CertificateArn field's value.
func (s *Device) SetCertificateArn(v string) *Device {
	s.CertificateArn = &v
	return s
}

// SetId sets the Id field's value.
func (s *Device) SetId(v string) *Device {
	s.Id = &v
	return s
}

// SetSyncShadow sets the SyncShadow field's value.
func (s *Device) SetSyncShadow(v bool) *Device {
	s.SyncShadow = &v
	return s
}

// SetThingArn sets the ThingArn field's value.
func (s *Device) SetThingArn(v string) *Device {
	s.ThingArn = &v
	return s
}

// Information on device definition version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DeviceDefinitionVersion
type DeviceDefinitionVersion struct {
	_ struct{} `type:"structure"`

	// Devices in the definition version.
	Devices []Device `type:"list"`
}

// String returns the string representation
func (s DeviceDefinitionVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeviceDefinitionVersion) GoString() string {
	return s.String()
}

// SetDevices sets the Devices field's value.
func (s *DeviceDefinitionVersion) SetDevices(v []Device) *DeviceDefinitionVersion {
	s.Devices = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DisassociateRoleFromGroupRequest
type DisassociateRoleFromGroupInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s DisassociateRoleFromGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisassociateRoleFromGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisassociateRoleFromGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DisassociateRoleFromGroupInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *DisassociateRoleFromGroupInput) SetGroupId(v string) *DisassociateRoleFromGroupInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DisassociateRoleFromGroupResponse
type DisassociateRoleFromGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Time when the role was disassociated from the group.
	DisassociatedAt *string `type:"string"`
}

// String returns the string representation
func (s DisassociateRoleFromGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisassociateRoleFromGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DisassociateRoleFromGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDisassociatedAt sets the DisassociatedAt field's value.
func (s *DisassociateRoleFromGroupOutput) SetDisassociatedAt(v string) *DisassociateRoleFromGroupOutput {
	s.DisassociatedAt = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DisassociateServiceRoleFromAccountRequest
type DisassociateServiceRoleFromAccountInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DisassociateServiceRoleFromAccountInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisassociateServiceRoleFromAccountInput) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/DisassociateServiceRoleFromAccountResponse
type DisassociateServiceRoleFromAccountOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Time when the service role was disassociated from the account.
	DisassociatedAt *string `type:"string"`
}

// String returns the string representation
func (s DisassociateServiceRoleFromAccountOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisassociateServiceRoleFromAccountOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DisassociateServiceRoleFromAccountOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDisassociatedAt sets the DisassociatedAt field's value.
func (s *DisassociateServiceRoleFromAccountOutput) SetDisassociatedAt(v string) *DisassociateServiceRoleFromAccountOutput {
	s.DisassociatedAt = &v
	return s
}

// ErrorDetail
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ErrorDetail
type ErrorDetail struct {
	_ struct{} `type:"structure"`

	// Detailed Error Code
	DetailedErrorCode *string `type:"string"`

	// Detailed Error Message
	DetailedErrorMessage *string `type:"string"`
}

// String returns the string representation
func (s ErrorDetail) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorDetail) GoString() string {
	return s.String()
}

// SetDetailedErrorCode sets the DetailedErrorCode field's value.
func (s *ErrorDetail) SetDetailedErrorCode(v string) *ErrorDetail {
	s.DetailedErrorCode = &v
	return s
}

// SetDetailedErrorMessage sets the DetailedErrorMessage field's value.
func (s *ErrorDetail) SetDetailedErrorMessage(v string) *ErrorDetail {
	s.DetailedErrorMessage = &v
	return s
}

// Information on function
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/Function
type Function struct {
	_ struct{} `type:"structure"`

	// Arn of the Lambda function.
	FunctionArn *string `type:"string"`

	// Configuration of the function
	FunctionConfiguration *FunctionConfiguration `type:"structure"`

	// Id of the function in this version.
	Id *string `type:"string"`
}

// String returns the string representation
func (s Function) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Function) GoString() string {
	return s.String()
}

// SetFunctionArn sets the FunctionArn field's value.
func (s *Function) SetFunctionArn(v string) *Function {
	s.FunctionArn = &v
	return s
}

// SetFunctionConfiguration sets the FunctionConfiguration field's value.
func (s *Function) SetFunctionConfiguration(v *FunctionConfiguration) *Function {
	s.FunctionConfiguration = v
	return s
}

// SetId sets the Id field's value.
func (s *Function) SetId(v string) *Function {
	s.Id = &v
	return s
}

// Configuration of the function
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/FunctionConfiguration
type FunctionConfiguration struct {
	_ struct{} `type:"structure"`

	// Environment of the function configuration
	Environment *FunctionConfigurationEnvironment `type:"structure"`

	// Execution Arguments
	ExecArgs *string `type:"string"`

	// Executable
	Executable *string `type:"string"`

	// The memory size, in KB, you configured for the function.
	MemorySize *int64 `type:"integer"`

	// Whether the function is pinned or not. Pinned means the function is long-lived
	// and starts when the core starts.
	Pinned *bool `type:"boolean"`

	// The function execution time at which Lambda should terminate the function.
	// This timeout still applies to pinned lambdas for each request.
	Timeout *int64 `type:"integer"`
}

// String returns the string representation
func (s FunctionConfiguration) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s FunctionConfiguration) GoString() string {
	return s.String()
}

// SetEnvironment sets the Environment field's value.
func (s *FunctionConfiguration) SetEnvironment(v *FunctionConfigurationEnvironment) *FunctionConfiguration {
	s.Environment = v
	return s
}

// SetExecArgs sets the ExecArgs field's value.
func (s *FunctionConfiguration) SetExecArgs(v string) *FunctionConfiguration {
	s.ExecArgs = &v
	return s
}

// SetExecutable sets the Executable field's value.
func (s *FunctionConfiguration) SetExecutable(v string) *FunctionConfiguration {
	s.Executable = &v
	return s
}

// SetMemorySize sets the MemorySize field's value.
func (s *FunctionConfiguration) SetMemorySize(v int64) *FunctionConfiguration {
	s.MemorySize = &v
	return s
}

// SetPinned sets the Pinned field's value.
func (s *FunctionConfiguration) SetPinned(v bool) *FunctionConfiguration {
	s.Pinned = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *FunctionConfiguration) SetTimeout(v int64) *FunctionConfiguration {
	s.Timeout = &v
	return s
}

// Environment of the function configuration
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/FunctionConfigurationEnvironment
type FunctionConfigurationEnvironment struct {
	_ struct{} `type:"structure"`

	// Flag to allow lambda access sys filesystem.
	AccessSysfs *bool `type:"boolean"`

	// Policies for the function to access resources.
	ResourceAccessPolicies []ResourceAccessPolicy `type:"list"`

	Variables map[string]string `type:"map"`
}

// String returns the string representation
func (s FunctionConfigurationEnvironment) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s FunctionConfigurationEnvironment) GoString() string {
	return s.String()
}

// SetAccessSysfs sets the AccessSysfs field's value.
func (s *FunctionConfigurationEnvironment) SetAccessSysfs(v bool) *FunctionConfigurationEnvironment {
	s.AccessSysfs = &v
	return s
}

// SetResourceAccessPolicies sets the ResourceAccessPolicies field's value.
func (s *FunctionConfigurationEnvironment) SetResourceAccessPolicies(v []ResourceAccessPolicy) *FunctionConfigurationEnvironment {
	s.ResourceAccessPolicies = v
	return s
}

// SetVariables sets the Variables field's value.
func (s *FunctionConfigurationEnvironment) SetVariables(v map[string]string) *FunctionConfigurationEnvironment {
	s.Variables = v
	return s
}

// Information on the function definition version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/FunctionDefinitionVersion
type FunctionDefinitionVersion struct {
	_ struct{} `type:"structure"`

	// Lambda functions in this function definition version.
	Functions []Function `type:"list"`
}

// String returns the string representation
func (s FunctionDefinitionVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s FunctionDefinitionVersion) GoString() string {
	return s.String()
}

// SetFunctions sets the Functions field's value.
func (s *FunctionDefinitionVersion) SetFunctions(v []Function) *FunctionDefinitionVersion {
	s.Functions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetAssociatedRoleRequest
type GetAssociatedRoleInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetAssociatedRoleInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAssociatedRoleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetAssociatedRoleInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetAssociatedRoleInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *GetAssociatedRoleInput) SetGroupId(v string) *GetAssociatedRoleInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetAssociatedRoleResponse
type GetAssociatedRoleOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Time when the role was associated for the group.
	AssociatedAt *string `type:"string"`

	// Arn of the role that is associated with the group.
	RoleArn *string `type:"string"`
}

// String returns the string representation
func (s GetAssociatedRoleOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAssociatedRoleOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetAssociatedRoleOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetAssociatedAt sets the AssociatedAt field's value.
func (s *GetAssociatedRoleOutput) SetAssociatedAt(v string) *GetAssociatedRoleOutput {
	s.AssociatedAt = &v
	return s
}

// SetRoleArn sets the RoleArn field's value.
func (s *GetAssociatedRoleOutput) SetRoleArn(v string) *GetAssociatedRoleOutput {
	s.RoleArn = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetConnectivityInfoRequest
type GetConnectivityInfoInput struct {
	_ struct{} `type:"structure"`

	// ThingName is a required field
	ThingName *string `location:"uri" locationName:"ThingName" type:"string" required:"true"`
}

// String returns the string representation
func (s GetConnectivityInfoInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetConnectivityInfoInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetConnectivityInfoInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetConnectivityInfoInput"}

	if s.ThingName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ThingName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetThingName sets the ThingName field's value.
func (s *GetConnectivityInfoInput) SetThingName(v string) *GetConnectivityInfoInput {
	s.ThingName = &v
	return s
}

// connectivity info response
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetConnectivityInfoResponse
type GetConnectivityInfoOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Connectivity info list
	ConnectivityInfo []ConnectivityInfo `type:"list"`

	// Response Text
	Message *string `locationName:"message" type:"string"`
}

// String returns the string representation
func (s GetConnectivityInfoOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetConnectivityInfoOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetConnectivityInfoOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetConnectivityInfo sets the ConnectivityInfo field's value.
func (s *GetConnectivityInfoOutput) SetConnectivityInfo(v []ConnectivityInfo) *GetConnectivityInfoOutput {
	s.ConnectivityInfo = v
	return s
}

// SetMessage sets the Message field's value.
func (s *GetConnectivityInfoOutput) SetMessage(v string) *GetConnectivityInfoOutput {
	s.Message = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetCoreDefinitionRequest
type GetCoreDefinitionInput struct {
	_ struct{} `type:"structure"`

	// CoreDefinitionId is a required field
	CoreDefinitionId *string `location:"uri" locationName:"CoreDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetCoreDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetCoreDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetCoreDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetCoreDefinitionInput"}

	if s.CoreDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CoreDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCoreDefinitionId sets the CoreDefinitionId field's value.
func (s *GetCoreDefinitionInput) SetCoreDefinitionId(v string) *GetCoreDefinitionInput {
	s.CoreDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetCoreDefinitionResponse
type GetCoreDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s GetCoreDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetCoreDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetCoreDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetCoreDefinitionOutput) SetArn(v string) *GetCoreDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetCoreDefinitionOutput) SetCreationTimestamp(v string) *GetCoreDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetCoreDefinitionOutput) SetId(v string) *GetCoreDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GetCoreDefinitionOutput) SetLastUpdatedTimestamp(v string) *GetCoreDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GetCoreDefinitionOutput) SetLatestVersion(v string) *GetCoreDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GetCoreDefinitionOutput) SetLatestVersionArn(v string) *GetCoreDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetCoreDefinitionOutput) SetName(v string) *GetCoreDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetCoreDefinitionVersionRequest
type GetCoreDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	// CoreDefinitionId is a required field
	CoreDefinitionId *string `location:"uri" locationName:"CoreDefinitionId" type:"string" required:"true"`

	// CoreDefinitionVersionId is a required field
	CoreDefinitionVersionId *string `location:"uri" locationName:"CoreDefinitionVersionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetCoreDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetCoreDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetCoreDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetCoreDefinitionVersionInput"}

	if s.CoreDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CoreDefinitionId"))
	}

	if s.CoreDefinitionVersionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CoreDefinitionVersionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCoreDefinitionId sets the CoreDefinitionId field's value.
func (s *GetCoreDefinitionVersionInput) SetCoreDefinitionId(v string) *GetCoreDefinitionVersionInput {
	s.CoreDefinitionId = &v
	return s
}

// SetCoreDefinitionVersionId sets the CoreDefinitionVersionId field's value.
func (s *GetCoreDefinitionVersionInput) SetCoreDefinitionVersionId(v string) *GetCoreDefinitionVersionInput {
	s.CoreDefinitionVersionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetCoreDefinitionVersionResponse
type GetCoreDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the core definition version.
	Arn *string `type:"string"`

	// Timestamp of when the core definition version was created.
	CreationTimestamp *string `type:"string"`

	// Information on definition
	Definition *CoreDefinitionVersion `type:"structure"`

	// Id of the core definition the version belongs to.
	Id *string `type:"string"`

	// Version of the core definition version.
	Version *string `type:"string"`
}

// String returns the string representation
func (s GetCoreDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetCoreDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetCoreDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetCoreDefinitionVersionOutput) SetArn(v string) *GetCoreDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetCoreDefinitionVersionOutput) SetCreationTimestamp(v string) *GetCoreDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetDefinition sets the Definition field's value.
func (s *GetCoreDefinitionVersionOutput) SetDefinition(v *CoreDefinitionVersion) *GetCoreDefinitionVersionOutput {
	s.Definition = v
	return s
}

// SetId sets the Id field's value.
func (s *GetCoreDefinitionVersionOutput) SetId(v string) *GetCoreDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *GetCoreDefinitionVersionOutput) SetVersion(v string) *GetCoreDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeploymentStatusRequest
type GetDeploymentStatusInput struct {
	_ struct{} `type:"structure"`

	// DeploymentId is a required field
	DeploymentId *string `location:"uri" locationName:"DeploymentId" type:"string" required:"true"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetDeploymentStatusInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDeploymentStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDeploymentStatusInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetDeploymentStatusInput"}

	if s.DeploymentId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeploymentId"))
	}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeploymentId sets the DeploymentId field's value.
func (s *GetDeploymentStatusInput) SetDeploymentId(v string) *GetDeploymentStatusInput {
	s.DeploymentId = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *GetDeploymentStatusInput) SetGroupId(v string) *GetDeploymentStatusInput {
	s.GroupId = &v
	return s
}

// The response body contains the status of a deployment for a group.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeploymentStatusResponse
type GetDeploymentStatusOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Status of the deployment.
	DeploymentStatus *string `type:"string"`

	// The type of the deployment.
	DeploymentType DeploymentType `type:"string" enum:"true"`

	// The error Details
	ErrorDetails []ErrorDetail `type:"list"`

	// Error Message
	ErrorMessage *string `type:"string"`

	// Last time the deployment status was updated.
	UpdatedAt *string `type:"string"`
}

// String returns the string representation
func (s GetDeploymentStatusOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDeploymentStatusOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetDeploymentStatusOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDeploymentStatus sets the DeploymentStatus field's value.
func (s *GetDeploymentStatusOutput) SetDeploymentStatus(v string) *GetDeploymentStatusOutput {
	s.DeploymentStatus = &v
	return s
}

// SetDeploymentType sets the DeploymentType field's value.
func (s *GetDeploymentStatusOutput) SetDeploymentType(v DeploymentType) *GetDeploymentStatusOutput {
	s.DeploymentType = v
	return s
}

// SetErrorDetails sets the ErrorDetails field's value.
func (s *GetDeploymentStatusOutput) SetErrorDetails(v []ErrorDetail) *GetDeploymentStatusOutput {
	s.ErrorDetails = v
	return s
}

// SetErrorMessage sets the ErrorMessage field's value.
func (s *GetDeploymentStatusOutput) SetErrorMessage(v string) *GetDeploymentStatusOutput {
	s.ErrorMessage = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *GetDeploymentStatusOutput) SetUpdatedAt(v string) *GetDeploymentStatusOutput {
	s.UpdatedAt = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeviceDefinitionRequest
type GetDeviceDefinitionInput struct {
	_ struct{} `type:"structure"`

	// DeviceDefinitionId is a required field
	DeviceDefinitionId *string `location:"uri" locationName:"DeviceDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetDeviceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDeviceDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDeviceDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetDeviceDefinitionInput"}

	if s.DeviceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeviceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceDefinitionId sets the DeviceDefinitionId field's value.
func (s *GetDeviceDefinitionInput) SetDeviceDefinitionId(v string) *GetDeviceDefinitionInput {
	s.DeviceDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeviceDefinitionResponse
type GetDeviceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s GetDeviceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDeviceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetDeviceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetDeviceDefinitionOutput) SetArn(v string) *GetDeviceDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetDeviceDefinitionOutput) SetCreationTimestamp(v string) *GetDeviceDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetDeviceDefinitionOutput) SetId(v string) *GetDeviceDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GetDeviceDefinitionOutput) SetLastUpdatedTimestamp(v string) *GetDeviceDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GetDeviceDefinitionOutput) SetLatestVersion(v string) *GetDeviceDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GetDeviceDefinitionOutput) SetLatestVersionArn(v string) *GetDeviceDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetDeviceDefinitionOutput) SetName(v string) *GetDeviceDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeviceDefinitionVersionRequest
type GetDeviceDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	// DeviceDefinitionId is a required field
	DeviceDefinitionId *string `location:"uri" locationName:"DeviceDefinitionId" type:"string" required:"true"`

	// DeviceDefinitionVersionId is a required field
	DeviceDefinitionVersionId *string `location:"uri" locationName:"DeviceDefinitionVersionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetDeviceDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDeviceDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDeviceDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetDeviceDefinitionVersionInput"}

	if s.DeviceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeviceDefinitionId"))
	}

	if s.DeviceDefinitionVersionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeviceDefinitionVersionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceDefinitionId sets the DeviceDefinitionId field's value.
func (s *GetDeviceDefinitionVersionInput) SetDeviceDefinitionId(v string) *GetDeviceDefinitionVersionInput {
	s.DeviceDefinitionId = &v
	return s
}

// SetDeviceDefinitionVersionId sets the DeviceDefinitionVersionId field's value.
func (s *GetDeviceDefinitionVersionInput) SetDeviceDefinitionVersionId(v string) *GetDeviceDefinitionVersionInput {
	s.DeviceDefinitionVersionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetDeviceDefinitionVersionResponse
type GetDeviceDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the device definition version.
	Arn *string `type:"string"`

	// Timestamp of when the device definition version was created.
	CreationTimestamp *string `type:"string"`

	// Device definition version
	Definition *DeviceDefinitionVersion `type:"structure"`

	// Id of the device definition the version belongs to.
	Id *string `type:"string"`

	// Version of the device definition version.
	Version *string `type:"string"`
}

// String returns the string representation
func (s GetDeviceDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDeviceDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetDeviceDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetDeviceDefinitionVersionOutput) SetArn(v string) *GetDeviceDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetDeviceDefinitionVersionOutput) SetCreationTimestamp(v string) *GetDeviceDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetDefinition sets the Definition field's value.
func (s *GetDeviceDefinitionVersionOutput) SetDefinition(v *DeviceDefinitionVersion) *GetDeviceDefinitionVersionOutput {
	s.Definition = v
	return s
}

// SetId sets the Id field's value.
func (s *GetDeviceDefinitionVersionOutput) SetId(v string) *GetDeviceDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *GetDeviceDefinitionVersionOutput) SetVersion(v string) *GetDeviceDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetFunctionDefinitionRequest
type GetFunctionDefinitionInput struct {
	_ struct{} `type:"structure"`

	// FunctionDefinitionId is a required field
	FunctionDefinitionId *string `location:"uri" locationName:"FunctionDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetFunctionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFunctionDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetFunctionDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetFunctionDefinitionInput"}

	if s.FunctionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("FunctionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionDefinitionId sets the FunctionDefinitionId field's value.
func (s *GetFunctionDefinitionInput) SetFunctionDefinitionId(v string) *GetFunctionDefinitionInput {
	s.FunctionDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetFunctionDefinitionResponse
type GetFunctionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s GetFunctionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFunctionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetFunctionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetFunctionDefinitionOutput) SetArn(v string) *GetFunctionDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetFunctionDefinitionOutput) SetCreationTimestamp(v string) *GetFunctionDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetFunctionDefinitionOutput) SetId(v string) *GetFunctionDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GetFunctionDefinitionOutput) SetLastUpdatedTimestamp(v string) *GetFunctionDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GetFunctionDefinitionOutput) SetLatestVersion(v string) *GetFunctionDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GetFunctionDefinitionOutput) SetLatestVersionArn(v string) *GetFunctionDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetFunctionDefinitionOutput) SetName(v string) *GetFunctionDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetFunctionDefinitionVersionRequest
type GetFunctionDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	// FunctionDefinitionId is a required field
	FunctionDefinitionId *string `location:"uri" locationName:"FunctionDefinitionId" type:"string" required:"true"`

	// FunctionDefinitionVersionId is a required field
	FunctionDefinitionVersionId *string `location:"uri" locationName:"FunctionDefinitionVersionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetFunctionDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFunctionDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetFunctionDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetFunctionDefinitionVersionInput"}

	if s.FunctionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("FunctionDefinitionId"))
	}

	if s.FunctionDefinitionVersionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("FunctionDefinitionVersionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionDefinitionId sets the FunctionDefinitionId field's value.
func (s *GetFunctionDefinitionVersionInput) SetFunctionDefinitionId(v string) *GetFunctionDefinitionVersionInput {
	s.FunctionDefinitionId = &v
	return s
}

// SetFunctionDefinitionVersionId sets the FunctionDefinitionVersionId field's value.
func (s *GetFunctionDefinitionVersionInput) SetFunctionDefinitionVersionId(v string) *GetFunctionDefinitionVersionInput {
	s.FunctionDefinitionVersionId = &v
	return s
}

// Function definition version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetFunctionDefinitionVersionResponse
type GetFunctionDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the function definition version.
	Arn *string `type:"string"`

	// Timestamp when the funtion definition version was created.
	CreationTimestamp *string `type:"string"`

	// Information on the definition.
	Definition *FunctionDefinitionVersion `type:"structure"`

	// Id of the function definition the version belongs to.
	Id *string `type:"string"`

	// Version of the function definition version.
	Version *string `type:"string"`
}

// String returns the string representation
func (s GetFunctionDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFunctionDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetFunctionDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetFunctionDefinitionVersionOutput) SetArn(v string) *GetFunctionDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetFunctionDefinitionVersionOutput) SetCreationTimestamp(v string) *GetFunctionDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetDefinition sets the Definition field's value.
func (s *GetFunctionDefinitionVersionOutput) SetDefinition(v *FunctionDefinitionVersion) *GetFunctionDefinitionVersionOutput {
	s.Definition = v
	return s
}

// SetId sets the Id field's value.
func (s *GetFunctionDefinitionVersionOutput) SetId(v string) *GetFunctionDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *GetFunctionDefinitionVersionOutput) SetVersion(v string) *GetFunctionDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupCertificateAuthorityRequest
type GetGroupCertificateAuthorityInput struct {
	_ struct{} `type:"structure"`

	// CertificateAuthorityId is a required field
	CertificateAuthorityId *string `location:"uri" locationName:"CertificateAuthorityId" type:"string" required:"true"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetGroupCertificateAuthorityInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupCertificateAuthorityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetGroupCertificateAuthorityInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetGroupCertificateAuthorityInput"}

	if s.CertificateAuthorityId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CertificateAuthorityId"))
	}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCertificateAuthorityId sets the CertificateAuthorityId field's value.
func (s *GetGroupCertificateAuthorityInput) SetCertificateAuthorityId(v string) *GetGroupCertificateAuthorityInput {
	s.CertificateAuthorityId = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *GetGroupCertificateAuthorityInput) SetGroupId(v string) *GetGroupCertificateAuthorityInput {
	s.GroupId = &v
	return s
}

// Certificate authority for the group.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupCertificateAuthorityResponse
type GetGroupCertificateAuthorityOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the certificate authority for the group.
	GroupCertificateAuthorityArn *string `type:"string"`

	// Id of the certificate authority for the group.
	GroupCertificateAuthorityId *string `type:"string"`

	// PEM encoded certificate for the group.
	PemEncodedCertificate *string `type:"string"`
}

// String returns the string representation
func (s GetGroupCertificateAuthorityOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupCertificateAuthorityOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetGroupCertificateAuthorityOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetGroupCertificateAuthorityArn sets the GroupCertificateAuthorityArn field's value.
func (s *GetGroupCertificateAuthorityOutput) SetGroupCertificateAuthorityArn(v string) *GetGroupCertificateAuthorityOutput {
	s.GroupCertificateAuthorityArn = &v
	return s
}

// SetGroupCertificateAuthorityId sets the GroupCertificateAuthorityId field's value.
func (s *GetGroupCertificateAuthorityOutput) SetGroupCertificateAuthorityId(v string) *GetGroupCertificateAuthorityOutput {
	s.GroupCertificateAuthorityId = &v
	return s
}

// SetPemEncodedCertificate sets the PemEncodedCertificate field's value.
func (s *GetGroupCertificateAuthorityOutput) SetPemEncodedCertificate(v string) *GetGroupCertificateAuthorityOutput {
	s.PemEncodedCertificate = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupCertificateConfigurationRequest
type GetGroupCertificateConfigurationInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetGroupCertificateConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupCertificateConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetGroupCertificateConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetGroupCertificateConfigurationInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *GetGroupCertificateConfigurationInput) SetGroupId(v string) *GetGroupCertificateConfigurationInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupCertificateConfigurationResponse
type GetGroupCertificateConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	CertificateAuthorityExpiryInMilliseconds *string `type:"string"`

	CertificateExpiryInMilliseconds *string `type:"string"`

	GroupId *string `type:"string"`
}

// String returns the string representation
func (s GetGroupCertificateConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupCertificateConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetGroupCertificateConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetCertificateAuthorityExpiryInMilliseconds sets the CertificateAuthorityExpiryInMilliseconds field's value.
func (s *GetGroupCertificateConfigurationOutput) SetCertificateAuthorityExpiryInMilliseconds(v string) *GetGroupCertificateConfigurationOutput {
	s.CertificateAuthorityExpiryInMilliseconds = &v
	return s
}

// SetCertificateExpiryInMilliseconds sets the CertificateExpiryInMilliseconds field's value.
func (s *GetGroupCertificateConfigurationOutput) SetCertificateExpiryInMilliseconds(v string) *GetGroupCertificateConfigurationOutput {
	s.CertificateExpiryInMilliseconds = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *GetGroupCertificateConfigurationOutput) SetGroupId(v string) *GetGroupCertificateConfigurationOutput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupRequest
type GetGroupInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetGroupInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *GetGroupInput) SetGroupId(v string) *GetGroupInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupResponse
type GetGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s GetGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetGroupOutput) SetArn(v string) *GetGroupOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetGroupOutput) SetCreationTimestamp(v string) *GetGroupOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetGroupOutput) SetId(v string) *GetGroupOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GetGroupOutput) SetLastUpdatedTimestamp(v string) *GetGroupOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GetGroupOutput) SetLatestVersion(v string) *GetGroupOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GetGroupOutput) SetLatestVersionArn(v string) *GetGroupOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetGroupOutput) SetName(v string) *GetGroupOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupVersionRequest
type GetGroupVersionInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`

	// GroupVersionId is a required field
	GroupVersionId *string `location:"uri" locationName:"GroupVersionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetGroupVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetGroupVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetGroupVersionInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if s.GroupVersionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupVersionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *GetGroupVersionInput) SetGroupId(v string) *GetGroupVersionInput {
	s.GroupId = &v
	return s
}

// SetGroupVersionId sets the GroupVersionId field's value.
func (s *GetGroupVersionInput) SetGroupVersionId(v string) *GetGroupVersionInput {
	s.GroupVersionId = &v
	return s
}

// Information on the group version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetGroupVersionResponse
type GetGroupVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the group version.
	Arn *string `type:"string"`

	// Timestamp when the group version was created.
	CreationTimestamp *string `type:"string"`

	// Information on the definition
	Definition *GroupVersion `type:"structure"`

	// Id of the group version.
	Id *string `type:"string"`

	// Unique Id for a version of the Group.
	Version *string `type:"string"`
}

// String returns the string representation
func (s GetGroupVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetGroupVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetGroupVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetGroupVersionOutput) SetArn(v string) *GetGroupVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetGroupVersionOutput) SetCreationTimestamp(v string) *GetGroupVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetDefinition sets the Definition field's value.
func (s *GetGroupVersionOutput) SetDefinition(v *GroupVersion) *GetGroupVersionOutput {
	s.Definition = v
	return s
}

// SetId sets the Id field's value.
func (s *GetGroupVersionOutput) SetId(v string) *GetGroupVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *GetGroupVersionOutput) SetVersion(v string) *GetGroupVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetLoggerDefinitionRequest
type GetLoggerDefinitionInput struct {
	_ struct{} `type:"structure"`

	// LoggerDefinitionId is a required field
	LoggerDefinitionId *string `location:"uri" locationName:"LoggerDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetLoggerDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLoggerDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetLoggerDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetLoggerDefinitionInput"}

	if s.LoggerDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoggerDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoggerDefinitionId sets the LoggerDefinitionId field's value.
func (s *GetLoggerDefinitionInput) SetLoggerDefinitionId(v string) *GetLoggerDefinitionInput {
	s.LoggerDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetLoggerDefinitionResponse
type GetLoggerDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s GetLoggerDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLoggerDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetLoggerDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetLoggerDefinitionOutput) SetArn(v string) *GetLoggerDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetLoggerDefinitionOutput) SetCreationTimestamp(v string) *GetLoggerDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetLoggerDefinitionOutput) SetId(v string) *GetLoggerDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GetLoggerDefinitionOutput) SetLastUpdatedTimestamp(v string) *GetLoggerDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GetLoggerDefinitionOutput) SetLatestVersion(v string) *GetLoggerDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GetLoggerDefinitionOutput) SetLatestVersionArn(v string) *GetLoggerDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetLoggerDefinitionOutput) SetName(v string) *GetLoggerDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetLoggerDefinitionVersionRequest
type GetLoggerDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	// LoggerDefinitionId is a required field
	LoggerDefinitionId *string `location:"uri" locationName:"LoggerDefinitionId" type:"string" required:"true"`

	// LoggerDefinitionVersionId is a required field
	LoggerDefinitionVersionId *string `location:"uri" locationName:"LoggerDefinitionVersionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetLoggerDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLoggerDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetLoggerDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetLoggerDefinitionVersionInput"}

	if s.LoggerDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoggerDefinitionId"))
	}

	if s.LoggerDefinitionVersionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoggerDefinitionVersionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoggerDefinitionId sets the LoggerDefinitionId field's value.
func (s *GetLoggerDefinitionVersionInput) SetLoggerDefinitionId(v string) *GetLoggerDefinitionVersionInput {
	s.LoggerDefinitionId = &v
	return s
}

// SetLoggerDefinitionVersionId sets the LoggerDefinitionVersionId field's value.
func (s *GetLoggerDefinitionVersionInput) SetLoggerDefinitionVersionId(v string) *GetLoggerDefinitionVersionInput {
	s.LoggerDefinitionVersionId = &v
	return s
}

// Information on logger definition version response
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetLoggerDefinitionVersionResponse
type GetLoggerDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the logger definition version.
	Arn *string `type:"string"`

	// Timestamp of when the logger definition version was created.
	CreationTimestamp *string `type:"string"`

	// Information on definition
	Definition *LoggerDefinitionVersion `type:"structure"`

	// Id of the logger definition the version belongs to.
	Id *string `type:"string"`

	// Version of the logger definition version.
	Version *string `type:"string"`
}

// String returns the string representation
func (s GetLoggerDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLoggerDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetLoggerDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetLoggerDefinitionVersionOutput) SetArn(v string) *GetLoggerDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetLoggerDefinitionVersionOutput) SetCreationTimestamp(v string) *GetLoggerDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetDefinition sets the Definition field's value.
func (s *GetLoggerDefinitionVersionOutput) SetDefinition(v *LoggerDefinitionVersion) *GetLoggerDefinitionVersionOutput {
	s.Definition = v
	return s
}

// SetId sets the Id field's value.
func (s *GetLoggerDefinitionVersionOutput) SetId(v string) *GetLoggerDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *GetLoggerDefinitionVersionOutput) SetVersion(v string) *GetLoggerDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetResourceDefinitionRequest
type GetResourceDefinitionInput struct {
	_ struct{} `type:"structure"`

	// ResourceDefinitionId is a required field
	ResourceDefinitionId *string `location:"uri" locationName:"ResourceDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetResourceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetResourceDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetResourceDefinitionInput"}

	if s.ResourceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceDefinitionId sets the ResourceDefinitionId field's value.
func (s *GetResourceDefinitionInput) SetResourceDefinitionId(v string) *GetResourceDefinitionInput {
	s.ResourceDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetResourceDefinitionResponse
type GetResourceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s GetResourceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetResourceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetResourceDefinitionOutput) SetArn(v string) *GetResourceDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetResourceDefinitionOutput) SetCreationTimestamp(v string) *GetResourceDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetResourceDefinitionOutput) SetId(v string) *GetResourceDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GetResourceDefinitionOutput) SetLastUpdatedTimestamp(v string) *GetResourceDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GetResourceDefinitionOutput) SetLatestVersion(v string) *GetResourceDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GetResourceDefinitionOutput) SetLatestVersionArn(v string) *GetResourceDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetResourceDefinitionOutput) SetName(v string) *GetResourceDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetResourceDefinitionVersionRequest
type GetResourceDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	// ResourceDefinitionId is a required field
	ResourceDefinitionId *string `location:"uri" locationName:"ResourceDefinitionId" type:"string" required:"true"`

	// ResourceDefinitionVersionId is a required field
	ResourceDefinitionVersionId *string `location:"uri" locationName:"ResourceDefinitionVersionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetResourceDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetResourceDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetResourceDefinitionVersionInput"}

	if s.ResourceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceDefinitionId"))
	}

	if s.ResourceDefinitionVersionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceDefinitionVersionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetResourceDefinitionId sets the ResourceDefinitionId field's value.
func (s *GetResourceDefinitionVersionInput) SetResourceDefinitionId(v string) *GetResourceDefinitionVersionInput {
	s.ResourceDefinitionId = &v
	return s
}

// SetResourceDefinitionVersionId sets the ResourceDefinitionVersionId field's value.
func (s *GetResourceDefinitionVersionInput) SetResourceDefinitionVersionId(v string) *GetResourceDefinitionVersionInput {
	s.ResourceDefinitionVersionId = &v
	return s
}

// Information on resource definition version response
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetResourceDefinitionVersionResponse
type GetResourceDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the resource definition version.
	Arn *string `type:"string"`

	// Timestamp of when the resource definition version was created.
	CreationTimestamp *string `type:"string"`

	// Information on definition.
	Definition *ResourceDefinitionVersion `type:"structure"`

	// Id of the resource definition the version belongs to.
	Id *string `type:"string"`

	// Version of the resource definition version.
	Version *string `type:"string"`
}

// String returns the string representation
func (s GetResourceDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetResourceDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetResourceDefinitionVersionOutput) SetArn(v string) *GetResourceDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetResourceDefinitionVersionOutput) SetCreationTimestamp(v string) *GetResourceDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetDefinition sets the Definition field's value.
func (s *GetResourceDefinitionVersionOutput) SetDefinition(v *ResourceDefinitionVersion) *GetResourceDefinitionVersionOutput {
	s.Definition = v
	return s
}

// SetId sets the Id field's value.
func (s *GetResourceDefinitionVersionOutput) SetId(v string) *GetResourceDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *GetResourceDefinitionVersionOutput) SetVersion(v string) *GetResourceDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetServiceRoleForAccountRequest
type GetServiceRoleForAccountInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s GetServiceRoleForAccountInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceRoleForAccountInput) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetServiceRoleForAccountResponse
type GetServiceRoleForAccountOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Time when the service role was associated to the account.
	AssociatedAt *string `type:"string"`

	// Role arn which is associated to the account.
	RoleArn *string `type:"string"`
}

// String returns the string representation
func (s GetServiceRoleForAccountOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceRoleForAccountOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetServiceRoleForAccountOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetAssociatedAt sets the AssociatedAt field's value.
func (s *GetServiceRoleForAccountOutput) SetAssociatedAt(v string) *GetServiceRoleForAccountOutput {
	s.AssociatedAt = &v
	return s
}

// SetRoleArn sets the RoleArn field's value.
func (s *GetServiceRoleForAccountOutput) SetRoleArn(v string) *GetServiceRoleForAccountOutput {
	s.RoleArn = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetSubscriptionDefinitionRequest
type GetSubscriptionDefinitionInput struct {
	_ struct{} `type:"structure"`

	// SubscriptionDefinitionId is a required field
	SubscriptionDefinitionId *string `location:"uri" locationName:"SubscriptionDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetSubscriptionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSubscriptionDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetSubscriptionDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetSubscriptionDefinitionInput"}

	if s.SubscriptionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("SubscriptionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSubscriptionDefinitionId sets the SubscriptionDefinitionId field's value.
func (s *GetSubscriptionDefinitionInput) SetSubscriptionDefinitionId(v string) *GetSubscriptionDefinitionInput {
	s.SubscriptionDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetSubscriptionDefinitionResponse
type GetSubscriptionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Arn *string `type:"string"`

	CreationTimestamp *string `type:"string"`

	Id *string `type:"string"`

	LastUpdatedTimestamp *string `type:"string"`

	LatestVersion *string `type:"string"`

	LatestVersionArn *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s GetSubscriptionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSubscriptionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetSubscriptionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetSubscriptionDefinitionOutput) SetArn(v string) *GetSubscriptionDefinitionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetSubscriptionDefinitionOutput) SetCreationTimestamp(v string) *GetSubscriptionDefinitionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetSubscriptionDefinitionOutput) SetId(v string) *GetSubscriptionDefinitionOutput {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GetSubscriptionDefinitionOutput) SetLastUpdatedTimestamp(v string) *GetSubscriptionDefinitionOutput {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GetSubscriptionDefinitionOutput) SetLatestVersion(v string) *GetSubscriptionDefinitionOutput {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GetSubscriptionDefinitionOutput) SetLatestVersionArn(v string) *GetSubscriptionDefinitionOutput {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetSubscriptionDefinitionOutput) SetName(v string) *GetSubscriptionDefinitionOutput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetSubscriptionDefinitionVersionRequest
type GetSubscriptionDefinitionVersionInput struct {
	_ struct{} `type:"structure"`

	// SubscriptionDefinitionId is a required field
	SubscriptionDefinitionId *string `location:"uri" locationName:"SubscriptionDefinitionId" type:"string" required:"true"`

	// SubscriptionDefinitionVersionId is a required field
	SubscriptionDefinitionVersionId *string `location:"uri" locationName:"SubscriptionDefinitionVersionId" type:"string" required:"true"`
}

// String returns the string representation
func (s GetSubscriptionDefinitionVersionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSubscriptionDefinitionVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetSubscriptionDefinitionVersionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetSubscriptionDefinitionVersionInput"}

	if s.SubscriptionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("SubscriptionDefinitionId"))
	}

	if s.SubscriptionDefinitionVersionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("SubscriptionDefinitionVersionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSubscriptionDefinitionId sets the SubscriptionDefinitionId field's value.
func (s *GetSubscriptionDefinitionVersionInput) SetSubscriptionDefinitionId(v string) *GetSubscriptionDefinitionVersionInput {
	s.SubscriptionDefinitionId = &v
	return s
}

// SetSubscriptionDefinitionVersionId sets the SubscriptionDefinitionVersionId field's value.
func (s *GetSubscriptionDefinitionVersionInput) SetSubscriptionDefinitionVersionId(v string) *GetSubscriptionDefinitionVersionInput {
	s.SubscriptionDefinitionVersionId = &v
	return s
}

// Information on the Subscription Definition Version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GetSubscriptionDefinitionVersionResponse
type GetSubscriptionDefinitionVersionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Arn of the subscription definition version.
	Arn *string `type:"string"`

	// Timestamp of when the subscription definition version was created.
	CreationTimestamp *string `type:"string"`

	// Information on the definition
	Definition *SubscriptionDefinitionVersion `type:"structure"`

	// Id of the subscription definition the version belongs to.
	Id *string `type:"string"`

	// Version of the subscription definition version.
	Version *string `type:"string"`
}

// String returns the string representation
func (s GetSubscriptionDefinitionVersionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSubscriptionDefinitionVersionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetSubscriptionDefinitionVersionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetArn sets the Arn field's value.
func (s *GetSubscriptionDefinitionVersionOutput) SetArn(v string) *GetSubscriptionDefinitionVersionOutput {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GetSubscriptionDefinitionVersionOutput) SetCreationTimestamp(v string) *GetSubscriptionDefinitionVersionOutput {
	s.CreationTimestamp = &v
	return s
}

// SetDefinition sets the Definition field's value.
func (s *GetSubscriptionDefinitionVersionOutput) SetDefinition(v *SubscriptionDefinitionVersion) *GetSubscriptionDefinitionVersionOutput {
	s.Definition = v
	return s
}

// SetId sets the Id field's value.
func (s *GetSubscriptionDefinitionVersionOutput) SetId(v string) *GetSubscriptionDefinitionVersionOutput {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *GetSubscriptionDefinitionVersionOutput) SetVersion(v string) *GetSubscriptionDefinitionVersionOutput {
	s.Version = &v
	return s
}

// Information on group certificate authority properties
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GroupCertificateAuthorityProperties
type GroupCertificateAuthorityProperties struct {
	_ struct{} `type:"structure"`

	// Arn of the certificate authority for the group.
	GroupCertificateAuthorityArn *string `type:"string"`

	// Id of the certificate authority for the group.
	GroupCertificateAuthorityId *string `type:"string"`
}

// String returns the string representation
func (s GroupCertificateAuthorityProperties) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GroupCertificateAuthorityProperties) GoString() string {
	return s.String()
}

// SetGroupCertificateAuthorityArn sets the GroupCertificateAuthorityArn field's value.
func (s *GroupCertificateAuthorityProperties) SetGroupCertificateAuthorityArn(v string) *GroupCertificateAuthorityProperties {
	s.GroupCertificateAuthorityArn = &v
	return s
}

// SetGroupCertificateAuthorityId sets the GroupCertificateAuthorityId field's value.
func (s *GroupCertificateAuthorityProperties) SetGroupCertificateAuthorityId(v string) *GroupCertificateAuthorityProperties {
	s.GroupCertificateAuthorityId = &v
	return s
}

// Information on the group
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GroupInformation
type GroupInformation struct {
	_ struct{} `type:"structure"`

	// Arn of a group.
	Arn *string `type:"string"`

	// Timestamp of when the group was created.
	CreationTimestamp *string `type:"string"`

	// Id of a group.
	Id *string `type:"string"`

	// Last updated timestamp of the group.
	LastUpdatedTimestamp *string `type:"string"`

	// Last version of the group.
	LatestVersion *string `type:"string"`

	// Latest version arn of the group.
	LatestVersionArn *string `type:"string"`

	// Name of a group.
	Name *string `type:"string"`
}

// String returns the string representation
func (s GroupInformation) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GroupInformation) GoString() string {
	return s.String()
}

// SetArn sets the Arn field's value.
func (s *GroupInformation) SetArn(v string) *GroupInformation {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *GroupInformation) SetCreationTimestamp(v string) *GroupInformation {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *GroupInformation) SetId(v string) *GroupInformation {
	s.Id = &v
	return s
}

// SetLastUpdatedTimestamp sets the LastUpdatedTimestamp field's value.
func (s *GroupInformation) SetLastUpdatedTimestamp(v string) *GroupInformation {
	s.LastUpdatedTimestamp = &v
	return s
}

// SetLatestVersion sets the LatestVersion field's value.
func (s *GroupInformation) SetLatestVersion(v string) *GroupInformation {
	s.LatestVersion = &v
	return s
}

// SetLatestVersionArn sets the LatestVersionArn field's value.
func (s *GroupInformation) SetLatestVersionArn(v string) *GroupInformation {
	s.LatestVersionArn = &v
	return s
}

// SetName sets the Name field's value.
func (s *GroupInformation) SetName(v string) *GroupInformation {
	s.Name = &v
	return s
}

// Group owner related settings for local resources.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GroupOwnerSetting
type GroupOwnerSetting struct {
	_ struct{} `type:"structure"`

	// Eanble the auto added group owner.
	AutoAddGroupOwner *bool `type:"boolean"`

	// Name of the group owner.
	GroupOwner *string `type:"string"`
}

// String returns the string representation
func (s GroupOwnerSetting) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GroupOwnerSetting) GoString() string {
	return s.String()
}

// SetAutoAddGroupOwner sets the AutoAddGroupOwner field's value.
func (s *GroupOwnerSetting) SetAutoAddGroupOwner(v bool) *GroupOwnerSetting {
	s.AutoAddGroupOwner = &v
	return s
}

// SetGroupOwner sets the GroupOwner field's value.
func (s *GroupOwnerSetting) SetGroupOwner(v string) *GroupOwnerSetting {
	s.GroupOwner = &v
	return s
}

// Information on group version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/GroupVersion
type GroupVersion struct {
	_ struct{} `type:"structure"`

	// Core definition version arn for this group.
	CoreDefinitionVersionArn *string `type:"string"`

	// Device definition version arn for this group.
	DeviceDefinitionVersionArn *string `type:"string"`

	// Function definition version arn for this group.
	FunctionDefinitionVersionArn *string `type:"string"`

	// Logger definition version arn for this group.
	LoggerDefinitionVersionArn *string `type:"string"`

	// Resource definition version arn for this group.
	ResourceDefinitionVersionArn *string `type:"string"`

	// Subscription definition version arn for this group.
	SubscriptionDefinitionVersionArn *string `type:"string"`
}

// String returns the string representation
func (s GroupVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GroupVersion) GoString() string {
	return s.String()
}

// SetCoreDefinitionVersionArn sets the CoreDefinitionVersionArn field's value.
func (s *GroupVersion) SetCoreDefinitionVersionArn(v string) *GroupVersion {
	s.CoreDefinitionVersionArn = &v
	return s
}

// SetDeviceDefinitionVersionArn sets the DeviceDefinitionVersionArn field's value.
func (s *GroupVersion) SetDeviceDefinitionVersionArn(v string) *GroupVersion {
	s.DeviceDefinitionVersionArn = &v
	return s
}

// SetFunctionDefinitionVersionArn sets the FunctionDefinitionVersionArn field's value.
func (s *GroupVersion) SetFunctionDefinitionVersionArn(v string) *GroupVersion {
	s.FunctionDefinitionVersionArn = &v
	return s
}

// SetLoggerDefinitionVersionArn sets the LoggerDefinitionVersionArn field's value.
func (s *GroupVersion) SetLoggerDefinitionVersionArn(v string) *GroupVersion {
	s.LoggerDefinitionVersionArn = &v
	return s
}

// SetResourceDefinitionVersionArn sets the ResourceDefinitionVersionArn field's value.
func (s *GroupVersion) SetResourceDefinitionVersionArn(v string) *GroupVersion {
	s.ResourceDefinitionVersionArn = &v
	return s
}

// SetSubscriptionDefinitionVersionArn sets the SubscriptionDefinitionVersionArn field's value.
func (s *GroupVersion) SetSubscriptionDefinitionVersionArn(v string) *GroupVersion {
	s.SubscriptionDefinitionVersionArn = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListCoreDefinitionVersionsRequest
type ListCoreDefinitionVersionsInput struct {
	_ struct{} `type:"structure"`

	// CoreDefinitionId is a required field
	CoreDefinitionId *string `location:"uri" locationName:"CoreDefinitionId" type:"string" required:"true"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListCoreDefinitionVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCoreDefinitionVersionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListCoreDefinitionVersionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListCoreDefinitionVersionsInput"}

	if s.CoreDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CoreDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCoreDefinitionId sets the CoreDefinitionId field's value.
func (s *ListCoreDefinitionVersionsInput) SetCoreDefinitionId(v string) *ListCoreDefinitionVersionsInput {
	s.CoreDefinitionId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListCoreDefinitionVersionsInput) SetMaxResults(v string) *ListCoreDefinitionVersionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListCoreDefinitionVersionsInput) SetNextToken(v string) *ListCoreDefinitionVersionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListCoreDefinitionVersionsResponse
type ListCoreDefinitionVersionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NextToken *string `type:"string"`

	Versions []VersionInformation `type:"list"`
}

// String returns the string representation
func (s ListCoreDefinitionVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCoreDefinitionVersionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListCoreDefinitionVersionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetNextToken sets the NextToken field's value.
func (s *ListCoreDefinitionVersionsOutput) SetNextToken(v string) *ListCoreDefinitionVersionsOutput {
	s.NextToken = &v
	return s
}

// SetVersions sets the Versions field's value.
func (s *ListCoreDefinitionVersionsOutput) SetVersions(v []VersionInformation) *ListCoreDefinitionVersionsOutput {
	s.Versions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListCoreDefinitionsRequest
type ListCoreDefinitionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListCoreDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCoreDefinitionsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListCoreDefinitionsInput) SetMaxResults(v string) *ListCoreDefinitionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListCoreDefinitionsInput) SetNextToken(v string) *ListCoreDefinitionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListCoreDefinitionsResponse
type ListCoreDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Definitions []DefinitionInformation `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListCoreDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCoreDefinitionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListCoreDefinitionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDefinitions sets the Definitions field's value.
func (s *ListCoreDefinitionsOutput) SetDefinitions(v []DefinitionInformation) *ListCoreDefinitionsOutput {
	s.Definitions = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListCoreDefinitionsOutput) SetNextToken(v string) *ListCoreDefinitionsOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeploymentsRequest
type ListDeploymentsInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListDeploymentsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDeploymentsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListDeploymentsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListDeploymentsInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *ListDeploymentsInput) SetGroupId(v string) *ListDeploymentsInput {
	s.GroupId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListDeploymentsInput) SetMaxResults(v string) *ListDeploymentsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListDeploymentsInput) SetNextToken(v string) *ListDeploymentsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeploymentsResponse
type ListDeploymentsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// List of deployments for the requested groups
	Deployments []Deployment `type:"list"`

	// The token for the next set of results, or ''null'' if there are no additional
	// results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListDeploymentsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDeploymentsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListDeploymentsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDeployments sets the Deployments field's value.
func (s *ListDeploymentsOutput) SetDeployments(v []Deployment) *ListDeploymentsOutput {
	s.Deployments = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListDeploymentsOutput) SetNextToken(v string) *ListDeploymentsOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeviceDefinitionVersionsRequest
type ListDeviceDefinitionVersionsInput struct {
	_ struct{} `type:"structure"`

	// DeviceDefinitionId is a required field
	DeviceDefinitionId *string `location:"uri" locationName:"DeviceDefinitionId" type:"string" required:"true"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListDeviceDefinitionVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDeviceDefinitionVersionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListDeviceDefinitionVersionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListDeviceDefinitionVersionsInput"}

	if s.DeviceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeviceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceDefinitionId sets the DeviceDefinitionId field's value.
func (s *ListDeviceDefinitionVersionsInput) SetDeviceDefinitionId(v string) *ListDeviceDefinitionVersionsInput {
	s.DeviceDefinitionId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListDeviceDefinitionVersionsInput) SetMaxResults(v string) *ListDeviceDefinitionVersionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListDeviceDefinitionVersionsInput) SetNextToken(v string) *ListDeviceDefinitionVersionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeviceDefinitionVersionsResponse
type ListDeviceDefinitionVersionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NextToken *string `type:"string"`

	Versions []VersionInformation `type:"list"`
}

// String returns the string representation
func (s ListDeviceDefinitionVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDeviceDefinitionVersionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListDeviceDefinitionVersionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetNextToken sets the NextToken field's value.
func (s *ListDeviceDefinitionVersionsOutput) SetNextToken(v string) *ListDeviceDefinitionVersionsOutput {
	s.NextToken = &v
	return s
}

// SetVersions sets the Versions field's value.
func (s *ListDeviceDefinitionVersionsOutput) SetVersions(v []VersionInformation) *ListDeviceDefinitionVersionsOutput {
	s.Versions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeviceDefinitionsRequest
type ListDeviceDefinitionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListDeviceDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDeviceDefinitionsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListDeviceDefinitionsInput) SetMaxResults(v string) *ListDeviceDefinitionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListDeviceDefinitionsInput) SetNextToken(v string) *ListDeviceDefinitionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListDeviceDefinitionsResponse
type ListDeviceDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Definitions []DefinitionInformation `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListDeviceDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDeviceDefinitionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListDeviceDefinitionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDefinitions sets the Definitions field's value.
func (s *ListDeviceDefinitionsOutput) SetDefinitions(v []DefinitionInformation) *ListDeviceDefinitionsOutput {
	s.Definitions = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListDeviceDefinitionsOutput) SetNextToken(v string) *ListDeviceDefinitionsOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListFunctionDefinitionVersionsRequest
type ListFunctionDefinitionVersionsInput struct {
	_ struct{} `type:"structure"`

	// FunctionDefinitionId is a required field
	FunctionDefinitionId *string `location:"uri" locationName:"FunctionDefinitionId" type:"string" required:"true"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListFunctionDefinitionVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFunctionDefinitionVersionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListFunctionDefinitionVersionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListFunctionDefinitionVersionsInput"}

	if s.FunctionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("FunctionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionDefinitionId sets the FunctionDefinitionId field's value.
func (s *ListFunctionDefinitionVersionsInput) SetFunctionDefinitionId(v string) *ListFunctionDefinitionVersionsInput {
	s.FunctionDefinitionId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListFunctionDefinitionVersionsInput) SetMaxResults(v string) *ListFunctionDefinitionVersionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListFunctionDefinitionVersionsInput) SetNextToken(v string) *ListFunctionDefinitionVersionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListFunctionDefinitionVersionsResponse
type ListFunctionDefinitionVersionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NextToken *string `type:"string"`

	Versions []VersionInformation `type:"list"`
}

// String returns the string representation
func (s ListFunctionDefinitionVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFunctionDefinitionVersionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListFunctionDefinitionVersionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetNextToken sets the NextToken field's value.
func (s *ListFunctionDefinitionVersionsOutput) SetNextToken(v string) *ListFunctionDefinitionVersionsOutput {
	s.NextToken = &v
	return s
}

// SetVersions sets the Versions field's value.
func (s *ListFunctionDefinitionVersionsOutput) SetVersions(v []VersionInformation) *ListFunctionDefinitionVersionsOutput {
	s.Versions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListFunctionDefinitionsRequest
type ListFunctionDefinitionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListFunctionDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFunctionDefinitionsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListFunctionDefinitionsInput) SetMaxResults(v string) *ListFunctionDefinitionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListFunctionDefinitionsInput) SetNextToken(v string) *ListFunctionDefinitionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListFunctionDefinitionsResponse
type ListFunctionDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Definitions []DefinitionInformation `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListFunctionDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFunctionDefinitionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListFunctionDefinitionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDefinitions sets the Definitions field's value.
func (s *ListFunctionDefinitionsOutput) SetDefinitions(v []DefinitionInformation) *ListFunctionDefinitionsOutput {
	s.Definitions = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListFunctionDefinitionsOutput) SetNextToken(v string) *ListFunctionDefinitionsOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupCertificateAuthoritiesRequest
type ListGroupCertificateAuthoritiesInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s ListGroupCertificateAuthoritiesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupCertificateAuthoritiesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListGroupCertificateAuthoritiesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListGroupCertificateAuthoritiesInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *ListGroupCertificateAuthoritiesInput) SetGroupId(v string) *ListGroupCertificateAuthoritiesInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupCertificateAuthoritiesResponse
type ListGroupCertificateAuthoritiesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// List of certificate authorities associated with the group.
	GroupCertificateAuthorities []GroupCertificateAuthorityProperties `type:"list"`
}

// String returns the string representation
func (s ListGroupCertificateAuthoritiesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupCertificateAuthoritiesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListGroupCertificateAuthoritiesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetGroupCertificateAuthorities sets the GroupCertificateAuthorities field's value.
func (s *ListGroupCertificateAuthoritiesOutput) SetGroupCertificateAuthorities(v []GroupCertificateAuthorityProperties) *ListGroupCertificateAuthoritiesOutput {
	s.GroupCertificateAuthorities = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupVersionsRequest
type ListGroupVersionsInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListGroupVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupVersionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListGroupVersionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListGroupVersionsInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *ListGroupVersionsInput) SetGroupId(v string) *ListGroupVersionsInput {
	s.GroupId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListGroupVersionsInput) SetMaxResults(v string) *ListGroupVersionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListGroupVersionsInput) SetNextToken(v string) *ListGroupVersionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupVersionsResponse
type ListGroupVersionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NextToken *string `type:"string"`

	Versions []VersionInformation `type:"list"`
}

// String returns the string representation
func (s ListGroupVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupVersionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListGroupVersionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetNextToken sets the NextToken field's value.
func (s *ListGroupVersionsOutput) SetNextToken(v string) *ListGroupVersionsOutput {
	s.NextToken = &v
	return s
}

// SetVersions sets the Versions field's value.
func (s *ListGroupVersionsOutput) SetVersions(v []VersionInformation) *ListGroupVersionsOutput {
	s.Versions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupsRequest
type ListGroupsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListGroupsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListGroupsInput) SetMaxResults(v string) *ListGroupsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListGroupsInput) SetNextToken(v string) *ListGroupsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListGroupsResponse
type ListGroupsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Groups
	Groups []GroupInformation `type:"list"`

	// The token for the next set of results, or ''null'' if there are no additional
	// results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListGroupsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListGroupsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetGroups sets the Groups field's value.
func (s *ListGroupsOutput) SetGroups(v []GroupInformation) *ListGroupsOutput {
	s.Groups = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListGroupsOutput) SetNextToken(v string) *ListGroupsOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListLoggerDefinitionVersionsRequest
type ListLoggerDefinitionVersionsInput struct {
	_ struct{} `type:"structure"`

	// LoggerDefinitionId is a required field
	LoggerDefinitionId *string `location:"uri" locationName:"LoggerDefinitionId" type:"string" required:"true"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListLoggerDefinitionVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLoggerDefinitionVersionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListLoggerDefinitionVersionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListLoggerDefinitionVersionsInput"}

	if s.LoggerDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoggerDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoggerDefinitionId sets the LoggerDefinitionId field's value.
func (s *ListLoggerDefinitionVersionsInput) SetLoggerDefinitionId(v string) *ListLoggerDefinitionVersionsInput {
	s.LoggerDefinitionId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListLoggerDefinitionVersionsInput) SetMaxResults(v string) *ListLoggerDefinitionVersionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListLoggerDefinitionVersionsInput) SetNextToken(v string) *ListLoggerDefinitionVersionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListLoggerDefinitionVersionsResponse
type ListLoggerDefinitionVersionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NextToken *string `type:"string"`

	Versions []VersionInformation `type:"list"`
}

// String returns the string representation
func (s ListLoggerDefinitionVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLoggerDefinitionVersionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListLoggerDefinitionVersionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetNextToken sets the NextToken field's value.
func (s *ListLoggerDefinitionVersionsOutput) SetNextToken(v string) *ListLoggerDefinitionVersionsOutput {
	s.NextToken = &v
	return s
}

// SetVersions sets the Versions field's value.
func (s *ListLoggerDefinitionVersionsOutput) SetVersions(v []VersionInformation) *ListLoggerDefinitionVersionsOutput {
	s.Versions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListLoggerDefinitionsRequest
type ListLoggerDefinitionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListLoggerDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLoggerDefinitionsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListLoggerDefinitionsInput) SetMaxResults(v string) *ListLoggerDefinitionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListLoggerDefinitionsInput) SetNextToken(v string) *ListLoggerDefinitionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListLoggerDefinitionsResponse
type ListLoggerDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Definitions []DefinitionInformation `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListLoggerDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLoggerDefinitionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListLoggerDefinitionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDefinitions sets the Definitions field's value.
func (s *ListLoggerDefinitionsOutput) SetDefinitions(v []DefinitionInformation) *ListLoggerDefinitionsOutput {
	s.Definitions = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListLoggerDefinitionsOutput) SetNextToken(v string) *ListLoggerDefinitionsOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListResourceDefinitionVersionsRequest
type ListResourceDefinitionVersionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`

	// ResourceDefinitionId is a required field
	ResourceDefinitionId *string `location:"uri" locationName:"ResourceDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s ListResourceDefinitionVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListResourceDefinitionVersionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListResourceDefinitionVersionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListResourceDefinitionVersionsInput"}

	if s.ResourceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListResourceDefinitionVersionsInput) SetMaxResults(v string) *ListResourceDefinitionVersionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListResourceDefinitionVersionsInput) SetNextToken(v string) *ListResourceDefinitionVersionsInput {
	s.NextToken = &v
	return s
}

// SetResourceDefinitionId sets the ResourceDefinitionId field's value.
func (s *ListResourceDefinitionVersionsInput) SetResourceDefinitionId(v string) *ListResourceDefinitionVersionsInput {
	s.ResourceDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListResourceDefinitionVersionsResponse
type ListResourceDefinitionVersionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NextToken *string `type:"string"`

	Versions []VersionInformation `type:"list"`
}

// String returns the string representation
func (s ListResourceDefinitionVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListResourceDefinitionVersionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListResourceDefinitionVersionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetNextToken sets the NextToken field's value.
func (s *ListResourceDefinitionVersionsOutput) SetNextToken(v string) *ListResourceDefinitionVersionsOutput {
	s.NextToken = &v
	return s
}

// SetVersions sets the Versions field's value.
func (s *ListResourceDefinitionVersionsOutput) SetVersions(v []VersionInformation) *ListResourceDefinitionVersionsOutput {
	s.Versions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListResourceDefinitionsRequest
type ListResourceDefinitionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListResourceDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListResourceDefinitionsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListResourceDefinitionsInput) SetMaxResults(v string) *ListResourceDefinitionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListResourceDefinitionsInput) SetNextToken(v string) *ListResourceDefinitionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListResourceDefinitionsResponse
type ListResourceDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Definitions []DefinitionInformation `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListResourceDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListResourceDefinitionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListResourceDefinitionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDefinitions sets the Definitions field's value.
func (s *ListResourceDefinitionsOutput) SetDefinitions(v []DefinitionInformation) *ListResourceDefinitionsOutput {
	s.Definitions = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListResourceDefinitionsOutput) SetNextToken(v string) *ListResourceDefinitionsOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListSubscriptionDefinitionVersionsRequest
type ListSubscriptionDefinitionVersionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`

	// SubscriptionDefinitionId is a required field
	SubscriptionDefinitionId *string `location:"uri" locationName:"SubscriptionDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s ListSubscriptionDefinitionVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSubscriptionDefinitionVersionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListSubscriptionDefinitionVersionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListSubscriptionDefinitionVersionsInput"}

	if s.SubscriptionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("SubscriptionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListSubscriptionDefinitionVersionsInput) SetMaxResults(v string) *ListSubscriptionDefinitionVersionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListSubscriptionDefinitionVersionsInput) SetNextToken(v string) *ListSubscriptionDefinitionVersionsInput {
	s.NextToken = &v
	return s
}

// SetSubscriptionDefinitionId sets the SubscriptionDefinitionId field's value.
func (s *ListSubscriptionDefinitionVersionsInput) SetSubscriptionDefinitionId(v string) *ListSubscriptionDefinitionVersionsInput {
	s.SubscriptionDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListSubscriptionDefinitionVersionsResponse
type ListSubscriptionDefinitionVersionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NextToken *string `type:"string"`

	Versions []VersionInformation `type:"list"`
}

// String returns the string representation
func (s ListSubscriptionDefinitionVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSubscriptionDefinitionVersionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListSubscriptionDefinitionVersionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetNextToken sets the NextToken field's value.
func (s *ListSubscriptionDefinitionVersionsOutput) SetNextToken(v string) *ListSubscriptionDefinitionVersionsOutput {
	s.NextToken = &v
	return s
}

// SetVersions sets the Versions field's value.
func (s *ListSubscriptionDefinitionVersionsOutput) SetVersions(v []VersionInformation) *ListSubscriptionDefinitionVersionsOutput {
	s.Versions = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListSubscriptionDefinitionsRequest
type ListSubscriptionDefinitionsInput struct {
	_ struct{} `type:"structure"`

	MaxResults *string `location:"querystring" locationName:"MaxResults" type:"string"`

	NextToken *string `location:"querystring" locationName:"NextToken" type:"string"`
}

// String returns the string representation
func (s ListSubscriptionDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSubscriptionDefinitionsInput) GoString() string {
	return s.String()
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListSubscriptionDefinitionsInput) SetMaxResults(v string) *ListSubscriptionDefinitionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListSubscriptionDefinitionsInput) SetNextToken(v string) *ListSubscriptionDefinitionsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ListSubscriptionDefinitionsResponse
type ListSubscriptionDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Definitions []DefinitionInformation `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListSubscriptionDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSubscriptionDefinitionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListSubscriptionDefinitionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDefinitions sets the Definitions field's value.
func (s *ListSubscriptionDefinitionsOutput) SetDefinitions(v []DefinitionInformation) *ListSubscriptionDefinitionsOutput {
	s.Definitions = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListSubscriptionDefinitionsOutput) SetNextToken(v string) *ListSubscriptionDefinitionsOutput {
	s.NextToken = &v
	return s
}

// Attributes that define the Local Device Resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/LocalDeviceResourceData
type LocalDeviceResourceData struct {
	_ struct{} `type:"structure"`

	// Group owner related settings for local resources.
	GroupOwnerSetting *GroupOwnerSetting `type:"structure"`

	// Local source path of the resource.
	SourcePath *string `type:"string"`
}

// String returns the string representation
func (s LocalDeviceResourceData) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LocalDeviceResourceData) GoString() string {
	return s.String()
}

// SetGroupOwnerSetting sets the GroupOwnerSetting field's value.
func (s *LocalDeviceResourceData) SetGroupOwnerSetting(v *GroupOwnerSetting) *LocalDeviceResourceData {
	s.GroupOwnerSetting = v
	return s
}

// SetSourcePath sets the SourcePath field's value.
func (s *LocalDeviceResourceData) SetSourcePath(v string) *LocalDeviceResourceData {
	s.SourcePath = &v
	return s
}

// Attributes that define the Local Volume Resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/LocalVolumeResourceData
type LocalVolumeResourceData struct {
	_ struct{} `type:"structure"`

	// Local destination path of the resource.
	DestinationPath *string `type:"string"`

	// Group owner related settings for local resources.
	GroupOwnerSetting *GroupOwnerSetting `type:"structure"`

	// Local source path of the resource.
	SourcePath *string `type:"string"`
}

// String returns the string representation
func (s LocalVolumeResourceData) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LocalVolumeResourceData) GoString() string {
	return s.String()
}

// SetDestinationPath sets the DestinationPath field's value.
func (s *LocalVolumeResourceData) SetDestinationPath(v string) *LocalVolumeResourceData {
	s.DestinationPath = &v
	return s
}

// SetGroupOwnerSetting sets the GroupOwnerSetting field's value.
func (s *LocalVolumeResourceData) SetGroupOwnerSetting(v *GroupOwnerSetting) *LocalVolumeResourceData {
	s.GroupOwnerSetting = v
	return s
}

// SetSourcePath sets the SourcePath field's value.
func (s *LocalVolumeResourceData) SetSourcePath(v string) *LocalVolumeResourceData {
	s.SourcePath = &v
	return s
}

// Information on the Logger
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/Logger
type Logger struct {
	_ struct{} `type:"structure"`

	// The component that will be subject to logs
	Component LoggerComponent `type:"string" enum:"true"`

	// Element Id for this entry in the list.
	Id *string `type:"string"`

	// The level of the logs
	Level LoggerLevel `type:"string" enum:"true"`

	// Amount of hardware space, in KB, to use if file system is used for logging
	// purposes.
	Space *int64 `type:"integer"`

	// The type which will be use for log output
	Type LoggerType `type:"string" enum:"true"`
}

// String returns the string representation
func (s Logger) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Logger) GoString() string {
	return s.String()
}

// SetComponent sets the Component field's value.
func (s *Logger) SetComponent(v LoggerComponent) *Logger {
	s.Component = v
	return s
}

// SetId sets the Id field's value.
func (s *Logger) SetId(v string) *Logger {
	s.Id = &v
	return s
}

// SetLevel sets the Level field's value.
func (s *Logger) SetLevel(v LoggerLevel) *Logger {
	s.Level = v
	return s
}

// SetSpace sets the Space field's value.
func (s *Logger) SetSpace(v int64) *Logger {
	s.Space = &v
	return s
}

// SetType sets the Type field's value.
func (s *Logger) SetType(v LoggerType) *Logger {
	s.Type = v
	return s
}

// Information on logger definition version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/LoggerDefinitionVersion
type LoggerDefinitionVersion struct {
	_ struct{} `type:"structure"`

	// List of loggers.
	Loggers []Logger `type:"list"`
}

// String returns the string representation
func (s LoggerDefinitionVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LoggerDefinitionVersion) GoString() string {
	return s.String()
}

// SetLoggers sets the Loggers field's value.
func (s *LoggerDefinitionVersion) SetLoggers(v []Logger) *LoggerDefinitionVersion {
	s.Loggers = v
	return s
}

// Information needed to perform a reset of a group's deployments.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ResetDeploymentsRequest
type ResetDeploymentsInput struct {
	_ struct{} `type:"structure"`

	AmznClientToken *string `location:"header" locationName:"X-Amzn-Client-Token" type:"string"`

	// When set to true, perform a best-effort only core reset.
	Force *bool `type:"boolean"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s ResetDeploymentsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetDeploymentsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResetDeploymentsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ResetDeploymentsInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAmznClientToken sets the AmznClientToken field's value.
func (s *ResetDeploymentsInput) SetAmznClientToken(v string) *ResetDeploymentsInput {
	s.AmznClientToken = &v
	return s
}

// SetForce sets the Force field's value.
func (s *ResetDeploymentsInput) SetForce(v bool) *ResetDeploymentsInput {
	s.Force = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *ResetDeploymentsInput) SetGroupId(v string) *ResetDeploymentsInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ResetDeploymentsResponse
type ResetDeploymentsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The arn of the reset deployment.
	DeploymentArn *string `type:"string"`

	// The id of the reset deployment.
	DeploymentId *string `type:"string"`
}

// String returns the string representation
func (s ResetDeploymentsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetDeploymentsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ResetDeploymentsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetDeploymentArn sets the DeploymentArn field's value.
func (s *ResetDeploymentsOutput) SetDeploymentArn(v string) *ResetDeploymentsOutput {
	s.DeploymentArn = &v
	return s
}

// SetDeploymentId sets the DeploymentId field's value.
func (s *ResetDeploymentsOutput) SetDeploymentId(v string) *ResetDeploymentsOutput {
	s.DeploymentId = &v
	return s
}

// Information on the resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/Resource
type Resource struct {
	_ struct{} `type:"structure"`

	// Resource Id.
	Id *string `type:"string"`

	// A descriptive resource name.
	Name *string `type:"string"`

	// A container of data for all resource types.
	ResourceDataContainer *ResourceDataContainer `type:"structure"`
}

// String returns the string representation
func (s Resource) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Resource) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *Resource) SetId(v string) *Resource {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *Resource) SetName(v string) *Resource {
	s.Name = &v
	return s
}

// SetResourceDataContainer sets the ResourceDataContainer field's value.
func (s *Resource) SetResourceDataContainer(v *ResourceDataContainer) *Resource {
	s.ResourceDataContainer = v
	return s
}

// Policy for the function to access a resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ResourceAccessPolicy
type ResourceAccessPolicy struct {
	_ struct{} `type:"structure"`

	// The function's access permission to the resource.
	Permission Permission `type:"string" enum:"true"`

	// Id of the resource. A reference to the resource definiton.
	ResourceId *string `type:"string"`
}

// String returns the string representation
func (s ResourceAccessPolicy) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceAccessPolicy) GoString() string {
	return s.String()
}

// SetPermission sets the Permission field's value.
func (s *ResourceAccessPolicy) SetPermission(v Permission) *ResourceAccessPolicy {
	s.Permission = v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *ResourceAccessPolicy) SetResourceId(v string) *ResourceAccessPolicy {
	s.ResourceId = &v
	return s
}

// A container of data for all resource types.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ResourceDataContainer
type ResourceDataContainer struct {
	_ struct{} `type:"structure"`

	// Attributes that define the Local Device Resource.
	LocalDeviceResourceData *LocalDeviceResourceData `type:"structure"`

	// Attributes that define the Local Volume Resource.
	LocalVolumeResourceData *LocalVolumeResourceData `type:"structure"`
}

// String returns the string representation
func (s ResourceDataContainer) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceDataContainer) GoString() string {
	return s.String()
}

// SetLocalDeviceResourceData sets the LocalDeviceResourceData field's value.
func (s *ResourceDataContainer) SetLocalDeviceResourceData(v *LocalDeviceResourceData) *ResourceDataContainer {
	s.LocalDeviceResourceData = v
	return s
}

// SetLocalVolumeResourceData sets the LocalVolumeResourceData field's value.
func (s *ResourceDataContainer) SetLocalVolumeResourceData(v *LocalVolumeResourceData) *ResourceDataContainer {
	s.LocalVolumeResourceData = v
	return s
}

// Information on resource definition version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/ResourceDefinitionVersion
type ResourceDefinitionVersion struct {
	_ struct{} `type:"structure"`

	// List of resources.
	Resources []Resource `type:"list"`
}

// String returns the string representation
func (s ResourceDefinitionVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceDefinitionVersion) GoString() string {
	return s.String()
}

// SetResources sets the Resources field's value.
func (s *ResourceDefinitionVersion) SetResources(v []Resource) *ResourceDefinitionVersion {
	s.Resources = v
	return s
}

// Information on subscription
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/Subscription
type Subscription struct {
	_ struct{} `type:"structure"`

	// Element Id for this entry in the list.
	Id *string `type:"string"`

	// Source of the subscription. Can be a thing arn, lambda arn or word 'cloud'
	Source *string `type:"string"`

	// Subject of the message.
	Subject *string `type:"string"`

	// Where the message is sent to. Can be a thing arn, lambda arn or word 'cloud'.
	Target *string `type:"string"`
}

// String returns the string representation
func (s Subscription) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Subscription) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *Subscription) SetId(v string) *Subscription {
	s.Id = &v
	return s
}

// SetSource sets the Source field's value.
func (s *Subscription) SetSource(v string) *Subscription {
	s.Source = &v
	return s
}

// SetSubject sets the Subject field's value.
func (s *Subscription) SetSubject(v string) *Subscription {
	s.Subject = &v
	return s
}

// SetTarget sets the Target field's value.
func (s *Subscription) SetTarget(v string) *Subscription {
	s.Target = &v
	return s
}

// Information on subscription definition version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/SubscriptionDefinitionVersion
type SubscriptionDefinitionVersion struct {
	_ struct{} `type:"structure"`

	// Subscriptions in the version.
	Subscriptions []Subscription `type:"list"`
}

// String returns the string representation
func (s SubscriptionDefinitionVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SubscriptionDefinitionVersion) GoString() string {
	return s.String()
}

// SetSubscriptions sets the Subscriptions field's value.
func (s *SubscriptionDefinitionVersion) SetSubscriptions(v []Subscription) *SubscriptionDefinitionVersion {
	s.Subscriptions = v
	return s
}

// Information on connectivity info
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateConnectivityInfoRequest
type UpdateConnectivityInfoInput struct {
	_ struct{} `type:"structure"`

	// Connectivity info list
	ConnectivityInfo []ConnectivityInfo `type:"list"`

	// ThingName is a required field
	ThingName *string `location:"uri" locationName:"ThingName" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateConnectivityInfoInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateConnectivityInfoInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateConnectivityInfoInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateConnectivityInfoInput"}

	if s.ThingName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ThingName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConnectivityInfo sets the ConnectivityInfo field's value.
func (s *UpdateConnectivityInfoInput) SetConnectivityInfo(v []ConnectivityInfo) *UpdateConnectivityInfoInput {
	s.ConnectivityInfo = v
	return s
}

// SetThingName sets the ThingName field's value.
func (s *UpdateConnectivityInfoInput) SetThingName(v string) *UpdateConnectivityInfoInput {
	s.ThingName = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateConnectivityInfoResponse
type UpdateConnectivityInfoOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Response Text
	Message *string `locationName:"message" type:"string"`

	// New Version
	Version *string `type:"string"`
}

// String returns the string representation
func (s UpdateConnectivityInfoOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateConnectivityInfoOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateConnectivityInfoOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetMessage sets the Message field's value.
func (s *UpdateConnectivityInfoOutput) SetMessage(v string) *UpdateConnectivityInfoOutput {
	s.Message = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *UpdateConnectivityInfoOutput) SetVersion(v string) *UpdateConnectivityInfoOutput {
	s.Version = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateCoreDefinitionRequest
type UpdateCoreDefinitionInput struct {
	_ struct{} `type:"structure"`

	// CoreDefinitionId is a required field
	CoreDefinitionId *string `location:"uri" locationName:"CoreDefinitionId" type:"string" required:"true"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s UpdateCoreDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateCoreDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateCoreDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateCoreDefinitionInput"}

	if s.CoreDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("CoreDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCoreDefinitionId sets the CoreDefinitionId field's value.
func (s *UpdateCoreDefinitionInput) SetCoreDefinitionId(v string) *UpdateCoreDefinitionInput {
	s.CoreDefinitionId = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateCoreDefinitionInput) SetName(v string) *UpdateCoreDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateCoreDefinitionResponse
type UpdateCoreDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateCoreDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateCoreDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateCoreDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateDeviceDefinitionRequest
type UpdateDeviceDefinitionInput struct {
	_ struct{} `type:"structure"`

	// DeviceDefinitionId is a required field
	DeviceDefinitionId *string `location:"uri" locationName:"DeviceDefinitionId" type:"string" required:"true"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s UpdateDeviceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDeviceDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDeviceDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateDeviceDefinitionInput"}

	if s.DeviceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeviceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeviceDefinitionId sets the DeviceDefinitionId field's value.
func (s *UpdateDeviceDefinitionInput) SetDeviceDefinitionId(v string) *UpdateDeviceDefinitionInput {
	s.DeviceDefinitionId = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateDeviceDefinitionInput) SetName(v string) *UpdateDeviceDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateDeviceDefinitionResponse
type UpdateDeviceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateDeviceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDeviceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateDeviceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateFunctionDefinitionRequest
type UpdateFunctionDefinitionInput struct {
	_ struct{} `type:"structure"`

	// FunctionDefinitionId is a required field
	FunctionDefinitionId *string `location:"uri" locationName:"FunctionDefinitionId" type:"string" required:"true"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s UpdateFunctionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFunctionDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateFunctionDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateFunctionDefinitionInput"}

	if s.FunctionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("FunctionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionDefinitionId sets the FunctionDefinitionId field's value.
func (s *UpdateFunctionDefinitionInput) SetFunctionDefinitionId(v string) *UpdateFunctionDefinitionInput {
	s.FunctionDefinitionId = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateFunctionDefinitionInput) SetName(v string) *UpdateFunctionDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateFunctionDefinitionResponse
type UpdateFunctionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateFunctionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFunctionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateFunctionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateGroupCertificateConfigurationRequest
type UpdateGroupCertificateConfigurationInput struct {
	_ struct{} `type:"structure"`

	// Amount of time when the certificate expires in milliseconds.
	CertificateExpiryInMilliseconds *string `type:"string"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateGroupCertificateConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateGroupCertificateConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateGroupCertificateConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateGroupCertificateConfigurationInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCertificateExpiryInMilliseconds sets the CertificateExpiryInMilliseconds field's value.
func (s *UpdateGroupCertificateConfigurationInput) SetCertificateExpiryInMilliseconds(v string) *UpdateGroupCertificateConfigurationInput {
	s.CertificateExpiryInMilliseconds = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *UpdateGroupCertificateConfigurationInput) SetGroupId(v string) *UpdateGroupCertificateConfigurationInput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateGroupCertificateConfigurationResponse
type UpdateGroupCertificateConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	CertificateAuthorityExpiryInMilliseconds *string `type:"string"`

	CertificateExpiryInMilliseconds *string `type:"string"`

	GroupId *string `type:"string"`
}

// String returns the string representation
func (s UpdateGroupCertificateConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateGroupCertificateConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateGroupCertificateConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetCertificateAuthorityExpiryInMilliseconds sets the CertificateAuthorityExpiryInMilliseconds field's value.
func (s *UpdateGroupCertificateConfigurationOutput) SetCertificateAuthorityExpiryInMilliseconds(v string) *UpdateGroupCertificateConfigurationOutput {
	s.CertificateAuthorityExpiryInMilliseconds = &v
	return s
}

// SetCertificateExpiryInMilliseconds sets the CertificateExpiryInMilliseconds field's value.
func (s *UpdateGroupCertificateConfigurationOutput) SetCertificateExpiryInMilliseconds(v string) *UpdateGroupCertificateConfigurationOutput {
	s.CertificateExpiryInMilliseconds = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *UpdateGroupCertificateConfigurationOutput) SetGroupId(v string) *UpdateGroupCertificateConfigurationOutput {
	s.GroupId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateGroupRequest
type UpdateGroupInput struct {
	_ struct{} `type:"structure"`

	// GroupId is a required field
	GroupId *string `location:"uri" locationName:"GroupId" type:"string" required:"true"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s UpdateGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateGroupInput"}

	if s.GroupId == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *UpdateGroupInput) SetGroupId(v string) *UpdateGroupInput {
	s.GroupId = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateGroupInput) SetName(v string) *UpdateGroupInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateGroupResponse
type UpdateGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateLoggerDefinitionRequest
type UpdateLoggerDefinitionInput struct {
	_ struct{} `type:"structure"`

	// LoggerDefinitionId is a required field
	LoggerDefinitionId *string `location:"uri" locationName:"LoggerDefinitionId" type:"string" required:"true"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s UpdateLoggerDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLoggerDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateLoggerDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateLoggerDefinitionInput"}

	if s.LoggerDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoggerDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoggerDefinitionId sets the LoggerDefinitionId field's value.
func (s *UpdateLoggerDefinitionInput) SetLoggerDefinitionId(v string) *UpdateLoggerDefinitionInput {
	s.LoggerDefinitionId = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateLoggerDefinitionInput) SetName(v string) *UpdateLoggerDefinitionInput {
	s.Name = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateLoggerDefinitionResponse
type UpdateLoggerDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateLoggerDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLoggerDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateLoggerDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateResourceDefinitionRequest
type UpdateResourceDefinitionInput struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	// ResourceDefinitionId is a required field
	ResourceDefinitionId *string `location:"uri" locationName:"ResourceDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateResourceDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResourceDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateResourceDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateResourceDefinitionInput"}

	if s.ResourceDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *UpdateResourceDefinitionInput) SetName(v string) *UpdateResourceDefinitionInput {
	s.Name = &v
	return s
}

// SetResourceDefinitionId sets the ResourceDefinitionId field's value.
func (s *UpdateResourceDefinitionInput) SetResourceDefinitionId(v string) *UpdateResourceDefinitionInput {
	s.ResourceDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateResourceDefinitionResponse
type UpdateResourceDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateResourceDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResourceDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateResourceDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateSubscriptionDefinitionRequest
type UpdateSubscriptionDefinitionInput struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	// SubscriptionDefinitionId is a required field
	SubscriptionDefinitionId *string `location:"uri" locationName:"SubscriptionDefinitionId" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateSubscriptionDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSubscriptionDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateSubscriptionDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateSubscriptionDefinitionInput"}

	if s.SubscriptionDefinitionId == nil {
		invalidParams.Add(aws.NewErrParamRequired("SubscriptionDefinitionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetName sets the Name field's value.
func (s *UpdateSubscriptionDefinitionInput) SetName(v string) *UpdateSubscriptionDefinitionInput {
	s.Name = &v
	return s
}

// SetSubscriptionDefinitionId sets the SubscriptionDefinitionId field's value.
func (s *UpdateSubscriptionDefinitionInput) SetSubscriptionDefinitionId(v string) *UpdateSubscriptionDefinitionInput {
	s.SubscriptionDefinitionId = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/UpdateSubscriptionDefinitionResponse
type UpdateSubscriptionDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateSubscriptionDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSubscriptionDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateSubscriptionDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Information on the version
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/VersionInformation
type VersionInformation struct {
	_ struct{} `type:"structure"`

	// Arn of the version.
	Arn *string `type:"string"`

	// Timestamp of when the version was created.
	CreationTimestamp *string `type:"string"`

	// Id of the resource container.
	Id *string `type:"string"`

	// Unique Id of a version.
	Version *string `type:"string"`
}

// String returns the string representation
func (s VersionInformation) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s VersionInformation) GoString() string {
	return s.String()
}

// SetArn sets the Arn field's value.
func (s *VersionInformation) SetArn(v string) *VersionInformation {
	s.Arn = &v
	return s
}

// SetCreationTimestamp sets the CreationTimestamp field's value.
func (s *VersionInformation) SetCreationTimestamp(v string) *VersionInformation {
	s.CreationTimestamp = &v
	return s
}

// SetId sets the Id field's value.
func (s *VersionInformation) SetId(v string) *VersionInformation {
	s.Id = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *VersionInformation) SetVersion(v string) *VersionInformation {
	s.Version = &v
	return s
}

type DeploymentType string

// Enum values for DeploymentType
const (
	DeploymentTypeNewDeployment        DeploymentType = "NewDeployment"
	DeploymentTypeRedeployment         DeploymentType = "Redeployment"
	DeploymentTypeResetDeployment      DeploymentType = "ResetDeployment"
	DeploymentTypeForceResetDeployment DeploymentType = "ForceResetDeployment"
)

type LoggerComponent string

// Enum values for LoggerComponent
const (
	LoggerComponentGreengrassSystem LoggerComponent = "GreengrassSystem"
	LoggerComponentLambda           LoggerComponent = "Lambda"
)

type LoggerLevel string

// Enum values for LoggerLevel
const (
	LoggerLevelDebug LoggerLevel = "DEBUG"
	LoggerLevelInfo  LoggerLevel = "INFO"
	LoggerLevelWarn  LoggerLevel = "WARN"
	LoggerLevelError LoggerLevel = "ERROR"
	LoggerLevelFatal LoggerLevel = "FATAL"
)

type LoggerType string

// Enum values for LoggerType
const (
	LoggerTypeFileSystem    LoggerType = "FileSystem"
	LoggerTypeAwscloudWatch LoggerType = "AWSCloudWatch"
)

// Type of permissions a function could have to access a resource.
type Permission string

// Enum values for Permission
const (
	PermissionRo Permission = "ro"
	PermissionRw Permission = "rw"
)

// The piece of software on the Greengrass Core that will be updated.
type SoftwareToUpdate string

// Enum values for SoftwareToUpdate
const (
	SoftwareToUpdateCore     SoftwareToUpdate = "core"
	SoftwareToUpdateOtaAgent SoftwareToUpdate = "ota_agent"
)

// The minimum level of log statements that should be logged by the OTA Agent
// during an update.
type UpdateAgentLogLevel string

// Enum values for UpdateAgentLogLevel
const (
	UpdateAgentLogLevelNone    UpdateAgentLogLevel = "NONE"
	UpdateAgentLogLevelTrace   UpdateAgentLogLevel = "TRACE"
	UpdateAgentLogLevelDebug   UpdateAgentLogLevel = "DEBUG"
	UpdateAgentLogLevelVerbose UpdateAgentLogLevel = "VERBOSE"
	UpdateAgentLogLevelInfo    UpdateAgentLogLevel = "INFO"
	UpdateAgentLogLevelWarn    UpdateAgentLogLevel = "WARN"
	UpdateAgentLogLevelError   UpdateAgentLogLevel = "ERROR"
	UpdateAgentLogLevelFatal   UpdateAgentLogLevel = "FATAL"
)

// The architecture of the Cores in the targets of an update
type UpdateTargetsArchitecture string

// Enum values for UpdateTargetsArchitecture
const (
	UpdateTargetsArchitectureArmv7l  UpdateTargetsArchitecture = "armv7l"
	UpdateTargetsArchitectureX8664   UpdateTargetsArchitecture = "x86_64"
	UpdateTargetsArchitectureAarch64 UpdateTargetsArchitecture = "aarch64"
)

// The operating system of the Cores in the targets of an update
type UpdateTargetsOperatingSystem string

// Enum values for UpdateTargetsOperatingSystem
const (
	UpdateTargetsOperatingSystemUbuntu      UpdateTargetsOperatingSystem = "ubuntu"
	UpdateTargetsOperatingSystemRaspbian    UpdateTargetsOperatingSystem = "raspbian"
	UpdateTargetsOperatingSystemAmazonLinux UpdateTargetsOperatingSystem = "amazon_linux"
)
