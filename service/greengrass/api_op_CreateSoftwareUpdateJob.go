// Code generated by smithy-go-codegen DO NOT EDIT.

package greengrass

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/greengrass/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a software update for a core or group of cores (specified as an IoT
// thing group.) Use this to update the OTA Agent as well as the Greengrass core
// software. It makes use of the IoT Jobs feature which provides additional
// commands to manage a Greengrass core software update job.
func (c *Client) CreateSoftwareUpdateJob(ctx context.Context, params *CreateSoftwareUpdateJobInput, optFns ...func(*Options)) (*CreateSoftwareUpdateJobOutput, error) {
	stack := middleware.NewStack("CreateSoftwareUpdateJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateSoftwareUpdateJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateSoftwareUpdateJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateSoftwareUpdateJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateSoftwareUpdateJob",
			Err:           err,
		}
	}
	out := result.(*CreateSoftwareUpdateJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateSoftwareUpdateJobInput struct {
	// The operating system of the cores which are the targets of an update.
	UpdateTargetsOperatingSystem types.UpdateTargetsOperatingSystem
	// The minimum level of log statements that should be logged by the OTA Agent
	// during an update.
	UpdateAgentLogLevel types.UpdateAgentLogLevel
	// A client token used to correlate requests and responses.
	AmznClientToken *string
	// The IAM Role that Greengrass will use to create pre-signed URLs pointing towards
	// the update artifact.
	S3UrlSignerRole *string
	// The ARNs of the targets (IoT things or IoT thing groups) that this update will
	// be applied to.
	UpdateTargets []*string
	// The architecture of the cores which are the targets of an update.
	UpdateTargetsArchitecture types.UpdateTargetsArchitecture
	// The piece of software on the Greengrass core that will be updated.
	SoftwareToUpdate types.SoftwareToUpdate
}

type CreateSoftwareUpdateJobOutput struct {
	// The software version installed on the device or devices after the update.
	PlatformSoftwareVersion *string
	// The IoT Job ARN corresponding to this update.
	IotJobArn *string
	// The IoT Job Id corresponding to this update.
	IotJobId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateSoftwareUpdateJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateSoftwareUpdateJob{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateSoftwareUpdateJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateSoftwareUpdateJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "greengrass",
		OperationName: "CreateSoftwareUpdateJob",
	}
}
