// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package greengrass

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/greengrass/types"
)

const opStartBulkDeployment = "StartBulkDeployment"

// StartBulkDeploymentRequest returns a request value for making API operation for
// AWS Greengrass.
//
// Deploys multiple groups in one operation. This action starts the bulk deployment
// of a specified set of group versions. Each group version deployment will
// be triggered with an adaptive rate that has a fixed upper limit. We recommend
// that you include an ''X-Amzn-Client-Token'' token in every ''StartBulkDeployment''
// request. These requests are idempotent with respect to the token and the
// request parameters.
//
//    // Example sending a request using StartBulkDeploymentRequest.
//    req := client.StartBulkDeploymentRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/greengrass-2017-06-07/StartBulkDeployment
func (c *Client) StartBulkDeploymentRequest(input *types.StartBulkDeploymentInput) StartBulkDeploymentRequest {
	op := &aws.Operation{
		Name:       opStartBulkDeployment,
		HTTPMethod: "POST",
		HTTPPath:   "/greengrass/bulk/deployments",
	}

	if input == nil {
		input = &types.StartBulkDeploymentInput{}
	}

	req := c.newRequest(op, input, &types.StartBulkDeploymentOutput{})
	return StartBulkDeploymentRequest{Request: req, Input: input, Copy: c.StartBulkDeploymentRequest}
}

// StartBulkDeploymentRequest is the request type for the
// StartBulkDeployment API operation.
type StartBulkDeploymentRequest struct {
	*aws.Request
	Input *types.StartBulkDeploymentInput
	Copy  func(*types.StartBulkDeploymentInput) StartBulkDeploymentRequest
}

// Send marshals and sends the StartBulkDeployment API request.
func (r StartBulkDeploymentRequest) Send(ctx context.Context) (*StartBulkDeploymentResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartBulkDeploymentResponse{
		StartBulkDeploymentOutput: r.Request.Data.(*types.StartBulkDeploymentOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartBulkDeploymentResponse is the response type for the
// StartBulkDeployment API operation.
type StartBulkDeploymentResponse struct {
	*types.StartBulkDeploymentOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartBulkDeployment request.
func (r *StartBulkDeploymentResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
