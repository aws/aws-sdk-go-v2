// Code generated by smithy-go-codegen DO NOT EDIT.

package efs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/efs/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns the description of a specific Amazon EFS access point if the
// AccessPointId is provided. If you provide an EFS FileSystemId, it returns
// descriptions of all access points for that file system. You can provide either
// an AccessPointId or a FileSystemId in the request, but not both. This operation
// requires permissions for the elasticfilesystem:DescribeAccessPoints action.
func (c *Client) DescribeAccessPoints(ctx context.Context, params *DescribeAccessPointsInput, optFns ...func(*Options)) (*DescribeAccessPointsOutput, error) {
	if params == nil {
		params = &DescribeAccessPointsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeAccessPoints", params, optFns, addOperationDescribeAccessPointsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeAccessPointsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeAccessPointsInput struct {

	// (Optional) Specifies an EFS access point to describe in the response; mutually
	// exclusive with FileSystemId.
	AccessPointId *string

	// (Optional) If you provide a FileSystemId, EFS returns all access points for that
	// file system; mutually exclusive with AccessPointId.
	FileSystemId *string

	// (Optional) When retrieving all access points for a file system, you can
	// optionally specify the MaxItems parameter to limit the number of objects
	// returned in a response. The default value is 100.
	MaxResults *int32

	// NextToken is present if the response is paginated. You can use NextMarker in the
	// subsequent request to fetch the next page of access point descriptions.
	NextToken *string
}

type DescribeAccessPointsOutput struct {

	// An array of access point descriptions.
	AccessPoints []*types.AccessPointDescription

	// Present if there are more access points than returned in the response. You can
	// use the NextMarker in the subsequent request to fetch the additional
	// descriptions.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribeAccessPointsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpDescribeAccessPoints{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeAccessPoints{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeAccessPoints(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDescribeAccessPoints(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticfilesystem",
		OperationName: "DescribeAccessPoints",
	}
}
