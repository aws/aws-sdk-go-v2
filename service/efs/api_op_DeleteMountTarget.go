// Code generated by smithy-go-codegen DO NOT EDIT.

package efs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Deletes the specified mount target.  <p>This operation forcibly breaks any
// mounts of the file system by using the mount target that is being deleted, which
// might disrupt instances or applications using those mounts. To avoid
// applications getting cut off abruptly, you might consider unmounting any mounts
// of the mount target, if feasible. The operation also deletes the associated
// network interface. Uncommitted writes might be lost, but breaking a mount target
// using this operation does not corrupt the file system itself. The file system
// you created remains. You can mount an EC2 instance in your VPC by using another
// mount target.</p> <p>This operation requires permissions for the following
// action on the file system:</p> <ul> <li> <p>
// <code>elasticfilesystem:DeleteMountTarget</code> </p> </li> </ul> <note> <p>The
// <code>DeleteMountTarget</code> call returns while the mount target state is
// still <code>deleting</code>. You can check the mount target deletion by calling
// the <a>DescribeMountTargets</a> operation, which returns a list of mount target
// descriptions for the given file system. </p> </note> <p>The operation also
// requires permissions for the following Amazon EC2 action on the mount target's
// network interface:</p> <ul> <li> <p> <code>ec2:DeleteNetworkInterface</code>
// </p> </li> </ul>
func (c *Client) DeleteMountTarget(ctx context.Context, params *DeleteMountTargetInput, optFns ...func(*Options)) (*DeleteMountTargetOutput, error) {
	stack := middleware.NewStack("DeleteMountTarget", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDeleteMountTargetMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDeleteMountTargetValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDeleteMountTarget(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DeleteMountTarget",
			Err:           err,
		}
	}
	out := result.(*DeleteMountTargetOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type DeleteMountTargetInput struct {
	// The ID of the mount target to delete (String).
	MountTargetId *string
}

type DeleteMountTargetOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDeleteMountTargetMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDeleteMountTarget{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDeleteMountTarget{}, middleware.After)
}

func newServiceMetadataMiddleware_opDeleteMountTarget(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticfilesystem",
		OperationName: "DeleteMountTarget",
	}
}
