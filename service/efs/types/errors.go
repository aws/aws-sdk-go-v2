// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// Returned if the access point you are trying to create already exists, with the
// creation token you provided in the request.
type AccessPointAlreadyExists struct {
	Message *string

	AccessPointId *string
	ErrorCode_    *string
}

func (e *AccessPointAlreadyExists) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessPointAlreadyExists) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessPointAlreadyExists) ErrorCode() string             { return "AccessPointAlreadyExists" }
func (e *AccessPointAlreadyExists) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessPointAlreadyExists) GetAccessPointId() string {
	return ptr.ToString(e.AccessPointId)
}
func (e *AccessPointAlreadyExists) HasAccessPointId() bool {
	return e.AccessPointId != nil
}
func (e *AccessPointAlreadyExists) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *AccessPointAlreadyExists) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *AccessPointAlreadyExists) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessPointAlreadyExists) HasMessage() bool {
	return e.Message != nil
}

// Returned if the AWS account has already created the maximum number of access
// points allowed per file system.
type AccessPointLimitExceeded struct {
	Message *string

	ErrorCode_ *string
}

func (e *AccessPointLimitExceeded) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessPointLimitExceeded) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessPointLimitExceeded) ErrorCode() string             { return "AccessPointLimitExceeded" }
func (e *AccessPointLimitExceeded) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessPointLimitExceeded) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *AccessPointLimitExceeded) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *AccessPointLimitExceeded) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessPointLimitExceeded) HasMessage() bool {
	return e.Message != nil
}

// Returned if the specified AccessPointId value doesn't exist in the requester's
// AWS account.
type AccessPointNotFound struct {
	Message *string

	ErrorCode_ *string
}

func (e *AccessPointNotFound) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessPointNotFound) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessPointNotFound) ErrorCode() string             { return "AccessPointNotFound" }
func (e *AccessPointNotFound) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessPointNotFound) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessPointNotFound) HasMessage() bool {
	return e.Message != nil
}
func (e *AccessPointNotFound) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *AccessPointNotFound) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if the request is malformed or contains an error such as an invalid
// parameter value or a missing required parameter.
type BadRequest struct {
	Message *string

	ErrorCode_ *string
}

func (e *BadRequest) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *BadRequest) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *BadRequest) ErrorCode() string             { return "BadRequest" }
func (e *BadRequest) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *BadRequest) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *BadRequest) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *BadRequest) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *BadRequest) HasMessage() bool {
	return e.Message != nil
}

// The service timed out trying to fulfill the request, and the client should try
// the call again.
type DependencyTimeout struct {
	Message *string

	ErrorCode_ *string
}

func (e *DependencyTimeout) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DependencyTimeout) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DependencyTimeout) ErrorCode() string             { return "DependencyTimeout" }
func (e *DependencyTimeout) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *DependencyTimeout) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *DependencyTimeout) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *DependencyTimeout) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DependencyTimeout) HasMessage() bool {
	return e.Message != nil
}

// Returned if the file system you are trying to create already exists, with the
// creation token you provided.
type FileSystemAlreadyExists struct {
	Message *string

	FileSystemId *string
	ErrorCode_   *string
}

func (e *FileSystemAlreadyExists) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *FileSystemAlreadyExists) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *FileSystemAlreadyExists) ErrorCode() string             { return "FileSystemAlreadyExists" }
func (e *FileSystemAlreadyExists) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *FileSystemAlreadyExists) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *FileSystemAlreadyExists) HasMessage() bool {
	return e.Message != nil
}
func (e *FileSystemAlreadyExists) GetFileSystemId() string {
	return ptr.ToString(e.FileSystemId)
}
func (e *FileSystemAlreadyExists) HasFileSystemId() bool {
	return e.FileSystemId != nil
}
func (e *FileSystemAlreadyExists) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *FileSystemAlreadyExists) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if a file system has mount targets.
type FileSystemInUse struct {
	Message *string

	ErrorCode_ *string
}

func (e *FileSystemInUse) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *FileSystemInUse) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *FileSystemInUse) ErrorCode() string             { return "FileSystemInUse" }
func (e *FileSystemInUse) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *FileSystemInUse) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *FileSystemInUse) HasMessage() bool {
	return e.Message != nil
}
func (e *FileSystemInUse) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *FileSystemInUse) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if the AWS account has already created the maximum number of file
// systems allowed per account.
type FileSystemLimitExceeded struct {
	Message *string

	ErrorCode_ *string
}

func (e *FileSystemLimitExceeded) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *FileSystemLimitExceeded) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *FileSystemLimitExceeded) ErrorCode() string             { return "FileSystemLimitExceeded" }
func (e *FileSystemLimitExceeded) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *FileSystemLimitExceeded) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *FileSystemLimitExceeded) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *FileSystemLimitExceeded) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *FileSystemLimitExceeded) HasMessage() bool {
	return e.Message != nil
}

// Returned if the specified FileSystemId value doesn't exist in the requester's
// AWS account.
type FileSystemNotFound struct {
	Message *string

	ErrorCode_ *string
}

func (e *FileSystemNotFound) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *FileSystemNotFound) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *FileSystemNotFound) ErrorCode() string             { return "FileSystemNotFound" }
func (e *FileSystemNotFound) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *FileSystemNotFound) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *FileSystemNotFound) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *FileSystemNotFound) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *FileSystemNotFound) HasMessage() bool {
	return e.Message != nil
}

// Returned if the file system's lifecycle state is not "available".
type IncorrectFileSystemLifeCycleState struct {
	Message *string

	ErrorCode_ *string
}

func (e *IncorrectFileSystemLifeCycleState) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IncorrectFileSystemLifeCycleState) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IncorrectFileSystemLifeCycleState) ErrorCode() string {
	return "IncorrectFileSystemLifeCycleState"
}
func (e *IncorrectFileSystemLifeCycleState) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IncorrectFileSystemLifeCycleState) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IncorrectFileSystemLifeCycleState) HasMessage() bool {
	return e.Message != nil
}
func (e *IncorrectFileSystemLifeCycleState) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *IncorrectFileSystemLifeCycleState) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if the mount target is not in the correct state for the operation.
type IncorrectMountTargetState struct {
	Message *string

	ErrorCode_ *string
}

func (e *IncorrectMountTargetState) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IncorrectMountTargetState) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IncorrectMountTargetState) ErrorCode() string             { return "IncorrectMountTargetState" }
func (e *IncorrectMountTargetState) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IncorrectMountTargetState) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IncorrectMountTargetState) HasMessage() bool {
	return e.Message != nil
}
func (e *IncorrectMountTargetState) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *IncorrectMountTargetState) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if there's not enough capacity to provision additional throughput. This
// value might be returned when you try to create a file system in provisioned
// throughput mode, when you attempt to increase the provisioned throughput of an
// existing file system, or when you attempt to change an existing file system from
// bursting to provisioned throughput mode.
type InsufficientThroughputCapacity struct {
	Message *string

	ErrorCode_ *string
}

func (e *InsufficientThroughputCapacity) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InsufficientThroughputCapacity) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InsufficientThroughputCapacity) ErrorCode() string             { return "InsufficientThroughputCapacity" }
func (e *InsufficientThroughputCapacity) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InsufficientThroughputCapacity) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *InsufficientThroughputCapacity) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *InsufficientThroughputCapacity) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InsufficientThroughputCapacity) HasMessage() bool {
	return e.Message != nil
}

// Returned if an error occurred on the server side.
type InternalServerError struct {
	Message *string

	ErrorCode_ *string
}

func (e *InternalServerError) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServerError) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServerError) ErrorCode() string             { return "InternalServerError" }
func (e *InternalServerError) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalServerError) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalServerError) HasMessage() bool {
	return e.Message != nil
}
func (e *InternalServerError) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *InternalServerError) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if the FileSystemPolicy is is malformed or contains an error such as an
// invalid parameter value or a missing required parameter. Returned in the case of
// a policy lockout safety check error.
type InvalidPolicyException struct {
	Message *string

	ErrorCode_ *string
}

func (e *InvalidPolicyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidPolicyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidPolicyException) ErrorCode() string             { return "InvalidPolicyException" }
func (e *InvalidPolicyException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidPolicyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidPolicyException) HasMessage() bool {
	return e.Message != nil
}
func (e *InvalidPolicyException) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *InvalidPolicyException) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if the request specified an IpAddress that is already in use in the
// subnet.
type IpAddressInUse struct {
	Message *string

	ErrorCode_ *string
}

func (e *IpAddressInUse) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IpAddressInUse) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IpAddressInUse) ErrorCode() string             { return "IpAddressInUse" }
func (e *IpAddressInUse) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IpAddressInUse) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *IpAddressInUse) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *IpAddressInUse) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IpAddressInUse) HasMessage() bool {
	return e.Message != nil
}

// Returned if the mount target would violate one of the specified restrictions
// based on the file system's existing mount targets.
type MountTargetConflict struct {
	Message *string

	ErrorCode_ *string
}

func (e *MountTargetConflict) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MountTargetConflict) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MountTargetConflict) ErrorCode() string             { return "MountTargetConflict" }
func (e *MountTargetConflict) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *MountTargetConflict) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *MountTargetConflict) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *MountTargetConflict) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *MountTargetConflict) HasMessage() bool {
	return e.Message != nil
}

// Returned if there is no mount target with the specified ID found in the caller's
// account.
type MountTargetNotFound struct {
	Message *string

	ErrorCode_ *string
}

func (e *MountTargetNotFound) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MountTargetNotFound) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MountTargetNotFound) ErrorCode() string             { return "MountTargetNotFound" }
func (e *MountTargetNotFound) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *MountTargetNotFound) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *MountTargetNotFound) HasMessage() bool {
	return e.Message != nil
}
func (e *MountTargetNotFound) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *MountTargetNotFound) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// The calling account has reached the limit for elastic network interfaces for the
// specific AWS Region. The client should try to delete some elastic network
// interfaces or get the account limit raised. For more information, see Amazon VPC
// Limits
// (https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html)
// in the Amazon VPC User Guide (see the Network interfaces per VPC entry in the
// table).
type NetworkInterfaceLimitExceeded struct {
	Message *string

	ErrorCode_ *string
}

func (e *NetworkInterfaceLimitExceeded) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NetworkInterfaceLimitExceeded) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NetworkInterfaceLimitExceeded) ErrorCode() string             { return "NetworkInterfaceLimitExceeded" }
func (e *NetworkInterfaceLimitExceeded) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NetworkInterfaceLimitExceeded) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NetworkInterfaceLimitExceeded) HasMessage() bool {
	return e.Message != nil
}
func (e *NetworkInterfaceLimitExceeded) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *NetworkInterfaceLimitExceeded) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if IpAddress was not specified in the request and there are no free IP
// addresses in the subnet.
type NoFreeAddressesInSubnet struct {
	Message *string

	ErrorCode_ *string
}

func (e *NoFreeAddressesInSubnet) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NoFreeAddressesInSubnet) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NoFreeAddressesInSubnet) ErrorCode() string             { return "NoFreeAddressesInSubnet" }
func (e *NoFreeAddressesInSubnet) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NoFreeAddressesInSubnet) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *NoFreeAddressesInSubnet) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *NoFreeAddressesInSubnet) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NoFreeAddressesInSubnet) HasMessage() bool {
	return e.Message != nil
}

// Returned if the default file system policy is in effect for the EFS file system
// specified.
type PolicyNotFound struct {
	Message *string

	ErrorCode_ *string
}

func (e *PolicyNotFound) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyNotFound) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyNotFound) ErrorCode() string             { return "PolicyNotFound" }
func (e *PolicyNotFound) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyNotFound) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *PolicyNotFound) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *PolicyNotFound) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyNotFound) HasMessage() bool {
	return e.Message != nil
}

// Returned if the size of SecurityGroups specified in the request is greater than
// five.
type SecurityGroupLimitExceeded struct {
	Message *string

	ErrorCode_ *string
}

func (e *SecurityGroupLimitExceeded) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SecurityGroupLimitExceeded) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SecurityGroupLimitExceeded) ErrorCode() string             { return "SecurityGroupLimitExceeded" }
func (e *SecurityGroupLimitExceeded) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SecurityGroupLimitExceeded) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *SecurityGroupLimitExceeded) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *SecurityGroupLimitExceeded) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SecurityGroupLimitExceeded) HasMessage() bool {
	return e.Message != nil
}

// Returned if one of the specified security groups doesn't exist in the subnet's
// VPC.
type SecurityGroupNotFound struct {
	Message *string

	ErrorCode_ *string
}

func (e *SecurityGroupNotFound) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SecurityGroupNotFound) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SecurityGroupNotFound) ErrorCode() string             { return "SecurityGroupNotFound" }
func (e *SecurityGroupNotFound) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SecurityGroupNotFound) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SecurityGroupNotFound) HasMessage() bool {
	return e.Message != nil
}
func (e *SecurityGroupNotFound) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *SecurityGroupNotFound) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if there is no subnet with ID SubnetId provided in the request.
type SubnetNotFound struct {
	Message *string

	ErrorCode_ *string
}

func (e *SubnetNotFound) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SubnetNotFound) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SubnetNotFound) ErrorCode() string             { return "SubnetNotFound" }
func (e *SubnetNotFound) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SubnetNotFound) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SubnetNotFound) HasMessage() bool {
	return e.Message != nil
}
func (e *SubnetNotFound) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *SubnetNotFound) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if the throughput mode or amount of provisioned throughput can't be
// changed because the throughput limit of 1024 MiB/s has been reached.
type ThroughputLimitExceeded struct {
	Message *string

	ErrorCode_ *string
}

func (e *ThroughputLimitExceeded) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ThroughputLimitExceeded) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ThroughputLimitExceeded) ErrorCode() string             { return "ThroughputLimitExceeded" }
func (e *ThroughputLimitExceeded) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ThroughputLimitExceeded) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ThroughputLimitExceeded) HasMessage() bool {
	return e.Message != nil
}
func (e *ThroughputLimitExceeded) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *ThroughputLimitExceeded) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if you don’t wait at least 24 hours before changing the throughput
// mode, or decreasing the Provisioned Throughput value.
type TooManyRequests struct {
	Message *string

	ErrorCode_ *string
}

func (e *TooManyRequests) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyRequests) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyRequests) ErrorCode() string             { return "TooManyRequests" }
func (e *TooManyRequests) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyRequests) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *TooManyRequests) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *TooManyRequests) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyRequests) HasMessage() bool {
	return e.Message != nil
}

//
type UnsupportedAvailabilityZone struct {
	Message *string

	ErrorCode_ *string
}

func (e *UnsupportedAvailabilityZone) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *UnsupportedAvailabilityZone) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *UnsupportedAvailabilityZone) ErrorCode() string             { return "UnsupportedAvailabilityZone" }
func (e *UnsupportedAvailabilityZone) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *UnsupportedAvailabilityZone) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *UnsupportedAvailabilityZone) HasMessage() bool {
	return e.Message != nil
}
func (e *UnsupportedAvailabilityZone) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *UnsupportedAvailabilityZone) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}

// Returned if the AWS Backup service is not available in the region that the
// request was made.
type ValidationException struct {
	Message *string

	ErrorCode_ *string
}

func (e *ValidationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ValidationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ValidationException) ErrorCode() string             { return "ValidationException" }
func (e *ValidationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ValidationException) GetErrorCode_() string {
	return ptr.ToString(e.ErrorCode_)
}
func (e *ValidationException) HasErrorCode_() bool {
	return e.ErrorCode_ != nil
}
func (e *ValidationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ValidationException) HasMessage() bool {
	return e.Message != nil
}
