// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package efs

type LifeCycleState string

// Enum values for LifeCycleState
const (
	LifeCycleStateCreating  LifeCycleState = "creating"
	LifeCycleStateAvailable LifeCycleState = "available"
	LifeCycleStateUpdating  LifeCycleState = "updating"
	LifeCycleStateDeleting  LifeCycleState = "deleting"
	LifeCycleStateDeleted   LifeCycleState = "deleted"
)

func (enum LifeCycleState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LifeCycleState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type PerformanceMode string

// Enum values for PerformanceMode
const (
	PerformanceModeGeneralPurpose PerformanceMode = "generalPurpose"
	PerformanceModeMaxIo          PerformanceMode = "maxIO"
)

func (enum PerformanceMode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum PerformanceMode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ThroughputMode string

// Enum values for ThroughputMode
const (
	ThroughputModeBursting    ThroughputMode = "bursting"
	ThroughputModeProvisioned ThroughputMode = "provisioned"
)

func (enum ThroughputMode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ThroughputMode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TransitionToIARules string

// Enum values for TransitionToIARules
const (
	TransitionToIARulesAfter7Days  TransitionToIARules = "AFTER_7_DAYS"
	TransitionToIARulesAfter14Days TransitionToIARules = "AFTER_14_DAYS"
	TransitionToIARulesAfter30Days TransitionToIARules = "AFTER_30_DAYS"
	TransitionToIARulesAfter60Days TransitionToIARules = "AFTER_60_DAYS"
	TransitionToIARulesAfter90Days TransitionToIARules = "AFTER_90_DAYS"
)

func (enum TransitionToIARules) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TransitionToIARules) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
