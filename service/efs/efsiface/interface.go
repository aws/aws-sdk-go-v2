// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package efsiface provides an interface to enable mocking the Amazon Elastic File System service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package efsiface

import (
	"github.com/aws/aws-sdk-go-v2/service/efs"
	"github.com/aws/aws-sdk-go-v2/service/efs/types"
)

// ClientAPI provides an interface to enable mocking the
// efs.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // EFS.
//    func myFunc(svc efsiface.ClientAPI) bool {
//        // Make svc.CreateFileSystem request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := efs.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        efsiface.ClientPI
//    }
//    func (m *mockClientClient) CreateFileSystem(input *types.CreateFileSystemInput) (*types.CreateFileSystemOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	CreateFileSystemRequest(*types.CreateFileSystemInput) efs.CreateFileSystemRequest

	CreateMountTargetRequest(*types.CreateMountTargetInput) efs.CreateMountTargetRequest

	CreateTagsRequest(*types.CreateTagsInput) efs.CreateTagsRequest

	DeleteFileSystemRequest(*types.DeleteFileSystemInput) efs.DeleteFileSystemRequest

	DeleteMountTargetRequest(*types.DeleteMountTargetInput) efs.DeleteMountTargetRequest

	DeleteTagsRequest(*types.DeleteTagsInput) efs.DeleteTagsRequest

	DescribeFileSystemsRequest(*types.DescribeFileSystemsInput) efs.DescribeFileSystemsRequest

	DescribeLifecycleConfigurationRequest(*types.DescribeLifecycleConfigurationInput) efs.DescribeLifecycleConfigurationRequest

	DescribeMountTargetSecurityGroupsRequest(*types.DescribeMountTargetSecurityGroupsInput) efs.DescribeMountTargetSecurityGroupsRequest

	DescribeMountTargetsRequest(*types.DescribeMountTargetsInput) efs.DescribeMountTargetsRequest

	DescribeTagsRequest(*types.DescribeTagsInput) efs.DescribeTagsRequest

	ModifyMountTargetSecurityGroupsRequest(*types.ModifyMountTargetSecurityGroupsInput) efs.ModifyMountTargetSecurityGroupsRequest

	PutLifecycleConfigurationRequest(*types.PutLifecycleConfigurationInput) efs.PutLifecycleConfigurationRequest

	UpdateFileSystemRequest(*types.UpdateFileSystemInput) efs.UpdateFileSystemRequest
}

var _ ClientAPI = (*efs.Client)(nil)
