// Code generated by smithy-go-codegen DO NOT EDIT.

package dynamodbgov2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/dynamodbgov2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Restores the specified table to the specified point in time within
// EarliestRestorableDateTime and LatestRestorableDateTime. You can restore your
// table to any point in time during the last 35 days. Any number of users can
// execute up to 4 concurrent restores (any type of restore) in a given account.
// When you restore using point in time recovery, DynamoDB restores your table data
// to the state based on the selected date and time (day:hour:minute:second) to a
// new table. Along with data, the following are also included on the new restored
// table using point in time recovery:
//
//     * Global secondary indexes (GSIs)
//
//
// * Local secondary indexes (LSIs)
//
//     * Provisioned read and write capacity
//
//
// * Encryption settings All these settings come from the current settings of the
// source table at the time of restore.
//
//     <p>You must manually set up the
// following on the restored table:</p> <ul> <li> <p>Auto scaling policies</p>
// </li> <li> <p>IAM policies</p> </li> <li> <p>Amazon CloudWatch metrics and
// alarms</p> </li> <li> <p>Tags</p> </li> <li> <p>Stream settings</p> </li> <li>
// <p>Time to Live (TTL) settings</p> </li> <li> <p>Point in time recovery
// settings</p> </li> </ul>
func (c *Client) RestoreTableToPointInTime(ctx context.Context, params *RestoreTableToPointInTimeInput, optFns ...func(*Options)) (*RestoreTableToPointInTimeOutput, error) {
	stack := middleware.NewStack("RestoreTableToPointInTime", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	v4.AddHTTPSignerMiddleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addOpRestoreTableToPointInTimeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRestoreTableToPointInTime(options.Region), middleware.Before)
	addawsAwsjson10_serdeOpRestoreTableToPointInTimeMiddlewares(stack)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     c.ServiceID(),
			OperationName: "RestoreTableToPointInTime",
			Err:           err,
		}
	}
	out := result.(*RestoreTableToPointInTimeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RestoreTableToPointInTimeInput struct {
	// The billing mode of the restored table.
	BillingModeOverride types.BillingMode
	// List of global secondary indexes for the restored table. The indexes provided
	// should match existing secondary indexes. You can choose to exclude some or all
	// of the indexes at the time of restore.
	GlobalSecondaryIndexOverride []*types.GlobalSecondaryIndex
	// List of local secondary indexes for the restored table. The indexes provided
	// should match existing secondary indexes. You can choose to exclude some or all
	// of the indexes at the time of restore.
	LocalSecondaryIndexOverride []*types.LocalSecondaryIndex
	// Provisioned throughput settings for the restored table.
	ProvisionedThroughputOverride *types.ProvisionedThroughput
	// Time in the past to restore the table to.
	RestoreDateTime *time.Time
	// Name of the source table that is being restored.
	SourceTableName *string
	// The name of the new table to which it must be restored to.
	TargetTableName *string
	// Restore the table to the latest possible time. LatestRestorableDateTime is
	// typically 5 minutes before the current time.
	UseLatestRestorableTime *bool
}

type RestoreTableToPointInTimeOutput struct {
	// Represents the properties of a table.
	TableDescription *types.TableDescription

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpRestoreTableToPointInTimeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpRestoreTableToPointInTime{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpRestoreTableToPointInTime{}, middleware.After)
}

func newServiceMetadataMiddleware_opRestoreTableToPointInTime(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:         region,
		ServiceName:    "DynamoDB GoV2",
		ServiceID:      "dynamodbgov2",
		EndpointPrefix: "dynamodbgov2",
		SigningName:    "dynamodb",
		OperationName:  "RestoreTableToPointInTime",
	}
}
