// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch/enums"
)

type GetMetricDataInput struct {
	_ struct{} `type:"structure"`

	// The time stamp indicating the latest data to be returned.
	//
	// The value specified is exclusive; results include data points up to the specified
	// time stamp.
	//
	// For better performance, specify StartTime and EndTime values that align with
	// the value of the metric's Period and sync up with the beginning and end of
	// an hour. For example, if the Period of a metric is 5 minutes, specifying
	// 12:05 or 12:30 as EndTime can get a faster response from CloudWatch than
	// setting 12:07 or 12:29 as the EndTime.
	//
	// EndTime is a required field
	EndTime *time.Time `type:"timestamp" required:"true"`

	// The maximum number of data points the request should return before paginating.
	// If you omit this, the default of 100,800 is used.
	MaxDatapoints *int64 `type:"integer"`

	// The metric queries to be returned. A single GetMetricData call can include
	// as many as 100 MetricDataQuery structures. Each of these structures can specify
	// either a metric to retrieve, or a math expression to perform on retrieved
	// data.
	//
	// MetricDataQueries is a required field
	MetricDataQueries []MetricDataQuery `type:"list" required:"true"`

	// Include this value, if it was returned by the previous call, to get the next
	// set of data points.
	NextToken *string `type:"string"`

	// The order in which data points should be returned. TimestampDescending returns
	// the newest data first and paginates when the MaxDatapoints limit is reached.
	// TimestampAscending returns the oldest data first and paginates when the MaxDatapoints
	// limit is reached.
	ScanBy enums.ScanBy `type:"string" enum:"true"`

	// The time stamp indicating the earliest data to be returned.
	//
	// The value specified is inclusive; results include data points with the specified
	// time stamp.
	//
	// CloudWatch rounds the specified time stamp as follows:
	//
	//    * Start time less than 15 days ago - Round down to the nearest whole minute.
	//    For example, 12:32:34 is rounded down to 12:32:00.
	//
	//    * Start time between 15 and 63 days ago - Round down to the nearest 5-minute
	//    clock interval. For example, 12:32:34 is rounded down to 12:30:00.
	//
	//    * Start time greater than 63 days ago - Round down to the nearest 1-hour
	//    clock interval. For example, 12:32:34 is rounded down to 12:00:00.
	//
	// If you set Period to 5, 10, or 30, the start time of your request is rounded
	// down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions
	// of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for
	// the previous 10-second period, the start time of your request is rounded
	// down and you receive data from 01:05:10 to 01:05:20. If you make a query
	// at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds,
	// you receive data timestamped between 15:02:15 and 15:07:15.
	//
	// For better performance, specify StartTime and EndTime values that align with
	// the value of the metric's Period and sync up with the beginning and end of
	// an hour. For example, if the Period of a metric is 5 minutes, specifying
	// 12:05 or 12:30 as StartTime can get a faster response from CloudWatch than
	// setting 12:07 or 12:29 as the StartTime.
	//
	// StartTime is a required field
	StartTime *time.Time `type:"timestamp" required:"true"`
}

// String returns the string representation
func (s GetMetricDataInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetMetricDataInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetMetricDataInput"}

	if s.EndTime == nil {
		invalidParams.Add(aws.NewErrParamRequired("EndTime"))
	}

	if s.MetricDataQueries == nil {
		invalidParams.Add(aws.NewErrParamRequired("MetricDataQueries"))
	}

	if s.StartTime == nil {
		invalidParams.Add(aws.NewErrParamRequired("StartTime"))
	}
	if s.MetricDataQueries != nil {
		for i, v := range s.MetricDataQueries {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "MetricDataQueries", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetMetricDataOutput struct {
	_ struct{} `type:"structure"`

	// Contains a message about this GetMetricData operation, if the operation results
	// in such a message. An example of a message that may be returned is Maximum
	// number of allowed metrics exceeded. If there is a message, as much of the
	// operation as possible is still executed.
	//
	// A message appears here only if it is related to the global GetMetricData
	// operation. Any message about a specific metric returned by the operation
	// appears in the MetricDataResult object returned for that metric.
	Messages []MessageData `type:"list"`

	// The metrics that are returned, including the metric name, namespace, and
	// dimensions.
	MetricDataResults []MetricDataResult `type:"list"`

	// A token that marks the next batch of returned results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s GetMetricDataOutput) String() string {
	return awsutil.Prettify(s)
}
