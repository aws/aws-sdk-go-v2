// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudwatch

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a dashboard if it does not already exist, or updates an existing
// dashboard. If you update a dashboard, the entire contents are replaced with what
// you specify here. All dashboards in your account are global, not
// region-specific. A simple way to create a dashboard using PutDashboard is to
// copy an existing dashboard. To copy an existing dashboard using the console, you
// can load the dashboard and then use the View/edit source command in the Actions
// menu to display the JSON block for that dashboard. Another way to copy a
// dashboard is to use GetDashboard, and then use the data returned within
// DashboardBody as the template for the new dashboard when you call PutDashboard.
// When you create a dashboard with PutDashboard, a good practice is to add a text
// widget at the top of the dashboard with a message that the dashboard was created
// by script and should not be changed in the console. This message could also
// point console users to the location of the DashboardBody script or the
// CloudFormation template used to create the dashboard.
func (c *Client) PutDashboard(ctx context.Context, params *PutDashboardInput, optFns ...func(*Options)) (*PutDashboardOutput, error) {
	stack := middleware.NewStack("PutDashboard", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpPutDashboardMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutDashboardValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutDashboard(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutDashboard",
			Err:           err,
		}
	}
	out := result.(*PutDashboardOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutDashboardInput struct {
	// The detailed information about the dashboard in JSON format, including the
	// widgets to include and their location on the dashboard. This parameter is
	// required. For more information about the syntax, see Dashboard Body Structure
	// and Syntax
	// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
	DashboardBody *string
	// The name of the dashboard. If a dashboard with this name already exists, this
	// call modifies that dashboard, replacing its current contents. Otherwise, a new
	// dashboard is created. The maximum length is 255, and valid characters are A-Z,
	// a-z, 0-9, "-", and "_". This parameter is required.
	DashboardName *string
}

type PutDashboardOutput struct {
	// If the input for PutDashboard was correct and the dashboard was successfully
	// created or modified, this result is empty. If this result includes only warning
	// messages, then the input was valid enough for the dashboard to be created or
	// modified, but some elements of the dashboard might not render. If this result
	// includes error messages, the input was not valid and the operation failed.
	DashboardValidationMessages []*types.DashboardValidationMessage

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpPutDashboardMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpPutDashboard{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpPutDashboard{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutDashboard(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "monitoring",
		OperationName: "PutDashboard",
	}
}
