// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatch

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
)

const opPutDashboard = "PutDashboard"

// PutDashboardRequest returns a request value for making API operation for
// Amazon CloudWatch.
//
// Creates a dashboard if it does not already exist, or updates an existing
// dashboard. If you update a dashboard, the entire contents are replaced with
// what you specify here.
//
// All dashboards in your account are global, not region-specific.
//
// A simple way to create a dashboard using PutDashboard is to copy an existing
// dashboard. To copy an existing dashboard using the console, you can load
// the dashboard and then use the View/edit source command in the Actions menu
// to display the JSON block for that dashboard. Another way to copy a dashboard
// is to use GetDashboard, and then use the data returned within DashboardBody
// as the template for the new dashboard when you call PutDashboard.
//
// When you create a dashboard with PutDashboard, a good practice is to add
// a text widget at the top of the dashboard with a message that the dashboard
// was created by script and should not be changed in the console. This message
// could also point console users to the location of the DashboardBody script
// or the CloudFormation template used to create the dashboard.
//
//    // Example sending a request using PutDashboardRequest.
//    req := client.PutDashboardRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/monitoring-2010-08-01/PutDashboard
func (c *Client) PutDashboardRequest(input *types.PutDashboardInput) PutDashboardRequest {
	op := &aws.Operation{
		Name:       opPutDashboard,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutDashboardInput{}
	}

	req := c.newRequest(op, input, &types.PutDashboardOutput{})
	return PutDashboardRequest{Request: req, Input: input, Copy: c.PutDashboardRequest}
}

// PutDashboardRequest is the request type for the
// PutDashboard API operation.
type PutDashboardRequest struct {
	*aws.Request
	Input *types.PutDashboardInput
	Copy  func(*types.PutDashboardInput) PutDashboardRequest
}

// Send marshals and sends the PutDashboard API request.
func (r PutDashboardRequest) Send(ctx context.Context) (*PutDashboardResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutDashboardResponse{
		PutDashboardOutput: r.Request.Data.(*types.PutDashboardOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutDashboardResponse is the response type for the
// PutDashboard API operation.
type PutDashboardResponse struct {
	*types.PutDashboardOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutDashboard request.
func (r *PutDashboardResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
