// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatch

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/query"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
)

const opPutMetricAlarm = "PutMetricAlarm"

// PutMetricAlarmRequest returns a request value for making API operation for
// Amazon CloudWatch.
//
// Creates or updates an alarm and associates it with the specified metric,
// metric math expression, or anomaly detection model.
//
// Alarms based on anomaly detection models cannot have Auto Scaling actions.
//
// When this operation creates an alarm, the alarm state is immediately set
// to INSUFFICIENT_DATA. The alarm is then evaluated and its state is set appropriately.
// Any actions associated with the new state are then executed.
//
// When you update an existing alarm, its state is left unchanged, but the update
// completely overwrites the previous configuration of the alarm.
//
// If you are an IAM user, you must have Amazon EC2 permissions for some alarm
// operations:
//
//    * iam:CreateServiceLinkedRole for all alarms with EC2 actions
//
//    * ec2:DescribeInstanceStatus and ec2:DescribeInstances for all alarms
//    on EC2 instance status metrics
//
//    * ec2:StopInstances for alarms with stop actions
//
//    * ec2:TerminateInstances for alarms with terminate actions
//
//    * No specific permissions are needed for alarms with recover actions
//
// If you have read/write permissions for Amazon CloudWatch but not for Amazon
// EC2, you can still create an alarm, but the stop or terminate actions are
// not performed. However, if you are later granted the required permissions,
// the alarm actions that you created earlier are performed.
//
// If you are using an IAM role (for example, an EC2 instance profile), you
// cannot stop or terminate the instance using alarm actions. However, you can
// still see the alarm state and perform any other actions such as Amazon SNS
// notifications or Auto Scaling policies.
//
// If you are using temporary security credentials granted using AWS STS, you
// cannot stop or terminate an EC2 instance using alarm actions.
//
// The first time you create an alarm in the AWS Management Console, the CLI,
// or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked
// role for you. The service-linked role is called AWSServiceRoleForCloudWatchEvents.
// For more information, see AWS service-linked role (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role).
//
//    // Example sending a request using PutMetricAlarmRequest.
//    req := client.PutMetricAlarmRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/monitoring-2010-08-01/PutMetricAlarm
func (c *Client) PutMetricAlarmRequest(input *types.PutMetricAlarmInput) PutMetricAlarmRequest {
	op := &aws.Operation{
		Name:       opPutMetricAlarm,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutMetricAlarmInput{}
	}

	req := c.newRequest(op, input, &types.PutMetricAlarmOutput{})
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return PutMetricAlarmRequest{Request: req, Input: input, Copy: c.PutMetricAlarmRequest}
}

// PutMetricAlarmRequest is the request type for the
// PutMetricAlarm API operation.
type PutMetricAlarmRequest struct {
	*aws.Request
	Input *types.PutMetricAlarmInput
	Copy  func(*types.PutMetricAlarmInput) PutMetricAlarmRequest
}

// Send marshals and sends the PutMetricAlarm API request.
func (r PutMetricAlarmRequest) Send(ctx context.Context) (*PutMetricAlarmResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutMetricAlarmResponse{
		PutMetricAlarmOutput: r.Request.Data.(*types.PutMetricAlarmOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutMetricAlarmResponse is the response type for the
// PutMetricAlarm API operation.
type PutMetricAlarmResponse struct {
	*types.PutMetricAlarmOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutMetricAlarm request.
func (r *PutMetricAlarmResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
