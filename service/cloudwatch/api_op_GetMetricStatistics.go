// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatch

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
)

const opGetMetricStatistics = "GetMetricStatistics"

// GetMetricStatisticsRequest returns a request value for making API operation for
// Amazon CloudWatch.
//
// Gets statistics for the specified metric.
//
// The maximum number of data points returned from a single call is 1,440. If
// you request more than 1,440 data points, CloudWatch returns an error. To
// reduce the number of data points, you can narrow the specified time range
// and make multiple requests across adjacent time ranges, or you can increase
// the specified period. Data points are not returned in chronological order.
//
// CloudWatch aggregates data points based on the length of the period that
// you specify. For example, if you request statistics with a one-hour period,
// CloudWatch aggregates all data points with time stamps that fall within each
// one-hour period. Therefore, the number of values aggregated by CloudWatch
// is larger than the number of data points returned.
//
// CloudWatch needs raw data points to calculate percentile statistics. If you
// publish data using a statistic set instead, you can only retrieve percentile
// statistics for this data if one of the following conditions is true:
//
//    * The SampleCount value of the statistic set is 1.
//
//    * The Min and the Max values of the statistic set are equal.
//
// Percentile statistics are not available for metrics when any of the metric
// values are negative numbers.
//
// Amazon CloudWatch retains metric data as follows:
//
//    * Data points with a period of less than 60 seconds are available for
//    3 hours. These data points are high-resolution metrics and are available
//    only for custom metrics that have been defined with a StorageResolution
//    of 1.
//
//    * Data points with a period of 60 seconds (1-minute) are available for
//    15 days.
//
//    * Data points with a period of 300 seconds (5-minute) are available for
//    63 days.
//
//    * Data points with a period of 3600 seconds (1 hour) are available for
//    455 days (15 months).
//
// Data points that are initially published with a shorter period are aggregated
// together for long-term storage. For example, if you collect data using a
// period of 1 minute, the data remains available for 15 days with 1-minute
// resolution. After 15 days, this data is still available, but is aggregated
// and retrievable only with a resolution of 5 minutes. After 63 days, the data
// is further aggregated and is available with a resolution of 1 hour.
//
// CloudWatch started retaining 5-minute and 1-hour metric data as of July 9,
// 2016.
//
// For information about metrics and dimensions supported by AWS services, see
// the Amazon CloudWatch Metrics and Dimensions Reference (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html)
// in the Amazon CloudWatch User Guide.
//
//    // Example sending a request using GetMetricStatisticsRequest.
//    req := client.GetMetricStatisticsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/monitoring-2010-08-01/GetMetricStatistics
func (c *Client) GetMetricStatisticsRequest(input *types.GetMetricStatisticsInput) GetMetricStatisticsRequest {
	op := &aws.Operation{
		Name:       opGetMetricStatistics,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.GetMetricStatisticsInput{}
	}

	req := c.newRequest(op, input, &types.GetMetricStatisticsOutput{})
	return GetMetricStatisticsRequest{Request: req, Input: input, Copy: c.GetMetricStatisticsRequest}
}

// GetMetricStatisticsRequest is the request type for the
// GetMetricStatistics API operation.
type GetMetricStatisticsRequest struct {
	*aws.Request
	Input *types.GetMetricStatisticsInput
	Copy  func(*types.GetMetricStatisticsInput) GetMetricStatisticsRequest
}

// Send marshals and sends the GetMetricStatistics API request.
func (r GetMetricStatisticsRequest) Send(ctx context.Context) (*GetMetricStatisticsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetMetricStatisticsResponse{
		GetMetricStatisticsOutput: r.Request.Data.(*types.GetMetricStatisticsOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetMetricStatisticsResponse is the response type for the
// GetMetricStatistics API operation.
type GetMetricStatisticsResponse struct {
	*types.GetMetricStatisticsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetMetricStatistics request.
func (r *GetMetricStatisticsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
