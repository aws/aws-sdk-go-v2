// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Initiates a snapshot of a volume.  <p>AWS Storage Gateway provides the ability
// to back up point-in-time snapshots of your data to Amazon Simple Storage (Amazon
// S3) for durable off-site recovery, as well as import the data to an Amazon
// Elastic Block Store (EBS) volume in Amazon Elastic Compute Cloud (EC2). You can
// take snapshots of your gateway volume on a scheduled or ad hoc basis. This API
// enables you to take ad-hoc snapshot. For more information, see <a
// href="https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#SchedulingSnapshot">Editing
// a snapshot schedule</a>.</p> <p>In the CreateSnapshot request you identify the
// volume by providing its Amazon Resource Name (ARN). You must also provide
// description for the snapshot. When AWS Storage Gateway takes the snapshot of
// specified volume, the snapshot and description appears in the AWS Storage
// Gateway Console. In response, AWS Storage Gateway returns you a snapshot ID. You
// can use this snapshot ID to check the snapshot progress or later use it when you
// want to create a volume from a snapshot. This operation is only supported in
// stored and cached volume gateway type.</p> <note> <p>To list or delete a
// snapshot, you must use the Amazon EC2 API. For more information, see <a
// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSnapshots.html">DescribeSnapshots</a>
// or <a
// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteSnapshot.html">DeleteSnapshot</a>
// in the <i>Amazon Elastic Compute Cloud API Reference</i>.</p> </note>
// <important> <p>Volume and snapshot IDs are changing to a longer length ID
// format. For more information, see the important note on the <a
// href="https://docs.aws.amazon.com/storagegateway/latest/APIReference/Welcome.html">Welcome</a>
// page.</p> </important>
func (c *Client) CreateSnapshot(ctx context.Context, params *CreateSnapshotInput, optFns ...func(*Options)) (*CreateSnapshotOutput, error) {
	stack := middleware.NewStack("CreateSnapshot", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateSnapshotMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateSnapshotValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateSnapshot(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateSnapshot",
			Err:           err,
		}
	}
	out := result.(*CreateSnapshotOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A JSON object containing one or more of the following fields:  <ul> <li> <p>
// <a>CreateSnapshotInput$SnapshotDescription</a> </p> </li> <li> <p>
// <a>CreateSnapshotInput$VolumeARN</a> </p> </li> </ul>
type CreateSnapshotInput struct {
	// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes () operation
	// to return a list of gateway volumes.
	VolumeARN *string
	// Textual description of the snapshot that appears in the Amazon EC2 console,
	// Elastic Block Store snapshots panel in the Description field, and in the AWS
	// Storage Gateway snapshot Details pane, Description field.
	SnapshotDescription *string
	// A list of up to 50 tags that can be assigned to a snapshot. Each tag is a
	// key-value pair.  <note> <p>Valid characters for key and value are letters,
	// spaces, and numbers representable in UTF-8 format, and the following special
	// characters: + - = . _ : / @. The maximum length of a tag's key is 128
	// characters, and the maximum length for a tag's value is 256.</p> </note>
	Tags []*types.Tag
}

// A JSON object containing the following fields:
type CreateSnapshotOutput struct {
	// The snapshot ID that is used to refer to the snapshot in future operations such
	// as describing snapshots (Amazon Elastic Compute Cloud API DescribeSnapshots) or
	// creating a volume from a snapshot (CreateStorediSCSIVolume ()).
	SnapshotId *string
	// The Amazon Resource Name (ARN) of the volume of which the snapshot was taken.
	VolumeARN *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateSnapshotMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateSnapshot{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateSnapshot{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateSnapshot(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "CreateSnapshot",
	}
}
