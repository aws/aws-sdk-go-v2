// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package storagegateway

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
)

const opRefreshCache = "RefreshCache"

// RefreshCacheRequest returns a request value for making API operation for
// AWS Storage Gateway.
//
// Refreshes the cache for the specified file share. This operation finds objects
// in the Amazon S3 bucket that were added, removed or replaced since the gateway
// last listed the bucket's contents and cached the results. This operation
// is only supported in the file gateway type. You can subscribe to be notified
// through an Amazon CloudWatch event when your RefreshCache operation completes.
// For more information, see Getting Notified About File Operations (https://docs.aws.amazon.com/storagegateway/latest/userguide/monitoring-file-gateway.html#get-notification).
//
// When this API is called, it only initiates the refresh operation. When the
// API call completes and returns a success code, it doesn't necessarily mean
// that the file refresh has completed. You should use the refresh-complete
// notification to determine that the operation has completed before you check
// for new files on the gateway file share. You can subscribe to be notified
// through an CloudWatch event when your RefreshCache operation completes.
//
// Throttle limit: This API is asynchronous so the gateway will accept no more
// than two refreshes at any time. We recommend using the refresh-complete CloudWatch
// event notification before issuing additional requests. For more information,
// see Getting Notified About File Operations (https://docs.aws.amazon.com/storagegateway/latest/userguide/monitoring-file-gateway.html#get-notification).
//
// If you invoke the RefreshCache API when two requests are already being processed,
// any new request will cause an InvalidGatewayRequestException error because
// too many requests were sent to the server.
//
// For more information, see "https://docs.aws.amazon.com/storagegateway/latest/userguide/monitoring-file-gateway.html#get-notification".
//
//    // Example sending a request using RefreshCacheRequest.
//    req := client.RefreshCacheRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/storagegateway-2013-06-30/RefreshCache
func (c *Client) RefreshCacheRequest(input *types.RefreshCacheInput) RefreshCacheRequest {
	op := &aws.Operation{
		Name:       opRefreshCache,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RefreshCacheInput{}
	}

	req := c.newRequest(op, input, &types.RefreshCacheOutput{})
	return RefreshCacheRequest{Request: req, Input: input, Copy: c.RefreshCacheRequest}
}

// RefreshCacheRequest is the request type for the
// RefreshCache API operation.
type RefreshCacheRequest struct {
	*aws.Request
	Input *types.RefreshCacheInput
	Copy  func(*types.RefreshCacheInput) RefreshCacheRequest
}

// Send marshals and sends the RefreshCache API request.
func (r RefreshCacheRequest) Send(ctx context.Context) (*RefreshCacheResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RefreshCacheResponse{
		RefreshCacheOutput: r.Request.Data.(*types.RefreshCacheOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RefreshCacheResponse is the response type for the
// RefreshCache API operation.
type RefreshCacheResponse struct {
	*types.RefreshCacheOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RefreshCache request.
func (r *RefreshCacheResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
