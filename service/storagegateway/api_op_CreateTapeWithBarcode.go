// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a virtual tape by using your own barcode. You write data to the virtual
// tape and then archive the tape. A barcode is unique and can not be reused if it
// has already been used on a tape. This applies to barcodes used on deleted tapes.
// This operation is only supported in the tape gateway type.  <note> <p>Cache
// storage must be allocated to the gateway before you can create a virtual tape.
// Use the <a>AddCache</a> operation to add cache storage to a gateway.</p> </note>
func (c *Client) CreateTapeWithBarcode(ctx context.Context, params *CreateTapeWithBarcodeInput, optFns ...func(*Options)) (*CreateTapeWithBarcodeOutput, error) {
	stack := middleware.NewStack("CreateTapeWithBarcode", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateTapeWithBarcodeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateTapeWithBarcodeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateTapeWithBarcode(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateTapeWithBarcode",
			Err:           err,
		}
	}
	out := result.(*CreateTapeWithBarcodeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// CreateTapeWithBarcodeInput
type CreateTapeWithBarcodeInput struct {
	// Set to true to use Amazon S3 server-side encryption with your own AWS KMS key,
	// or false to use a key managed by Amazon S3. Optional.  <p>Valid Values:
	// <code>true</code> | <code>false</code> </p>
	KMSEncrypted *bool
	// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for
	// Amazon S3 server-side encryption. Storage Gateway does not support asymmetric
	// CMKs. This value can only be set when KMSEncrypted is true. Optional.
	KMSKey *string
	// The barcode that you want to assign to the tape.  <note> <p>Barcodes cannot be
	// reused. This includes barcodes used for tapes that have been deleted.</p>
	// </note>
	TapeBarcode *string
	// The ID of the pool that you want to add your tape to for archiving. The tape in
	// this pool is archived in the S3 storage class that is associated with the pool.
	// When you use your backup application to eject the tape, the tape is archived
	// directly into the storage class (S3 Glacier or S3 Deep Archive) that corresponds
	// to the pool.  <p>Valid Values: <code>GLACIER</code> | <code>DEEP_ARCHIVE</code>
	// </p>
	PoolId *string
	// The size, in bytes, of the virtual tape that you want to create.  <note> <p>The
	// size must be aligned by gigabyte (1024*1024*1024 bytes).</p> </note>
	TapeSizeInBytes *int64
	// The unique Amazon Resource Name (ARN) that represents the gateway to associate
	// the virtual tape with. Use the ListGateways () operation to return a list of
	// gateways for your account and AWS Region.
	GatewayARN *string
	// A list of up to 50 tags that can be assigned to a virtual tape that has a
	// barcode. Each tag is a key-value pair.  <note> <p>Valid characters for key and
	// value are letters, spaces, and numbers representable in UTF-8 format, and the
	// following special characters: + - = . _ : / @. The maximum length of a tag's key
	// is 128 characters, and the maximum length for a tag's value is 256.</p> </note>
	Tags []*types.Tag
}

// CreateTapeOutput
type CreateTapeWithBarcodeOutput struct {
	// A unique Amazon Resource Name (ARN) that represents the virtual tape that was
	// created.
	TapeARN *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateTapeWithBarcodeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateTapeWithBarcode{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateTapeWithBarcode{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateTapeWithBarcode(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "CreateTapeWithBarcode",
	}
}
