// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Activates the gateway you previously deployed on your host. In the activation
// process, you specify information such as the AWS Region that you want to use for
// storing snapshots or tapes, the time zone for scheduled snapshots the gateway
// snapshot schedule window, an activation key, and a name for your gateway. The
// activation process also associates your gateway with your account. For more
// information, see UpdateGatewayInformation (). You must turn on the gateway VM
// before you can activate your gateway.
func (c *Client) ActivateGateway(ctx context.Context, params *ActivateGatewayInput, optFns ...func(*Options)) (*ActivateGatewayOutput, error) {
	stack := middleware.NewStack("ActivateGateway", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpActivateGatewayMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpActivateGatewayValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opActivateGateway(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ActivateGateway",
			Err:           err,
		}
	}
	out := result.(*ActivateGatewayOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A JSON object containing one or more of the following fields:  <ul> <li> <p>
// <a>ActivateGatewayInput$ActivationKey</a> </p> </li> <li> <p>
// <a>ActivateGatewayInput$GatewayName</a> </p> </li> <li> <p>
// <a>ActivateGatewayInput$GatewayRegion</a> </p> </li> <li> <p>
// <a>ActivateGatewayInput$GatewayTimezone</a> </p> </li> <li> <p>
// <a>ActivateGatewayInput$GatewayType</a> </p> </li> <li> <p>
// <a>ActivateGatewayInput$MediumChangerType</a> </p> </li> <li> <p>
// <a>ActivateGatewayInput$TapeDriveType</a> </p> </li> </ul>
type ActivateGatewayInput struct {
	// A value that defines the type of gateway to activate. The type specified is
	// critical to all later functions of the gateway and cannot be changed after
	// activation. The default value is CACHED.  <p>Valid Values: <code>STORED</code> |
	// <code>CACHED</code> | <code>VTL</code> | <code>FILE_S3</code> </p>
	GatewayType *string
	// A value that indicates the AWS Region where you want to store your data. The
	// gateway AWS Region specified must be the same AWS Region as the AWS Region in
	// your Host header in the request. For more information about available AWS
	// Regions and endpoints for AWS Storage Gateway, see AWS Storage Gateway endpoints
	// and quotas (https://docs.aws.amazon.com/general/latest/gr/sg.html) in the AWS
	// General Reference.  <p>Valid Values: See <a
	// href="https://docs.aws.amazon.com/general/latest/gr/sg.html">AWS Storage Gateway
	// endpoints and quotas</a> in the <i>AWS General Reference</i>. </p>
	GatewayRegion *string
	// The value that indicates the type of medium changer to use for tape gateway.
	// This field is optional.  <p>Valid Values: <code>STK-L700</code> |
	// <code>AWS-Gateway-VTL</code> </p>
	MediumChangerType *string
	// Your gateway activation key. You can obtain the activation key by sending an
	// HTTP GET request with redirects enabled to the gateway IP address (port 80). The
	// redirect URL returned in the response provides you the activation key for your
	// gateway in the query string parameter activationKey. It may also include other
	// activation-related parameters, however, these are merely defaults -- the
	// arguments you pass to the ActivateGateway API call determine the actual
	// configuration of your gateway.  <p>For more information, see <a
	// href="https://docs.aws.amazon.com/storagegateway/latest/userguide/get-activation-key.html">Getting
	// activation key</a> in the <i>AWS Storage Gateway User Guide</i>.</p>
	ActivationKey *string
	// The value that indicates the type of tape drive to use for tape gateway. This
	// field is optional.  <p>Valid Values: <code>IBM-ULT3580-TD5</code> </p>
	TapeDriveType *string
	// A value that indicates the time zone you want to set for the gateway. The time
	// zone is of the format "GMT-hr:mm" or "GMT+hr:mm". For example, GMT-4:00
	// indicates the time is 4 hours behind GMT. GMT+2:00 indicates the time is 2 hours
	// ahead of GMT. The time zone is used, for example, for scheduling snapshots and
	// your gateway's maintenance schedule.
	GatewayTimezone *string
	// The name you configured for your gateway.
	GatewayName *string
	// A list of up to 50 tags that you can assign to the gateway. Each tag is a
	// key-value pair.  <note> <p>Valid characters for key and value are letters,
	// spaces, and numbers that can be represented in UTF-8 format, and the following
	// special characters: + - = . _ : / @. The maximum length of a tag's key is 128
	// characters, and the maximum length for a tag's value is 256 characters.</p>
	// </note>
	Tags []*types.Tag
}

// AWS Storage Gateway returns the Amazon Resource Name (ARN) of the activated
// gateway. It is a string made of information such as your account, gateway name,
// and AWS Region. This ARN is used to reference the gateway in other API
// operations as well as resource-based authorization.  <note> <p>For gateways
// activated prior to September 02, 2015, the gateway ARN contains the gateway name
// rather than the gateway ID. Changing the name of the gateway has no effect on
// the gateway ARN.</p> </note>
type ActivateGatewayOutput struct {
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpActivateGatewayMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpActivateGateway{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpActivateGateway{}, middleware.After)
}

func newServiceMetadataMiddleware_opActivateGateway(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "ActivateGateway",
	}
}
