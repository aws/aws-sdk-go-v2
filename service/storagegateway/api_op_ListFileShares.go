// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets a list of the file shares for a specific file gateway, or the list of file
// shares that belong to the calling user account. This operation is only supported
// for file gateways.
func (c *Client) ListFileShares(ctx context.Context, params *ListFileSharesInput, optFns ...func(*Options)) (*ListFileSharesOutput, error) {
	stack := middleware.NewStack("ListFileShares", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListFileSharesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListFileShares(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListFileShares",
			Err:           err,
		}
	}
	out := result.(*ListFileSharesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// ListFileShareInput
type ListFileSharesInput struct {
	// The Amazon Resource Name (ARN) of the gateway whose file shares you want to
	// list. If this field is not present, all file shares under your account are
	// listed.
	GatewayARN *string
	// The maximum number of file shares to return in the response. The value must be
	// an integer with a value greater than zero. Optional.
	Limit *int32
	// Opaque pagination token returned from a previous ListFileShares operation. If
	// present, Marker specifies where to continue the list from after a previous call
	// to ListFileShares. Optional.
	Marker *string
}

// ListFileShareOutput
type ListFileSharesOutput struct {
	// If the request includes Marker, the response returns that value in this field.
	Marker *string
	// An array of information about the file gateway's file shares.
	FileShareInfoList []*types.FileShareInfo
	// If a value is present, there are more file shares to return. In a subsequent
	// request, use NextMarker as the value for Marker to retrieve the next set of file
	// shares.
	NextMarker *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListFileSharesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListFileShares{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListFileShares{}, middleware.After)
}

func newServiceMetadataMiddleware_opListFileShares(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "ListFileShares",
	}
}
