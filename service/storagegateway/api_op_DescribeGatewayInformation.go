// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns metadata about a gateway such as its name, network interfaces,
// configured time zone, and the state (whether the gateway is running or not). To
// specify which gateway to describe, use the Amazon Resource Name (ARN) of the
// gateway in your request.
func (c *Client) DescribeGatewayInformation(ctx context.Context, params *DescribeGatewayInformationInput, optFns ...func(*Options)) (*DescribeGatewayInformationOutput, error) {
	stack := middleware.NewStack("DescribeGatewayInformation", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeGatewayInformationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeGatewayInformationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeGatewayInformation(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeGatewayInformation",
			Err:           err,
		}
	}
	out := result.(*DescribeGatewayInformationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A JSON object containing the ID of the gateway.
type DescribeGatewayInformationInput struct {
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
}

// A JSON object containing the following fields:
type DescribeGatewayInformationOutput struct {
	// The name you configured for your gateway.
	GatewayName *string
	// A NetworkInterface () array that contains descriptions of the gateway network
	// interfaces.
	GatewayNetworkInterfaces []*types.NetworkInterface
	// The date on which an update to the gateway is available. This date is in the
	// time zone of the gateway. If the gateway is not available for an update this
	// field is not returned in the response.
	NextUpdateAvailabilityDate *string
	// The AWS Region where the Amazon EC2 instance is located.
	Ec2InstanceRegion *string
	// The date on which the last software update was applied to the gateway. If the
	// gateway has never been updated, this field does not return a value in the
	// response.
	LastSoftwareUpdate *string
	// The Amazon Resource Name (ARN) of the Amazon CloudWatch Log Group that is used
	// to monitor events in the gateway.
	CloudWatchLogGroupARN *string
	// The unique identifier assigned to your gateway during activation. This ID
	// becomes part of the gateway Amazon Resource Name (ARN), which you use as input
	// for other operations.
	GatewayId *string
	// The type of the gateway.
	GatewayType *string
	// The type of hypervisor environment used by the host.
	HostEnvironment types.HostEnvironment
	// The configuration settings for the virtual private cloud (VPC) endpoint for your
	// gateway.
	VPCEndpoint *string
	// A list of up to 50 tags assigned to the gateway, sorted alphabetically by key
	// name. Each tag is a key-value pair. For a gateway with more than 10 tags
	// assigned, you can view all tags using the ListTagsForResource API operation.
	Tags []*types.Tag
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
	// A value that indicates the time zone configured for the gateway.
	GatewayTimezone *string
	// A value that indicates the operating state of the gateway.
	GatewayState *string
	// The type of endpoint for your gateway.  <p>Valid Values: <code>STANDARD</code> |
	// <code>FIPS</code> </p>
	EndpointType *string
	// The ID of the Amazon EC2 instance that was used to launch the gateway.
	Ec2InstanceId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeGatewayInformationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeGatewayInformation{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeGatewayInformation{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeGatewayInformation(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "DescribeGatewayInformation",
	}
}
