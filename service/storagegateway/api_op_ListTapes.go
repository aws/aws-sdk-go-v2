// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Lists virtual tapes in your virtual tape library (VTL) and your virtual tape
// shelf (VTS). You specify the tapes to list by specifying one or more tape Amazon
// Resource Names (ARNs). If you don't specify a tape ARN, the operation lists all
// virtual tapes in both your VTL and VTS. This operation supports pagination. By
// default, the operation returns a maximum of up to 100 tapes. You can optionally
// specify the Limit parameter in the body to limit the number of tapes in the
// response. If the number of tapes returned in the response is truncated, the
// response includes a Marker element that you can use in your subsequent request
// to retrieve the next set of tapes. This operation is only supported in the tape
// gateway type.
func (c *Client) ListTapes(ctx context.Context, params *ListTapesInput, optFns ...func(*Options)) (*ListTapesOutput, error) {
	if params == nil {
		params = &ListTapesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListTapes", params, optFns, addOperationListTapesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListTapesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A JSON object that contains one or more of the following fields:
//
//     *
// ListTapesInput$Limit
//
//     * ListTapesInput$Marker
//
//     * ListTapesInput$TapeARNs
type ListTapesInput struct {

	// An optional number limit for the tapes in the list returned by this call.
	Limit *int32

	// A string that indicates the position at which to begin the returned list of
	// tapes.
	Marker *string

	// The Amazon Resource Name (ARN) of each of the tapes you want to list. If you
	// don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.
	TapeARNs []*string
}

// A JSON object containing the following fields:
//
//     * ListTapesOutput$Marker
//
//
// * ListTapesOutput$VolumeInfos
type ListTapesOutput struct {

	// A string that indicates the position at which to begin returning the next list
	// of tapes. Use the marker in your next request to continue pagination of tapes.
	// If there are no more tapes to list, this element does not appear in the response
	// body.
	Marker *string

	// An array of TapeInfo objects, where each object describes a single tape. If
	// there are no tapes in the tape library or VTS, then the TapeInfos is an empty
	// array.
	TapeInfos []*types.TapeInfo

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListTapesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpListTapes{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpListTapes{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListTapes(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opListTapes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "ListTapes",
	}
}
