// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Lists gateways owned by an AWS account in an AWS Region specified in the
// request. The returned list is ordered by gateway Amazon Resource Name (ARN).
// <p>By default, the operation returns a maximum of 100 gateways. This operation
// supports pagination that allows you to optionally reduce the number of gateways
// returned in a response.</p> <p>If you have more gateways than are returned in a
// response (that is, the response returns only a truncated list of your gateways),
// the response contains a marker that you can specify in your next request to
// fetch the next page of gateways.</p>
func (c *Client) ListGateways(ctx context.Context, params *ListGatewaysInput, optFns ...func(*Options)) (*ListGatewaysOutput, error) {
	stack := middleware.NewStack("ListGateways", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListGatewaysMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListGateways(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListGateways",
			Err:           err,
		}
	}
	out := result.(*ListGatewaysOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A JSON object containing zero or more of the following fields:  <ul> <li> <p>
// <a>ListGatewaysInput$Limit</a> </p> </li> <li> <p>
// <a>ListGatewaysInput$Marker</a> </p> </li> </ul>
type ListGatewaysInput struct {
	// An opaque string that indicates the position at which to begin the returned list
	// of gateways.
	Marker *string
	// Specifies that the list of gateways returned be limited to the specified number
	// of items.
	Limit *int32
}

type ListGatewaysOutput struct {
	// Use the marker in your next request to fetch the next set of gateways in the
	// list. If there are no more gateways to list, this field does not appear in the
	// response.
	Marker *string
	// An array of GatewayInfo () objects.
	Gateways []*types.GatewayInfo

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListGatewaysMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListGateways{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListGateways{}, middleware.After)
}

func newServiceMetadataMiddleware_opListGateways(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "ListGateways",
	}
}
