// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Configures one or more gateway local disks as working storage for a gateway.
// This operation is only supported in the stored volume gateway type. This
// operation is deprecated in cached volume API version 20120630. Use
// AddUploadBuffer () instead.  <note> <p>Working storage is also referred to as
// upload buffer. You can also use the <a>AddUploadBuffer</a> operation to add
// upload buffer to a stored volume gateway.</p> </note> <p>In the request, you
// specify the gateway Amazon Resource Name (ARN) to which you want to add working
// storage, and one or more disk IDs that you want to configure as working
// storage.</p>
func (c *Client) AddWorkingStorage(ctx context.Context, params *AddWorkingStorageInput, optFns ...func(*Options)) (*AddWorkingStorageOutput, error) {
	if params == nil {
		params = &AddWorkingStorageInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "AddWorkingStorage", params, optFns, addOperationAddWorkingStorageMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*AddWorkingStorageOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A JSON object containing one or more of the following fields:  <ul> <li> <p>
// <a>AddWorkingStorageInput$DiskIds</a> </p> </li> </ul>
type AddWorkingStorageInput struct {

	// An array of strings that identify disks that are to be configured as working
	// storage. Each string has a minimum length of 1 and maximum length of 300. You
	// can get the disk IDs from the ListLocalDisks () API.
	//
	// This member is required.
	DiskIds []*string

	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	//
	// This member is required.
	GatewayARN *string
}

// A JSON object containing the Amazon Resource Name (ARN) of the gateway for which
// working storage was configured.
type AddWorkingStorageOutput struct {

	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationAddWorkingStorageMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpAddWorkingStorage{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpAddWorkingStorage{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAddWorkingStorageValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAddWorkingStorage(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opAddWorkingStorage(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "AddWorkingStorage",
	}
}
