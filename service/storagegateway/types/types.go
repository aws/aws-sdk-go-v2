// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// Information about the gateway's automatic tape creation policies, including the
// automatic tape creation rules and the gateway that is using the policies.
type AutomaticTapeCreationPolicyInfo struct {
	// An automatic tape creation policy consists of a list of automatic tape creation
	// rules. This returns the rules that determine when and how to automatically
	// create new tapes.
	AutomaticTapeCreationRules []*AutomaticTapeCreationRule
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
}

// An automatic tape creation policy consists of automatic tape creation rules
// where each rule defines when and how to create new tapes.
type AutomaticTapeCreationRule struct {
	// The ID of the pool that you want to add your tape to for archiving. The tape in
	// this pool is archived in the Amazon S3 storage class that is associated with the
	// pool. When you use your backup application to eject the tape, the tape is
	// archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive)
	// that corresponds to the pool.  <p>Valid Values: <code>GLACIER</code> |
	// <code>DEEP_ARCHIVE</code> </p>
	PoolId *string
	// The size, in bytes, of the virtual tape capacity.
	TapeSizeInBytes *int64
	// The minimum number of available virtual tapes that the gateway maintains at all
	// times. If the number of tapes on the gateway goes below this value, the gateway
	// creates as many new tapes as are needed to have MinimumNumTapes on the gateway.
	MinimumNumTapes *int32
	// A prefix that you append to the barcode of the virtual tape that you are
	// creating. This prefix makes the barcode unique.  <note> <p>The prefix must be
	// 1-4 characters in length and must be one of the uppercase letters from A to
	// Z.</p> </note>
	TapeBarcodePrefix *string
}

// Lists refresh cache information.
type CacheAttributes struct {
	// Refreshes a file share's cache by using Time To Live (TTL). TTL is the length of
	// time since the last refresh after which access to the directory would cause the
	// file gateway to first refresh that directory's contents from the Amazon S3
	// bucket. The TTL duration is in seconds.  <p>Valid Values: 300 to 2,592,000
	// seconds (5 minutes to 30 days)</p>
	CacheStaleTimeoutInSeconds *int32
}

// Describes an iSCSI cached volume.
type CachediSCSIVolume struct {
	// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for
	// Amazon S3 server-side encryption. Storage Gateway does not support asymmetric
	// CMKs. This value can only be set when KMSEncrypted is true. Optional.
	KMSKey *string
	// The unique identifier of the volume, e.g. vol-AE4B946D.
	VolumeId *string
	// The size, in bytes, of the volume capacity.
	VolumeSizeInBytes *int64
	// One of the VolumeType enumeration values that describes the type of the volume.
	VolumeType *string
	// The Amazon Resource Name (ARN) of the storage volume.
	VolumeARN *string
	// If the cached volume was created from a snapshot, this field contains the
	// snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
	SourceSnapshotId *string
	// A value that indicates whether a storage volume is attached to or detached from
	// a gateway. For more information, see Moving your volumes to a different gateway
	// (https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#attach-detach-volume).
	VolumeAttachmentStatus *string
	// One of the VolumeStatus values that indicates the state of the storage volume.
	VolumeStatus *string
	// The name of the iSCSI target used by an initiator to connect to a volume and
	// used as a suffix for the target ARN. For example, specifying TargetName as
	// myvolume results in the target ARN of
	// arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume.
	// The target name must be unique across all volumes on a gateway.  <p>If you don't
	// specify a value, Storage Gateway uses the value that was previously used for
	// this volume as the new target name.</p>
	TargetName *string
	// An VolumeiSCSIAttributes () object that represents a collection of iSCSI
	// attributes for one stored volume.
	VolumeiSCSIAttributes *VolumeiSCSIAttributes
	// Represents the percentage complete if the volume is restoring or bootstrapping
	// that represents the percent of data transferred. This field does not appear in
	// the response if the cached volume is not restoring or bootstrapping.
	VolumeProgress *float64
	// The date the volume was created. Volumes created prior to March 28, 2017 donâ€™t
	// have this time stamp.
	CreatedDate *time.Time
	// The size of the data stored on the volume in bytes. This value is calculated
	// based on the number of blocks that are touched, instead of the actual amount of
	// data written. This value can be useful for sequential write patterns but less
	// accurate for random write patterns. VolumeUsedInBytes is different from the
	// compressed size of the volume, which is the value that is used to calculate your
	// bill.  <note> <p>This value is not available for volumes created prior to May
	// 13, 2015, until you store data on the volume.</p> </note>
	VolumeUsedInBytes *int64
}

// Describes Challenge-Handshake Authentication Protocol (CHAP) information that
// supports authentication between your gateway and iSCSI initiators.
type ChapInfo struct {
	// The Amazon Resource Name (ARN) of the volume.  <p>Valid Values: 50 to 500
	// lowercase letters, numbers, periods (.), and hyphens (-).</p>
	TargetARN *string
	// The secret key that the initiator (for example, the Windows client) must provide
	// to participate in mutual CHAP with the target.
	SecretToAuthenticateInitiator *string
	// The iSCSI initiator that connects to the target.
	InitiatorName *string
	// The secret key that the target must provide to participate in mutual CHAP with
	// the initiator (e.g. Windows client).
	SecretToAuthenticateTarget *string
}

// Lists iSCSI information about a VTL device.
type DeviceiSCSIAttributes struct {
	// Indicates whether mutual CHAP is enabled for the iSCSI target.
	ChapEnabled *bool
	// Specifies the unique Amazon Resource Name (ARN) that encodes the iSCSI qualified
	// name(iqn) of a tape drive or media changer target.
	TargetARN *string
	// The network interface identifier of the VTL device.
	NetworkInterfaceId *string
	// The port used to communicate with iSCSI VTL device targets.
	NetworkInterfacePort *int32
}

// Represents a gateway's local disk.
type Disk struct {
	// The device node of a local disk as assigned by the virtualization environment.
	DiskNode *string
	// The path of a local disk in the gateway virtual machine (VM).
	DiskPath *string
	// A list of values that represents attributes of a local disk.
	DiskAttributeList []*string
	// One of the DiskAllocationType enumeration values that identifies how a local
	// disk is used.  <p>Valid Values: <code>UPLOAD_BUFFER</code> |
	// <code>CACHE_STORAGE</code> </p>
	DiskAllocationType *string
	// The unique device ID or other distinguishing data that identifies a local disk.
	DiskId *string
	// A value that represents the status of a local disk.
	DiskStatus *string
	// The iSCSI qualified name (IQN) that is defined for a disk. This field is not
	// included in the response if the local disk is not defined as an iSCSI target.
	// The format of this field is targetIqn::LUNNumber::region-volumeId.
	DiskAllocationResource *string
	// The local disk size in bytes.
	DiskSizeInBytes *int64
}

// Describes a file share.
type FileShareInfo struct {
	// The type of the file share.
	FileShareType FileShareType
	// The Amazon Resource Name (ARN) of the file share.
	FileShareARN *string
	// The status of the file share.  <p>Valid Values: <code>CREATING</code> |
	// <code>UPDATING</code> | <code>AVAILABLE</code> | <code>DELETING</code> </p>
	FileShareStatus *string
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
	// The ID of the file share.
	FileShareId *string
}

// Describes a gateway object.
type GatewayInfo struct {
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
	// The ID of the Amazon EC2 instance that was used to launch the gateway.
	Ec2InstanceId *string
	// The name of the gateway.
	GatewayName *string
	// The unique identifier assigned to your gateway during activation. This ID
	// becomes part of the gateway Amazon Resource Name (ARN), which you use as input
	// for other operations.
	GatewayId *string
	// The AWS Region where the Amazon EC2 instance is located.
	Ec2InstanceRegion *string
	// The state of the gateway.  <p>Valid Values: <code>DISABLED</code> |
	// <code>ACTIVE</code> </p>
	GatewayOperationalState *string
	// The type of the gateway.
	GatewayType *string
}

// Describes a gateway's network interface.
type NetworkInterface struct {
	// The Internet Protocol version 6 (IPv6) address of the interface. Currently not
	// supported.
	Ipv6Address *string
	// The Internet Protocol version 4 (IPv4) address of the interface.
	Ipv4Address *string
	// The Media Access Control (MAC) address of the interface.  <note> <p>This is
	// currently unsupported and will not be returned in output.</p> </note>
	MacAddress *string
}

// Describes Network File System (NFS) file share default values. Files and folders
// stored as Amazon S3 objects in S3 buckets don't, by default, have Unix file
// permissions assigned to them. Upon discovery in an S3 bucket by Storage Gateway,
// the S3 objects that represent files and folders are assigned these default Unix
// permissions. This operation is only supported for file gateways.
type NFSFileShareDefaults struct {
	// The default owner ID for files in the file share (unless the files have another
	// owner ID specified). The default value is nfsnobody.
	OwnerId *int64
	// The default group ID for the file share (unless the files have another group ID
	// specified). The default value is nfsnobody.
	GroupId *int64
	// The Unix directory mode in the form "nnnn". For example, 0666 represents the
	// default access mode for all directories inside the file share. The default value
	// is 0777.
	DirectoryMode *string
	// The Unix file mode in the form "nnnn". For example, 0666 represents the default
	// file mode inside the file share. The default value is 0666.
	FileMode *string
}

// The Unix file permissions and ownership information assigned, by default, to
// native S3 objects when file gateway discovers them in S3 buckets. This operation
// is only supported in file gateways.
type NFSFileShareInfo struct {
	// The default storage class for objects put into an Amazon S3 bucket by the file
	// gateway. The default value is S3_INTELLIGENT_TIERING. Optional.  <p>Valid
	// Values: <code>S3_STANDARD</code> | <code>S3_INTELLIGENT_TIERING</code> |
	// <code>S3_STANDARD_IA</code> | <code>S3_ONEZONE_IA</code> </p>
	DefaultStorageClass *string
	// The status of the file share.  <p>Valid Values: <code>CREATING</code> |
	// <code>UPDATING</code> | <code>AVAILABLE</code> | <code>DELETING</code> </p>
	FileShareStatus *string
	// Set to true to use Amazon S3 server-side encryption with your own AWS KMS key,
	// or false to use a key managed by Amazon S3. Optional.  <p>Valid Values:
	// <code>true</code> | <code>false</code> </p>
	KMSEncrypted *bool
	// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for
	// Amazon S3 server-side encryption. Storage Gateway does not support asymmetric
	// CMKs. This value can only be set when KMSEncrypted is true. Optional.
	KMSKey *string
	// The list of clients that are allowed to access the file gateway. The list must
	// contain either valid IP addresses or valid CIDR blocks.
	ClientList []*string
	// The ARN of the IAM role that file gateway assumes when it accesses the
	// underlying storage.
	Role *string
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
	// The file share path used by the NFS client to identify the mount point.
	Path *string
	// Refresh cache information.
	CacheAttributes *CacheAttributes
	// A list of up to 50 tags assigned to the NFS file share, sorted alphabetically by
	// key name. Each tag is a key-value pair. For a gateway with more than 10 tags
	// assigned, you can view all tags using the ListTagsForResource API operation.
	Tags []*Tag
	// Describes Network File System (NFS) file share default values. Files and folders
	// stored as Amazon S3 objects in S3 buckets don't, by default, have Unix file
	// permissions assigned to them. Upon discovery in an S3 bucket by Storage Gateway,
	// the S3 objects that represent files and folders are assigned these default Unix
	// permissions. This operation is only supported for file gateways.
	NFSFileShareDefaults *NFSFileShareDefaults
	// A value that sets the write status of a file share. Set this value to true to
	// set the write status to read-only, otherwise set to false.  <p>Valid Values:
	// <code>true</code> | <code>false</code> </p>
	ReadOnly *bool
	// The ID of the file share.
	FileShareId *string
	// The Amazon Resource Name (ARN) of the file share.
	FileShareARN *string
	// A value that sets who pays the cost of the request and the cost associated with
	// data download from the S3 bucket. If this value is set to true, the requester
	// pays the costs; otherwise, the S3 bucket owner pays. However, the S3 bucket
	// owner always pays the cost of storing data.  <note> <p>
	// <code>RequesterPays</code> is a configuration for the S3 bucket that backs the
	// file share, so make sure that the configuration on the file share is the same as
	// the S3 bucket configuration.</p> </note> <p>Valid Values: <code>true</code> |
	// <code>false</code> </p>
	RequesterPays *bool
	// The ARN of the backend storage used for storing file data. A prefix name can be
	// added to the S3 bucket name. It must end with a "/".
	LocationARN *string
	// The user mapped to anonymous user. Valid options are the following:  <ul> <li>
	// <p> <code>RootSquash</code>: Only root is mapped to anonymous user.</p> </li>
	// <li> <p> <code>NoSquash</code>: No one is mapped to anonymous user.</p> </li>
	// <li> <p> <code>AllSquash</code>: Everyone is mapped to anonymous user.</p> </li>
	// </ul>
	Squash *string
	// A value that enables guessing of the MIME type for uploaded objects based on
	// file extensions. Set this value to true to enable MIME type guessing, otherwise
	// set to false. The default value is true.  <p>Valid Values: <code>true</code> |
	// <code>false</code> </p>
	GuessMIMETypeEnabled *bool
	// The name of the file share. Optional.  <note> <p> <code>FileShareName</code>
	// must be set if an S3 prefix name is set in <code>LocationARN</code>.</p> </note>
	FileShareName *string
	// A value that sets the access control list (ACL) permission for objects in the S3
	// bucket that a file gateway puts objects into. The default value is private.
	ObjectACL ObjectACL
}

// The Windows file permissions and ownership information assigned, by default, to
// native S3 objects when file gateway discovers them in S3 buckets. This operation
// is only supported for file gateways.
type SMBFileShareInfo struct {
	// A list of up to 50 tags assigned to the SMB file share, sorted alphabetically by
	// key name. Each tag is a key-value pair. For a gateway with more than 10 tags
	// assigned, you can view all tags using the ListTagsForResource API operation.
	Tags []*Tag
	// Refresh cache information.
	CacheAttributes *CacheAttributes
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
	// If this value is set to true, it indicates that access control list (ACL) is
	// enabled on the SMB file share. If it is set to false, it indicates that file and
	// directory permissions are mapped to the POSIX permission.  <p>For more
	// information, see <a
	// href="https://docs.aws.amazon.com/storagegateway/latest/userguide/smb-acl.html">Using
	// Microsoft Windows ACLs to control access to an SMB file share</a> in the <i>AWS
	// Storage Gateway User Guide</i>.</p>
	SMBACLEnabled *bool
	// A list of users or groups in the Active Directory that have administrator rights
	// to the file share. A group must be prefixed with the @ character. Acceptable
	// formats include: DOMAIN\User1, user1, @group1, and @DOMAIN\group1. Can only be
	// set if Authentication is set to ActiveDirectory.
	AdminUserList []*string
	// The ARN of the IAM role that file gateway assumes when it accesses the
	// underlying storage.
	Role *string
	// The ARN of the backend storage used for storing file data. A prefix name can be
	// added to the S3 bucket name. It must end with a "/".
	LocationARN *string
	// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for
	// Amazon S3 server-side encryption. Storage Gateway does not support asymmetric
	// CMKs. This value can only be set when KMSEncrypted is true. Optional.
	KMSKey *string
	// The Amazon Resource Name (ARN) of the file share.
	FileShareARN *string
	// Set to true to use Amazon S3 server-side encryption with your own AWS KMS key,
	// or false to use a key managed by Amazon S3. Optional.  <p>Valid Values:
	// <code>true</code> | <code>false</code> </p>
	KMSEncrypted *bool
	// A value that sets who pays the cost of the request and the cost associated with
	// data download from the S3 bucket. If this value is set to true, the requester
	// pays the costs; otherwise, the S3 bucket owner pays. However, the S3 bucket
	// owner always pays the cost of storing data.  <note> <p>
	// <code>RequesterPays</code> is a configuration for the S3 bucket that backs the
	// file share, so make sure that the configuration on the file share is the same as
	// the S3 bucket configuration.</p> </note> <p>Valid Values: <code>true</code> |
	// <code>false</code> </p>
	RequesterPays *bool
	// The name of the file share. Optional.  <note> <p> <code>FileShareName</code>
	// must be set if an S3 prefix name is set in <code>LocationARN</code>.</p> </note>
	FileShareName *string
	// The default storage class for objects put into an Amazon S3 bucket by the file
	// gateway. The default value is S3_INTELLIGENT_TIERING. Optional.  <p>Valid
	// Values: <code>S3_STANDARD</code> | <code>S3_INTELLIGENT_TIERING</code> |
	// <code>S3_STANDARD_IA</code> | <code>S3_ONEZONE_IA</code> </p>
	DefaultStorageClass *string
	// A value that sets the access control list (ACL) permission for objects in the S3
	// bucket that a file gateway puts objects into. The default value is private.
	ObjectACL ObjectACL
	// The file share path used by the SMB client to identify the mount point.
	Path *string
	// A value that enables guessing of the MIME type for uploaded objects based on
	// file extensions. Set this value to true to enable MIME type guessing, otherwise
	// set to false. The default value is true.  <p>Valid Values: <code>true</code> |
	// <code>false</code> </p>
	GuessMIMETypeEnabled *bool
	// A list of users or groups in the Active Directory that are not allowed to access
	// the file share. A group must be prefixed with the @ character. Acceptable
	// formats include: DOMAIN\User1, user1, @group1, and @DOMAIN\group1. Can only be
	// set if Authentication is set to ActiveDirectory.
	InvalidUserList []*string
	// The status of the file share.  <p>Valid Values: <code>CREATING</code> |
	// <code>UPDATING</code> | <code>AVAILABLE</code> | <code>DELETING</code> </p>
	FileShareStatus *string
	// The authentication method of the file share. The default is ActiveDirectory.
	// <p>Valid Values: <code>ActiveDirectory</code> | <code>GuestAccess</code> </p>
	Authentication *string
	// A list of users or groups in the Active Directory that are allowed to access the
	// file share. A group must be prefixed with the @ character. Acceptable formats
	// include: DOMAIN\User1, user1, @group1, and @DOMAIN\group1. Can only be set if
	// Authentication is set to ActiveDirectory.
	ValidUserList []*string
	// A value that sets the write status of a file share. Set this value to true to
	// set the write status to read-only, otherwise set to false.  <p>Valid Values:
	// <code>true</code> | <code>false</code> </p>
	ReadOnly *bool
	// The Amazon Resource Name (ARN) of the storage used for the audit logs.
	AuditDestinationARN *string
	// The ID of the file share.
	FileShareId *string
	// The case of an object name in an Amazon S3 bucket. For ClientSpecified, the
	// client determines the case sensitivity. For CaseSensitive, the gateway
	// determines the case sensitivity. The default value is ClientSpecified.
	CaseSensitivity CaseSensitivity
}

// Provides additional information about an error that was returned by the service.
// See the errorCode and errorDetails members for more information about the error.
type StorageGatewayError struct {
	// Human-readable text that provides detail about the error that occurred.
	ErrorDetails map[string]*string
	// Additional information about the error.
	ErrorCode ErrorCode
}

// Describes an iSCSI stored volume.
type StorediSCSIVolume struct {
	// The Amazon Resource Name (ARN) of the storage volume.
	VolumeARN *string
	// The unique identifier of the volume, e.g. vol-AE4B946D.
	VolumeId *string
	// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for
	// Amazon S3 server-side encryption. Storage Gateway does not support asymmetric
	// CMKs. This value can only be set when KMSEncrypted is true. Optional.
	KMSKey *string
	// The name of the iSCSI target used by an initiator to connect to a volume and
	// used as a suffix for the target ARN. For example, specifying TargetName as
	// myvolume results in the target ARN of
	// arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume.
	// The target name must be unique across all volumes on a gateway.  <p>If you don't
	// specify a value, Storage Gateway uses the value that was previously used for
	// this volume as the new target name.</p>
	TargetName *string
	// One of the VolumeType enumeration values describing the type of the volume.
	VolumeType *string
	// Represents the percentage complete if the volume is restoring or bootstrapping
	// that represents the percent of data transferred. This field does not appear in
	// the response if the stored volume is not restoring or bootstrapping.
	VolumeProgress *float64
	// An VolumeiSCSIAttributes () object that represents a collection of iSCSI
	// attributes for one stored volume.
	VolumeiSCSIAttributes *VolumeiSCSIAttributes
	// A value that indicates whether a storage volume is attached to, detached from,
	// or is in the process of detaching from a gateway. For more information, see
	// Moving your volumes to a different gateway
	// (https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#attach-detach-volume).
	VolumeAttachmentStatus *string
	// Indicates if when the stored volume was created, existing data on the underlying
	// local disk was preserved.  <p>Valid Values: <code>true</code> |
	// <code>false</code> </p>
	PreservedExistingData *bool
	// The date the volume was created. Volumes created prior to March 28, 2017 donâ€™t
	// have this time stamp.
	CreatedDate *time.Time
	// The size of the volume in bytes.
	VolumeSizeInBytes *int64
	// If the stored volume was created from a snapshot, this field contains the
	// snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
	SourceSnapshotId *string
	// The ID of the local disk that was specified in the CreateStorediSCSIVolume ()
	// operation.
	VolumeDiskId *string
	// The size of the data stored on the volume in bytes. This value is calculated
	// based on the number of blocks that are touched, instead of the actual amount of
	// data written. This value can be useful for sequential write patterns but less
	// accurate for random write patterns. VolumeUsedInBytes is different from the
	// compressed size of the volume, which is the value that is used to calculate your
	// bill.  <note> <p>This value is not available for volumes created prior to May
	// 13, 2015, until you store data on the volume.</p> </note>
	VolumeUsedInBytes *int64
	// One of the VolumeStatus values that indicates the state of the storage volume.
	VolumeStatus *string
}

// A key-value pair that helps you manage, filter, and search for your resource.
// Allowed characters: letters, white space, and numbers, representable in UTF-8,
// and the following characters: + - = . _ : /.
type Tag struct {
	// Tag key. The key can't start with aws:.
	Key *string
	// Value of the tag key.
	Value *string
}

// Describes a virtual tape object.
type Tape struct {
	// The barcode that identifies a specific virtual tape.
	TapeBarcode *string
	// The size, in bytes, of data stored on the virtual tape.  <note> <p>This value is
	// not available for tapes created prior to May 13, 2015.</p> </note>
	TapeUsedInBytes *int64
	// The ID of the pool that contains tapes that will be archived. The tapes in this
	// pool are archived in the S3 storage class that is associated with the pool. When
	// you use your backup application to eject the tape, the tape is archived directly
	// into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds
	// to the pool.  <p>Valid Values: <code>GLACIER</code> | <code>DEEP_ARCHIVE</code>
	// </p>
	PoolId *string
	// For archiving virtual tapes, indicates how much data remains to be uploaded
	// before archiving is complete.  <p>Range: 0 (not started) to 100 (complete).</p>
	Progress *float64
	// The virtual tape library (VTL) device that the virtual tape is associated with.
	VTLDevice *string
	// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for
	// Amazon S3 server-side encryption. Storage Gateway does not support asymmetric
	// CMKs. This value can only be set when KMSEncrypted is true. Optional.
	KMSKey *string
	// The date the virtual tape was created.
	TapeCreatedDate *time.Time
	// The size, in bytes, of the virtual tape capacity.
	TapeSizeInBytes *int64
	// The current state of the virtual tape.
	TapeStatus *string
	// The Amazon Resource Name (ARN) of the virtual tape.
	TapeARN *string
}

// Represents a virtual tape that is archived in the virtual tape shelf (VTS).
type TapeArchive struct {
	// The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is
	// being retrieved to.  <p>The virtual tape is retrieved from the virtual tape
	// shelf (VTS).</p>
	RetrievedTo *string
	// The time that the archiving of the virtual tape was completed.  <p>The default
	// time stamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z'
	// format.</p>
	CompletionTime *time.Time
	// The size, in bytes, of data stored on the virtual tape.  <note> <p>This value is
	// not available for tapes created prior to May 13, 2015.</p> </note>
	TapeUsedInBytes *int64
	// The Amazon Resource Name (ARN) of an archived virtual tape.
	TapeARN *string
	// The current state of the archived virtual tape.
	TapeStatus *string
	// The ID of the pool that was used to archive the tape. The tapes in this pool are
	// archived in the S3 storage class that is associated with the pool.  <p>Valid
	// Values: <code>GLACIER</code> | <code>DEEP_ARCHIVE</code> </p>
	PoolId *string
	// The date the virtual tape was created.
	TapeCreatedDate *time.Time
	// The size, in bytes, of the archived virtual tape.
	TapeSizeInBytes *int64
	// The barcode that identifies the archived virtual tape.
	TapeBarcode *string
	// The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for
	// Amazon S3 server-side encryption. Storage Gateway does not support asymmetric
	// CMKs. This value can only be set when KMSEncrypted is true. Optional.
	KMSKey *string
}

// Describes a virtual tape.
type TapeInfo struct {
	// The Amazon Resource Name (ARN) of a virtual tape.
	TapeARN *string
	// The status of the tape.
	TapeStatus *string
	// The barcode that identifies a specific virtual tape.
	TapeBarcode *string
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
	// The size, in bytes, of a virtual tape.
	TapeSizeInBytes *int64
	// The ID of the pool that you want to add your tape to for archiving. The tape in
	// this pool is archived in the S3 storage class that is associated with the pool.
	// When you use your backup application to eject the tape, the tape is archived
	// directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that
	// corresponds to the pool.  <p>Valid Values: <code>GLACIER</code> |
	// <code>DEEP_ARCHIVE</code> </p>
	PoolId *string
}

// Describes a recovery point.
type TapeRecoveryPointInfo struct {
	// The time when the point-in-time view of the virtual tape was replicated for
	// later recovery.  <p>The default time stamp format of the tape recovery point
	// time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
	TapeRecoveryPointTime *time.Time
	// The status of the virtual tapes.
	TapeStatus *string
	// The size, in bytes, of the virtual tapes to recover.
	TapeSizeInBytes *int64
	// The Amazon Resource Name (ARN) of the virtual tape.
	TapeARN *string
}

// Describes a storage volume object.
type VolumeInfo struct {
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
	// The unique identifier assigned to the volume. This ID becomes part of the volume
	// Amazon Resource Name (ARN), which you use as input for other operations.
	// <p>Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens
	// (-).</p>
	VolumeId *string
	// One of the VolumeType enumeration values describing the type of the volume.
	VolumeType *string
	// The unique identifier assigned to your gateway during activation. This ID
	// becomes part of the gateway Amazon Resource Name (ARN), which you use as input
	// for other operations.  <p>Valid Values: 50 to 500 lowercase letters, numbers,
	// periods (.), and hyphens (-).</p>
	GatewayId *string
	// The size of the volume in bytes.  <p>Valid Values: 50 to 500 lowercase letters,
	// numbers, periods (.), and hyphens (-).</p>
	VolumeSizeInBytes *int64
	// The Amazon Resource Name (ARN) for the storage volume. For example, the
	// following is a valid ARN:  <p>
	// <code>arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB</code>
	// </p> <p>Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and
	// hyphens (-).</p>
	VolumeARN *string
	// One of the VolumeStatus values that indicates the state of the storage volume.
	VolumeAttachmentStatus *string
}

// Lists iSCSI information about a volume.
type VolumeiSCSIAttributes struct {
	// The logical disk number.
	LunNumber *int32
	// The port used to communicate with iSCSI targets.
	NetworkInterfacePort *int32
	// Indicates whether mutual CHAP is enabled for the iSCSI target.
	ChapEnabled *bool
	// The Amazon Resource Name (ARN) of the volume target.
	TargetARN *string
	// The network interface identifier.
	NetworkInterfaceId *string
}

// Describes a storage volume recovery point object.
type VolumeRecoveryPointInfo struct {
	// The size of the volume in bytes.
	VolumeSizeInBytes *int64
	// The Amazon Resource Name (ARN) of the volume target.
	VolumeARN *string
	// The time the recovery point was taken.
	VolumeRecoveryPointTime *string
	// The size of the data stored on the volume in bytes.  <note> <p>This value is not
	// available for volumes created prior to May 13, 2015, until you store data on the
	// volume.</p> </note>
	VolumeUsageInBytes *int64
}

// Represents a device object associated with a tape gateway.
type VTLDevice struct {
	// Specifies the model number of device that the VTL device emulates.
	VTLDeviceProductIdentifier *string
	// Specifies the vendor of the device that the VTL device object emulates.
	VTLDeviceVendor *string
	// Specifies the type of device that the VTL device emulates.
	VTLDeviceType *string
	// A list of iSCSI information about a VTL device.
	DeviceiSCSIAttributes *DeviceiSCSIAttributes
	// Specifies the unique Amazon Resource Name (ARN) of the device (tape drive or
	// media changer).
	VTLDeviceARN *string
}
