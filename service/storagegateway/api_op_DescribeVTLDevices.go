// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a description of virtual tape library (VTL) devices for the specified
// tape gateway. In the response, AWS Storage Gateway returns VTL device
// information.  <p>This operation is only supported in the tape gateway type.</p>
func (c *Client) DescribeVTLDevices(ctx context.Context, params *DescribeVTLDevicesInput, optFns ...func(*Options)) (*DescribeVTLDevicesOutput, error) {
	stack := middleware.NewStack("DescribeVTLDevices", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeVTLDevicesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeVTLDevicesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeVTLDevices(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeVTLDevices",
			Err:           err,
		}
	}
	out := result.(*DescribeVTLDevicesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// DescribeVTLDevicesInput
type DescribeVTLDevicesInput struct {
	// An opaque string that indicates the position at which to begin describing the
	// VTL devices.
	Marker *string
	// Specifies that the number of VTL devices described be limited to the specified
	// number.
	Limit *int32
	// An array of strings, where each string represents the Amazon Resource Name (ARN)
	// of a VTL device.  <note> <p>All of the specified VTL devices must be from the
	// same gateway. If no VTL devices are specified, the result will contain all
	// devices on the specified gateway.</p> </note>
	VTLDeviceARNs []*string
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string
}

// DescribeVTLDevicesOutput
type DescribeVTLDevicesOutput struct {
	// An array of VTL device objects composed of the Amazon Resource Name (ARN) of the
	// VTL devices.
	VTLDevices []*types.VTLDevice
	// An opaque string that indicates the position at which the VTL devices that were
	// fetched for description ended. Use the marker in your next request to fetch the
	// next set of VTL devices in the list. If there are no more VTL devices to
	// describe, this field does not appear in the response.
	Marker *string
	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeVTLDevicesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeVTLDevices{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeVTLDevices{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeVTLDevices(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "DescribeVTLDevices",
	}
}
