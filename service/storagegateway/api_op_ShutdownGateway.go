// Code generated by smithy-go-codegen DO NOT EDIT.

package storagegateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Shuts down a gateway. To specify which gateway to shut down, use the Amazon
// Resource Name (ARN) of the gateway in the body of your request.  <p>The
// operation shuts down the gateway service component running in the gateway's
// virtual machine (VM) and not the host VM.</p> <note> <p>If you want to shut down
// the VM, it is recommended that you first shut down the gateway component in the
// VM to avoid unpredictable conditions.</p> </note> <p>After the gateway is
// shutdown, you cannot call any other API except <a>StartGateway</a>,
// <a>DescribeGatewayInformation</a>, and <a>ListGateways</a>. For more
// information, see <a>ActivateGateway</a>. Your applications cannot read from or
// write to the gateway's storage volumes, and there are no snapshots taken.</p>
// <note> <p>When you make a shutdown request, you will get a <code>200 OK</code>
// success response immediately. However, it might take some time for the gateway
// to shut down. You can call the <a>DescribeGatewayInformation</a> API to check
// the status. For more information, see <a>ActivateGateway</a>.</p> </note> <p>If
// do not intend to use the gateway again, you must delete the gateway (using
// <a>DeleteGateway</a>) to no longer pay software charges associated with the
// gateway.</p>
func (c *Client) ShutdownGateway(ctx context.Context, params *ShutdownGatewayInput, optFns ...func(*Options)) (*ShutdownGatewayOutput, error) {
	if params == nil {
		params = &ShutdownGatewayInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ShutdownGateway", params, optFns, addOperationShutdownGatewayMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ShutdownGatewayOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A JSON object containing the Amazon Resource Name (ARN) of the gateway to shut
// down.
type ShutdownGatewayInput struct {

	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	//
	// This member is required.
	GatewayARN *string
}

// A JSON object containing the Amazon Resource Name (ARN) of the gateway that was
// shut down.
type ShutdownGatewayOutput struct {

	// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways () operation
	// to return a list of gateways for your account and AWS Region.
	GatewayARN *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationShutdownGatewayMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpShutdownGateway{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpShutdownGateway{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpShutdownGatewayValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opShutdownGateway(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opShutdownGateway(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "storagegateway",
		OperationName: "ShutdownGateway",
	}
}
