// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sagemakerruntime

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemakerruntime/types"
)

const opInvokeEndpoint = "InvokeEndpoint"

// InvokeEndpointRequest returns a request value for making API operation for
// Amazon SageMaker Runtime.
//
// After you deploy a model into production using Amazon SageMaker hosting services,
// your client applications use this API to get inferences from the model hosted
// at the specified endpoint.
//
// For an overview of Amazon SageMaker, see How It Works (https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html).
//
// Amazon SageMaker strips all POST headers except those supported by the API.
// Amazon SageMaker might add additional headers. You should not rely on the
// behavior of headers outside those enumerated in the request syntax.
//
// Calls to InvokeEndpoint are authenticated by using AWS Signature Version
// 4. For information, see Authenticating Requests (AWS Signature Version 4)
// (http://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html)
// in the Amazon S3 API Reference.
//
// A customer's model containers must respond to requests within 60 seconds.
// The model itself can have a maximum processing time of 60 seconds before
// responding to the /invocations. If your model is going to take 50-60 seconds
// of processing time, the SDK socket timeout should be set to be 70 seconds.
//
// Endpoints are scoped to an individual account, and are not public. The URL
// does not contain the account ID, but Amazon SageMaker determines the account
// ID from the authentication token that is supplied by the caller.
//
//    // Example sending a request using InvokeEndpointRequest.
//    req := client.InvokeEndpointRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/runtime.sagemaker-2017-05-13/InvokeEndpoint
func (c *Client) InvokeEndpointRequest(input *types.InvokeEndpointInput) InvokeEndpointRequest {
	op := &aws.Operation{
		Name:       opInvokeEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/endpoints/{EndpointName}/invocations",
	}

	if input == nil {
		input = &types.InvokeEndpointInput{}
	}

	req := c.newRequest(op, input, &types.InvokeEndpointOutput{})
	return InvokeEndpointRequest{Request: req, Input: input, Copy: c.InvokeEndpointRequest}
}

// InvokeEndpointRequest is the request type for the
// InvokeEndpoint API operation.
type InvokeEndpointRequest struct {
	*aws.Request
	Input *types.InvokeEndpointInput
	Copy  func(*types.InvokeEndpointInput) InvokeEndpointRequest
}

// Send marshals and sends the InvokeEndpoint API request.
func (r InvokeEndpointRequest) Send(ctx context.Context) (*InvokeEndpointResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &InvokeEndpointResponse{
		InvokeEndpointOutput: r.Request.Data.(*types.InvokeEndpointOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// InvokeEndpointResponse is the response type for the
// InvokeEndpoint API operation.
type InvokeEndpointResponse struct {
	*types.InvokeEndpointOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// InvokeEndpoint request.
func (r *InvokeEndpointResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
