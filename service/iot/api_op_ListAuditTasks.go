// Code generated by smithy-go-codegen DO NOT EDIT.

package iot

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Lists the Device Defender audits that have been performed during a given time
// period.
func (c *Client) ListAuditTasks(ctx context.Context, params *ListAuditTasksInput, optFns ...func(*Options)) (*ListAuditTasksOutput, error) {
	stack := middleware.NewStack("ListAuditTasks", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpListAuditTasksMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListAuditTasksValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListAuditTasks(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListAuditTasks",
			Err:           err,
		}
	}
	out := result.(*ListAuditTasksOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListAuditTasksInput struct {
	// A filter to limit the output to the specified type of audit: can be one of
	// "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
	TaskType types.AuditTaskType
	// The end of the time period.
	EndTime *time.Time
	// The beginning of the time period. Audit information is retained for a limited
	// time (180 days). Requesting a start time prior to what is retained results in an
	// "InvalidRequestException".
	StartTime *time.Time
	// A filter to limit the output to audits with the specified completion status: can
	// be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".
	TaskStatus types.AuditTaskStatus
	// The token for the next set of results.
	NextToken *string
	// The maximum number of results to return at one time. The default is 25.
	MaxResults *int32
}

type ListAuditTasksOutput struct {
	// A token that can be used to retrieve the next set of results, or null if there
	// are no additional results.
	NextToken *string
	// The audits that were performed during the specified time period.
	Tasks []*types.AuditTaskMetadata

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpListAuditTasksMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpListAuditTasks{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpListAuditTasks{}, middleware.After)
}

func newServiceMetadataMiddleware_opListAuditTasks(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "execute-api",
		OperationName: "ListAuditTasks",
	}
}
