// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

type StartAuditMitigationActionsTaskInput struct {
	_ struct{} `type:"structure"`

	// For an audit check, specifies which mitigation actions to apply. Those actions
	// must be defined in your AWS account.
	//
	// AuditCheckToActionsMapping is a required field
	AuditCheckToActionsMapping map[string][]string `locationName:"auditCheckToActionsMapping" type:"map" required:"true"`

	// Each audit mitigation task must have a unique client request token. If you
	// try to start a new task with the same token as a task that already exists,
	// an exception occurs. If you omit this value, a unique client request token
	// is generated automatically.
	//
	// ClientRequestToken is a required field
	ClientRequestToken *string `locationName:"clientRequestToken" min:"1" type:"string" required:"true" idempotencyToken:"true"`

	// Specifies the audit findings to which the mitigation actions are applied.
	// You can apply them to a type of audit check, to all findings from an audit,
	// or to a speecific set of findings.
	//
	// Target is a required field
	Target *AuditMitigationActionsTaskTarget `locationName:"target" type:"structure" required:"true"`

	// A unique identifier for the task. You can use this identifier to check the
	// status of the task or to cancel it.
	//
	// TaskId is a required field
	TaskId *string `location:"uri" locationName:"taskId" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s StartAuditMitigationActionsTaskInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StartAuditMitigationActionsTaskInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "StartAuditMitigationActionsTaskInput"}

	if s.AuditCheckToActionsMapping == nil {
		invalidParams.Add(aws.NewErrParamRequired("AuditCheckToActionsMapping"))
	}

	if s.ClientRequestToken == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClientRequestToken"))
	}
	if s.ClientRequestToken != nil && len(*s.ClientRequestToken) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ClientRequestToken", 1))
	}

	if s.Target == nil {
		invalidParams.Add(aws.NewErrParamRequired("Target"))
	}

	if s.TaskId == nil {
		invalidParams.Add(aws.NewErrParamRequired("TaskId"))
	}
	if s.TaskId != nil && len(*s.TaskId) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TaskId", 1))
	}
	if s.Target != nil {
		if err := s.Target.Validate(); err != nil {
			invalidParams.AddNested("Target", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type StartAuditMitigationActionsTaskOutput struct {
	_ struct{} `type:"structure"`

	// The unique identifier for the audit mitigation task. This matches the taskId
	// that you specified in the request.
	TaskId *string `locationName:"taskId" min:"1" type:"string"`
}

// String returns the string representation
func (s StartAuditMitigationActionsTaskOutput) String() string {
	return awsutil.Prettify(s)
}
