// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opUpdateThing = "UpdateThing"

// UpdateThingRequest returns a request value for making API operation for
// AWS IoT.
//
// Updates the data for a thing.
//
//    // Example sending a request using UpdateThingRequest.
//    req := client.UpdateThingRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) UpdateThingRequest(input *types.UpdateThingInput) UpdateThingRequest {
	op := &aws.Operation{
		Name:       opUpdateThing,
		HTTPMethod: "PATCH",
		HTTPPath:   "/things/{thingName}",
	}

	if input == nil {
		input = &types.UpdateThingInput{}
	}

	req := c.newRequest(op, input, &types.UpdateThingOutput{})
	return UpdateThingRequest{Request: req, Input: input, Copy: c.UpdateThingRequest}
}

// UpdateThingRequest is the request type for the
// UpdateThing API operation.
type UpdateThingRequest struct {
	*aws.Request
	Input *types.UpdateThingInput
	Copy  func(*types.UpdateThingInput) UpdateThingRequest
}

// Send marshals and sends the UpdateThing API request.
func (r UpdateThingRequest) Send(ctx context.Context) (*UpdateThingResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateThingResponse{
		UpdateThingOutput: r.Request.Data.(*types.UpdateThingOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateThingResponse is the response type for the
// UpdateThing API operation.
type UpdateThingResponse struct {
	*types.UpdateThingOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateThing request.
func (r *UpdateThingResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
