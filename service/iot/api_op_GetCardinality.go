// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opGetCardinality = "GetCardinality"

// GetCardinalityRequest returns a request value for making API operation for
// AWS IoT.
//
// Returns the approximate count of unique values that match the query.
//
//    // Example sending a request using GetCardinalityRequest.
//    req := client.GetCardinalityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) GetCardinalityRequest(input *types.GetCardinalityInput) GetCardinalityRequest {
	op := &aws.Operation{
		Name:       opGetCardinality,
		HTTPMethod: "POST",
		HTTPPath:   "/indices/cardinality",
	}

	if input == nil {
		input = &types.GetCardinalityInput{}
	}

	req := c.newRequest(op, input, &types.GetCardinalityOutput{})
	return GetCardinalityRequest{Request: req, Input: input, Copy: c.GetCardinalityRequest}
}

// GetCardinalityRequest is the request type for the
// GetCardinality API operation.
type GetCardinalityRequest struct {
	*aws.Request
	Input *types.GetCardinalityInput
	Copy  func(*types.GetCardinalityInput) GetCardinalityRequest
}

// Send marshals and sends the GetCardinality API request.
func (r GetCardinalityRequest) Send(ctx context.Context) (*GetCardinalityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetCardinalityResponse{
		GetCardinalityOutput: r.Request.Data.(*types.GetCardinalityOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetCardinalityResponse is the response type for the
// GetCardinality API operation.
type GetCardinalityResponse struct {
	*types.GetCardinalityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetCardinality request.
func (r *GetCardinalityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
