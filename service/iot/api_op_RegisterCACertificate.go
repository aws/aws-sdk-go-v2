// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opRegisterCACertificate = "RegisterCACertificate"

// RegisterCACertificateRequest returns a request value for making API operation for
// AWS IoT.
//
// Registers a CA certificate with AWS IoT. This CA certificate can then be
// used to sign device certificates, which can be then registered with AWS IoT.
// You can register up to 10 CA certificates per AWS account that have the same
// subject field. This enables you to have up to 10 certificate authorities
// sign your device certificates. If you have more than one CA certificate registered,
// make sure you pass the CA certificate when you register your device certificates
// with the RegisterCertificate API.
//
//    // Example sending a request using RegisterCACertificateRequest.
//    req := client.RegisterCACertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) RegisterCACertificateRequest(input *types.RegisterCACertificateInput) RegisterCACertificateRequest {
	op := &aws.Operation{
		Name:       opRegisterCACertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/cacertificate",
	}

	if input == nil {
		input = &types.RegisterCACertificateInput{}
	}

	req := c.newRequest(op, input, &types.RegisterCACertificateOutput{})
	return RegisterCACertificateRequest{Request: req, Input: input, Copy: c.RegisterCACertificateRequest}
}

// RegisterCACertificateRequest is the request type for the
// RegisterCACertificate API operation.
type RegisterCACertificateRequest struct {
	*aws.Request
	Input *types.RegisterCACertificateInput
	Copy  func(*types.RegisterCACertificateInput) RegisterCACertificateRequest
}

// Send marshals and sends the RegisterCACertificate API request.
func (r RegisterCACertificateRequest) Send(ctx context.Context) (*RegisterCACertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RegisterCACertificateResponse{
		RegisterCACertificateOutput: r.Request.Data.(*types.RegisterCACertificateOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RegisterCACertificateResponse is the response type for the
// RegisterCACertificate API operation.
type RegisterCACertificateResponse struct {
	*types.RegisterCACertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RegisterCACertificate request.
func (r *RegisterCACertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
