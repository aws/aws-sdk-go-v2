// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opUpdateCertificate = "UpdateCertificate"

// UpdateCertificateRequest returns a request value for making API operation for
// AWS IoT.
//
// Updates the status of the specified certificate. This operation is idempotent.
//
// Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect
// currently connected devices, but these devices will be unable to reconnect.
//
// The ACTIVE state is required to authenticate devices connecting to AWS IoT
// using a certificate.
//
//    // Example sending a request using UpdateCertificateRequest.
//    req := client.UpdateCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) UpdateCertificateRequest(input *types.UpdateCertificateInput) UpdateCertificateRequest {
	op := &aws.Operation{
		Name:       opUpdateCertificate,
		HTTPMethod: "PUT",
		HTTPPath:   "/certificates/{certificateId}",
	}

	if input == nil {
		input = &types.UpdateCertificateInput{}
	}

	req := c.newRequest(op, input, &types.UpdateCertificateOutput{})
	req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return UpdateCertificateRequest{Request: req, Input: input, Copy: c.UpdateCertificateRequest}
}

// UpdateCertificateRequest is the request type for the
// UpdateCertificate API operation.
type UpdateCertificateRequest struct {
	*aws.Request
	Input *types.UpdateCertificateInput
	Copy  func(*types.UpdateCertificateInput) UpdateCertificateRequest
}

// Send marshals and sends the UpdateCertificate API request.
func (r UpdateCertificateRequest) Send(ctx context.Context) (*UpdateCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateCertificateResponse{
		UpdateCertificateOutput: r.Request.Data.(*types.UpdateCertificateOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateCertificateResponse is the response type for the
// UpdateCertificate API operation.
type UpdateCertificateResponse struct {
	*types.UpdateCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateCertificate request.
func (r *UpdateCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
