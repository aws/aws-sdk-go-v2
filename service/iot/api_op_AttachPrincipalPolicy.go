// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opAttachPrincipalPolicy = "AttachPrincipalPolicy"

// AttachPrincipalPolicyRequest returns a request value for making API operation for
// AWS IoT.
//
// Attaches the specified policy to the specified principal (certificate or
// other credential).
//
// Note: This API is deprecated. Please use AttachPolicy instead.
//
//    // Example sending a request using AttachPrincipalPolicyRequest.
//    req := client.AttachPrincipalPolicyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) AttachPrincipalPolicyRequest(input *types.AttachPrincipalPolicyInput) AttachPrincipalPolicyRequest {
	if c.Client.Config.Logger != nil {
		c.Client.Config.Logger.Log("This operation, AttachPrincipalPolicy, has been deprecated")
	}
	op := &aws.Operation{
		Name:       opAttachPrincipalPolicy,
		HTTPMethod: "PUT",
		HTTPPath:   "/principal-policies/{policyName}",
	}

	if input == nil {
		input = &types.AttachPrincipalPolicyInput{}
	}

	req := c.newRequest(op, input, &types.AttachPrincipalPolicyOutput{})
	req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return AttachPrincipalPolicyRequest{Request: req, Input: input, Copy: c.AttachPrincipalPolicyRequest}
}

// AttachPrincipalPolicyRequest is the request type for the
// AttachPrincipalPolicy API operation.
type AttachPrincipalPolicyRequest struct {
	*aws.Request
	Input *types.AttachPrincipalPolicyInput
	Copy  func(*types.AttachPrincipalPolicyInput) AttachPrincipalPolicyRequest
}

// Send marshals and sends the AttachPrincipalPolicy API request.
func (r AttachPrincipalPolicyRequest) Send(ctx context.Context) (*AttachPrincipalPolicyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AttachPrincipalPolicyResponse{
		AttachPrincipalPolicyOutput: r.Request.Data.(*types.AttachPrincipalPolicyOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AttachPrincipalPolicyResponse is the response type for the
// AttachPrincipalPolicy API operation.
type AttachPrincipalPolicyResponse struct {
	*types.AttachPrincipalPolicyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AttachPrincipalPolicy request.
func (r *AttachPrincipalPolicyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
