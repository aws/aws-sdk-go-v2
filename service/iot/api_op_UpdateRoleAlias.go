// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opUpdateRoleAlias = "UpdateRoleAlias"

// UpdateRoleAliasRequest returns a request value for making API operation for
// AWS IoT.
//
// Updates a role alias.
//
//    // Example sending a request using UpdateRoleAliasRequest.
//    req := client.UpdateRoleAliasRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) UpdateRoleAliasRequest(input *types.UpdateRoleAliasInput) UpdateRoleAliasRequest {
	op := &aws.Operation{
		Name:       opUpdateRoleAlias,
		HTTPMethod: "PUT",
		HTTPPath:   "/role-aliases/{roleAlias}",
	}

	if input == nil {
		input = &types.UpdateRoleAliasInput{}
	}

	req := c.newRequest(op, input, &types.UpdateRoleAliasOutput{})
	return UpdateRoleAliasRequest{Request: req, Input: input, Copy: c.UpdateRoleAliasRequest}
}

// UpdateRoleAliasRequest is the request type for the
// UpdateRoleAlias API operation.
type UpdateRoleAliasRequest struct {
	*aws.Request
	Input *types.UpdateRoleAliasInput
	Copy  func(*types.UpdateRoleAliasInput) UpdateRoleAliasRequest
}

// Send marshals and sends the UpdateRoleAlias API request.
func (r UpdateRoleAliasRequest) Send(ctx context.Context) (*UpdateRoleAliasResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateRoleAliasResponse{
		UpdateRoleAliasOutput: r.Request.Data.(*types.UpdateRoleAliasOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateRoleAliasResponse is the response type for the
// UpdateRoleAlias API operation.
type UpdateRoleAliasResponse struct {
	*types.UpdateRoleAliasOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateRoleAlias request.
func (r *UpdateRoleAliasResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
