// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opRejectCertificateTransfer = "RejectCertificateTransfer"

// RejectCertificateTransferRequest returns a request value for making API operation for
// AWS IoT.
//
// Rejects a pending certificate transfer. After AWS IoT rejects a certificate
// transfer, the certificate status changes from PENDING_TRANSFER to INACTIVE.
//
// To check for pending certificate transfers, call ListCertificates to enumerate
// your certificates.
//
// This operation can only be called by the transfer destination. After it is
// called, the certificate will be returned to the source's account in the INACTIVE
// state.
//
//    // Example sending a request using RejectCertificateTransferRequest.
//    req := client.RejectCertificateTransferRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) RejectCertificateTransferRequest(input *types.RejectCertificateTransferInput) RejectCertificateTransferRequest {
	op := &aws.Operation{
		Name:       opRejectCertificateTransfer,
		HTTPMethod: "PATCH",
		HTTPPath:   "/reject-certificate-transfer/{certificateId}",
	}

	if input == nil {
		input = &types.RejectCertificateTransferInput{}
	}

	req := c.newRequest(op, input, &types.RejectCertificateTransferOutput{})
	req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return RejectCertificateTransferRequest{Request: req, Input: input, Copy: c.RejectCertificateTransferRequest}
}

// RejectCertificateTransferRequest is the request type for the
// RejectCertificateTransfer API operation.
type RejectCertificateTransferRequest struct {
	*aws.Request
	Input *types.RejectCertificateTransferInput
	Copy  func(*types.RejectCertificateTransferInput) RejectCertificateTransferRequest
}

// Send marshals and sends the RejectCertificateTransfer API request.
func (r RejectCertificateTransferRequest) Send(ctx context.Context) (*RejectCertificateTransferResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RejectCertificateTransferResponse{
		RejectCertificateTransferOutput: r.Request.Data.(*types.RejectCertificateTransferOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RejectCertificateTransferResponse is the response type for the
// RejectCertificateTransfer API operation.
type RejectCertificateTransferResponse struct {
	*types.RejectCertificateTransferOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RejectCertificateTransfer request.
func (r *RejectCertificateTransferResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
