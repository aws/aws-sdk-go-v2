// Code generated by smithy-go-codegen DO NOT EDIT.

package iot

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an X.509 certificate using the specified certificate signing request.
// Note: The CSR must include a public key that is either an RSA key with a length
// of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. Note:
// Reusing the same certificate signing request (CSR) results in a distinct
// certificate. You can create multiple certificates in a batch by creating a
// directory, copying multiple .csr files into that directory, and then specifying
// that directory on the command line. The following commands show how to create a
// batch of certificates given a batch of CSRs. Assuming a set of CSRs are located
// inside of the directory my-csr-directory:  <p>On Linux and OS X, the command
// is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot
// create-certificate-from-csr --certificate-signing-request
// file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in
// my-csr-directory and pipes each CSR file name to the aws iot
// create-certificate-from-csr AWS CLI command to create a certificate for the
// corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the
// command can also be run in parallel to speed up the certificate creation
// process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot
// create-certificate-from-csr --certificate-signing-request
// file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create
// certificates for all CSRs in my-csr-directory is:</p> <p>> ls -Name
// my-csr-directory | %{aws iot create-certificate-from-csr
// --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows
// command prompt, the command to create certificates for all CSRs in
// my-csr-directory is:</p> <p>> forfiles /p my-csr-directory /c "cmd /c aws iot
// create-certificate-from-csr --certificate-signing-request file://@path"</p>
func (c *Client) CreateCertificateFromCsr(ctx context.Context, params *CreateCertificateFromCsrInput, optFns ...func(*Options)) (*CreateCertificateFromCsrOutput, error) {
	stack := middleware.NewStack("CreateCertificateFromCsr", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateCertificateFromCsrMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateCertificateFromCsrValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateCertificateFromCsr(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateCertificateFromCsr",
			Err:           err,
		}
	}
	out := result.(*CreateCertificateFromCsrOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The input for the CreateCertificateFromCsr operation.
type CreateCertificateFromCsrInput struct {
	// Specifies whether the certificate is active.
	SetAsActive *bool
	// The certificate signing request (CSR).
	CertificateSigningRequest *string
}

// The output from the CreateCertificateFromCsr operation.
type CreateCertificateFromCsrOutput struct {
	// The certificate data, in PEM format.
	CertificatePem *string
	// The ID of the certificate. Certificate management operations only take a
	// certificateId.
	CertificateId *string
	// The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a
	// principal for policy operations.
	CertificateArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateCertificateFromCsrMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateCertificateFromCsr{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateCertificateFromCsr{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateCertificateFromCsr(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "execute-api",
		OperationName: "CreateCertificateFromCsr",
	}
}
