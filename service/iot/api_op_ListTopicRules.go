// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opListTopicRules = "ListTopicRules"

// ListTopicRulesRequest returns a request value for making API operation for
// AWS IoT.
//
// Lists the rules for the specific topic.
//
//    // Example sending a request using ListTopicRulesRequest.
//    req := client.ListTopicRulesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) ListTopicRulesRequest(input *types.ListTopicRulesInput) ListTopicRulesRequest {
	op := &aws.Operation{
		Name:       opListTopicRules,
		HTTPMethod: "GET",
		HTTPPath:   "/rules",
	}

	if input == nil {
		input = &types.ListTopicRulesInput{}
	}

	req := c.newRequest(op, input, &types.ListTopicRulesOutput{})
	return ListTopicRulesRequest{Request: req, Input: input, Copy: c.ListTopicRulesRequest}
}

// ListTopicRulesRequest is the request type for the
// ListTopicRules API operation.
type ListTopicRulesRequest struct {
	*aws.Request
	Input *types.ListTopicRulesInput
	Copy  func(*types.ListTopicRulesInput) ListTopicRulesRequest
}

// Send marshals and sends the ListTopicRules API request.
func (r ListTopicRulesRequest) Send(ctx context.Context) (*ListTopicRulesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListTopicRulesResponse{
		ListTopicRulesOutput: r.Request.Data.(*types.ListTopicRulesOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ListTopicRulesResponse is the response type for the
// ListTopicRules API operation.
type ListTopicRulesResponse struct {
	*types.ListTopicRulesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListTopicRules request.
func (r *ListTopicRulesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
