// Code generated by smithy-go-codegen DO NOT EDIT.

package iot

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a fleet provisioning template.
func (c *Client) CreateProvisioningTemplate(ctx context.Context, params *CreateProvisioningTemplateInput, optFns ...func(*Options)) (*CreateProvisioningTemplateOutput, error) {
	if params == nil {
		params = &CreateProvisioningTemplateInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateProvisioningTemplate", params, optFns, addOperationCreateProvisioningTemplateMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateProvisioningTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateProvisioningTemplateInput struct {

	// The role ARN for the role associated with the fleet provisioning template. This
	// IoT role grants permission to provision a device.
	//
	// This member is required.
	ProvisioningRoleArn *string

	// The JSON formatted contents of the fleet provisioning template.
	//
	// This member is required.
	TemplateBody *string

	// The name of the fleet provisioning template.
	//
	// This member is required.
	TemplateName *string

	// The description of the fleet provisioning template.
	Description *string

	// True to enable the fleet provisioning template, otherwise false.
	Enabled *bool

	// Creates a pre-provisioning hook template.
	PreProvisioningHook *types.ProvisioningHook

	// Metadata which can be used to manage the fleet provisioning template. For URI
	// Request parameters use format: ...key1=value1&key2=value2... For the CLI
	// command-line parameter use format: &&tags "key1=value1&key2=value2..." For the
	// cli-input-json file use format: "tags": "key1=value1&key2=value2..."
	Tags []*types.Tag
}

type CreateProvisioningTemplateOutput struct {

	// The default version of the fleet provisioning template.
	DefaultVersionId *int32

	// The ARN that identifies the provisioning template.
	TemplateArn *string

	// The name of the fleet provisioning template.
	TemplateName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateProvisioningTemplateMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateProvisioningTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateProvisioningTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateProvisioningTemplateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateProvisioningTemplate(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opCreateProvisioningTemplate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "execute-api",
		OperationName: "CreateProvisioningTemplate",
	}
}
