// Code generated by smithy-go-codegen DO NOT EDIT.

package iot

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Transfers the specified certificate to the specified AWS account. You can cancel
// the transfer until it is acknowledged by the recipient. No notification is sent
// to the transfer destination's account. It is up to the caller to notify the
// transfer target. The certificate being transferred must not be in the ACTIVE
// state. You can use the UpdateCertificate API to deactivate it. The certificate
// must not have any policies attached to it. You can use the DetachPrincipalPolicy
// API to detach them.
func (c *Client) TransferCertificate(ctx context.Context, params *TransferCertificateInput, optFns ...func(*Options)) (*TransferCertificateOutput, error) {
	if params == nil {
		params = &TransferCertificateInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "TransferCertificate", params, optFns, addOperationTransferCertificateMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*TransferCertificateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The input for the TransferCertificate operation.
type TransferCertificateInput struct {

	// The ID of the certificate. (The last part of the certificate ARN contains the
	// certificate ID.)
	//
	// This member is required.
	CertificateId *string

	// The AWS account.
	//
	// This member is required.
	TargetAwsAccount *string

	// The transfer message.
	TransferMessage *string
}

// The output from the TransferCertificate operation.
type TransferCertificateOutput struct {

	// The ARN of the certificate.
	TransferredCertificateArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationTransferCertificateMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpTransferCertificate{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpTransferCertificate{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpTransferCertificateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opTransferCertificate(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opTransferCertificate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "execute-api",
		OperationName: "TransferCertificate",
	}
}
