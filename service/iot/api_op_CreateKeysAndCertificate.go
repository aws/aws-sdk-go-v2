// Code generated by smithy-go-codegen DO NOT EDIT.

package iot

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued
// public key. You can also call CreateKeysAndCertificate over MQTT from a device,
// for more information, see Provisioning MQTT API
// (https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api).
// Note This is the only time AWS IoT issues the private key for this certificate,
// so it is important to keep it in a secure location.
func (c *Client) CreateKeysAndCertificate(ctx context.Context, params *CreateKeysAndCertificateInput, optFns ...func(*Options)) (*CreateKeysAndCertificateOutput, error) {
	if params == nil {
		params = &CreateKeysAndCertificateInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateKeysAndCertificate", params, optFns, addOperationCreateKeysAndCertificateMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateKeysAndCertificateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The input for the CreateKeysAndCertificate operation.
type CreateKeysAndCertificateInput struct {

	// Specifies whether the certificate is active.
	SetAsActive *bool
}

// The output of the CreateKeysAndCertificate operation.
type CreateKeysAndCertificateOutput struct {

	// The ARN of the certificate.
	CertificateArn *string

	// The ID of the certificate. AWS IoT issues a default subject name for the
	// certificate (for example, AWS IoT Certificate).
	CertificateId *string

	// The certificate data, in PEM format.
	CertificatePem *string

	// The generated key pair.
	KeyPair *types.KeyPair

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateKeysAndCertificateMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateKeysAndCertificate{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateKeysAndCertificate{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateKeysAndCertificate(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opCreateKeysAndCertificate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "execute-api",
		OperationName: "CreateKeysAndCertificate",
	}
}
