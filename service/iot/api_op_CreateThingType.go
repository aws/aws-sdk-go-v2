// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iot

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot/types"
)

const opCreateThingType = "CreateThingType"

// CreateThingTypeRequest returns a request value for making API operation for
// AWS IoT.
//
// Creates a new thing type.
//
//    // Example sending a request using CreateThingTypeRequest.
//    req := client.CreateThingTypeRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) CreateThingTypeRequest(input *types.CreateThingTypeInput) CreateThingTypeRequest {
	op := &aws.Operation{
		Name:       opCreateThingType,
		HTTPMethod: "POST",
		HTTPPath:   "/thing-types/{thingTypeName}",
	}

	if input == nil {
		input = &types.CreateThingTypeInput{}
	}

	req := c.newRequest(op, input, &types.CreateThingTypeOutput{})
	return CreateThingTypeRequest{Request: req, Input: input, Copy: c.CreateThingTypeRequest}
}

// CreateThingTypeRequest is the request type for the
// CreateThingType API operation.
type CreateThingTypeRequest struct {
	*aws.Request
	Input *types.CreateThingTypeInput
	Copy  func(*types.CreateThingTypeInput) CreateThingTypeRequest
}

// Send marshals and sends the CreateThingType API request.
func (r CreateThingTypeRequest) Send(ctx context.Context) (*CreateThingTypeResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateThingTypeResponse{
		CreateThingTypeOutput: r.Request.Data.(*types.CreateThingTypeOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateThingTypeResponse is the response type for the
// CreateThingType API operation.
type CreateThingTypeResponse struct {
	*types.CreateThingTypeOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateThingType request.
func (r *CreateThingTypeResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
