// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package worklink

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/worklink/types"
)

const opAssociateWebsiteCertificateAuthority = "AssociateWebsiteCertificateAuthority"

// AssociateWebsiteCertificateAuthorityRequest returns a request value for making API operation for
// Amazon WorkLink.
//
// Imports the root certificate of a certificate authority (CA) used to obtain
// TLS certificates used by associated websites within the company network.
//
//    // Example sending a request using AssociateWebsiteCertificateAuthorityRequest.
//    req := client.AssociateWebsiteCertificateAuthorityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/worklink-2018-09-25/AssociateWebsiteCertificateAuthority
func (c *Client) AssociateWebsiteCertificateAuthorityRequest(input *types.AssociateWebsiteCertificateAuthorityInput) AssociateWebsiteCertificateAuthorityRequest {
	op := &aws.Operation{
		Name:       opAssociateWebsiteCertificateAuthority,
		HTTPMethod: "POST",
		HTTPPath:   "/associateWebsiteCertificateAuthority",
	}

	if input == nil {
		input = &types.AssociateWebsiteCertificateAuthorityInput{}
	}

	req := c.newRequest(op, input, &types.AssociateWebsiteCertificateAuthorityOutput{})
	return AssociateWebsiteCertificateAuthorityRequest{Request: req, Input: input, Copy: c.AssociateWebsiteCertificateAuthorityRequest}
}

// AssociateWebsiteCertificateAuthorityRequest is the request type for the
// AssociateWebsiteCertificateAuthority API operation.
type AssociateWebsiteCertificateAuthorityRequest struct {
	*aws.Request
	Input *types.AssociateWebsiteCertificateAuthorityInput
	Copy  func(*types.AssociateWebsiteCertificateAuthorityInput) AssociateWebsiteCertificateAuthorityRequest
}

// Send marshals and sends the AssociateWebsiteCertificateAuthority API request.
func (r AssociateWebsiteCertificateAuthorityRequest) Send(ctx context.Context) (*AssociateWebsiteCertificateAuthorityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AssociateWebsiteCertificateAuthorityResponse{
		AssociateWebsiteCertificateAuthorityOutput: r.Request.Data.(*types.AssociateWebsiteCertificateAuthorityOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AssociateWebsiteCertificateAuthorityResponse is the response type for the
// AssociateWebsiteCertificateAuthority API operation.
type AssociateWebsiteCertificateAuthorityResponse struct {
	*types.AssociateWebsiteCertificateAuthorityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AssociateWebsiteCertificateAuthority request.
func (r *AssociateWebsiteCertificateAuthorityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
