// Code generated by smithy-go-codegen DO NOT EDIT.

package backup

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/backup/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns the template specified by its templateId as a backup plan.
func (c *Client) GetBackupPlanFromTemplate(ctx context.Context, params *GetBackupPlanFromTemplateInput, optFns ...func(*Options)) (*GetBackupPlanFromTemplateOutput, error) {
	if params == nil {
		params = &GetBackupPlanFromTemplateInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GetBackupPlanFromTemplate", params, optFns, addOperationGetBackupPlanFromTemplateMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GetBackupPlanFromTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetBackupPlanFromTemplateInput struct {

	// Uniquely identifies a stored backup plan template.
	//
	// This member is required.
	BackupPlanTemplateId *string
}

type GetBackupPlanFromTemplateOutput struct {

	// Returns the body of a backup plan based on the target template, including the
	// name, rules, and backup vault of the plan.
	BackupPlanDocument *types.BackupPlan

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationGetBackupPlanFromTemplateMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpGetBackupPlanFromTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpGetBackupPlanFromTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetBackupPlanFromTemplateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetBackupPlanFromTemplate(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opGetBackupPlanFromTemplate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "backup",
		OperationName: "GetBackupPlanFromTemplate",
	}
}
