// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package backup

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/backup/types"
)

const opCreateBackupSelection = "CreateBackupSelection"

// CreateBackupSelectionRequest returns a request value for making API operation for
// AWS Backup.
//
// Creates a JSON document that specifies a set of resources to assign to a
// backup plan. Resources can be included by specifying patterns for a ListOfTags
// and selected Resources.
//
// For example, consider the following patterns:
//
//    * Resources: "arn:aws:ec2:region:account-id:volume/volume-id"
//
//    * ConditionKey:"department" ConditionValue:"finance" ConditionType:"StringEquals"
//
//    * ConditionKey:"importance" ConditionValue:"critical" ConditionType:"StringEquals"
//
// Using these patterns would back up all Amazon Elastic Block Store (Amazon
// EBS) volumes that are tagged as "department=finance", "importance=critical",
// in addition to an EBS volume with the specified volume Id.
//
// Resources and conditions are additive in that all resources that match the
// pattern are selected. This shouldn't be confused with a logical AND, where
// all conditions must match. The matching patterns are logically 'put together
// using the OR operator. In other words, all patterns that match are selected
// for backup.
//
//    // Example sending a request using CreateBackupSelectionRequest.
//    req := client.CreateBackupSelectionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/backup-2018-11-15/CreateBackupSelection
func (c *Client) CreateBackupSelectionRequest(input *types.CreateBackupSelectionInput) CreateBackupSelectionRequest {
	op := &aws.Operation{
		Name:       opCreateBackupSelection,
		HTTPMethod: "PUT",
		HTTPPath:   "/backup/plans/{backupPlanId}/selections/",
	}

	if input == nil {
		input = &types.CreateBackupSelectionInput{}
	}

	req := c.newRequest(op, input, &types.CreateBackupSelectionOutput{})
	return CreateBackupSelectionRequest{Request: req, Input: input, Copy: c.CreateBackupSelectionRequest}
}

// CreateBackupSelectionRequest is the request type for the
// CreateBackupSelection API operation.
type CreateBackupSelectionRequest struct {
	*aws.Request
	Input *types.CreateBackupSelectionInput
	Copy  func(*types.CreateBackupSelectionInput) CreateBackupSelectionRequest
}

// Send marshals and sends the CreateBackupSelection API request.
func (r CreateBackupSelectionRequest) Send(ctx context.Context) (*CreateBackupSelectionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateBackupSelectionResponse{
		CreateBackupSelectionOutput: r.Request.Data.(*types.CreateBackupSelectionOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateBackupSelectionResponse is the response type for the
// CreateBackupSelection API operation.
type CreateBackupSelectionResponse struct {
	*types.CreateBackupSelectionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateBackupSelection request.
func (r *CreateBackupSelectionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
