// Code generated by smithy-go-codegen DO NOT EDIT.

package frauddetector

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/frauddetector/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Evaluates an event against a detector version. If a version ID is not provided,
// the detectorâ€™s (ACTIVE) version is used.
func (c *Client) GetEventPrediction(ctx context.Context, params *GetEventPredictionInput, optFns ...func(*Options)) (*GetEventPredictionOutput, error) {
	stack := middleware.NewStack("GetEventPrediction", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetEventPredictionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetEventPredictionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetEventPrediction(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetEventPrediction",
			Err:           err,
		}
	}
	out := result.(*GetEventPredictionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetEventPredictionInput struct {
	// The unique ID used to identify the event.
	EventId *string
	// Names of the event type's variables you defined in Amazon Fraud Detector to
	// represent data elements and their corresponding values for the event you are
	// sending for evaluation.
	EventVariables map[string]*string
	// The detector version ID.
	DetectorVersionId *string
	// The Amazon SageMaker model endpoint input data blobs.
	ExternalModelEndpointDataBlobs map[string]*types.ModelEndpointDataBlob
	// The event type associated with the detector specified for the prediction.
	EventTypeName *string
	// Timestamp that defines when the event under evaluation occurred.
	EventTimestamp *string
	// The detector ID.
	DetectorId *string
	// The entity type (associated with the detector's event type) and specific entity
	// ID representing who performed the event. If an entity id is not available, use
	// "UNKNOWN."
	Entities []*types.Entity
}

type GetEventPredictionOutput struct {
	// The model scores. Amazon Fraud Detector generates model scores between 0 and
	// 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are
	// directly related to the false positive rate (FPR). For example, a score of 600
	// corresponds to an estimated 10% false positive rate whereas a score of 900
	// corresponds to an estimated 2% false positive rate.
	ModelScores []*types.ModelScores
	// The results.
	RuleResults []*types.RuleResult

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetEventPredictionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetEventPrediction{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetEventPrediction{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetEventPrediction(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "frauddetector",
		OperationName: "GetEventPrediction",
	}
}
