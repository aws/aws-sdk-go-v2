// Code generated by smithy-go-codegen DO NOT EDIT.

package lakeformation

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Registers the resource as managed by the Data Catalog.  <p>To add or update
// data, Lake Formation needs read/write access to the chosen Amazon S3 path.
// Choose a role that you know has permission to do this, or choose the
// AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register
// the first Amazon S3 path, the service-linked role and a new inline policy are
// created on your behalf. Lake Formation adds the first path to the inline policy
// and attaches it to the service-linked role. When you register subsequent paths,
// Lake Formation adds the path to the existing policy.</p> <p>The following
// request registers a new location and gives AWS Lake Formation permission to use
// the service-linked role to access that location.</p> <p> <code>ResourceArn =
// arn:aws:s3:::my-bucket  UseServiceLinkedRole = true  <p>If
// <code>UseServiceLinkedRole</code> is not set to true, you must provide or set
// the <code>RoleArn</code>:</p> <p>
// <code>arn:aws:iam::12345:role/my-data-access-role</code> </p>
func (c *Client) RegisterResource(ctx context.Context, params *RegisterResourceInput, optFns ...func(*Options)) (*RegisterResourceOutput, error) {
	stack := middleware.NewStack("RegisterResource", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpRegisterResourceMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRegisterResourceValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRegisterResource(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RegisterResource",
			Err:           err,
		}
	}
	out := result.(*RegisterResourceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RegisterResourceInput struct {
	// The Amazon Resource Name (ARN) of the resource that you want to register.
	ResourceArn *string
	// The identifier for the role that registers the resource.
	RoleArn *string
	// Designates an AWS Identity and Access Management (IAM) service-linked role by
	// registering this role with the Data Catalog. A service-linked role is a unique
	// type of IAM role that is linked directly to Lake Formation.  <p>For more
	// information, see <a
	// href="https://docs-aws.amazon.com/lake-formation/latest/dg/service-linked-roles.html">Using
	// Service-Linked Roles for Lake Formation</a>.</p>
	UseServiceLinkedRole *bool
}

type RegisterResourceOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpRegisterResourceMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpRegisterResource{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpRegisterResource{}, middleware.After)
}

func newServiceMetadataMiddleware_opRegisterResource(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lakeformation",
		OperationName: "RegisterResource",
	}
}
