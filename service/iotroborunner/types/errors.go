// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/aws/smithy-go"
)

// User does not have sufficient access to perform this action.
type AccessDeniedException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "AccessDeniedException"
	}
	return *e.DynamicErrorCode
}
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Exception thrown if a resource in a create request already exists.
type ConflictException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ConflictException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConflictException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConflictException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ConflictException"
	}
	return *e.DynamicErrorCode
}
func (e *ConflictException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Exception thrown if something goes wrong within the service.
type InternalServerException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InternalServerException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServerException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServerException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InternalServerException"
	}
	return *e.DynamicErrorCode
}
func (e *InternalServerException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// Exception thrown if a resource referenced in the request doesn't exist.
type ResourceNotFoundException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceNotFoundException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Exception thrown if the user's AWS account has reached a service limit and the
// operation cannot proceed.
type ServiceQuotaExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ServiceQuotaExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServiceQuotaExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServiceQuotaExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ServiceQuotaExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *ServiceQuotaExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Exception thrown if the api has been called too quickly be the client.
type ThrottlingException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ThrottlingException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ThrottlingException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ThrottlingException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ThrottlingException"
	}
	return *e.DynamicErrorCode
}
func (e *ThrottlingException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Exception thrown if an invalid parameter is provided to an API.
type ValidationException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ValidationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ValidationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ValidationException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ValidationException"
	}
	return *e.DynamicErrorCode
}
func (e *ValidationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
