// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticinference

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticinference/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes information over a provided set of accelerators belonging to an
// account.
func (c *Client) DescribeAccelerators(ctx context.Context, params *DescribeAcceleratorsInput, optFns ...func(*Options)) (*DescribeAcceleratorsOutput, error) {
	stack := middleware.NewStack("DescribeAccelerators", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDescribeAcceleratorsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeAccelerators(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeAccelerators",
			Err:           err,
		}
	}
	out := result.(*DescribeAcceleratorsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeAcceleratorsInput struct {
	// One or more filters. Filter names and values are case-sensitive. Valid filter
	// names are: accelerator-types: can provide a list of accelerator type names to
	// filter for. instance-id: can provide a list of EC2 instance ids to filter for.
	Filters []*types.Filter
	// The total number of items to return in the command's output. If the total number
	// of items available is more than the value specified, a NextToken is provided in
	// the command's output. To resume pagination, provide the NextToken value in the
	// starting-token argument of a subsequent command. Do not use the NextToken
	// response element directly outside of the AWS CLI.
	MaxResults *int32
	// A token to specify where to start paginating. This is the NextToken from a
	// previously truncated response.
	NextToken *string
	// The IDs of the accelerators to describe.
	AcceleratorIds []*string
}

type DescribeAcceleratorsOutput struct {
	// The details of the Elastic Inference Accelerators.
	AcceleratorSet []*types.ElasticInferenceAccelerator
	// A token to specify where to start paginating. This is the NextToken from a
	// previously truncated response.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDescribeAcceleratorsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDescribeAccelerators{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeAccelerators{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeAccelerators(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elastic-inference",
		OperationName: "DescribeAccelerators",
	}
}
