// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// An access point used to access a bucket.
type AccessPoint struct {
	// The virtual private cloud (VPC) configuration for this access point, if one
	// exists.
	VpcConfiguration *VpcConfiguration
	// The name of the bucket associated with this access point.
	Bucket *string
	// Indicates whether this access point allows access from the public internet. If
	// VpcConfiguration is specified for this access point, then NetworkOrigin is VPC,
	// and the access point doesn't allow access from the public internet. Otherwise,
	// NetworkOrigin is Internet, and the access point allows access from the public
	// internet, subject to the access point and bucket access policies.
	NetworkOrigin NetworkOrigin
	// The name of this access point.
	Name *string
}

// A container element for the job configuration and status information returned by
// a Describe Job request.
type JobDescriptor struct {
	// The configuration information for the specified job's manifest object.
	Manifest *JobManifest
	// The Amazon Resource Name (ARN) for this job.
	JobArn *string
	// The ID for the specified job.
	JobId *string
	// The timestamp when this job was suspended, if it has been suspended.
	SuspendedDate *time.Time
	// If the specified job failed, this field contains information describing the
	// failure.
	FailureReasons []*JobFailure
	// The Amazon Resource Name (ARN) for the AWS Identity and Access Management (IAM)
	// role assigned to execute the tasks for this job.
	RoleArn *string
	// The reason why the specified job was suspended. A job is only suspended if you
	// create it through the Amazon S3 console. When you create the job, it enters the
	// Suspended state to await confirmation before running. After you confirm the job,
	// it automatically exits the Suspended state.
	SuspendedCause *string
	// The operation that the specified job is configured to execute on the objects
	// listed in the manifest.
	Operation *JobOperation
	// The description for this job, if one was provided in this job's Create Job
	// request.
	Description *string
	// A timestamp indicating when this job was created.
	CreationTime *time.Time
	//
	StatusUpdateReason *string
	// Contains the configuration information for the job-completion report if you
	// requested one in the Create Job request.
	Report *JobReport
	// Describes the total number of tasks that the specified job has executed, the
	// number of tasks that succeeded, and the number of tasks that failed.
	ProgressSummary *JobProgressSummary
	// Indicates whether confirmation is required before Amazon S3 begins running the
	// specified job. Confirmation is required only for jobs created through the Amazon
	// S3 console.
	ConfirmationRequired *bool
	// The current status of the specified job.
	Status JobStatus
	// The priority of the specified job.
	Priority *int32
	// A timestamp indicating when this job terminated. A job's termination date is the
	// date and time when it succeeded, failed, or was canceled.
	TerminationDate *time.Time
}

// If this job failed, this element indicates why the job failed.
type JobFailure struct {
	// The failure reason, if any, for the specified job.
	FailureReason *string
	// The failure code, if any, for the specified job.
	FailureCode *string
}

// Contains the configuration and status information for a single job retrieved as
// part of a job list.
type JobListDescriptor struct {
	// Describes the total number of tasks that the specified job has executed, the
	// number of tasks that succeeded, and the number of tasks that failed.
	ProgressSummary *JobProgressSummary
	// The current priority for the specified job.
	Priority *int32
	// The ID for the specified job.
	JobId *string
	// The user-specified description that was included in the specified job's Create
	// Job request.
	Description *string
	// A timestamp indicating when the specified job terminated. A job's termination
	// date is the date and time when it succeeded, failed, or was canceled.
	TerminationDate *time.Time
	// A timestamp indicating when the specified job was created.
	CreationTime *time.Time
	// The specified job's current status.
	Status JobStatus
	// The operation that the specified job is configured to run on each object listed
	// in the manifest.
	Operation OperationName
}

// Contains the configuration information for a job's manifest.
type JobManifest struct {
	// Contains the information required to locate the specified job's manifest.
	Location *JobManifestLocation
	// Describes the format of the specified job's manifest. If the manifest is in CSV
	// format, also describes the columns contained within the manifest.
	Spec *JobManifestSpec
}

// Contains the information required to locate a manifest object.
type JobManifestLocation struct {
	// The Amazon Resource Name (ARN) for a manifest object.
	ObjectArn *string
	// The ETag for the specified manifest object.
	ETag *string
	// The optional version ID to identify a specific version of the manifest object.
	ObjectVersionId *string
}

// Describes the format of a manifest. If the manifest is in CSV format, also
// describes the columns contained within the manifest.
type JobManifestSpec struct {
	// Indicates which of the available formats the specified manifest uses.
	Format JobManifestFormat
	// If the specified manifest object is in the S3BatchOperations_CSV_20180820
	// format, this element describes which columns contain the required data.
	Fields []JobManifestFieldName
}

// The operation that you want this job to perform on each object listed in the
// manifest. For more information about the available operations, see Available
// Operations
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-operations.html) in
// the Amazon Simple Storage Service Developer Guide.
type JobOperation struct {
	// Contains the configuration parameters for a Set Object Legal Hold operation.
	// Amazon S3 Batch Operations passes each value through to the underlying PUT
	// Object Legal Hold API. For more information about the parameters for this
	// operation, see PUT Object Legal Hold
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.htmll#object-lock-legal-holds).
	S3PutObjectLegalHold *S3SetObjectLegalHoldOperation
	// Directs the specified job to execute an Initiate Glacier Restore call on each
	// object in the manifest.
	S3InitiateRestoreObject *S3InitiateRestoreObjectOperation
	// Directs the specified job to execute a PUT Object tagging call on each object in
	// the manifest.
	S3PutObjectTagging *S3SetObjectTaggingOperation
	// Directs the specified job to invoke an AWS Lambda function on each object in the
	// manifest.
	LambdaInvoke *LambdaInvokeOperation
	// Contains the configuration parameters for a Set Object Retention operation.
	// Amazon S3 Batch Operations passes each value through to the underlying PUT
	// Object Retention API. For more information about the parameters for this
	// operation, see PUT Object Retention
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes).
	S3PutObjectRetention *S3SetObjectRetentionOperation
	// Directs the specified job to execute a PUT Copy object call on each object in
	// the manifest.
	S3PutObjectCopy *S3CopyObjectOperation
	// Directs the specified job to execute a PUT Object acl call on each object in the
	// manifest.
	S3PutObjectAcl *S3SetObjectAclOperation
}

// Describes the total number of tasks that the specified job has executed, the
// number of tasks that succeeded, and the number of tasks that failed.
type JobProgressSummary struct {
	//
	NumberOfTasksSucceeded *int64
	//
	TotalNumberOfTasks *int64
	//
	NumberOfTasksFailed *int64
}

// Contains the configuration parameters for a job-completion report.
type JobReport struct {
	// An optional prefix to describe where in the specified bucket the job-completion
	// report will be stored. Amazon S3 will store the job-completion report at
	// /job-/report.json.
	Prefix *string
	// Indicates whether the job-completion report will include details of all tasks or
	// only failed tasks.
	ReportScope JobReportScope
	// Indicates whether the specified job will generate a job-completion report.
	Enabled *bool
	// The Amazon Resource Name (ARN) for the bucket where specified job-completion
	// report will be stored.
	Bucket *string
	// The format of the specified job-completion report.
	Format JobReportFormat
}

// Contains the configuration parameters for a Lambda Invoke operation.
type LambdaInvokeOperation struct {
	// The Amazon Resource Name (ARN) for the AWS Lambda function that the specified
	// job will invoke for each object in the manifest.
	FunctionArn *string
}

// Indicates whether this access point policy is public. For more information about
// how Amazon S3 evaluates policies to determine whether they are public, see The
// Meaning of "Public"
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
// in the Amazon Simple Storage Service Developer Guide.
type PolicyStatus struct {
	//
	IsPublic *bool
}

// The PublicAccessBlock configuration that you want to apply to this Amazon S3
// bucket. You can enable the configuration options in any combination. For more
// information about when Amazon S3 considers a bucket or object public, see The
// Meaning of "Public"
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
// in the Amazon Simple Storage Service Developer Guide.
type PublicAccessBlockConfiguration struct {
	// Specifies whether Amazon S3 should ignore public ACLs for buckets in this
	// account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs
	// on buckets in this account and any objects that they contain. Enabling this
	// setting doesn't affect the persistence of any existing ACLs and doesn't prevent
	// new public ACLs from being set.
	IgnorePublicAcls *bool
	// Specifies whether Amazon S3 should block public access control lists (ACLs) for
	// buckets in this account. Setting this element to TRUE causes the following
	// behavior:
	//
	//     * PUT Bucket acl and PUT Object acl calls fail if the specified
	// ACL is public.
	//
	//     * PUT Object calls fail if the request includes a public
	// ACL.
	//
	//     * PUT Bucket calls fail if the request includes a public
	// ACL.
	//
	// Enabling this setting doesn't affect existing policies or ACLs.
	BlockPublicAcls *bool
	// Specifies whether Amazon S3 should block public bucket policies for buckets in
	// this account. Setting this element to TRUE causes Amazon S3 to reject calls to
	// PUT Bucket policy if the specified bucket policy allows public access. Enabling
	// this setting doesn't affect existing bucket policies.
	BlockPublicPolicy *bool
	// Specifies whether Amazon S3 should restrict public bucket policies for buckets
	// in this account. Setting this element to TRUE restricts access to buckets with
	// public policies to only AWS services and authorized users within this account.
	// Enabling this setting doesn't affect previously stored bucket policies, except
	// that public and cross-account access within any public bucket policy, including
	// non-public delegation to specific accounts, is blocked.
	RestrictPublicBuckets *bool
}

//
type S3AccessControlList struct {
	//
	Grants []*S3Grant
	//
	Owner *S3ObjectOwner
}

//
type S3AccessControlPolicy struct {
	//
	CannedAccessControlList S3CannedAccessControlList
	//
	AccessControlList *S3AccessControlList
}

// Contains the configuration parameters for a PUT Copy object operation. Amazon S3
// Batch Operations passes each value through to the underlying PUT Copy object
// API. For more information about the parameters for this operation, see PUT
// Object - Copy
// (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectCOPY.html).
type S3CopyObjectOperation struct {
	//
	RedirectLocation *string
	// The Legal Hold status to be applied to all objects in the Batch Operations job.
	ObjectLockLegalHoldStatus S3ObjectLockLegalHoldStatus
	//
	SSEAwsKmsKeyId *string
	// The Retention mode to be applied to all objects in the Batch Operations job.
	ObjectLockMode S3ObjectLockMode
	//
	ModifiedSinceConstraint *time.Time
	//
	AccessControlGrants []*S3Grant
	//
	MetadataDirective S3MetadataDirective
	//
	CannedAccessControlList S3CannedAccessControlList
	//
	RequesterPays *bool
	//
	NewObjectTagging []*S3Tag
	//
	UnModifiedSinceConstraint *time.Time
	//
	StorageClass S3StorageClass
	//
	NewObjectMetadata *S3ObjectMetadata
	//
	TargetKeyPrefix *string
	// The date when the applied Object Retention configuration will expire on all
	// objects in the Batch Operations job.
	ObjectLockRetainUntilDate *time.Time
	//
	TargetResource *string
}

//
type S3Grant struct {
	//
	Permission S3Permission
	//
	Grantee *S3Grantee
}

//
type S3Grantee struct {
	//
	Identifier *string
	//
	DisplayName *string
	//
	TypeIdentifier S3GranteeTypeIdentifier
}

// Contains the configuration parameters for an Initiate Glacier Restore job.
// Amazon S3 Batch Operations passes each value through to the underlying POST
// Object restore API. For more information about the parameters for this
// operation, see Restoring Archives
// (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPOSTrestore.html#RESTObjectPOSTrestore-restore-request).
type S3InitiateRestoreObjectOperation struct {
	//
	ExpirationInDays *int32
	//
	GlacierJobTier S3GlacierJobTier
}

//
type S3ObjectLockLegalHold struct {
	// The Legal Hold status to be applied to all objects in the Batch Operations job.
	Status S3ObjectLockLegalHoldStatus
}

//
type S3ObjectMetadata struct {
	//
	ContentLanguage *string
	//
	ContentEncoding *string
	//
	UserMetadata map[string]*string
	//
	ContentLength *int64
	//
	SSEAlgorithm S3SSEAlgorithm
	//
	ContentMD5 *string
	//
	RequesterCharged *bool
	//
	CacheControl *string
	//
	HttpExpiresDate *time.Time
	//
	ContentDisposition *string
	//
	ContentType *string
}

//
type S3ObjectOwner struct {
	//
	ID *string
	//
	DisplayName *string
}

//
type S3Retention struct {
	// The date when the applied Object Retention will expire on all objects in the
	// Batch Operations job.
	RetainUntilDate *time.Time
	// The Retention mode to be applied to all objects in the Batch Operations job.
	Mode S3ObjectLockRetentionMode
}

// Contains the configuration parameters for a Set Object ACL operation. Amazon S3
// Batch Operations passes each value through to the underlying PUT Object acl API.
// For more information about the parameters for this operation, see PUT Object acl
// (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUTacl.html).
type S3SetObjectAclOperation struct {
	//
	AccessControlPolicy *S3AccessControlPolicy
}

// Contains the configuration parameters for a Set Object Legal Hold operation.
// Amazon S3 Batch Operations passes each value through to the underlying PUT
// Object Legal Hold API. For more information about the parameters for this
// operation, see PUT Object Legal Hold
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.htmll#object-lock-legal-holds).
type S3SetObjectLegalHoldOperation struct {
	// The Legal Hold contains the status to be applied to all objects in the Batch
	// Operations job.
	LegalHold *S3ObjectLockLegalHold
}

// Contains the configuration parameters for a Set Object Retention operation.
// Amazon S3 Batch Operations passes each value through to the underlying PUT
// Object Retention API. For more information about the parameters for this
// operation, see PUT Object Retention
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes).
type S3SetObjectRetentionOperation struct {
	// Amazon S3 object lock Retention contains the retention mode to be applied to all
	// objects in the Batch Operations job.
	Retention *S3Retention
	// Indicates if the operation should be applied to objects in the Batch Operations
	// job even if they have Governance-type Object Lock in place.
	BypassGovernanceRetention *bool
}

// Contains the configuration parameters for a Set Object Tagging operation. Amazon
// S3 Batch Operations passes each value through to the underlying PUT Object
// tagging API. For more information about the parameters for this operation, see
// PUT Object tagging
// (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUTtagging.html).
type S3SetObjectTaggingOperation struct {
	//
	TagSet []*S3Tag
}

//
type S3Tag struct {
	//
	Value *string
	//
	Key *string
}

// The virtual private cloud (VPC) configuration for an access point.
type VpcConfiguration struct {
	// If this field is specified, this access point will only allow connections from
	// the specified VPC ID.
	VpcId *string
}
