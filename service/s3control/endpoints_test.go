// Code generated by smithy-go-codegen DO NOT EDIT.

package s3control

import (
	"context"
	smithy "github.com/aws/smithy-go"
	smithyendpoints "github.com/aws/smithy-go/endpoints"
	"github.com/aws/smithy-go/ptr"
	"github.com/google/go-cmp/cmp"
	"net/http"
	"net/url"
	"strings"
	"testing"
)

// Vanilla outposts without ARN region + access point ARN@us-west-2
func TestEndpointCase0(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Vanilla outposts with ARN region + access point ARN@us-west-2
func TestEndpointCase1(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// accept an access point ARN@us-west-2
func TestEndpointCase2(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// vanilla outposts china@cn-north-1
func TestEndpointCase3(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("cn-north-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.cn-north-1.amazonaws.com.cn")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "cn-north-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// gov region@us-west-2
func TestEndpointCase4(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// gov cloud with fips@us-west-2
func TestEndpointCase5(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// govcloud with fips + arn region@us-gov-west-1
func TestEndpointCase6(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-gov-west-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-gov-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// gov region@cn-north-1
func TestEndpointCase7(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("cn-north-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.cn-north-1.amazonaws.com.cn")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "cn-north-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// gov cloud with fips@cn-north-1
func TestEndpointCase8(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("cn-north-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.cn-north-1.amazonaws.com.cn")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "cn-north-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// govcloud with fips + arn region@us-gov-west-1
func TestEndpointCase9(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-gov-west-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-gov-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// gov region@af-south-1
func TestEndpointCase10(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("af-south-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.af-south-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "af-south-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// gov cloud with fips@af-south-1
func TestEndpointCase11(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("af-south-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.af-south-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "af-south-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// govcloud with fips + arn region@us-gov-west-1
func TestEndpointCase12(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-gov-west-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-gov-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// CreateBucket + OutpostId = outposts endpoint@us-east-2
func TestEndpointCase13(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("blah"),
		OutpostId:         ptr.String("123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// CreateBucket + OutpostId with fips = outposts endpoint@us-east-2
func TestEndpointCase14(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("blah"),
		OutpostId:         ptr.String("123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// CreateBucket without OutpostId = regular endpoint@us-east-2
func TestEndpointCase15(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("blah"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-control.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// ListRegionalBuckets + OutpostId = outposts endpoint@us-east-2
func TestEndpointCase16(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("123"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// ListRegionalBuckets without OutpostId = regular endpoint@us-east-2
func TestEndpointCase17(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://123.s3-control.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// ListRegionalBucket + OutpostId with fips = outposts endpoint@us-east-2
func TestEndpointCase18(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("123"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// outpost access points do not support dualstack@us-west-2
func TestEndpointCase19(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost Access Points do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// outpost access points do not support dualstack@cn-north-1
func TestEndpointCase20(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("cn-north-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost Access Points do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// outpost access points do not support dualstack@af-south-1
func TestEndpointCase21(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("af-south-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost Access Points do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// invalid ARN: must be include outpost ID@us-west-2
func TestEndpointCase22(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: The Outpost Id was not set", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// invalid ARN: must specify access point@us-west-2
func TestEndpointCase23(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: Expected a 4-component resource", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// invalid ARN@us-west-2
func TestEndpointCase24(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:myaccesspoint"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: Expected a 4-component resource", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// when set, AccountId drives AP construction@us-west-2
func TestEndpointCase25(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("myaccesspoint"),
		AccountId:         ptr.String("myid-1234"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://myid-1234.s3-control.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Account ID set inline and in ARN but they both match@us-west-2
func TestEndpointCase26(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseArnRegion:      ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Account ID set inline and in ARN and they do not match@us-west-2
func TestEndpointCase27(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("9999999"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseArnRegion:      ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`9999999`)", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// get access point prefixed with account id using endpoint url@us-west-2
func TestEndpointCase28(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("apname"),
		AccountId:         ptr.String("123456789012"),
		Endpoint:          ptr.String("https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://123456789012.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// endpoint url with s3-outposts@us-west-2
func TestEndpointCase29(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Endpoint:          ptr.String("https://beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// access point name with a bucket arn@us-west-2
func TestEndpointCase30(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Endpoint:          ptr.String("beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Expected an outpost type `accesspoint`, found `bucket`", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// bucket arn with access point name@us-west-2
func TestEndpointCase31(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		Endpoint:          ptr.String("beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: Expected an outpost type `bucket`, found `accesspoint`", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// create bucket with outposts@us-west-2
func TestEndpointCase32(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("bucketname"),
		Endpoint:          ptr.String("https://beta.example.com"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// get bucket with endpoint_url@us-west-2
func TestEndpointCase33(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Endpoint:          ptr.String("https://beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// ListRegionalBucket + OutpostId endpoint url@us-east-2
func TestEndpointCase34(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("123"),
		Endpoint:          ptr.String("https://beta.example.com"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// ListRegionalBucket + OutpostId + fips + endpoint url@us-east-2
func TestEndpointCase35(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("123"),
		Endpoint:          ptr.String("https://beta.example.com"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// CreateBucket + OutpostId endpoint url@us-east-2
func TestEndpointCase36(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("blah"),
		Endpoint:          ptr.String("https://beta.example.com"),
		OutpostId:         ptr.String("123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// dualstack cannot be used with outposts when an endpoint URL is set@us-west-2.
func TestEndpointCase37(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		Endpoint:          ptr.String("https://beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost Access Points do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Dual-stack cannot be used with outposts@us-west-2
func TestEndpointCase38(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("bucketname"),
		Endpoint:          ptr.String("https://beta.example.com"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(false),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outposts do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// vanilla bucket arn requires account id@us-west-2
func TestEndpointCase39(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket arn with UseArnRegion = true (arn region supercedes client configured
// region)@us-west-2
func TestEndpointCase40(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in gov partition (non-fips)@us-gov-east-1
func TestEndpointCase41(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-gov-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-gov-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in gov partition with FIPS@us-gov-west-1
func TestEndpointCase42(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-gov-west-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-gov-west-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-west-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in aws partition with FIPS@us-east-2
func TestEndpointCase43(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Outposts do not support dualstack@us-west-2
func TestEndpointCase44(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost buckets do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// vanilla bucket arn requires account id@cn-north-1
func TestEndpointCase45(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("cn-north-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.cn-north-1.amazonaws.com.cn")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "cn-north-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket arn with UseArnRegion = true (arn region supercedes client configured
// region)@us-west-2
func TestEndpointCase46(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in gov partition (non-fips)@us-gov-east-1
func TestEndpointCase47(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-gov-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-gov-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in gov partition with FIPS@us-gov-west-1
func TestEndpointCase48(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-gov-west-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-gov-west-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-west-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in aws partition with FIPS@us-east-2
func TestEndpointCase49(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Outposts do not support dualstack@us-west-2
func TestEndpointCase50(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost buckets do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// vanilla bucket arn requires account id@af-south-1
func TestEndpointCase51(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("af-south-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.af-south-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "af-south-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket arn with UseArnRegion = true (arn region supercedes client configured
// region)@us-west-2
func TestEndpointCase52(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in gov partition (non-fips)@us-gov-east-1
func TestEndpointCase53(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-gov-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-gov-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in gov partition with FIPS@us-gov-west-1
func TestEndpointCase54(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-gov-west-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-gov-west-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-gov-west-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// bucket ARN in aws partition with FIPS@us-east-2
func TestEndpointCase55(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts-fips.us-east-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Outposts do not support dualstack@us-west-2
func TestEndpointCase56(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost buckets do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Invalid ARN: missing outpost id and bucket@us-west-2
func TestEndpointCase57(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: The Outpost Id was not set", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Invalid ARN: missing bucket@us-west-2
func TestEndpointCase58(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: Expected a 4-component resource", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Invalid ARN: missing outpost and bucket ids@us-west-2
func TestEndpointCase59(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:bucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: Expected a 4-component resource", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Invalid ARN: missing bucket id@us-west-2
func TestEndpointCase60(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: expected a bucket name", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// account id inserted into hostname@us-west-2
func TestEndpointCase61(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890.s3-control.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// account id prefix with dualstack@us-east-1
func TestEndpointCase62(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890.s3-control.dualstack.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// account id prefix with fips@us-east-1
func TestEndpointCase63(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890.s3-control-fips.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// custom account id prefix with fips@us-east-1
func TestEndpointCase64(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890-aBC"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890-aBC.s3-control-fips.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// standard url @ us-east-1
func TestEndpointCase65(t *testing.T) {
	var params = EndpointParameters{
		Region: ptr.String("us-east-1"),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-control.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// fips url @ us-east-1
func TestEndpointCase66(t *testing.T) {
	var params = EndpointParameters{
		Region:  ptr.String("us-east-1"),
		UseFIPS: ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-control-fips.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// dualstack url @ us-east-1
func TestEndpointCase67(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("us-east-1"),
		UseDualStack: ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-control.dualstack.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// fips,dualstack url @ us-east-1
func TestEndpointCase68(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("us-east-1"),
		UseDualStack: ptr.Bool(true),
		UseFIPS:      ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-control-fips.dualstack.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// standard url @ cn-north-1
func TestEndpointCase69(t *testing.T) {
	var params = EndpointParameters{
		Region: ptr.String("cn-north-1"),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-control.cn-north-1.amazonaws.com.cn")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "cn-north-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// fips @ cn-north-1
func TestEndpointCase70(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("cn-north-1"),
		UseDualStack: ptr.Bool(true),
		UseFIPS:      ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Partition does not support FIPS", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// custom account id prefix @us-east-1
func TestEndpointCase71(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890-aBC"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890-aBC.s3-control.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// invalid account id prefix @us-east-1
func TestEndpointCase72(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("/?invalid&not-host*label"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "AccountId must only contain a-z, A-Z, 0-9 and `-`.", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// custom account id prefix with fips@us-east-1
func TestEndpointCase73(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890-aBC"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890-aBC.s3-control-fips.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// custom account id prefix with dualstack,fips@us-east-1
func TestEndpointCase74(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890-aBC"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890-aBC.s3-control-fips.dualstack.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// custom account id with custom endpoint
func TestEndpointCase75(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890-aBC"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		Endpoint:          ptr.String("https://example.com"),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890-aBC.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// RequiresAccountId with AccountId unset
func TestEndpointCase76(t *testing.T) {
	var params = EndpointParameters{
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "AccountId is required but not set", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// RequiresAccountId with AccountId unset and custom endpoint
func TestEndpointCase77(t *testing.T) {
	var params = EndpointParameters{
		Region:            ptr.String("us-east-1"),
		Endpoint:          ptr.String("https://beta.example.com"),
		RequiresAccountId: ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "AccountId is required but not set", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// RequiresAccountId with invalid AccountId and custom endpoint
func TestEndpointCase78(t *testing.T) {
	var params = EndpointParameters{
		Region:            ptr.String("us-east-1"),
		Endpoint:          ptr.String("https://beta.example.com"),
		AccountId:         ptr.String("/?invalid&not-host*label"),
		RequiresAccountId: ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "AccountId must only contain a-z, A-Z, 0-9 and `-`.", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// account id with custom endpoint, fips and dualstack
func TestEndpointCase79(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("1234567890-aBC"),
		Region:            ptr.String("us-east-1"),
		RequiresAccountId: ptr.Bool(true),
		Endpoint:          ptr.String("https://example.com"),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://1234567890-aBC.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// custom endpoint, fips and dualstack
func TestEndpointCase80(t *testing.T) {
	var params = EndpointParameters{
		Region:   ptr.String("us-east-1"),
		Endpoint: ptr.String("https://example.com"),
		UseFIPS:  ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// custom endpoint, fips
func TestEndpointCase81(t *testing.T) {
	var params = EndpointParameters{
		Region:   ptr.String("us-east-1"),
		Endpoint: ptr.String("https://example.com"),
		UseFIPS:  ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// custom endpoint, dualstack
func TestEndpointCase82(t *testing.T) {
	var params = EndpointParameters{
		Region:   ptr.String("us-east-1"),
		Endpoint: ptr.String("https://example.com"),
		UseFIPS:  ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// region not set
func TestEndpointCase83(t *testing.T) {
	var params = EndpointParameters{}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Region must be set", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// invalid partition
func TestEndpointCase84(t *testing.T) {
	var params = EndpointParameters{
		Region: ptr.String("invalid-region 42"),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid region: region was not a valid DNS name.", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// ListRegionalBuckets + OutpostId without accountId set.
func TestEndpointCase85(t *testing.T) {
	var params = EndpointParameters{
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "AccountId is required but not set", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// ListRegionalBuckets + OutpostId with invalid accountId set.
func TestEndpointCase86(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("/?invalid&not-host*label"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("us-east-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "AccountId must only contain a-z, A-Z, 0-9 and `-`.", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// accesspoint set but missing accountId
func TestEndpointCase87(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("myaccesspoint"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "AccountId is required but not set", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// outpost accesspoint ARN with missing accountId
func TestEndpointCase88(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2::outpost:op-01234567890123456:outpost:op1"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: missing account ID", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// bucket ARN with missing accountId
func TestEndpointCase89(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2::outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: missing account ID", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// endpoint url with accesspoint (non-arn)
func TestEndpointCase90(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("apname"),
		Endpoint:          ptr.String("https://beta.example.com"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://123456789012.beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// access point name with an accesspoint arn@us-west-2
func TestEndpointCase91(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		Endpoint:          ptr.String("https://beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://beta.example.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Dualstack + Custom endpoint is not supported(non-arn)
func TestEndpointCase92(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("apname"),
		Endpoint:          ptr.String("https://beta.example.com"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid Configuration: Dualstack and custom endpoint are not supported", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// get bucket with endpoint_url and dualstack is not supported@us-west-2
func TestEndpointCase93(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Endpoint:          ptr.String("https://beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: Outpost buckets do not support dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// ListRegionalBuckets + OutpostId with fips in CN.
func TestEndpointCase94(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("0123456789012"),
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("cn-north-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Partition does not support FIPS", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// ListRegionalBuckets + invalid OutpostId.
func TestEndpointCase95(t *testing.T) {
	var params = EndpointParameters{
		AccountId:         ptr.String("0123456789012"),
		OutpostId:         ptr.String("?outpost/invalid+"),
		Region:            ptr.String("us-west-1"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "OutpostId must only contain a-z, A-Z, 0-9 and `-`.", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// bucket ARN with mismatched accountId
func TestEndpointCase96(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:999999:outpost:op-01234567890123456:bucket:mybucket"),
		AccountId:         ptr.String("0123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid ARN: the accountId specified in the ARN (`999999`) does not match the parameter (`0123456789012`)", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// OutpostId with invalid region
func TestEndpointCase97(t *testing.T) {
	var params = EndpointParameters{
		OutpostId:         ptr.String("op-123"),
		Region:            ptr.String("invalid-region 42"),
		AccountId:         ptr.String("0123456"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid region: region was not a valid DNS name.", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// OutpostId with RequireAccountId unset
func TestEndpointCase98(t *testing.T) {
	var params = EndpointParameters{
		OutpostId:    ptr.String("op-123"),
		Region:       ptr.String("us-west-2"),
		UseDualStack: ptr.Bool(false),
		UseFIPS:      ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Outpost Accesspoint ARN with arn region and client region mismatch with
// UseArnRegion=false
func TestEndpointCase99(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseArnRegion:      ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Outpost Bucket ARN with arn region and client region mismatch with
// UseArnRegion=false
func TestEndpointCase100(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Endpoint:          ptr.String("https://beta.example.com"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseArnRegion:      ptr.Bool(false),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Accesspoint ARN with region mismatch and UseArnRegion unset
func TestEndpointCase101(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Bucket ARN with region mismatch and UseArnRegion unset
func TestEndpointCase102(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-east-1.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-east-1",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// Outpost Bucket ARN with partition mismatch with UseArnRegion=true
func TestEndpointCase103(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseArnRegion:      ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Client was configured for partition `aws` but ARN has `aws-cn`", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Accesspoint ARN with partition mismatch and UseArnRegion=true
func TestEndpointCase104(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		AccountId:         ptr.String("123456789012"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseArnRegion:      ptr.Bool(true),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Client was configured for partition `aws` but ARN has `aws-cn`", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// Accesspoint ARN with region mismatch, UseArnRegion=false and custom endpoint
func TestEndpointCase105(t *testing.T) {
	var params = EndpointParameters{
		AccessPointName:   ptr.String("arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint"),
		Region:            ptr.String("us-west-2"),
		Endpoint:          ptr.String("https://example.com"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseArnRegion:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "Invalid configuration: region from ARN `cn-north-1` does not match client region `us-west-2` and UseArnRegion is `false`", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// outpost bucket arn@us-west-2
func TestEndpointCase106(t *testing.T) {
	var params = EndpointParameters{
		Bucket:            ptr.String("arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket"),
		Region:            ptr.String("us-west-2"),
		RequiresAccountId: ptr.Bool(true),
		UseDualStack:      ptr.Bool(false),
		UseFIPS:           ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://s3-outposts.us-west-2.amazonaws.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI: *uri,
		Headers: func() http.Header {
			headers := http.Header{}
			headers.Set("x-amz-account-id", "123456789012")
			headers.Set("x-amz-outpost-id", "op-01234567890123456")
			return headers
		}(),
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3-outposts",
					"signingRegion":         "us-west-2",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// S3 Snow Control with bucket
func TestEndpointCase107(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("snow"),
		Bucket:       ptr.String("bucketName"),
		Endpoint:     ptr.String("https://10.0.1.12:433"),
		UseFIPS:      ptr.Bool(false),
		UseDualStack: ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://10.0.1.12:433")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "snow",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// S3 Snow Control without bucket
func TestEndpointCase108(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("snow"),
		Endpoint:     ptr.String("https://10.0.1.12:433"),
		UseFIPS:      ptr.Bool(false),
		UseDualStack: ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://10.0.1.12:433")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "snow",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// S3 Snow Control with bucket and without port
func TestEndpointCase109(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("snow"),
		Bucket:       ptr.String("bucketName"),
		Endpoint:     ptr.String("https://10.0.1.12"),
		UseFIPS:      ptr.Bool(false),
		UseDualStack: ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("https://10.0.1.12")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "snow",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// S3 Snow Control with bucket and with DNS
func TestEndpointCase110(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("snow"),
		Bucket:       ptr.String("bucketName"),
		Endpoint:     ptr.String("http://s3snow.com"),
		UseFIPS:      ptr.Bool(false),
		UseDualStack: ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err != nil {
		t.Fatalf("expect no error, got %v", err)
	}

	uri, _ := url.Parse("http://s3snow.com")

	expectEndpoint := smithyendpoints.Endpoint{
		URI:     *uri,
		Headers: http.Header{},
		Properties: func() smithy.Properties {
			var properties smithy.Properties
			properties.Set("authSchemes", []interface{}{
				map[string]interface{}{
					"name":                  "sigv4",
					"signingName":           "s3",
					"signingRegion":         "snow",
					"disableDoubleEncoding": true,
				},
			})
			return properties
		}(),
	}

	if e, a := expectEndpoint.URI, result.URI; e != a {
		t.Errorf("expect %v URI, got %v", e, a)
	}

	if diff := cmp.Diff(expectEndpoint.Headers, result.Headers); diff != "" {
		t.Errorf("expect headers to match\n%s", diff)
	}

	if diff := cmp.Diff(expectEndpoint.Properties, result.Properties,
		cmp.AllowUnexported(smithy.Properties{}),
	); diff != "" {
		t.Errorf("expect properties to match\n%s", diff)
	}
}

// S3 Snow Control with FIPS enabled
func TestEndpointCase111(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("snow"),
		Bucket:       ptr.String("bucketName"),
		Endpoint:     ptr.String("https://10.0.1.12:433"),
		UseFIPS:      ptr.Bool(true),
		UseDualStack: ptr.Bool(false),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "S3 Snow does not support FIPS", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}

// S3 Snow Control with Dual-stack enabled
func TestEndpointCase112(t *testing.T) {
	var params = EndpointParameters{
		Region:       ptr.String("snow"),
		Bucket:       ptr.String("bucketName"),
		Endpoint:     ptr.String("https://10.0.1.12:433"),
		UseFIPS:      ptr.Bool(false),
		UseDualStack: ptr.Bool(true),
	}

	resolver := NewDefaultEndpointResolverV2()
	result, err := resolver.ResolveEndpoint(context.Background(), params)
	_, _ = result, err

	if err == nil {
		t.Fatalf("expect error, got none")
	}
	if e, a := "S3 Snow does not support Dual-stack", err.Error(); !strings.Contains(a, e) {
		t.Errorf("expect %v error in %v", e, a)
	}
}
