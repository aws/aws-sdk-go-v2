// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3control

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

var _ aws.Config
var _ = awsutil.Prettify

// The container element for all Public Access Block configuration options.
// You can enable the configuration options in any combination.
//
// Amazon S3 considers a bucket policy public unless at least one of the following
// conditions is true:
//
// The policy limits access to a set of CIDRs using aws:SourceIp. For more information
// on CIDR, see http://www.rfc-editor.org/rfc/rfc4632.txt (http://www.rfc-editor.org/rfc/rfc4632.txt)
//
// The policy grants permissions, not including any "bad actions," to one of
// the following:
//
// A fixed AWS principal, user, role, or service principal
//
// A fixed aws:SourceArn
//
// A fixed aws:SourceVpc
//
// A fixed aws:SourceVpce
//
// A fixed aws:SourceOwner
//
// A fixed aws:SourceAccount
//
// A fixed value of s3:x-amz-server-side-encryption-aws-kms-key-id
//
// A fixed value of aws:userid outside the pattern "AROLEID:*"
//
// "Bad actions" are those that could expose the data inside a bucket to reads
// or writes by the public. These actions are s3:Get*, s3:List*, s3:AbortMultipartUpload,
// s3:Delete*, s3:Put*, and s3:RestoreObject.
//
// The star notation for bad actions indicates that all matching operations
// are considered bad actions. For example, because s3:Get* is a bad action,
// s3:GetObject, s3:GetObjectVersion, and s3:GetObjectAcl are all bad actions.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3control-2018-08-20/PublicAccessBlockConfiguration
type PublicAccessBlockConfiguration struct {
	_ struct{} `type:"structure"`

	// Specifies whether Amazon S3 should block public ACLs for buckets in this
	// account. Setting this element to TRUE causes the following behavior:
	//
	//    * PUT Bucket acl and PUT Object acl calls will fail if the specified ACL
	//    allows public access.
	//
	//    * PUT Object calls will fail if the request includes an object ACL.
	//
	// Note that enabling this setting doesn't affect existing policies or ACLs.
	BlockPublicAcls *bool `locationName:"BlockPublicAcls" type:"boolean"`

	// Specifies whether Amazon S3 should block public bucket policies for buckets
	// in this account. Setting this element to TRUE causes Amazon S3 to reject
	// calls to PUT Bucket policy if the specified bucket policy allows public access.
	//
	// Note that enabling this setting doesn't affect existing bucket policies.
	BlockPublicPolicy *bool `locationName:"BlockPublicPolicy" type:"boolean"`

	// Specifies whether Amazon S3 should ignore public ACLs for buckets in this
	// account. Setting this element to TRUE causes Amazon S3 to ignore all public
	// ACLs on buckets in this account and any objects that they contain.
	//
	// Note that enabling this setting doesn't affect the persistence of any existing
	// ACLs and doesn't prevent new public ACLs from being set.
	IgnorePublicAcls *bool `locationName:"IgnorePublicAcls" type:"boolean"`

	// Specifies whether Amazon S3 should restrict public bucket policies for buckets
	// in this account. If this element is set to TRUE, then only the bucket owner
	// and AWS Services can access buckets with public policies.
	//
	// Note that enabling this setting doesn't affect previously stored bucket policies,
	// except that public and cross-account access within any public bucket policy,
	// including non-public delegation to specific accounts, is blocked.
	RestrictPublicBuckets *bool `locationName:"RestrictPublicBuckets" type:"boolean"`
}

// String returns the string representation
func (s PublicAccessBlockConfiguration) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s PublicAccessBlockConfiguration) MarshalFields(e protocol.FieldEncoder) error {
	if s.BlockPublicAcls != nil {
		v := *s.BlockPublicAcls

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "BlockPublicAcls", protocol.BoolValue(v), metadata)
	}
	if s.BlockPublicPolicy != nil {
		v := *s.BlockPublicPolicy

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "BlockPublicPolicy", protocol.BoolValue(v), metadata)
	}
	if s.IgnorePublicAcls != nil {
		v := *s.IgnorePublicAcls

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "IgnorePublicAcls", protocol.BoolValue(v), metadata)
	}
	if s.RestrictPublicBuckets != nil {
		v := *s.RestrictPublicBuckets

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "RestrictPublicBuckets", protocol.BoolValue(v), metadata)
	}
	return nil
}
