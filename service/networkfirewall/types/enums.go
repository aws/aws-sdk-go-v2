// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AttachmentStatus string

// Enum values for AttachmentStatus
const (
	AttachmentStatusCreating AttachmentStatus = "CREATING"
	AttachmentStatusDeleting AttachmentStatus = "DELETING"
	AttachmentStatusScaling  AttachmentStatus = "SCALING"
	AttachmentStatusReady    AttachmentStatus = "READY"
)

// Values returns all known values for AttachmentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AttachmentStatus) Values() []AttachmentStatus {
	return []AttachmentStatus{
		"CREATING",
		"DELETING",
		"SCALING",
		"READY",
	}
}

type ConfigurationSyncState string

// Enum values for ConfigurationSyncState
const (
	ConfigurationSyncStatePending ConfigurationSyncState = "PENDING"
	ConfigurationSyncStateInSync  ConfigurationSyncState = "IN_SYNC"
)

// Values returns all known values for ConfigurationSyncState. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ConfigurationSyncState) Values() []ConfigurationSyncState {
	return []ConfigurationSyncState{
		"PENDING",
		"IN_SYNC",
	}
}

type FirewallStatusValue string

// Enum values for FirewallStatusValue
const (
	FirewallStatusValueProvisioning FirewallStatusValue = "PROVISIONING"
	FirewallStatusValueDeleting     FirewallStatusValue = "DELETING"
	FirewallStatusValueReady        FirewallStatusValue = "READY"
)

// Values returns all known values for FirewallStatusValue. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (FirewallStatusValue) Values() []FirewallStatusValue {
	return []FirewallStatusValue{
		"PROVISIONING",
		"DELETING",
		"READY",
	}
}

type GeneratedRulesType string

// Enum values for GeneratedRulesType
const (
	GeneratedRulesTypeAllowlist GeneratedRulesType = "ALLOWLIST"
	GeneratedRulesTypeDenylist  GeneratedRulesType = "DENYLIST"
)

// Values returns all known values for GeneratedRulesType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (GeneratedRulesType) Values() []GeneratedRulesType {
	return []GeneratedRulesType{
		"ALLOWLIST",
		"DENYLIST",
	}
}

type LogDestinationType string

// Enum values for LogDestinationType
const (
	LogDestinationTypeS3                  LogDestinationType = "S3"
	LogDestinationTypeCloudwatchLogs      LogDestinationType = "CloudWatchLogs"
	LogDestinationTypeKinesisDataFirehose LogDestinationType = "KinesisDataFirehose"
)

// Values returns all known values for LogDestinationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LogDestinationType) Values() []LogDestinationType {
	return []LogDestinationType{
		"S3",
		"CloudWatchLogs",
		"KinesisDataFirehose",
	}
}

type LogType string

// Enum values for LogType
const (
	LogTypeAlert LogType = "ALERT"
	LogTypeFlow  LogType = "FLOW"
)

// Values returns all known values for LogType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (LogType) Values() []LogType {
	return []LogType{
		"ALERT",
		"FLOW",
	}
}

type OverrideAction string

// Enum values for OverrideAction
const (
	OverrideActionDropToAlert OverrideAction = "DROP_TO_ALERT"
)

// Values returns all known values for OverrideAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OverrideAction) Values() []OverrideAction {
	return []OverrideAction{
		"DROP_TO_ALERT",
	}
}

type PerObjectSyncStatus string

// Enum values for PerObjectSyncStatus
const (
	PerObjectSyncStatusPending PerObjectSyncStatus = "PENDING"
	PerObjectSyncStatusInSync  PerObjectSyncStatus = "IN_SYNC"
)

// Values returns all known values for PerObjectSyncStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PerObjectSyncStatus) Values() []PerObjectSyncStatus {
	return []PerObjectSyncStatus{
		"PENDING",
		"IN_SYNC",
	}
}

type ResourceManagedStatus string

// Enum values for ResourceManagedStatus
const (
	ResourceManagedStatusManaged ResourceManagedStatus = "MANAGED"
	ResourceManagedStatusAccount ResourceManagedStatus = "ACCOUNT"
)

// Values returns all known values for ResourceManagedStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ResourceManagedStatus) Values() []ResourceManagedStatus {
	return []ResourceManagedStatus{
		"MANAGED",
		"ACCOUNT",
	}
}

type ResourceStatus string

// Enum values for ResourceStatus
const (
	ResourceStatusActive   ResourceStatus = "ACTIVE"
	ResourceStatusDeleting ResourceStatus = "DELETING"
)

// Values returns all known values for ResourceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ResourceStatus) Values() []ResourceStatus {
	return []ResourceStatus{
		"ACTIVE",
		"DELETING",
	}
}

type RuleGroupType string

// Enum values for RuleGroupType
const (
	RuleGroupTypeStateless RuleGroupType = "STATELESS"
	RuleGroupTypeStateful  RuleGroupType = "STATEFUL"
)

// Values returns all known values for RuleGroupType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RuleGroupType) Values() []RuleGroupType {
	return []RuleGroupType{
		"STATELESS",
		"STATEFUL",
	}
}

type RuleOrder string

// Enum values for RuleOrder
const (
	RuleOrderDefaultActionOrder RuleOrder = "DEFAULT_ACTION_ORDER"
	RuleOrderStrictOrder        RuleOrder = "STRICT_ORDER"
)

// Values returns all known values for RuleOrder. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (RuleOrder) Values() []RuleOrder {
	return []RuleOrder{
		"DEFAULT_ACTION_ORDER",
		"STRICT_ORDER",
	}
}

type StatefulAction string

// Enum values for StatefulAction
const (
	StatefulActionPass  StatefulAction = "PASS"
	StatefulActionDrop  StatefulAction = "DROP"
	StatefulActionAlert StatefulAction = "ALERT"
)

// Values returns all known values for StatefulAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StatefulAction) Values() []StatefulAction {
	return []StatefulAction{
		"PASS",
		"DROP",
		"ALERT",
	}
}

type StatefulRuleDirection string

// Enum values for StatefulRuleDirection
const (
	StatefulRuleDirectionForward StatefulRuleDirection = "FORWARD"
	StatefulRuleDirectionAny     StatefulRuleDirection = "ANY"
)

// Values returns all known values for StatefulRuleDirection. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StatefulRuleDirection) Values() []StatefulRuleDirection {
	return []StatefulRuleDirection{
		"FORWARD",
		"ANY",
	}
}

type StatefulRuleProtocol string

// Enum values for StatefulRuleProtocol
const (
	StatefulRuleProtocolAny    StatefulRuleProtocol = "IP"
	StatefulRuleProtocolTcp    StatefulRuleProtocol = "TCP"
	StatefulRuleProtocolUdp    StatefulRuleProtocol = "UDP"
	StatefulRuleProtocolIcmp   StatefulRuleProtocol = "ICMP"
	StatefulRuleProtocolHttp   StatefulRuleProtocol = "HTTP"
	StatefulRuleProtocolFtp    StatefulRuleProtocol = "FTP"
	StatefulRuleProtocolTls    StatefulRuleProtocol = "TLS"
	StatefulRuleProtocolSmb    StatefulRuleProtocol = "SMB"
	StatefulRuleProtocolDns    StatefulRuleProtocol = "DNS"
	StatefulRuleProtocolDcerpc StatefulRuleProtocol = "DCERPC"
	StatefulRuleProtocolSsh    StatefulRuleProtocol = "SSH"
	StatefulRuleProtocolSmtp   StatefulRuleProtocol = "SMTP"
	StatefulRuleProtocolImap   StatefulRuleProtocol = "IMAP"
	StatefulRuleProtocolMsn    StatefulRuleProtocol = "MSN"
	StatefulRuleProtocolKrb5   StatefulRuleProtocol = "KRB5"
	StatefulRuleProtocolIkev2  StatefulRuleProtocol = "IKEV2"
	StatefulRuleProtocolTftp   StatefulRuleProtocol = "TFTP"
	StatefulRuleProtocolNtp    StatefulRuleProtocol = "NTP"
	StatefulRuleProtocolDhcp   StatefulRuleProtocol = "DHCP"
)

// Values returns all known values for StatefulRuleProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StatefulRuleProtocol) Values() []StatefulRuleProtocol {
	return []StatefulRuleProtocol{
		"IP",
		"TCP",
		"UDP",
		"ICMP",
		"HTTP",
		"FTP",
		"TLS",
		"SMB",
		"DNS",
		"DCERPC",
		"SSH",
		"SMTP",
		"IMAP",
		"MSN",
		"KRB5",
		"IKEV2",
		"TFTP",
		"NTP",
		"DHCP",
	}
}

type TargetType string

// Enum values for TargetType
const (
	TargetTypeTlsSni   TargetType = "TLS_SNI"
	TargetTypeHttpHost TargetType = "HTTP_HOST"
)

// Values returns all known values for TargetType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (TargetType) Values() []TargetType {
	return []TargetType{
		"TLS_SNI",
		"HTTP_HOST",
	}
}

type TCPFlag string

// Enum values for TCPFlag
const (
	TCPFlagFin TCPFlag = "FIN"
	TCPFlagSyn TCPFlag = "SYN"
	TCPFlagRst TCPFlag = "RST"
	TCPFlagPsh TCPFlag = "PSH"
	TCPFlagAck TCPFlag = "ACK"
	TCPFlagUrg TCPFlag = "URG"
	TCPFlagEce TCPFlag = "ECE"
	TCPFlagCwr TCPFlag = "CWR"
)

// Values returns all known values for TCPFlag. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (TCPFlag) Values() []TCPFlag {
	return []TCPFlag{
		"FIN",
		"SYN",
		"RST",
		"PSH",
		"ACK",
		"URG",
		"ECE",
		"CWR",
	}
}
