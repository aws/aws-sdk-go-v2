// Code generated by smithy-go-codegen DO NOT EDIT.

package resourcegroupstaggingapi

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroupstaggingapi/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns all the tagged or previously tagged resources that are located in the
// specified Region for the AWS account. Depending on what information you want
// returned, you can also specify the following:
//
//     * Filters that specify what
// tags and resource types you want returned. The response includes all tags that
// are associated with the requested resources.
//
//     * Information about compliance
// with the account's effective tag policy. For more information on tag policies,
// see Tag Policies
// (http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
// in the AWS Organizations User Guide.
//
// You can check the PaginationToken response
// parameter to determine if a query is complete. Queries occasionally return fewer
// results on a page than allowed. The PaginationToken response parameter value is
// null only when there are no more results to display.
func (c *Client) GetResources(ctx context.Context, params *GetResourcesInput, optFns ...func(*Options)) (*GetResourcesOutput, error) {
	stack := middleware.NewStack("GetResources", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetResourcesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetResources(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetResources",
			Err:           err,
		}
	}
	out := result.(*GetResourcesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetResourcesInput struct {
	// AWS recommends using ResourcesPerPage instead of this parameter. A limit that
	// restricts the number of tags (key and value pairs) returned by GetResources in
	// paginated output. A resource with no tags is counted as having one tag (one key
	// and value pair). GetResources does not split a resource and its associated tags
	// across pages. If the specified TagsPerPage would cause such a break, a
	// PaginationToken is returned in place of the affected resource and its tags. Use
	// that token in another request to get the remaining data. For example, if you
	// specify a TagsPerPage of 100 and the account has 22 resources with 10 tags each
	// (meaning that each resource has 10 key and value pairs), the output will consist
	// of three pages. The first page displays the first 10 resources, each with its 10
	// tags. The second page displays the next 10 resources, each with its 10 tags. The
	// third page displays the remaining 2 resources, each with its 10 tags. You can
	// set TagsPerPage to a minimum of 100 items and the maximum of 500 items.
	TagsPerPage *int32
	// A limit that restricts the number of resources returned by GetResources in
	// paginated output. You can set ResourcesPerPage to a minimum of 1 item and the
	// maximum of 100 items.
	ResourcesPerPage *int32
	// A string that indicates that additional data is available. Leave this value
	// empty for your initial request. If the response includes a PaginationToken, use
	// that string for this value to request an additional page of data.
	PaginationToken *string
	// A list of TagFilters (keys and values). Each TagFilter specified must contain a
	// key with values as optional. A request can include up to 50 keys, and each key
	// can include up to 20 values. Note the following when deciding how to use
	// TagFilters:
	//
	//     * If you do specify a TagFilter, the response returns only
	// those resources that are currently associated with the specified tag.
	//
	//     * If
	// you don't specify a TagFilter, the response includes all resources that were
	// ever associated with tags. Resources that currently don't have associated tags
	// are shown with an empty tag set, like this: "Tags": [].
	//
	//     * If you specify
	// more than one filter in a single request, the response returns only those
	// resources that satisfy all specified filters.
	//
	//     * If you specify a filter
	// that contains more than one value for a key, the response returns resources that
	// match any of the specified values for that key.
	//
	//     * If you don't specify any
	// values for a key, the response returns resources that are tagged with that key
	// irrespective of the value. For example, for filters: filter1 = {key1, {value1}},
	// filter2 = {key2, {value2,value3,value4}} , filter3 = {key3}:
	//
	//         *
	// GetResources( {filter1} ) returns resources tagged with key1=value1
	//
	//         *
	// GetResources( {filter2} ) returns resources tagged with key2=value2 or
	// key2=value3 or key2=value4
	//
	//         * GetResources( {filter3} ) returns
	// resources tagged with any tag containing key3 as its tag key, irrespective of
	// its value
	//
	//         * GetResources( {filter1,filter2,filter3} ) returns resources
	// tagged with ( key1=value1) and ( key2=value2 or key2=value3 or key2=value4) and
	// (key3, irrespective of the value)
	TagFilters []*types.TagFilter
	// Specifies whether to exclude resources that are compliant with the tag policy.
	// Set this to true if you are interested in retrieving information on noncompliant
	// resources only. You can use this parameter only if the IncludeComplianceDetails
	// parameter is also set to true.
	ExcludeCompliantResources *bool
	// The constraints on the resources that you want returned. The format of each
	// resource type is service[:resourceType]. For example, specifying a resource type
	// of ec2 returns all Amazon EC2 resources (which includes EC2 instances).
	// Specifying a resource type of ec2:instance returns only EC2 instances. The
	// string for each service name and resource type is the same as that embedded in a
	// resource's Amazon Resource Name (ARN). Consult the AWS General Reference for the
	// following:
	//
	//     * For a list of service name strings, see AWS Service Namespaces
	// (http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces).
	//
	//
	// * For resource type strings, see Example ARNs
	// (http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax).
	//
	//
	// * For more information about ARNs, see Amazon Resource Names (ARNs) and AWS
	// Service Namespaces
	// (http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
	//
	// You
	// can specify multiple resource types by using an array. The array can include up
	// to 100 items. Note that the length constraint requirement applies to each
	// resource type filter.
	ResourceTypeFilters []*string
	// Specifies whether to include details regarding the compliance with the effective
	// tag policy. Set this to true to determine whether resources are compliant with
	// the tag policy and to get details.
	IncludeComplianceDetails *bool
}

type GetResourcesOutput struct {
	// A list of resource ARNs and the tags (keys and values) associated with each.
	ResourceTagMappingList []*types.ResourceTagMapping
	// A string that indicates that the response contains more data than can be
	// returned in a single response. To receive additional data, specify this string
	// for the PaginationToken value in a subsequent request.
	PaginationToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetResourcesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetResources{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetResources{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetResources(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "tagging",
		OperationName: "GetResources",
	}
}
