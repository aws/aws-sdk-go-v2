// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// Describes the configuration of an Auto Scaling group.
type AutoScalingGroupConfiguration struct {

	// The desired capacity, or number of instances, for the Auto Scaling group.
	DesiredCapacity int32

	// The instance type for the Auto Scaling group.
	InstanceType *string

	// The maximum size, or maximum number of instances, for the Auto Scaling group.
	MaxSize int32

	// The minimum size, or minimum number of instances, for the Auto Scaling group.
	MinSize int32
}

// Describes an Auto Scaling group recommendation.
type AutoScalingGroupRecommendation struct {

	// The AWS account ID of the Auto Scaling group.
	AccountId *string

	// The Amazon Resource Name (ARN) of the Auto Scaling group.
	AutoScalingGroupArn *string

	// The name of the Auto Scaling group.
	AutoScalingGroupName *string

	// An array of objects that describe the current configuration of the Auto Scaling
	// group.
	CurrentConfiguration *AutoScalingGroupConfiguration

	// The finding classification for the Auto Scaling group. Findings for Auto Scaling
	// groups include:
	//
	// * NotOptimized —An Auto Scaling group is considered not
	// optimized when AWS Compute Optimizer identifies a recommendation that can
	// provide better performance for your workload.
	//
	// * Optimized —An Auto Scaling
	// group is considered optimized when Compute Optimizer determines that the group
	// is correctly provisioned to run your workload based on the chosen instance type.
	// For optimized resources, Compute Optimizer might recommend a new generation
	// instance type.
	Finding Finding

	// The time stamp of when the Auto Scaling group recommendation was last refreshed.
	LastRefreshTimestamp *time.Time

	// The number of days for which utilization metrics were analyzed for the Auto
	// Scaling group.
	LookBackPeriodInDays float64

	// An array of objects that describe the recommendation options for the Auto
	// Scaling group.
	RecommendationOptions []AutoScalingGroupRecommendationOption

	// An array of objects that describe the utilization metrics of the Auto Scaling
	// group.
	UtilizationMetrics []UtilizationMetric
}

// Describes a recommendation option for an Auto Scaling group.
type AutoScalingGroupRecommendationOption struct {

	// An array of objects that describe an Auto Scaling group configuration.
	Configuration *AutoScalingGroupConfiguration

	// The performance risk of the Auto Scaling group configuration recommendation.
	// Performance risk is the likelihood of the recommended instance type not meeting
	// the performance requirement of your workload. The lowest performance risk is
	// categorized as 0, and the highest as 5.
	PerformanceRisk float64

	// An array of objects that describe the projected utilization metrics of the Auto
	// Scaling group recommendation option. The Cpu and Memory metrics are the only
	// projected utilization metrics returned. Additionally, the Memory metric is
	// returned only for resources that have the unified CloudWatch agent installed on
	// them. For more information, see Enabling Memory Utilization with the CloudWatch
	// Agent
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
	ProjectedUtilizationMetrics []UtilizationMetric

	// The rank of the Auto Scaling group recommendation option. The top recommendation
	// option is ranked as 1.
	Rank int32
}

// Describes a filter that returns a more specific list of Amazon Elastic Block
// Store (Amazon EBS) volume recommendations. This filter is used with the
// GetEBSVolumeRecommendations action.
type EBSFilter struct {

	// The name of the filter. Specify Finding to return recommendations with a
	// specific finding classification (e.g., Optimized).
	Name EBSFilterName

	// The value of the filter. The valid values are Optimized, or NotOptimized.
	Values []string
}

// Describes a utilization metric of an Amazon Elastic Block Store (Amazon EBS)
// volume. Compare the utilization metric data of your resource against its
// projected utilization metric data to determine the performance difference
// between your current resource and the recommended option.
type EBSUtilizationMetric struct {

	// The name of the utilization metric. The following utilization metrics are
	// available:
	//
	// * VolumeReadOpsPerSecond - The completed read operations per second
	// from the volume in a specified period of time. Unit: Count
	//
	// *
	// VolumeWriteOpsPerSecond - The completed write operations per second to the
	// volume in a specified period of time. Unit: Count
	//
	// * VolumeReadBytesPerSecond -
	// The bytes read per second from the volume in a specified period of time. Unit:
	// Bytes
	//
	// * VolumeWriteBytesPerSecond - The bytes written to the volume in a
	// specified period of time. Unit: Bytes
	Name EBSMetricName

	// The statistic of the utilization metric. The Compute Optimizer API, AWS Command
	// Line Interface (AWS CLI), and SDKs return utilization metrics using only the
	// Maximum statistic, which is the highest value observed during the specified
	// period. The Compute Optimizer console displays graphs for some utilization
	// metrics using the Average statistic, which is the value of Sum / SampleCount
	// during the specified period. For more information, see Viewing resource
	// recommendations
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html)
	// in the AWS Compute Optimizer User Guide. You can also get averaged utilization
	// metric data for your resources using Amazon CloudWatch. For more information,
	// see the Amazon CloudWatch User Guide
	// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
	Statistic MetricStatistic

	// The value of the utilization metric.
	Value float64
}

// Describes the destination of the recommendations export and metadata files.
type ExportDestination struct {

	// An object that describes the destination Amazon Simple Storage Service (Amazon
	// S3) bucket name and object keys of a recommendations export file, and its
	// associated metadata file.
	S3 *S3Destination
}

// Describes a filter that returns a more specific list of recommendations. This
// filter is used with the GetAutoScalingGroupRecommendations and
// GetEC2InstanceRecommendations actions.
type Filter struct {

	// The name of the filter. Specify Finding to return recommendations with a
	// specific finding classification (e.g., Overprovisioned). Specify
	// RecommendationSourceType to return recommendations of a specific resource type
	// (e.g., AutoScalingGroup).
	Name FilterName

	// The value of the filter. The valid values for this parameter are as follows,
	// depending on what you specify for the name parameter and the resource type that
	// you wish to filter results for:
	//
	// * Specify Optimized or NotOptimized if you
	// specified the name parameter as Finding and you want to filter results for Auto
	// Scaling groups.
	//
	// * Specify Underprovisioned, Overprovisioned, or Optimized if
	// you specified the name parameter as Finding and you want to filter results for
	// EC2 instances.
	//
	// * Specify Ec2Instance or AutoScalingGroup if you specified the
	// name parameter as RecommendationSourceType.
	Values []string
}

// Describes an error experienced when getting recommendations. For example, an
// error is returned if you request recommendations for an unsupported Auto Scaling
// group, or if you request recommendations for an instance of an unsupported
// instance family.
type GetRecommendationError struct {

	// The error code.
	Code *string

	// The ID of the error.
	Identifier *string

	// The message, or reason, for the error.
	Message *string
}

// Describes an Amazon EC2 instance recommendation.
type InstanceRecommendation struct {

	// The AWS account ID of the instance.
	AccountId *string

	// The instance type of the current instance.
	CurrentInstanceType *string

	// The finding classification for the instance. Findings for instances include:
	//
	// *
	// Underprovisioned —An instance is considered under-provisioned when at least one
	// specification of your instance, such as CPU, memory, or network, does not meet
	// the performance requirements of your workload. Under-provisioned instances may
	// lead to poor application performance.
	//
	// * Overprovisioned —An instance is
	// considered over-provisioned when at least one specification of your instance,
	// such as CPU, memory, or network, can be sized down while still meeting the
	// performance requirements of your workload, and no specification is
	// under-provisioned. Over-provisioned instances may lead to unnecessary
	// infrastructure cost.
	//
	// * Optimized —An instance is considered optimized when all
	// specifications of your instance, such as CPU, memory, and network, meet the
	// performance requirements of your workload and is not over provisioned. An
	// optimized instance runs your workloads with optimal performance and
	// infrastructure cost. For optimized resources, AWS Compute Optimizer might
	// recommend a new generation instance type.
	Finding Finding

	// The Amazon Resource Name (ARN) of the current instance.
	InstanceArn *string

	// The name of the current instance.
	InstanceName *string

	// The time stamp of when the instance recommendation was last refreshed.
	LastRefreshTimestamp *time.Time

	// The number of days for which utilization metrics were analyzed for the instance.
	LookBackPeriodInDays float64

	// An array of objects that describe the recommendation options for the instance.
	RecommendationOptions []InstanceRecommendationOption

	// An array of objects that describe the source resource of the recommendation.
	RecommendationSources []RecommendationSource

	// An array of objects that describe the utilization metrics of the instance.
	UtilizationMetrics []UtilizationMetric
}

// Describes a recommendation option for an Amazon EC2 instance.
type InstanceRecommendationOption struct {

	// The instance type of the instance recommendation.
	InstanceType *string

	// The performance risk of the instance recommendation option. Performance risk is
	// the likelihood of the recommended instance type not meeting the performance
	// requirement of your workload. The lowest performance risk is categorized as 0,
	// and the highest as 5.
	PerformanceRisk float64

	// An array of objects that describe the projected utilization metrics of the
	// instance recommendation option. The Cpu and Memory metrics are the only
	// projected utilization metrics returned. Additionally, the Memory metric is
	// returned only for resources that have the unified CloudWatch agent installed on
	// them. For more information, see Enabling Memory Utilization with the CloudWatch
	// Agent
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
	ProjectedUtilizationMetrics []UtilizationMetric

	// The rank of the instance recommendation option. The top recommendation option is
	// ranked as 1.
	Rank int32
}

// Describes a filter that returns a more specific list of recommendation export
// jobs. This filter is used with the DescribeRecommendationExportJobs action.
type JobFilter struct {

	// The name of the filter. Specify ResourceType to return export jobs of a specific
	// resource type (e.g., Ec2Instance). Specify JobStatus to return export jobs with
	// a specific status (e.g, Complete).
	Name JobFilterName

	// The value of the filter. The valid values for this parameter are as follows,
	// depending on what you specify for the name parameter:
	//
	// * Specify Ec2Instance or
	// AutoScalingGroup if you specified the name parameter as ResourceType. There is
	// no filter for EBS volumes because volume recommendations cannot be exported at
	// this time.
	//
	// * Specify Queued, InProgress, Complete, or Failed if you specified
	// the name parameter as JobStatus.
	Values []string
}

// Describes a projected utilization metric of an AWS Lambda function
// recommendation option.
type LambdaFunctionMemoryProjectedMetric struct {

	// The name of the projected utilization metric.
	Name LambdaFunctionMemoryMetricName

	// The statistic of the projected utilization metric.
	Statistic LambdaFunctionMemoryMetricStatistic

	// The values of the projected utilization metrics.
	Value float64
}

// Describes a recommendation option for an AWS Lambda function.
type LambdaFunctionMemoryRecommendationOption struct {

	// The memory size, in MB, of the function recommendation option.
	MemorySize int32

	// An array of objects that describe the projected utilization metrics of the
	// function recommendation option.
	ProjectedUtilizationMetrics []LambdaFunctionMemoryProjectedMetric

	// The rank of the function recommendation option. The top recommendation option is
	// ranked as 1.
	Rank int32
}

// Describes an AWS Lambda function recommendation.
type LambdaFunctionRecommendation struct {

	// The AWS account ID of the function.
	AccountId *string

	// The amount of memory, in MB, that's allocated to the current function.
	CurrentMemorySize int32

	// The finding classification for the function. Findings for functions include:
	//
	// *
	// Optimized — The function is correctly provisioned to run your workload based on
	// its current configuration and its utilization history. This finding
	// classification does not include finding reason codes.
	//
	// * NotOptimized — The
	// function is performing at a higher level (over-provisioned) or at a lower level
	// (under-provisioned) than required for your workload because its current
	// configuration is not optimal. Over-provisioned resources might lead to
	// unnecessary infrastructure cost, and under-provisioned resources might lead to
	// poor application performance. This finding classification can include the
	// MemoryUnderprovisioned and MemoryUnderprovisioned finding reason codes.
	//
	// *
	// Unavailable — Compute Optimizer was unable to generate a recommendation for the
	// function. This could be because the function has not accumulated sufficient
	// metric data, or the function does not qualify for a recommendation. This finding
	// classification can include the InsufficientData and Inconclusive finding reason
	// codes. Functions with a finding of unavailable are not returned unless you
	// specify the filter parameter with a value of Unavailable in your
	// GetLambdaFunctionRecommendations request.
	Finding LambdaFunctionRecommendationFinding

	// The reason for the finding classification of the function. Functions that have a
	// finding classification of Optimized don't have a finding reason code. Reason
	// codes include:
	//
	// * MemoryOverprovisioned — The function is over-provisioned when
	// its memory configuration can be sized down while still meeting the performance
	// requirements of your workload. An over-provisioned function might lead to
	// unnecessary infrastructure cost. This finding reason code is part of the
	// NotOptimized finding classification.
	//
	// * MemoryUnderprovisioned — The function is
	// under-provisioned when its memory configuration doesn't meet the performance
	// requirements of the workload. An under-provisioned function might lead to poor
	// application performance. This finding reason code is part of the NotOptimized
	// finding classification.
	//
	// * InsufficientData — The function does not have
	// sufficient metric data for Compute Optimizer to generate a recommendation. For
	// more information, see the Supported resources and requirements
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html) in
	// the AWS Compute Optimizer User Guide. This finding reason code is part of the
	// Unavailable finding classification.
	//
	// * Inconclusive — The function does not
	// qualify for a recommendation because Compute Optimizer cannot generate a
	// recommendation with a high degree of confidence. This finding reason code is
	// part of the Unavailable finding classification.
	FindingReasonCodes []LambdaFunctionRecommendationFindingReasonCode

	// The Amazon Resource Name (ARN) of the current function.
	FunctionArn *string

	// The version number of the current function.
	FunctionVersion *string

	// The time stamp of when the function recommendation was last refreshed.
	LastRefreshTimestamp *time.Time

	// The number of days for which utilization metrics were analyzed for the function.
	LookbackPeriodInDays float64

	// An array of objects that describe the memory configuration recommendation
	// options for the function.
	MemorySizeRecommendationOptions []LambdaFunctionMemoryRecommendationOption

	// The number of times your function code was executed during the look-back period.
	NumberOfInvocations int64

	// An array of objects that describe the utilization metrics of the function.
	UtilizationMetrics []LambdaFunctionUtilizationMetric
}

// Describes a filter that returns a more specific list of AWS Lambda function
// recommendations.
type LambdaFunctionRecommendationFilter struct {

	// The name of the filter. Specify Finding to return recommendations with a
	// specific finding classification (e.g., NotOptimized). Specify FindingReasonCode
	// to return recommendations with a specific finding reason code (e.g.,
	// MemoryUnderprovisioned).
	Name LambdaFunctionRecommendationFilterName

	// The value of the filter. The valid values for this parameter are as follows,
	// depending on what you specify for the name parameter:
	//
	// * Specify Optimized,
	// NotOptimized, or Unavailable if you specified the name parameter as Finding.
	//
	// *
	// Specify MemoryOverprovisioned, MemoryUnderprovisioned, InsufficientData, or
	// Inconclusive if you specified the name parameter as FindingReasonCode.
	Values []string
}

// Describes a utilization metric of an AWS Lambda function.
type LambdaFunctionUtilizationMetric struct {

	// The name of the utilization metric. The following utilization metrics are
	// available:
	//
	// * Duration - The amount of time that your function code spends
	// processing an event.
	//
	// * Memory - The amount of memory used per invocation.
	Name LambdaFunctionMetricName

	// The statistic of the utilization metric. The Compute Optimizer API, AWS Command
	// Line Interface (AWS CLI), and SDKs return utilization metrics using only the
	// Maximum statistic, which is the highest value observed during the specified
	// period. The Compute Optimizer console displays graphs for some utilization
	// metrics using the Average statistic, which is the value of Sum / SampleCount
	// during the specified period. For more information, see Viewing resource
	// recommendations
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html)
	// in the AWS Compute Optimizer User Guide. You can also get averaged utilization
	// metric data for your resources using Amazon CloudWatch. For more information,
	// see the Amazon CloudWatch User Guide
	// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
	Statistic LambdaFunctionMetricStatistic

	// The value of the utilization metric.
	Value float64
}

// Describes a projected utilization metric of a recommendation option, such as an
// Amazon EC2 instance. This represents the projected utilization of a
// recommendation option had you used that resource during the analyzed period.
// Compare the utilization metric data of your resource against its projected
// utilization metric data to determine the performance difference between your
// current resource and the recommended option. The Cpu and Memory metrics are the
// only projected utilization metrics returned when you run the
// GetEC2RecommendationProjectedMetrics action. Additionally, the Memory metric is
// returned only for resources that have the unified CloudWatch agent installed on
// them. For more information, see Enabling Memory Utilization with the CloudWatch
// Agent
// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
type ProjectedMetric struct {

	// The name of the projected utilization metric. The following projected
	// utilization metrics are returned:
	//
	// * Cpu - The projected percentage of allocated
	// EC2 compute units that would be in use on the recommendation option had you used
	// that resource during the analyzed period. This metric identifies the processing
	// power required to run an application on the recommendation option. Depending on
	// the instance type, tools in your operating system can show a lower percentage
	// than CloudWatch when the instance is not allocated a full processor core. Units:
	// Percent
	//
	// * Memory - The percentage of memory that would be in use on the
	// recommendation option had you used that resource during the analyzed period.
	// This metric identifies the amount of memory required to run an application on
	// the recommendation option. Units: Percent The Memory metric is returned only for
	// resources that have the unified CloudWatch agent installed on them. For more
	// information, see Enabling Memory Utilization with the CloudWatch Agent
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
	Name MetricName

	// The time stamps of the projected utilization metric.
	Timestamps []time.Time

	// The values of the projected utilization metrics.
	Values []float64
}

// A summary of a finding reason code.
type ReasonCodeSummary struct {

	// The name of the finding reason code.
	Name FindingReasonCode

	// The value of the finding reason code summary.
	Value float64
}

// Describes a recommendation export job. Use the DescribeRecommendationExportJobs
// action to view your recommendation export jobs. Use the
// ExportAutoScalingGroupRecommendations or ExportEC2InstanceRecommendations
// actions to request an export of your recommendations.
type RecommendationExportJob struct {

	// The timestamp of when the export job was created.
	CreationTimestamp *time.Time

	// An object that describes the destination of the export file.
	Destination *ExportDestination

	// The reason for an export job failure.
	FailureReason *string

	// The identification number of the export job.
	JobId *string

	// The timestamp of when the export job was last updated.
	LastUpdatedTimestamp *time.Time

	// The resource type of the exported recommendations.
	ResourceType ResourceType

	// The status of the export job.
	Status JobStatus
}

// Describes the source of a recommendation, such as an Amazon EC2 instance or Auto
// Scaling group.
type RecommendationSource struct {

	// The Amazon Resource Name (ARN) of the recommendation source.
	RecommendationSourceArn *string

	// The resource type of the recommendation source.
	RecommendationSourceType RecommendationSourceType
}

// A summary of a recommendation.
type RecommendationSummary struct {

	// The AWS account ID of the recommendation summary.
	AccountId *string

	// The resource type of the recommendation.
	RecommendationResourceType RecommendationSourceType

	// An array of objects that describe a recommendation summary.
	Summaries []Summary
}

// Describes a projected utilization metric of a recommendation option. The Cpu and
// Memory metrics are the only projected utilization metrics returned when you run
// the GetEC2RecommendationProjectedMetrics action. Additionally, the Memory metric
// is returned only for resources that have the unified CloudWatch agent installed
// on them. For more information, see Enabling Memory Utilization with the
// CloudWatch Agent
// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
type RecommendedOptionProjectedMetric struct {

	// An array of objects that describe a projected utilization metric.
	ProjectedMetrics []ProjectedMetric

	// The rank of the recommendation option projected metric. The top recommendation
	// option is ranked as 1. The projected metric rank correlates to the
	// recommendation option rank. For example, the projected metric ranked as 1 is
	// related to the recommendation option that is also ranked as 1 in the same
	// response.
	Rank int32

	// The recommended instance type.
	RecommendedInstanceType *string
}

// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name
// and object keys of a recommendations export file, and its associated metadata
// file.
type S3Destination struct {

	// The name of the Amazon S3 bucket used as the destination of an export file.
	Bucket *string

	// The Amazon S3 bucket key of an export file. The key uniquely identifies the
	// object, or export file, in the S3 bucket.
	Key *string

	// The Amazon S3 bucket key of a metadata file. The key uniquely identifies the
	// object, or metadata file, in the S3 bucket.
	MetadataKey *string
}

// Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name
// and key prefix for a recommendations export job. You must create the destination
// Amazon S3 bucket for your recommendations export before you create the export
// job. Compute Optimizer does not create the S3 bucket for you. After you create
// the S3 bucket, ensure that it has the required permission policy to allow
// Compute Optimizer to write the export file to it. If you plan to specify an
// object prefix when you create the export job, you must include the object prefix
// in the policy that you add to the S3 bucket. For more information, see Amazon S3
// Bucket Policy for Compute Optimizer
// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html)
// in the Compute Optimizer user guide.
type S3DestinationConfig struct {

	// The name of the Amazon S3 bucket to use as the destination for an export job.
	Bucket *string

	// The Amazon S3 bucket prefix for an export job.
	KeyPrefix *string
}

// The summary of a recommendation.
type Summary struct {

	// The finding classification of the recommendation.
	Name Finding

	// An array of objects that summarize a finding reason code.
	ReasonCodeSummaries []ReasonCodeSummary

	// The value of the recommendation summary.
	Value float64
}

// Describes a utilization metric of a resource, such as an Amazon EC2 instance.
// Compare the utilization metric data of your resource against its projected
// utilization metric data to determine the performance difference between your
// current resource and the recommended option.
type UtilizationMetric struct {

	// The name of the utilization metric. The following utilization metrics are
	// available:
	//
	// * Cpu - The percentage of allocated EC2 compute units that are
	// currently in use on the instance. This metric identifies the processing power
	// required to run an application on the instance. Depending on the instance type,
	// tools in your operating system can show a lower percentage than CloudWatch when
	// the instance is not allocated a full processor core. Units: Percent
	//
	// * Memory -
	// The percentage of memory that is currently in use on the instance. This metric
	// identifies the amount of memory required to run an application on the instance.
	// Units: Percent The Memory metric is returned only for resources that have the
	// unified CloudWatch agent installed on them. For more information, see Enabling
	// Memory Utilization with the CloudWatch Agent
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent).
	//
	// *
	// EBS_READ_OPS_PER_SECOND - The completed read operations from all EBS volumes
	// attached to the instance in a specified period of time. Unit: Count
	//
	// *
	// EBS_WRITE_OPS_PER_SECOND - The completed write operations to all EBS volumes
	// attached to the instance in a specified period of time. Unit: Count
	//
	// *
	// EBS_READ_BYTES_PER_SECOND - The bytes read from all EBS volumes attached to the
	// instance in a specified period of time. Unit: Bytes
	//
	// *
	// EBS_WRITE_BYTES_PER_SECOND - The bytes written to all EBS volumes attached to
	// the instance in a specified period of time. Unit: Bytes
	Name MetricName

	// The statistic of the utilization metric. The Compute Optimizer API, AWS Command
	// Line Interface (AWS CLI), and SDKs return utilization metrics using only the
	// Maximum statistic, which is the highest value observed during the specified
	// period. The Compute Optimizer console displays graphs for some utilization
	// metrics using the Average statistic, which is the value of Sum / SampleCount
	// during the specified period. For more information, see Viewing resource
	// recommendations
	// (https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html)
	// in the AWS Compute Optimizer User Guide. You can also get averaged utilization
	// metric data for your resources using Amazon CloudWatch. For more information,
	// see the Amazon CloudWatch User Guide
	// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html).
	Statistic MetricStatistic

	// The value of the utilization metric.
	Value float64
}

// Describes the configuration of an Amazon Elastic Block Store (Amazon EBS)
// volume.
type VolumeConfiguration struct {

	// The baseline IOPS of the volume.
	VolumeBaselineIOPS int32

	// The baseline throughput of the volume.
	VolumeBaselineThroughput int32

	// The burst IOPS of the volume.
	VolumeBurstIOPS int32

	// The burst throughput of the volume.
	VolumeBurstThroughput int32

	// The size of the volume, in GiB.
	VolumeSize int32

	// The volume type. This can be gp2 for General Purpose SSD, io1 or io2 for
	// Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or
	// standard for Magnetic volumes.
	VolumeType *string
}

// Describes an Amazon Elastic Block Store (Amazon EBS) volume recommendation.
type VolumeRecommendation struct {

	// The AWS account ID of the volume.
	AccountId *string

	// An array of objects that describe the current configuration of the volume.
	CurrentConfiguration *VolumeConfiguration

	// The finding classification for the volume. Findings for volumes include:
	//
	// *
	// NotOptimized —A volume is considered not optimized when AWS Compute Optimizer
	// identifies a recommendation that can provide better performance for your
	// workload.
	//
	// * Optimized —An volume is considered optimized when Compute Optimizer
	// determines that the volume is correctly provisioned to run your workload based
	// on the chosen volume type. For optimized resources, Compute Optimizer might
	// recommend a new generation volume type.
	Finding EBSFinding

	// The time stamp of when the volume recommendation was last refreshed.
	LastRefreshTimestamp *time.Time

	// The number of days for which utilization metrics were analyzed for the volume.
	LookBackPeriodInDays float64

	// An array of objects that describe the utilization metrics of the volume.
	UtilizationMetrics []EBSUtilizationMetric

	// The Amazon Resource Name (ARN) of the current volume.
	VolumeArn *string

	// An array of objects that describe the recommendation options for the volume.
	VolumeRecommendationOptions []VolumeRecommendationOption
}

// Describes a recommendation option for an Amazon Elastic Block Store (Amazon EBS)
// instance.
type VolumeRecommendationOption struct {

	// An array of objects that describe a volume configuration.
	Configuration *VolumeConfiguration

	// The performance risk of the volume recommendation option. Performance risk is
	// the likelihood of the recommended volume type not meeting the performance
	// requirement of your workload. The lowest performance risk is categorized as 0,
	// and the highest as 5.
	PerformanceRisk float64

	// The rank of the volume recommendation option. The top recommendation option is
	// ranked as 1.
	Rank int32
}
