// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes the configuration options that are used in a particular configuration
// template or environment, or that a specified solution stack defines. The
// description includes the values the options, their default values, and an
// indication of the required action on a running environment if an option value is
// changed.
func (c *Client) DescribeConfigurationOptions(ctx context.Context, params *DescribeConfigurationOptionsInput, optFns ...func(*Options)) (*DescribeConfigurationOptionsOutput, error) {
	stack := middleware.NewStack("DescribeConfigurationOptions", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpDescribeConfigurationOptionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeConfigurationOptions(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeConfigurationOptions",
			Err:           err,
		}
	}
	out := result.(*DescribeConfigurationOptionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Result message containing a list of application version descriptions.
type DescribeConfigurationOptionsInput struct {
	// If specified, restricts the descriptions to only the specified options.
	Options []*types.OptionSpecification
	// The ARN of the custom platform.
	PlatformArn *string
	// The name of the configuration template whose configuration options you want to
	// describe.
	TemplateName *string
	// The name of the solution stack whose configuration options you want to describe.
	SolutionStackName *string
	// The name of the application associated with the configuration template or
	// environment. Only needed if you want to describe the configuration options
	// associated with either the configuration template or environment.
	ApplicationName *string
	// The name of the environment whose configuration options you want to describe.
	EnvironmentName *string
}

// Describes the settings for a specified configuration set.
type DescribeConfigurationOptionsOutput struct {
	// The name of the solution stack these configuration options belong to.
	SolutionStackName *string
	// A list of ConfigurationOptionDescription ().
	Options []*types.ConfigurationOptionDescription
	// The ARN of the platform version.
	PlatformArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpDescribeConfigurationOptionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpDescribeConfigurationOptions{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpDescribeConfigurationOptions{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeConfigurationOptions(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "DescribeConfigurationOptions",
	}
}
