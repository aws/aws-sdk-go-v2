// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// Describes the properties of an application.
type ApplicationDescription struct {
	// The name of the application.
	ApplicationName *string
	// The lifecycle settings for the application.
	ResourceLifecycleConfig *ApplicationResourceLifecycleConfig
	// The names of the versions for this application.
	Versions []*string
	// The date when the application was created.
	DateCreated *time.Time
	// The Amazon Resource Name (ARN) of the application.
	ApplicationArn *string
	// The date when the application was last modified.
	DateUpdated *time.Time
	// User-defined description of the application.
	Description *string
	// The names of the configuration templates associated with this application.
	ConfigurationTemplates []*string
}

// Application request metrics for an AWS Elastic Beanstalk environment.
type ApplicationMetrics struct {
	// Represents the average latency for the slowest X percent of requests over the
	// last 10 seconds. Latencies are in seconds with one millisecond resolution.
	Latency *Latency
	// Represents the percentage of requests over the last 10 seconds that resulted in
	// each type of status code response.
	StatusCodes *StatusCodes
	// The amount of time that the metrics cover (usually 10 seconds). For example, you
	// might have 5 requests (request_count) within the most recent time slice of 10
	// seconds (duration).
	Duration *int32
	// Average number of requests handled by the web server per second over the last 10
	// seconds.
	RequestCount *int32
}

// The resource lifecycle configuration for an application. Defines lifecycle
// settings for resources that belong to the application, and the service role that
// AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version
// lifecycle configuration defines lifecycle settings for application versions.
type ApplicationResourceLifecycleConfig struct {
	// The ARN of an IAM service role that Elastic Beanstalk has permission to assume.
	// The ServiceRole property is required the first time that you provide a
	// VersionLifecycleConfig for the application in one of the supporting calls
	// (CreateApplication or UpdateApplicationResourceLifecycle). After you provide it
	// once, in either one of the calls, Elastic Beanstalk persists the Service Role
	// with the application, and you don't need to specify it again in subsequent
	// UpdateApplicationResourceLifecycle calls. You can, however, specify it in
	// subsequent calls to change the Service Role to another value.
	ServiceRole *string
	// Defines lifecycle settings for application versions.
	VersionLifecycleConfig *ApplicationVersionLifecycleConfig
}

// Describes the properties of an application version.
type ApplicationVersionDescription struct {
	// The storage location of the application version's source bundle in Amazon S3.
	SourceBundle *S3Location
	// The name of the application to which the application version belongs.
	ApplicationName *string
	// A unique identifier for the application version.
	VersionLabel *string
	// The creation date of the application version.
	DateCreated *time.Time
	// The Amazon Resource Name (ARN) of the application version.
	ApplicationVersionArn *string
	// The last modified date of the application version.
	DateUpdated *time.Time
	// The description of the application version.
	Description *string
	// Reference to the artifact from the AWS CodeBuild build.
	BuildArn *string
	// If the version's source code was retrieved from AWS CodeCommit, the location of
	// the source code for the application version.
	SourceBuildInformation *SourceBuildInformation
	// The processing status of the application version. Reflects the state of the
	// application version during its creation. Many of the values are only applicable
	// if you specified True for the Process parameter of the CreateApplicationVersion
	// action. The following list describes the possible values.
	//
	//     * Unprocessed –
	// Application version wasn't pre-processed or validated. Elastic Beanstalk will
	// validate configuration files during deployment of the application version to an
	// environment.
	//
	//     * Processing – Elastic Beanstalk is currently processing the
	// application version.
	//
	//     * Building – Application version is currently
	// undergoing an AWS CodeBuild build.
	//
	//     * Processed – Elastic Beanstalk was
	// successfully pre-processed and validated.
	//
	//     * Failed – Either the AWS
	// CodeBuild build failed or configuration files didn't pass validation. This
	// application version isn't usable.
	Status ApplicationVersionStatus
}

// The application version lifecycle settings for an application. Defines the rules
// that Elastic Beanstalk applies to an application's versions in order to avoid
// hitting the per-region limit for application versions. When Elastic Beanstalk
// deletes an application version from its database, you can no longer deploy that
// version to an environment. The source bundle remains in S3 unless you configure
// the rule to delete it.
type ApplicationVersionLifecycleConfig struct {
	// Specify a max count rule to restrict the number of application versions that are
	// retained for an application.
	MaxCountRule *MaxCountRule
	// Specify a max age rule to restrict the length of time that application versions
	// are retained for an application.
	MaxAgeRule *MaxAgeRule
}

// Describes an Auto Scaling launch configuration.
type AutoScalingGroup struct {
	// The name of the AutoScalingGroup .
	Name *string
}

// Settings for an AWS CodeBuild build.
type BuildConfiguration struct {
	// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until
	// timing out any related build that does not get marked as completed. The default
	// is 60 minutes.
	TimeoutInMinutes *int32
	// Information about the compute resources the build project will use.
	//
	//     *
	// BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds
	//
	//     *
	// BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds
	//
	//     *
	// BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds
	ComputeType ComputeType
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM)
	// role that enables AWS CodeBuild to interact with dependent AWS services on
	// behalf of the AWS account.
	CodeBuildServiceRole *string
	// The ID of the Docker image to use for this build project.
	Image *string
	// The name of the artifact of the CodeBuild build. If provided, Elastic Beanstalk
	// stores the build artifact in the S3 location
	// S3-bucket/resources/application-name/codebuild/codebuild-version-label-artifact-name.zip.
	// If not provided, Elastic Beanstalk stores the build artifact in the S3 location
	// S3-bucket/resources/application-name/codebuild/codebuild-version-label.zip.
	ArtifactName *string
}

// The builder used to build the custom platform.
type Builder struct {
	// The ARN of the builder.
	ARN *string
}

// Describes the possible values for a configuration option.
type ConfigurationOptionDescription struct {
	// An indication of which action is required if the value for this configuration
	// option changes:
	//
	//     * NoInterruption : There is no interruption to the
	// environment or application availability.
	//
	//     * RestartEnvironment : The
	// environment is entirely restarted, all AWS resources are deleted and recreated,
	// and the environment is unavailable during the process.
	//
	//     *
	// RestartApplicationServer : The environment is available the entire time.
	// However, a short application outage occurs when the application servers on the
	// running Amazon EC2 instances are restarted.
	ChangeSeverity *string
	// If specified, values for the configuration option are selected from this list.
	ValueOptions []*string
	// An indication of whether the user defined this configuration option:
	//
	//     * true
	// : This configuration option was defined by the user. It is a valid choice for
	// specifying if this as an Option to Remove when updating configuration
	// settings.
	//
	//     * false : This configuration was not defined by the
	// user.
	//
	// Constraint: You can remove only UserDefined options from a configuration.
	// Valid Values: true | false
	UserDefined *bool
	// An indication of which type of values this option has and whether it is
	// allowable to select one or more than one of the possible values:
	//
	//     * Scalar :
	// Values for this option are a single selection from the possible values, or an
	// unformatted string, or numeric value governed by the MIN/MAX/Regex
	// constraints.
	//
	//     * List : Values for this option are multiple selections from
	// the possible values.
	//
	//     * Boolean : Values for this option are either true or
	// false .
	//
	//     * Json : Values for this option are a JSON representation of a
	// ConfigDocument.
	ValueType ConfigurationOptionValueType
	// The default value for this configuration option.
	DefaultValue *string
	// If specified, the configuration option must be a numeric value greater than this
	// value.
	MinValue *int32
	// A unique namespace identifying the option's associated AWS resource.
	Namespace *string
	// The name of the configuration option.
	Name *string
	// If specified, the configuration option must be a string value no longer than
	// this value.
	MaxLength *int32
	// If specified, the configuration option must be a numeric value less than this
	// value.
	MaxValue *int32
	// If specified, the configuration option must be a string value that satisfies
	// this regular expression.
	Regex *OptionRestrictionRegex
}

// A specification identifying an individual configuration option along with its
// current value. For a list of possible namespaces and option values, see Option
// Values
// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in
// the AWS Elastic Beanstalk Developer Guide.
type ConfigurationOptionSetting struct {
	// The name of the configuration option.
	OptionName *string
	// The current value for the configuration option.
	Value *string
	// A unique resource name for the option setting. Use it for a time–based scaling
	// configuration option.
	ResourceName *string
	// A unique namespace that identifies the option's associated AWS resource.
	Namespace *string
}

// Describes the settings for a configuration set.
type ConfigurationSettingsDescription struct {
	// The name of the application associated with this configuration set.
	ApplicationName *string
	// If not null, the name of the environment for this configuration set.
	EnvironmentName *string
	// The ARN of the platform version.
	PlatformArn *string
	// The date (in UTC time) when this configuration set was last modified.
	DateUpdated *time.Time
	// The date (in UTC time) when this configuration set was created.
	DateCreated *time.Time
	// The name of the solution stack this configuration set uses.
	SolutionStackName *string
	// Describes this configuration set.
	Description *string
	// A list of the configuration options and their values in this configuration set.
	OptionSettings []*ConfigurationOptionSetting
	// If this configuration set is associated with an environment, the
	// DeploymentStatus parameter indicates the deployment status of this configuration
	// set:
	//
	//     * null: This configuration is not associated with a running
	// environment.
	//
	//     * pending: This is a draft configuration that is not deployed
	// to the associated environment but is in the process of deploying.
	//
	//     *
	// deployed: This is the configuration that is currently deployed to the associated
	// running environment.
	//
	//     * failed: This is a draft configuration that failed to
	// successfully deploy.
	DeploymentStatus ConfigurationDeploymentStatus
	// If not null, the name of the configuration template for this configuration set.
	TemplateName *string
}

// CPU utilization metrics for an instance.
type CPUUtilization struct {
	// Percentage of time that the CPU has spent in the Idle state over the last 10
	// seconds.
	Idle *float64
	// Percentage of time that the CPU has spent in the User state over the last 10
	// seconds.
	User *float64
	// Available on Linux environments only. Percentage of time that the CPU has spent
	// in the System state over the last 10 seconds.
	System *float64
	// Available on Linux environments only. Percentage of time that the CPU has spent
	// in the SoftIRQ state over the last 10 seconds.
	SoftIRQ *float64
	// Available on Linux environments only. Percentage of time that the CPU has spent
	// in the I/O Wait state over the last 10 seconds.
	IOWait *float64
	// Available on Linux environments only. Percentage of time that the CPU has spent
	// in the Nice state over the last 10 seconds.
	Nice *float64
	// Available on Windows environments only. Percentage of time that the CPU has
	// spent in the Privileged state over the last 10 seconds.
	Privileged *float64
	// Available on Linux environments only. Percentage of time that the CPU has spent
	// in the IRQ state over the last 10 seconds.
	IRQ *float64
}

// A custom AMI available to platforms.
type CustomAmi struct {
	// THe ID of the image used to create the custom AMI.
	ImageId *string
	// The type of virtualization used to create the custom AMI.
	VirtualizationType *string
}

// Information about an application version deployment.
type Deployment struct {
	// The ID of the deployment. This number increases by one each time that you deploy
	// source code or change instance configuration settings.
	DeploymentId *int64
	// The status of the deployment:
	//
	//     * In Progress : The deployment is in
	// progress.
	//
	//     * Deployed : The deployment succeeded.
	//
	//     * Failed : The
	// deployment failed.
	Status *string
	// The version label of the application version in the deployment.
	VersionLabel *string
	// For in-progress deployments, the time that the deployment started. For completed
	// deployments, the time that the deployment ended.
	DeploymentTime *time.Time
}

// Describes the properties of an environment.
type EnvironmentDescription struct {
	// A list of links to other environments in the same group.
	EnvironmentLinks []*EnvironmentLink
	// Returns the health status of the application running in your environment. For
	// more information, see Health Colors and Statuses
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
	HealthStatus EnvironmentHealthStatus
	// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For
	// single-instance environments, the IP address of the instance.
	EndpointURL *string
	// The ARN of the platform version.
	PlatformArn *string
	// The ID of this environment.
	EnvironmentId *string
	// The name of the application associated with this environment.
	ApplicationName *string
	// Indicates if there is an in-progress environment configuration update or
	// application version deployment that you can cancel. true: There is an update in
	// progress. false: There are no updates currently in progress.
	AbortableOperationInProgress *bool
	// The creation date for this environment.
	DateCreated *time.Time
	// The Amazon Resource Name (ARN) of the environment's operations role. For more
	// information, see Operations roles
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html)
	// in the AWS Elastic Beanstalk Developer Guide.
	OperationsRole *string
	// Describes the current tier of this environment.
	Tier *EnvironmentTier
	// The URL to the CNAME for this environment.
	CNAME *string
	// Describes this environment.
	Description *string
	// The name of the SolutionStack deployed with this environment.
	SolutionStackName *string
	// The current operational status of the environment:  <ul> <li> <p>
	// <code>Launching</code>: Environment is in the process of initial deployment.</p>
	// </li> <li> <p> <code>Updating</code>: Environment is in the process of updating
	// its configuration settings or application version.</p> </li> <li> <p>
	// <code>Ready</code>: Environment is available to have an action performed on it,
	// such as update or terminate.</p> </li> <li> <p> <code>Terminating</code>:
	// Environment is in the shut-down process.</p> </li> <li> <p>
	// <code>Terminated</code>: Environment is not running.</p> </li> </ul>
	Status EnvironmentStatus
	// The environment's Amazon Resource Name (ARN), which can be used in other API
	// requests that require an ARN.
	EnvironmentArn *string
	// The last modified date for this environment.
	DateUpdated *time.Time
	// Describes the health status of the environment. AWS Elastic Beanstalk indicates
	// the failure levels for a running environment:
	//
	//     * Red: Indicates the
	// environment is not responsive. Occurs when three or more consecutive failures
	// occur for an environment.
	//
	//     * Yellow: Indicates that something is wrong.
	// Occurs when two consecutive failures occur for an environment.
	//
	//     * Green:
	// Indicates the environment is healthy and fully functional.
	//
	//     * Grey: Default
	// health for a new environment. The environment is not fully launched and health
	// checks have not started or health checks are suspended during an
	// UpdateEnvironment or RestartEnvironment request.
	//
	// Default: Grey
	Health EnvironmentHealth
	// The application version deployed in this environment.
	VersionLabel *string
	// The name of this environment.
	EnvironmentName *string
	// The description of the AWS resources used by this environment.
	Resources *EnvironmentResourcesDescription
	// The name of the configuration template used to originally launch this
	// environment.
	TemplateName *string
}

// The information retrieved from the Amazon EC2 instances.
type EnvironmentInfoDescription struct {
	// The type of information retrieved.
	InfoType EnvironmentInfoType
	// The retrieved information. Currently contains a presigned Amazon S3 URL. The
	// files are deleted after 15 minutes. Anyone in possession of this URL can access
	// the files before they are deleted. Make the URL available only to trusted
	// parties.
	Message *string
	// The Amazon EC2 Instance ID for this information.
	Ec2InstanceId *string
	// The time stamp when this information was retrieved.
	SampleTimestamp *time.Time
}

// A link to another environment, defined in the environment's manifest. Links
// provide connection information in system properties that can be used to connect
// to another environment in the same group. See Environment Manifest (env.yaml)
// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html)
// for details.
type EnvironmentLink struct {
	// The name of the link.
	LinkName *string
	// The name of the linked environment (the dependency).
	EnvironmentName *string
}

// Describes the AWS resources in use by this environment. This data is live.
type EnvironmentResourceDescription struct {
	// The Auto Scaling launch configurations in use by this environment.
	LaunchConfigurations []*LaunchConfiguration
	// The Amazon EC2 instances used by this environment.
	Instances []*Instance
	// The Amazon EC2 launch templates in use by this environment.
	LaunchTemplates []*LaunchTemplate
	// The LoadBalancers in use by this environment.
	LoadBalancers []*LoadBalancer
	// The AutoScaling triggers in use by this environment.
	Triggers []*Trigger
	// The queues used by this environment.
	Queues []*Queue
	// The name of the environment.
	EnvironmentName *string
	// The AutoScalingGroups used by this environment.
	AutoScalingGroups []*AutoScalingGroup
}

// Describes the AWS resources in use by this environment. This data is not live
// data.
type EnvironmentResourcesDescription struct {
	// Describes the LoadBalancer.
	LoadBalancer *LoadBalancerDescription
}

// Describes the properties of an environment tier
type EnvironmentTier struct {
	// The name of this environment tier. Valid values:
	//
	//     * For Web server tier –
	// WebServer
	//
	//     * For Worker tier – Worker
	Name *string
	// The version of this environment tier. When you don't set a value to it, Elastic
	// Beanstalk uses the latest compatible worker tier version. This member is
	// deprecated. Any specific version that you set may become out of date. We
	// recommend leaving it unspecified.
	Version *string
	// The type of this environment tier. Valid values:
	//
	//     * For Web server tier –
	// Standard
	//
	//     * For Worker tier – SQS/HTTP
	Type *string
}

// Describes an event.
type EventDescription struct {
	// The severity level of this event.
	Severity EventSeverity
	// The event message.
	Message *string
	// The name of the environment associated with this event.
	EnvironmentName *string
	// The web service request ID for the activity of this event.
	RequestId *string
	// The ARN of the platform version.
	PlatformArn *string
	// The release label for the application version associated with this event.
	VersionLabel *string
	// The application associated with the event.
	ApplicationName *string
	// The date when the event occurred.
	EventDate *time.Time
	// The name of the configuration associated with this event.
	TemplateName *string
}

// The description of an Amazon EC2 instance.
type Instance struct {
	// The ID of the Amazon EC2 instance.
	Id *string
}

// Represents summary information about the health of an instance. For more
// information, see Health Colors and Statuses
// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
type InstanceHealthSummary struct {
	// Red. The health agent is reporting a high number of request failures or other
	// issues for an instance or environment.
	Degraded *int32
	// Yellow. The health agent is reporting a moderate number of request failures or
	// other issues for an instance or environment.
	Warning *int32
	// Green. An instance is passing health checks and the health agent is not
	// reporting any problems.
	Ok *int32
	// Grey. AWS Elastic Beanstalk and the health agent are reporting an insufficient
	// amount of data on an instance.
	Unknown *int32
	// Red. The health agent is reporting a very high number of request failures or
	// other issues for an instance or environment.
	Severe *int32
	// Grey. An operation is in progress on an instance within the command timeout.
	Pending *int32
	// Green. An operation is in progress on an instance.
	Info *int32
	// Grey. AWS Elastic Beanstalk and the health agent are reporting no data on an
	// instance.
	NoData *int32
}

// Represents the average latency for the slowest X percent of requests over the
// last 10 seconds.
type Latency struct {
	// The average latency for the slowest 50 percent of requests over the last 10
	// seconds.
	P50 *float64
	// The average latency for the slowest 5 percent of requests over the last 10
	// seconds.
	P95 *float64
	// The average latency for the slowest 90 percent of requests over the last 10
	// seconds.
	P10 *float64
	// The average latency for the slowest 1 percent of requests over the last 10
	// seconds.
	P99 *float64
	// The average latency for the slowest 15 percent of requests over the last 10
	// seconds.
	P85 *float64
	// The average latency for the slowest 0.1 percent of requests over the last 10
	// seconds.
	P999 *float64
	// The average latency for the slowest 25 percent of requests over the last 10
	// seconds.
	P75 *float64
	// The average latency for the slowest 10 percent of requests over the last 10
	// seconds.
	P90 *float64
}

// Describes an Auto Scaling launch configuration.
type LaunchConfiguration struct {
	// The name of the launch configuration.
	Name *string
}

// Describes an Amazon EC2 launch template.
type LaunchTemplate struct {
	// The ID of the launch template.
	Id *string
}

// Describes the properties of a Listener for the LoadBalancer.
type Listener struct {
	// The protocol that is used by the Listener.
	Protocol *string
	// The port that is used by the Listener.
	Port *int32
}

// Describes a LoadBalancer.
type LoadBalancer struct {
	// The name of the LoadBalancer.
	Name *string
}

// Describes the details of a LoadBalancer.
type LoadBalancerDescription struct {
	// A list of Listeners used by the LoadBalancer.
	Listeners []*Listener
	// The name of the LoadBalancer.
	LoadBalancerName *string
	// The domain name of the LoadBalancer.
	Domain *string
}

// The record of an upcoming or in-progress managed action.
type ManagedAction struct {
	// A unique identifier for the managed action.
	ActionId *string
	// The type of managed action.
	ActionType ActionType
	// The start time of the maintenance window in which the managed action will
	// execute.
	WindowStartTime *time.Time
	// The status of the managed action. If the action is Scheduled, you can apply it
	// immediately with ApplyEnvironmentManagedAction ().
	Status ActionStatus
	// A description of the managed action.
	ActionDescription *string
}

// The record of a completed or failed managed action.
type ManagedActionHistoryItem struct {
	// If the action failed, the type of failure.
	FailureType FailureType
	// The status of the action.
	Status ActionHistoryStatus
	// A unique identifier for the managed action.
	ActionId *string
	// If the action failed, a description of the failure.
	FailureDescription *string
	// The date and time that the action finished executing.
	FinishedTime *time.Time
	// The type of the managed action.
	ActionType ActionType
	// The date and time that the action started executing.
	ExecutedTime *time.Time
	// A description of the managed action.
	ActionDescription *string
}

// A lifecycle rule that deletes application versions after the specified number of
// days.
type MaxAgeRule struct {
	// Specify true to apply the rule, or false to disable it.
	Enabled *bool
	// Specify the number of days to retain an application versions.
	MaxAgeInDays *int32
	// Set to true to delete a version's source bundle from Amazon S3 when Elastic
	// Beanstalk deletes the application version.
	DeleteSourceFromS3 *bool
}

// A lifecycle rule that deletes the oldest application version when the maximum
// count is exceeded.
type MaxCountRule struct {
	// Set to true to delete a version's source bundle from Amazon S3 when Elastic
	// Beanstalk deletes the application version.
	DeleteSourceFromS3 *bool
	// Specify true to apply the rule, or false to disable it.
	Enabled *bool
	// Specify the maximum number of application versions to retain.
	MaxCount *int32
}

// A regular expression representing a restriction on a string configuration option
// value.
type OptionRestrictionRegex struct {
	// A unique name representing this regular expression.
	Label *string
	// The regular expression pattern that a string configuration option value with
	// this restriction must match.
	Pattern *string
}

// A specification identifying an individual configuration option.
type OptionSpecification struct {
	// A unique namespace identifying the option's associated AWS resource.
	Namespace *string
	// A unique resource name for a time-based scaling configuration option.
	ResourceName *string
	// The name of the configuration option.
	OptionName *string
}

// Summary information about a platform branch.
type PlatformBranchSummary struct {
	// The environment tiers that platform versions in this branch support. Possible
	// values: WebServer/Standard | Worker/SQS/HTTP
	SupportedTierList []*string
	// The name of the platform to which this platform branch belongs.
	PlatformName *string
	// An ordinal number that designates the order in which platform branches have been
	// added to a platform. This can be helpful, for example, if your code calls the
	// ListPlatformBranches action and then displays a list of platform branches. A
	// larger BranchOrder value designates a newer platform branch within the platform.
	BranchOrder *int32
	// The support life cycle state of the platform branch. Possible values: beta |
	// supported | deprecated | retired
	LifecycleState *string
	// The name of the platform branch.
	BranchName *string
}

// Detailed information about a platform version.
type PlatformDescription struct {
	// The status of the platform version.
	PlatformStatus PlatformStatus
	// The state of the platform version in its lifecycle. Possible values: Recommended
	// | null If a null value is returned, the platform version isn't the recommended
	// one for its branch. Each platform branch has a single recommended platform
	// version, typically the most recent one.
	PlatformLifecycleState *string
	// Information about the maintainer of the platform version.
	Maintainer *string
	// The platform branch to which the platform version belongs.
	PlatformBranchName *string
	// The AWS account ID of the person who created the platform version.
	PlatformOwner *string
	// The frameworks supported by the platform version.
	Frameworks []*PlatformFramework
	// The version of the operating system used by the platform version.
	OperatingSystemVersion *string
	// The tiers supported by the platform version.
	SupportedTierList []*string
	// The name of the platform version.
	PlatformName *string
	// The date when the platform version was created.
	DateCreated *time.Time
	// The custom AMIs supported by the platform version.
	CustomAmiList []*CustomAmi
	// The description of the platform version.
	Description *string
	// The version of the platform version.
	PlatformVersion *string
	// The ARN of the platform version.
	PlatformArn *string
	// The date when the platform version was last updated.
	DateUpdated *time.Time
	// The operating system used by the platform version.
	OperatingSystemName *string
	// The category of the platform version.
	PlatformCategory *string
	// The programming languages supported by the platform version.
	ProgrammingLanguages []*PlatformProgrammingLanguage
	// The state of the platform version's branch in its lifecycle. Possible values:
	// Beta | Supported | Deprecated | Retired
	PlatformBranchLifecycleState *string
	// The name of the solution stack used by the platform version.
	SolutionStackName *string
	// The additions supported by the platform version.
	SupportedAddonList []*string
}

// Describes criteria to restrict the results when listing platform versions. The
// filter is evaluated as follows: Type Operator Values[1]
type PlatformFilter struct {
	// The list of values applied to the filtering platform version attribute. Only one
	// value is supported for all current operators. The following list shows valid
	// filter values for some filter attributes.
	//
	//     * PlatformStatus: Creating |
	// Failed | Ready | Deleting | Deleted
	//
	//     * PlatformLifecycleState: recommended
	//
	//
	// * SupportedTier: WebServer/Standard | Worker/SQS/HTTP
	//
	//     * SupportedAddon:
	// Log/S3 | Monitoring/Healthd | WorkerDaemon/SQSD
	Values []*string
	// The operator to apply to the Type with each of the Values. Valid values: = | !=
	// | < | <= | > | >= | contains | begins_with | ends_with
	Operator *string
	// The platform version attribute to which the filter values are applied. Valid
	// values: PlatformName | PlatformVersion | PlatformStatus | PlatformBranchName |
	// PlatformLifecycleState | PlatformOwner | SupportedTier | SupportedAddon |
	// ProgrammingLanguageName | OperatingSystemName
	Type *string
}

// A framework supported by the platform.
type PlatformFramework struct {
	// The name of the framework.
	Name *string
	// The version of the framework.
	Version *string
}

// A programming language supported by the platform.
type PlatformProgrammingLanguage struct {
	// The name of the programming language.
	Name *string
	// The version of the programming language.
	Version *string
}

// Summary information about a platform version.
type PlatformSummary struct {
	// The state of the platform version's branch in its lifecycle. Possible values:
	// beta | supported | deprecated | retired
	PlatformBranchLifecycleState *string
	// The version of the operating system used by the platform version.
	OperatingSystemVersion *string
	// The additions associated with the platform version.
	SupportedAddonList []*string
	// The tiers in which the platform version runs.
	SupportedTierList []*string
	// The state of the platform version in its lifecycle. Possible values: recommended
	// | empty If an empty value is returned, the platform version is supported but
	// isn't the recommended one for its branch.
	PlatformLifecycleState *string
	// The AWS account ID of the person who created the platform version.
	PlatformOwner *string
	// The platform branch to which the platform version belongs.
	PlatformBranchName *string
	// The status of the platform version. You can create an environment from the
	// platform version once it is ready.
	PlatformStatus PlatformStatus
	// The version string of the platform version.
	PlatformVersion *string
	// The operating system used by the platform version.
	OperatingSystemName *string
	// The category of platform version.
	PlatformCategory *string
	// The ARN of the platform version.
	PlatformArn *string
}

// Describes a queue.
type Queue struct {
	// The name of the queue.
	Name *string
	// The URL of the queue.
	URL *string
}

// The AWS Elastic Beanstalk quota information for a single resource type in an AWS
// account. It reflects the resource's limits for this account.
type ResourceQuota struct {
	// The maximum number of instances of this Elastic Beanstalk resource type that an
	// AWS account can use.
	Maximum *int32
}

// A set of per-resource AWS Elastic Beanstalk quotas associated with an AWS
// account. They reflect Elastic Beanstalk resource limits for this account.
type ResourceQuotas struct {
	// The quota for environments in the AWS account.
	EnvironmentQuota *ResourceQuota
	// The quota for custom platforms in the AWS account.
	CustomPlatformQuota *ResourceQuota
	// The quota for application versions in the AWS account.
	ApplicationVersionQuota *ResourceQuota
	// The quota for configuration templates in the AWS account.
	ConfigurationTemplateQuota *ResourceQuota
	// The quota for applications in the AWS account.
	ApplicationQuota *ResourceQuota
}

// The bucket and key of an item stored in Amazon S3.
type S3Location struct {
	// The Amazon S3 bucket where the data is located.
	S3Bucket *string
	// The Amazon S3 key where the data is located.
	S3Key *string
}

// Describes criteria to restrict a list of results. For operators that apply a
// single value to the attribute, the filter is evaluated as follows: Attribute
// Operator Values[1] Some operators, e.g. in, can apply multiple values. In this
// case, the filter is evaluated as a logical union (OR) of applications of the
// operator to the attribute with each one of the values: (Attribute Operator
// Values[1]) OR (Attribute Operator Values[2]) OR ... The valid values for
// attributes of SearchFilter depend on the API action. For valid values, see the
// reference page for the API action you're calling that takes a SearchFilter
// parameter.
type SearchFilter struct {
	// The operator to apply to the Attribute with each of the Values. Valid values
	// vary by Attribute.
	Operator *string
	// The list of values applied to the Attribute and Operator attributes. Number of
	// values and valid values vary by Attribute.
	Values []*string
	// The result attribute to which the filter values are applied. Valid values vary
	// by API action.
	Attribute *string
}

// Detailed health information about an Amazon EC2 instance in your Elastic
// Beanstalk environment.
type SingleInstanceHealth struct {
	// The ID of the Amazon EC2 instance.
	InstanceId *string
	// The time at which the EC2 instance was launched.
	LaunchedAt *time.Time
	// The instance's type.
	InstanceType *string
	// The availability zone in which the instance runs.
	AvailabilityZone *string
	// Returns the health status of the specified instance. For more information, see
	// Health Colors and Statuses
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
	HealthStatus *string
	// Represents the causes, which provide more information about the current health
	// status.
	Causes []*string
	// Represents the color indicator that gives you information about the health of
	// the EC2 instance. For more information, see Health Colors and Statuses
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
	Color *string
	// Request metrics from your application.
	ApplicationMetrics *ApplicationMetrics
	// Operating system metrics from the instance.
	System *SystemStatus
	// Information about the most recent deployment to an instance.
	Deployment *Deployment
}

// Describes the solution stack.
type SolutionStackDescription struct {
	// The name of the solution stack.
	SolutionStackName *string
	// The permitted file types allowed for a solution stack.
	PermittedFileTypes []*string
}

// Location of the source code for an application version.
type SourceBuildInformation struct {
	// The location of the source code, as a formatted string, depending on the value
	// of SourceRepository
	//
	//     * For CodeCommit, the format is the repository name and
	// commit ID, separated by a forward slash. For example,
	// my-git-repo/265cfa0cf6af46153527f55d6503ec030551f57a.
	//
	//     * For S3, the format
	// is the S3 bucket name and object key, separated by a forward slash. For example,
	// my-s3-bucket/Folders/my-source-file.
	SourceLocation *string
	// The type of repository.
	//
	//     * Git
	//
	//     * Zip
	SourceType SourceType
	// Location where the repository is stored.
	//
	//     * CodeCommit
	//
	//     * S3
	SourceRepository SourceRepository
}

// A specification for an environment configuration.
type SourceConfiguration struct {
	// The name of the configuration template.
	TemplateName *string
	// The name of the application associated with the configuration.
	ApplicationName *string
}

// Represents the percentage of requests over the last 10 seconds that resulted in
// each type of status code response. For more information, see Status Code
// Definitions (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
type StatusCodes struct {
	// The percentage of requests over the last 10 seconds that resulted in a 2xx (200,
	// 201, etc.) status code.
	Status2xx *int32
	// The percentage of requests over the last 10 seconds that resulted in a 4xx (400,
	// 401, etc.) status code.
	Status4xx *int32
	// The percentage of requests over the last 10 seconds that resulted in a 3xx (300,
	// 301, etc.) status code.
	Status3xx *int32
	// The percentage of requests over the last 10 seconds that resulted in a 5xx (500,
	// 501, etc.) status code.
	Status5xx *int32
}

// CPU utilization and load average metrics for an Amazon EC2 instance.
type SystemStatus struct {
	// Load average in the last 1-minute, 5-minute, and 15-minute periods. For more
	// information, see Operating System Metrics
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-metrics.html#health-enhanced-metrics-os).
	LoadAverage []*float64
	// CPU utilization metrics for the instance.
	CPUUtilization *CPUUtilization
}

// Describes a tag applied to a resource in an environment.
type Tag struct {
	// The value of the tag.
	Value *string
	// The key of the tag.
	Key *string
}

// Describes a trigger.
type Trigger struct {
	// The name of the trigger.
	Name *string
}

// An error or warning for a desired configuration option value.
type ValidationMessage struct {
	// A message describing the error or warning.
	Message *string
	// The namespace to which the option belongs.
	Namespace *string
	// An indication of the severity of this message:
	//
	//     * error: This message
	// indicates that this is not a valid setting for an option.
	//
	//     * warning: This
	// message is providing information you should take into account.
	Severity ValidationSeverity
	// The name of the option.
	OptionName *string
}
