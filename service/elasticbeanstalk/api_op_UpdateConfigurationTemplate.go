// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Updates the specified configuration template to have the specified properties or
// configuration option values. If a property (for example, ApplicationName) is not
// provided, its value remains unchanged. To clear such properties, specify an
// empty string. Related Topics
//
//     * DescribeConfigurationOptions ()
func (c *Client) UpdateConfigurationTemplate(ctx context.Context, params *UpdateConfigurationTemplateInput, optFns ...func(*Options)) (*UpdateConfigurationTemplateOutput, error) {
	stack := middleware.NewStack("UpdateConfigurationTemplate", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpUpdateConfigurationTemplateMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateConfigurationTemplateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateConfigurationTemplate(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateConfigurationTemplate",
			Err:           err,
		}
	}
	out := result.(*UpdateConfigurationTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The result message containing the options for the specified solution stack.
type UpdateConfigurationTemplateInput struct {
	// A list of configuration option settings to update with the new specified option
	// value.
	OptionSettings []*types.ConfigurationOptionSetting
	// A list of configuration options to remove from the configuration set.
	// Constraint: You can remove only UserDefined configuration options.
	OptionsToRemove []*types.OptionSpecification
	// The name of the application associated with the configuration template to
	// update. If no application is found with this name, UpdateConfigurationTemplate
	// returns an InvalidParameterValue error.
	ApplicationName *string
	// The name of the configuration template to update. If no configuration template
	// is found with this name, UpdateConfigurationTemplate returns an
	// InvalidParameterValue error.
	TemplateName *string
	// A new description for the configuration.
	Description *string
}

// Describes the settings for a configuration set.
type UpdateConfigurationTemplateOutput struct {
	// The name of the application associated with this configuration set.
	ApplicationName *string
	// If not null, the name of the environment for this configuration set.
	EnvironmentName *string
	// The ARN of the platform version.
	PlatformArn *string
	// The date (in UTC time) when this configuration set was last modified.
	DateUpdated *time.Time
	// The date (in UTC time) when this configuration set was created.
	DateCreated *time.Time
	// The name of the solution stack this configuration set uses.
	SolutionStackName *string
	// Describes this configuration set.
	Description *string
	// A list of the configuration options and their values in this configuration set.
	OptionSettings []*types.ConfigurationOptionSetting
	// If this configuration set is associated with an environment, the
	// DeploymentStatus parameter indicates the deployment status of this configuration
	// set:
	//
	//     * null: This configuration is not associated with a running
	// environment.
	//
	//     * pending: This is a draft configuration that is not deployed
	// to the associated environment but is in the process of deploying.
	//
	//     *
	// deployed: This is the configuration that is currently deployed to the associated
	// running environment.
	//
	//     * failed: This is a draft configuration that failed to
	// successfully deploy.
	DeploymentStatus types.ConfigurationDeploymentStatus
	// If not null, the name of the configuration template for this configuration set.
	TemplateName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpUpdateConfigurationTemplateMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpUpdateConfigurationTemplate{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpUpdateConfigurationTemplate{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateConfigurationTemplate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "UpdateConfigurationTemplate",
	}
}
