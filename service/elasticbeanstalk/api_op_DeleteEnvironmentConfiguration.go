// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Deletes the draft configuration associated with the running environment.
// Updating a running environment with any configuration changes creates a draft
// configuration set. You can get the draft configuration using
// DescribeConfigurationSettings while the update is in progress or if the update
// fails. The DeploymentStatus for the draft configuration indicates whether the
// deployment is in process or has failed. The draft configuration remains in
// existence until it is deleted with this action.
func (c *Client) DeleteEnvironmentConfiguration(ctx context.Context, params *DeleteEnvironmentConfigurationInput, optFns ...func(*Options)) (*DeleteEnvironmentConfigurationOutput, error) {
	if params == nil {
		params = &DeleteEnvironmentConfigurationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DeleteEnvironmentConfiguration", params, optFns, addOperationDeleteEnvironmentConfigurationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DeleteEnvironmentConfigurationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request to delete a draft environment configuration.
type DeleteEnvironmentConfigurationInput struct {

	// The name of the application the environment is associated with.
	//
	// This member is required.
	ApplicationName *string

	// The name of the environment to delete the draft configuration from.
	//
	// This member is required.
	EnvironmentName *string
}

type DeleteEnvironmentConfigurationOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDeleteEnvironmentConfigurationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsquery_serializeOpDeleteEnvironmentConfiguration{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsquery_deserializeOpDeleteEnvironmentConfiguration{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDeleteEnvironmentConfigurationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDeleteEnvironmentConfiguration(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDeleteEnvironmentConfiguration(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "DeleteEnvironmentConfiguration",
	}
}
