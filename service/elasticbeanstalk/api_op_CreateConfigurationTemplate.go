// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Creates an AWS Elastic Beanstalk configuration template, associated with a
// specific Elastic Beanstalk application. You define application configuration
// settings in a configuration template. You can then use the configuration
// template to deploy different versions of the application with the same
// configuration settings. Templates aren't associated with any environment. The
// EnvironmentName response element is always null. Related Topics
//
//     *
// DescribeConfigurationOptions ()
//
//     * DescribeConfigurationSettings ()
//
//     *
// ListAvailableSolutionStacks ()
func (c *Client) CreateConfigurationTemplate(ctx context.Context, params *CreateConfigurationTemplateInput, optFns ...func(*Options)) (*CreateConfigurationTemplateOutput, error) {
	stack := middleware.NewStack("CreateConfigurationTemplate", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateConfigurationTemplateMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateConfigurationTemplateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateConfigurationTemplate(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateConfigurationTemplate",
			Err:           err,
		}
	}
	out := result.(*CreateConfigurationTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request to create a configuration template.
type CreateConfigurationTemplateInput struct {
	// Specifies the tags applied to the configuration template.
	Tags []*types.Tag
	// The name of the Elastic Beanstalk application to associate with this
	// configuration template.
	ApplicationName *string
	// The Amazon Resource Name (ARN) of the custom platform. For more information, see
	// Custom Platforms
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html)
	// in the AWS Elastic Beanstalk Developer Guide.  <p>If you specify
	// <code>PlatformArn</code>, then don't specify <code>SolutionStackName</code>.</p>
	// </note>
	PlatformArn *string
	// The ID of an environment whose settings you want to use to create the
	// configuration template. You must specify EnvironmentId if you don't specify
	// PlatformArn, SolutionStackName, or SourceConfiguration.
	EnvironmentId *string
	// An optional description for this configuration.
	Description *string
	// An Elastic Beanstalk configuration template to base this one on. If specified,
	// Elastic Beanstalk uses the configuration values from the specified configuration
	// template to create a new configuration. Values specified in OptionSettings
	// override any values obtained from the SourceConfiguration. You must specify
	// SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or
	// SolutionStackName. Constraint: If both solution stack name and source
	// configuration are specified, the solution stack of the source configuration
	// template must match the specified solution stack name.
	SourceConfiguration *types.SourceConfiguration
	// The name of an Elastic Beanstalk solution stack (platform version) that this
	// configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7
	// Java 7. A solution stack specifies the operating system, runtime, and
	// application server for a configuration template. It also determines the set of
	// configuration options as well as the possible and default values. For more
	// information, see Supported Platforms
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)
	// in the AWS Elastic Beanstalk Developer Guide. You must specify SolutionStackName
	// if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration. Use the
	// ListAvailableSolutionStacks
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html)
	// API to obtain a list of available solution stacks.
	SolutionStackName *string
	// The name of the configuration template. Constraint: This name must be unique per
	// application.
	TemplateName *string
	// Option values for the Elastic Beanstalk configuration, such as the instance
	// type. If specified, these values override the values obtained from the solution
	// stack or the source configuration template. For a complete list of Elastic
	// Beanstalk configuration options, see Option Values
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in
	// the AWS Elastic Beanstalk Developer Guide.
	OptionSettings []*types.ConfigurationOptionSetting
}

// Describes the settings for a configuration set.
type CreateConfigurationTemplateOutput struct {
	// The name of the application associated with this configuration set.
	ApplicationName *string
	// If not null, the name of the environment for this configuration set.
	EnvironmentName *string
	// The ARN of the platform version.
	PlatformArn *string
	// The date (in UTC time) when this configuration set was last modified.
	DateUpdated *time.Time
	// The date (in UTC time) when this configuration set was created.
	DateCreated *time.Time
	// The name of the solution stack this configuration set uses.
	SolutionStackName *string
	// Describes this configuration set.
	Description *string
	// A list of the configuration options and their values in this configuration set.
	OptionSettings []*types.ConfigurationOptionSetting
	// If this configuration set is associated with an environment, the
	// DeploymentStatus parameter indicates the deployment status of this configuration
	// set:
	//
	//     * null: This configuration is not associated with a running
	// environment.
	//
	//     * pending: This is a draft configuration that is not deployed
	// to the associated environment but is in the process of deploying.
	//
	//     *
	// deployed: This is the configuration that is currently deployed to the associated
	// running environment.
	//
	//     * failed: This is a draft configuration that failed to
	// successfully deploy.
	DeploymentStatus types.ConfigurationDeploymentStatus
	// If not null, the name of the configuration template for this configuration set.
	TemplateName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateConfigurationTemplateMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateConfigurationTemplate{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateConfigurationTemplate{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateConfigurationTemplate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "CreateConfigurationTemplate",
	}
}
