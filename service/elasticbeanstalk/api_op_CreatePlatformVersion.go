// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Create a new version of your custom platform.
func (c *Client) CreatePlatformVersion(ctx context.Context, params *CreatePlatformVersionInput, optFns ...func(*Options)) (*CreatePlatformVersionOutput, error) {
	stack := middleware.NewStack("CreatePlatformVersion", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreatePlatformVersionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreatePlatformVersionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreatePlatformVersion(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreatePlatformVersion",
			Err:           err,
		}
	}
	out := result.(*CreatePlatformVersionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request to create a new platform version.
type CreatePlatformVersionInput struct {
	// The number, such as 1.0.2, for the new platform version.
	PlatformVersion *string
	// The location of the platform definition archive in Amazon S3.
	PlatformDefinitionBundle *types.S3Location
	// The name of your custom platform.
	PlatformName *string
	// The name of the builder environment.
	EnvironmentName *string
	// The configuration option settings to apply to the builder environment.
	OptionSettings []*types.ConfigurationOptionSetting
	// Specifies the tags applied to the new platform version. Elastic Beanstalk
	// applies these tags only to the platform version. Environments that you create
	// using the platform version don't inherit the tags.
	Tags []*types.Tag
}

type CreatePlatformVersionOutput struct {
	// Detailed information about the new version of the custom platform.
	PlatformSummary *types.PlatformSummary
	// The builder used to create the custom platform.
	Builder *types.Builder

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreatePlatformVersionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreatePlatformVersion{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreatePlatformVersion{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreatePlatformVersion(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "CreatePlatformVersion",
	}
}
