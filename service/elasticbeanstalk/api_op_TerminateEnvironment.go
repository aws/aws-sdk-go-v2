// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Terminates the specified environment.
func (c *Client) TerminateEnvironment(ctx context.Context, params *TerminateEnvironmentInput, optFns ...func(*Options)) (*TerminateEnvironmentOutput, error) {
	stack := middleware.NewStack("TerminateEnvironment", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpTerminateEnvironmentMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opTerminateEnvironment(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "TerminateEnvironment",
			Err:           err,
		}
	}
	out := result.(*TerminateEnvironmentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request to terminate an environment.
type TerminateEnvironmentInput struct {
	// Terminates the target environment even if another environment in the same group
	// is dependent on it.
	ForceTerminate *bool
	// The ID of the environment to terminate. Condition: You must specify either this
	// or an EnvironmentName, or both. If you do not specify either, AWS Elastic
	// Beanstalk returns MissingRequiredParameter error.
	EnvironmentId *string
	// The name of the environment to terminate. Condition: You must specify either
	// this or an EnvironmentId, or both. If you do not specify either, AWS Elastic
	// Beanstalk returns MissingRequiredParameter error.
	EnvironmentName *string
	// Indicates whether the associated AWS resources should shut down when the
	// environment is terminated:
	//
	//     * true: The specified environment as well as the
	// associated AWS resources, such as Auto Scaling group and LoadBalancer, are
	// terminated.
	//
	//     * false: AWS Elastic Beanstalk resource management is removed
	// from the environment, but the AWS resources continue to operate.
	//
	// For more
	// information, see the  AWS Elastic Beanstalk User Guide.
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/) Default: true Valid
	// Values: true | false
	TerminateResources *bool
}

// Describes the properties of an environment.
type TerminateEnvironmentOutput struct {
	// A list of links to other environments in the same group.
	EnvironmentLinks []*types.EnvironmentLink
	// Returns the health status of the application running in your environment. For
	// more information, see Health Colors and Statuses
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html).
	HealthStatus types.EnvironmentHealthStatus
	// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For
	// single-instance environments, the IP address of the instance.
	EndpointURL *string
	// The ARN of the platform version.
	PlatformArn *string
	// The ID of this environment.
	EnvironmentId *string
	// The name of the application associated with this environment.
	ApplicationName *string
	// Indicates if there is an in-progress environment configuration update or
	// application version deployment that you can cancel. true: There is an update in
	// progress. false: There are no updates currently in progress.
	AbortableOperationInProgress *bool
	// The creation date for this environment.
	DateCreated *time.Time
	// The Amazon Resource Name (ARN) of the environment's operations role. For more
	// information, see Operations roles
	// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html)
	// in the AWS Elastic Beanstalk Developer Guide.
	OperationsRole *string
	// Describes the current tier of this environment.
	Tier *types.EnvironmentTier
	// The URL to the CNAME for this environment.
	CNAME *string
	// Describes this environment.
	Description *string
	// The name of the SolutionStack deployed with this environment.
	SolutionStackName *string
	// The current operational status of the environment:  <ul> <li> <p>
	// <code>Launching</code>: Environment is in the process of initial deployment.</p>
	// </li> <li> <p> <code>Updating</code>: Environment is in the process of updating
	// its configuration settings or application version.</p> </li> <li> <p>
	// <code>Ready</code>: Environment is available to have an action performed on it,
	// such as update or terminate.</p> </li> <li> <p> <code>Terminating</code>:
	// Environment is in the shut-down process.</p> </li> <li> <p>
	// <code>Terminated</code>: Environment is not running.</p> </li> </ul>
	Status types.EnvironmentStatus
	// The environment's Amazon Resource Name (ARN), which can be used in other API
	// requests that require an ARN.
	EnvironmentArn *string
	// The last modified date for this environment.
	DateUpdated *time.Time
	// Describes the health status of the environment. AWS Elastic Beanstalk indicates
	// the failure levels for a running environment:
	//
	//     * Red: Indicates the
	// environment is not responsive. Occurs when three or more consecutive failures
	// occur for an environment.
	//
	//     * Yellow: Indicates that something is wrong.
	// Occurs when two consecutive failures occur for an environment.
	//
	//     * Green:
	// Indicates the environment is healthy and fully functional.
	//
	//     * Grey: Default
	// health for a new environment. The environment is not fully launched and health
	// checks have not started or health checks are suspended during an
	// UpdateEnvironment or RestartEnvironment request.
	//
	// Default: Grey
	Health types.EnvironmentHealth
	// The application version deployed in this environment.
	VersionLabel *string
	// The name of this environment.
	EnvironmentName *string
	// The description of the AWS resources used by this environment.
	Resources *types.EnvironmentResourcesDescription
	// The name of the configuration template used to originally launch this
	// environment.
	TemplateName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpTerminateEnvironmentMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpTerminateEnvironment{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpTerminateEnvironment{}, middleware.After)
}

func newServiceMetadataMiddleware_opTerminateEnvironment(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "TerminateEnvironment",
	}
}
