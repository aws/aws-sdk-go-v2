// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elasticbeanstalk

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
)

const opComposeEnvironments = "ComposeEnvironments"

// ComposeEnvironmentsRequest returns a request value for making API operation for
// AWS Elastic Beanstalk.
//
// Create or update a group of environments that each run a separate component
// of a single application. Takes a list of version labels that specify application
// source bundles for each of the environments to create or update. The name
// of each environment and other required information must be included in the
// source bundles in an environment manifest named env.yaml. See Compose Environments
// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html)
// for details.
//
//    // Example sending a request using ComposeEnvironmentsRequest.
//    req := client.ComposeEnvironmentsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/elasticbeanstalk-2010-12-01/ComposeEnvironments
func (c *Client) ComposeEnvironmentsRequest(input *types.ComposeEnvironmentsInput) ComposeEnvironmentsRequest {
	op := &aws.Operation{
		Name:       opComposeEnvironments,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ComposeEnvironmentsInput{}
	}

	req := c.newRequest(op, input, &types.ComposeEnvironmentsOutput{})
	return ComposeEnvironmentsRequest{Request: req, Input: input, Copy: c.ComposeEnvironmentsRequest}
}

// ComposeEnvironmentsRequest is the request type for the
// ComposeEnvironments API operation.
type ComposeEnvironmentsRequest struct {
	*aws.Request
	Input *types.ComposeEnvironmentsInput
	Copy  func(*types.ComposeEnvironmentsInput) ComposeEnvironmentsRequest
}

// Send marshals and sends the ComposeEnvironments API request.
func (r ComposeEnvironmentsRequest) Send(ctx context.Context) (*ComposeEnvironmentsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ComposeEnvironmentsResponse{
		ComposeEnvironmentsOutput: r.Request.Data.(*types.ComposeEnvironmentsOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ComposeEnvironmentsResponse is the response type for the
// ComposeEnvironments API operation.
type ComposeEnvironmentsResponse struct {
	*types.ComposeEnvironmentsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ComposeEnvironments request.
func (r *ComposeEnvironmentsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
