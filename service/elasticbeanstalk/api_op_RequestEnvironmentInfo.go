// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Initiates a request to compile the specified type of information of the deployed
// environment. Setting the InfoType to tail compiles the last lines from the
// application server log files of every Amazon EC2 instance in your environment.
// Setting the InfoType to bundle compresses the application server log files for
// every Amazon EC2 instance into a .zip file. Legacy and .NET containers do not
// support bundle logs. Use RetrieveEnvironmentInfo () to obtain the set of logs.
// Related Topics
//
//     * RetrieveEnvironmentInfo ()
func (c *Client) RequestEnvironmentInfo(ctx context.Context, params *RequestEnvironmentInfoInput, optFns ...func(*Options)) (*RequestEnvironmentInfoOutput, error) {
	stack := middleware.NewStack("RequestEnvironmentInfo", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpRequestEnvironmentInfoMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRequestEnvironmentInfoValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRequestEnvironmentInfo(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RequestEnvironmentInfo",
			Err:           err,
		}
	}
	out := result.(*RequestEnvironmentInfoOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request to retrieve logs from an environment and store them in your Elastic
// Beanstalk storage bucket.
type RequestEnvironmentInfoInput struct {
	// The type of information to request.
	InfoType types.EnvironmentInfoType
	// The name of the environment of the requested data. If no such environment is
	// found, RequestEnvironmentInfo returns an InvalidParameterValue error. Condition:
	// You must specify either this or an EnvironmentId, or both. If you do not specify
	// either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
	EnvironmentName *string
	// The ID of the environment of the requested data. If no such environment is
	// found, RequestEnvironmentInfo returns an InvalidParameterValue error. Condition:
	// You must specify either this or an EnvironmentName, or both. If you do not
	// specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
	EnvironmentId *string
}

type RequestEnvironmentInfoOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpRequestEnvironmentInfoMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpRequestEnvironmentInfo{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpRequestEnvironmentInfo{}, middleware.After)
}

func newServiceMetadataMiddleware_opRequestEnvironmentInfo(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "RequestEnvironmentInfo",
	}
}
