// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticbeanstalk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves detailed information about the health of instances in your AWS Elastic
// Beanstalk. This operation requires enhanced health reporting
// (https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html).
func (c *Client) DescribeInstancesHealth(ctx context.Context, params *DescribeInstancesHealthInput, optFns ...func(*Options)) (*DescribeInstancesHealthOutput, error) {
	stack := middleware.NewStack("DescribeInstancesHealth", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpDescribeInstancesHealthMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeInstancesHealth(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeInstancesHealth",
			Err:           err,
		}
	}
	out := result.(*DescribeInstancesHealthOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Parameters for a call to DescribeInstancesHealth.
type DescribeInstancesHealthInput struct {
	// Specify the AWS Elastic Beanstalk environment by ID.
	EnvironmentId *string
	// Specify the AWS Elastic Beanstalk environment by name.
	EnvironmentName *string
	// Specify the pagination token returned by a previous call.
	NextToken *string
	// Specifies the response elements you wish to receive. To retrieve all attributes,
	// set to All. If no attribute names are specified, returns a list of instances.
	AttributeNames []types.InstancesHealthAttribute
}

// Detailed health information about the Amazon EC2 instances in an AWS Elastic
// Beanstalk environment.
type DescribeInstancesHealthOutput struct {
	// Detailed health information about each instance. The output differs slightly
	// between Linux and Windows environments. There is a difference in the members
	// that are supported under the  type.
	InstanceHealthList []*types.SingleInstanceHealth
	// Pagination token for the next page of results, if available.
	NextToken *string
	// The date and time that the health information was retrieved.
	RefreshedAt *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpDescribeInstancesHealthMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpDescribeInstancesHealth{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpDescribeInstancesHealth{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeInstancesHealth(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticbeanstalk",
		OperationName: "DescribeInstancesHealth",
	}
}
