// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type DashboardType string

// Enum values for DashboardType
const (
	DashboardTypeCustom DashboardType = "CUSTOM"
)

// Values returns all known values for DashboardType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashboardType) Values() []DashboardType {
	return []DashboardType{
		"CUSTOM",
	}
}

type DateTimeType string

// Enum values for DateTimeType
const (
	DateTimeTypeAbsolute DateTimeType = "ABSOLUTE"
	DateTimeTypeRelative DateTimeType = "RELATIVE"
)

// Values returns all known values for DateTimeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DateTimeType) Values() []DateTimeType {
	return []DateTimeType{
		"ABSOLUTE",
		"RELATIVE",
	}
}

type Dimension string

// Enum values for Dimension
const (
	DimensionAz                 Dimension = "AZ"
	DimensionInstanceType       Dimension = "INSTANCE_TYPE"
	DimensionLinkedAccount      Dimension = "LINKED_ACCOUNT"
	DimensionOperation          Dimension = "OPERATION"
	DimensionPurchaseType       Dimension = "PURCHASE_TYPE"
	DimensionRegion             Dimension = "REGION"
	DimensionService            Dimension = "SERVICE"
	DimensionUsageType          Dimension = "USAGE_TYPE"
	DimensionUsageTypeGroup     Dimension = "USAGE_TYPE_GROUP"
	DimensionRecordType         Dimension = "RECORD_TYPE"
	DimensionResourceId         Dimension = "RESOURCE_ID"
	DimensionSubscriptionId     Dimension = "SUBSCRIPTION_ID"
	DimensionTagKey             Dimension = "TAG_KEY"
	DimensionOperatingSystem    Dimension = "OPERATING_SYSTEM"
	DimensionTenancy            Dimension = "TENANCY"
	DimensionBillingEntity      Dimension = "BILLING_ENTITY"
	DimensionReservationId      Dimension = "RESERVATION_ID"
	DimensionCostCategoryName   Dimension = "COST_CATEGORY_NAME"
	DimensionDatabaseEngine     Dimension = "DATABASE_ENGINE"
	DimensionLegalEntityName    Dimension = "LEGAL_ENTITY_NAME"
	DimensionSavingsPlansType   Dimension = "SAVINGS_PLANS_TYPE"
	DimensionInstanceTypeFamily Dimension = "INSTANCE_TYPE_FAMILY"
	DimensionCacheEngine        Dimension = "CACHE_ENGINE"
	DimensionDeploymentOption   Dimension = "DEPLOYMENT_OPTION"
	DimensionScope              Dimension = "SCOPE"
	DimensionPlatform           Dimension = "PLATFORM"
)

// Values returns all known values for Dimension. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Dimension) Values() []Dimension {
	return []Dimension{
		"AZ",
		"INSTANCE_TYPE",
		"LINKED_ACCOUNT",
		"OPERATION",
		"PURCHASE_TYPE",
		"REGION",
		"SERVICE",
		"USAGE_TYPE",
		"USAGE_TYPE_GROUP",
		"RECORD_TYPE",
		"RESOURCE_ID",
		"SUBSCRIPTION_ID",
		"TAG_KEY",
		"OPERATING_SYSTEM",
		"TENANCY",
		"BILLING_ENTITY",
		"RESERVATION_ID",
		"COST_CATEGORY_NAME",
		"DATABASE_ENGINE",
		"LEGAL_ENTITY_NAME",
		"SAVINGS_PLANS_TYPE",
		"INSTANCE_TYPE_FAMILY",
		"CACHE_ENGINE",
		"DEPLOYMENT_OPTION",
		"SCOPE",
		"PLATFORM",
	}
}

type Granularity string

// Enum values for Granularity
const (
	GranularityHourly  Granularity = "HOURLY"
	GranularityDaily   Granularity = "DAILY"
	GranularityMonthly Granularity = "MONTHLY"
)

// Values returns all known values for Granularity. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Granularity) Values() []Granularity {
	return []Granularity{
		"HOURLY",
		"DAILY",
		"MONTHLY",
	}
}

type GroupDefinitionType string

// Enum values for GroupDefinitionType
const (
	GroupDefinitionTypeDimension    GroupDefinitionType = "DIMENSION"
	GroupDefinitionTypeTag          GroupDefinitionType = "TAG"
	GroupDefinitionTypeCostCategory GroupDefinitionType = "COST_CATEGORY"
)

// Values returns all known values for GroupDefinitionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GroupDefinitionType) Values() []GroupDefinitionType {
	return []GroupDefinitionType{
		"DIMENSION",
		"TAG",
		"COST_CATEGORY",
	}
}

type MatchOption string

// Enum values for MatchOption
const (
	MatchOptionEquals             MatchOption = "EQUALS"
	MatchOptionAbsent             MatchOption = "ABSENT"
	MatchOptionStartsWith         MatchOption = "STARTS_WITH"
	MatchOptionEndsWith           MatchOption = "ENDS_WITH"
	MatchOptionContains           MatchOption = "CONTAINS"
	MatchOptionGreaterThanOrEqual MatchOption = "GREATER_THAN_OR_EQUAL"
	MatchOptionCaseSensitive      MatchOption = "CASE_SENSITIVE"
	MatchOptionCaseInsensitive    MatchOption = "CASE_INSENSITIVE"
)

// Values returns all known values for MatchOption. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MatchOption) Values() []MatchOption {
	return []MatchOption{
		"EQUALS",
		"ABSENT",
		"STARTS_WITH",
		"ENDS_WITH",
		"CONTAINS",
		"GREATER_THAN_OR_EQUAL",
		"CASE_SENSITIVE",
		"CASE_INSENSITIVE",
	}
}

type MetricName string

// Enum values for MetricName
const (
	MetricNameAmortizedCost              MetricName = "AmortizedCost"
	MetricNameBlendedCost                MetricName = "BlendedCost"
	MetricNameNetAmortizedCost           MetricName = "NetAmortizedCost"
	MetricNameNetUnblendedCost           MetricName = "NetUnblendedCost"
	MetricNameNormalizedUsageAmount      MetricName = "NormalizedUsageAmount"
	MetricNameUnblendedCost              MetricName = "UnblendedCost"
	MetricNameUsageQuantity              MetricName = "UsageQuantity"
	MetricNameSpendCoveredBySavingsPlans MetricName = "SpendCoveredBySavingsPlans"
	MetricNameHour                       MetricName = "Hour"
	MetricNameUnit                       MetricName = "Unit"
	MetricNameCost                       MetricName = "Cost"
)

// Values returns all known values for MetricName. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetricName) Values() []MetricName {
	return []MetricName{
		"AmortizedCost",
		"BlendedCost",
		"NetAmortizedCost",
		"NetUnblendedCost",
		"NormalizedUsageAmount",
		"UnblendedCost",
		"UsageQuantity",
		"SpendCoveredBySavingsPlans",
		"Hour",
		"Unit",
		"Cost",
	}
}

type VisualType string

// Enum values for VisualType
const (
	VisualTypeLine  VisualType = "LINE"
	VisualTypeBar   VisualType = "BAR"
	VisualTypeStack VisualType = "STACK"
)

// Values returns all known values for VisualType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VisualType) Values() []VisualType {
	return []VisualType{
		"LINE",
		"BAR",
		"STACK",
	}
}
