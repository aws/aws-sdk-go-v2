// Code generated by smithy-go-codegen DO NOT EDIT.

package codedeploy

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"net/http"
	"time"
)

const ServiceID = "CodeDeploy"
const ServiceAPIVersion = "2014-10-06"

// AWS CodeDeploy AWS CodeDeploy is a deployment service that automates application
// deployments to Amazon EC2 instances, on-premises instances running in your own
// facility, serverless AWS Lambda functions, or applications in an Amazon ECS
// service. You can deploy a nearly unlimited variety of application content, such
// as an updated Lambda function, updated applications in an Amazon ECS service,
// code, web and configuration files, executables, packages, scripts, multimedia
// files, and so on. AWS CodeDeploy can deploy application content stored in Amazon
// S3 buckets, GitHub repositories, or Bitbucket repositories. You do not need to
// make changes to your existing code before you can use AWS CodeDeploy. AWS
// CodeDeploy makes it easier for you to rapidly release new features, helps you
// avoid downtime during application deployment, and handles the complexity of
// updating your applications, without many of the risks associated with
// error-prone manual deployments. AWS CodeDeploy Components Use the information in
// this guide to help you work with the following AWS CodeDeploy components:
//
//     *
// Application: A name that uniquely identifies the application you want to deploy.
// AWS CodeDeploy uses this name, which functions as a container, to ensure the
// correct combination of revision, deployment configuration, and deployment group
// are referenced during a deployment.
//
//     * Deployment group: A set of individual
// instances, CodeDeploy Lambda deployment configuration settings, or an Amazon ECS
// service and network details. A Lambda deployment group specifies how to route
// traffic to a new version of a Lambda function. An Amazon ECS deployment group
// specifies the service created in Amazon ECS to deploy, a load balancer, and a
// listener to reroute production traffic to an updated containerized application.
// An EC2/On-premises deployment group contains individually tagged instances,
// Amazon EC2 instances in Amazon EC2 Auto Scaling groups, or both. All deployment
// groups can specify optional trigger, alarm, and rollback settings.
//
//     *
// Deployment configuration: A set of deployment rules and deployment success and
// failure conditions used by AWS CodeDeploy during a deployment.
//
//     *
// Deployment: The process and the components used when updating a Lambda function,
// a containerized application in an Amazon ECS service, or of installing content
// on one or more instances.
//
//     * Application revisions: For an AWS Lambda
// deployment, this is an AppSpec file that specifies the Lambda function to be
// updated and one or more functions to validate deployment lifecycle events. For
// an Amazon ECS deployment, this is an AppSpec file that specifies the Amazon ECS
// task definition, container, and port where production traffic is rerouted. For
// an EC2/On-premises deployment, this is an archive file that contains source
// content—source code, webpages, executable files, and deployment scripts—along
// with an AppSpec file. Revisions are stored in Amazon S3 buckets or GitHub
// repositories. For Amazon S3, a revision is uniquely identified by its Amazon S3
// object key and its ETag, version, or both. For GitHub, a revision is uniquely
// identified by its commit ID.
//
// This guide also contains information to help you
// get details about the instances in your deployments, to make on-premises
// instances available for AWS CodeDeploy deployments, to get details about a
// Lambda function deployment, and to get details about Amazon ECS service
// deployments. AWS CodeDeploy Information Resources
//
//     * AWS CodeDeploy User
// Guide (https://docs.aws.amazon.com/codedeploy/latest/userguide)
//
//     * AWS
// CodeDeploy API Reference Guide
// (https://docs.aws.amazon.com/codedeploy/latest/APIReference/)
//
//     * AWS CLI
// Reference for AWS CodeDeploy
// (https://docs.aws.amazon.com/cli/latest/reference/deploy/index.html)
//
//     * AWS
// CodeDeploy Developer Forum
// (https://forums.aws.amazon.com/forum.jspa?forumID=179)
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveHTTPSignerV4(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []func(*middleware.Stack) error

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// Signature Version 4 (SigV4) Signer
	HTTPSignerV4 HTTPSignerV4

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]func(*middleware.Stack) error, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}
func (c *Client) invokeOperation(ctx context.Context, opID string, params interface{}, optFns []func(*Options), stackFns ...func(*middleware.Stack, Options) error) (result interface{}, metadata middleware.Metadata, err error) {
	stack := middleware.NewStack(opID, smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}

	for _, fn := range stackFns {
		if err := fn(stack, options); err != nil {
			return nil, metadata, err
		}
	}

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, metadata, err
		}
	}

	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err = handler.Handle(ctx, params)
	if err != nil {
		err = &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: opID,
			Err:           err,
		}
	}
	return result, metadata, err
}

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
		APIOptions:  cfg.APIOptions,
	}
	resolveAWSEndpointResolver(cfg, &opts)
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func resolveAWSEndpointResolver(cfg aws.Config, o *Options) {
	if cfg.EndpointResolver == nil {
		return
	}
	o.EndpointResolver = WithEndpointResolver(cfg.EndpointResolver, NewDefaultEndpointResolver())
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("codedeploy")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, o.HTTPSignerV4), middleware.After)
}

type HTTPSignerV4 interface {
	SignHTTP(ctx context.Context, credentials aws.Credentials, r *http.Request, payloadHash string, service string, region string, signingTime time.Time) error
}

func resolveHTTPSignerV4(o *Options) {
	if o.HTTPSignerV4 != nil {
		return
	}
	o.HTTPSignerV4 = v4.NewSigner()
}

func addRetryMiddlewares(stack *middleware.Stack, o Options) error {
	mo := retry.AddRetryMiddlewaresOptions{
		Retryer: o.Retryer,
	}
	return retry.AddRetryMiddlewares(stack, mo)
}

func addRequestIDRetrieverMiddleware(stack *middleware.Stack) {
	awsmiddleware.AddRequestIDRetrieverMiddleware(stack)
}

func addResponseErrorMiddleware(stack *middleware.Stack) {
	awshttp.AddResponseErrorMiddleware(stack)
}
