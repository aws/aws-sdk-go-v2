// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ApplicationRevisionSortBy string

// Enum values for ApplicationRevisionSortBy
const (
	ApplicationRevisionSortByRegistertime  ApplicationRevisionSortBy = "registerTime"
	ApplicationRevisionSortByFirstusedtime ApplicationRevisionSortBy = "firstUsedTime"
	ApplicationRevisionSortByLastusedtime  ApplicationRevisionSortBy = "lastUsedTime"
)

// Values returns all known values for ApplicationRevisionSortBy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ApplicationRevisionSortBy) Values() []ApplicationRevisionSortBy {
	return []ApplicationRevisionSortBy{
		"registerTime",
		"firstUsedTime",
		"lastUsedTime",
	}
}

type AutoRollbackEvent string

// Enum values for AutoRollbackEvent
const (
	AutoRollbackEventDeployment_failure         AutoRollbackEvent = "DEPLOYMENT_FAILURE"
	AutoRollbackEventDeployment_stop_on_alarm   AutoRollbackEvent = "DEPLOYMENT_STOP_ON_ALARM"
	AutoRollbackEventDeployment_stop_on_request AutoRollbackEvent = "DEPLOYMENT_STOP_ON_REQUEST"
)

// Values returns all known values for AutoRollbackEvent. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AutoRollbackEvent) Values() []AutoRollbackEvent {
	return []AutoRollbackEvent{
		"DEPLOYMENT_FAILURE",
		"DEPLOYMENT_STOP_ON_ALARM",
		"DEPLOYMENT_STOP_ON_REQUEST",
	}
}

type BundleType string

// Enum values for BundleType
const (
	BundleTypeTar     BundleType = "tar"
	BundleTypeTargzip BundleType = "tgz"
	BundleTypeZip     BundleType = "zip"
	BundleTypeYaml    BundleType = "YAML"
	BundleTypeJson    BundleType = "JSON"
)

// Values returns all known values for BundleType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (BundleType) Values() []BundleType {
	return []BundleType{
		"tar",
		"tgz",
		"zip",
		"YAML",
		"JSON",
	}
}

type ComputePlatform string

// Enum values for ComputePlatform
const (
	ComputePlatformServer ComputePlatform = "Server"
	ComputePlatformLambda ComputePlatform = "Lambda"
	ComputePlatformEcs    ComputePlatform = "ECS"
)

// Values returns all known values for ComputePlatform. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComputePlatform) Values() []ComputePlatform {
	return []ComputePlatform{
		"Server",
		"Lambda",
		"ECS",
	}
}

type DeploymentCreator string

// Enum values for DeploymentCreator
const (
	DeploymentCreatorUser                   DeploymentCreator = "user"
	DeploymentCreatorAutoscaling            DeploymentCreator = "autoscaling"
	DeploymentCreatorCodedeployrollback     DeploymentCreator = "codeDeployRollback"
	DeploymentCreatorCodedeploy             DeploymentCreator = "CodeDeploy"
	DeploymentCreatorCloudformation         DeploymentCreator = "CloudFormation"
	DeploymentCreatorCloudformationrollback DeploymentCreator = "CloudFormationRollback"
)

// Values returns all known values for DeploymentCreator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentCreator) Values() []DeploymentCreator {
	return []DeploymentCreator{
		"user",
		"autoscaling",
		"codeDeployRollback",
		"CodeDeploy",
		"CloudFormation",
		"CloudFormationRollback",
	}
}

type DeploymentOption string

// Enum values for DeploymentOption
const (
	DeploymentOptionWith_traffic_control    DeploymentOption = "WITH_TRAFFIC_CONTROL"
	DeploymentOptionWithout_traffic_control DeploymentOption = "WITHOUT_TRAFFIC_CONTROL"
)

// Values returns all known values for DeploymentOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentOption) Values() []DeploymentOption {
	return []DeploymentOption{
		"WITH_TRAFFIC_CONTROL",
		"WITHOUT_TRAFFIC_CONTROL",
	}
}

type DeploymentReadyAction string

// Enum values for DeploymentReadyAction
const (
	DeploymentReadyActionContinue_deployment DeploymentReadyAction = "CONTINUE_DEPLOYMENT"
	DeploymentReadyActionStop_deployment     DeploymentReadyAction = "STOP_DEPLOYMENT"
)

// Values returns all known values for DeploymentReadyAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentReadyAction) Values() []DeploymentReadyAction {
	return []DeploymentReadyAction{
		"CONTINUE_DEPLOYMENT",
		"STOP_DEPLOYMENT",
	}
}

type DeploymentStatus string

// Enum values for DeploymentStatus
const (
	DeploymentStatusCreated     DeploymentStatus = "Created"
	DeploymentStatusQueued      DeploymentStatus = "Queued"
	DeploymentStatusIn_progress DeploymentStatus = "InProgress"
	DeploymentStatusBaking      DeploymentStatus = "Baking"
	DeploymentStatusSucceeded   DeploymentStatus = "Succeeded"
	DeploymentStatusFailed      DeploymentStatus = "Failed"
	DeploymentStatusStopped     DeploymentStatus = "Stopped"
	DeploymentStatusReady       DeploymentStatus = "Ready"
)

// Values returns all known values for DeploymentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentStatus) Values() []DeploymentStatus {
	return []DeploymentStatus{
		"Created",
		"Queued",
		"InProgress",
		"Baking",
		"Succeeded",
		"Failed",
		"Stopped",
		"Ready",
	}
}

type DeploymentTargetType string

// Enum values for DeploymentTargetType
const (
	DeploymentTargetTypeInstance_target       DeploymentTargetType = "InstanceTarget"
	DeploymentTargetTypeLambda_target         DeploymentTargetType = "LambdaTarget"
	DeploymentTargetTypeEcs_target            DeploymentTargetType = "ECSTarget"
	DeploymentTargetTypeCloudformation_target DeploymentTargetType = "CloudFormationTarget"
)

// Values returns all known values for DeploymentTargetType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentTargetType) Values() []DeploymentTargetType {
	return []DeploymentTargetType{
		"InstanceTarget",
		"LambdaTarget",
		"ECSTarget",
		"CloudFormationTarget",
	}
}

type DeploymentType string

// Enum values for DeploymentType
const (
	DeploymentTypeIn_place   DeploymentType = "IN_PLACE"
	DeploymentTypeBlue_green DeploymentType = "BLUE_GREEN"
)

// Values returns all known values for DeploymentType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentType) Values() []DeploymentType {
	return []DeploymentType{
		"IN_PLACE",
		"BLUE_GREEN",
	}
}

type DeploymentWaitType string

// Enum values for DeploymentWaitType
const (
	DeploymentWaitTypeReady_wait       DeploymentWaitType = "READY_WAIT"
	DeploymentWaitTypeTermination_wait DeploymentWaitType = "TERMINATION_WAIT"
)

// Values returns all known values for DeploymentWaitType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentWaitType) Values() []DeploymentWaitType {
	return []DeploymentWaitType{
		"READY_WAIT",
		"TERMINATION_WAIT",
	}
}

type EC2TagFilterType string

// Enum values for EC2TagFilterType
const (
	EC2TagFilterTypeKey_only      EC2TagFilterType = "KEY_ONLY"
	EC2TagFilterTypeValue_only    EC2TagFilterType = "VALUE_ONLY"
	EC2TagFilterTypeKey_and_value EC2TagFilterType = "KEY_AND_VALUE"
)

// Values returns all known values for EC2TagFilterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (EC2TagFilterType) Values() []EC2TagFilterType {
	return []EC2TagFilterType{
		"KEY_ONLY",
		"VALUE_ONLY",
		"KEY_AND_VALUE",
	}
}

type ErrorCode string

// Enum values for ErrorCode
const (
	ErrorCodeAgent_issue                                 ErrorCode = "AGENT_ISSUE"
	ErrorCodeAlarm_active                                ErrorCode = "ALARM_ACTIVE"
	ErrorCodeApplication_missing                         ErrorCode = "APPLICATION_MISSING"
	ErrorCodeAutoscaling_validation_error                ErrorCode = "AUTOSCALING_VALIDATION_ERROR"
	ErrorCodeAuto_scaling_configuration                  ErrorCode = "AUTO_SCALING_CONFIGURATION"
	ErrorCodeAuto_scaling_iam_role_permissions           ErrorCode = "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
	ErrorCodeCodedeploy_resource_cannot_be_found         ErrorCode = "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND"
	ErrorCodeCustomer_application_unhealthy              ErrorCode = "CUSTOMER_APPLICATION_UNHEALTHY"
	ErrorCodeDeployment_group_missing                    ErrorCode = "DEPLOYMENT_GROUP_MISSING"
	ErrorCodeEcs_update_error                            ErrorCode = "ECS_UPDATE_ERROR"
	ErrorCodeElastic_load_balancing_invalid              ErrorCode = "ELASTIC_LOAD_BALANCING_INVALID"
	ErrorCodeElb_invalid_instance                        ErrorCode = "ELB_INVALID_INSTANCE"
	ErrorCodeHealth_constraints                          ErrorCode = "HEALTH_CONSTRAINTS"
	ErrorCodeHealth_constraints_invalid                  ErrorCode = "HEALTH_CONSTRAINTS_INVALID"
	ErrorCodeHook_execution_failure                      ErrorCode = "HOOK_EXECUTION_FAILURE"
	ErrorCodeIam_role_missing                            ErrorCode = "IAM_ROLE_MISSING"
	ErrorCodeIam_role_permissions                        ErrorCode = "IAM_ROLE_PERMISSIONS"
	ErrorCodeInternal_error                              ErrorCode = "INTERNAL_ERROR"
	ErrorCodeInvalid_ecs_service                         ErrorCode = "INVALID_ECS_SERVICE"
	ErrorCodeInvalid_lambda_configuration                ErrorCode = "INVALID_LAMBDA_CONFIGURATION"
	ErrorCodeInvalid_lambda_function                     ErrorCode = "INVALID_LAMBDA_FUNCTION"
	ErrorCodeInvalid_revision                            ErrorCode = "INVALID_REVISION"
	ErrorCodeManual_stop                                 ErrorCode = "MANUAL_STOP"
	ErrorCodeMissing_blue_green_deployment_configuration ErrorCode = "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
	ErrorCodeMissing_elb_information                     ErrorCode = "MISSING_ELB_INFORMATION"
	ErrorCodeMissing_github_token                        ErrorCode = "MISSING_GITHUB_TOKEN"
	ErrorCodeNo_ec2_subscription                         ErrorCode = "NO_EC2_SUBSCRIPTION"
	ErrorCodeNo_instances                                ErrorCode = "NO_INSTANCES"
	ErrorCodeOver_max_instances                          ErrorCode = "OVER_MAX_INSTANCES"
	ErrorCodeResource_limit_exceeded                     ErrorCode = "RESOURCE_LIMIT_EXCEEDED"
	ErrorCodeRevision_missing                            ErrorCode = "REVISION_MISSING"
	ErrorCodeThrottled                                   ErrorCode = "THROTTLED"
	ErrorCodeTimeout                                     ErrorCode = "TIMEOUT"
	ErrorCodeCloudformation_stack_failure                ErrorCode = "CLOUDFORMATION_STACK_FAILURE"
)

// Values returns all known values for ErrorCode. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (ErrorCode) Values() []ErrorCode {
	return []ErrorCode{
		"AGENT_ISSUE",
		"ALARM_ACTIVE",
		"APPLICATION_MISSING",
		"AUTOSCALING_VALIDATION_ERROR",
		"AUTO_SCALING_CONFIGURATION",
		"AUTO_SCALING_IAM_ROLE_PERMISSIONS",
		"CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND",
		"CUSTOMER_APPLICATION_UNHEALTHY",
		"DEPLOYMENT_GROUP_MISSING",
		"ECS_UPDATE_ERROR",
		"ELASTIC_LOAD_BALANCING_INVALID",
		"ELB_INVALID_INSTANCE",
		"HEALTH_CONSTRAINTS",
		"HEALTH_CONSTRAINTS_INVALID",
		"HOOK_EXECUTION_FAILURE",
		"IAM_ROLE_MISSING",
		"IAM_ROLE_PERMISSIONS",
		"INTERNAL_ERROR",
		"INVALID_ECS_SERVICE",
		"INVALID_LAMBDA_CONFIGURATION",
		"INVALID_LAMBDA_FUNCTION",
		"INVALID_REVISION",
		"MANUAL_STOP",
		"MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION",
		"MISSING_ELB_INFORMATION",
		"MISSING_GITHUB_TOKEN",
		"NO_EC2_SUBSCRIPTION",
		"NO_INSTANCES",
		"OVER_MAX_INSTANCES",
		"RESOURCE_LIMIT_EXCEEDED",
		"REVISION_MISSING",
		"THROTTLED",
		"TIMEOUT",
		"CLOUDFORMATION_STACK_FAILURE",
	}
}

type FileExistsBehavior string

// Enum values for FileExistsBehavior
const (
	FileExistsBehaviorDisallow  FileExistsBehavior = "DISALLOW"
	FileExistsBehaviorOverwrite FileExistsBehavior = "OVERWRITE"
	FileExistsBehaviorRetain    FileExistsBehavior = "RETAIN"
)

// Values returns all known values for FileExistsBehavior. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (FileExistsBehavior) Values() []FileExistsBehavior {
	return []FileExistsBehavior{
		"DISALLOW",
		"OVERWRITE",
		"RETAIN",
	}
}

type GreenFleetProvisioningAction string

// Enum values for GreenFleetProvisioningAction
const (
	GreenFleetProvisioningActionDiscover_existing       GreenFleetProvisioningAction = "DISCOVER_EXISTING"
	GreenFleetProvisioningActionCopy_auto_scaling_group GreenFleetProvisioningAction = "COPY_AUTO_SCALING_GROUP"
)

// Values returns all known values for GreenFleetProvisioningAction. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (GreenFleetProvisioningAction) Values() []GreenFleetProvisioningAction {
	return []GreenFleetProvisioningAction{
		"DISCOVER_EXISTING",
		"COPY_AUTO_SCALING_GROUP",
	}
}

type InstanceAction string

// Enum values for InstanceAction
const (
	InstanceActionTerminate  InstanceAction = "TERMINATE"
	InstanceActionKeep_alive InstanceAction = "KEEP_ALIVE"
)

// Values returns all known values for InstanceAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceAction) Values() []InstanceAction {
	return []InstanceAction{
		"TERMINATE",
		"KEEP_ALIVE",
	}
}

type InstanceStatus string

// Enum values for InstanceStatus
const (
	InstanceStatusPending     InstanceStatus = "Pending"
	InstanceStatusIn_progress InstanceStatus = "InProgress"
	InstanceStatusSucceeded   InstanceStatus = "Succeeded"
	InstanceStatusFailed      InstanceStatus = "Failed"
	InstanceStatusSkipped     InstanceStatus = "Skipped"
	InstanceStatusUnknown     InstanceStatus = "Unknown"
	InstanceStatusReady       InstanceStatus = "Ready"
)

// Values returns all known values for InstanceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceStatus) Values() []InstanceStatus {
	return []InstanceStatus{
		"Pending",
		"InProgress",
		"Succeeded",
		"Failed",
		"Skipped",
		"Unknown",
		"Ready",
	}
}

type InstanceType string

// Enum values for InstanceType
const (
	InstanceTypeBlue  InstanceType = "Blue"
	InstanceTypeGreen InstanceType = "Green"
)

// Values returns all known values for InstanceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (InstanceType) Values() []InstanceType {
	return []InstanceType{
		"Blue",
		"Green",
	}
}

type LifecycleErrorCode string

// Enum values for LifecycleErrorCode
const (
	LifecycleErrorCodeSuccess               LifecycleErrorCode = "Success"
	LifecycleErrorCodeScript_missing        LifecycleErrorCode = "ScriptMissing"
	LifecycleErrorCodeScript_not_executable LifecycleErrorCode = "ScriptNotExecutable"
	LifecycleErrorCodeScript_timed_out      LifecycleErrorCode = "ScriptTimedOut"
	LifecycleErrorCodeScript_failed         LifecycleErrorCode = "ScriptFailed"
	LifecycleErrorCodeUnknown_error         LifecycleErrorCode = "UnknownError"
)

// Values returns all known values for LifecycleErrorCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LifecycleErrorCode) Values() []LifecycleErrorCode {
	return []LifecycleErrorCode{
		"Success",
		"ScriptMissing",
		"ScriptNotExecutable",
		"ScriptTimedOut",
		"ScriptFailed",
		"UnknownError",
	}
}

type LifecycleEventStatus string

// Enum values for LifecycleEventStatus
const (
	LifecycleEventStatusPending     LifecycleEventStatus = "Pending"
	LifecycleEventStatusIn_progress LifecycleEventStatus = "InProgress"
	LifecycleEventStatusSucceeded   LifecycleEventStatus = "Succeeded"
	LifecycleEventStatusFailed      LifecycleEventStatus = "Failed"
	LifecycleEventStatusSkipped     LifecycleEventStatus = "Skipped"
	LifecycleEventStatusUnknown     LifecycleEventStatus = "Unknown"
)

// Values returns all known values for LifecycleEventStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LifecycleEventStatus) Values() []LifecycleEventStatus {
	return []LifecycleEventStatus{
		"Pending",
		"InProgress",
		"Succeeded",
		"Failed",
		"Skipped",
		"Unknown",
	}
}

type ListStateFilterAction string

// Enum values for ListStateFilterAction
const (
	ListStateFilterActionInclude ListStateFilterAction = "include"
	ListStateFilterActionExclude ListStateFilterAction = "exclude"
	ListStateFilterActionIgnore  ListStateFilterAction = "ignore"
)

// Values returns all known values for ListStateFilterAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ListStateFilterAction) Values() []ListStateFilterAction {
	return []ListStateFilterAction{
		"include",
		"exclude",
		"ignore",
	}
}

type MinimumHealthyHostsType string

// Enum values for MinimumHealthyHostsType
const (
	MinimumHealthyHostsTypeHost_count    MinimumHealthyHostsType = "HOST_COUNT"
	MinimumHealthyHostsTypeFleet_percent MinimumHealthyHostsType = "FLEET_PERCENT"
)

// Values returns all known values for MinimumHealthyHostsType. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (MinimumHealthyHostsType) Values() []MinimumHealthyHostsType {
	return []MinimumHealthyHostsType{
		"HOST_COUNT",
		"FLEET_PERCENT",
	}
}

type RegistrationStatus string

// Enum values for RegistrationStatus
const (
	RegistrationStatusRegistered   RegistrationStatus = "Registered"
	RegistrationStatusDeregistered RegistrationStatus = "Deregistered"
)

// Values returns all known values for RegistrationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RegistrationStatus) Values() []RegistrationStatus {
	return []RegistrationStatus{
		"Registered",
		"Deregistered",
	}
}

type RevisionLocationType string

// Enum values for RevisionLocationType
const (
	RevisionLocationTypeS3             RevisionLocationType = "S3"
	RevisionLocationTypeGithub         RevisionLocationType = "GitHub"
	RevisionLocationTypeString         RevisionLocationType = "String"
	RevisionLocationTypeAppspeccontent RevisionLocationType = "AppSpecContent"
)

// Values returns all known values for RevisionLocationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RevisionLocationType) Values() []RevisionLocationType {
	return []RevisionLocationType{
		"S3",
		"GitHub",
		"String",
		"AppSpecContent",
	}
}

type SortOrder string

// Enum values for SortOrder
const (
	SortOrderAscending  SortOrder = "ascending"
	SortOrderDescending SortOrder = "descending"
)

// Values returns all known values for SortOrder. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (SortOrder) Values() []SortOrder {
	return []SortOrder{
		"ascending",
		"descending",
	}
}

type StopStatus string

// Enum values for StopStatus
const (
	StopStatusPending   StopStatus = "Pending"
	StopStatusSucceeded StopStatus = "Succeeded"
)

// Values returns all known values for StopStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (StopStatus) Values() []StopStatus {
	return []StopStatus{
		"Pending",
		"Succeeded",
	}
}

type TagFilterType string

// Enum values for TagFilterType
const (
	TagFilterTypeKey_only      TagFilterType = "KEY_ONLY"
	TagFilterTypeValue_only    TagFilterType = "VALUE_ONLY"
	TagFilterTypeKey_and_value TagFilterType = "KEY_AND_VALUE"
)

// Values returns all known values for TagFilterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TagFilterType) Values() []TagFilterType {
	return []TagFilterType{
		"KEY_ONLY",
		"VALUE_ONLY",
		"KEY_AND_VALUE",
	}
}

type TargetFilterName string

// Enum values for TargetFilterName
const (
	TargetFilterNameTarget_status         TargetFilterName = "TargetStatus"
	TargetFilterNameServer_instance_label TargetFilterName = "ServerInstanceLabel"
)

// Values returns all known values for TargetFilterName. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TargetFilterName) Values() []TargetFilterName {
	return []TargetFilterName{
		"TargetStatus",
		"ServerInstanceLabel",
	}
}

type TargetLabel string

// Enum values for TargetLabel
const (
	TargetLabelBlue  TargetLabel = "Blue"
	TargetLabelGreen TargetLabel = "Green"
)

// Values returns all known values for TargetLabel. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (TargetLabel) Values() []TargetLabel {
	return []TargetLabel{
		"Blue",
		"Green",
	}
}

type TargetStatus string

// Enum values for TargetStatus
const (
	TargetStatusPending     TargetStatus = "Pending"
	TargetStatusIn_progress TargetStatus = "InProgress"
	TargetStatusSucceeded   TargetStatus = "Succeeded"
	TargetStatusFailed      TargetStatus = "Failed"
	TargetStatusSkipped     TargetStatus = "Skipped"
	TargetStatusUnknown     TargetStatus = "Unknown"
	TargetStatusReady       TargetStatus = "Ready"
)

// Values returns all known values for TargetStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (TargetStatus) Values() []TargetStatus {
	return []TargetStatus{
		"Pending",
		"InProgress",
		"Succeeded",
		"Failed",
		"Skipped",
		"Unknown",
		"Ready",
	}
}

type TrafficRoutingType string

// Enum values for TrafficRoutingType
const (
	TrafficRoutingTypeTimebasedcanary TrafficRoutingType = "TimeBasedCanary"
	TrafficRoutingTypeTimebasedlinear TrafficRoutingType = "TimeBasedLinear"
	TrafficRoutingTypeAllatonce       TrafficRoutingType = "AllAtOnce"
)

// Values returns all known values for TrafficRoutingType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TrafficRoutingType) Values() []TrafficRoutingType {
	return []TrafficRoutingType{
		"TimeBasedCanary",
		"TimeBasedLinear",
		"AllAtOnce",
	}
}

type TriggerEventType string

// Enum values for TriggerEventType
const (
	TriggerEventTypeDeployment_start    TriggerEventType = "DeploymentStart"
	TriggerEventTypeDeployment_success  TriggerEventType = "DeploymentSuccess"
	TriggerEventTypeDeployment_failure  TriggerEventType = "DeploymentFailure"
	TriggerEventTypeDeployment_stop     TriggerEventType = "DeploymentStop"
	TriggerEventTypeDeployment_rollback TriggerEventType = "DeploymentRollback"
	TriggerEventTypeDeployment_ready    TriggerEventType = "DeploymentReady"
	TriggerEventTypeInstance_start      TriggerEventType = "InstanceStart"
	TriggerEventTypeInstance_success    TriggerEventType = "InstanceSuccess"
	TriggerEventTypeInstance_failure    TriggerEventType = "InstanceFailure"
	TriggerEventTypeInstance_ready      TriggerEventType = "InstanceReady"
)

// Values returns all known values for TriggerEventType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TriggerEventType) Values() []TriggerEventType {
	return []TriggerEventType{
		"DeploymentStart",
		"DeploymentSuccess",
		"DeploymentFailure",
		"DeploymentStop",
		"DeploymentRollback",
		"DeploymentReady",
		"InstanceStart",
		"InstanceSuccess",
		"InstanceFailure",
		"InstanceReady",
	}
}
