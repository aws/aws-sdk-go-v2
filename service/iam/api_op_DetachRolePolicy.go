// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/query"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opDetachRolePolicy = "DetachRolePolicy"

// DetachRolePolicyRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Removes the specified managed policy from the specified role.
//
// A role can also have inline policies embedded with it. To delete an inline
// policy, use the DeleteRolePolicy API. For information about policies, see
// Managed Policies and Inline Policies (https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)
// in the IAM User Guide.
//
//    // Example sending a request using DetachRolePolicyRequest.
//    req := client.DetachRolePolicyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/DetachRolePolicy
func (c *Client) DetachRolePolicyRequest(input *types.DetachRolePolicyInput) DetachRolePolicyRequest {
	op := &aws.Operation{
		Name:       opDetachRolePolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.DetachRolePolicyInput{}
	}

	req := c.newRequest(op, input, &types.DetachRolePolicyOutput{})
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return DetachRolePolicyRequest{Request: req, Input: input, Copy: c.DetachRolePolicyRequest}
}

// DetachRolePolicyRequest is the request type for the
// DetachRolePolicy API operation.
type DetachRolePolicyRequest struct {
	*aws.Request
	Input *types.DetachRolePolicyInput
	Copy  func(*types.DetachRolePolicyInput) DetachRolePolicyRequest
}

// Send marshals and sends the DetachRolePolicy API request.
func (r DetachRolePolicyRequest) Send(ctx context.Context) (*DetachRolePolicyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DetachRolePolicyResponse{
		DetachRolePolicyOutput: r.Request.Data.(*types.DetachRolePolicyOutput),
		response:               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DetachRolePolicyResponse is the response type for the
// DetachRolePolicy API operation.
type DetachRolePolicyResponse struct {
	*types.DetachRolePolicyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DetachRolePolicy request.
func (r *DetachRolePolicyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
