// Code generated by smithy-go-codegen DO NOT EDIT.

package iam

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Changes the password of the IAM user who is calling this operation. The AWS
// account root user password is not affected by this operation. To change the
// password for a different user, see UpdateLoginProfile (). For more information
// about modifying passwords, see Managing Passwords
// (https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in
// the IAM User Guide.
func (c *Client) ChangePassword(ctx context.Context, params *ChangePasswordInput, optFns ...func(*Options)) (*ChangePasswordOutput, error) {
	stack := middleware.NewStack("ChangePassword", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpChangePasswordMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpChangePasswordValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opChangePassword(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ChangePassword",
			Err:           err,
		}
	}
	out := result.(*ChangePasswordOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ChangePasswordInput struct {
	// The IAM user's current password.
	OldPassword *string
	// The new password. The new password must conform to the AWS account's password
	// policy, if one exists. The regex pattern (http://wikipedia.org/wiki/regex) that
	// is used to validate this parameter is a string of characters. That string can
	// include almost any printable ASCII character from the space (\u0020) through the
	// end of the ASCII character range (\u00FF). You can also include the tab
	// (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of
	// these characters are valid in a password. However, many tools, such as the AWS
	// Management Console, might restrict the ability to type certain characters
	// because they have special meaning within that tool.
	NewPassword *string
}

type ChangePasswordOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpChangePasswordMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpChangePassword{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpChangePassword{}, middleware.After)
}

func newServiceMetadataMiddleware_opChangePassword(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iam",
		OperationName: "ChangePassword",
	}
}
