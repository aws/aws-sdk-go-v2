// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opListAccountAliases = "ListAccountAliases"

// ListAccountAliasesRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Lists the account alias associated with the AWS account (Note: you can have
// only one). For information about using an AWS account alias, see Using an
// Alias for Your AWS Account ID (https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html)
// in the IAM User Guide.
//
//    // Example sending a request using ListAccountAliasesRequest.
//    req := client.ListAccountAliasesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/ListAccountAliases
func (c *Client) ListAccountAliasesRequest(input *types.ListAccountAliasesInput) ListAccountAliasesRequest {
	op := &aws.Operation{
		Name:       opListAccountAliases,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListAccountAliasesInput{}
	}

	req := c.newRequest(op, input, &types.ListAccountAliasesOutput{})
	return ListAccountAliasesRequest{Request: req, Input: input, Copy: c.ListAccountAliasesRequest}
}

// ListAccountAliasesRequest is the request type for the
// ListAccountAliases API operation.
type ListAccountAliasesRequest struct {
	*aws.Request
	Input *types.ListAccountAliasesInput
	Copy  func(*types.ListAccountAliasesInput) ListAccountAliasesRequest
}

// Send marshals and sends the ListAccountAliases API request.
func (r ListAccountAliasesRequest) Send(ctx context.Context) (*ListAccountAliasesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListAccountAliasesResponse{
		ListAccountAliasesOutput: r.Request.Data.(*types.ListAccountAliasesOutput),
		response:                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListAccountAliasesRequestPaginator returns a paginator for ListAccountAliases.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListAccountAliasesRequest(input)
//   p := iam.NewListAccountAliasesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListAccountAliasesPaginator(req ListAccountAliasesRequest) ListAccountAliasesPaginator {
	return ListAccountAliasesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListAccountAliasesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListAccountAliasesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListAccountAliasesPaginator struct {
	aws.Pager
}

func (p *ListAccountAliasesPaginator) CurrentPage() *types.ListAccountAliasesOutput {
	return p.Pager.CurrentPage().(*types.ListAccountAliasesOutput)
}

// ListAccountAliasesResponse is the response type for the
// ListAccountAliases API operation.
type ListAccountAliasesResponse struct {
	*types.ListAccountAliasesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListAccountAliases request.
func (r *ListAccountAliasesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
