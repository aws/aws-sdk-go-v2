// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/query"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opPutGroupPolicy = "PutGroupPolicy"

// PutGroupPolicyRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Adds or updates an inline policy document that is embedded in the specified
// IAM group.
//
// A user can also have managed policies attached to it. To attach a managed
// policy to a group, use AttachGroupPolicy. To create a new managed policy,
// use CreatePolicy. For information about policies, see Managed Policies and
// Inline Policies (https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)
// in the IAM User Guide.
//
// For information about limits on the number of inline policies that you can
// embed in a group, see Limitations on IAM Entities (https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html)
// in the IAM User Guide.
//
// Because policy documents can be large, you should use POST rather than GET
// when calling PutGroupPolicy. For general information about using the Query
// API with IAM, go to Making Query Requests (https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html)
// in the IAM User Guide.
//
//    // Example sending a request using PutGroupPolicyRequest.
//    req := client.PutGroupPolicyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/PutGroupPolicy
func (c *Client) PutGroupPolicyRequest(input *types.PutGroupPolicyInput) PutGroupPolicyRequest {
	op := &aws.Operation{
		Name:       opPutGroupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutGroupPolicyInput{}
	}

	req := c.newRequest(op, input, &types.PutGroupPolicyOutput{})
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return PutGroupPolicyRequest{Request: req, Input: input, Copy: c.PutGroupPolicyRequest}
}

// PutGroupPolicyRequest is the request type for the
// PutGroupPolicy API operation.
type PutGroupPolicyRequest struct {
	*aws.Request
	Input *types.PutGroupPolicyInput
	Copy  func(*types.PutGroupPolicyInput) PutGroupPolicyRequest
}

// Send marshals and sends the PutGroupPolicy API request.
func (r PutGroupPolicyRequest) Send(ctx context.Context) (*PutGroupPolicyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutGroupPolicyResponse{
		PutGroupPolicyOutput: r.Request.Data.(*types.PutGroupPolicyOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutGroupPolicyResponse is the response type for the
// PutGroupPolicy API operation.
type PutGroupPolicyResponse struct {
	*types.PutGroupPolicyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutGroupPolicy request.
func (r *PutGroupPolicyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
