// Code generated by smithy-go-codegen DO NOT EDIT.

package iam

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Uploads a server certificate entity for the AWS account. The server certificate
// entity includes a public key certificate, a private key, and an optional
// certificate chain, which should all be PEM-encoded. We recommend that you use
// AWS Certificate Manager (https://docs.aws.amazon.com/acm/) to provision, manage,
// and deploy your server certificates. With ACM you can request a certificate,
// deploy it to AWS resources, and let ACM handle certificate renewals for you.
// Certificates provided by ACM are free. For more information about using ACM, see
// the AWS Certificate Manager User Guide
// (https://docs.aws.amazon.com/acm/latest/userguide/). For more information about
// working with server certificates, see Working with Server Certificates
// (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)
// in the IAM User Guide. This topic includes a list of AWS services that can use
// the server certificates that you manage with IAM. For information about the
// number of server certificates you can upload, see Limitations on IAM Entities
// and Objects
// (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html) in
// the IAM User Guide. Because the body of the public key certificate, private key,
// and the certificate chain can be large, you should use POST rather than GET when
// calling UploadServerCertificate. For information about setting up signatures and
// authorization through the API, go to Signing AWS API Requests
// (https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html) in
// the AWS General Reference. For general information about using the Query API
// with IAM, go to Calling the API by Making HTTP Query Requests
// (https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html) in the IAM
// User Guide.
func (c *Client) UploadServerCertificate(ctx context.Context, params *UploadServerCertificateInput, optFns ...func(*Options)) (*UploadServerCertificateOutput, error) {
	stack := middleware.NewStack("UploadServerCertificate", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpUploadServerCertificateMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUploadServerCertificateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUploadServerCertificate(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UploadServerCertificate",
			Err:           err,
		}
	}
	out := result.(*UploadServerCertificateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UploadServerCertificateInput struct {
	// The contents of the private key in PEM-encoded format. The regex pattern
	// (http://wikipedia.org/wiki/regex) used to validate this parameter is a string of
	// characters consisting of the following:
	//
	//     * Any printable ASCII character
	// ranging from the space character (\u0020) through the end of the ASCII character
	// range
	//
	//     * The printable characters in the Basic Latin and Latin-1 Supplement
	// character set (through \u00FF)
	//
	//     * The special characters tab (\u0009), line
	// feed (\u000A), and carriage return (\u000D)
	PrivateKey *string
	// The path for the server certificate. For more information about paths, see IAM
	// Identifiers
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the
	// IAM User Guide. This parameter is optional. If it is not included, it defaults
	// to a slash (/). This parameter allows (through its regex pattern
	// (http://wikipedia.org/wiki/regex)) a string of characters consisting of either a
	// forward slash (/) by itself or a string that must begin and end with forward
	// slashes. In addition, it can contain any ASCII character from the ! (\u0021)
	// through the DEL character (\u007F), including most punctuation characters,
	// digits, and upper and lowercased letters. If you are uploading a server
	// certificate specifically for use with Amazon CloudFront distributions, you must
	// specify a path using the path parameter. The path must begin with /cloudfront
	// and must include a trailing slash (for example, /cloudfront/test/).
	Path *string
	// The contents of the public key certificate in PEM-encoded format. The regex
	// pattern (http://wikipedia.org/wiki/regex) used to validate this parameter is a
	// string of characters consisting of the following:
	//
	//     * Any printable ASCII
	// character ranging from the space character (\u0020) through the end of the ASCII
	// character range
	//
	//     * The printable characters in the Basic Latin and Latin-1
	// Supplement character set (through \u00FF)
	//
	//     * The special characters tab
	// (\u0009), line feed (\u000A), and carriage return (\u000D)
	CertificateBody *string
	// The contents of the certificate chain. This is typically a concatenation of the
	// PEM-encoded public key certificates of the chain. The regex pattern
	// (http://wikipedia.org/wiki/regex) used to validate this parameter is a string of
	// characters consisting of the following:
	//
	//     * Any printable ASCII character
	// ranging from the space character (\u0020) through the end of the ASCII character
	// range
	//
	//     * The printable characters in the Basic Latin and Latin-1 Supplement
	// character set (through \u00FF)
	//
	//     * The special characters tab (\u0009), line
	// feed (\u000A), and carriage return (\u000D)
	CertificateChain *string
	// The name for the server certificate. Do not include the path in this value. The
	// name of the certificate cannot contain any spaces. This parameter allows
	// (through its regex pattern (http://wikipedia.org/wiki/regex)) a string of
	// characters consisting of upper and lowercase alphanumeric characters with no
	// spaces. You can also include any of the following characters: _+=,.@-
	ServerCertificateName *string
}

// Contains the response to a successful UploadServerCertificate () request.
type UploadServerCertificateOutput struct {
	// The meta information of the uploaded server certificate without its certificate
	// body, certificate chain, and private key.
	ServerCertificateMetadata *types.ServerCertificateMetadata

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpUploadServerCertificateMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpUploadServerCertificate{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpUploadServerCertificate{}, middleware.After)
}

func newServiceMetadataMiddleware_opUploadServerCertificate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iam",
		OperationName: "UploadServerCertificate",
	}
}
