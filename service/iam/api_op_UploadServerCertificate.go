// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opUploadServerCertificate = "UploadServerCertificate"

// UploadServerCertificateRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Uploads a server certificate entity for the AWS account. The server certificate
// entity includes a public key certificate, a private key, and an optional
// certificate chain, which should all be PEM-encoded.
//
// We recommend that you use AWS Certificate Manager (https://docs.aws.amazon.com/acm/)
// to provision, manage, and deploy your server certificates. With ACM you can
// request a certificate, deploy it to AWS resources, and let ACM handle certificate
// renewals for you. Certificates provided by ACM are free. For more information
// about using ACM, see the AWS Certificate Manager User Guide (https://docs.aws.amazon.com/acm/latest/userguide/).
//
// For more information about working with server certificates, see Working
// with Server Certificates (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)
// in the IAM User Guide. This topic includes a list of AWS services that can
// use the server certificates that you manage with IAM.
//
// For information about the number of server certificates you can upload, see
// Limitations on IAM Entities and Objects (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html)
// in the IAM User Guide.
//
// Because the body of the public key certificate, private key, and the certificate
// chain can be large, you should use POST rather than GET when calling UploadServerCertificate.
// For information about setting up signatures and authorization through the
// API, go to Signing AWS API Requests (https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html)
// in the AWS General Reference. For general information about using the Query
// API with IAM, go to Calling the API by Making HTTP Query Requests (https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html)
// in the IAM User Guide.
//
//    // Example sending a request using UploadServerCertificateRequest.
//    req := client.UploadServerCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/UploadServerCertificate
func (c *Client) UploadServerCertificateRequest(input *types.UploadServerCertificateInput) UploadServerCertificateRequest {
	op := &aws.Operation{
		Name:       opUploadServerCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UploadServerCertificateInput{}
	}

	req := c.newRequest(op, input, &types.UploadServerCertificateOutput{})
	return UploadServerCertificateRequest{Request: req, Input: input, Copy: c.UploadServerCertificateRequest}
}

// UploadServerCertificateRequest is the request type for the
// UploadServerCertificate API operation.
type UploadServerCertificateRequest struct {
	*aws.Request
	Input *types.UploadServerCertificateInput
	Copy  func(*types.UploadServerCertificateInput) UploadServerCertificateRequest
}

// Send marshals and sends the UploadServerCertificate API request.
func (r UploadServerCertificateRequest) Send(ctx context.Context) (*UploadServerCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UploadServerCertificateResponse{
		UploadServerCertificateOutput: r.Request.Data.(*types.UploadServerCertificateOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UploadServerCertificateResponse is the response type for the
// UploadServerCertificate API operation.
type UploadServerCertificateResponse struct {
	*types.UploadServerCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UploadServerCertificate request.
func (r *UploadServerCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
