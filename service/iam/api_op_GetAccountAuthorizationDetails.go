// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opGetAccountAuthorizationDetails = "GetAccountAuthorizationDetails"

// GetAccountAuthorizationDetailsRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Retrieves information about all IAM users, groups, roles, and policies in
// your AWS account, including their relationships to one another. Use this
// API to obtain a snapshot of the configuration of IAM permissions (users,
// groups, roles, and policies) in your account.
//
// Policies returned by this API are URL-encoded compliant with RFC 3986 (https://tools.ietf.org/html/rfc3986).
// You can use a URL decoding method to convert the policy back to plain JSON
// text. For example, if you use Java, you can use the decode method of the
// java.net.URLDecoder utility class in the Java SDK. Other languages and SDKs
// provide similar functionality.
//
// You can optionally filter the results using the Filter parameter. You can
// paginate the results using the MaxItems and Marker parameters.
//
//    // Example sending a request using GetAccountAuthorizationDetailsRequest.
//    req := client.GetAccountAuthorizationDetailsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/GetAccountAuthorizationDetails
func (c *Client) GetAccountAuthorizationDetailsRequest(input *types.GetAccountAuthorizationDetailsInput) GetAccountAuthorizationDetailsRequest {
	op := &aws.Operation{
		Name:       opGetAccountAuthorizationDetails,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.GetAccountAuthorizationDetailsInput{}
	}

	req := c.newRequest(op, input, &types.GetAccountAuthorizationDetailsOutput{})
	return GetAccountAuthorizationDetailsRequest{Request: req, Input: input, Copy: c.GetAccountAuthorizationDetailsRequest}
}

// GetAccountAuthorizationDetailsRequest is the request type for the
// GetAccountAuthorizationDetails API operation.
type GetAccountAuthorizationDetailsRequest struct {
	*aws.Request
	Input *types.GetAccountAuthorizationDetailsInput
	Copy  func(*types.GetAccountAuthorizationDetailsInput) GetAccountAuthorizationDetailsRequest
}

// Send marshals and sends the GetAccountAuthorizationDetails API request.
func (r GetAccountAuthorizationDetailsRequest) Send(ctx context.Context) (*GetAccountAuthorizationDetailsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetAccountAuthorizationDetailsResponse{
		GetAccountAuthorizationDetailsOutput: r.Request.Data.(*types.GetAccountAuthorizationDetailsOutput),
		response:                             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetAccountAuthorizationDetailsRequestPaginator returns a paginator for GetAccountAuthorizationDetails.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetAccountAuthorizationDetailsRequest(input)
//   p := iam.NewGetAccountAuthorizationDetailsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetAccountAuthorizationDetailsPaginator(req GetAccountAuthorizationDetailsRequest) GetAccountAuthorizationDetailsPaginator {
	return GetAccountAuthorizationDetailsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetAccountAuthorizationDetailsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetAccountAuthorizationDetailsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetAccountAuthorizationDetailsPaginator struct {
	aws.Pager
}

func (p *GetAccountAuthorizationDetailsPaginator) CurrentPage() *types.GetAccountAuthorizationDetailsOutput {
	return p.Pager.CurrentPage().(*types.GetAccountAuthorizationDetailsOutput)
}

// GetAccountAuthorizationDetailsResponse is the response type for the
// GetAccountAuthorizationDetails API operation.
type GetAccountAuthorizationDetailsResponse struct {
	*types.GetAccountAuthorizationDetailsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetAccountAuthorizationDetails request.
func (r *GetAccountAuthorizationDetailsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
