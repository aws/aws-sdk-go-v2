// Code generated by smithy-go-codegen DO NOT EDIT.

package iam

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Replaces the existing list of server certificate thumbprints associated with an
// OpenID Connect (OIDC) provider resource object with a new list of thumbprints.
// The list that you pass with this operation completely replaces the existing list
// of thumbprints. (The lists are not merged.) Typically, you need to update a
// thumbprint only when the identity provider's certificate changes, which occurs
// rarely. However, if the provider's certificate does change, any attempt to
// assume an IAM role that specifies the OIDC provider as a principal fails until
// the certificate thumbprint is updated. Trust for the OIDC provider is derived
// from the provider's certificate and is validated by the thumbprint. Therefore,
// it is best to limit access to the UpdateOpenIDConnectProviderThumbprint
// operation to highly privileged users.
func (c *Client) UpdateOpenIDConnectProviderThumbprint(ctx context.Context, params *UpdateOpenIDConnectProviderThumbprintInput, optFns ...func(*Options)) (*UpdateOpenIDConnectProviderThumbprintOutput, error) {
	stack := middleware.NewStack("UpdateOpenIDConnectProviderThumbprint", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpUpdateOpenIDConnectProviderThumbprintMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateOpenIDConnectProviderThumbprintValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateOpenIDConnectProviderThumbprint(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateOpenIDConnectProviderThumbprint",
			Err:           err,
		}
	}
	out := result.(*UpdateOpenIDConnectProviderThumbprintOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateOpenIDConnectProviderThumbprintInput struct {
	// The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for
	// which you want to update the thumbprint. You can get a list of OIDC provider
	// ARNs by using the ListOpenIDConnectProviders () operation. For more information
	// about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in
	// the AWS General Reference.
	OpenIDConnectProviderArn *string
	// A list of certificate thumbprints that are associated with the specified IAM
	// OpenID Connect provider. For more information, see CreateOpenIDConnectProvider
	// ().
	ThumbprintList []*string
}

type UpdateOpenIDConnectProviderThumbprintOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpUpdateOpenIDConnectProviderThumbprintMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpUpdateOpenIDConnectProviderThumbprint{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpUpdateOpenIDConnectProviderThumbprint{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateOpenIDConnectProviderThumbprint(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iam",
		OperationName: "UpdateOpenIDConnectProviderThumbprint",
	}
}
