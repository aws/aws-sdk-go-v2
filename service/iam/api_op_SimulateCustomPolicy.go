// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opSimulateCustomPolicy = "SimulateCustomPolicy"

// SimulateCustomPolicyRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Simulate how a set of IAM policies and optionally a resource-based policy
// works with a list of API operations and AWS resources to determine the policies'
// effective permissions. The policies are provided as strings.
//
// The simulation does not perform the API operations; it only checks the authorization
// to determine if the simulated policies allow or deny the operations.
//
// If you want to simulate existing policies attached to an IAM user, group,
// or role, use SimulatePrincipalPolicy instead.
//
// Context keys are variables maintained by AWS and its services that provide
// details about the context of an API query request. You can use the Condition
// element of an IAM policy to evaluate context keys. To get the list of context
// keys that the policies require for correct simulation, use GetContextKeysForCustomPolicy.
//
// If the output is long, you can use MaxItems and Marker parameters to paginate
// the results.
//
//    // Example sending a request using SimulateCustomPolicyRequest.
//    req := client.SimulateCustomPolicyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/SimulateCustomPolicy
func (c *Client) SimulateCustomPolicyRequest(input *types.SimulateCustomPolicyInput) SimulateCustomPolicyRequest {
	op := &aws.Operation{
		Name:       opSimulateCustomPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.SimulateCustomPolicyInput{}
	}

	req := c.newRequest(op, input, &types.SimulateCustomPolicyOutput{})
	return SimulateCustomPolicyRequest{Request: req, Input: input, Copy: c.SimulateCustomPolicyRequest}
}

// SimulateCustomPolicyRequest is the request type for the
// SimulateCustomPolicy API operation.
type SimulateCustomPolicyRequest struct {
	*aws.Request
	Input *types.SimulateCustomPolicyInput
	Copy  func(*types.SimulateCustomPolicyInput) SimulateCustomPolicyRequest
}

// Send marshals and sends the SimulateCustomPolicy API request.
func (r SimulateCustomPolicyRequest) Send(ctx context.Context) (*SimulateCustomPolicyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SimulateCustomPolicyResponse{
		SimulateCustomPolicyOutput: r.Request.Data.(*types.SimulateCustomPolicyOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewSimulateCustomPolicyRequestPaginator returns a paginator for SimulateCustomPolicy.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.SimulateCustomPolicyRequest(input)
//   p := iam.NewSimulateCustomPolicyRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewSimulateCustomPolicyPaginator(req SimulateCustomPolicyRequest) SimulateCustomPolicyPaginator {
	return SimulateCustomPolicyPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.SimulateCustomPolicyInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// SimulateCustomPolicyPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type SimulateCustomPolicyPaginator struct {
	aws.Pager
}

func (p *SimulateCustomPolicyPaginator) CurrentPage() *types.SimulateCustomPolicyOutput {
	return p.Pager.CurrentPage().(*types.SimulateCustomPolicyOutput)
}

// SimulateCustomPolicyResponse is the response type for the
// SimulateCustomPolicy API operation.
type SimulateCustomPolicyResponse struct {
	*types.SimulateCustomPolicyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SimulateCustomPolicy request.
func (r *SimulateCustomPolicyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
