// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opUploadSigningCertificate = "UploadSigningCertificate"

// UploadSigningCertificateRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Uploads an X.509 signing certificate and associates it with the specified
// IAM user. Some AWS services use X.509 signing certificates to validate requests
// that are signed with a corresponding private key. When you upload the certificate,
// its default status is Active.
//
// If the UserName is not specified, the IAM user name is determined implicitly
// based on the AWS access key ID used to sign the request. This operation works
// for access keys under the AWS account. Consequently, you can use this operation
// to manage AWS account root user credentials even if the AWS account has no
// associated users.
//
// Because the body of an X.509 certificate can be large, you should use POST
// rather than GET when calling UploadSigningCertificate. For information about
// setting up signatures and authorization through the API, go to Signing AWS
// API Requests (https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html)
// in the AWS General Reference. For general information about using the Query
// API with IAM, go to Making Query Requests (https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html)
// in the IAM User Guide.
//
//    // Example sending a request using UploadSigningCertificateRequest.
//    req := client.UploadSigningCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/UploadSigningCertificate
func (c *Client) UploadSigningCertificateRequest(input *types.UploadSigningCertificateInput) UploadSigningCertificateRequest {
	op := &aws.Operation{
		Name:       opUploadSigningCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UploadSigningCertificateInput{}
	}

	req := c.newRequest(op, input, &types.UploadSigningCertificateOutput{})
	return UploadSigningCertificateRequest{Request: req, Input: input, Copy: c.UploadSigningCertificateRequest}
}

// UploadSigningCertificateRequest is the request type for the
// UploadSigningCertificate API operation.
type UploadSigningCertificateRequest struct {
	*aws.Request
	Input *types.UploadSigningCertificateInput
	Copy  func(*types.UploadSigningCertificateInput) UploadSigningCertificateRequest
}

// Send marshals and sends the UploadSigningCertificate API request.
func (r UploadSigningCertificateRequest) Send(ctx context.Context) (*UploadSigningCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UploadSigningCertificateResponse{
		UploadSigningCertificateOutput: r.Request.Data.(*types.UploadSigningCertificateOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UploadSigningCertificateResponse is the response type for the
// UploadSigningCertificate API operation.
type UploadSigningCertificateResponse struct {
	*types.UploadSigningCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UploadSigningCertificate request.
func (r *UploadSigningCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
