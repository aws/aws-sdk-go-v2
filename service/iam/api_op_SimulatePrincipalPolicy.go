// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opSimulatePrincipalPolicy = "SimulatePrincipalPolicy"

// SimulatePrincipalPolicyRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Simulate how a set of IAM policies attached to an IAM entity works with a
// list of API operations and AWS resources to determine the policies' effective
// permissions. The entity can be an IAM user, group, or role. If you specify
// a user, then the simulation also includes all of the policies that are attached
// to groups that the user belongs to.
//
// You can optionally include a list of one or more additional policies specified
// as strings to include in the simulation. If you want to simulate only policies
// specified as strings, use SimulateCustomPolicy instead.
//
// You can also optionally include one resource-based policy to be evaluated
// with each of the resources included in the simulation.
//
// The simulation does not perform the API operations; it only checks the authorization
// to determine if the simulated policies allow or deny the operations.
//
// Note: This API discloses information about the permissions granted to other
// users. If you do not want users to see other user's permissions, then consider
// allowing them to use SimulateCustomPolicy instead.
//
// Context keys are variables maintained by AWS and its services that provide
// details about the context of an API query request. You can use the Condition
// element of an IAM policy to evaluate context keys. To get the list of context
// keys that the policies require for correct simulation, use GetContextKeysForPrincipalPolicy.
//
// If the output is long, you can use the MaxItems and Marker parameters to
// paginate the results.
//
//    // Example sending a request using SimulatePrincipalPolicyRequest.
//    req := client.SimulatePrincipalPolicyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/SimulatePrincipalPolicy
func (c *Client) SimulatePrincipalPolicyRequest(input *types.SimulatePrincipalPolicyInput) SimulatePrincipalPolicyRequest {
	op := &aws.Operation{
		Name:       opSimulatePrincipalPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.SimulatePrincipalPolicyInput{}
	}

	req := c.newRequest(op, input, &types.SimulatePrincipalPolicyOutput{})
	return SimulatePrincipalPolicyRequest{Request: req, Input: input, Copy: c.SimulatePrincipalPolicyRequest}
}

// SimulatePrincipalPolicyRequest is the request type for the
// SimulatePrincipalPolicy API operation.
type SimulatePrincipalPolicyRequest struct {
	*aws.Request
	Input *types.SimulatePrincipalPolicyInput
	Copy  func(*types.SimulatePrincipalPolicyInput) SimulatePrincipalPolicyRequest
}

// Send marshals and sends the SimulatePrincipalPolicy API request.
func (r SimulatePrincipalPolicyRequest) Send(ctx context.Context) (*SimulatePrincipalPolicyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SimulatePrincipalPolicyResponse{
		SimulatePrincipalPolicyOutput: r.Request.Data.(*types.SimulatePrincipalPolicyOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewSimulatePrincipalPolicyRequestPaginator returns a paginator for SimulatePrincipalPolicy.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.SimulatePrincipalPolicyRequest(input)
//   p := iam.NewSimulatePrincipalPolicyRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewSimulatePrincipalPolicyPaginator(req SimulatePrincipalPolicyRequest) SimulatePrincipalPolicyPaginator {
	return SimulatePrincipalPolicyPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.SimulatePrincipalPolicyInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// SimulatePrincipalPolicyPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type SimulatePrincipalPolicyPaginator struct {
	aws.Pager
}

func (p *SimulatePrincipalPolicyPaginator) CurrentPage() *types.SimulatePrincipalPolicyOutput {
	return p.Pager.CurrentPage().(*types.SimulatePrincipalPolicyOutput)
}

// SimulatePrincipalPolicyResponse is the response type for the
// SimulatePrincipalPolicy API operation.
type SimulatePrincipalPolicyResponse struct {
	*types.SimulatePrincipalPolicyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SimulatePrincipalPolicy request.
func (r *SimulatePrincipalPolicyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
