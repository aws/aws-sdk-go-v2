// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/query"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opUpdateServerCertificate = "UpdateServerCertificate"

// UpdateServerCertificateRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Updates the name and/or the path of the specified server certificate stored
// in IAM.
//
// For more information about working with server certificates, see Working
// with Server Certificates (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)
// in the IAM User Guide. This topic also includes a list of AWS services that
// can use the server certificates that you manage with IAM.
//
// You should understand the implications of changing a server certificate's
// path or name. For more information, see Renaming a Server Certificate (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts)
// in the IAM User Guide.
//
// The person making the request (the principal), must have permission to change
// the server certificate with the old name and the new name. For example, to
// change the certificate named ProductionCert to ProdCert, the principal must
// have a policy that allows them to update both certificates. If the principal
// has permission to update the ProductionCert group, but not the ProdCert certificate,
// then the update fails. For more information about permissions, see Access
// Management (https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html)
// in the IAM User Guide.
//
//    // Example sending a request using UpdateServerCertificateRequest.
//    req := client.UpdateServerCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/UpdateServerCertificate
func (c *Client) UpdateServerCertificateRequest(input *types.UpdateServerCertificateInput) UpdateServerCertificateRequest {
	op := &aws.Operation{
		Name:       opUpdateServerCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UpdateServerCertificateInput{}
	}

	req := c.newRequest(op, input, &types.UpdateServerCertificateOutput{})
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return UpdateServerCertificateRequest{Request: req, Input: input, Copy: c.UpdateServerCertificateRequest}
}

// UpdateServerCertificateRequest is the request type for the
// UpdateServerCertificate API operation.
type UpdateServerCertificateRequest struct {
	*aws.Request
	Input *types.UpdateServerCertificateInput
	Copy  func(*types.UpdateServerCertificateInput) UpdateServerCertificateRequest
}

// Send marshals and sends the UpdateServerCertificate API request.
func (r UpdateServerCertificateRequest) Send(ctx context.Context) (*UpdateServerCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateServerCertificateResponse{
		UpdateServerCertificateOutput: r.Request.Data.(*types.UpdateServerCertificateOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateServerCertificateResponse is the response type for the
// UpdateServerCertificate API operation.
type UpdateServerCertificateResponse struct {
	*types.UpdateServerCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateServerCertificate request.
func (r *UpdateServerCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
