// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/query"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opUpdateAccessKey = "UpdateAccessKey"

// UpdateAccessKeyRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Changes the status of the specified access key from Active to Inactive, or
// vice versa. This operation can be used to disable a user's key as part of
// a key rotation workflow.
//
// If the UserName is not specified, the user name is determined implicitly
// based on the AWS access key ID used to sign the request. This operation works
// for access keys under the AWS account. Consequently, you can use this operation
// to manage AWS account root user credentials even if the AWS account has no
// associated users.
//
// For information about rotating keys, see Managing Keys and Certificates (https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html)
// in the IAM User Guide.
//
//    // Example sending a request using UpdateAccessKeyRequest.
//    req := client.UpdateAccessKeyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/UpdateAccessKey
func (c *Client) UpdateAccessKeyRequest(input *types.UpdateAccessKeyInput) UpdateAccessKeyRequest {
	op := &aws.Operation{
		Name:       opUpdateAccessKey,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UpdateAccessKeyInput{}
	}

	req := c.newRequest(op, input, &types.UpdateAccessKeyOutput{})
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return UpdateAccessKeyRequest{Request: req, Input: input, Copy: c.UpdateAccessKeyRequest}
}

// UpdateAccessKeyRequest is the request type for the
// UpdateAccessKey API operation.
type UpdateAccessKeyRequest struct {
	*aws.Request
	Input *types.UpdateAccessKeyInput
	Copy  func(*types.UpdateAccessKeyInput) UpdateAccessKeyRequest
}

// Send marshals and sends the UpdateAccessKey API request.
func (r UpdateAccessKeyRequest) Send(ctx context.Context) (*UpdateAccessKeyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateAccessKeyResponse{
		UpdateAccessKeyOutput: r.Request.Data.(*types.UpdateAccessKeyOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateAccessKeyResponse is the response type for the
// UpdateAccessKey API operation.
type UpdateAccessKeyResponse struct {
	*types.UpdateAccessKeyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateAccessKey request.
func (r *UpdateAccessKeyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
