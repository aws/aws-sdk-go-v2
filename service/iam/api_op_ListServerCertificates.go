// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opListServerCertificates = "ListServerCertificates"

// ListServerCertificatesRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Lists the server certificates stored in IAM that have the specified path
// prefix. If none exist, the operation returns an empty list.
//
// You can paginate the results using the MaxItems and Marker parameters.
//
// For more information about working with server certificates, see Working
// with Server Certificates (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)
// in the IAM User Guide. This topic also includes a list of AWS services that
// can use the server certificates that you manage with IAM.
//
//    // Example sending a request using ListServerCertificatesRequest.
//    req := client.ListServerCertificatesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/ListServerCertificates
func (c *Client) ListServerCertificatesRequest(input *types.ListServerCertificatesInput) ListServerCertificatesRequest {
	op := &aws.Operation{
		Name:       opListServerCertificates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListServerCertificatesInput{}
	}

	req := c.newRequest(op, input, &types.ListServerCertificatesOutput{})
	return ListServerCertificatesRequest{Request: req, Input: input, Copy: c.ListServerCertificatesRequest}
}

// ListServerCertificatesRequest is the request type for the
// ListServerCertificates API operation.
type ListServerCertificatesRequest struct {
	*aws.Request
	Input *types.ListServerCertificatesInput
	Copy  func(*types.ListServerCertificatesInput) ListServerCertificatesRequest
}

// Send marshals and sends the ListServerCertificates API request.
func (r ListServerCertificatesRequest) Send(ctx context.Context) (*ListServerCertificatesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListServerCertificatesResponse{
		ListServerCertificatesOutput: r.Request.Data.(*types.ListServerCertificatesOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListServerCertificatesRequestPaginator returns a paginator for ListServerCertificates.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListServerCertificatesRequest(input)
//   p := iam.NewListServerCertificatesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListServerCertificatesPaginator(req ListServerCertificatesRequest) ListServerCertificatesPaginator {
	return ListServerCertificatesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListServerCertificatesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListServerCertificatesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListServerCertificatesPaginator struct {
	aws.Pager
}

func (p *ListServerCertificatesPaginator) CurrentPage() *types.ListServerCertificatesOutput {
	return p.Pager.CurrentPage().(*types.ListServerCertificatesOutput)
}

// ListServerCertificatesResponse is the response type for the
// ListServerCertificates API operation.
type ListServerCertificatesResponse struct {
	*types.ListServerCertificatesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListServerCertificates request.
func (r *ListServerCertificatesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
