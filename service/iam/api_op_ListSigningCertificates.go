// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opListSigningCertificates = "ListSigningCertificates"

// ListSigningCertificatesRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Returns information about the signing certificates associated with the specified
// IAM user. If none exists, the operation returns an empty list.
//
// Although each user is limited to a small number of signing certificates,
// you can still paginate the results using the MaxItems and Marker parameters.
//
// If the UserName field is not specified, the user name is determined implicitly
// based on the AWS access key ID used to sign the request for this API. This
// operation works for access keys under the AWS account. Consequently, you
// can use this operation to manage AWS account root user credentials even if
// the AWS account has no associated users.
//
//    // Example sending a request using ListSigningCertificatesRequest.
//    req := client.ListSigningCertificatesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/ListSigningCertificates
func (c *Client) ListSigningCertificatesRequest(input *types.ListSigningCertificatesInput) ListSigningCertificatesRequest {
	op := &aws.Operation{
		Name:       opListSigningCertificates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListSigningCertificatesInput{}
	}

	req := c.newRequest(op, input, &types.ListSigningCertificatesOutput{})
	return ListSigningCertificatesRequest{Request: req, Input: input, Copy: c.ListSigningCertificatesRequest}
}

// ListSigningCertificatesRequest is the request type for the
// ListSigningCertificates API operation.
type ListSigningCertificatesRequest struct {
	*aws.Request
	Input *types.ListSigningCertificatesInput
	Copy  func(*types.ListSigningCertificatesInput) ListSigningCertificatesRequest
}

// Send marshals and sends the ListSigningCertificates API request.
func (r ListSigningCertificatesRequest) Send(ctx context.Context) (*ListSigningCertificatesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListSigningCertificatesResponse{
		ListSigningCertificatesOutput: r.Request.Data.(*types.ListSigningCertificatesOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListSigningCertificatesRequestPaginator returns a paginator for ListSigningCertificates.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListSigningCertificatesRequest(input)
//   p := iam.NewListSigningCertificatesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListSigningCertificatesPaginator(req ListSigningCertificatesRequest) ListSigningCertificatesPaginator {
	return ListSigningCertificatesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListSigningCertificatesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListSigningCertificatesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListSigningCertificatesPaginator struct {
	aws.Pager
}

func (p *ListSigningCertificatesPaginator) CurrentPage() *types.ListSigningCertificatesOutput {
	return p.Pager.CurrentPage().(*types.ListSigningCertificatesOutput)
}

// ListSigningCertificatesResponse is the response type for the
// ListSigningCertificates API operation.
type ListSigningCertificatesResponse struct {
	*types.ListSigningCertificatesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListSigningCertificates request.
func (r *ListSigningCertificatesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
