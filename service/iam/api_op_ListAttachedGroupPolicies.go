// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opListAttachedGroupPolicies = "ListAttachedGroupPolicies"

// ListAttachedGroupPoliciesRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Lists all managed policies that are attached to the specified IAM group.
//
// An IAM group can also have inline policies embedded with it. To list the
// inline policies for a group, use the ListGroupPolicies API. For information
// about policies, see Managed Policies and Inline Policies (https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)
// in the IAM User Guide.
//
// You can paginate the results using the MaxItems and Marker parameters. You
// can use the PathPrefix parameter to limit the list of policies to only those
// matching the specified path prefix. If there are no policies attached to
// the specified group (or none that match the specified path prefix), the operation
// returns an empty list.
//
//    // Example sending a request using ListAttachedGroupPoliciesRequest.
//    req := client.ListAttachedGroupPoliciesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/ListAttachedGroupPolicies
func (c *Client) ListAttachedGroupPoliciesRequest(input *types.ListAttachedGroupPoliciesInput) ListAttachedGroupPoliciesRequest {
	op := &aws.Operation{
		Name:       opListAttachedGroupPolicies,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListAttachedGroupPoliciesInput{}
	}

	req := c.newRequest(op, input, &types.ListAttachedGroupPoliciesOutput{})
	return ListAttachedGroupPoliciesRequest{Request: req, Input: input, Copy: c.ListAttachedGroupPoliciesRequest}
}

// ListAttachedGroupPoliciesRequest is the request type for the
// ListAttachedGroupPolicies API operation.
type ListAttachedGroupPoliciesRequest struct {
	*aws.Request
	Input *types.ListAttachedGroupPoliciesInput
	Copy  func(*types.ListAttachedGroupPoliciesInput) ListAttachedGroupPoliciesRequest
}

// Send marshals and sends the ListAttachedGroupPolicies API request.
func (r ListAttachedGroupPoliciesRequest) Send(ctx context.Context) (*ListAttachedGroupPoliciesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListAttachedGroupPoliciesResponse{
		ListAttachedGroupPoliciesOutput: r.Request.Data.(*types.ListAttachedGroupPoliciesOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListAttachedGroupPoliciesRequestPaginator returns a paginator for ListAttachedGroupPolicies.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListAttachedGroupPoliciesRequest(input)
//   p := iam.NewListAttachedGroupPoliciesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListAttachedGroupPoliciesPaginator(req ListAttachedGroupPoliciesRequest) ListAttachedGroupPoliciesPaginator {
	return ListAttachedGroupPoliciesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListAttachedGroupPoliciesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListAttachedGroupPoliciesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListAttachedGroupPoliciesPaginator struct {
	aws.Pager
}

func (p *ListAttachedGroupPoliciesPaginator) CurrentPage() *types.ListAttachedGroupPoliciesOutput {
	return p.Pager.CurrentPage().(*types.ListAttachedGroupPoliciesOutput)
}

// ListAttachedGroupPoliciesResponse is the response type for the
// ListAttachedGroupPolicies API operation.
type ListAttachedGroupPoliciesResponse struct {
	*types.ListAttachedGroupPoliciesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListAttachedGroupPolicies request.
func (r *ListAttachedGroupPoliciesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
