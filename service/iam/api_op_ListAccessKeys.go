// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
)

const opListAccessKeys = "ListAccessKeys"

// ListAccessKeysRequest returns a request value for making API operation for
// AWS Identity and Access Management.
//
// Returns information about the access key IDs associated with the specified
// IAM user. If there is none, the operation returns an empty list.
//
// Although each user is limited to a small number of keys, you can still paginate
// the results using the MaxItems and Marker parameters.
//
// If the UserName field is not specified, the user name is determined implicitly
// based on the AWS access key ID used to sign the request. This operation works
// for access keys under the AWS account. Consequently, you can use this operation
// to manage AWS account root user credentials even if the AWS account has no
// associated users.
//
// To ensure the security of your AWS account, the secret access key is accessible
// only during key and user creation.
//
//    // Example sending a request using ListAccessKeysRequest.
//    req := client.ListAccessKeysRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iam-2010-05-08/ListAccessKeys
func (c *Client) ListAccessKeysRequest(input *types.ListAccessKeysInput) ListAccessKeysRequest {
	op := &aws.Operation{
		Name:       opListAccessKeys,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListAccessKeysInput{}
	}

	req := c.newRequest(op, input, &types.ListAccessKeysOutput{})
	return ListAccessKeysRequest{Request: req, Input: input, Copy: c.ListAccessKeysRequest}
}

// ListAccessKeysRequest is the request type for the
// ListAccessKeys API operation.
type ListAccessKeysRequest struct {
	*aws.Request
	Input *types.ListAccessKeysInput
	Copy  func(*types.ListAccessKeysInput) ListAccessKeysRequest
}

// Send marshals and sends the ListAccessKeys API request.
func (r ListAccessKeysRequest) Send(ctx context.Context) (*ListAccessKeysResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListAccessKeysResponse{
		ListAccessKeysOutput: r.Request.Data.(*types.ListAccessKeysOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListAccessKeysRequestPaginator returns a paginator for ListAccessKeys.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListAccessKeysRequest(input)
//   p := iam.NewListAccessKeysRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListAccessKeysPaginator(req ListAccessKeysRequest) ListAccessKeysPaginator {
	return ListAccessKeysPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListAccessKeysInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListAccessKeysPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListAccessKeysPaginator struct {
	aws.Pager
}

func (p *ListAccessKeysPaginator) CurrentPage() *types.ListAccessKeysOutput {
	return p.Pager.CurrentPage().(*types.ListAccessKeysOutput)
}

// ListAccessKeysResponse is the response type for the
// ListAccessKeys API operation.
type ListAccessKeysResponse struct {
	*types.ListAccessKeysOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListAccessKeys request.
func (r *ListAccessKeysResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
