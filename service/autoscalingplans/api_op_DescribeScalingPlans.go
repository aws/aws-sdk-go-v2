// Code generated by smithy-go-codegen DO NOT EDIT.

package autoscalingplans

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/autoscalingplans/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes one or more of your scaling plans.
func (c *Client) DescribeScalingPlans(ctx context.Context, params *DescribeScalingPlansInput, optFns ...func(*Options)) (*DescribeScalingPlansOutput, error) {
	stack := middleware.NewStack("DescribeScalingPlans", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeScalingPlansMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeScalingPlans(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeScalingPlans",
			Err:           err,
		}
	}
	out := result.(*DescribeScalingPlansOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeScalingPlansInput struct {
	// The version number of the scaling plan. If you specify a scaling plan version,
	// you must also specify a scaling plan name.
	ScalingPlanVersion *int64
	// The sources for the applications (up to 10). If you specify scaling plan names,
	// you cannot specify application sources.
	ApplicationSources []*types.ApplicationSource
	// The names of the scaling plans (up to 10). If you specify application sources,
	// you cannot specify scaling plan names.
	ScalingPlanNames []*string
	// The maximum number of scalable resources to return. This value can be between 1
	// and 50. The default value is 50.
	MaxResults *int32
	// The token for the next set of results.
	NextToken *string
}

type DescribeScalingPlansOutput struct {
	// The token required to get the next set of results. This value is null if there
	// are no more results to return.
	NextToken *string
	// Information about the scaling plans.
	ScalingPlans []*types.ScalingPlan

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeScalingPlansMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeScalingPlans{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeScalingPlans{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeScalingPlans(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "autoscaling-plans",
		OperationName: "DescribeScalingPlans",
	}
}
