// Code generated by smithy-go-codegen DO NOT EDIT.

package autoscalingplans

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/autoscalingplans/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves the forecast data for a scalable resource. Capacity forecasts are
// represented as predicted values, or data points, that are calculated using
// historical data points from a specified CloudWatch load metric. Data points are
// available for up to 56 days.  </p>
func (c *Client) GetScalingPlanResourceForecastData(ctx context.Context, params *GetScalingPlanResourceForecastDataInput, optFns ...func(*Options)) (*GetScalingPlanResourceForecastDataOutput, error) {
	stack := middleware.NewStack("GetScalingPlanResourceForecastData", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetScalingPlanResourceForecastDataMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetScalingPlanResourceForecastDataValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetScalingPlanResourceForecastData(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetScalingPlanResourceForecastData",
			Err:           err,
		}
	}
	out := result.(*GetScalingPlanResourceForecastDataOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetScalingPlanResourceForecastDataInput struct {
	// The name of the scaling plan.
	ScalingPlanName *string
	// The scalable dimension for the resource.
	ScalableDimension types.ScalableDimension
	// The inclusive start time of the time range for the forecast data to get. The
	// date and time can be at most 56 days before the current date and time.
	StartTime *time.Time
	// The version number of the scaling plan.
	ScalingPlanVersion *int64
	// The type of forecast data to get.
	//
	//     * LoadForecast: The load metric
	// forecast.
	//
	//     * CapacityForecast: The capacity forecast.
	//
	//     *
	// ScheduledActionMinCapacity: The minimum capacity for each scheduled scaling
	// action. This data is calculated as the larger of two values: the capacity
	// forecast or the minimum capacity in the scaling instruction.
	//
	//     *
	// ScheduledActionMaxCapacity: The maximum capacity for each scheduled scaling
	// action. The calculation used is determined by the predictive scaling maximum
	// capacity behavior setting in the scaling instruction.
	ForecastDataType types.ForecastDataType
	// The exclusive end time of the time range for the forecast data to get. The
	// maximum time duration between the start and end time is seven days. Although
	// this parameter can accept a date and time that is more than two days in the
	// future, the availability of forecast data has limits. AWS Auto Scaling only
	// issues forecasts for periods of two days in advance.
	EndTime *time.Time
	// The namespace of the AWS service.
	ServiceNamespace types.ServiceNamespace
	// The ID of the resource. This string consists of the resource type and unique
	// identifier.
	//
	//     * Auto Scaling group - The resource type is autoScalingGroup
	// and the unique identifier is the name of the Auto Scaling group. Example:
	// autoScalingGroup/my-asg.
	//
	//     * ECS service - The resource type is service and
	// the unique identifier is the cluster name and service name. Example:
	// service/default/sample-webapp.
	//
	//     * Spot Fleet request - The resource type is
	// spot-fleet-request and the unique identifier is the Spot Fleet request ID.
	// Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.
	//
	//     *
	// DynamoDB table - The resource type is table and the unique identifier is the
	// resource ID. Example: table/my-table.
	//
	//     * DynamoDB global secondary index -
	// The resource type is index and the unique identifier is the resource ID.
	// Example: table/my-table/index/my-table-index.
	//
	//     * Aurora DB cluster - The
	// resource type is cluster and the unique identifier is the cluster name. Example:
	// cluster:my-db-cluster.
	ResourceId *string
}

type GetScalingPlanResourceForecastDataOutput struct {
	// The data points to return.
	Datapoints []*types.Datapoint

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetScalingPlanResourceForecastDataMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetScalingPlanResourceForecastData{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetScalingPlanResourceForecastData{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetScalingPlanResourceForecastData(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "autoscaling-plans",
		OperationName: "GetScalingPlanResourceForecastData",
	}
}
