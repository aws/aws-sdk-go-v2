// Code generated by smithy-go-codegen DO NOT EDIT.

package sqs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Deletes the messages in a queue specified by the QueueURL parameter.
// <important> <p>When you use the <code>PurgeQueue</code> action, you can't
// retrieve any messages deleted from a queue.</p> <p>The message deletion process
// takes up to 60 seconds. We recommend waiting for 60 seconds regardless of your
// queue's size. </p> </important> <p>Messages sent to the queue <i>before</i> you
// call <code>PurgeQueue</code> might be received but are deleted within the next
// minute.</p> <p>Messages sent to the queue <i>after</i> you call
// <code>PurgeQueue</code> might be deleted while the queue is being purged.</p>
func (c *Client) PurgeQueue(ctx context.Context, params *PurgeQueueInput, optFns ...func(*Options)) (*PurgeQueueOutput, error) {
	stack := middleware.NewStack("PurgeQueue", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpPurgeQueueMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPurgeQueueValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPurgeQueue(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PurgeQueue",
			Err:           err,
		}
	}
	out := result.(*PurgeQueueOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type PurgeQueueInput struct {
	// The URL of the queue from which the PurgeQueue action deletes messages. Queue
	// URLs and names are case-sensitive.
	QueueUrl *string
}

type PurgeQueueOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpPurgeQueueMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpPurgeQueue{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpPurgeQueue{}, middleware.After)
}

func newServiceMetadataMiddleware_opPurgeQueue(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sqs",
		OperationName: "PurgeQueue",
	}
}
