// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package sqsiface provides an interface to enable mocking the Amazon Simple Queue Service service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package sqsiface

import (
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/aws/aws-sdk-go-v2/service/sqs/types"
)

// ClientAPI provides an interface to enable mocking the
// sqs.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon SQS.
//    func myFunc(svc sqsiface.ClientAPI) bool {
//        // Make svc.AddPermission request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := sqs.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        sqsiface.ClientPI
//    }
//    func (m *mockClientClient) AddPermission(input *types.AddPermissionInput) (*types.AddPermissionOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	AddPermissionRequest(*types.AddPermissionInput) sqs.AddPermissionRequest

	ChangeMessageVisibilityRequest(*types.ChangeMessageVisibilityInput) sqs.ChangeMessageVisibilityRequest

	ChangeMessageVisibilityBatchRequest(*types.ChangeMessageVisibilityBatchInput) sqs.ChangeMessageVisibilityBatchRequest

	CreateQueueRequest(*types.CreateQueueInput) sqs.CreateQueueRequest

	DeleteMessageRequest(*types.DeleteMessageInput) sqs.DeleteMessageRequest

	DeleteMessageBatchRequest(*types.DeleteMessageBatchInput) sqs.DeleteMessageBatchRequest

	DeleteQueueRequest(*types.DeleteQueueInput) sqs.DeleteQueueRequest

	GetQueueAttributesRequest(*types.GetQueueAttributesInput) sqs.GetQueueAttributesRequest

	GetQueueUrlRequest(*types.GetQueueUrlInput) sqs.GetQueueUrlRequest

	ListDeadLetterSourceQueuesRequest(*types.ListDeadLetterSourceQueuesInput) sqs.ListDeadLetterSourceQueuesRequest

	ListQueueTagsRequest(*types.ListQueueTagsInput) sqs.ListQueueTagsRequest

	ListQueuesRequest(*types.ListQueuesInput) sqs.ListQueuesRequest

	PurgeQueueRequest(*types.PurgeQueueInput) sqs.PurgeQueueRequest

	ReceiveMessageRequest(*types.ReceiveMessageInput) sqs.ReceiveMessageRequest

	RemovePermissionRequest(*types.RemovePermissionInput) sqs.RemovePermissionRequest

	SendMessageRequest(*types.SendMessageInput) sqs.SendMessageRequest

	SendMessageBatchRequest(*types.SendMessageBatchInput) sqs.SendMessageBatchRequest

	SetQueueAttributesRequest(*types.SetQueueAttributesInput) sqs.SetQueueAttributesRequest

	TagQueueRequest(*types.TagQueueInput) sqs.TagQueueRequest

	UntagQueueRequest(*types.UntagQueueInput) sqs.UntagQueueRequest
}

var _ ClientAPI = (*sqs.Client)(nil)
