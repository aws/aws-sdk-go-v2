// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package sqsiface provides an interface to enable mocking the Amazon Simple Queue Service service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package sqsiface

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
)

// SQSAPI provides an interface to enable mocking the
// sqs.SQS service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon Simple Queue Service.
//    func myFunc(svc sqsiface.SQSAPI) bool {
//        // Make svc.AddPermission request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := sqs.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockSQSClient struct {
//        sqsiface.SQSAPI
//    }
//    func (m *mockSQSClient) AddPermission(input *sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockSQSClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type SQSAPI interface {
	AddPermission(*sqs.AddPermissionInput) (*sqs.AddPermissionOutput, error)
	AddPermissionWithContext(aws.Context, *sqs.AddPermissionInput, ...aws.Option) (*sqs.AddPermissionOutput, error)
	AddPermissionRequest(*sqs.AddPermissionInput) (*aws.Request, *sqs.AddPermissionOutput)

	ChangeMessageVisibility(*sqs.ChangeMessageVisibilityInput) (*sqs.ChangeMessageVisibilityOutput, error)
	ChangeMessageVisibilityWithContext(aws.Context, *sqs.ChangeMessageVisibilityInput, ...aws.Option) (*sqs.ChangeMessageVisibilityOutput, error)
	ChangeMessageVisibilityRequest(*sqs.ChangeMessageVisibilityInput) (*aws.Request, *sqs.ChangeMessageVisibilityOutput)

	ChangeMessageVisibilityBatch(*sqs.ChangeMessageVisibilityBatchInput) (*sqs.ChangeMessageVisibilityBatchOutput, error)
	ChangeMessageVisibilityBatchWithContext(aws.Context, *sqs.ChangeMessageVisibilityBatchInput, ...aws.Option) (*sqs.ChangeMessageVisibilityBatchOutput, error)
	ChangeMessageVisibilityBatchRequest(*sqs.ChangeMessageVisibilityBatchInput) (*aws.Request, *sqs.ChangeMessageVisibilityBatchOutput)

	CreateQueue(*sqs.CreateQueueInput) (*sqs.CreateQueueOutput, error)
	CreateQueueWithContext(aws.Context, *sqs.CreateQueueInput, ...aws.Option) (*sqs.CreateQueueOutput, error)
	CreateQueueRequest(*sqs.CreateQueueInput) (*aws.Request, *sqs.CreateQueueOutput)

	DeleteMessage(*sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error)
	DeleteMessageWithContext(aws.Context, *sqs.DeleteMessageInput, ...aws.Option) (*sqs.DeleteMessageOutput, error)
	DeleteMessageRequest(*sqs.DeleteMessageInput) (*aws.Request, *sqs.DeleteMessageOutput)

	DeleteMessageBatch(*sqs.DeleteMessageBatchInput) (*sqs.DeleteMessageBatchOutput, error)
	DeleteMessageBatchWithContext(aws.Context, *sqs.DeleteMessageBatchInput, ...aws.Option) (*sqs.DeleteMessageBatchOutput, error)
	DeleteMessageBatchRequest(*sqs.DeleteMessageBatchInput) (*aws.Request, *sqs.DeleteMessageBatchOutput)

	DeleteQueue(*sqs.DeleteQueueInput) (*sqs.DeleteQueueOutput, error)
	DeleteQueueWithContext(aws.Context, *sqs.DeleteQueueInput, ...aws.Option) (*sqs.DeleteQueueOutput, error)
	DeleteQueueRequest(*sqs.DeleteQueueInput) (*aws.Request, *sqs.DeleteQueueOutput)

	GetQueueAttributes(*sqs.GetQueueAttributesInput) (*sqs.GetQueueAttributesOutput, error)
	GetQueueAttributesWithContext(aws.Context, *sqs.GetQueueAttributesInput, ...aws.Option) (*sqs.GetQueueAttributesOutput, error)
	GetQueueAttributesRequest(*sqs.GetQueueAttributesInput) (*aws.Request, *sqs.GetQueueAttributesOutput)

	GetQueueUrl(*sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error)
	GetQueueUrlWithContext(aws.Context, *sqs.GetQueueUrlInput, ...aws.Option) (*sqs.GetQueueUrlOutput, error)
	GetQueueUrlRequest(*sqs.GetQueueUrlInput) (*aws.Request, *sqs.GetQueueUrlOutput)

	ListDeadLetterSourceQueues(*sqs.ListDeadLetterSourceQueuesInput) (*sqs.ListDeadLetterSourceQueuesOutput, error)
	ListDeadLetterSourceQueuesWithContext(aws.Context, *sqs.ListDeadLetterSourceQueuesInput, ...aws.Option) (*sqs.ListDeadLetterSourceQueuesOutput, error)
	ListDeadLetterSourceQueuesRequest(*sqs.ListDeadLetterSourceQueuesInput) (*aws.Request, *sqs.ListDeadLetterSourceQueuesOutput)

	ListQueues(*sqs.ListQueuesInput) (*sqs.ListQueuesOutput, error)
	ListQueuesWithContext(aws.Context, *sqs.ListQueuesInput, ...aws.Option) (*sqs.ListQueuesOutput, error)
	ListQueuesRequest(*sqs.ListQueuesInput) (*aws.Request, *sqs.ListQueuesOutput)

	PurgeQueue(*sqs.PurgeQueueInput) (*sqs.PurgeQueueOutput, error)
	PurgeQueueWithContext(aws.Context, *sqs.PurgeQueueInput, ...aws.Option) (*sqs.PurgeQueueOutput, error)
	PurgeQueueRequest(*sqs.PurgeQueueInput) (*aws.Request, *sqs.PurgeQueueOutput)

	ReceiveMessage(*sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error)
	ReceiveMessageWithContext(aws.Context, *sqs.ReceiveMessageInput, ...aws.Option) (*sqs.ReceiveMessageOutput, error)
	ReceiveMessageRequest(*sqs.ReceiveMessageInput) (*aws.Request, *sqs.ReceiveMessageOutput)

	RemovePermission(*sqs.RemovePermissionInput) (*sqs.RemovePermissionOutput, error)
	RemovePermissionWithContext(aws.Context, *sqs.RemovePermissionInput, ...aws.Option) (*sqs.RemovePermissionOutput, error)
	RemovePermissionRequest(*sqs.RemovePermissionInput) (*aws.Request, *sqs.RemovePermissionOutput)

	SendMessage(*sqs.SendMessageInput) (*sqs.SendMessageOutput, error)
	SendMessageWithContext(aws.Context, *sqs.SendMessageInput, ...aws.Option) (*sqs.SendMessageOutput, error)
	SendMessageRequest(*sqs.SendMessageInput) (*aws.Request, *sqs.SendMessageOutput)

	SendMessageBatch(*sqs.SendMessageBatchInput) (*sqs.SendMessageBatchOutput, error)
	SendMessageBatchWithContext(aws.Context, *sqs.SendMessageBatchInput, ...aws.Option) (*sqs.SendMessageBatchOutput, error)
	SendMessageBatchRequest(*sqs.SendMessageBatchInput) (*aws.Request, *sqs.SendMessageBatchOutput)

	SetQueueAttributes(*sqs.SetQueueAttributesInput) (*sqs.SetQueueAttributesOutput, error)
	SetQueueAttributesWithContext(aws.Context, *sqs.SetQueueAttributesInput, ...aws.Option) (*sqs.SetQueueAttributesOutput, error)
	SetQueueAttributesRequest(*sqs.SetQueueAttributesInput) (*aws.Request, *sqs.SetQueueAttributesOutput)
}

var _ SQSAPI = (*sqs.SQS)(nil)
