// Code generated by smithy-go-codegen DO NOT EDIT.

package sqs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Add cost allocation tags to the specified Amazon SQS queue. For an overview, see
// Tagging Your Amazon SQS Queues
// (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html)
// in the Amazon Simple Queue Service Developer Guide.  <p>When you use queue tags,
// keep the following guidelines in mind:</p> <ul> <li> <p>Adding more than 50 tags
// to a queue isn't recommended.</p> </li> <li> <p>Tags don't have any semantic
// meaning. Amazon SQS interprets tags as character strings.</p> </li> <li> <p>Tags
// are case-sensitive.</p> </li> <li> <p>A new tag with a key identical to that of
// an existing tag overwrites the existing tag.</p> </li> </ul> <p>For a full list
// of tag restrictions, see <a
// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues">Limits
// Related to Queues</a> in the <i>Amazon Simple Queue Service Developer
// Guide</i>.</p> <note> <p>Cross-account permissions don't apply to this action.
// For more information, see <a
// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
// Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon Simple
// Queue Service Developer Guide</i>.</p> </note>
func (c *Client) TagQueue(ctx context.Context, params *TagQueueInput, optFns ...func(*Options)) (*TagQueueOutput, error) {
	stack := middleware.NewStack("TagQueue", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpTagQueueMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpTagQueueValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opTagQueue(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "TagQueue",
			Err:           err,
		}
	}
	out := result.(*TagQueueOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type TagQueueInput struct {
	// The list of tags to be added to the specified queue.
	Tags map[string]*string
	// The URL of the queue.
	QueueUrl *string
}

type TagQueueOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpTagQueueMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpTagQueue{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpTagQueue{}, middleware.After)
}

func newServiceMetadataMiddleware_opTagQueue(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sqs",
		OperationName: "TagQueue",
	}
}
