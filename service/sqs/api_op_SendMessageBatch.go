// Code generated by smithy-go-codegen DO NOT EDIT.

package sqs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sqs/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Delivers up to ten messages to the specified queue. This is a batch version of
// SendMessage (). For a FIFO queue, multiple messages within a single batch are
// enqueued in the order they are sent. The result of sending each message is
// reported individually in the response. Because the batch request can result in a
// combination of successful and unsuccessful actions, you should check for batch
// errors even when the call returns an HTTP status code of 200. The maximum
// allowed individual message size and the maximum total payload size (the sum of
// the individual lengths of all of the batched messages) are both 256 KB (262,144
// bytes). A message can include only XML, JSON, and unformatted text. The
// following Unicode characters are allowed: #x9 | #xA | #xD | #x20 to #xD7FF |
// #xE000 to #xFFFD | #x10000 to #x10FFFF Any characters not included in this list
// will be rejected. For more information, see the W3C specification for characters
// (http://www.w3.org/TR/REC-xml/#charsets). If you don't specify the DelaySeconds
// parameter for an entry, Amazon SQS uses the default value for the queue. Some
// actions take lists of parameters. These lists are specified using the param.n
// notation. Values of n are integers starting from 1. For example, a parameter
// list with two elements looks like this: &AttributeName.1=first
//
// &AttributeName.2=second
func (c *Client) SendMessageBatch(ctx context.Context, params *SendMessageBatchInput, optFns ...func(*Options)) (*SendMessageBatchOutput, error) {
	stack := middleware.NewStack("SendMessageBatch", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpSendMessageBatchMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSendMessageBatchValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSendMessageBatch(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SendMessageBatch",
			Err:           err,
		}
	}
	out := result.(*SendMessageBatchOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type SendMessageBatchInput struct {
	// A list of SendMessageBatchRequestEntry () items.
	Entries []*types.SendMessageBatchRequestEntry
	// The URL of the Amazon SQS queue to which batched messages are sent. Queue URLs
	// and names are case-sensitive.
	QueueUrl *string
}

// For each message in the batch, the response contains a
// SendMessageBatchResultEntry () tag if the message succeeds or a
// BatchResultErrorEntry () tag if the message fails.
type SendMessageBatchOutput struct {
	// A list of SendMessageBatchResultEntry () items.
	Successful []*types.SendMessageBatchResultEntry
	// A list of BatchResultErrorEntry () items with error details about each message
	// that can't be enqueued.
	Failed []*types.BatchResultErrorEntry

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpSendMessageBatchMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpSendMessageBatch{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpSendMessageBatch{}, middleware.After)
}

func newServiceMetadataMiddleware_opSendMessageBatch(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sqs",
		OperationName: "SendMessageBatch",
	}
}
