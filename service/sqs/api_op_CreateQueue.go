// Code generated by smithy-go-codegen DO NOT EDIT.

package sqs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new standard or FIFO queue. You can pass one or more attributes in the
// request. Keep the following in mind:
//
//     * If you don't specify the FifoQueue
// attribute, Amazon SQS creates a standard queue. You can't change the queue type
// after you create it and you can't convert an existing standard queue into a FIFO
// queue. You must either create a new FIFO queue for your application or delete
// your existing standard queue and recreate it as a FIFO queue. For more
// information, see Moving From a Standard Queue to a FIFO Queue
// (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving)
// in the Amazon Simple Queue Service Developer Guide.
//
//     * If you don't provide
// a value for an attribute, the queue is created with the default value for the
// attribute.
//
//     * If you delete a queue, you must wait at least 60 seconds
// before creating a queue with the same name.
//
//     <p>To successfully create a new
// queue, you must provide a queue name that adheres to the <a
// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html">limits
// related to queues</a> and is unique within the scope of your queues.</p> <note>
// <p>After you create a queue, you must wait at least one second after the queue
// is created to be able to use the queue.</p> </note> <p>To get the queue URL, use
// the <code> <a>GetQueueUrl</a> </code> action. <code> <a>GetQueueUrl</a> </code>
// requires only the <code>QueueName</code> parameter. be aware of existing queue
// names:</p> <ul> <li> <p>If you provide the name of an existing queue along with
// the exact names and values of all the queue's attributes,
// <code>CreateQueue</code> returns the queue URL for the existing queue.</p> </li>
// <li> <p>If the queue name, attribute names, or attribute values don't match an
// existing queue, <code>CreateQueue</code> returns an error.</p> </li> </ul>
// <p>Some actions take lists of parameters. These lists are specified using the
// <code>param.n</code> notation. Values of <code>n</code> are integers starting
// from 1. For example, a parameter list with two elements looks like this:</p> <p>
// <code>&AttributeName.1=first</code> </p> <p>
// <code>&AttributeName.2=second</code> </p> <note> <p>Cross-account permissions
// don't apply to this action. For more information, see <a
// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
// Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon Simple
// Queue Service Developer Guide</i>.</p> </note>
func (c *Client) CreateQueue(ctx context.Context, params *CreateQueueInput, optFns ...func(*Options)) (*CreateQueueOutput, error) {
	stack := middleware.NewStack("CreateQueue", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateQueueMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateQueueValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateQueue(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateQueue",
			Err:           err,
		}
	}
	out := result.(*CreateQueueOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type CreateQueueInput struct {
	// Add cost allocation tags to the specified Amazon SQS queue. For an overview, see
	// Tagging Your Amazon SQS Queues
	// (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html)
	// in the Amazon Simple Queue Service Developer Guide.  <p>When you use queue tags,
	// keep the following guidelines in mind:</p> <ul> <li> <p>Adding more than 50 tags
	// to a queue isn't recommended.</p> </li> <li> <p>Tags don't have any semantic
	// meaning. Amazon SQS interprets tags as character strings.</p> </li> <li> <p>Tags
	// are case-sensitive.</p> </li> <li> <p>A new tag with a key identical to that of
	// an existing tag overwrites the existing tag.</p> </li> </ul> <p>For a full list
	// of tag restrictions, see <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues">Limits
	// Related to Queues</a> in the <i>Amazon Simple Queue Service Developer
	// Guide</i>.</p> <note> <p>To be able to tag a queue on creation, you must have
	// the <code>sqs:CreateQueue</code> and <code>sqs:TagQueue</code> permissions.</p>
	// <p>Cross-account permissions don't apply to this action. For more information,
	// see <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant
	// Cross-Account Permissions to a Role and a User Name</a> in the <i>Amazon Simple
	// Queue Service Developer Guide</i>.</p> </note>
	Tags map[string]*string
	// The name of the new queue. The following limits apply to this name:
	//
	//     * A
	// queue name can have up to 80 characters.
	//
	//     * Valid values: alphanumeric
	// characters, hyphens (-), and underscores (_).
	//
	//     * A FIFO queue name must end
	// with the .fifo suffix.
	//
	// Queue URLs and names are case-sensitive.
	QueueName *string
	// A map of attributes with their corresponding values. The following lists the
	// names, descriptions, and values of the special request parameters that the
	// CreateQueue action uses:
	//
	//     * DelaySeconds – The length of time, in seconds,
	// for which the delivery of all messages in the queue is delayed. Valid values: An
	// integer from 0 to 900 seconds (15 minutes). Default: 0.
	//
	//     *
	// MaximumMessageSize – The limit of how many bytes a message can contain before
	// Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to
	// 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).
	//
	//     *
	// MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS
	// retains a message. Valid values: An integer from 60 seconds (1 minute) to
	// 1,209,600 seconds (14 days). Default: 345,600 (4 days).
	//
	//     * Policy – The
	// queue's policy. A valid AWS policy. For more information about policy structure,
	// see Overview of AWS IAM Policies
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html) in the
	// Amazon IAM User Guide.
	//
	//     * ReceiveMessageWaitTimeSeconds – The length of
	// time, in seconds, for which a ReceiveMessage () action waits for a message to
	// arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.
	//
	//     *
	// RedrivePolicy – The string that includes the parameters for the dead-letter
	// queue functionality of the source queue as a JSON object. For more information
	// about the redrive policy and dead-letter queues, see Using Amazon SQS
	// Dead-Letter Queues
	// (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html)
	// in the Amazon Simple Queue Service Developer Guide.
	//
	//         *
	// deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to
	// which Amazon SQS moves messages after the value of maxReceiveCount is
	// exceeded.
	//
	//         * maxReceiveCount – The number of times a message is
	// delivered to the source queue before being moved to the dead-letter queue. When
	// the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon
	// SQS moves the message to the dead-letter-queue.
	//
	//     The dead-letter queue of a
	// FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a
	// standard queue must also be a standard queue.
	//
	//     * VisibilityTimeout – The
	// visibility timeout for the queue, in seconds. Valid values: An integer from 0 to
	// 43,200 (12 hours). Default: 30. For more information about the visibility
	// timeout, see Visibility Timeout
	// (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html)
	// in the Amazon Simple Queue Service Developer Guide.
	//
	//     <p>The following
	// attributes apply only to <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>
	// <ul> <li> <p> <code>KmsMasterKeyId</code> – The ID of an AWS-managed customer
	// master key (CMK) for Amazon SQS or a custom CMK. For more information, see <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key
	// Terms</a>. While the alias of the AWS-managed CMK for Amazon SQS is always
	// <code>alias/aws/sqs</code>, the alias of a custom CMK can, for example, be
	// <code>alias/<i>MyAlias</i> </code>. For more examples, see <a
	// href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a>
	// in the <i>AWS Key Management Service API Reference</i>. </p> </li> <li> <p>
	// <code>KmsDataKeyReusePeriodSeconds</code> – The length of time, in seconds, for
	// which Amazon SQS can reuse a <a
	// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys">data
	// key</a> to encrypt or decrypt messages before calling AWS KMS again. An integer
	// representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24
	// hours). Default: 300 (5 minutes). A shorter time period provides better security
	// but results in more calls to KMS which might incur charges after Free Tier. For
	// more information, see <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How
	// Does the Data Key Reuse Period Work?</a>. </p> </li> </ul> <p>The following
	// attributes apply only to <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO
	// (first-in-first-out) queues</a>:</p> <ul> <li> <p> <code>FifoQueue</code> –
	// Designates a queue as FIFO. Valid values: <code>true</code>, <code>false</code>.
	// If you don't specify the <code>FifoQueue</code> attribute, Amazon SQS creates a
	// standard queue. You can provide this attribute only during queue creation. You
	// can't change it for an existing queue. When you set this attribute, you must
	// also provide the <code>MessageGroupId</code> for your messages explicitly.</p>
	// <p>For more information, see <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-understanding-logic">FIFO
	// Queue Logic</a> in the <i>Amazon Simple Queue Service Developer Guide</i>.</p>
	// </li> <li> <p> <code>ContentBasedDeduplication</code> – Enables content-based
	// deduplication. Valid values: <code>true</code>, <code>false</code>. For more
	// information, see <a
	// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-exactly-once-processing">Exactly-Once
	// Processing</a> in the <i>Amazon Simple Queue Service Developer Guide</i>. </p>
	// <ul> <li> <p>Every message must have a unique
	// <code>MessageDeduplicationId</code>,</p> <ul> <li> <p>You may provide a
	// <code>MessageDeduplicationId</code> explicitly.</p> </li> <li> <p>If you aren't
	// able to provide a <code>MessageDeduplicationId</code> and you enable
	// <code>ContentBasedDeduplication</code> for your queue, Amazon SQS uses a SHA-256
	// hash to generate the <code>MessageDeduplicationId</code> using the body of the
	// message (but not the attributes of the message). </p> </li> <li> <p>If you don't
	// provide a <code>MessageDeduplicationId</code> and the queue doesn't have
	// <code>ContentBasedDeduplication</code> set, the action fails with an error.</p>
	// </li> <li> <p>If the queue has <code>ContentBasedDeduplication</code> set, your
	// <code>MessageDeduplicationId</code> overrides the generated one.</p> </li> </ul>
	// </li> <li> <p>When <code>ContentBasedDeduplication</code> is in effect, messages
	// with identical content sent within the deduplication interval are treated as
	// duplicates and only one copy of the message is delivered.</p> </li> <li> <p>If
	// you send one message with <code>ContentBasedDeduplication</code> enabled and
	// then another message with a <code>MessageDeduplicationId</code> that is the same
	// as the one generated for the first <code>MessageDeduplicationId</code>, the two
	// messages are treated as duplicates and only one copy of the message is
	// delivered. </p> </li> </ul> </li> </ul>
	Attributes map[string]*string
}

// Returns the QueueUrl attribute of the created queue.
type CreateQueueOutput struct {
	// The URL of the created Amazon SQS queue.
	QueueUrl *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateQueueMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateQueue{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateQueue{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateQueue(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sqs",
		OperationName: "CreateQueue",
	}
}
