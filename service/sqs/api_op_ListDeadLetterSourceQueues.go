// Code generated by smithy-go-codegen DO NOT EDIT.

package sqs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a list of your queues that have the RedrivePolicy queue attribute
// configured with a dead-letter queue.  <p>For more information about using
// dead-letter queues, see <a
// href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using
// Amazon SQS Dead-Letter Queues</a> in the <i>Amazon Simple Queue Service
// Developer Guide</i>.</p>
func (c *Client) ListDeadLetterSourceQueues(ctx context.Context, params *ListDeadLetterSourceQueuesInput, optFns ...func(*Options)) (*ListDeadLetterSourceQueuesOutput, error) {
	stack := middleware.NewStack("ListDeadLetterSourceQueues", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpListDeadLetterSourceQueuesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListDeadLetterSourceQueuesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListDeadLetterSourceQueues(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListDeadLetterSourceQueues",
			Err:           err,
		}
	}
	out := result.(*ListDeadLetterSourceQueuesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type ListDeadLetterSourceQueuesInput struct {
	// The URL of a dead-letter queue. Queue URLs and names are case-sensitive.
	QueueUrl *string
	// Maximum number of results to include in the response.
	MaxResults *int32
	// Pagination token to request the next set of results.
	NextToken *string
}

// A list of your dead letter source queues.
type ListDeadLetterSourceQueuesOutput struct {
	// Pagination token to include in the next request.
	NextToken *string
	// A list of source queue URLs that have the RedrivePolicy queue attribute
	// configured with a dead-letter queue.
	QueueUrls []*string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpListDeadLetterSourceQueuesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpListDeadLetterSourceQueues{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpListDeadLetterSourceQueues{}, middleware.After)
}

func newServiceMetadataMiddleware_opListDeadLetterSourceQueues(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sqs",
		OperationName: "ListDeadLetterSourceQueues",
	}
}
