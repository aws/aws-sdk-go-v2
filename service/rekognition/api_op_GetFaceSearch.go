// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognition

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

const opGetFaceSearch = "GetFaceSearch"

// GetFaceSearchRequest returns a request value for making API operation for
// Amazon Rekognition.
//
// Gets the face search results for Amazon Rekognition Video face search started
// by StartFaceSearch. The search returns faces in a collection that match the
// faces of persons detected in a video. It also includes the time(s) that faces
// are matched in the video.
//
// Face search in a video is an asynchronous operation. You start face search
// by calling to StartFaceSearch which returns a job identifier (JobId). When
// the search operation finishes, Amazon Rekognition Video publishes a completion
// status to the Amazon Simple Notification Service topic registered in the
// initial call to StartFaceSearch. To get the search results, first check that
// the status value published to the Amazon SNS topic is SUCCEEDED. If so, call
// GetFaceSearch and pass the job identifier (JobId) from the initial call to
// StartFaceSearch.
//
// For more information, see Searching Faces in a Collection in the Amazon Rekognition
// Developer Guide.
//
// The search results are retured in an array, Persons, of PersonMatch objects.
// EachPersonMatch element contains details about the matching faces in the
// input collection, person information (facial attributes, bounding boxes,
// and person identifer) for the matched person, and the time the person was
// matched in the video.
//
// GetFaceSearch only returns the default facial attributes (BoundingBox, Confidence,
// Landmarks, Pose, and Quality). The other facial attributes listed in the
// Face object of the following response syntax are not returned. For more information,
// see FaceDetail in the Amazon Rekognition Developer Guide.
//
// By default, the Persons array is sorted by the time, in milliseconds from
// the start of the video, persons are matched. You can also sort by persons
// by specifying INDEX for the SORTBY input parameter.
//
//    // Example sending a request using GetFaceSearchRequest.
//    req := client.GetFaceSearchRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) GetFaceSearchRequest(input *types.GetFaceSearchInput) GetFaceSearchRequest {
	op := &aws.Operation{
		Name:       opGetFaceSearch,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetFaceSearchInput{}
	}

	req := c.newRequest(op, input, &types.GetFaceSearchOutput{})
	return GetFaceSearchRequest{Request: req, Input: input, Copy: c.GetFaceSearchRequest}
}

// GetFaceSearchRequest is the request type for the
// GetFaceSearch API operation.
type GetFaceSearchRequest struct {
	*aws.Request
	Input *types.GetFaceSearchInput
	Copy  func(*types.GetFaceSearchInput) GetFaceSearchRequest
}

// Send marshals and sends the GetFaceSearch API request.
func (r GetFaceSearchRequest) Send(ctx context.Context) (*GetFaceSearchResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetFaceSearchResponse{
		GetFaceSearchOutput: r.Request.Data.(*types.GetFaceSearchOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetFaceSearchRequestPaginator returns a paginator for GetFaceSearch.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetFaceSearchRequest(input)
//   p := rekognition.NewGetFaceSearchRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetFaceSearchPaginator(req GetFaceSearchRequest) GetFaceSearchPaginator {
	return GetFaceSearchPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetFaceSearchInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetFaceSearchPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetFaceSearchPaginator struct {
	aws.Pager
}

func (p *GetFaceSearchPaginator) CurrentPage() *types.GetFaceSearchOutput {
	return p.Pager.CurrentPage().(*types.GetFaceSearchOutput)
}

// GetFaceSearchResponse is the response type for the
// GetFaceSearch API operation.
type GetFaceSearchResponse struct {
	*types.GetFaceSearchOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetFaceSearch request.
func (r *GetFaceSearchResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
