// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognition

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

const opGetPersonTracking = "GetPersonTracking"

// GetPersonTrackingRequest returns a request value for making API operation for
// Amazon Rekognition.
//
// Gets the path tracking results of a Amazon Rekognition Video analysis started
// by StartPersonTracking.
//
// The person path tracking operation is started by a call to StartPersonTracking
// which returns a job identifier (JobId). When the operation finishes, Amazon
// Rekognition Video publishes a completion status to the Amazon Simple Notification
// Service topic registered in the initial call to StartPersonTracking.
//
// To get the results of the person path tracking operation, first check that
// the status value published to the Amazon SNS topic is SUCCEEDED. If so, call
// GetPersonTracking and pass the job identifier (JobId) from the initial call
// to StartPersonTracking.
//
// GetPersonTracking returns an array, Persons, of tracked persons and the time(s)
// their paths were tracked in the video.
//
// GetPersonTracking only returns the default facial attributes (BoundingBox,
// Confidence, Landmarks, Pose, and Quality). The other facial attributes listed
// in the Face object of the following response syntax are not returned.
//
// For more information, see FaceDetail in the Amazon Rekognition Developer
// Guide.
//
// By default, the array is sorted by the time(s) a person's path is tracked
// in the video. You can sort by tracked persons by specifying INDEX for the
// SortBy input parameter.
//
// Use the MaxResults parameter to limit the number of items returned. If there
// are more results than specified in MaxResults, the value of NextToken in
// the operation response contains a pagination token for getting the next set
// of results. To get the next page of results, call GetPersonTracking and populate
// the NextToken request parameter with the token value returned from the previous
// call to GetPersonTracking.
//
//    // Example sending a request using GetPersonTrackingRequest.
//    req := client.GetPersonTrackingRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) GetPersonTrackingRequest(input *types.GetPersonTrackingInput) GetPersonTrackingRequest {
	op := &aws.Operation{
		Name:       opGetPersonTracking,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetPersonTrackingInput{}
	}

	req := c.newRequest(op, input, &types.GetPersonTrackingOutput{})
	return GetPersonTrackingRequest{Request: req, Input: input, Copy: c.GetPersonTrackingRequest}
}

// GetPersonTrackingRequest is the request type for the
// GetPersonTracking API operation.
type GetPersonTrackingRequest struct {
	*aws.Request
	Input *types.GetPersonTrackingInput
	Copy  func(*types.GetPersonTrackingInput) GetPersonTrackingRequest
}

// Send marshals and sends the GetPersonTracking API request.
func (r GetPersonTrackingRequest) Send(ctx context.Context) (*GetPersonTrackingResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetPersonTrackingResponse{
		GetPersonTrackingOutput: r.Request.Data.(*types.GetPersonTrackingOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetPersonTrackingRequestPaginator returns a paginator for GetPersonTracking.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetPersonTrackingRequest(input)
//   p := rekognition.NewGetPersonTrackingRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetPersonTrackingPaginator(req GetPersonTrackingRequest) GetPersonTrackingPaginator {
	return GetPersonTrackingPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetPersonTrackingInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetPersonTrackingPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetPersonTrackingPaginator struct {
	aws.Pager
}

func (p *GetPersonTrackingPaginator) CurrentPage() *types.GetPersonTrackingOutput {
	return p.Pager.CurrentPage().(*types.GetPersonTrackingOutput)
}

// GetPersonTrackingResponse is the response type for the
// GetPersonTracking API operation.
type GetPersonTrackingResponse struct {
	*types.GetPersonTrackingOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetPersonTracking request.
func (r *GetPersonTrackingResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
