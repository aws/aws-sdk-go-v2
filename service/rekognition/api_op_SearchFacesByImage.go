// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognition

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

const opSearchFacesByImage = "SearchFacesByImage"

// SearchFacesByImageRequest returns a request value for making API operation for
// Amazon Rekognition.
//
// For a given input image, first detects the largest face in the image, and
// then searches the specified collection for matching faces. The operation
// compares the features of the input face with faces in the specified collection.
//
// To search for all faces in an input image, you might first call the IndexFaces
// operation, and then use the face IDs returned in subsequent calls to the
// SearchFaces operation.
//
// You can also call the DetectFaces operation and use the bounding boxes in
// the response to make face crops, which then you can pass in to the SearchFacesByImage
// operation.
//
// You pass the input image either as base64-encoded image bytes or as a reference
// to an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon
// Rekognition operations, passing image bytes is not supported. The image must
// be either a PNG or JPEG formatted file.
//
// The response returns an array of faces that match, ordered by similarity
// score with the highest similarity first. More specifically, it is an array
// of metadata for each face match found. Along with the metadata, the response
// also includes a similarity indicating how similar the face is to the input
// face. In the response, the operation also returns the bounding box (and a
// confidence level that the bounding box contains a face) of the face that
// Amazon Rekognition used for the input image.
//
// For an example, Searching for a Face Using an Image in the Amazon Rekognition
// Developer Guide.
//
// This operation requires permissions to perform the rekognition:SearchFacesByImage
// action.
//
//    // Example sending a request using SearchFacesByImageRequest.
//    req := client.SearchFacesByImageRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) SearchFacesByImageRequest(input *types.SearchFacesByImageInput) SearchFacesByImageRequest {
	op := &aws.Operation{
		Name:       opSearchFacesByImage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.SearchFacesByImageInput{}
	}

	req := c.newRequest(op, input, &types.SearchFacesByImageOutput{})
	return SearchFacesByImageRequest{Request: req, Input: input, Copy: c.SearchFacesByImageRequest}
}

// SearchFacesByImageRequest is the request type for the
// SearchFacesByImage API operation.
type SearchFacesByImageRequest struct {
	*aws.Request
	Input *types.SearchFacesByImageInput
	Copy  func(*types.SearchFacesByImageInput) SearchFacesByImageRequest
}

// Send marshals and sends the SearchFacesByImage API request.
func (r SearchFacesByImageRequest) Send(ctx context.Context) (*SearchFacesByImageResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SearchFacesByImageResponse{
		SearchFacesByImageOutput: r.Request.Data.(*types.SearchFacesByImageOutput),
		response:                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SearchFacesByImageResponse is the response type for the
// SearchFacesByImage API operation.
type SearchFacesByImageResponse struct {
	*types.SearchFacesByImageOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SearchFacesByImage request.
func (r *SearchFacesByImageResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
