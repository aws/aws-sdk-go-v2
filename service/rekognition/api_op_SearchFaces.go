// Code generated by smithy-go-codegen DO NOT EDIT.

package rekognition

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// For a given input face ID, searches for matching faces in the collection the
// face belongs to. You get a face ID when you add a face to the collection using
// the IndexFaces () operation. The operation compares the features of the input
// face with faces in the specified collection. You can also search faces without
// indexing faces by using the SearchFacesByImage operation.  <p> The operation
// response returns an array of faces that match, ordered by similarity score with
// the highest similarity first. More specifically, it is an array of metadata for
// each face match that is found. Along with the metadata, the response also
// includes a <code>confidence</code> value for each face match, indicating the
// confidence that the specific face matches the input face. </p> <p>For an
// example, see Searching for a Face Using Its Face ID in the Amazon Rekognition
// Developer Guide.</p> <p>This operation requires permissions to perform the
// <code>rekognition:SearchFaces</code> action.</p>
func (c *Client) SearchFaces(ctx context.Context, params *SearchFacesInput, optFns ...func(*Options)) (*SearchFacesOutput, error) {
	stack := middleware.NewStack("SearchFaces", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpSearchFacesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSearchFacesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSearchFaces(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SearchFaces",
			Err:           err,
		}
	}
	out := result.(*SearchFacesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SearchFacesInput struct {
	// ID of a face to find matches for in the collection.
	FaceId *string
	// Maximum number of faces to return. The operation returns the maximum number of
	// faces with the highest confidence in the match.
	MaxFaces *int32
	// ID of the collection the face belongs to.
	CollectionId *string
	// Optional value specifying the minimum confidence in the face match to return.
	// For example, don't return any matches where confidence in matches is less than
	// 70%. The default value is 80%.
	FaceMatchThreshold *float32
}

type SearchFacesOutput struct {
	// ID of the face that was searched for matches in a collection.
	SearchedFaceId *string
	// Version number of the face detection model associated with the input collection
	// (CollectionId).
	FaceModelVersion *string
	// An array of faces that matched the input face, along with the confidence in the
	// match.
	FaceMatches []*types.FaceMatch

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpSearchFacesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpSearchFaces{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpSearchFaces{}, middleware.After)
}

func newServiceMetadataMiddleware_opSearchFaces(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rekognition",
		OperationName: "SearchFaces",
	}
}
