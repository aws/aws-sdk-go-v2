// Code generated by smithy-go-codegen DO NOT EDIT.

package rekognition

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns list of collection IDs in your account. If the result is truncated, the
// response also provides a NextToken that you can use in the subsequent request to
// fetch the next set of collection IDs.  <p>For an example, see Listing
// Collections in the Amazon Rekognition Developer Guide.</p> <p>This operation
// requires permissions to perform the <code>rekognition:ListCollections</code>
// action.</p>
func (c *Client) ListCollections(ctx context.Context, params *ListCollectionsInput, optFns ...func(*Options)) (*ListCollectionsOutput, error) {
	stack := middleware.NewStack("ListCollections", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListCollectionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListCollections(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListCollections",
			Err:           err,
		}
	}
	out := result.(*ListCollectionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListCollectionsInput struct {
	// Pagination token from the previous response.
	NextToken *string
	// Maximum number of collection IDs to return.
	MaxResults *int32
}

type ListCollectionsOutput struct {
	// If the result is truncated, the response provides a NextToken that you can use
	// in the subsequent request to fetch the next set of collection IDs.
	NextToken *string
	// An array of collection IDs.
	CollectionIds []*string
	// Version numbers of the face detection models associated with the collections in
	// the array CollectionIds. For example, the value of FaceModelVersions[2] is the
	// version number for the face detection model used by the collection in
	// CollectionId[2].
	FaceModelVersions []*string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListCollectionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListCollections{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListCollections{}, middleware.After)
}

func newServiceMetadataMiddleware_opListCollections(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rekognition",
		OperationName: "ListCollections",
	}
}
