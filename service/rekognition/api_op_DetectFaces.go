// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognition

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

const opDetectFaces = "DetectFaces"

// DetectFacesRequest returns a request value for making API operation for
// Amazon Rekognition.
//
// Detects faces within an image that is provided as input.
//
// DetectFaces detects the 100 largest faces in the image. For each face detected,
// the operation returns face details. These details include a bounding box
// of the face, a confidence value (that the bounding box contains a face),
// and a fixed set of attributes such as facial landmarks (for example, coordinates
// of eye and mouth), gender, presence of beard, sunglasses, and so on.
//
// The face-detection algorithm is most effective on frontal faces. For non-frontal
// or obscured faces, the algorithm might not detect the faces or might detect
// faces with lower confidence.
//
// You pass the input image either as base64-encoded image bytes or as a reference
// to an image in an Amazon S3 bucket. If you use the to call Amazon Rekognition
// operations, passing image bytes is not supported. The image must be either
// a PNG or JPEG formatted file.
//
// This is a stateless API operation. That is, the operation does not persist
// any data.
//
// This operation requires permissions to perform the rekognition:DetectFaces
// action.
//
//    // Example sending a request using DetectFacesRequest.
//    req := client.DetectFacesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) DetectFacesRequest(input *types.DetectFacesInput) DetectFacesRequest {
	op := &aws.Operation{
		Name:       opDetectFaces,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.DetectFacesInput{}
	}

	req := c.newRequest(op, input, &types.DetectFacesOutput{})
	return DetectFacesRequest{Request: req, Input: input, Copy: c.DetectFacesRequest}
}

// DetectFacesRequest is the request type for the
// DetectFaces API operation.
type DetectFacesRequest struct {
	*aws.Request
	Input *types.DetectFacesInput
	Copy  func(*types.DetectFacesInput) DetectFacesRequest
}

// Send marshals and sends the DetectFaces API request.
func (r DetectFacesRequest) Send(ctx context.Context) (*DetectFacesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DetectFacesResponse{
		DetectFacesOutput: r.Request.Data.(*types.DetectFacesOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DetectFacesResponse is the response type for the
// DetectFaces API operation.
type DetectFacesResponse struct {
	*types.DetectFacesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DetectFaces request.
func (r *DetectFacesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
