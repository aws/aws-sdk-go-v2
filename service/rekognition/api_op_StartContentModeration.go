// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognition

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

const opStartContentModeration = "StartContentModeration"

// StartContentModerationRequest returns a request value for making API operation for
// Amazon Rekognition.
//
// Starts asynchronous detection of unsafe content in a stored video.
//
// Amazon Rekognition Video can moderate content in a video stored in an Amazon
// S3 bucket. Use Video to specify the bucket name and the filename of the video.
// StartContentModeration returns a job identifier (JobId) which you use to
// get the results of the analysis. When unsafe content analysis is finished,
// Amazon Rekognition Video publishes a completion status to the Amazon Simple
// Notification Service topic that you specify in NotificationChannel.
//
// To get the results of the unsafe content analysis, first check that the status
// value published to the Amazon SNS topic is SUCCEEDED. If so, call GetContentModeration
// and pass the job identifier (JobId) from the initial call to StartContentModeration.
//
// For more information, see Detecting Unsafe Content in the Amazon Rekognition
// Developer Guide.
//
//    // Example sending a request using StartContentModerationRequest.
//    req := client.StartContentModerationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) StartContentModerationRequest(input *types.StartContentModerationInput) StartContentModerationRequest {
	op := &aws.Operation{
		Name:       opStartContentModeration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StartContentModerationInput{}
	}

	req := c.newRequest(op, input, &types.StartContentModerationOutput{})
	return StartContentModerationRequest{Request: req, Input: input, Copy: c.StartContentModerationRequest}
}

// StartContentModerationRequest is the request type for the
// StartContentModeration API operation.
type StartContentModerationRequest struct {
	*aws.Request
	Input *types.StartContentModerationInput
	Copy  func(*types.StartContentModerationInput) StartContentModerationRequest
}

// Send marshals and sends the StartContentModeration API request.
func (r StartContentModerationRequest) Send(ctx context.Context) (*StartContentModerationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartContentModerationResponse{
		StartContentModerationOutput: r.Request.Data.(*types.StartContentModerationOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartContentModerationResponse is the response type for the
// StartContentModeration API operation.
type StartContentModerationResponse struct {
	*types.StartContentModerationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartContentModeration request.
func (r *StartContentModerationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
