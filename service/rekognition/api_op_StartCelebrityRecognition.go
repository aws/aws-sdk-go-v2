// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognition

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

const opStartCelebrityRecognition = "StartCelebrityRecognition"

// StartCelebrityRecognitionRequest returns a request value for making API operation for
// Amazon Rekognition.
//
// Starts asynchronous recognition of celebrities in a stored video.
//
// Amazon Rekognition Video can detect celebrities in a video must be stored
// in an Amazon S3 bucket. Use Video to specify the bucket name and the filename
// of the video. StartCelebrityRecognition returns a job identifier (JobId)
// which you use to get the results of the analysis. When celebrity recognition
// analysis is finished, Amazon Rekognition Video publishes a completion status
// to the Amazon Simple Notification Service topic that you specify in NotificationChannel.
// To get the results of the celebrity recognition analysis, first check that
// the status value published to the Amazon SNS topic is SUCCEEDED. If so, call
// GetCelebrityRecognition and pass the job identifier (JobId) from the initial
// call to StartCelebrityRecognition.
//
// For more information, see Recognizing Celebrities in the Amazon Rekognition
// Developer Guide.
//
//    // Example sending a request using StartCelebrityRecognitionRequest.
//    req := client.StartCelebrityRecognitionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) StartCelebrityRecognitionRequest(input *types.StartCelebrityRecognitionInput) StartCelebrityRecognitionRequest {
	op := &aws.Operation{
		Name:       opStartCelebrityRecognition,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StartCelebrityRecognitionInput{}
	}

	req := c.newRequest(op, input, &types.StartCelebrityRecognitionOutput{})
	return StartCelebrityRecognitionRequest{Request: req, Input: input, Copy: c.StartCelebrityRecognitionRequest}
}

// StartCelebrityRecognitionRequest is the request type for the
// StartCelebrityRecognition API operation.
type StartCelebrityRecognitionRequest struct {
	*aws.Request
	Input *types.StartCelebrityRecognitionInput
	Copy  func(*types.StartCelebrityRecognitionInput) StartCelebrityRecognitionRequest
}

// Send marshals and sends the StartCelebrityRecognition API request.
func (r StartCelebrityRecognitionRequest) Send(ctx context.Context) (*StartCelebrityRecognitionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartCelebrityRecognitionResponse{
		StartCelebrityRecognitionOutput: r.Request.Data.(*types.StartCelebrityRecognitionOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartCelebrityRecognitionResponse is the response type for the
// StartCelebrityRecognition API operation.
type StartCelebrityRecognitionResponse struct {
	*types.StartCelebrityRecognitionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartCelebrityRecognition request.
func (r *StartCelebrityRecognitionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
