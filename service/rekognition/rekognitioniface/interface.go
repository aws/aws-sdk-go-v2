// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package rekognitioniface provides an interface to enable mocking the Amazon Rekognition service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package rekognitioniface

import (
	"github.com/aws/aws-sdk-go-v2/service/rekognition"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

// ClientAPI provides an interface to enable mocking the
// rekognition.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon Rekognition.
//    func myFunc(svc rekognitioniface.ClientAPI) bool {
//        // Make svc.CompareFaces request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := rekognition.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        rekognitioniface.ClientPI
//    }
//    func (m *mockClientClient) CompareFaces(input *types.CompareFacesInput) (*types.CompareFacesOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	CompareFacesRequest(*types.CompareFacesInput) rekognition.CompareFacesRequest

	CreateCollectionRequest(*types.CreateCollectionInput) rekognition.CreateCollectionRequest

	CreateStreamProcessorRequest(*types.CreateStreamProcessorInput) rekognition.CreateStreamProcessorRequest

	DeleteCollectionRequest(*types.DeleteCollectionInput) rekognition.DeleteCollectionRequest

	DeleteFacesRequest(*types.DeleteFacesInput) rekognition.DeleteFacesRequest

	DeleteStreamProcessorRequest(*types.DeleteStreamProcessorInput) rekognition.DeleteStreamProcessorRequest

	DescribeCollectionRequest(*types.DescribeCollectionInput) rekognition.DescribeCollectionRequest

	DescribeStreamProcessorRequest(*types.DescribeStreamProcessorInput) rekognition.DescribeStreamProcessorRequest

	DetectFacesRequest(*types.DetectFacesInput) rekognition.DetectFacesRequest

	DetectLabelsRequest(*types.DetectLabelsInput) rekognition.DetectLabelsRequest

	DetectModerationLabelsRequest(*types.DetectModerationLabelsInput) rekognition.DetectModerationLabelsRequest

	DetectTextRequest(*types.DetectTextInput) rekognition.DetectTextRequest

	GetCelebrityInfoRequest(*types.GetCelebrityInfoInput) rekognition.GetCelebrityInfoRequest

	GetCelebrityRecognitionRequest(*types.GetCelebrityRecognitionInput) rekognition.GetCelebrityRecognitionRequest

	GetContentModerationRequest(*types.GetContentModerationInput) rekognition.GetContentModerationRequest

	GetFaceDetectionRequest(*types.GetFaceDetectionInput) rekognition.GetFaceDetectionRequest

	GetFaceSearchRequest(*types.GetFaceSearchInput) rekognition.GetFaceSearchRequest

	GetLabelDetectionRequest(*types.GetLabelDetectionInput) rekognition.GetLabelDetectionRequest

	GetPersonTrackingRequest(*types.GetPersonTrackingInput) rekognition.GetPersonTrackingRequest

	IndexFacesRequest(*types.IndexFacesInput) rekognition.IndexFacesRequest

	ListCollectionsRequest(*types.ListCollectionsInput) rekognition.ListCollectionsRequest

	ListFacesRequest(*types.ListFacesInput) rekognition.ListFacesRequest

	ListStreamProcessorsRequest(*types.ListStreamProcessorsInput) rekognition.ListStreamProcessorsRequest

	RecognizeCelebritiesRequest(*types.RecognizeCelebritiesInput) rekognition.RecognizeCelebritiesRequest

	SearchFacesRequest(*types.SearchFacesInput) rekognition.SearchFacesRequest

	SearchFacesByImageRequest(*types.SearchFacesByImageInput) rekognition.SearchFacesByImageRequest

	StartCelebrityRecognitionRequest(*types.StartCelebrityRecognitionInput) rekognition.StartCelebrityRecognitionRequest

	StartContentModerationRequest(*types.StartContentModerationInput) rekognition.StartContentModerationRequest

	StartFaceDetectionRequest(*types.StartFaceDetectionInput) rekognition.StartFaceDetectionRequest

	StartFaceSearchRequest(*types.StartFaceSearchInput) rekognition.StartFaceSearchRequest

	StartLabelDetectionRequest(*types.StartLabelDetectionInput) rekognition.StartLabelDetectionRequest

	StartPersonTrackingRequest(*types.StartPersonTrackingInput) rekognition.StartPersonTrackingRequest

	StartStreamProcessorRequest(*types.StartStreamProcessorInput) rekognition.StartStreamProcessorRequest

	StopStreamProcessorRequest(*types.StopStreamProcessorInput) rekognition.StopStreamProcessorRequest
}

var _ ClientAPI = (*rekognition.Client)(nil)
