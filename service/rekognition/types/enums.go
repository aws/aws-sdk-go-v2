// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type Attribute string

// Enum values for Attribute
const (
	AttributeDefault Attribute = "DEFAULT"
	AttributeAll     Attribute = "ALL"
)

// Values returns all known values for Attribute. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Attribute) Values() []Attribute {
	return []Attribute{
		"DEFAULT",
		"ALL",
	}
}

type BodyPart string

// Enum values for BodyPart
const (
	BodyPartFace      BodyPart = "FACE"
	BodyPartHead      BodyPart = "HEAD"
	BodyPartLeftHand  BodyPart = "LEFT_HAND"
	BodyPartRightHand BodyPart = "RIGHT_HAND"
)

// Values returns all known values for BodyPart. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (BodyPart) Values() []BodyPart {
	return []BodyPart{
		"FACE",
		"HEAD",
		"LEFT_HAND",
		"RIGHT_HAND",
	}
}

type CelebrityRecognitionSortBy string

// Enum values for CelebrityRecognitionSortBy
const (
	CelebrityRecognitionSortById        CelebrityRecognitionSortBy = "ID"
	CelebrityRecognitionSortByTimestamp CelebrityRecognitionSortBy = "TIMESTAMP"
)

// Values returns all known values for CelebrityRecognitionSortBy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (CelebrityRecognitionSortBy) Values() []CelebrityRecognitionSortBy {
	return []CelebrityRecognitionSortBy{
		"ID",
		"TIMESTAMP",
	}
}

type ContentClassifier string

// Enum values for ContentClassifier
const (
	ContentClassifierFreeOfPersonallyIdentifiableInformation ContentClassifier = "FreeOfPersonallyIdentifiableInformation"
	ContentClassifierFreeOfAdultContent                      ContentClassifier = "FreeOfAdultContent"
)

// Values returns all known values for ContentClassifier. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ContentClassifier) Values() []ContentClassifier {
	return []ContentClassifier{
		"FreeOfPersonallyIdentifiableInformation",
		"FreeOfAdultContent",
	}
}

type ContentModerationSortBy string

// Enum values for ContentModerationSortBy
const (
	ContentModerationSortByName      ContentModerationSortBy = "NAME"
	ContentModerationSortByTimestamp ContentModerationSortBy = "TIMESTAMP"
)

// Values returns all known values for ContentModerationSortBy. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ContentModerationSortBy) Values() []ContentModerationSortBy {
	return []ContentModerationSortBy{
		"NAME",
		"TIMESTAMP",
	}
}

type EmotionName string

// Enum values for EmotionName
const (
	EmotionNameHappy     EmotionName = "HAPPY"
	EmotionNameSad       EmotionName = "SAD"
	EmotionNameAngry     EmotionName = "ANGRY"
	EmotionNameConfused  EmotionName = "CONFUSED"
	EmotionNameDisgusted EmotionName = "DISGUSTED"
	EmotionNameSurprised EmotionName = "SURPRISED"
	EmotionNameCalm      EmotionName = "CALM"
	EmotionNameUnknown   EmotionName = "UNKNOWN"
	EmotionNameFear      EmotionName = "FEAR"
)

// Values returns all known values for EmotionName. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (EmotionName) Values() []EmotionName {
	return []EmotionName{
		"HAPPY",
		"SAD",
		"ANGRY",
		"CONFUSED",
		"DISGUSTED",
		"SURPRISED",
		"CALM",
		"UNKNOWN",
		"FEAR",
	}
}

type FaceAttributes string

// Enum values for FaceAttributes
const (
	FaceAttributesDefault FaceAttributes = "DEFAULT"
	FaceAttributesAll     FaceAttributes = "ALL"
)

// Values returns all known values for FaceAttributes. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (FaceAttributes) Values() []FaceAttributes {
	return []FaceAttributes{
		"DEFAULT",
		"ALL",
	}
}

type FaceSearchSortBy string

// Enum values for FaceSearchSortBy
const (
	FaceSearchSortByIndex     FaceSearchSortBy = "INDEX"
	FaceSearchSortByTimestamp FaceSearchSortBy = "TIMESTAMP"
)

// Values returns all known values for FaceSearchSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (FaceSearchSortBy) Values() []FaceSearchSortBy {
	return []FaceSearchSortBy{
		"INDEX",
		"TIMESTAMP",
	}
}

type GenderType string

// Enum values for GenderType
const (
	GenderTypeMale   GenderType = "Male"
	GenderTypeFemale GenderType = "Female"
)

// Values returns all known values for GenderType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (GenderType) Values() []GenderType {
	return []GenderType{
		"Male",
		"Female",
	}
}

type KnownGenderType string

// Enum values for KnownGenderType
const (
	KnownGenderTypeMale   KnownGenderType = "Male"
	KnownGenderTypeFemale KnownGenderType = "Female"
)

// Values returns all known values for KnownGenderType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (KnownGenderType) Values() []KnownGenderType {
	return []KnownGenderType{
		"Male",
		"Female",
	}
}

type LabelDetectionSortBy string

// Enum values for LabelDetectionSortBy
const (
	LabelDetectionSortByName      LabelDetectionSortBy = "NAME"
	LabelDetectionSortByTimestamp LabelDetectionSortBy = "TIMESTAMP"
)

// Values returns all known values for LabelDetectionSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LabelDetectionSortBy) Values() []LabelDetectionSortBy {
	return []LabelDetectionSortBy{
		"NAME",
		"TIMESTAMP",
	}
}

type LandmarkType string

// Enum values for LandmarkType
const (
	LandmarkTypeEyeLeft           LandmarkType = "eyeLeft"
	LandmarkTypeEyeRight          LandmarkType = "eyeRight"
	LandmarkTypeNose              LandmarkType = "nose"
	LandmarkTypeMouthLeft         LandmarkType = "mouthLeft"
	LandmarkTypeMouthRight        LandmarkType = "mouthRight"
	LandmarkTypeLeftEyeBrowLeft   LandmarkType = "leftEyeBrowLeft"
	LandmarkTypeLeftEyeBrowRight  LandmarkType = "leftEyeBrowRight"
	LandmarkTypeLeftEyeBrowUp     LandmarkType = "leftEyeBrowUp"
	LandmarkTypeRightEyeBrowLeft  LandmarkType = "rightEyeBrowLeft"
	LandmarkTypeRightEyeBrowRight LandmarkType = "rightEyeBrowRight"
	LandmarkTypeRightEyeBrowUp    LandmarkType = "rightEyeBrowUp"
	LandmarkTypeLeftEyeLeft       LandmarkType = "leftEyeLeft"
	LandmarkTypeLeftEyeRight      LandmarkType = "leftEyeRight"
	LandmarkTypeLeftEyeUp         LandmarkType = "leftEyeUp"
	LandmarkTypeLeftEyeDown       LandmarkType = "leftEyeDown"
	LandmarkTypeRightEyeLeft      LandmarkType = "rightEyeLeft"
	LandmarkTypeRightEyeRight     LandmarkType = "rightEyeRight"
	LandmarkTypeRightEyeUp        LandmarkType = "rightEyeUp"
	LandmarkTypeRightEyeDown      LandmarkType = "rightEyeDown"
	LandmarkTypeNoseLeft          LandmarkType = "noseLeft"
	LandmarkTypeNoseRight         LandmarkType = "noseRight"
	LandmarkTypeMouthUp           LandmarkType = "mouthUp"
	LandmarkTypeMouthDown         LandmarkType = "mouthDown"
	LandmarkTypeLeftPupil         LandmarkType = "leftPupil"
	LandmarkTypeRightPupil        LandmarkType = "rightPupil"
	LandmarkTypeUpperJawlineLeft  LandmarkType = "upperJawlineLeft"
	LandmarkTypeMidJawlineLeft    LandmarkType = "midJawlineLeft"
	LandmarkTypeChinBottom        LandmarkType = "chinBottom"
	LandmarkTypeMidJawlineRight   LandmarkType = "midJawlineRight"
	LandmarkTypeUpperJawlineRight LandmarkType = "upperJawlineRight"
)

// Values returns all known values for LandmarkType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (LandmarkType) Values() []LandmarkType {
	return []LandmarkType{
		"eyeLeft",
		"eyeRight",
		"nose",
		"mouthLeft",
		"mouthRight",
		"leftEyeBrowLeft",
		"leftEyeBrowRight",
		"leftEyeBrowUp",
		"rightEyeBrowLeft",
		"rightEyeBrowRight",
		"rightEyeBrowUp",
		"leftEyeLeft",
		"leftEyeRight",
		"leftEyeUp",
		"leftEyeDown",
		"rightEyeLeft",
		"rightEyeRight",
		"rightEyeUp",
		"rightEyeDown",
		"noseLeft",
		"noseRight",
		"mouthUp",
		"mouthDown",
		"leftPupil",
		"rightPupil",
		"upperJawlineLeft",
		"midJawlineLeft",
		"chinBottom",
		"midJawlineRight",
		"upperJawlineRight",
	}
}

type OrientationCorrection string

// Enum values for OrientationCorrection
const (
	OrientationCorrectionRotate0   OrientationCorrection = "ROTATE_0"
	OrientationCorrectionRotate90  OrientationCorrection = "ROTATE_90"
	OrientationCorrectionRotate180 OrientationCorrection = "ROTATE_180"
	OrientationCorrectionRotate270 OrientationCorrection = "ROTATE_270"
)

// Values returns all known values for OrientationCorrection. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OrientationCorrection) Values() []OrientationCorrection {
	return []OrientationCorrection{
		"ROTATE_0",
		"ROTATE_90",
		"ROTATE_180",
		"ROTATE_270",
	}
}

type PersonTrackingSortBy string

// Enum values for PersonTrackingSortBy
const (
	PersonTrackingSortByIndex     PersonTrackingSortBy = "INDEX"
	PersonTrackingSortByTimestamp PersonTrackingSortBy = "TIMESTAMP"
)

// Values returns all known values for PersonTrackingSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PersonTrackingSortBy) Values() []PersonTrackingSortBy {
	return []PersonTrackingSortBy{
		"INDEX",
		"TIMESTAMP",
	}
}

type ProjectStatus string

// Enum values for ProjectStatus
const (
	ProjectStatusCreating ProjectStatus = "CREATING"
	ProjectStatusCreated  ProjectStatus = "CREATED"
	ProjectStatusDeleting ProjectStatus = "DELETING"
)

// Values returns all known values for ProjectStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ProjectStatus) Values() []ProjectStatus {
	return []ProjectStatus{
		"CREATING",
		"CREATED",
		"DELETING",
	}
}

type ProjectVersionStatus string

// Enum values for ProjectVersionStatus
const (
	ProjectVersionStatusTrainingInProgress ProjectVersionStatus = "TRAINING_IN_PROGRESS"
	ProjectVersionStatusTrainingCompleted  ProjectVersionStatus = "TRAINING_COMPLETED"
	ProjectVersionStatusTrainingFailed     ProjectVersionStatus = "TRAINING_FAILED"
	ProjectVersionStatusStarting           ProjectVersionStatus = "STARTING"
	ProjectVersionStatusRunning            ProjectVersionStatus = "RUNNING"
	ProjectVersionStatusFailed             ProjectVersionStatus = "FAILED"
	ProjectVersionStatusStopping           ProjectVersionStatus = "STOPPING"
	ProjectVersionStatusStopped            ProjectVersionStatus = "STOPPED"
	ProjectVersionStatusDeleting           ProjectVersionStatus = "DELETING"
)

// Values returns all known values for ProjectVersionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ProjectVersionStatus) Values() []ProjectVersionStatus {
	return []ProjectVersionStatus{
		"TRAINING_IN_PROGRESS",
		"TRAINING_COMPLETED",
		"TRAINING_FAILED",
		"STARTING",
		"RUNNING",
		"FAILED",
		"STOPPING",
		"STOPPED",
		"DELETING",
	}
}

type ProtectiveEquipmentType string

// Enum values for ProtectiveEquipmentType
const (
	ProtectiveEquipmentTypeFaceCover ProtectiveEquipmentType = "FACE_COVER"
	ProtectiveEquipmentTypeHandCover ProtectiveEquipmentType = "HAND_COVER"
	ProtectiveEquipmentTypeHeadCover ProtectiveEquipmentType = "HEAD_COVER"
)

// Values returns all known values for ProtectiveEquipmentType. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ProtectiveEquipmentType) Values() []ProtectiveEquipmentType {
	return []ProtectiveEquipmentType{
		"FACE_COVER",
		"HAND_COVER",
		"HEAD_COVER",
	}
}

type QualityFilter string

// Enum values for QualityFilter
const (
	QualityFilterNone   QualityFilter = "NONE"
	QualityFilterAuto   QualityFilter = "AUTO"
	QualityFilterLow    QualityFilter = "LOW"
	QualityFilterMedium QualityFilter = "MEDIUM"
	QualityFilterHigh   QualityFilter = "HIGH"
)

// Values returns all known values for QualityFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (QualityFilter) Values() []QualityFilter {
	return []QualityFilter{
		"NONE",
		"AUTO",
		"LOW",
		"MEDIUM",
		"HIGH",
	}
}

type Reason string

// Enum values for Reason
const (
	ReasonExceedsMaxFaces  Reason = "EXCEEDS_MAX_FACES"
	ReasonExtremePose      Reason = "EXTREME_POSE"
	ReasonLowBrightness    Reason = "LOW_BRIGHTNESS"
	ReasonLowSharpness     Reason = "LOW_SHARPNESS"
	ReasonLowConfidence    Reason = "LOW_CONFIDENCE"
	ReasonSmallBoundingBox Reason = "SMALL_BOUNDING_BOX"
	ReasonLowFaceQuality   Reason = "LOW_FACE_QUALITY"
)

// Values returns all known values for Reason. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Reason) Values() []Reason {
	return []Reason{
		"EXCEEDS_MAX_FACES",
		"EXTREME_POSE",
		"LOW_BRIGHTNESS",
		"LOW_SHARPNESS",
		"LOW_CONFIDENCE",
		"SMALL_BOUNDING_BOX",
		"LOW_FACE_QUALITY",
	}
}

type SegmentType string

// Enum values for SegmentType
const (
	SegmentTypeTechnicalCue SegmentType = "TECHNICAL_CUE"
	SegmentTypeShot         SegmentType = "SHOT"
)

// Values returns all known values for SegmentType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (SegmentType) Values() []SegmentType {
	return []SegmentType{
		"TECHNICAL_CUE",
		"SHOT",
	}
}

type StreamProcessorStatus string

// Enum values for StreamProcessorStatus
const (
	StreamProcessorStatusStopped  StreamProcessorStatus = "STOPPED"
	StreamProcessorStatusStarting StreamProcessorStatus = "STARTING"
	StreamProcessorStatusRunning  StreamProcessorStatus = "RUNNING"
	StreamProcessorStatusFailed   StreamProcessorStatus = "FAILED"
	StreamProcessorStatusStopping StreamProcessorStatus = "STOPPING"
)

// Values returns all known values for StreamProcessorStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StreamProcessorStatus) Values() []StreamProcessorStatus {
	return []StreamProcessorStatus{
		"STOPPED",
		"STARTING",
		"RUNNING",
		"FAILED",
		"STOPPING",
	}
}

type TechnicalCueType string

// Enum values for TechnicalCueType
const (
	TechnicalCueTypeColorBars      TechnicalCueType = "ColorBars"
	TechnicalCueTypeEndCredits     TechnicalCueType = "EndCredits"
	TechnicalCueTypeBlackFrames    TechnicalCueType = "BlackFrames"
	TechnicalCueTypeOpeningCredits TechnicalCueType = "OpeningCredits"
	TechnicalCueTypeStudioLogo     TechnicalCueType = "StudioLogo"
	TechnicalCueTypeSlate          TechnicalCueType = "Slate"
	TechnicalCueTypeContent        TechnicalCueType = "Content"
)

// Values returns all known values for TechnicalCueType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TechnicalCueType) Values() []TechnicalCueType {
	return []TechnicalCueType{
		"ColorBars",
		"EndCredits",
		"BlackFrames",
		"OpeningCredits",
		"StudioLogo",
		"Slate",
		"Content",
	}
}

type TextTypes string

// Enum values for TextTypes
const (
	TextTypesLine TextTypes = "LINE"
	TextTypesWord TextTypes = "WORD"
)

// Values returns all known values for TextTypes. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (TextTypes) Values() []TextTypes {
	return []TextTypes{
		"LINE",
		"WORD",
	}
}

type VideoColorRange string

// Enum values for VideoColorRange
const (
	VideoColorRangeFull    VideoColorRange = "FULL"
	VideoColorRangeLimited VideoColorRange = "LIMITED"
)

// Values returns all known values for VideoColorRange. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (VideoColorRange) Values() []VideoColorRange {
	return []VideoColorRange{
		"FULL",
		"LIMITED",
	}
}

type VideoJobStatus string

// Enum values for VideoJobStatus
const (
	VideoJobStatusInProgress VideoJobStatus = "IN_PROGRESS"
	VideoJobStatusSucceeded  VideoJobStatus = "SUCCEEDED"
	VideoJobStatusFailed     VideoJobStatus = "FAILED"
)

// Values returns all known values for VideoJobStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (VideoJobStatus) Values() []VideoJobStatus {
	return []VideoJobStatus{
		"IN_PROGRESS",
		"SUCCEEDED",
		"FAILED",
	}
}
