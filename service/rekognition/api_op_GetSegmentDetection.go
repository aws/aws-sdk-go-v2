// Code generated by smithy-go-codegen DO NOT EDIT.

package rekognition

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets the segment detection results of a Amazon Rekognition Video analysis
// started by StartSegmentDetection (). Segment detection with Amazon Rekognition
// Video is an asynchronous operation. You start segment detection by calling
// StartSegmentDetection () which returns a job identifier (JobId). When the
// segment detection operation finishes, Amazon Rekognition publishes a completion
// status to the Amazon Simple Notification Service topic registered in the initial
// call to StartSegmentDetection. To get the results of the segment detection
// operation, first check that the status value published to the Amazon SNS topic
// is SUCCEEDED. if so, call GetSegmentDetection and pass the job identifier
// (JobId) from the initial call of StartSegmentDetection. GetSegmentDetection
// returns detected segments in an array (Segments) of SegmentDetection () objects.
// Segments is sorted by the segment types specified in the SegmentTypes input
// parameter of StartSegmentDetection. Each element of the array includes the
// detected segment, the precentage confidence in the acuracy of the detected
// segment, the type of the segment, and the frame in which the segment was
// detected. Use SelectedSegmentTypes to find out the type of segment detection
// requested in the call to StartSegmentDetection. Use the MaxResults parameter to
// limit the number of segment detections returned. If there are more results than
// specified in MaxResults, the value of NextToken in the operation response
// contains a pagination token for getting the next set of results. To get the next
// page of results, call GetSegmentDetection and populate the NextToken request
// parameter with the token value returned from the previous call to
// GetSegmentDetection.  <p>For more information, see Detecting Video Segments in
// Stored Video in the Amazon Rekognition Developer Guide.</p>
func (c *Client) GetSegmentDetection(ctx context.Context, params *GetSegmentDetectionInput, optFns ...func(*Options)) (*GetSegmentDetectionOutput, error) {
	stack := middleware.NewStack("GetSegmentDetection", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetSegmentDetectionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetSegmentDetectionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetSegmentDetection(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetSegmentDetection",
			Err:           err,
		}
	}
	out := result.(*GetSegmentDetectionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetSegmentDetectionInput struct {
	// Maximum number of results to return per paginated call. The largest value you
	// can specify is 1000.
	MaxResults *int32
	// Job identifier for the text detection operation for which you want results
	// returned. You get the job identifer from an initial call to
	// StartSegmentDetection.
	JobId *string
	// If the response is truncated, Amazon Rekognition Video returns this token that
	// you can use in the subsequent request to retrieve the next set of text.
	NextToken *string
}

type GetSegmentDetectionOutput struct {
	// If the previous response was incomplete (because there are more labels to
	// retrieve), Amazon Rekognition Video returns a pagination token in the response.
	// You can use this pagination token to retrieve the next set of text.
	NextToken *string
	// An array of objects. There can be multiple audio streams. Each AudioMetadata
	// object contains metadata for a single audio stream. Audio information in an
	// AudioMetadata objects includes the audio codec, the number of audio channels,
	// the duration of the audio stream, and the sample rate. Audio metadata is
	// returned in each page of information returned by GetSegmentDetection.
	AudioMetadata []*types.AudioMetadata
	// An array of segments detected in a video.
	Segments []*types.SegmentDetection
	// An array containing the segment types requested in the call to
	// StartSegmentDetection.
	SelectedSegmentTypes []*types.SegmentTypeInfo
	// If the job fails, StatusMessage provides a descriptive error message.
	StatusMessage *string
	// Currently, Amazon Rekognition Video returns a single object in the VideoMetadata
	// array. The object contains information about the video stream in the input file
	// that Amazon Rekognition Video chose to analyze. The VideoMetadata object
	// includes the video codec, video format and other information. Video metadata is
	// returned in each page of information returned by GetSegmentDetection.
	VideoMetadata []*types.VideoMetadata
	// Current status of the segment detection job.
	JobStatus types.VideoJobStatus

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetSegmentDetectionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetSegmentDetection{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetSegmentDetection{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetSegmentDetection(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rekognition",
		OperationName: "GetSegmentDetection",
	}
}
