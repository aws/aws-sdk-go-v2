// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognition

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition/types"
)

const opStartFaceSearch = "StartFaceSearch"

// StartFaceSearchRequest returns a request value for making API operation for
// Amazon Rekognition.
//
// Starts the asynchronous search for faces in a collection that match the faces
// of persons detected in a stored video.
//
// The video must be stored in an Amazon S3 bucket. Use Video to specify the
// bucket name and the filename of the video. StartFaceSearch returns a job
// identifier (JobId) which you use to get the search results once the search
// has completed. When searching is finished, Amazon Rekognition Video publishes
// a completion status to the Amazon Simple Notification Service topic that
// you specify in NotificationChannel. To get the search results, first check
// that the status value published to the Amazon SNS topic is SUCCEEDED. If
// so, call GetFaceSearch and pass the job identifier (JobId) from the initial
// call to StartFaceSearch. For more information, see procedure-person-search-videos.
//
//    // Example sending a request using StartFaceSearchRequest.
//    req := client.StartFaceSearchRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) StartFaceSearchRequest(input *types.StartFaceSearchInput) StartFaceSearchRequest {
	op := &aws.Operation{
		Name:       opStartFaceSearch,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StartFaceSearchInput{}
	}

	req := c.newRequest(op, input, &types.StartFaceSearchOutput{})
	return StartFaceSearchRequest{Request: req, Input: input, Copy: c.StartFaceSearchRequest}
}

// StartFaceSearchRequest is the request type for the
// StartFaceSearch API operation.
type StartFaceSearchRequest struct {
	*aws.Request
	Input *types.StartFaceSearchInput
	Copy  func(*types.StartFaceSearchInput) StartFaceSearchRequest
}

// Send marshals and sends the StartFaceSearch API request.
func (r StartFaceSearchRequest) Send(ctx context.Context) (*StartFaceSearchResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartFaceSearchResponse{
		StartFaceSearchOutput: r.Request.Data.(*types.StartFaceSearchOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartFaceSearchResponse is the response type for the
// StartFaceSearch API operation.
type StartFaceSearchResponse struct {
	*types.StartFaceSearchOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartFaceSearch request.
func (r *StartFaceSearchResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
