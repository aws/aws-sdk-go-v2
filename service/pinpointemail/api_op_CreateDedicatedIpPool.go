// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package pinpointemail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pinpointemail/types"
)

const opCreateDedicatedIpPool = "CreateDedicatedIpPool"

// CreateDedicatedIpPoolRequest returns a request value for making API operation for
// Amazon Pinpoint Email Service.
//
// Create a new pool of dedicated IP addresses. A pool can include one or more
// dedicated IP addresses that are associated with your Amazon Pinpoint account.
// You can associate a pool with a configuration set. When you send an email
// that uses that configuration set, Amazon Pinpoint sends it using only the
// IP addresses in the associated pool.
//
//    // Example sending a request using CreateDedicatedIpPoolRequest.
//    req := client.CreateDedicatedIpPoolRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/pinpoint-email-2018-07-26/CreateDedicatedIpPool
func (c *Client) CreateDedicatedIpPoolRequest(input *types.CreateDedicatedIpPoolInput) CreateDedicatedIpPoolRequest {
	op := &aws.Operation{
		Name:       opCreateDedicatedIpPool,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/email/dedicated-ip-pools",
	}

	if input == nil {
		input = &types.CreateDedicatedIpPoolInput{}
	}

	req := c.newRequest(op, input, &types.CreateDedicatedIpPoolOutput{})
	return CreateDedicatedIpPoolRequest{Request: req, Input: input, Copy: c.CreateDedicatedIpPoolRequest}
}

// CreateDedicatedIpPoolRequest is the request type for the
// CreateDedicatedIpPool API operation.
type CreateDedicatedIpPoolRequest struct {
	*aws.Request
	Input *types.CreateDedicatedIpPoolInput
	Copy  func(*types.CreateDedicatedIpPoolInput) CreateDedicatedIpPoolRequest
}

// Send marshals and sends the CreateDedicatedIpPool API request.
func (r CreateDedicatedIpPoolRequest) Send(ctx context.Context) (*CreateDedicatedIpPoolResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateDedicatedIpPoolResponse{
		CreateDedicatedIpPoolOutput: r.Request.Data.(*types.CreateDedicatedIpPoolOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateDedicatedIpPoolResponse is the response type for the
// CreateDedicatedIpPool API operation.
type CreateDedicatedIpPoolResponse struct {
	*types.CreateDedicatedIpPoolOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateDedicatedIpPool request.
func (r *CreateDedicatedIpPoolResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
