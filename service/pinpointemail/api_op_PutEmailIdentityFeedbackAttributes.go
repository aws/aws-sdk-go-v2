// Code generated by smithy-go-codegen DO NOT EDIT.

package pinpointemail

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Used to enable or disable feedback forwarding for an identity. This setting
// determines what happens when an identity is used to send an email that results
// in a bounce or complaint event. When you enable feedback forwarding, Amazon
// Pinpoint sends you email notifications when bounce or complaint events occur.
// Amazon Pinpoint sends this notification to the address that you specified in the
// Return-Path header of the original email. When you disable feedback forwarding,
// Amazon Pinpoint sends notifications through other mechanisms, such as by
// notifying an Amazon SNS topic. You're required to have a method of tracking
// bounces and complaints. If you haven't set up another mechanism for receiving
// bounce or complaint notifications, Amazon Pinpoint sends an email notification
// when these events occur (even if this setting is disabled).
func (c *Client) PutEmailIdentityFeedbackAttributes(ctx context.Context, params *PutEmailIdentityFeedbackAttributesInput, optFns ...func(*Options)) (*PutEmailIdentityFeedbackAttributesOutput, error) {
	stack := middleware.NewStack("PutEmailIdentityFeedbackAttributes", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpPutEmailIdentityFeedbackAttributesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutEmailIdentityFeedbackAttributesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutEmailIdentityFeedbackAttributes(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutEmailIdentityFeedbackAttributes",
			Err:           err,
		}
	}
	out := result.(*PutEmailIdentityFeedbackAttributesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to set the attributes that control how bounce and complaint events are
// processed.
type PutEmailIdentityFeedbackAttributesInput struct {
	// Sets the feedback forwarding configuration for the identity. If the value is
	// true, Amazon Pinpoint sends you email notifications when bounce or complaint
	// events occur. Amazon Pinpoint sends this notification to the address that you
	// specified in the Return-Path header of the original email. When you set this
	// value to false, Amazon Pinpoint sends notifications through other mechanisms,
	// such as by notifying an Amazon SNS topic or another event destination. You're
	// required to have a method of tracking bounces and complaints. If you haven't set
	// up another mechanism for receiving bounce or complaint notifications, Amazon
	// Pinpoint sends an email notification when these events occur (even if this
	// setting is disabled).
	EmailForwardingEnabled *bool
	// The email identity that you want to configure bounce and complaint feedback
	// forwarding for.
	EmailIdentity *string
}

// An HTTP 200 response if the request succeeds, or an error message if the request
// fails.
type PutEmailIdentityFeedbackAttributesOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpPutEmailIdentityFeedbackAttributesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpPutEmailIdentityFeedbackAttributes{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpPutEmailIdentityFeedbackAttributes{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutEmailIdentityFeedbackAttributes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ses",
		OperationName: "PutEmailIdentityFeedbackAttributes",
	}
}
