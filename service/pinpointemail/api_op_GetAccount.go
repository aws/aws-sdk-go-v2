// Code generated by smithy-go-codegen DO NOT EDIT.

package pinpointemail

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/pinpointemail/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Obtain information about the email-sending status and capabilities of your
// Amazon Pinpoint account in the current AWS Region.
func (c *Client) GetAccount(ctx context.Context, params *GetAccountInput, optFns ...func(*Options)) (*GetAccountOutput, error) {
	stack := middleware.NewStack("GetAccount", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetAccountMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetAccount(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetAccount",
			Err:           err,
		}
	}
	out := result.(*GetAccountOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to obtain information about the email-sending capabilities of your
// Amazon Pinpoint account.
type GetAccountInput struct {
}

// A list of details about the email-sending capabilities of your Amazon Pinpoint
// account in the current AWS Region.
type GetAccountOutput struct {
	// An object that contains information about the per-day and per-second sending
	// limits for your Amazon Pinpoint account in the current AWS Region.
	SendQuota *types.SendQuota
	// Indicates whether or not email sending is enabled for your Amazon Pinpoint
	// account in the current AWS Region.
	SendingEnabled *bool
	// Indicates whether or not your account has production access in the current AWS
	// Region. If the value is false, then your account is in the sandbox. When your
	// account is in the sandbox, you can only send email to verified identities.
	// Additionally, the maximum number of emails you can send in a 24-hour period
	// (your sending quota) is 200, and the maximum number of emails you can send per
	// second (your maximum sending rate) is 1. If the value is true, then your account
	// has production access. When your account has production access, you can send
	// email to any address. The sending quota and maximum sending rate for your
	// account vary based on your specific use case.
	ProductionAccessEnabled *bool
	// The reputation status of your Amazon Pinpoint account. The status can be one of
	// the following:
	//
	//     * HEALTHY – There are no reputation-related issues that
	// currently impact your account.
	//
	//     * PROBATION – We've identified some issues
	// with your Amazon Pinpoint account. We're placing your account under review while
	// you work on correcting these issues.
	//
	//     * SHUTDOWN – Your account's ability to
	// send email is currently paused because of an issue with the email sent from your
	// account. When you correct the issue, you can contact us and request that your
	// account's ability to send email is resumed.
	EnforcementStatus *string
	// Indicates whether or not the automatic warm-up feature is enabled for dedicated
	// IP addresses that are associated with your account.
	DedicatedIpAutoWarmupEnabled *bool

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetAccountMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetAccount{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetAccount{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetAccount(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ses",
		OperationName: "GetAccount",
	}
}
