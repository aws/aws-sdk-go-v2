// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package pinpointemail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pinpointemail/types"
)

const opSendEmail = "SendEmail"

// SendEmailRequest returns a request value for making API operation for
// Amazon Pinpoint Email Service.
//
// Sends an email message. You can use the Amazon Pinpoint Email API to send
// two types of messages:
//
//    * Simple – A standard email message. When you create this type of message,
//    you specify the sender, the recipient, and the message body, and Amazon
//    Pinpoint assembles the message for you.
//
//    * Raw – A raw, MIME-formatted email message. When you send this type
//    of email, you have to specify all of the message headers, as well as the
//    message body. You can use this message type to send messages that contain
//    attachments. The message that you specify has to be a valid MIME message.
//
//    // Example sending a request using SendEmailRequest.
//    req := client.SendEmailRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/pinpoint-email-2018-07-26/SendEmail
func (c *Client) SendEmailRequest(input *types.SendEmailInput) SendEmailRequest {
	op := &aws.Operation{
		Name:       opSendEmail,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/email/outbound-emails",
	}

	if input == nil {
		input = &types.SendEmailInput{}
	}

	req := c.newRequest(op, input, &types.SendEmailOutput{})
	return SendEmailRequest{Request: req, Input: input, Copy: c.SendEmailRequest}
}

// SendEmailRequest is the request type for the
// SendEmail API operation.
type SendEmailRequest struct {
	*aws.Request
	Input *types.SendEmailInput
	Copy  func(*types.SendEmailInput) SendEmailRequest
}

// Send marshals and sends the SendEmail API request.
func (r SendEmailRequest) Send(ctx context.Context) (*SendEmailResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SendEmailResponse{
		SendEmailOutput: r.Request.Data.(*types.SendEmailOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SendEmailResponse is the response type for the
// SendEmail API operation.
type SendEmailResponse struct {
	*types.SendEmailOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SendEmail request.
func (r *SendEmailResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
