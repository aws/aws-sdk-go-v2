// Code generated by smithy-go-codegen DO NOT EDIT.

package pinpointemail

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	"net/http"
)

const ServiceID = "Pinpoint Email"

// Amazon Pinpoint Email Service Welcome to the Amazon Pinpoint Email API
// Reference. This guide provides information about the Amazon Pinpoint Email API
// (version 1.0), including supported operations, data types, parameters, and
// schemas. Amazon Pinpoint (https://aws.amazon.com/pinpoint) is an AWS service
// that you can use to engage with your customers across multiple messaging
// channels. You can use Amazon Pinpoint to send email, SMS text messages, voice
// messages, and push notifications. The Amazon Pinpoint Email API provides
// programmatic access to options that are unique to the email channel and
// supplement the options provided by the Amazon Pinpoint API. If you're new to
// Amazon Pinpoint, you might find it helpful to also review the Amazon Pinpoint
// Developer Guide
// (https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html). The
// Amazon Pinpoint Developer Guide provides tutorials, code samples, and procedures
// that demonstrate how to use Amazon Pinpoint features programmatically and how to
// integrate Amazon Pinpoint functionality into mobile apps and other types of
// applications. The guide also provides information about key topics such as
// Amazon Pinpoint integration with other AWS services and the limits that apply to
// using the service. The Amazon Pinpoint Email API is available in several AWS
// Regions and it provides an endpoint for each of these Regions. For a list of all
// the Regions and endpoints where the API is currently available, see AWS Service
// Endpoints
// (https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region) in
// the Amazon Web Services General Reference. To learn more about AWS Regions, see
// Managing AWS Regions
// (https://docs.aws.amazon.com/general/latest/gr/rande-manage.html) in the Amazon
// Web Services General Reference. In each Region, AWS maintains multiple
// Availability Zones. These Availability Zones are physically isolated from each
// other, but are united by private, low-latency, high-throughput, and highly
// redundant network connections. These Availability Zones enable us to provide
// very high levels of availability and redundancy, while also minimizing latency.
// To learn more about the number of Availability Zones that are available in each
// Region, see AWS Global Infrastructure
// (http://aws.amazon.com/about-aws/global-infrastructure/).
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []APIOptionFunc

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// An integer value representing the logging level.
	LogLevel aws.LogLevel

	// The logger writer interface to write logging messages to.
	Logger aws.Logger

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

func (o Options) GetCredentials() aws.CredentialsProvider {
	return o.Credentials
}

func (o Options) GetEndpointOptions() ResolverOptions {
	return o.EndpointOptions
}

func (o Options) GetEndpointResolver() EndpointResolver {
	return o.EndpointResolver
}

func (o Options) GetLogLevel() aws.LogLevel {
	return o.LogLevel
}

func (o Options) GetLogger() aws.Logger {
	return o.Logger
}

func (o Options) GetRegion() string {
	return o.Region
}

func (o Options) GetRetryer() retry.Retryer {
	return o.Retryer
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]APIOptionFunc, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}

type APIOptionFunc func(*middleware.Stack) error

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		LogLevel:    cfg.LogLevel,
		Logger:      cfg.Logger,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
	}
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("pinpointemail")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	signer := v4.Signer{}
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, signer), middleware.After)
}
