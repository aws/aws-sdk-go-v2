// Code generated by smithy-go-codegen DO NOT EDIT.

package mq

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/mq/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Adds a pending configuration change to a broker.
func (c *Client) UpdateBroker(ctx context.Context, params *UpdateBrokerInput, optFns ...func(*Options)) (*UpdateBrokerOutput, error) {
	stack := middleware.NewStack("UpdateBroker", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpUpdateBrokerMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateBrokerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateBroker(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateBroker",
			Err:           err,
		}
	}
	out := result.(*UpdateBrokerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Updates the broker using the specified properties.
type UpdateBrokerInput struct {
	// The version of the broker engine. For a list of supported engine versions, see
	// https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
	EngineVersion *string
	// A list of information about the configuration.
	Configuration *types.ConfigurationId
	// The list of security groups (1 minimum, 5 maximum) that authorizes connections
	// to brokers.
	SecurityGroups []*string
	// The metadata of the LDAP server used to authenticate and authorize connections
	// to the broker.
	LdapServerMetadata *types.LdapServerMetadataInput
	// The authentication strategy used to secure the broker.
	AuthenticationStrategy types.AuthenticationStrategy
	// The unique ID that Amazon MQ generates for the broker.
	BrokerId *string
	// The host instance type of the broker to upgrade to. For a list of supported
	// instance types, see
	// https://docs.aws.amazon.com/amazon-mq/latest/developer-guide//broker.html#broker-instance-types
	HostInstanceType *string
	// Enables Amazon CloudWatch logging for brokers.
	Logs *types.Logs
	// Enables automatic upgrades to new minor versions for brokers, as Apache releases
	// the versions. The automatic upgrades occur during the maintenance window of the
	// broker or after a manual broker reboot.
	AutoMinorVersionUpgrade *bool
}

type UpdateBrokerOutput struct {
	// The ID of the updated configuration.
	Configuration *types.ConfigurationId
	// Required. The unique ID that Amazon MQ generates for the broker.
	BrokerId *string
	// The list of information about logs to be enabled for the specified broker.
	Logs *types.Logs
	// The host instance type of the broker to upgrade to. For a list of supported
	// instance types, see
	// https://docs.aws.amazon.com/amazon-mq/latest/developer-guide//broker.html#broker-instance-types
	HostInstanceType *string
	// The list of security groups (1 minimum, 5 maximum) that authorizes connections
	// to brokers.
	SecurityGroups []*string
	// The authentication strategy used to secure the broker.
	AuthenticationStrategy types.AuthenticationStrategy
	// The metadata of the LDAP server used to authenticate and authorize connections
	// to the broker.
	LdapServerMetadata *types.LdapServerMetadataOutput
	// The version of the broker engine to upgrade to. For a list of supported engine
	// versions, see
	// https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
	EngineVersion *string
	// The new value of automatic upgrades to new minor version for brokers.
	AutoMinorVersionUpgrade *bool

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpUpdateBrokerMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpUpdateBroker{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateBroker{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateBroker(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mq",
		OperationName: "UpdateBroker",
	}
}
