// Code generated by smithy-go-codegen DO NOT EDIT.

package mq

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/mq/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns information about the specified broker.
func (c *Client) DescribeBroker(ctx context.Context, params *DescribeBrokerInput, optFns ...func(*Options)) (*DescribeBrokerOutput, error) {
	stack := middleware.NewStack("DescribeBroker", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDescribeBrokerMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeBrokerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeBroker(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeBroker",
			Err:           err,
		}
	}
	out := result.(*DescribeBrokerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeBrokerInput struct {
	// The name of the broker. This value must be unique in your AWS account, 1-50
	// characters long, must contain only letters, numbers, dashes, and underscores,
	// and must not contain whitespaces, brackets, wildcard characters, or special
	// characters.
	BrokerId *string
}

type DescribeBrokerOutput struct {
	// The status of the broker.
	BrokerState types.BrokerState
	// The list of security groups (1 minimum, 5 maximum) that authorizes connections
	// to brokers.
	SecurityGroups []*string
	// The list of pending security groups to authorize connections to brokers.
	PendingSecurityGroups []*string
	// A list of information about allocated brokers.
	BrokerInstances []*types.BrokerInstance
	// The authentication strategy used to secure the broker.
	AuthenticationStrategy types.AuthenticationStrategy
	// The list of all ActiveMQ usernames for the specified broker.
	Users []*types.UserSummary
	// The list of groups (2 maximum) that define which subnets and IP ranges the
	// broker can use from different Availability Zones. A SINGLE_INSTANCE deployment
	// requires one subnet (for example, the default subnet). An
	// ACTIVE_STANDBY_MULTI_AZ deployment requires two subnets.
	SubnetIds []*string
	// The time when the broker was created.
	Created *time.Time
	// The host instance type of the broker to upgrade to. For a list of supported
	// instance types, see
	// https://docs.aws.amazon.com/amazon-mq/latest/developer-guide//broker.html#broker-instance-types
	PendingHostInstanceType *string
	// Required. The deployment mode of the broker.
	DeploymentMode types.DeploymentMode
	// Required. The type of broker engine. Note: Currently, Amazon MQ supports only
	// ACTIVEMQ.
	EngineType types.EngineType
	// The list of all revisions for the specified configuration.
	Configurations *types.Configurations
	// Encryption options for the broker.
	EncryptionOptions *types.EncryptionOptions
	// The version of the broker engine to upgrade to. For a list of supported engine
	// versions, see
	// https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
	PendingEngineVersion *string
	// The list of all tags associated with this broker.
	Tags map[string]*string
	// The version of the broker engine. For a list of supported engine versions, see
	// https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
	EngineVersion *string
	// The broker's storage type.
	StorageType types.BrokerStorageType
	// The unique ID that Amazon MQ generates for the broker.
	BrokerId *string
	// The authentication strategy that will be applied when the broker is rebooted.
	PendingAuthenticationStrategy types.AuthenticationStrategy
	// The parameters that determine the WeeklyStartTime.
	MaintenanceWindowStartTime *types.WeeklyStartTime
	// The broker's instance type.
	HostInstanceType *string
	// Required. Enables automatic upgrades to new minor versions for brokers, as
	// Apache releases the versions. The automatic upgrades occur during the
	// maintenance window of the broker or after a manual broker reboot.
	AutoMinorVersionUpgrade *bool
	// The list of information about logs currently enabled and pending to be deployed
	// for the specified broker.
	Logs *types.LogsSummary
	// The name of the broker. This value must be unique in your AWS account, 1-50
	// characters long, must contain only letters, numbers, dashes, and underscores,
	// and must not contain whitespaces, brackets, wildcard characters, or special
	// characters.
	BrokerName *string
	// The metadata of the LDAP server that will be used to authenticate and authorize
	// connections to the broker once it is rebooted.
	PendingLdapServerMetadata *types.LdapServerMetadataOutput
	// The metadata of the LDAP server used to authenticate and authorize connections
	// to the broker.
	LdapServerMetadata *types.LdapServerMetadataOutput
	// Required. Enables connections from applications outside of the VPC that hosts
	// the broker's subnets.
	PubliclyAccessible *bool
	// The Amazon Resource Name (ARN) of the broker.
	BrokerArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDescribeBrokerMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDescribeBroker{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeBroker{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeBroker(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mq",
		OperationName: "DescribeBroker",
	}
}
