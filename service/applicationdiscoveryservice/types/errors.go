// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// The AWS user account does not have permission to perform the action. Check the
// IAM policy associated with this account.
type AuthorizationErrorException struct {
	Message *string
}

func (e *AuthorizationErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AuthorizationErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AuthorizationErrorException) ErrorCode() string             { return "AuthorizationErrorException" }
func (e *AuthorizationErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AuthorizationErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AuthorizationErrorException) HasMessage() bool {
	return e.Message != nil
}

//
type ConflictErrorException struct {
	Message *string
}

func (e *ConflictErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConflictErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConflictErrorException) ErrorCode() string             { return "ConflictErrorException" }
func (e *ConflictErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConflictErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConflictErrorException) HasMessage() bool {
	return e.Message != nil
}

// The home region is not set. Set the home region to continue.
type HomeRegionNotSetException struct {
	Message *string
}

func (e *HomeRegionNotSetException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *HomeRegionNotSetException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *HomeRegionNotSetException) ErrorCode() string             { return "HomeRegionNotSetException" }
func (e *HomeRegionNotSetException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *HomeRegionNotSetException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *HomeRegionNotSetException) HasMessage() bool {
	return e.Message != nil
}

// One or more parameters are not valid. Verify the parameters and try again.
type InvalidParameterException struct {
	Message *string
}

func (e *InvalidParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterException) ErrorCode() string             { return "InvalidParameterException" }
func (e *InvalidParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidParameterException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidParameterException) HasMessage() bool {
	return e.Message != nil
}

// The value of one or more parameters are either invalid or out of range. Verify
// the parameter values and try again.
type InvalidParameterValueException struct {
	Message *string
}

func (e *InvalidParameterValueException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterValueException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterValueException) ErrorCode() string             { return "InvalidParameterValueException" }
func (e *InvalidParameterValueException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidParameterValueException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidParameterValueException) HasMessage() bool {
	return e.Message != nil
}

// This operation is not permitted.
type OperationNotPermittedException struct {
	Message *string
}

func (e *OperationNotPermittedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OperationNotPermittedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OperationNotPermittedException) ErrorCode() string             { return "OperationNotPermittedException" }
func (e *OperationNotPermittedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OperationNotPermittedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OperationNotPermittedException) HasMessage() bool {
	return e.Message != nil
}

// This issue occurs when the same clientRequestToken is used with the
// StartImportTask action, but with different parameters. For example, you use the
// same request token but have two different import URLs, you can encounter this
// issue. If the import tasks are meant to be different, use a different
// clientRequestToken, and try again.
type ResourceInUseException struct {
	Message *string
}

func (e *ResourceInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceInUseException) ErrorCode() string             { return "ResourceInUseException" }
func (e *ResourceInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceInUseException) HasMessage() bool {
	return e.Message != nil
}

// The specified configuration ID was not located. Verify the configuration ID and
// try again.
type ResourceNotFoundException struct {
	Message *string
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The server experienced an internal error. Try again.
type ServerInternalErrorException struct {
	Message *string
}

func (e *ServerInternalErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServerInternalErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServerInternalErrorException) ErrorCode() string             { return "ServerInternalErrorException" }
func (e *ServerInternalErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *ServerInternalErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ServerInternalErrorException) HasMessage() bool {
	return e.Message != nil
}
