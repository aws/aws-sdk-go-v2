// Code generated by smithy-go-codegen DO NOT EDIT.

package applicationdiscoveryservice

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/applicationdiscoveryservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Starts an import task, which allows you to import details of your on-premises
// environment directly into AWS Migration Hub without having to use the
// Application Discovery Service (ADS) tools such as the Discovery Connector or
// Discovery Agent. This gives you the option to perform migration assessment and
// planning directly from your imported data, including the ability to group your
// devices as applications and track their migration status.  <p>To start an import
// request, do this:</p> <ol> <li> <p>Download the specially formatted comma
// separated value (CSV) import template, which you can find here: <a
// href="https://s3-us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv">https://s3-us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv</a>.</p>
// </li> <li> <p>Fill out the template with your server and application data.</p>
// </li> <li> <p>Upload your import file to an Amazon S3 bucket, and make a note of
// it's Object URL. Your import file must be in the CSV format.</p> </li> <li>
// <p>Use the console or the <code>StartImportTask</code> command with the AWS CLI
// or one of the AWS SDKs to import the records from your file.</p> </li> </ol>
// <p>For more information, including step-by-step procedures, see <a
// href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-import.html">Migration
// Hub Import</a> in the <i>AWS Application Discovery Service User Guide</i>.</p>
// <note> <p>There are limits to the number of import tasks you can create (and
// delete) in an AWS account. For more information, see <a
// href="https://docs.aws.amazon.com/application-discovery/latest/userguide/ads_service_limits.html">AWS
// Application Discovery Service Limits</a> in the <i>AWS Application Discovery
// Service User Guide</i>.</p> </note>
func (c *Client) StartImportTask(ctx context.Context, params *StartImportTaskInput, optFns ...func(*Options)) (*StartImportTaskOutput, error) {
	stack := middleware.NewStack("StartImportTask", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpStartImportTaskMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addIdempotencyToken_opStartImportTaskMiddleware(stack, options)
	addOpStartImportTaskValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartImportTask(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartImportTask",
			Err:           err,
		}
	}
	out := result.(*StartImportTaskOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartImportTaskInput struct {
	// The URL for your import file that you've uploaded to Amazon S3.  <note> <p>If
	// you're using the AWS CLI, this URL is structured as follows:
	// <code>s3://BucketName/ImportFileName.CSV</code> </p> </note>
	ImportUrl *string
	// Optional. A unique token that you can provide to prevent the same import request
	// from occurring more than once. If you don't provide a token, a token is
	// automatically generated.  <p>Sending more than one <code>StartImportTask</code>
	// request with the same client request token will return information about the
	// original import task with that client request token.</p>
	ClientRequestToken *string
	// A descriptive name for this request. You can use this name to filter future
	// requests related to this import task, such as identifying applications and
	// servers that were included in this import task. We recommend that you use a
	// meaningful name for each import task.
	Name *string
}

type StartImportTaskOutput struct {
	// An array of information related to the import task request including status
	// information, times, IDs, the Amazon S3 Object URL for the import file, and more.
	Task *types.ImportTask

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpStartImportTaskMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpStartImportTask{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpStartImportTask{}, middleware.After)
}

type idempotencyToken_initializeOpStartImportTask struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpStartImportTask) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpStartImportTask) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*StartImportTaskInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *StartImportTaskInput ")
	}

	if input.ClientRequestToken == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.ClientRequestToken = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opStartImportTaskMiddleware(stack *middleware.Stack, cfg Options) {
	stack.Initialize.Add(&idempotencyToken_initializeOpStartImportTask{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opStartImportTask(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "discovery",
		OperationName: "StartImportTask",
	}
}
