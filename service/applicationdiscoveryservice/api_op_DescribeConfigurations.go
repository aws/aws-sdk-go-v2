// Code generated by smithy-go-codegen DO NOT EDIT.

package applicationdiscoveryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves attributes for a list of configuration item IDs.  <note> <p>All of the
// supplied IDs must be for the same asset type from one of the following:</p> <ul>
// <li> <p>server</p> </li> <li> <p>application</p> </li> <li> <p>process</p> </li>
// <li> <p>connection</p> </li> </ul> <p>Output fields are specific to the asset
// type specified. For example, the output for a <i>server</i> configuration item
// includes a list of attributes about the server, such as host name, operating
// system, number of network cards, etc.</p> <p>For a complete list of outputs for
// each asset type, see <a
// href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-api-queries.html#DescribeConfigurations">Using
// the DescribeConfigurations Action</a> in the <i>AWS Application Discovery
// Service User Guide</i>.</p> </note>
func (c *Client) DescribeConfigurations(ctx context.Context, params *DescribeConfigurationsInput, optFns ...func(*Options)) (*DescribeConfigurationsOutput, error) {
	stack := middleware.NewStack("DescribeConfigurations", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeConfigurationsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeConfigurationsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeConfigurations(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeConfigurations",
			Err:           err,
		}
	}
	out := result.(*DescribeConfigurationsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeConfigurationsInput struct {
	// One or more configuration IDs.
	ConfigurationIds []*string
}

type DescribeConfigurationsOutput struct {
	// A key in the response map. The value is an array of data.
	Configurations []map[string]*string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeConfigurationsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeConfigurations{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeConfigurations{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeConfigurations(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "discovery",
		OperationName: "DescribeConfigurations",
	}
}
