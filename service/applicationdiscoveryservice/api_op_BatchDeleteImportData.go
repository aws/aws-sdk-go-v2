// Code generated by smithy-go-codegen DO NOT EDIT.

package applicationdiscoveryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/applicationdiscoveryservice/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Deletes one or more import tasks, each identified by their import ID. Each
// import task has a number of records that can identify servers or applications.
// <p>AWS Application Discovery Service has built-in matching logic that will
// identify when discovered servers match existing entries that you've previously
// discovered, the information for the already-existing discovered server is
// updated. When you delete an import task that contains records that were used to
// match, the information in those matched records that comes from the deleted
// records will also be deleted.</p>
func (c *Client) BatchDeleteImportData(ctx context.Context, params *BatchDeleteImportDataInput, optFns ...func(*Options)) (*BatchDeleteImportDataOutput, error) {
	if params == nil {
		params = &BatchDeleteImportDataInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "BatchDeleteImportData", params, optFns, addOperationBatchDeleteImportDataMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*BatchDeleteImportDataOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type BatchDeleteImportDataInput struct {

	// The IDs for the import tasks that you want to delete.
	//
	// This member is required.
	ImportTaskIds []*string
}

type BatchDeleteImportDataOutput struct {

	// Error messages returned for each import task that you deleted as a response for
	// this command.
	Errors []*types.BatchDeleteImportDataError

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationBatchDeleteImportDataMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpBatchDeleteImportData{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpBatchDeleteImportData{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpBatchDeleteImportDataValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opBatchDeleteImportData(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opBatchDeleteImportData(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "discovery",
		OperationName: "BatchDeleteImportData",
	}
}
