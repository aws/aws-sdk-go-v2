// Code generated by smithy-go-codegen DO NOT EDIT.

package applicationdiscoveryservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/applicationdiscoveryservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves a list of servers that are one network hop away from a specified
// server.
func (c *Client) ListServerNeighbors(ctx context.Context, params *ListServerNeighborsInput, optFns ...func(*Options)) (*ListServerNeighborsOutput, error) {
	stack := middleware.NewStack("ListServerNeighbors", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListServerNeighborsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListServerNeighborsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListServerNeighbors(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListServerNeighbors",
			Err:           err,
		}
	}
	out := result.(*ListServerNeighborsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListServerNeighborsInput struct {
	// Maximum number of results to return in a single page of output.
	MaxResults *int32
	// List of configuration IDs to test for one-hop-away.
	NeighborConfigurationIds []*string
	// Flag to indicate if port and protocol information is needed as part of the
	// response.
	PortInformationNeeded *bool
	// Token to retrieve the next set of results. For example, if you previously
	// specified 100 IDs for ListServerNeighborsRequest$neighborConfigurationIds but
	// set ListServerNeighborsRequest$maxResults to 10, you received a set of 10
	// results along with a token. Use that token in this query to get the next set of
	// 10.
	NextToken *string
	// Configuration ID of the server for which neighbors are being listed.
	ConfigurationId *string
}

type ListServerNeighborsOutput struct {
	// Count of distinct servers that are one hop away from the given server.
	KnownDependencyCount *int64
	// Token to retrieve the next set of results. For example, if you specified 100 IDs
	// for ListServerNeighborsRequest$neighborConfigurationIds but set
	// ListServerNeighborsRequest$maxResults to 10, you received a set of 10 results
	// along with this token. Use this token in the next query to retrieve the next set
	// of 10.
	NextToken *string
	// List of distinct servers that are one hop away from the given server.
	Neighbors []*types.NeighborConnectionDetail

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListServerNeighborsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListServerNeighbors{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListServerNeighbors{}, middleware.After)
}

func newServiceMetadataMiddleware_opListServerNeighbors(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "discovery",
		OperationName: "ListServerNeighbors",
	}
}
