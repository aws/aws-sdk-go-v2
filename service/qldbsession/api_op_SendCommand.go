// Code generated by smithy-go-codegen DO NOT EDIT.

package qldbsession

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/qldbsession/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sends a command to an Amazon QLDB ledger. Instead of interacting directly with
// this API, we recommend that you use the Amazon QLDB Driver or the QLDB Shell to
// execute data transactions on a ledger.
//
//     * If you are working with an AWS
// SDK, use the QLDB Driver. The driver provides a high-level abstraction layer
// above this qldbsession data plane and manages SendCommand API calls for you. For
// information and a list of supported programming languages, see Getting started
// with the driver
// (https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html)
// in the Amazon QLDB Developer Guide.
//
//     * If you are working with the AWS
// Command Line Interface (AWS CLI), use the QLDB Shell. The shell is a command
// line interface that uses the QLDB Driver to interact with a ledger. For
// information, see Accessing Amazon QLDB using the QLDB Shell
// (https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html).
func (c *Client) SendCommand(ctx context.Context, params *SendCommandInput, optFns ...func(*Options)) (*SendCommandOutput, error) {
	stack := middleware.NewStack("SendCommand", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson10_serdeOpSendCommandMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSendCommandValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSendCommand(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SendCommand",
			Err:           err,
		}
	}
	out := result.(*SendCommandOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SendCommandInput struct {
	// Command to start a new session. A session token is obtained as part of the
	// response.
	StartSession *types.StartSessionRequest
	// Command to commit the specified transaction.
	CommitTransaction *types.CommitTransactionRequest
	// Command to end the current session.
	EndSession *types.EndSessionRequest
	// Command to start a new transaction.
	StartTransaction *types.StartTransactionRequest
	// Command to abort the current transaction.
	AbortTransaction *types.AbortTransactionRequest
	// Command to fetch a page.
	FetchPage *types.FetchPageRequest
	// Specifies the session token for the current command. A session token is constant
	// throughout the life of the session. To obtain a session token, run the
	// StartSession command. This SessionToken is required for every subsequent command
	// that is issued during the current session.
	SessionToken *string
	// Command to execute a statement in the specified transaction.
	ExecuteStatement *types.ExecuteStatementRequest
}

type SendCommandOutput struct {
	// Contains the details of the ended session.
	EndSession *types.EndSessionResult
	// Contains the details of the fetched page.
	FetchPage *types.FetchPageResult
	// Contains the details of the aborted transaction.
	AbortTransaction *types.AbortTransactionResult
	// Contains the details of the started session that includes a session token. This
	// SessionToken is required for every subsequent command that is issued during the
	// current session.
	StartSession *types.StartSessionResult
	// Contains the details of the started transaction.
	StartTransaction *types.StartTransactionResult
	// Contains the details of the committed transaction.
	CommitTransaction *types.CommitTransactionResult
	// Contains the details of the executed statement.
	ExecuteStatement *types.ExecuteStatementResult

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpSendCommandMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpSendCommand{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpSendCommand{}, middleware.After)
}

func newServiceMetadataMiddleware_opSendCommand(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "qldb",
		OperationName: "SendCommand",
	}
}
