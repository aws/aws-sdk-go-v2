// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ColumnNullable string

// Enum values for ColumnNullable
const (
	ColumnNullableNotNull  ColumnNullable = "NOT_NULL"
	ColumnNullableNullable ColumnNullable = "NULLABLE"
	ColumnNullableUnknown  ColumnNullable = "UNKNOWN"
)

// Values returns all known values for ColumnNullable. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ColumnNullable) Values() []ColumnNullable {
	return []ColumnNullable{
		"NOT_NULL",
		"NULLABLE",
		"UNKNOWN",
	}
}

type DataCatalogType string

// Enum values for DataCatalogType
const (
	DataCatalogTypeLambda DataCatalogType = "LAMBDA"
	DataCatalogTypeGlue   DataCatalogType = "GLUE"
	DataCatalogTypeHive   DataCatalogType = "HIVE"
)

// Values returns all known values for DataCatalogType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DataCatalogType) Values() []DataCatalogType {
	return []DataCatalogType{
		"LAMBDA",
		"GLUE",
		"HIVE",
	}
}

type EncryptionOption string

// Enum values for EncryptionOption
const (
	EncryptionOptionSseS3  EncryptionOption = "SSE_S3"
	EncryptionOptionSseKms EncryptionOption = "SSE_KMS"
	EncryptionOptionCseKms EncryptionOption = "CSE_KMS"
)

// Values returns all known values for EncryptionOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (EncryptionOption) Values() []EncryptionOption {
	return []EncryptionOption{
		"SSE_S3",
		"SSE_KMS",
		"CSE_KMS",
	}
}

type QueryExecutionState string

// Enum values for QueryExecutionState
const (
	QueryExecutionStateQueued    QueryExecutionState = "QUEUED"
	QueryExecutionStateRunning   QueryExecutionState = "RUNNING"
	QueryExecutionStateSucceeded QueryExecutionState = "SUCCEEDED"
	QueryExecutionStateFailed    QueryExecutionState = "FAILED"
	QueryExecutionStateCancelled QueryExecutionState = "CANCELLED"
)

// Values returns all known values for QueryExecutionState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (QueryExecutionState) Values() []QueryExecutionState {
	return []QueryExecutionState{
		"QUEUED",
		"RUNNING",
		"SUCCEEDED",
		"FAILED",
		"CANCELLED",
	}
}

type S3AclOption string

// Enum values for S3AclOption
const (
	S3AclOptionBucketOwnerFullControl S3AclOption = "BUCKET_OWNER_FULL_CONTROL"
)

// Values returns all known values for S3AclOption. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (S3AclOption) Values() []S3AclOption {
	return []S3AclOption{
		"BUCKET_OWNER_FULL_CONTROL",
	}
}

type StatementType string

// Enum values for StatementType
const (
	StatementTypeDdl     StatementType = "DDL"
	StatementTypeDml     StatementType = "DML"
	StatementTypeUtility StatementType = "UTILITY"
)

// Values returns all known values for StatementType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StatementType) Values() []StatementType {
	return []StatementType{
		"DDL",
		"DML",
		"UTILITY",
	}
}

type ThrottleReason string

// Enum values for ThrottleReason
const (
	ThrottleReasonConcurrentQueryLimitExceeded ThrottleReason = "CONCURRENT_QUERY_LIMIT_EXCEEDED"
)

// Values returns all known values for ThrottleReason. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ThrottleReason) Values() []ThrottleReason {
	return []ThrottleReason{
		"CONCURRENT_QUERY_LIMIT_EXCEEDED",
	}
}

type WorkGroupState string

// Enum values for WorkGroupState
const (
	WorkGroupStateEnabled  WorkGroupState = "ENABLED"
	WorkGroupStateDisabled WorkGroupState = "DISABLED"
)

// Values returns all known values for WorkGroupState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (WorkGroupState) Values() []WorkGroupState {
	return []WorkGroupState{
		"ENABLED",
		"DISABLED",
	}
}
