// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/aws/smithy-go"
)

// Indicates a platform issue, which may be due to a transient condition or outage.
type InternalServerException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *InternalServerException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServerException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServerException) ErrorCode() string {
	if e.Code == nil {
		return "InternalServerException"
	}
	return *e.Code
}
func (e *InternalServerException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// Indicates that something is wrong with the input to the request. For example, a
// required parameter may be missing or out of range.
type InvalidRequestException struct {
	Message *string

	Code *string

	AthenaErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidRequestException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidRequestException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidRequestException) ErrorCode() string {
	if e.Code == nil {
		return "InvalidRequestException"
	}
	return *e.Code
}
func (e *InvalidRequestException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// An exception that Athena received when it called a custom metastore. Occurs if
// the error is not caused by user input (InvalidRequestException) or from the
// Athena platform (InternalServerException). For example, if a user-created Lambda
// function is missing permissions, the Lambda 4XX exception is returned in a
// MetadataException.
type MetadataException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *MetadataException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MetadataException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MetadataException) ErrorCode() string {
	if e.Code == nil {
		return "MetadataException"
	}
	return *e.Code
}
func (e *MetadataException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// A resource, such as a workgroup, was not found.
type ResourceNotFoundException struct {
	Message *string

	Code *string

	ResourceName *string

	noSmithyDocumentSerde
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string {
	if e.Code == nil {
		return "ResourceNotFoundException"
	}
	return *e.Code
}
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified session already exists.
type SessionAlreadyExistsException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *SessionAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SessionAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SessionAlreadyExistsException) ErrorCode() string {
	if e.Code == nil {
		return "SessionAlreadyExistsException"
	}
	return *e.Code
}
func (e *SessionAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Indicates that the request was throttled.
type TooManyRequestsException struct {
	Message *string

	Code *string

	Reason ThrottleReason

	noSmithyDocumentSerde
}

func (e *TooManyRequestsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyRequestsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyRequestsException) ErrorCode() string {
	if e.Code == nil {
		return "TooManyRequestsException"
	}
	return *e.Code
}
func (e *TooManyRequestsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
