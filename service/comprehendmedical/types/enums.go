// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AttributeName string

// Enum values for AttributeName
const (
	AttributeNameSign      AttributeName = "SIGN"
	AttributeNameSymptom   AttributeName = "SYMPTOM"
	AttributeNameDiagnosis AttributeName = "DIAGNOSIS"
	AttributeNameNegation  AttributeName = "NEGATION"
)

// Values returns all known values for AttributeName. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AttributeName) Values() []AttributeName {
	return []AttributeName{
		"SIGN",
		"SYMPTOM",
		"DIAGNOSIS",
		"NEGATION",
	}
}

type EntitySubType string

// Enum values for EntitySubType
const (
	EntitySubTypeName                    EntitySubType = "NAME"
	EntitySubTypeDosage                  EntitySubType = "DOSAGE"
	EntitySubTypeRoute_or_mode           EntitySubType = "ROUTE_OR_MODE"
	EntitySubTypeForm                    EntitySubType = "FORM"
	EntitySubTypeFrequency               EntitySubType = "FREQUENCY"
	EntitySubTypeDuration                EntitySubType = "DURATION"
	EntitySubTypeGeneric_name            EntitySubType = "GENERIC_NAME"
	EntitySubTypeBrand_name              EntitySubType = "BRAND_NAME"
	EntitySubTypeStrength                EntitySubType = "STRENGTH"
	EntitySubTypeRate                    EntitySubType = "RATE"
	EntitySubTypeAcuity                  EntitySubType = "ACUITY"
	EntitySubTypeTest_name               EntitySubType = "TEST_NAME"
	EntitySubTypeTest_value              EntitySubType = "TEST_VALUE"
	EntitySubTypeTest_units              EntitySubType = "TEST_UNITS"
	EntitySubTypeProcedure_name          EntitySubType = "PROCEDURE_NAME"
	EntitySubTypeTreatment_name          EntitySubType = "TREATMENT_NAME"
	EntitySubTypeDate                    EntitySubType = "DATE"
	EntitySubTypeAge                     EntitySubType = "AGE"
	EntitySubTypeContact_point           EntitySubType = "CONTACT_POINT"
	EntitySubTypeEmail                   EntitySubType = "EMAIL"
	EntitySubTypeIdentifier              EntitySubType = "IDENTIFIER"
	EntitySubTypeUrl                     EntitySubType = "URL"
	EntitySubTypeAddress                 EntitySubType = "ADDRESS"
	EntitySubTypeProfession              EntitySubType = "PROFESSION"
	EntitySubTypeSystem_organ_site       EntitySubType = "SYSTEM_ORGAN_SITE"
	EntitySubTypeDirection               EntitySubType = "DIRECTION"
	EntitySubTypeQuality                 EntitySubType = "QUALITY"
	EntitySubTypeQuantity                EntitySubType = "QUANTITY"
	EntitySubTypeTime_expression         EntitySubType = "TIME_EXPRESSION"
	EntitySubTypeTime_to_medication_name EntitySubType = "TIME_TO_MEDICATION_NAME"
	EntitySubTypeTime_to_dx_name         EntitySubType = "TIME_TO_DX_NAME"
	EntitySubTypeTime_to_test_name       EntitySubType = "TIME_TO_TEST_NAME"
	EntitySubTypeTime_to_procedure_name  EntitySubType = "TIME_TO_PROCEDURE_NAME"
	EntitySubTypeTime_to_treatment_name  EntitySubType = "TIME_TO_TREATMENT_NAME"
)

// Values returns all known values for EntitySubType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (EntitySubType) Values() []EntitySubType {
	return []EntitySubType{
		"NAME",
		"DOSAGE",
		"ROUTE_OR_MODE",
		"FORM",
		"FREQUENCY",
		"DURATION",
		"GENERIC_NAME",
		"BRAND_NAME",
		"STRENGTH",
		"RATE",
		"ACUITY",
		"TEST_NAME",
		"TEST_VALUE",
		"TEST_UNITS",
		"PROCEDURE_NAME",
		"TREATMENT_NAME",
		"DATE",
		"AGE",
		"CONTACT_POINT",
		"EMAIL",
		"IDENTIFIER",
		"URL",
		"ADDRESS",
		"PROFESSION",
		"SYSTEM_ORGAN_SITE",
		"DIRECTION",
		"QUALITY",
		"QUANTITY",
		"TIME_EXPRESSION",
		"TIME_TO_MEDICATION_NAME",
		"TIME_TO_DX_NAME",
		"TIME_TO_TEST_NAME",
		"TIME_TO_PROCEDURE_NAME",
		"TIME_TO_TREATMENT_NAME",
	}
}

type EntityType string

// Enum values for EntityType
const (
	EntityTypeMedication                   EntityType = "MEDICATION"
	EntityTypeMedical_condition            EntityType = "MEDICAL_CONDITION"
	EntityTypeProtected_health_information EntityType = "PROTECTED_HEALTH_INFORMATION"
	EntityTypeTest_treatment_procedure     EntityType = "TEST_TREATMENT_PROCEDURE"
	EntityTypeAnatomy                      EntityType = "ANATOMY"
	EntityTypeTime_expression              EntityType = "TIME_EXPRESSION"
)

// Values returns all known values for EntityType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (EntityType) Values() []EntityType {
	return []EntityType{
		"MEDICATION",
		"MEDICAL_CONDITION",
		"PROTECTED_HEALTH_INFORMATION",
		"TEST_TREATMENT_PROCEDURE",
		"ANATOMY",
		"TIME_EXPRESSION",
	}
}

type ICD10CMAttributeType string

// Enum values for ICD10CMAttributeType
const (
	ICD10CMAttributeTypeAcuity            ICD10CMAttributeType = "ACUITY"
	ICD10CMAttributeTypeDirection         ICD10CMAttributeType = "DIRECTION"
	ICD10CMAttributeTypeSystem_organ_site ICD10CMAttributeType = "SYSTEM_ORGAN_SITE"
	ICD10CMAttributeTypeQuality           ICD10CMAttributeType = "QUALITY"
	ICD10CMAttributeTypeQuantity          ICD10CMAttributeType = "QUANTITY"
)

// Values returns all known values for ICD10CMAttributeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMAttributeType) Values() []ICD10CMAttributeType {
	return []ICD10CMAttributeType{
		"ACUITY",
		"DIRECTION",
		"SYSTEM_ORGAN_SITE",
		"QUALITY",
		"QUANTITY",
	}
}

type ICD10CMEntityCategory string

// Enum values for ICD10CMEntityCategory
const (
	ICD10CMEntityCategoryMedical_condition ICD10CMEntityCategory = "MEDICAL_CONDITION"
)

// Values returns all known values for ICD10CMEntityCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMEntityCategory) Values() []ICD10CMEntityCategory {
	return []ICD10CMEntityCategory{
		"MEDICAL_CONDITION",
	}
}

type ICD10CMEntityType string

// Enum values for ICD10CMEntityType
const (
	ICD10CMEntityTypeDx_name ICD10CMEntityType = "DX_NAME"
)

// Values returns all known values for ICD10CMEntityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMEntityType) Values() []ICD10CMEntityType {
	return []ICD10CMEntityType{
		"DX_NAME",
	}
}

type ICD10CMTraitName string

// Enum values for ICD10CMTraitName
const (
	ICD10CMTraitNameNegation  ICD10CMTraitName = "NEGATION"
	ICD10CMTraitNameDiagnosis ICD10CMTraitName = "DIAGNOSIS"
	ICD10CMTraitNameSign      ICD10CMTraitName = "SIGN"
	ICD10CMTraitNameSymptom   ICD10CMTraitName = "SYMPTOM"
)

// Values returns all known values for ICD10CMTraitName. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMTraitName) Values() []ICD10CMTraitName {
	return []ICD10CMTraitName{
		"NEGATION",
		"DIAGNOSIS",
		"SIGN",
		"SYMPTOM",
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusSubmitted       JobStatus = "SUBMITTED"
	JobStatusIn_progress     JobStatus = "IN_PROGRESS"
	JobStatusCompleted       JobStatus = "COMPLETED"
	JobStatusPartial_success JobStatus = "PARTIAL_SUCCESS"
	JobStatusFailed          JobStatus = "FAILED"
	JobStatusStop_requested  JobStatus = "STOP_REQUESTED"
	JobStatusStopped         JobStatus = "STOPPED"
)

// Values returns all known values for JobStatus. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (JobStatus) Values() []JobStatus {
	return []JobStatus{
		"SUBMITTED",
		"IN_PROGRESS",
		"COMPLETED",
		"PARTIAL_SUCCESS",
		"FAILED",
		"STOP_REQUESTED",
		"STOPPED",
	}
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeEn LanguageCode = "en"
)

// Values returns all known values for LanguageCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (LanguageCode) Values() []LanguageCode {
	return []LanguageCode{
		"en",
	}
}

type RelationshipType string

// Enum values for RelationshipType
const (
	RelationshipTypeEvery             RelationshipType = "EVERY"
	RelationshipTypeWith_dosage       RelationshipType = "WITH_DOSAGE"
	RelationshipTypeAdministered_via  RelationshipType = "ADMINISTERED_VIA"
	RelationshipTypeFor               RelationshipType = "FOR"
	RelationshipTypeNegative          RelationshipType = "NEGATIVE"
	RelationshipTypeOverlap           RelationshipType = "OVERLAP"
	RelationshipTypeDosage            RelationshipType = "DOSAGE"
	RelationshipTypeRoute_or_mode     RelationshipType = "ROUTE_OR_MODE"
	RelationshipTypeForm              RelationshipType = "FORM"
	RelationshipTypeFrequency         RelationshipType = "FREQUENCY"
	RelationshipTypeDuration          RelationshipType = "DURATION"
	RelationshipTypeStrength          RelationshipType = "STRENGTH"
	RelationshipTypeRate              RelationshipType = "RATE"
	RelationshipTypeAcuity            RelationshipType = "ACUITY"
	RelationshipTypeTest_value        RelationshipType = "TEST_VALUE"
	RelationshipTypeTest_units        RelationshipType = "TEST_UNITS"
	RelationshipTypeDirection         RelationshipType = "DIRECTION"
	RelationshipTypeSystem_organ_site RelationshipType = "SYSTEM_ORGAN_SITE"
)

// Values returns all known values for RelationshipType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RelationshipType) Values() []RelationshipType {
	return []RelationshipType{
		"EVERY",
		"WITH_DOSAGE",
		"ADMINISTERED_VIA",
		"FOR",
		"NEGATIVE",
		"OVERLAP",
		"DOSAGE",
		"ROUTE_OR_MODE",
		"FORM",
		"FREQUENCY",
		"DURATION",
		"STRENGTH",
		"RATE",
		"ACUITY",
		"TEST_VALUE",
		"TEST_UNITS",
		"DIRECTION",
		"SYSTEM_ORGAN_SITE",
	}
}

type RxNormAttributeType string

// Enum values for RxNormAttributeType
const (
	RxNormAttributeTypeDosage        RxNormAttributeType = "DOSAGE"
	RxNormAttributeTypeDuration      RxNormAttributeType = "DURATION"
	RxNormAttributeTypeForm          RxNormAttributeType = "FORM"
	RxNormAttributeTypeFrequency     RxNormAttributeType = "FREQUENCY"
	RxNormAttributeTypeRate          RxNormAttributeType = "RATE"
	RxNormAttributeTypeRoute_or_mode RxNormAttributeType = "ROUTE_OR_MODE"
	RxNormAttributeTypeStrength      RxNormAttributeType = "STRENGTH"
)

// Values returns all known values for RxNormAttributeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RxNormAttributeType) Values() []RxNormAttributeType {
	return []RxNormAttributeType{
		"DOSAGE",
		"DURATION",
		"FORM",
		"FREQUENCY",
		"RATE",
		"ROUTE_OR_MODE",
		"STRENGTH",
	}
}

type RxNormEntityCategory string

// Enum values for RxNormEntityCategory
const (
	RxNormEntityCategoryMedication RxNormEntityCategory = "MEDICATION"
)

// Values returns all known values for RxNormEntityCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RxNormEntityCategory) Values() []RxNormEntityCategory {
	return []RxNormEntityCategory{
		"MEDICATION",
	}
}

type RxNormEntityType string

// Enum values for RxNormEntityType
const (
	RxNormEntityTypeBrand_name   RxNormEntityType = "BRAND_NAME"
	RxNormEntityTypeGeneric_name RxNormEntityType = "GENERIC_NAME"
)

// Values returns all known values for RxNormEntityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RxNormEntityType) Values() []RxNormEntityType {
	return []RxNormEntityType{
		"BRAND_NAME",
		"GENERIC_NAME",
	}
}

type RxNormTraitName string

// Enum values for RxNormTraitName
const (
	RxNormTraitNameNegation RxNormTraitName = "NEGATION"
)

// Values returns all known values for RxNormTraitName. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RxNormTraitName) Values() []RxNormTraitName {
	return []RxNormTraitName{
		"NEGATION",
	}
}
