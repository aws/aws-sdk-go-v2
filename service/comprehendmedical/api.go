// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package comprehendmedical

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opDetectEntities = "DetectEntities"

// DetectEntitiesRequest is a API request type for the DetectEntities API operation.
type DetectEntitiesRequest struct {
	*aws.Request
	Input *DetectEntitiesInput
	Copy  func(*DetectEntitiesInput) DetectEntitiesRequest
}

// Send marshals and sends the DetectEntities API request.
func (r DetectEntitiesRequest) Send() (*DetectEntitiesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DetectEntitiesOutput), nil
}

// DetectEntitiesRequest returns a request value for making API operation for
// AWS Comprehend Medical.
//
// Inspects the clinical text for a variety of medical entities and returns
// specific information about them such as entity category, location, and confidence
// score on that information .
//
//    // Example sending a request using the DetectEntitiesRequest method.
//    req := client.DetectEntitiesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/DetectEntities
func (c *ComprehendMedical) DetectEntitiesRequest(input *DetectEntitiesInput) DetectEntitiesRequest {
	op := &aws.Operation{
		Name:       opDetectEntities,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetectEntitiesInput{}
	}

	output := &DetectEntitiesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DetectEntitiesRequest{Request: req, Input: input, Copy: c.DetectEntitiesRequest}
}

const opDetectPHI = "DetectPHI"

// DetectPHIRequest is a API request type for the DetectPHI API operation.
type DetectPHIRequest struct {
	*aws.Request
	Input *DetectPHIInput
	Copy  func(*DetectPHIInput) DetectPHIRequest
}

// Send marshals and sends the DetectPHI API request.
func (r DetectPHIRequest) Send() (*DetectPHIOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DetectPHIOutput), nil
}

// DetectPHIRequest returns a request value for making API operation for
// AWS Comprehend Medical.
//
// Inspects the clinical text for personal health information (PHI) entities
// and entity category, location, and confidence score on that information.
//
//    // Example sending a request using the DetectPHIRequest method.
//    req := client.DetectPHIRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/DetectPHI
func (c *ComprehendMedical) DetectPHIRequest(input *DetectPHIInput) DetectPHIRequest {
	op := &aws.Operation{
		Name:       opDetectPHI,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetectPHIInput{}
	}

	output := &DetectPHIOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DetectPHIRequest{Request: req, Input: input, Copy: c.DetectPHIRequest}
}

// An extracted segment of the text that is an attribute of an entity, or otherwise
// related to an entity, such as the dosage of a medication taken. It contains
// information about the attribute such as id, begin and end offset within the
// input text, and the segment of the input text.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/Attribute
type Attribute struct {
	_ struct{} `type:"structure"`

	// The 0-based character offset in the input text that shows where the attribute
	// begins. The offset returns the UTF-8 code point in the string.
	BeginOffset *int64 `type:"integer"`

	// The 0-based character offset in the input text that shows where the attribute
	// ends. The offset returns the UTF-8 code point in the string.
	EndOffset *int64 `type:"integer"`

	// The numeric identifier for this attribute. This is a monotonically increasing
	// id unique within this response rather than a global unique identifier.
	Id *int64 `type:"integer"`

	// The level of confidence that Comprehend Medical has that this attribute is
	// correctly related to this entity.
	RelationshipScore *float64 `type:"float"`

	// The level of confidence that Comprehend Medical has that the segment of text
	// is correctly recognized as an attribute.
	Score *float64 `type:"float"`

	// The segment of input text extracted as this attribute.
	Text *string `min:"1" type:"string"`

	// Contextual information for this attribute.
	Traits []Trait `type:"list"`

	// The type of attribute.
	Type EntitySubType `type:"string" enum:"true"`
}

// String returns the string representation
func (s Attribute) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Attribute) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/DetectEntitiesRequest
type DetectEntitiesInput struct {
	_ struct{} `type:"structure"`

	// A UTF-8 text string containing the clinical content being examined for entities.
	// Each string must contain fewer than 20,000 bytes of characters.
	//
	// Text is a required field
	Text *string `min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s DetectEntitiesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DetectEntitiesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DetectEntitiesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DetectEntitiesInput"}

	if s.Text == nil {
		invalidParams.Add(aws.NewErrParamRequired("Text"))
	}
	if s.Text != nil && len(*s.Text) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Text", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/DetectEntitiesResponse
type DetectEntitiesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The collection of medical entities extracted from the input text and their
	// associated information. For each entity, the response provides the entity
	// text, the entity category, where the entity text begins and ends, and the
	// level of confidence that Comprehend Medical has in the detection and analysis.
	// Attributes and traits of the entity are also returned.
	//
	// Entities is a required field
	Entities []Entity `type:"list" required:"true"`

	// If the result of the previous request to DetectEntities was truncated, include
	// the Paginationtoken to fetch the next page of entities.
	PaginationToken *string `min:"1" type:"string"`

	// Attributes extracted from the input text that we were unable to relate to
	// an entity.
	UnmappedAttributes []UnmappedAttribute `type:"list"`
}

// String returns the string representation
func (s DetectEntitiesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DetectEntitiesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DetectEntitiesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/DetectPHIRequest
type DetectPHIInput struct {
	_ struct{} `type:"structure"`

	// A UTF-8 text string containing the clinical content being examined for PHI
	// entities. Each string must contain fewer than 20,000 bytes of characters.
	//
	// Text is a required field
	Text *string `min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s DetectPHIInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DetectPHIInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DetectPHIInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DetectPHIInput"}

	if s.Text == nil {
		invalidParams.Add(aws.NewErrParamRequired("Text"))
	}
	if s.Text != nil && len(*s.Text) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Text", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/DetectPHIResponse
type DetectPHIOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The collection of PHI entities extracted from the input text and their associated
	// information. For each entity, the response provides the entity text, the
	// entity category, where the entity text begins and ends, and the level of
	// confidence that Comprehend Medical has in its detection.
	//
	// Entities is a required field
	Entities []Entity `type:"list" required:"true"`

	// If the result of the previous request to DetectPHI was truncated, include
	// the Paginationtoken to fetch the next page of PHI entities.
	PaginationToken *string `min:"1" type:"string"`
}

// String returns the string representation
func (s DetectPHIOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DetectPHIOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DetectPHIOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Provides information about an extracted medical entity.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/Entity
type Entity struct {
	_ struct{} `type:"structure"`

	// The extracted attributes that relate to this entity.
	Attributes []Attribute `type:"list"`

	// The 0-based character offset in the input text that shows where the entity
	// begins. The offset returns the UTF-8 code point in the string.
	BeginOffset *int64 `type:"integer"`

	// The category of the entity.
	Category EntityType `type:"string" enum:"true"`

	// The 0-based character offset in the input text that shows where the entity
	// ends. The offset returns the UTF-8 code point in the string.
	EndOffset *int64 `type:"integer"`

	// The numeric identifier for the entity. This is a monotonically increasing
	// id unique within this response rather than a global unique identifier.
	Id *int64 `type:"integer"`

	// The level of confidence that Comprehend Medical has in the accuracy of the
	// detection.
	Score *float64 `type:"float"`

	// The segment of input text extracted as this entity.
	Text *string `min:"1" type:"string"`

	// Contextual information for the entity
	Traits []Trait `type:"list"`

	// Describes the specific type of entity with category of entities.
	Type EntitySubType `type:"string" enum:"true"`
}

// String returns the string representation
func (s Entity) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Entity) GoString() string {
	return s.String()
}

// Provides contextual information about the extracted entity.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/Trait
type Trait struct {
	_ struct{} `type:"structure"`

	// Provides a name or contextual description about the trait.
	Name AttributeName `type:"string" enum:"true"`

	// The level of confidence that Comprehend Medical has in the accuracy of this
	// trait.
	Score *float64 `type:"float"`
}

// String returns the string representation
func (s Trait) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Trait) GoString() string {
	return s.String()
}

// An attribute that we extracted, but were unable to relate to an entity.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/comprehendmedical-2018-10-30/UnmappedAttribute
type UnmappedAttribute struct {
	_ struct{} `type:"structure"`

	// The specific attribute that has been extracted but not mapped to an entity.
	Attribute *Attribute `type:"structure"`

	// The type of the attribute, could be one of the following values: "MEDICATION",
	// "MEDICAL_CONDITION", "ANATOMY", "TEST_AND_TREATMENT_PROCEDURE" or "PERSONAL_HEALTH_INFORMATION".
	Type EntityType `type:"string" enum:"true"`
}

// String returns the string representation
func (s UnmappedAttribute) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UnmappedAttribute) GoString() string {
	return s.String()
}

type AttributeName string

// Enum values for AttributeName
const (
	AttributeNameSign      AttributeName = "SIGN"
	AttributeNameSymptom   AttributeName = "SYMPTOM"
	AttributeNameDiagnosis AttributeName = "DIAGNOSIS"
	AttributeNameNegation  AttributeName = "NEGATION"
)

func (enum AttributeName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AttributeName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EntitySubType string

// Enum values for EntitySubType
const (
	EntitySubTypeName            EntitySubType = "NAME"
	EntitySubTypeDosage          EntitySubType = "DOSAGE"
	EntitySubTypeRouteOrMode     EntitySubType = "ROUTE_OR_MODE"
	EntitySubTypeForm            EntitySubType = "FORM"
	EntitySubTypeFrequency       EntitySubType = "FREQUENCY"
	EntitySubTypeDuration        EntitySubType = "DURATION"
	EntitySubTypeGenericName     EntitySubType = "GENERIC_NAME"
	EntitySubTypeBrandName       EntitySubType = "BRAND_NAME"
	EntitySubTypeStrength        EntitySubType = "STRENGTH"
	EntitySubTypeRate            EntitySubType = "RATE"
	EntitySubTypeAcuity          EntitySubType = "ACUITY"
	EntitySubTypeTestName        EntitySubType = "TEST_NAME"
	EntitySubTypeTestValue       EntitySubType = "TEST_VALUE"
	EntitySubTypeTestUnits       EntitySubType = "TEST_UNITS"
	EntitySubTypeProcedureName   EntitySubType = "PROCEDURE_NAME"
	EntitySubTypeTreatmentName   EntitySubType = "TREATMENT_NAME"
	EntitySubTypeDate            EntitySubType = "DATE"
	EntitySubTypeAge             EntitySubType = "AGE"
	EntitySubTypeContactPoint    EntitySubType = "CONTACT_POINT"
	EntitySubTypeEmail           EntitySubType = "EMAIL"
	EntitySubTypeIdentifier      EntitySubType = "IDENTIFIER"
	EntitySubTypeUrl             EntitySubType = "URL"
	EntitySubTypeAddress         EntitySubType = "ADDRESS"
	EntitySubTypeProfession      EntitySubType = "PROFESSION"
	EntitySubTypeSystemOrganSite EntitySubType = "SYSTEM_ORGAN_SITE"
	EntitySubTypeDirection       EntitySubType = "DIRECTION"
	EntitySubTypeQuality         EntitySubType = "QUALITY"
	EntitySubTypeQuantity        EntitySubType = "QUANTITY"
)

func (enum EntitySubType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EntitySubType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EntityType string

// Enum values for EntityType
const (
	EntityTypeMedication                 EntityType = "MEDICATION"
	EntityTypeMedicalCondition           EntityType = "MEDICAL_CONDITION"
	EntityTypeProtectedHealthInformation EntityType = "PROTECTED_HEALTH_INFORMATION"
	EntityTypeTestTreatmentProcedure     EntityType = "TEST_TREATMENT_PROCEDURE"
	EntityTypeAnatomy                    EntityType = "ANATOMY"
)

func (enum EntityType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EntityType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
