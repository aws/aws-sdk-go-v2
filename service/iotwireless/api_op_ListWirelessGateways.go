// Code generated by smithy-go-codegen DO NOT EDIT.

package iotwireless

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iotwireless/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Lists the wireless gateways registered to your AWS account.
func (c *Client) ListWirelessGateways(ctx context.Context, params *ListWirelessGatewaysInput, optFns ...func(*Options)) (*ListWirelessGatewaysOutput, error) {
	if params == nil {
		params = &ListWirelessGatewaysInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListWirelessGateways", params, optFns, addOperationListWirelessGatewaysMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListWirelessGatewaysOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListWirelessGatewaysInput struct {

	// The maximum number of results to return in this operation.
	MaxResults int32

	// To retrieve the next set of results, the nextToken value from a previous
	// response; otherwise null to receive the first set of results.
	NextToken *string
}

type ListWirelessGatewaysOutput struct {

	// The token to use to get the next set of results, or null if there are no
	// additional results.
	NextToken *string

	// The ID of the wireless gateway.
	WirelessGatewayList []types.WirelessGatewayStatistics

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListWirelessGatewaysMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpListWirelessGateways{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpListWirelessGateways{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListWirelessGateways(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

// ListWirelessGatewaysAPIClient is a client that implements the
// ListWirelessGateways operation.
type ListWirelessGatewaysAPIClient interface {
	ListWirelessGateways(context.Context, *ListWirelessGatewaysInput, ...func(*Options)) (*ListWirelessGatewaysOutput, error)
}

var _ ListWirelessGatewaysAPIClient = (*Client)(nil)

// ListWirelessGatewaysPaginatorOptions is the paginator options for
// ListWirelessGateways
type ListWirelessGatewaysPaginatorOptions struct {
	// The maximum number of results to return in this operation.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// ListWirelessGatewaysPaginator is a paginator for ListWirelessGateways
type ListWirelessGatewaysPaginator struct {
	options   ListWirelessGatewaysPaginatorOptions
	client    ListWirelessGatewaysAPIClient
	params    *ListWirelessGatewaysInput
	nextToken *string
	firstPage bool
}

// NewListWirelessGatewaysPaginator returns a new ListWirelessGatewaysPaginator
func NewListWirelessGatewaysPaginator(client ListWirelessGatewaysAPIClient, params *ListWirelessGatewaysInput, optFns ...func(*ListWirelessGatewaysPaginatorOptions)) *ListWirelessGatewaysPaginator {
	options := ListWirelessGatewaysPaginatorOptions{}
	if params.MaxResults != 0 {
		options.Limit = params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	if params == nil {
		params = &ListWirelessGatewaysInput{}
	}

	return &ListWirelessGatewaysPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *ListWirelessGatewaysPaginator) HasMorePages() bool {
	return p.firstPage || p.nextToken != nil
}

// NextPage retrieves the next ListWirelessGateways page.
func (p *ListWirelessGatewaysPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*ListWirelessGatewaysOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	params.MaxResults = p.options.Limit

	result, err := p.client.ListWirelessGateways(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken && prevToken != nil && p.nextToken != nil && *prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

func newServiceMetadataMiddleware_opListWirelessGateways(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iotwireless",
		OperationName: "ListWirelessGateways",
	}
}
