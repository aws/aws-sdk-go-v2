// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package wafregional

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/wafregional/types"
)

const opPutPermissionPolicy = "PutPermissionPolicy"

// PutPermissionPolicyRequest returns a request value for making API operation for
// AWS WAF Regional.
//
// Attaches a IAM policy to the specified resource. The only supported use for
// this action is to share a RuleGroup across accounts.
//
// The PutPermissionPolicy is subject to the following restrictions:
//
//    * You can attach only one policy with each PutPermissionPolicy request.
//
//    * The policy must include an Effect, Action and Principal.
//
//    * Effect must specify Allow.
//
//    * The Action in the policy must be waf:UpdateWebACL, waf-regional:UpdateWebACL,
//    waf:GetRuleGroup and waf-regional:GetRuleGroup . Any extra or wildcard
//    actions in the policy will be rejected.
//
//    * The policy cannot include a Resource parameter.
//
//    * The ARN in the request must be a valid WAF RuleGroup ARN and the RuleGroup
//    must exist in the same region.
//
//    * The user making the request must be the owner of the RuleGroup.
//
//    * Your policy must be composed using IAM Policy version 2012-10-17.
//
// For more information, see IAM Policies (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html).
//
// An example of a valid policy parameter is shown in the Examples section below.
//
//    // Example sending a request using PutPermissionPolicyRequest.
//    req := client.PutPermissionPolicyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/waf-regional-2016-11-28/PutPermissionPolicy
func (c *Client) PutPermissionPolicyRequest(input *types.PutPermissionPolicyInput) PutPermissionPolicyRequest {
	op := &aws.Operation{
		Name:       opPutPermissionPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutPermissionPolicyInput{}
	}

	req := c.newRequest(op, input, &types.PutPermissionPolicyOutput{})
	return PutPermissionPolicyRequest{Request: req, Input: input, Copy: c.PutPermissionPolicyRequest}
}

// PutPermissionPolicyRequest is the request type for the
// PutPermissionPolicy API operation.
type PutPermissionPolicyRequest struct {
	*aws.Request
	Input *types.PutPermissionPolicyInput
	Copy  func(*types.PutPermissionPolicyInput) PutPermissionPolicyRequest
}

// Send marshals and sends the PutPermissionPolicy API request.
func (r PutPermissionPolicyRequest) Send(ctx context.Context) (*PutPermissionPolicyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutPermissionPolicyResponse{
		PutPermissionPolicyOutput: r.Request.Data.(*types.PutPermissionPolicyOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutPermissionPolicyResponse is the response type for the
// PutPermissionPolicy API operation.
type PutPermissionPolicyResponse struct {
	*types.PutPermissionPolicyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutPermissionPolicy request.
func (r *PutPermissionPolicyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
