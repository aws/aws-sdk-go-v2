// Code generated by smithy-go-codegen DO NOT EDIT.

package wafregional

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/wafregional/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// This is AWS WAF Classic documentation. For more information, see AWS WAF Classic
// (https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html)
// in the developer guide. For the latest version of AWS WAF, use the AWS WAFV2 API
// and see the AWS WAF Developer Guide
// (https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). With
// the latest version, AWS WAF has a single set of endpoints for regional and
// global use. Inserts or deletes GeoMatchConstraint () objects in an GeoMatchSet.
// For each GeoMatchConstraint object, you specify the following values:
//
//     *
// Whether to insert or delete the object from the array. If you want to change an
// GeoMatchConstraint object, you delete the existing object and add a new one.
//
//
// * The Type. The only valid value for Type is Country.
//
//     * The Value, which is
// a two character code for the country to add to the GeoMatchConstraint object.
// Valid codes are listed in GeoMatchConstraint$Value ().
//
//     <p>To create and
// configure an <code>GeoMatchSet</code>, perform the following steps:</p> <ol>
// <li> <p>Submit a <a>CreateGeoMatchSet</a> request.</p> </li> <li> <p>Use
// <a>GetChangeToken</a> to get the change token that you provide in the
// <code>ChangeToken</code> parameter of an <a>UpdateGeoMatchSet</a> request.</p>
// </li> <li> <p>Submit an <code>UpdateGeoMatchSet</code> request to specify the
// country that you want AWS WAF to watch for.</p> </li> </ol> <p>When you update
// an <code>GeoMatchSet</code>, you specify the country that you want to add and/or
// the country that you want to delete. If you want to change a country, you delete
// the existing country and add the new one.</p> <p>For more information about how
// to use the AWS WAF API to allow or block HTTP requests, see the <a
// href="https://docs.aws.amazon.com/waf/latest/developerguide/">AWS WAF Developer
// Guide</a>.</p>
func (c *Client) UpdateGeoMatchSet(ctx context.Context, params *UpdateGeoMatchSetInput, optFns ...func(*Options)) (*UpdateGeoMatchSetOutput, error) {
	stack := middleware.NewStack("UpdateGeoMatchSet", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpUpdateGeoMatchSetMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateGeoMatchSetValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateGeoMatchSet(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateGeoMatchSet",
			Err:           err,
		}
	}
	out := result.(*UpdateGeoMatchSetOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateGeoMatchSetInput struct {
	// An array of GeoMatchSetUpdate objects that you want to insert into or delete
	// from an GeoMatchSet (). For more information, see the applicable data types:
	//
	//
	// * GeoMatchSetUpdate (): Contains Action and GeoMatchConstraint
	//
	//     *
	// GeoMatchConstraint (): Contains Type and Value You can have only one Type and
	// Value per GeoMatchConstraint. To add multiple countries, include multiple
	// GeoMatchSetUpdate objects in your request.
	Updates []*types.GeoMatchSetUpdate
	// The value returned by the most recent call to GetChangeToken ().
	ChangeToken *string
	// The GeoMatchSetId of the GeoMatchSet () that you want to update. GeoMatchSetId
	// is returned by CreateGeoMatchSet () and by ListGeoMatchSets ().
	GeoMatchSetId *string
}

type UpdateGeoMatchSetOutput struct {
	// The ChangeToken that you used to submit the UpdateGeoMatchSet request. You can
	// also use this value to query the status of the request. For more information,
	// see GetChangeTokenStatus ().
	ChangeToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpUpdateGeoMatchSetMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpUpdateGeoMatchSet{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpUpdateGeoMatchSet{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateGeoMatchSet(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "waf-regional",
		OperationName: "UpdateGeoMatchSet",
	}
}
