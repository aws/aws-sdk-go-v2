// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kinesisvideo

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kinesisvideo/types"
)

const opTagStream = "TagStream"

// TagStreamRequest returns a request value for making API operation for
// Amazon Kinesis Video Streams.
//
// Adds one or more tags to a stream. A tag is a key-value pair (the value is
// optional) that you can define and assign to AWS resources. If you specify
// a tag that already exists, the tag value is replaced with the value that
// you specify in the request. For more information, see Using Cost Allocation
// Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
// in the AWS Billing and Cost Management User Guide.
//
// You must provide either the StreamName or the StreamARN.
//
// This operation requires permission for the KinesisVideo:TagStream action.
//
// Kinesis video streams support up to 50 tags.
//
//    // Example sending a request using TagStreamRequest.
//    req := client.TagStreamRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kinesisvideo-2017-09-30/TagStream
func (c *Client) TagStreamRequest(input *types.TagStreamInput) TagStreamRequest {
	op := &aws.Operation{
		Name:       opTagStream,
		HTTPMethod: "POST",
		HTTPPath:   "/tagStream",
	}

	if input == nil {
		input = &types.TagStreamInput{}
	}

	req := c.newRequest(op, input, &types.TagStreamOutput{})
	return TagStreamRequest{Request: req, Input: input, Copy: c.TagStreamRequest}
}

// TagStreamRequest is the request type for the
// TagStream API operation.
type TagStreamRequest struct {
	*aws.Request
	Input *types.TagStreamInput
	Copy  func(*types.TagStreamInput) TagStreamRequest
}

// Send marshals and sends the TagStream API request.
func (r TagStreamRequest) Send(ctx context.Context) (*TagStreamResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &TagStreamResponse{
		TagStreamOutput: r.Request.Data.(*types.TagStreamOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// TagStreamResponse is the response type for the
// TagStream API operation.
type TagStreamResponse struct {
	*types.TagStreamOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// TagStream request.
func (r *TagStreamResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
