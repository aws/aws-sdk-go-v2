// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/aws/smithy-go"
)

// You do not have required permissions to perform this operation.
type AccessDeniedException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// You have reached the maximum limit of active signaling channels for this AWS
// account in this region.
type AccountChannelLimitExceededException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *AccountChannelLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountChannelLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountChannelLimitExceededException) ErrorCode() string {
	return "AccountChannelLimitExceededException"
}
func (e *AccountChannelLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The number of streams created for the account is too high.
type AccountStreamLimitExceededException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *AccountStreamLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountStreamLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountStreamLimitExceededException) ErrorCode() string {
	return "AccountStreamLimitExceededException"
}
func (e *AccountStreamLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// Kinesis Video Streams has throttled the request because you have exceeded the
// limit of allowed client calls. Try making the call later.
type ClientLimitExceededException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *ClientLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ClientLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ClientLimitExceededException) ErrorCode() string             { return "ClientLimitExceededException" }
func (e *ClientLimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Not implemented.
type DeviceStreamLimitExceededException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *DeviceStreamLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DeviceStreamLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DeviceStreamLimitExceededException) ErrorCode() string {
	return "DeviceStreamLimitExceededException"
}
func (e *DeviceStreamLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The value for this input parameter is invalid.
type InvalidArgumentException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *InvalidArgumentException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidArgumentException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidArgumentException) ErrorCode() string             { return "InvalidArgumentException" }
func (e *InvalidArgumentException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Not implemented.
type InvalidDeviceException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *InvalidDeviceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDeviceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDeviceException) ErrorCode() string             { return "InvalidDeviceException" }
func (e *InvalidDeviceException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The format of the StreamARN is invalid.
type InvalidResourceFormatException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *InvalidResourceFormatException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidResourceFormatException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidResourceFormatException) ErrorCode() string             { return "InvalidResourceFormatException" }
func (e *InvalidResourceFormatException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The caller is not authorized to perform this operation.
type NotAuthorizedException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *NotAuthorizedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NotAuthorizedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NotAuthorizedException) ErrorCode() string             { return "NotAuthorizedException" }
func (e *NotAuthorizedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The signaling channel is currently not available for this operation.
type ResourceInUseException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *ResourceInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceInUseException) ErrorCode() string             { return "ResourceInUseException" }
func (e *ResourceInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Amazon Kinesis Video Streams can't find the stream that you specified.
type ResourceNotFoundException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// You have exceeded the limit of tags that you can associate with the resource.
// Kinesis video streams support up to 50 tags.
type TagsPerResourceExceededLimitException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *TagsPerResourceExceededLimitException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagsPerResourceExceededLimitException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagsPerResourceExceededLimitException) ErrorCode() string {
	return "TagsPerResourceExceededLimitException"
}
func (e *TagsPerResourceExceededLimitException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The stream version that you specified is not the latest version. To get the
// latest version, use the DescribeStream
// (https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_DescribeStream.html)
// API.
type VersionMismatchException struct {
	Message *string

	noSmithyDocumentSerde
}

func (e *VersionMismatchException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *VersionMismatchException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *VersionMismatchException) ErrorCode() string             { return "VersionMismatchException" }
func (e *VersionMismatchException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
