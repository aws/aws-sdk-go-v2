// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/aws/smithy-go"
)

// You do not have required permissions to perform this operation.
type AccessDeniedException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "AccessDeniedException"
	}
	return *e.DynamicErrorCode
}
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// You have reached the maximum limit of active signaling channels for this Amazon
// Web Services account in this region.
type AccountChannelLimitExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *AccountChannelLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountChannelLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountChannelLimitExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "AccountChannelLimitExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *AccountChannelLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The number of streams created for the account is too high.
type AccountStreamLimitExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *AccountStreamLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountStreamLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountStreamLimitExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "AccountStreamLimitExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *AccountStreamLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// Kinesis Video Streams has throttled the request because you have exceeded the
// limit of allowed client calls. Try making the call later.
type ClientLimitExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ClientLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ClientLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ClientLimitExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ClientLimitExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *ClientLimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Not implemented.
type DeviceStreamLimitExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *DeviceStreamLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DeviceStreamLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DeviceStreamLimitExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "DeviceStreamLimitExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *DeviceStreamLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The value for this input parameter is invalid.
type InvalidArgumentException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidArgumentException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidArgumentException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidArgumentException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidArgumentException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidArgumentException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Not implemented.
type InvalidDeviceException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidDeviceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDeviceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDeviceException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidDeviceException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidDeviceException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The format of the StreamARN is invalid.
type InvalidResourceFormatException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidResourceFormatException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidResourceFormatException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidResourceFormatException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidResourceFormatException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidResourceFormatException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The Stream data retention in hours is equal to zero.
type NoDataRetentionException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *NoDataRetentionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NoDataRetentionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NoDataRetentionException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "NoDataRetentionException"
	}
	return *e.DynamicErrorCode
}
func (e *NoDataRetentionException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The caller is not authorized to perform this operation.
type NotAuthorizedException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *NotAuthorizedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NotAuthorizedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NotAuthorizedException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "NotAuthorizedException"
	}
	return *e.DynamicErrorCode
}
func (e *NotAuthorizedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The resource is currently not available for this operation. New resources cannot
// be created with the same name as existing resources. Also, resources cannot be
// updated or deleted unless they are in an ACTIVE state. If this exception is
// returned, do not use it to determine whether the requested resource already
// exists. Instead, it is recommended you use the resource-specific describe API,
// for example, DescribeStream for video streams.
type ResourceInUseException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceInUseException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceInUseException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Amazon Kinesis Video Streams can't find the stream that you specified.
type ResourceNotFoundException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceNotFoundException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The Exception rendered when the Amazon Kinesis Video Stream can't find a
// stream's edge configuration that you specified.
type StreamEdgeConfigurationNotFoundException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *StreamEdgeConfigurationNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *StreamEdgeConfigurationNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *StreamEdgeConfigurationNotFoundException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "StreamEdgeConfigurationNotFoundException"
	}
	return *e.DynamicErrorCode
}
func (e *StreamEdgeConfigurationNotFoundException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// You have exceeded the limit of tags that you can associate with the resource. A
// Kinesis video stream can support up to 50 tags.
type TagsPerResourceExceededLimitException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *TagsPerResourceExceededLimitException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagsPerResourceExceededLimitException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagsPerResourceExceededLimitException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "TagsPerResourceExceededLimitException"
	}
	return *e.DynamicErrorCode
}
func (e *TagsPerResourceExceededLimitException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The stream version that you specified is not the latest version. To get the
// latest version, use the DescribeStream
// (https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_DescribeStream.html)
// API.
type VersionMismatchException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *VersionMismatchException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *VersionMismatchException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *VersionMismatchException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "VersionMismatchException"
	}
	return *e.DynamicErrorCode
}
func (e *VersionMismatchException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
