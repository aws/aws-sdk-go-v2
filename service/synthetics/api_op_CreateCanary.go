// Code generated by smithy-go-codegen DO NOT EDIT.

package synthetics

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/synthetics/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a canary. Canaries are scripts that monitor your endpoints and APIs from
// the outside-in. Canaries help you check the availability and latency of your web
// services and troubleshoot anomalies by investigating load time data, screenshots
// of the UI, logs, and metrics. You can set up a canary to run continuously or
// just once. Do not use CreateCanary to modify an existing canary. Use
// UpdateCanary
// (https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_UpdateCanary.html)
// instead. To create canaries, you must have the CloudWatchSyntheticsFullAccess
// policy. If you are creating a new IAM role for the canary, you also need the the
// iam:CreateRole, iam:CreatePolicy and iam:AttachRolePolicy permissions. For more
// information, see Necessary Roles and Permissions
// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Roles).
// Do not include secrets or proprietary information in your canary names. The
// canary name makes up part of the Amazon Resource Name (ARN) for the canary, and
// the ARN is included in outbound calls over the internet. For more information,
// see Security Considerations for Synthetics Canaries
// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html).
func (c *Client) CreateCanary(ctx context.Context, params *CreateCanaryInput, optFns ...func(*Options)) (*CreateCanaryOutput, error) {
	stack := middleware.NewStack("CreateCanary", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateCanaryMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateCanaryValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateCanary(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateCanary",
			Err:           err,
		}
	}
	out := result.(*CreateCanaryOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateCanaryInput struct {
	// If this canary is to test an endpoint in a VPC, this structure contains
	// information about the subnet and security groups of the VPC endpoint. For more
	// information, see  Running a Canary in a VPC
	// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html).
	VpcConfig *types.VpcConfigInput
	// The location in Amazon S3 where Synthetics stores artifacts from the test runs
	// of this canary. Artifacts include the log file, screenshots, and HAR files.
	ArtifactS3Location *string
	// The number of days to retain data about successful runs of this canary. If you
	// omit this field, the default of 31 days is used. The valid range is 1 to 455
	// days.
	SuccessRetentionPeriodInDays *int32
	// A structure that contains the configuration for individual canary runs, such as
	// timeout value.
	RunConfig *types.CanaryRunConfigInput
	// The number of days to retain data about failed runs of this canary. If you omit
	// this field, the default of 31 days is used. The valid range is 1 to 455 days.
	FailureRetentionPeriodInDays *int32
	// A structure that contains information about how often the canary is to run and
	// when these test runs are to stop.
	Schedule *types.CanaryScheduleInput
	// Specifies the runtime version to use for the canary. Currently, the only valid
	// value is syn-1.0. For more information about runtime versions, see  Canary
	// Runtime Versions
	// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html).
	RuntimeVersion *string
	// The name for this canary. Be sure to give it a descriptive name that
	// distinguishes it from other canaries in your account. Do not include secrets or
	// proprietary information in your canary names. The canary name makes up part of
	// the canary ARN, and the ARN is included in outbound calls over the internet. For
	// more information, see Security Considerations for Synthetics Canaries
	// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html).
	Name *string
	// A list of key-value pairs to associate with the canary. You can associate as
	// many as 50 tags with a canary. Tags can help you organize and categorize your
	// resources. You can also use them to scope user permissions, by granting a user
	// permission to access or change only the resources that have certain tag values.
	Tags map[string]*string
	// The ARN of the IAM role to be used to run the canary. This role must already
	// exist, and must include lambda.amazonaws.com as a principal in the trust policy.
	// The role must also have the following permissions:
	//
	//     * s3:PutObject
	//
	//     *
	// s3:GetBucketLocation
	//
	//     * s3:ListAllMyBuckets
	//
	//     *
	// cloudwatch:PutMetricData
	//
	//     * logs:CreateLogGroup
	//
	//     *
	// logs:CreateLogStream
	//
	//     * logs:CreateLogStream
	ExecutionRoleArn *string
	// A structure that includes the entry point from which the canary should start
	// running your script. If the script is stored in an S3 bucket, the bucket name,
	// key, and version are also included.
	Code *types.CanaryCodeInput
}

type CreateCanaryOutput struct {
	// The full details about the canary you have created.
	Canary *types.Canary

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateCanaryMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateCanary{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateCanary{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateCanary(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "synthetics",
		OperationName: "CreateCanary",
	}
}
