// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudformation

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
)

const opContinueUpdateRollback = "ContinueUpdateRollback"

// ContinueUpdateRollbackRequest returns a request value for making API operation for
// AWS CloudFormation.
//
// For a specified stack that is in the UPDATE_ROLLBACK_FAILED state, continues
// rolling it back to the UPDATE_ROLLBACK_COMPLETE state. Depending on the cause
// of the failure, you can manually fix the error (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed)
// and continue the rollback. By continuing the rollback, you can return your
// stack to a working state (the UPDATE_ROLLBACK_COMPLETE state), and then try
// to update the stack again.
//
// A stack goes into the UPDATE_ROLLBACK_FAILED state when AWS CloudFormation
// cannot roll back all changes after a failed stack update. For example, you
// might have a stack that is rolling back to an old database instance that
// was deleted outside of AWS CloudFormation. Because AWS CloudFormation doesn't
// know the database was deleted, it assumes that the database instance still
// exists and attempts to roll back to it, causing the update rollback to fail.
//
//    // Example sending a request using ContinueUpdateRollbackRequest.
//    req := client.ContinueUpdateRollbackRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cloudformation-2010-05-15/ContinueUpdateRollback
func (c *Client) ContinueUpdateRollbackRequest(input *types.ContinueUpdateRollbackInput) ContinueUpdateRollbackRequest {
	op := &aws.Operation{
		Name:       opContinueUpdateRollback,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ContinueUpdateRollbackInput{}
	}

	req := c.newRequest(op, input, &types.ContinueUpdateRollbackOutput{})
	return ContinueUpdateRollbackRequest{Request: req, Input: input, Copy: c.ContinueUpdateRollbackRequest}
}

// ContinueUpdateRollbackRequest is the request type for the
// ContinueUpdateRollback API operation.
type ContinueUpdateRollbackRequest struct {
	*aws.Request
	Input *types.ContinueUpdateRollbackInput
	Copy  func(*types.ContinueUpdateRollbackInput) ContinueUpdateRollbackRequest
}

// Send marshals and sends the ContinueUpdateRollback API request.
func (r ContinueUpdateRollbackRequest) Send(ctx context.Context) (*ContinueUpdateRollbackResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ContinueUpdateRollbackResponse{
		ContinueUpdateRollbackOutput: r.Request.Data.(*types.ContinueUpdateRollbackOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ContinueUpdateRollbackResponse is the response type for the
// ContinueUpdateRollback API operation.
type ContinueUpdateRollbackResponse struct {
	*types.ContinueUpdateRollbackOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ContinueUpdateRollback request.
func (r *ContinueUpdateRollbackResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
