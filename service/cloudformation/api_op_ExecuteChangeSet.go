// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudformation

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates a stack using the input information that was provided when the specified
// change set was created. After the call successfully completes, AWS
// CloudFormation starts updating the stack. Use the DescribeStacks () action to
// view the status of the update. When you execute a change set, AWS CloudFormation
// deletes all other change sets associated with the stack because they aren't
// valid for the updated stack. If a stack policy is associated with the stack, AWS
// CloudFormation enforces the policy during the update. You can't specify a
// temporary stack policy that overrides the current policy.
func (c *Client) ExecuteChangeSet(ctx context.Context, params *ExecuteChangeSetInput, optFns ...func(*Options)) (*ExecuteChangeSetOutput, error) {
	stack := middleware.NewStack("ExecuteChangeSet", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpExecuteChangeSetMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpExecuteChangeSetValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opExecuteChangeSet(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ExecuteChangeSet",
			Err:           err,
		}
	}
	out := result.(*ExecuteChangeSetOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The input for the ExecuteChangeSet () action.
type ExecuteChangeSetInput struct {
	// A unique identifier for this ExecuteChangeSet request. Specify this token if you
	// plan to retry requests so that AWS CloudFormation knows that you're not
	// attempting to execute a change set to update a stack with the same name. You
	// might retry ExecuteChangeSet requests to ensure that AWS CloudFormation
	// successfully received them.
	ClientRequestToken *string
	// If you specified the name of a change set, specify the stack name or ID (ARN)
	// that is associated with the change set you want to execute.
	StackName *string
	// The name or ARN of the change set that you want use to update the specified
	// stack.
	ChangeSetName *string
}

// The output for the ExecuteChangeSet () action.
type ExecuteChangeSetOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpExecuteChangeSetMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpExecuteChangeSet{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpExecuteChangeSet{}, middleware.After)
}

func newServiceMetadataMiddleware_opExecuteChangeSet(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudformation",
		OperationName: "ExecuteChangeSet",
	}
}
