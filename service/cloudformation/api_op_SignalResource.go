// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudformation

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sends a signal to the specified resource with a success or failure status. You
// can use the SignalResource API in conjunction with a creation policy or update
// policy. AWS CloudFormation doesn't proceed with a stack creation or update until
// resources receive the required number of signals or the timeout period is
// exceeded. The SignalResource API is useful in cases where you want to send
// signals from anywhere other than an Amazon EC2 instance.
func (c *Client) SignalResource(ctx context.Context, params *SignalResourceInput, optFns ...func(*Options)) (*SignalResourceOutput, error) {
	stack := middleware.NewStack("SignalResource", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpSignalResourceMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSignalResourceValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSignalResource(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SignalResource",
			Err:           err,
		}
	}
	out := result.(*SignalResourceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The input for the SignalResource () action.
type SignalResourceInput struct {
	// The stack name or unique stack ID that includes the resource that you want to
	// signal.
	StackName *string
	// The logical ID of the resource that you want to signal. The logical ID is the
	// name of the resource that given in the template.
	LogicalResourceId *string
	// The status of the signal, which is either success or failure. A failure signal
	// causes AWS CloudFormation to immediately fail the stack creation or update.
	Status types.ResourceSignalStatus
	// A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling
	// groups, specify the instance ID that you are signaling as the unique ID. If you
	// send multiple signals to a single resource (such as signaling a wait condition),
	// each signal requires a different unique ID.
	UniqueId *string
}

type SignalResourceOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpSignalResourceMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpSignalResource{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpSignalResource{}, middleware.After)
}

func newServiceMetadataMiddleware_opSignalResource(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudformation",
		OperationName: "SignalResource",
	}
}
