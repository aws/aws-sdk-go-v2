// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudformation

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/query"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
)

const opCancelUpdateStack = "CancelUpdateStack"

// CancelUpdateStackRequest returns a request value for making API operation for
// AWS CloudFormation.
//
// Cancels an update on the specified stack. If the call completes successfully,
// the stack rolls back the update and reverts to the previous stack configuration.
//
// You can cancel only stacks that are in the UPDATE_IN_PROGRESS state.
//
//    // Example sending a request using CancelUpdateStackRequest.
//    req := client.CancelUpdateStackRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cloudformation-2010-05-15/CancelUpdateStack
func (c *Client) CancelUpdateStackRequest(input *types.CancelUpdateStackInput) CancelUpdateStackRequest {
	op := &aws.Operation{
		Name:       opCancelUpdateStack,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CancelUpdateStackInput{}
	}

	req := c.newRequest(op, input, &types.CancelUpdateStackOutput{})
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return CancelUpdateStackRequest{Request: req, Input: input, Copy: c.CancelUpdateStackRequest}
}

// CancelUpdateStackRequest is the request type for the
// CancelUpdateStack API operation.
type CancelUpdateStackRequest struct {
	*aws.Request
	Input *types.CancelUpdateStackInput
	Copy  func(*types.CancelUpdateStackInput) CancelUpdateStackRequest
}

// Send marshals and sends the CancelUpdateStack API request.
func (r CancelUpdateStackRequest) Send(ctx context.Context) (*CancelUpdateStackResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CancelUpdateStackResponse{
		CancelUpdateStackOutput: r.Request.Data.(*types.CancelUpdateStackOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CancelUpdateStackResponse is the response type for the
// CancelUpdateStack API operation.
type CancelUpdateStackResponse struct {
	*types.CancelUpdateStackOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CancelUpdateStack request.
func (r *CancelUpdateStackResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
