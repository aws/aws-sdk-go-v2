// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudformation

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns information about a type's registration, including its current status
// and type and version identifiers. When you initiate a registration request using
// RegisterType (), you can then use DescribeTypeRegistration () to monitor the
// progress of that registration request. Once the registration request has
// completed, use DescribeType () to return detailed informaiton about a type.
func (c *Client) DescribeTypeRegistration(ctx context.Context, params *DescribeTypeRegistrationInput, optFns ...func(*Options)) (*DescribeTypeRegistrationOutput, error) {
	stack := middleware.NewStack("DescribeTypeRegistration", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpDescribeTypeRegistrationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeTypeRegistrationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeTypeRegistration(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeTypeRegistration",
			Err:           err,
		}
	}
	out := result.(*DescribeTypeRegistrationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeTypeRegistrationInput struct {
	// The identifier for this registration request. This registration token is
	// generated by CloudFormation when you initiate a registration request using
	// RegisterType ().
	RegistrationToken *string
}

type DescribeTypeRegistrationOutput struct {
	// The description of the type registration request.
	Description *string
	// The current status of the type registration request.
	ProgressStatus types.RegistrationStatus
	// The Amazon Resource Name (ARN) of this specific version of the type being
	// registered. For registration requests with a ProgressStatus of other than
	// COMPLETE, this will be null.
	TypeVersionArn *string
	// The Amazon Resource Name (ARN) of the type being registered. For registration
	// requests with a ProgressStatus of other than COMPLETE, this will be null.
	TypeArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpDescribeTypeRegistrationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpDescribeTypeRegistration{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpDescribeTypeRegistration{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeTypeRegistration(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudformation",
		OperationName: "DescribeTypeRegistration",
	}
}
