// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudformation

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Registers an extension with the CloudFormation service. Registering an extension
// makes it available for use in CloudFormation templates in your AWS account, and
// includes:
//
// * Validating the extension schema
//
// * Determining which handlers, if
// any, have been specified for the extension
//
// * Making the extension available for
// use in your account
//
// For more information on how to develop extensions and ready
// them for registeration, see Creating Resource Providers
// (https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html)
// in the CloudFormation CLI User Guide. You can have a maximum of 50 resource
// extension versions registered at a time. This maximum is per account and per
// region. Use DeregisterType to deregister specific extension versions if
// necessary. Once you have initiated a registration request using RegisterType,
// you can use DescribeTypeRegistration to monitor the progress of the registration
// request.
func (c *Client) RegisterType(ctx context.Context, params *RegisterTypeInput, optFns ...func(*Options)) (*RegisterTypeOutput, error) {
	if params == nil {
		params = &RegisterTypeInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "RegisterType", params, optFns, c.addOperationRegisterTypeMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*RegisterTypeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RegisterTypeInput struct {

	// A url to the S3 bucket containing the extension project package that contains
	// the neccessary files for the extension you want to register. For information on
	// generating a schema handler package for the extension you want to register, see
	// submit
	// (https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html)
	// in the CloudFormation CLI User Guide. The user registering the extension must be
	// able to access the package in the S3 bucket. That is, the user needs to have
	// GetObject (https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html)
	// permissions for the schema handler package. For more information, see Actions,
	// Resources, and Condition Keys for Amazon S3
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html) in the AWS
	// Identity and Access Management User Guide.
	//
	// This member is required.
	SchemaHandlerPackage *string

	// The name of the extension being registered. We recommend that extension names
	// adhere to the following pattern: company_or_organization::service::type. The
	// following organization namespaces are reserved and cannot be used in your
	// extension names:
	//
	// * Alexa
	//
	// * AMZN
	//
	// * Amazon
	//
	// * AWS
	//
	// * Custom
	//
	// * Dev
	//
	// This member is required.
	TypeName *string

	// A unique identifier that acts as an idempotency key for this registration
	// request. Specifying a client request token prevents CloudFormation from
	// generating more than one version of an extension from the same registeration
	// request, even if the request is submitted multiple times.
	ClientRequestToken *string

	// The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when
	// invoking the extension. If your extension calls AWS APIs in any of its handlers,
	// you must create an IAM execution role
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) that includes
	// the necessary permissions to call those AWS APIs, and provision that execution
	// role in your account. When CloudFormation needs to invoke the extension handler,
	// CloudFormation assumes this execution role to create a temporary session token,
	// which it then passes to the extension handler, thereby supplying your extension
	// with the appropriate credentials.
	ExecutionRoleArn *string

	// Specifies logging configuration information for an extension.
	LoggingConfig *types.LoggingConfig

	// The kind of extension.
	Type types.RegistryType
}

type RegisterTypeOutput struct {

	// The identifier for this registration request. Use this registration token when
	// calling DescribeTypeRegistration, which returns information about the status and
	// IDs of the extension registration.
	RegistrationToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func (c *Client) addOperationRegisterTypeMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsquery_serializeOpRegisterType{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsquery_deserializeOpRegisterType{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpRegisterTypeValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opRegisterType(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opRegisterType(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudformation",
		OperationName: "RegisterType",
	}
}
