// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package daxiface provides an interface to enable mocking the Amazon DynamoDB Accelerator (DAX) service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package daxiface

import (
	"github.com/aws/aws-sdk-go-v2/service/dax"
	"github.com/aws/aws-sdk-go-v2/service/dax/types"
)

// ClientAPI provides an interface to enable mocking the
// dax.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon DAX.
//    func myFunc(svc daxiface.ClientAPI) bool {
//        // Make svc.CreateCluster request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := dax.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        daxiface.ClientPI
//    }
//    func (m *mockClientClient) CreateCluster(input *types.CreateClusterInput) (*types.CreateClusterOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	CreateClusterRequest(*types.CreateClusterInput) dax.CreateClusterRequest

	CreateParameterGroupRequest(*types.CreateParameterGroupInput) dax.CreateParameterGroupRequest

	CreateSubnetGroupRequest(*types.CreateSubnetGroupInput) dax.CreateSubnetGroupRequest

	DecreaseReplicationFactorRequest(*types.DecreaseReplicationFactorInput) dax.DecreaseReplicationFactorRequest

	DeleteClusterRequest(*types.DeleteClusterInput) dax.DeleteClusterRequest

	DeleteParameterGroupRequest(*types.DeleteParameterGroupInput) dax.DeleteParameterGroupRequest

	DeleteSubnetGroupRequest(*types.DeleteSubnetGroupInput) dax.DeleteSubnetGroupRequest

	DescribeClustersRequest(*types.DescribeClustersInput) dax.DescribeClustersRequest

	DescribeDefaultParametersRequest(*types.DescribeDefaultParametersInput) dax.DescribeDefaultParametersRequest

	DescribeEventsRequest(*types.DescribeEventsInput) dax.DescribeEventsRequest

	DescribeParameterGroupsRequest(*types.DescribeParameterGroupsInput) dax.DescribeParameterGroupsRequest

	DescribeParametersRequest(*types.DescribeParametersInput) dax.DescribeParametersRequest

	DescribeSubnetGroupsRequest(*types.DescribeSubnetGroupsInput) dax.DescribeSubnetGroupsRequest

	IncreaseReplicationFactorRequest(*types.IncreaseReplicationFactorInput) dax.IncreaseReplicationFactorRequest

	ListTagsRequest(*types.ListTagsInput) dax.ListTagsRequest

	RebootNodeRequest(*types.RebootNodeInput) dax.RebootNodeRequest

	TagResourceRequest(*types.TagResourceInput) dax.TagResourceRequest

	UntagResourceRequest(*types.UntagResourceInput) dax.UntagResourceRequest

	UpdateClusterRequest(*types.UpdateClusterInput) dax.UpdateClusterRequest

	UpdateParameterGroupRequest(*types.UpdateParameterGroupInput) dax.UpdateParameterGroupRequest

	UpdateSubnetGroupRequest(*types.UpdateSubnetGroupInput) dax.UpdateSubnetGroupRequest
}

var _ ClientAPI = (*dax.Client)(nil)
