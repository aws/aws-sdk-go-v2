// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dax

type ChangeType string

// Enum values for ChangeType
const (
	ChangeTypeImmediate      ChangeType = "IMMEDIATE"
	ChangeTypeRequiresReboot ChangeType = "REQUIRES_REBOOT"
)

func (enum ChangeType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ChangeType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IsModifiable string

// Enum values for IsModifiable
const (
	IsModifiableTrue        IsModifiable = "TRUE"
	IsModifiableFalse       IsModifiable = "FALSE"
	IsModifiableConditional IsModifiable = "CONDITIONAL"
)

func (enum IsModifiable) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IsModifiable) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ParameterType string

// Enum values for ParameterType
const (
	ParameterTypeDefault          ParameterType = "DEFAULT"
	ParameterTypeNodeTypeSpecific ParameterType = "NODE_TYPE_SPECIFIC"
)

func (enum ParameterType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ParameterType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SSEStatus string

// Enum values for SSEStatus
const (
	SSEStatusEnabling  SSEStatus = "ENABLING"
	SSEStatusEnabled   SSEStatus = "ENABLED"
	SSEStatusDisabling SSEStatus = "DISABLING"
	SSEStatusDisabled  SSEStatus = "DISABLED"
)

func (enum SSEStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SSEStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SourceType string

// Enum values for SourceType
const (
	SourceTypeCluster        SourceType = "CLUSTER"
	SourceTypeParameterGroup SourceType = "PARAMETER_GROUP"
	SourceTypeSubnetGroup    SourceType = "SUBNET_GROUP"
)

func (enum SourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
