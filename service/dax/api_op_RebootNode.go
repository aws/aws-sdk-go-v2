// Code generated by smithy-go-codegen DO NOT EDIT.

package dax

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/dax/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Reboots a single node of a DAX cluster. The reboot action takes place as soon as
// possible. During the reboot, the node status is set to REBOOTING. RebootNode
// restarts the DAX engine process and does not remove the contents of the cache.
func (c *Client) RebootNode(ctx context.Context, params *RebootNodeInput, optFns ...func(*Options)) (*RebootNodeOutput, error) {
	if params == nil {
		params = &RebootNodeInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "RebootNode", params, optFns, addOperationRebootNodeMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*RebootNodeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RebootNodeInput struct {

	// The name of the DAX cluster containing the node to be rebooted.
	//
	// This member is required.
	ClusterName *string

	// The system-assigned ID of the node to be rebooted.
	//
	// This member is required.
	NodeId *string
}

type RebootNodeOutput struct {

	// A description of the DAX cluster after a node has been rebooted.
	Cluster *types.Cluster

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationRebootNodeMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpRebootNode{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpRebootNode{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRebootNodeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRebootNode(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opRebootNode(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "dax",
		OperationName: "RebootNode",
	}
}
