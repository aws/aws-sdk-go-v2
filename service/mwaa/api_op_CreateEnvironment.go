// Code generated by smithy-go-codegen DO NOT EDIT.

package mwaa

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/mwaa/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// JSON blob that describes the environment to create.
func (c *Client) CreateEnvironment(ctx context.Context, params *CreateEnvironmentInput, optFns ...func(*Options)) (*CreateEnvironmentOutput, error) {
	if params == nil {
		params = &CreateEnvironmentInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateEnvironment", params, optFns, addOperationCreateEnvironmentMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateEnvironmentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API
// reference documentation to create an environment. For more information, see Get
// started with Amazon Managed Workflows for Apache Airflow
// (https://docs.aws.amazon.com/mwaa/latest/userguide/get-started.html).
type CreateEnvironmentInput struct {

	// The relative path to the DAG folder on your Amazon S3 storage bucket. For
	// example, dags. For more information, see Importing DAGs on Amazon MWAA
	// (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	//
	// This member is required.
	DagS3Path *string

	// The Amazon Resource Name (ARN) of the execution role for your environment. An
	// execution role is an AWS Identity and Access Management (IAM) role that grants
	// MWAA permission to access AWS services and resources used by your environment.
	// For example, arn:aws:iam::123456789:role/my-execution-role. For more
	// information, see Managing access to Amazon Managed Workflows for Apache Airflow
	// (https://docs.aws.amazon.com/mwaa/latest/userguide/manage-access.html).
	//
	// This member is required.
	ExecutionRoleArn *string

	// The name of your MWAA environment.
	//
	// This member is required.
	Name *string

	// The VPC networking components you want to use for your environment. At least two
	// private subnet identifiers and one VPC security group identifier are required to
	// create an environment. For more information, see Creating the VPC network for a
	// MWAA environment
	// (https://docs.aws.amazon.com/mwaa/latest/userguide/vpc-mwaa.html).
	//
	// This member is required.
	NetworkConfiguration *types.NetworkConfiguration

	// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example,
	// arn:aws:s3:::airflow-mybucketname.
	//
	// This member is required.
	SourceBucketArn *string

	// The Apache Airflow configuration setting you want to override in your
	// environment. For more information, see Environment configuration
	// (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html).
	AirflowConfigurationOptions map[string]string

	// The Apache Airflow version you want to use for your environment.
	AirflowVersion *string

	// The environment class you want to use for your environment. The environment
	// class determines the size of the containers and database used for your Apache
	// Airflow services.
	EnvironmentClass *string

	// The AWS Key Management Service (KMS) key to encrypt and decrypt the data in your
	// environment. You can use an AWS KMS key managed by MWAA, or a custom KMS key
	// (advanced). For more information, see Customer master keys (CMKs)
	// (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html?icmpid=docs_console_unmapped#master_keys)
	// in the AWS KMS developer guide.
	KmsKey *string

	// The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
	LoggingConfiguration *types.LoggingConfigurationInput

	// The maximum number of workers that you want to run in your environment. MWAA
	// scales the number of Apache Airflow workers and the Fargate containers that run
	// your tasks up to the number you specify in this field. When there are no more
	// tasks running, and no more in the queue, MWAA disposes of the extra containers
	// leaving the one worker that is included with your environment.
	MaxWorkers *int32

	// The minimum number of workers that you want to run in your environment. MWAA
	// scales the number of Apache Airflow workers and the Fargate containers that run
	// your tasks up to the number you specify in the MaxWorkers field. When there are
	// no more tasks running, and no more in the queue, MWAA disposes of the extra
	// containers leaving the worker count you specify in the MinWorkers field.
	MinWorkers *int32

	// The plugins.zip file version you want to use.
	PluginsS3ObjectVersion *string

	// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For
	// example, plugins.zip. If a relative path is provided in the request, then
	// PluginsS3ObjectVersion is required. For more information, see Importing DAGs on
	// Amazon MWAA
	// (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	PluginsS3Path *string

	// The requirements.txt file version you want to use.
	RequirementsS3ObjectVersion *string

	// The relative path to the requirements.txt file on your Amazon S3 storage bucket.
	// For example, requirements.txt. If a relative path is provided in the request,
	// then RequirementsS3ObjectVersion is required. For more information, see
	// Importing DAGs on Amazon MWAA
	// (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
	RequirementsS3Path *string

	// The metadata tags you want to attach to your environment. For more information,
	// see Tagging AWS resources
	// (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
	Tags map[string]string

	// The networking access of your Apache Airflow web server. A public network allows
	// your Airflow UI to be accessed over the Internet by users granted access in your
	// IAM policy. A private network limits access of your Airflow UI to users within
	// your VPC. For more information, see Creating the VPC network for a MWAA
	// environment (https://docs.aws.amazon.com/mwaa/latest/userguide/vpc-mwaa.html).
	WebserverAccessMode types.WebserverAccessMode

	// The day and time you want MWAA to start weekly maintenance updates on your
	// environment.
	WeeklyMaintenanceWindowStart *string
}

type CreateEnvironmentOutput struct {

	// The resulting Amazon MWAA envirnonment ARN.
	Arn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateEnvironmentMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateEnvironment{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateEnvironment{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addEndpointPrefix_opCreateEnvironmentMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateEnvironmentValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateEnvironment(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

type endpointPrefix_opCreateEnvironmentMiddleware struct {
}

func (*endpointPrefix_opCreateEnvironmentMiddleware) ID() string {
	return "EndpointHostPrefix"
}

func (m *endpointPrefix_opCreateEnvironmentMiddleware) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	if smithyhttp.GetHostnameImmutable(ctx) || smithyhttp.IsEndpointHostPrefixDisabled(ctx) {
		return next.HandleSerialize(ctx, in)
	}

	req, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, fmt.Errorf("unknown transport type %T", in.Request)
	}

	req.URL.Host = "api." + req.URL.Host

	return next.HandleSerialize(ctx, in)
}
func addEndpointPrefix_opCreateEnvironmentMiddleware(stack *middleware.Stack) error {
	return stack.Serialize.Insert(&endpointPrefix_opCreateEnvironmentMiddleware{}, `OperationSerializer`, middleware.After)
}

func newServiceMetadataMiddleware_opCreateEnvironment(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "airflow",
		OperationName: "CreateEnvironment",
	}
}
