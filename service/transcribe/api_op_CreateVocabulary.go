// Code generated by smithy-go-codegen DO NOT EDIT.

package transcribe

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Creates a new custom vocabulary. When creating a new medical vocabulary, you can
// either upload a text file that contains your new entries, phrases, and terms
// into an S3 bucket or include a list of terms directly in your request using the
// Phrases flag. For more information on creating a custom vocabulary, see Creating
// a custom vocabulary
// (https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary-create.html).
func (c *Client) CreateVocabulary(ctx context.Context, params *CreateVocabularyInput, optFns ...func(*Options)) (*CreateVocabularyOutput, error) {
	if params == nil {
		params = &CreateVocabularyInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateVocabulary", params, optFns, c.addOperationCreateVocabularyMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateVocabularyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateVocabularyInput struct {

	// The language code that represents the language of the entries in your custom
	// vocabulary. Each vocabulary must contain terms in only one language. For a list
	// of languages and their corresponding language codes, see Supported languages
	// (https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html).
	//
	// This member is required.
	LanguageCode types.LanguageCode

	// The name of your new vocabulary. This name is case sensitive, cannot contain
	// spaces, and must be unique within an Amazon Web Services account. If you try to
	// create a vocabulary with the same name as a previous vocabulary, you get a
	// ConflictException error.
	//
	// This member is required.
	VocabularyName *string

	// Use this flag to include a list of terms within your request. Note that if you
	// include Phrases in your request, you cannot use VocabularyFileUri; you must
	// choose one or the other.
	Phrases []string

	// Adds one or more tags, each in the form of a key:value pair, to a new custom
	// vocabulary at the time you create this new vocabulary.
	Tags []types.Tag

	// The S3 location of the text file that contains your custom vocabulary. The URI
	// must be located in the same region as the API endpoint you're calling. Here's an
	// example URI path:
	// https://s3.us-east-1.amazonaws.com/my-s3-bucket/my-vocab-file.txt Note that if
	// you include VocabularyFileUri in your request, you cannot use the Phrases flag;
	// you must choose one or the other.
	VocabularyFileUri *string

	noSmithyDocumentSerde
}

type CreateVocabularyOutput struct {

	// If the VocabularyState field is FAILED, FailureReason contains information about
	// why the job failed.
	FailureReason *string

	// The language code you selected for your vocabulary.
	LanguageCode types.LanguageCode

	// The date and time you created your custom vocabulary.
	LastModifiedTime *time.Time

	// The name you chose for your vocabulary.
	VocabularyName *string

	// The processing state of your vocabulary. If the state is READY, you can use the
	// vocabulary in a StartTranscriptionJob request.
	VocabularyState types.VocabularyState

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateVocabularyMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateVocabulary{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateVocabulary{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateVocabularyValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateVocabulary(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateVocabulary(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transcribe",
		OperationName: "CreateVocabulary",
	}
}
