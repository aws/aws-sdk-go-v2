// Code generated by smithy-go-codegen DO NOT EDIT.

package transcribe

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a list of vocabularies that match the specified criteria. If you don't
// enter a value in any of the request parameters, returns the entire list of
// vocabularies.
func (c *Client) ListMedicalVocabularies(ctx context.Context, params *ListMedicalVocabulariesInput, optFns ...func(*Options)) (*ListMedicalVocabulariesOutput, error) {
	if params == nil {
		params = &ListMedicalVocabulariesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListMedicalVocabularies", params, optFns, addOperationListMedicalVocabulariesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListMedicalVocabulariesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListMedicalVocabulariesInput struct {

	// The maximum number of vocabularies to return in the response.
	MaxResults *int32

	// Returns vocabularies whose names contain the specified string. The search is not
	// case sensitive. ListMedicalVocabularies returns both "vocabularyname" and
	// "VocabularyName".
	NameContains *string

	// If the result of your previous request to ListMedicalVocabularies was truncated,
	// include the NextToken to fetch the next set of vocabularies.
	NextToken *string

	// When specified, returns only vocabularies with the VocabularyState equal to the
	// specified vocabulary state. Use this field to see which vocabularies are ready
	// for your medical transcription jobs.
	StateEquals types.VocabularyState
}

type ListMedicalVocabulariesOutput struct {

	// The ListMedicalVocabularies operation returns a page of vocabularies at a time.
	// You set the maximum number of vocabularies to return on a page with the
	// MaxResults parameter. If there are more jobs in the list will fit on a page,
	// Amazon Transcribe Medical returns the NextPage token. To return the next page of
	// vocabularies, include the token in the next request to the
	// ListMedicalVocabularies operation .
	NextToken *string

	// The requested vocabulary state.
	Status types.VocabularyState

	// A list of objects that describe the vocabularies that match your search
	// criteria.
	Vocabularies []*types.VocabularyInfo

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListMedicalVocabulariesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpListMedicalVocabularies{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpListMedicalVocabularies{}, middleware.After)
	if err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListMedicalVocabularies(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opListMedicalVocabularies(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transcribe",
		OperationName: "ListMedicalVocabularies",
	}
}
