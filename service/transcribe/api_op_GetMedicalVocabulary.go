// Code generated by smithy-go-codegen DO NOT EDIT.

package transcribe

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves information about a medical vocabulary.
func (c *Client) GetMedicalVocabulary(ctx context.Context, params *GetMedicalVocabularyInput, optFns ...func(*Options)) (*GetMedicalVocabularyOutput, error) {
	if params == nil {
		params = &GetMedicalVocabularyInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GetMedicalVocabulary", params, optFns, addOperationGetMedicalVocabularyMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GetMedicalVocabularyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetMedicalVocabularyInput struct {

	// The name of the vocabulary that you want information about. The value is case
	// sensitive.
	//
	// This member is required.
	VocabularyName *string
}

type GetMedicalVocabularyOutput struct {

	// The location in Amazon S3 where the vocabulary is stored. Use this URI to get
	// the contents of the vocabulary. You can download your vocabulary from the URI
	// for a limited time.
	DownloadUri *string

	// If the VocabularyState is FAILED, this field contains information about why the
	// job failed.
	FailureReason *string

	// The valid language code for your vocabulary entries.
	LanguageCode types.LanguageCode

	// The date and time that the vocabulary was last modified with a text file
	// different from the one that was previously used.
	LastModifiedTime *time.Time

	// The name of the vocabulary returned by Amazon Transcribe Medical.
	VocabularyName *string

	// The processing state of the vocabulary. If the VocabularyState is READY then you
	// can use it in the StartMedicalTranscriptionJob operation.
	VocabularyState types.VocabularyState

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationGetMedicalVocabularyMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpGetMedicalVocabulary{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetMedicalVocabulary{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetMedicalVocabularyValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetMedicalVocabulary(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opGetMedicalVocabulary(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transcribe",
		OperationName: "GetMedicalVocabulary",
	}
}
