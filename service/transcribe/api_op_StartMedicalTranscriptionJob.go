// Code generated by smithy-go-codegen DO NOT EDIT.

package transcribe

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Start a batch job to transcribe medical speech to text.
func (c *Client) StartMedicalTranscriptionJob(ctx context.Context, params *StartMedicalTranscriptionJobInput, optFns ...func(*Options)) (*StartMedicalTranscriptionJobOutput, error) {
	stack := middleware.NewStack("StartMedicalTranscriptionJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpStartMedicalTranscriptionJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStartMedicalTranscriptionJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartMedicalTranscriptionJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartMedicalTranscriptionJob",
			Err:           err,
		}
	}
	out := result.(*StartMedicalTranscriptionJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartMedicalTranscriptionJobInput struct {
	// The medical specialty of any clinician speaking in the input media.
	Specialty types.Specialty
	// The name of the medical transcription job. You can't use the strings "." or ".."
	// by themselves as the job name. The name must also be unique within an AWS
	// account. If you try to create a medical transcription job with the same name as
	// a previous medical transcription job you will receive a ConflictException error.
	MedicalTranscriptionJobName *string
	// The Amazon S3 location where the transcription is stored. You must set
	// OutputBucketName for Amazon Transcribe Medical to store the transcription
	// results. Your transcript appears in the S3 location you specify. When you call
	// the GetMedicalTranscriptionJob (), the operation returns this location in the
	// TranscriptFileUri field. The S3 bucket must have permissions that allow Amazon
	// Transcribe Medical to put files in the bucket. For more information, see
	// Permissions Required for IAM User Roles
	// (https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user).
	// You can specify an AWS Key Management Service (KMS) key to encrypt the output of
	// your transcription using the OutputEncryptionKMSKeyId parameter. If you don't
	// specify a KMS key, Amazon Transcribe Medical uses the default Amazon S3 key for
	// server-side encryption of transcripts that are placed in your S3 bucket.
	OutputBucketName *string
	// The language code for the language spoken in the input media file. US English
	// (en-US) is the valid value for medical transcription jobs. Any other value you
	// enter for language code results in a BadRequestException error.
	LanguageCode types.LanguageCode
	// The type of speech in the input audio. CONVERSATION refers to conversations
	// between two or more speakers, e.g., a conversations between doctors and
	// patients. DICTATION refers to single-speaker dictated speech, e.g., for clinical
	// notes.
	Type types.Type
	// The audio format of the input media file.
	MediaFormat types.MediaFormat
	// Optional settings for the medical transcription job.
	Settings *types.MedicalTranscriptionSetting
	// The sample rate, in Hertz, of the audio track in the input media file. If you do
	// not specify the media sample rate, Amazon Transcribe Medical determines the
	// sample rate. If you specify the sample rate, it must match the rate detected by
	// Amazon Transcribe Medical. In most cases, you should leave the
	// MediaSampleRateHertz field blank and let Amazon Transcribe Medical determine the
	// sample rate.
	MediaSampleRateHertz *int32
	// Describes the input media file in a transcription request.
	Media *types.Media
	// The Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key used
	// to encrypt the output of the transcription job. The user calling the
	// StartMedicalTranscriptionJob () operation must have permission to use the
	// specified KMS key. You use either of the following to identify a KMS key in the
	// current account:
	//
	//     * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
	//
	//
	// * KMS Key Alias: "alias/ExampleAlias"
	//
	// You can use either of the following to
	// identify a KMS key in the current account or another account:
	//
	//     * Amazon
	// Resource Name (ARN) of a KMS key in the current account or another account:
	// "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"
	//
	//     *
	// ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"
	//
	// If
	// you don't specify an encryption key, the output of the medical transcription job
	// is encrypted with the default Amazon S3 key (SSE-S3). If you specify a KMS key
	// to encrypt your output, you must also specify an output location in the
	// OutputBucketName parameter.
	OutputEncryptionKMSKeyId *string
}

type StartMedicalTranscriptionJobOutput struct {
	// A batch job submitted to transcribe medical speech to text.
	MedicalTranscriptionJob *types.MedicalTranscriptionJob

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpStartMedicalTranscriptionJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpStartMedicalTranscriptionJob{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpStartMedicalTranscriptionJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opStartMedicalTranscriptionJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transcribe",
		OperationName: "StartMedicalTranscriptionJob",
	}
}
