// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchevents

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchevents/types"
)

const opDeactivateEventSource = "DeactivateEventSource"

// DeactivateEventSourceRequest returns a request value for making API operation for
// Amazon CloudWatch Events.
//
// An AWS customer uses this operation to temporarily stop receiving events
// from the specified partner event source. The matching event bus isn't deleted.
//
// When you deactivate a partner event source, the source goes into PENDING
// state. If it remains in PENDING state for more than two weeks, it's deleted.
//
// To activate a deactivated partner event source, use ActivateEventSource.
//
//    // Example sending a request using DeactivateEventSourceRequest.
//    req := client.DeactivateEventSourceRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/events-2015-10-07/DeactivateEventSource
func (c *Client) DeactivateEventSourceRequest(input *types.DeactivateEventSourceInput) DeactivateEventSourceRequest {
	op := &aws.Operation{
		Name:       opDeactivateEventSource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.DeactivateEventSourceInput{}
	}

	req := c.newRequest(op, input, &types.DeactivateEventSourceOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return DeactivateEventSourceRequest{Request: req, Input: input, Copy: c.DeactivateEventSourceRequest}
}

// DeactivateEventSourceRequest is the request type for the
// DeactivateEventSource API operation.
type DeactivateEventSourceRequest struct {
	*aws.Request
	Input *types.DeactivateEventSourceInput
	Copy  func(*types.DeactivateEventSourceInput) DeactivateEventSourceRequest
}

// Send marshals and sends the DeactivateEventSource API request.
func (r DeactivateEventSourceRequest) Send(ctx context.Context) (*DeactivateEventSourceResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeactivateEventSourceResponse{
		DeactivateEventSourceOutput: r.Request.Data.(*types.DeactivateEventSourceOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeactivateEventSourceResponse is the response type for the
// DeactivateEventSource API operation.
type DeactivateEventSourceResponse struct {
	*types.DeactivateEventSourceOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeactivateEventSource request.
func (r *DeactivateEventSourceResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
