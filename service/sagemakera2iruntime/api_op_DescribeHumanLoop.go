// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemakera2iruntime

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemakera2iruntime/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns information about the specified human loop.
func (c *Client) DescribeHumanLoop(ctx context.Context, params *DescribeHumanLoopInput, optFns ...func(*Options)) (*DescribeHumanLoopOutput, error) {
	stack := middleware.NewStack("DescribeHumanLoop", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDescribeHumanLoopMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeHumanLoopValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeHumanLoop(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeHumanLoop",
			Err:           err,
		}
	}
	out := result.(*DescribeHumanLoopOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeHumanLoopInput struct {
	// The name of the human loop that you want information about.
	HumanLoopName *string
}

type DescribeHumanLoopOutput struct {
	// The status of the human loop.
	HumanLoopStatus types.HumanLoopStatus
	// A failure code that identifies the type of failure.
	FailureCode *string
	// An object that contains information about the output of the human loop.
	HumanLoopOutput *types.HumanLoopOutput
	// The Amazon Resource Name (ARN) of the human loop.
	HumanLoopArn *string
	// The creation time when Amazon Augmented AI created the human loop.
	CreationTime *time.Time
	// The reason why a human loop failed. The failure reason is returned when the
	// status of the human loop is Failed.
	FailureReason *string
	// The name of the human loop. The name must be lowercase, unique within the Region
	// in your account, and can have up to 63 characters. Valid characters: a-z, 0-9,
	// and - (hyphen).
	HumanLoopName *string
	// The Amazon Resource Name (ARN) of the flow definition.
	FlowDefinitionArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDescribeHumanLoopMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDescribeHumanLoop{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeHumanLoop{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeHumanLoop(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "DescribeHumanLoop",
	}
}
