// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemakera2iruntime

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	"net/http"
)

const ServiceID = "SageMaker A2I Runtime"

// Amazon Augmented AI is in preview release and is subject to change. We do not
// recommend using this product in production environments. Amazon Augmented AI
// (Amazon A2I) adds the benefit of human judgment to any machine learning
// application. When an AI application can't evaluate data with a high degree of
// confidence, human reviewers can take over. This human review is called a human
// review workflow. To create and start a human review workflow, you need three
// resources: a worker task template, a flow definition, and a human loop. For
// information about these resources and prerequisites for using Amazon A2I, see
// Get Started with Amazon Augmented AI
// (https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-getting-started.html) in
// the Amazon SageMaker Developer Guide. This API reference includes information
// about API actions and data types that you can use to interact with Amazon A2I
// programmatically. Use this guide to:
//
//     * Start a human loop with the
// StartHumanLoop operation when using Amazon A2I with a custom task type. To learn
// more about the difference between custom and built-in task types, see Use Task
// Types
// (https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-task-types-general.html).
// To learn how to start a human loop using this API, see Create and Start a Human
// Loop for a Custom Task Type
// (https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-start-human-loop.html#a2i-instructions-starthumanloop)
// in the Amazon SageMaker Developer Guide.
//
//     * Manage your human loops. You can
// list all human loops that you have created, describe individual human loops, and
// stop and delete human loops. To learn more, see Monitor and Manage Your Human
// Loop
// (https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-monitor-humanloop-results.html)
// in the Amazon SageMaker Developer Guide.
//
// Amazon A2I integrates APIs from
// various AWS services to create and start human review workflows for those
// services. To learn how Amazon A2I uses these APIs, see Use APIs in Amazon A2I
// (https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-api-references.html) in the
// Amazon SageMaker Developer Guide.
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []APIOptionFunc

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// An integer value representing the logging level.
	LogLevel aws.LogLevel

	// The logger writer interface to write logging messages to.
	Logger aws.Logger

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

func (o Options) GetCredentials() aws.CredentialsProvider {
	return o.Credentials
}

func (o Options) GetEndpointOptions() ResolverOptions {
	return o.EndpointOptions
}

func (o Options) GetEndpointResolver() EndpointResolver {
	return o.EndpointResolver
}

func (o Options) GetLogLevel() aws.LogLevel {
	return o.LogLevel
}

func (o Options) GetLogger() aws.Logger {
	return o.Logger
}

func (o Options) GetRegion() string {
	return o.Region
}

func (o Options) GetRetryer() retry.Retryer {
	return o.Retryer
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]APIOptionFunc, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}

type APIOptionFunc func(*middleware.Stack) error

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		LogLevel:    cfg.LogLevel,
		Logger:      cfg.Logger,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
	}
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("sagemakera2iruntime")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	signer := v4.Signer{}
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, signer), middleware.After)
}
