// Code generated by smithy-go-codegen DO NOT EDIT.

package appsync

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates a Resolver object.
func (c *Client) UpdateResolver(ctx context.Context, params *UpdateResolverInput, optFns ...func(*Options)) (*UpdateResolverOutput, error) {
	if params == nil {
		params = &UpdateResolverInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdateResolver", params, optFns, addOperationUpdateResolverMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdateResolverOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateResolverInput struct {

	// The API ID.
	//
	// This member is required.
	ApiId *string

	// The new field name.
	//
	// This member is required.
	FieldName *string

	// The new request mapping template.
	//
	// This member is required.
	RequestMappingTemplate *string

	// The new type name.
	//
	// This member is required.
	TypeName *string

	// The caching configuration for the resolver.
	CachingConfig *types.CachingConfig

	// The new data source name.
	DataSourceName *string

	// The resolver type.
	//
	//     * UNIT: A UNIT resolver type. A UNIT resolver is the
	// default resolver type. A UNIT resolver enables you to execute a GraphQL query
	// against a single data source.
	//
	//     * PIPELINE: A PIPELINE resolver type. A
	// PIPELINE resolver enables you to execute a series of Function in a serial
	// manner. You can use a pipeline resolver to execute a GraphQL query against
	// multiple data sources.
	Kind types.ResolverKind

	// The PipelineConfig.
	PipelineConfig *types.PipelineConfig

	// The new response mapping template.
	ResponseMappingTemplate *string

	// The SyncConfig for a resolver attached to a versioned datasource.
	SyncConfig *types.SyncConfig
}

type UpdateResolverOutput struct {

	// The updated Resolver object.
	Resolver *types.Resolver

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationUpdateResolverMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpUpdateResolver{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateResolver{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateResolverValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateResolver(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opUpdateResolver(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "appsync",
		OperationName: "UpdateResolver",
	}
}
