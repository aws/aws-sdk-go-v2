// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync/types"
)

const opGetFunction = "GetFunction"

// GetFunctionRequest returns a request value for making API operation for
// AWS AppSync.
//
// Get a Function.
//
//    // Example sending a request using GetFunctionRequest.
//    req := client.GetFunctionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/appsync-2017-07-25/GetFunction
func (c *Client) GetFunctionRequest(input *types.GetFunctionInput) GetFunctionRequest {
	op := &aws.Operation{
		Name:       opGetFunction,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/apis/{apiId}/functions/{functionId}",
	}

	if input == nil {
		input = &types.GetFunctionInput{}
	}

	req := c.newRequest(op, input, &types.GetFunctionOutput{})
	return GetFunctionRequest{Request: req, Input: input, Copy: c.GetFunctionRequest}
}

// GetFunctionRequest is the request type for the
// GetFunction API operation.
type GetFunctionRequest struct {
	*aws.Request
	Input *types.GetFunctionInput
	Copy  func(*types.GetFunctionInput) GetFunctionRequest
}

// Send marshals and sends the GetFunction API request.
func (r GetFunctionRequest) Send(ctx context.Context) (*GetFunctionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetFunctionResponse{
		GetFunctionOutput: r.Request.Data.(*types.GetFunctionOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetFunctionResponse is the response type for the
// GetFunction API operation.
type GetFunctionResponse struct {
	*types.GetFunctionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetFunction request.
func (r *GetFunctionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
