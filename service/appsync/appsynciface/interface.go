// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package appsynciface provides an interface to enable mocking the AWS AppSync service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package appsynciface

import (
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	"github.com/aws/aws-sdk-go-v2/service/appsync/types"
)

// ClientAPI provides an interface to enable mocking the
// appsync.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // AWSAppSync.
//    func myFunc(svc appsynciface.ClientAPI) bool {
//        // Make svc.CreateApiKey request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := appsync.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        appsynciface.ClientPI
//    }
//    func (m *mockClientClient) CreateApiKey(input *types.CreateApiKeyInput) (*types.CreateApiKeyOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	CreateApiKeyRequest(*types.CreateApiKeyInput) appsync.CreateApiKeyRequest

	CreateDataSourceRequest(*types.CreateDataSourceInput) appsync.CreateDataSourceRequest

	CreateFunctionRequest(*types.CreateFunctionInput) appsync.CreateFunctionRequest

	CreateGraphqlApiRequest(*types.CreateGraphqlApiInput) appsync.CreateGraphqlApiRequest

	CreateResolverRequest(*types.CreateResolverInput) appsync.CreateResolverRequest

	CreateTypeRequest(*types.CreateTypeInput) appsync.CreateTypeRequest

	DeleteApiKeyRequest(*types.DeleteApiKeyInput) appsync.DeleteApiKeyRequest

	DeleteDataSourceRequest(*types.DeleteDataSourceInput) appsync.DeleteDataSourceRequest

	DeleteFunctionRequest(*types.DeleteFunctionInput) appsync.DeleteFunctionRequest

	DeleteGraphqlApiRequest(*types.DeleteGraphqlApiInput) appsync.DeleteGraphqlApiRequest

	DeleteResolverRequest(*types.DeleteResolverInput) appsync.DeleteResolverRequest

	DeleteTypeRequest(*types.DeleteTypeInput) appsync.DeleteTypeRequest

	GetDataSourceRequest(*types.GetDataSourceInput) appsync.GetDataSourceRequest

	GetFunctionRequest(*types.GetFunctionInput) appsync.GetFunctionRequest

	GetGraphqlApiRequest(*types.GetGraphqlApiInput) appsync.GetGraphqlApiRequest

	GetIntrospectionSchemaRequest(*types.GetIntrospectionSchemaInput) appsync.GetIntrospectionSchemaRequest

	GetResolverRequest(*types.GetResolverInput) appsync.GetResolverRequest

	GetSchemaCreationStatusRequest(*types.GetSchemaCreationStatusInput) appsync.GetSchemaCreationStatusRequest

	GetTypeRequest(*types.GetTypeInput) appsync.GetTypeRequest

	ListApiKeysRequest(*types.ListApiKeysInput) appsync.ListApiKeysRequest

	ListDataSourcesRequest(*types.ListDataSourcesInput) appsync.ListDataSourcesRequest

	ListFunctionsRequest(*types.ListFunctionsInput) appsync.ListFunctionsRequest

	ListGraphqlApisRequest(*types.ListGraphqlApisInput) appsync.ListGraphqlApisRequest

	ListResolversRequest(*types.ListResolversInput) appsync.ListResolversRequest

	ListResolversByFunctionRequest(*types.ListResolversByFunctionInput) appsync.ListResolversByFunctionRequest

	ListTagsForResourceRequest(*types.ListTagsForResourceInput) appsync.ListTagsForResourceRequest

	ListTypesRequest(*types.ListTypesInput) appsync.ListTypesRequest

	StartSchemaCreationRequest(*types.StartSchemaCreationInput) appsync.StartSchemaCreationRequest

	TagResourceRequest(*types.TagResourceInput) appsync.TagResourceRequest

	UntagResourceRequest(*types.UntagResourceInput) appsync.UntagResourceRequest

	UpdateApiKeyRequest(*types.UpdateApiKeyInput) appsync.UpdateApiKeyRequest

	UpdateDataSourceRequest(*types.UpdateDataSourceInput) appsync.UpdateDataSourceRequest

	UpdateFunctionRequest(*types.UpdateFunctionInput) appsync.UpdateFunctionRequest

	UpdateGraphqlApiRequest(*types.UpdateGraphqlApiInput) appsync.UpdateGraphqlApiRequest

	UpdateResolverRequest(*types.UpdateResolverInput) appsync.UpdateResolverRequest

	UpdateTypeRequest(*types.UpdateTypeInput) appsync.UpdateTypeRequest
}

var _ ClientAPI = (*appsync.Client)(nil)
