// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync/types"
)

const opDeleteApiKey = "DeleteApiKey"

// DeleteApiKeyRequest returns a request value for making API operation for
// AWS AppSync.
//
// Deletes an API key.
//
//    // Example sending a request using DeleteApiKeyRequest.
//    req := client.DeleteApiKeyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/appsync-2017-07-25/DeleteApiKey
func (c *Client) DeleteApiKeyRequest(input *types.DeleteApiKeyInput) DeleteApiKeyRequest {
	op := &aws.Operation{
		Name:       opDeleteApiKey,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/apis/{apiId}/apikeys/{id}",
	}

	if input == nil {
		input = &types.DeleteApiKeyInput{}
	}

	req := c.newRequest(op, input, &types.DeleteApiKeyOutput{})
	return DeleteApiKeyRequest{Request: req, Input: input, Copy: c.DeleteApiKeyRequest}
}

// DeleteApiKeyRequest is the request type for the
// DeleteApiKey API operation.
type DeleteApiKeyRequest struct {
	*aws.Request
	Input *types.DeleteApiKeyInput
	Copy  func(*types.DeleteApiKeyInput) DeleteApiKeyRequest
}

// Send marshals and sends the DeleteApiKey API request.
func (r DeleteApiKeyRequest) Send(ctx context.Context) (*DeleteApiKeyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeleteApiKeyResponse{
		DeleteApiKeyOutput: r.Request.Data.(*types.DeleteApiKeyOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeleteApiKeyResponse is the response type for the
// DeleteApiKey API operation.
type DeleteApiKeyResponse struct {
	*types.DeleteApiKeyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeleteApiKey request.
func (r *DeleteApiKeyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
