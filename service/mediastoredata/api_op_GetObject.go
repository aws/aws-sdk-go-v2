// Code generated by smithy-go-codegen DO NOT EDIT.

package mediastoredata

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"io"
	"time"
)

// Downloads the object at the specified path.
func (c *Client) GetObject(ctx context.Context, params *GetObjectInput, optFns ...func(*Options)) (*GetObjectOutput, error) {
	stack := middleware.NewStack("GetObject", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetObjectMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	addOpGetObjectValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetObject(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetObject",
			Err:           err,
		}
	}
	out := result.(*GetObjectOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetObjectInput struct {
	// The path (including the file name) where the object is stored in the container.
	// Format: // For example, to upload the file mlaw.avi to the folder path
	// premium\canada in the container movies, enter the path premium/canada/mlaw.avi.
	// Do not include the container name in this path. If the path includes any folders
	// that don't exist yet, the service creates them. For example, suppose you have an
	// existing premium/usa subfolder. If you specify premium/canada, the service
	// creates a canada subfolder in the premium folder. You then have two subfolders,
	// usa and canada, in the premium folder. There is no correlation between the path
	// to the source and the path (folders) in the container in AWS Elemental
	// MediaStore. For more information about folders and how they exist in a
	// container, see the AWS Elemental MediaStore User Guide
	// (http://docs.aws.amazon.com/mediastore/latest/ug/). The file name is the name
	// that is assigned to the file that you upload. The file can have the same name
	// inside and outside of AWS Elemental MediaStore, or it can have the same name.
	// The file name can include or omit an extension.
	Path *string
	// The range bytes of an object to retrieve. For more information about the Range
	// header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35
	// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35).
	Range *string
}

type GetObjectOutput struct {
	// The content type of the object.
	ContentType *string
	// The length of the object in bytes.
	ContentLength *int64
	// An optional CacheControl header that allows the caller to control the object's
	// cache behavior. Headers can be passed in as specified in the HTTP spec at
	// https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9
	// (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9). Headers with
	// a custom user-defined value are also accepted.
	CacheControl *string
	// The range of bytes to retrieve.
	ContentRange *string
	// The ETag that represents a unique instance of the object.
	ETag *string
	// The date and time that the object was last modified.
	LastModified *time.Time
	// The bytes of the object.
	Body io.ReadCloser

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetObjectMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetObject{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetObject{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetObject(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mediastore",
		OperationName: "GetObject",
	}
}
