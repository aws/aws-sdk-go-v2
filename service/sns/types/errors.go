// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// Indicates that the user has been denied access to the requested resource.
type AuthorizationErrorException struct {
	Message *string
}

func (e *AuthorizationErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AuthorizationErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AuthorizationErrorException) ErrorCode() string             { return "AuthorizationErrorException" }
func (e *AuthorizationErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AuthorizationErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AuthorizationErrorException) HasMessage() bool {
	return e.Message != nil
}

// Can't perform multiple operations on a tag simultaneously. Perform the
// operations sequentially.
type ConcurrentAccessException struct {
	Message *string
}

func (e *ConcurrentAccessException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConcurrentAccessException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConcurrentAccessException) ErrorCode() string             { return "ConcurrentAccessException" }
func (e *ConcurrentAccessException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConcurrentAccessException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConcurrentAccessException) HasMessage() bool {
	return e.Message != nil
}

// Exception error indicating endpoint disabled.
type EndpointDisabledException struct {
	Message *string
}

func (e *EndpointDisabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *EndpointDisabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *EndpointDisabledException) ErrorCode() string             { return "EndpointDisabledException" }
func (e *EndpointDisabledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *EndpointDisabledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *EndpointDisabledException) HasMessage() bool {
	return e.Message != nil
}

// Indicates that the number of filter polices in your AWS account exceeds the
// limit. To add more filter polices, submit an SNS Limit Increase case in the AWS
// Support Center.
type FilterPolicyLimitExceededException struct {
	Message *string
}

func (e *FilterPolicyLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *FilterPolicyLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *FilterPolicyLimitExceededException) ErrorCode() string {
	return "FilterPolicyLimitExceededException"
}
func (e *FilterPolicyLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *FilterPolicyLimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *FilterPolicyLimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// Indicates an internal service error.
type InternalErrorException struct {
	Message *string
}

func (e *InternalErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalErrorException) ErrorCode() string             { return "InternalErrorException" }
func (e *InternalErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalErrorException) HasMessage() bool {
	return e.Message != nil
}

// Indicates that a request parameter does not comply with the associated
// constraints.
type InvalidParameterException struct {
	Message *string
}

func (e *InvalidParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterException) ErrorCode() string             { return "InvalidParameterException" }
func (e *InvalidParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidParameterException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidParameterException) HasMessage() bool {
	return e.Message != nil
}

// Indicates that a request parameter does not comply with the associated
// constraints.
type InvalidParameterValueException struct {
	Message *string
}

func (e *InvalidParameterValueException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterValueException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterValueException) ErrorCode() string             { return "InvalidParameterValueException" }
func (e *InvalidParameterValueException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidParameterValueException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidParameterValueException) HasMessage() bool {
	return e.Message != nil
}

// The credential signature isn't valid. You must use an HTTPS endpoint and sign
// your request using Signature Version 4.
type InvalidSecurityException struct {
	Message *string
}

func (e *InvalidSecurityException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidSecurityException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidSecurityException) ErrorCode() string             { return "InvalidSecurityException" }
func (e *InvalidSecurityException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidSecurityException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidSecurityException) HasMessage() bool {
	return e.Message != nil
}

// The ciphertext references a key that doesn't exist or that you don't have access
// to.
type KMSAccessDeniedException struct {
	Message *string
}

func (e *KMSAccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *KMSAccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *KMSAccessDeniedException) ErrorCode() string             { return "KMSAccessDeniedException" }
func (e *KMSAccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *KMSAccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *KMSAccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// The request was rejected because the specified customer master key (CMK) isn't
// enabled.
type KMSDisabledException struct {
	Message *string
}

func (e *KMSDisabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *KMSDisabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *KMSDisabledException) ErrorCode() string             { return "KMSDisabledException" }
func (e *KMSDisabledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *KMSDisabledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *KMSDisabledException) HasMessage() bool {
	return e.Message != nil
}

// The request was rejected because the state of the specified resource isn't valid
// for this request. For more information, see How Key State Affects Use of a
// Customer Master Key
// (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the
// AWS Key Management Service Developer Guide.
type KMSInvalidStateException struct {
	Message *string
}

func (e *KMSInvalidStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *KMSInvalidStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *KMSInvalidStateException) ErrorCode() string             { return "KMSInvalidStateException" }
func (e *KMSInvalidStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *KMSInvalidStateException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *KMSInvalidStateException) HasMessage() bool {
	return e.Message != nil
}

// The request was rejected because the specified entity or resource can't be
// found.
type KMSNotFoundException struct {
	Message *string
}

func (e *KMSNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *KMSNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *KMSNotFoundException) ErrorCode() string             { return "KMSNotFoundException" }
func (e *KMSNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *KMSNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *KMSNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The AWS access key ID needs a subscription for the service.
type KMSOptInRequired struct {
	Message *string
}

func (e *KMSOptInRequired) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *KMSOptInRequired) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *KMSOptInRequired) ErrorCode() string             { return "KMSOptInRequired" }
func (e *KMSOptInRequired) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *KMSOptInRequired) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *KMSOptInRequired) HasMessage() bool {
	return e.Message != nil
}

// The request was denied due to request throttling. For more information about
// throttling, see Limits
// (https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second)
// in the AWS Key Management Service Developer Guide.
type KMSThrottlingException struct {
	Message *string
}

func (e *KMSThrottlingException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *KMSThrottlingException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *KMSThrottlingException) ErrorCode() string             { return "KMSThrottlingException" }
func (e *KMSThrottlingException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *KMSThrottlingException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *KMSThrottlingException) HasMessage() bool {
	return e.Message != nil
}

// Indicates that the requested resource does not exist.
type NotFoundException struct {
	Message *string
}

func (e *NotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NotFoundException) ErrorCode() string             { return "NotFoundException" }
func (e *NotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NotFoundException) HasMessage() bool {
	return e.Message != nil
}

// Exception error indicating platform application disabled.
type PlatformApplicationDisabledException struct {
	Message *string
}

func (e *PlatformApplicationDisabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PlatformApplicationDisabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PlatformApplicationDisabledException) ErrorCode() string {
	return "PlatformApplicationDisabledException"
}
func (e *PlatformApplicationDisabledException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *PlatformApplicationDisabledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PlatformApplicationDisabledException) HasMessage() bool {
	return e.Message != nil
}

// Can't tag resource. Verify that the topic exists.
type ResourceNotFoundException struct {
	Message *string
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// A tag has been added to a resource with the same ARN as a deleted resource. Wait
// a short while and then retry the operation.
type StaleTagException struct {
	Message *string
}

func (e *StaleTagException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *StaleTagException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *StaleTagException) ErrorCode() string             { return "StaleTagException" }
func (e *StaleTagException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *StaleTagException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *StaleTagException) HasMessage() bool {
	return e.Message != nil
}

// Indicates that the customer already owns the maximum allowed number of
// subscriptions.
type SubscriptionLimitExceededException struct {
	Message *string
}

func (e *SubscriptionLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SubscriptionLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SubscriptionLimitExceededException) ErrorCode() string {
	return "SubscriptionLimitExceededException"
}
func (e *SubscriptionLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *SubscriptionLimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SubscriptionLimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// Can't add more than 50 tags to a topic.
type TagLimitExceededException struct {
	Message *string
}

func (e *TagLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagLimitExceededException) ErrorCode() string             { return "TagLimitExceededException" }
func (e *TagLimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TagLimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TagLimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// The request doesn't comply with the IAM tag policy. Correct your request and
// then retry it.
type TagPolicyException struct {
	Message *string
}

func (e *TagPolicyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagPolicyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagPolicyException) ErrorCode() string             { return "TagPolicyException" }
func (e *TagPolicyException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TagPolicyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TagPolicyException) HasMessage() bool {
	return e.Message != nil
}

// Indicates that the rate at which requests have been submitted for this action
// exceeds the limit for your account.
type ThrottledException struct {
	Message *string
}

func (e *ThrottledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ThrottledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ThrottledException) ErrorCode() string             { return "ThrottledException" }
func (e *ThrottledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ThrottledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ThrottledException) HasMessage() bool {
	return e.Message != nil
}

// Indicates that the customer already owns the maximum allowed number of topics.
type TopicLimitExceededException struct {
	Message *string
}

func (e *TopicLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TopicLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TopicLimitExceededException) ErrorCode() string             { return "TopicLimitExceededException" }
func (e *TopicLimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TopicLimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TopicLimitExceededException) HasMessage() bool {
	return e.Message != nil
}
