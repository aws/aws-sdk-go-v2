// Code generated by smithy-go-codegen DO NOT EDIT.

package sns

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns all of the properties of a topic. Topic properties returned might differ
// based on the authorization of the user.
func (c *Client) GetTopicAttributes(ctx context.Context, params *GetTopicAttributesInput, optFns ...func(*Options)) (*GetTopicAttributesOutput, error) {
	stack := middleware.NewStack("GetTopicAttributes", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpGetTopicAttributesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetTopicAttributesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetTopicAttributes(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetTopicAttributes",
			Err:           err,
		}
	}
	out := result.(*GetTopicAttributesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Input for GetTopicAttributes action.
type GetTopicAttributesInput struct {
	// The ARN of the topic whose properties you want to get.
	TopicArn *string
}

// Response for GetTopicAttributes action.
type GetTopicAttributesOutput struct {
	// A map of the topic's attributes. Attributes in this map include the following:
	//
	//
	// * DeliveryPolicy – The JSON serialization of the topic's delivery policy.
	//
	//     *
	// DisplayName – The human-readable name used in the From field for notifications
	// to email and email-json endpoints.
	//
	//     * Owner – The AWS account ID of the
	// topic's owner.
	//
	//     * Policy – The JSON serialization of the topic's access
	// control policy.
	//
	//     * SubscriptionsConfirmed – The number of confirmed
	// subscriptions for the topic.
	//
	//     * SubscriptionsDeleted – The number of deleted
	// subscriptions for the topic.
	//
	//     * SubscriptionsPending – The number of
	// subscriptions pending confirmation for the topic.
	//
	//     * TopicArn – The topic's
	// ARN.
	//
	//     * EffectiveDeliveryPolicy – The JSON serialization of the effective
	// delivery policy, taking system defaults into account.
	//
	//     <p>The following
	// attribute applies only to <a
	// href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p>
	// <ul> <li> <p> <code>KmsMasterKeyId</code> - The ID of an AWS-managed customer
	// master key (CMK) for Amazon SNS or a custom CMK. For more information, see <a
	// href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
	// Terms</a>. For more examples, see <a
	// href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a>
	// in the <i>AWS Key Management Service API Reference</i>.</p> </li> </ul>
	Attributes map[string]*string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpGetTopicAttributesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpGetTopicAttributes{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpGetTopicAttributes{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetTopicAttributes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sns",
		OperationName: "GetTopicAttributes",
	}
}
