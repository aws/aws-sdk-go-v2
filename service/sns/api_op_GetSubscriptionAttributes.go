// Code generated by smithy-go-codegen DO NOT EDIT.

package sns

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns all of the properties of a subscription.
func (c *Client) GetSubscriptionAttributes(ctx context.Context, params *GetSubscriptionAttributesInput, optFns ...func(*Options)) (*GetSubscriptionAttributesOutput, error) {
	stack := middleware.NewStack("GetSubscriptionAttributes", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpGetSubscriptionAttributesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetSubscriptionAttributesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetSubscriptionAttributes(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetSubscriptionAttributes",
			Err:           err,
		}
	}
	out := result.(*GetSubscriptionAttributesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Input for GetSubscriptionAttributes.
type GetSubscriptionAttributesInput struct {
	// The ARN of the subscription whose properties you want to get.
	SubscriptionArn *string
}

// Response for GetSubscriptionAttributes action.
type GetSubscriptionAttributesOutput struct {
	// A map of the subscription's attributes. Attributes in this map include the
	// following:
	//
	//     * ConfirmationWasAuthenticated – true if the subscription
	// confirmation request was authenticated.
	//
	//     * DeliveryPolicy – The JSON
	// serialization of the subscription's delivery policy.
	//
	//     *
	// EffectiveDeliveryPolicy – The JSON serialization of the effective delivery
	// policy that takes into account the topic delivery policy and account system
	// defaults.
	//
	//     * FilterPolicy – The filter policy JSON that is assigned to the
	// subscription. For more information, see Amazon SNS Message Filtering
	// (https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html) in the
	// Amazon SNS Developer Guide.
	//
	//     * Owner – The AWS account ID of the
	// subscription's owner.
	//
	//     * PendingConfirmation – true if the subscription
	// hasn't been confirmed. To confirm a pending subscription, call the
	// ConfirmSubscription action with a confirmation token.
	//
	//     * RawMessageDelivery
	// – true if raw message delivery is enabled for the subscription. Raw messages are
	// free of JSON formatting and can be sent to HTTP/S and Amazon SQS endpoints.
	//
	//
	// * RedrivePolicy – When specified, sends undeliverable messages to the specified
	// Amazon SQS dead-letter queue. Messages that can't be delivered due to client
	// errors (for example, when the subscribed endpoint is unreachable) or server
	// errors (for example, when the service that powers the subscribed endpoint
	// becomes unavailable) are held in the dead-letter queue for further analysis or
	// reprocessing.
	//
	//     * SubscriptionArn – The subscription's ARN.
	//
	//     * TopicArn –
	// The topic ARN that the subscription is associated with.
	Attributes map[string]*string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpGetSubscriptionAttributesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpGetSubscriptionAttributes{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpGetSubscriptionAttributes{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetSubscriptionAttributes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sns",
		OperationName: "GetSubscriptionAttributes",
	}
}
