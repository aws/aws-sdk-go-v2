// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package servicecatalog

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
)

const opProvisionProduct = "ProvisionProduct"

// ProvisionProductRequest returns a request value for making API operation for
// AWS Service Catalog.
//
// Provisions the specified product.
//
// A provisioned product is a resourced instance of a product. For example,
// provisioning a product based on a CloudFormation template launches a CloudFormation
// stack and its underlying resources. You can check the status of this request
// using DescribeRecord.
//
// If the request contains a tag key with an empty list of values, there is
// a tag conflict for that key. Do not include conflicted keys as tags, or this
// causes the error "Parameter validation failed: Missing required parameter
// in Tags[N]:Value".
//
//    // Example sending a request using ProvisionProductRequest.
//    req := client.ProvisionProductRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicecatalog-2015-12-10/ProvisionProduct
func (c *Client) ProvisionProductRequest(input *types.ProvisionProductInput) ProvisionProductRequest {
	op := &aws.Operation{
		Name:       opProvisionProduct,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ProvisionProductInput{}
	}

	req := c.newRequest(op, input, &types.ProvisionProductOutput{})
	return ProvisionProductRequest{Request: req, Input: input, Copy: c.ProvisionProductRequest}
}

// ProvisionProductRequest is the request type for the
// ProvisionProduct API operation.
type ProvisionProductRequest struct {
	*aws.Request
	Input *types.ProvisionProductInput
	Copy  func(*types.ProvisionProductInput) ProvisionProductRequest
}

// Send marshals and sends the ProvisionProduct API request.
func (r ProvisionProductRequest) Send(ctx context.Context) (*ProvisionProductResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ProvisionProductResponse{
		ProvisionProductOutput: r.Request.Data.(*types.ProvisionProductOutput),
		response:               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ProvisionProductResponse is the response type for the
// ProvisionProduct API operation.
type ProvisionProductResponse struct {
	*types.ProvisionProductOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ProvisionProduct request.
func (r *ProvisionProductResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
