// Code generated by smithy-go-codegen DO NOT EDIT.

package servicecatalog

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets the status of the specified portfolio share operation. This API can only be
// called by the master account in the organization or by a delegated admin.
func (c *Client) DescribePortfolioShareStatus(ctx context.Context, params *DescribePortfolioShareStatusInput, optFns ...func(*Options)) (*DescribePortfolioShareStatusOutput, error) {
	if params == nil {
		params = &DescribePortfolioShareStatusInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribePortfolioShareStatus", params, optFns, addOperationDescribePortfolioShareStatusMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribePortfolioShareStatusOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribePortfolioShareStatusInput struct {

	// The token for the portfolio share operation. This token is returned either by
	// CreatePortfolioShare or by DeletePortfolioShare.
	//
	// This member is required.
	PortfolioShareToken *string
}

type DescribePortfolioShareStatusOutput struct {

	// Organization node identifier. It can be either account id, organizational unit
	// id or organization id.
	OrganizationNodeValue *string

	// The portfolio identifier.
	PortfolioId *string

	// The token for the portfolio share operation. For example, share-6v24abcdefghi.
	PortfolioShareToken *string

	// Information about the portfolio share operation.
	ShareDetails *types.ShareDetails

	// Status of the portfolio share operation.
	Status types.ShareStatus

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribePortfolioShareStatusMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpDescribePortfolioShareStatus{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribePortfolioShareStatus{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribePortfolioShareStatusValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribePortfolioShareStatus(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDescribePortfolioShareStatus(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "servicecatalog",
		OperationName: "DescribePortfolioShareStatus",
	}
}
