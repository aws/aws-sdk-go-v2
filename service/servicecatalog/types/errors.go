// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// The specified resource is a duplicate.
type DuplicateResourceException struct {
	Message *string
}

func (e *DuplicateResourceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateResourceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateResourceException) ErrorCode() string             { return "DuplicateResourceException" }
func (e *DuplicateResourceException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DuplicateResourceException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateResourceException) HasMessage() bool {
	return e.Message != nil
}

// One or more parameters provided to the operation are not valid.
type InvalidParametersException struct {
	Message *string
}

func (e *InvalidParametersException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParametersException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParametersException) ErrorCode() string             { return "InvalidParametersException" }
func (e *InvalidParametersException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidParametersException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidParametersException) HasMessage() bool {
	return e.Message != nil
}

// An attempt was made to modify a resource that is in a state that is not valid.
// Check your resources to ensure that they are in valid states before retrying the
// operation.
type InvalidStateException struct {
	Message *string
}

func (e *InvalidStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidStateException) ErrorCode() string             { return "InvalidStateException" }
func (e *InvalidStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidStateException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidStateException) HasMessage() bool {
	return e.Message != nil
}

// The current limits of the service would have been exceeded by this operation.
// Decrease your resource use or increase your service limits and retry the
// operation.
type LimitExceededException struct {
	Message *string
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string             { return "LimitExceededException" }
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// The operation is not supported.
type OperationNotSupportedException struct {
	Message *string
}

func (e *OperationNotSupportedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OperationNotSupportedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OperationNotSupportedException) ErrorCode() string             { return "OperationNotSupportedException" }
func (e *OperationNotSupportedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OperationNotSupportedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OperationNotSupportedException) HasMessage() bool {
	return e.Message != nil
}

// A resource that is currently in use. Ensure that the resource is not in use and
// retry the operation.
type ResourceInUseException struct {
	Message *string
}

func (e *ResourceInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceInUseException) ErrorCode() string             { return "ResourceInUseException" }
func (e *ResourceInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceInUseException) HasMessage() bool {
	return e.Message != nil
}

// The specified resource was not found.
type ResourceNotFoundException struct {
	Message *string
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// An operation requiring TagOptions failed because the TagOptions migration
// process has not been performed for this account. Please use the AWS console to
// perform the migration process before retrying the operation.
type TagOptionNotMigratedException struct {
	Message *string
}

func (e *TagOptionNotMigratedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagOptionNotMigratedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagOptionNotMigratedException) ErrorCode() string             { return "TagOptionNotMigratedException" }
func (e *TagOptionNotMigratedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TagOptionNotMigratedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TagOptionNotMigratedException) HasMessage() bool {
	return e.Message != nil
}
