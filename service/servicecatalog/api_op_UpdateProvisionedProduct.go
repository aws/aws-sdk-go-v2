// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package servicecatalog

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
)

const opUpdateProvisionedProduct = "UpdateProvisionedProduct"

// UpdateProvisionedProductRequest returns a request value for making API operation for
// AWS Service Catalog.
//
// Requests updates to the configuration of the specified provisioned product.
//
// If there are tags associated with the object, they cannot be updated or added.
// Depending on the specific updates requested, this operation can update with
// no interruption, with some interruption, or replace the provisioned product
// entirely.
//
// You can check the status of this request using DescribeRecord.
//
//    // Example sending a request using UpdateProvisionedProductRequest.
//    req := client.UpdateProvisionedProductRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicecatalog-2015-12-10/UpdateProvisionedProduct
func (c *Client) UpdateProvisionedProductRequest(input *types.UpdateProvisionedProductInput) UpdateProvisionedProductRequest {
	op := &aws.Operation{
		Name:       opUpdateProvisionedProduct,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UpdateProvisionedProductInput{}
	}

	req := c.newRequest(op, input, &types.UpdateProvisionedProductOutput{})
	return UpdateProvisionedProductRequest{Request: req, Input: input, Copy: c.UpdateProvisionedProductRequest}
}

// UpdateProvisionedProductRequest is the request type for the
// UpdateProvisionedProduct API operation.
type UpdateProvisionedProductRequest struct {
	*aws.Request
	Input *types.UpdateProvisionedProductInput
	Copy  func(*types.UpdateProvisionedProductInput) UpdateProvisionedProductRequest
}

// Send marshals and sends the UpdateProvisionedProduct API request.
func (r UpdateProvisionedProductRequest) Send(ctx context.Context) (*UpdateProvisionedProductResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateProvisionedProductResponse{
		UpdateProvisionedProductOutput: r.Request.Data.(*types.UpdateProvisionedProductOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateProvisionedProductResponse is the response type for the
// UpdateProvisionedProduct API operation.
type UpdateProvisionedProductResponse struct {
	*types.UpdateProvisionedProductOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateProvisionedProduct request.
func (r *UpdateProvisionedProductResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
