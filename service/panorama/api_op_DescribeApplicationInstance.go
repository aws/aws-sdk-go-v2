// Code generated by smithy-go-codegen DO NOT EDIT.

package panorama

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/panorama/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Returns information about an application instance on a device.
func (c *Client) DescribeApplicationInstance(ctx context.Context, params *DescribeApplicationInstanceInput, optFns ...func(*Options)) (*DescribeApplicationInstanceOutput, error) {
	if params == nil {
		params = &DescribeApplicationInstanceInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeApplicationInstance", params, optFns, c.addOperationDescribeApplicationInstanceMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeApplicationInstanceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeApplicationInstanceInput struct {

	// The application instance's ID.
	//
	// This member is required.
	ApplicationInstanceId *string

	noSmithyDocumentSerde
}

type DescribeApplicationInstanceOutput struct {

	// The application instance's ID.
	ApplicationInstanceId *string

	// The ID of the application instance that this instance replaced.
	ApplicationInstanceIdToReplace *string

	// The application instance's ARN.
	Arn *string

	// When the application instance was created.
	CreatedTime *time.Time

	// The device's ID.
	DefaultRuntimeContextDevice *string

	// The device's bane.
	DefaultRuntimeContextDeviceName *string

	// The application instance's description.
	Description *string

	// The application instance's health status.
	HealthStatus types.ApplicationInstanceHealthStatus

	// The application instance was updated.
	LastUpdatedTime *time.Time

	// The application instance's name.
	Name *string

	// The application instance's runtime role ARN.
	RuntimeRoleArn *string

	// The application instance's status.
	Status types.ApplicationInstanceStatus

	// The application instance's status description.
	StatusDescription *string

	// The application instance's tags.
	Tags map[string]string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationDescribeApplicationInstanceMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpDescribeApplicationInstance{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeApplicationInstance{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpDescribeApplicationInstanceValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeApplicationInstance(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opDescribeApplicationInstance(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "panorama",
		OperationName: "DescribeApplicationInstance",
	}
}
