// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dynamodb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

const opListTables = "ListTables"

// ListTablesRequest returns a request value for making API operation for
// Amazon DynamoDB.
//
// Returns an array of table names associated with the current account and endpoint.
// The output from ListTables is paginated, with each page returning a maximum
// of 100 table names.
//
//    // Example sending a request using ListTablesRequest.
//    req := client.ListTablesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/ListTables
func (c *Client) ListTablesRequest(input *types.ListTablesInput) ListTablesRequest {
	op := &aws.Operation{
		Name:       opListTables,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"ExclusiveStartTableName"},
			OutputTokens:    []string{"LastEvaluatedTableName"},
			LimitToken:      "Limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListTablesInput{}
	}

	req := c.newRequest(op, input, &types.ListTablesOutput{})
	return ListTablesRequest{Request: req, Input: input, Copy: c.ListTablesRequest}
}

// ListTablesRequest is the request type for the
// ListTables API operation.
type ListTablesRequest struct {
	*aws.Request
	Input *types.ListTablesInput
	Copy  func(*types.ListTablesInput) ListTablesRequest
}

// Send marshals and sends the ListTables API request.
func (r ListTablesRequest) Send(ctx context.Context) (*ListTablesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListTablesResponse{
		ListTablesOutput: r.Request.Data.(*types.ListTablesOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListTablesRequestPaginator returns a paginator for ListTables.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListTablesRequest(input)
//   p := dynamodb.NewListTablesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListTablesPaginator(req ListTablesRequest) ListTablesPaginator {
	return ListTablesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListTablesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListTablesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListTablesPaginator struct {
	aws.Pager
}

func (p *ListTablesPaginator) CurrentPage() *types.ListTablesOutput {
	return p.Pager.CurrentPage().(*types.ListTablesOutput)
}

// ListTablesResponse is the response type for the
// ListTables API operation.
type ListTablesResponse struct {
	*types.ListTablesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListTables request.
func (r *ListTablesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
