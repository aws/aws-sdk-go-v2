// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package dynamodbiface provides an interface to enable mocking the Amazon DynamoDB service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package dynamodbiface

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// ClientAPI provides an interface to enable mocking the
// dynamodb.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // DynamoDB.
//    func myFunc(svc dynamodbiface.ClientAPI) bool {
//        // Make svc.BatchGetItem request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := dynamodb.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        dynamodbiface.ClientPI
//    }
//    func (m *mockClientClient) BatchGetItem(input *types.BatchGetItemInput) (*types.BatchGetItemOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	BatchGetItemRequest(*types.BatchGetItemInput) dynamodb.BatchGetItemRequest

	BatchWriteItemRequest(*types.BatchWriteItemInput) dynamodb.BatchWriteItemRequest

	CreateBackupRequest(*types.CreateBackupInput) dynamodb.CreateBackupRequest

	CreateGlobalTableRequest(*types.CreateGlobalTableInput) dynamodb.CreateGlobalTableRequest

	CreateTableRequest(*types.CreateTableInput) dynamodb.CreateTableRequest

	DeleteBackupRequest(*types.DeleteBackupInput) dynamodb.DeleteBackupRequest

	DeleteItemRequest(*types.DeleteItemInput) dynamodb.DeleteItemRequest

	DeleteTableRequest(*types.DeleteTableInput) dynamodb.DeleteTableRequest

	DescribeBackupRequest(*types.DescribeBackupInput) dynamodb.DescribeBackupRequest

	DescribeContinuousBackupsRequest(*types.DescribeContinuousBackupsInput) dynamodb.DescribeContinuousBackupsRequest

	DescribeEndpointsRequest(*types.DescribeEndpointsInput) dynamodb.DescribeEndpointsRequest

	DescribeGlobalTableRequest(*types.DescribeGlobalTableInput) dynamodb.DescribeGlobalTableRequest

	DescribeGlobalTableSettingsRequest(*types.DescribeGlobalTableSettingsInput) dynamodb.DescribeGlobalTableSettingsRequest

	DescribeLimitsRequest(*types.DescribeLimitsInput) dynamodb.DescribeLimitsRequest

	DescribeTableRequest(*types.DescribeTableInput) dynamodb.DescribeTableRequest

	DescribeTimeToLiveRequest(*types.DescribeTimeToLiveInput) dynamodb.DescribeTimeToLiveRequest

	GetItemRequest(*types.GetItemInput) dynamodb.GetItemRequest

	ListBackupsRequest(*types.ListBackupsInput) dynamodb.ListBackupsRequest

	ListGlobalTablesRequest(*types.ListGlobalTablesInput) dynamodb.ListGlobalTablesRequest

	ListTablesRequest(*types.ListTablesInput) dynamodb.ListTablesRequest

	ListTagsOfResourceRequest(*types.ListTagsOfResourceInput) dynamodb.ListTagsOfResourceRequest

	PutItemRequest(*types.PutItemInput) dynamodb.PutItemRequest

	QueryRequest(*types.QueryInput) dynamodb.QueryRequest

	RestoreTableFromBackupRequest(*types.RestoreTableFromBackupInput) dynamodb.RestoreTableFromBackupRequest

	RestoreTableToPointInTimeRequest(*types.RestoreTableToPointInTimeInput) dynamodb.RestoreTableToPointInTimeRequest

	ScanRequest(*types.ScanInput) dynamodb.ScanRequest

	TagResourceRequest(*types.TagResourceInput) dynamodb.TagResourceRequest

	TransactGetItemsRequest(*types.TransactGetItemsInput) dynamodb.TransactGetItemsRequest

	TransactWriteItemsRequest(*types.TransactWriteItemsInput) dynamodb.TransactWriteItemsRequest

	UntagResourceRequest(*types.UntagResourceInput) dynamodb.UntagResourceRequest

	UpdateContinuousBackupsRequest(*types.UpdateContinuousBackupsInput) dynamodb.UpdateContinuousBackupsRequest

	UpdateGlobalTableRequest(*types.UpdateGlobalTableInput) dynamodb.UpdateGlobalTableRequest

	UpdateGlobalTableSettingsRequest(*types.UpdateGlobalTableSettingsInput) dynamodb.UpdateGlobalTableSettingsRequest

	UpdateItemRequest(*types.UpdateItemInput) dynamodb.UpdateItemRequest

	UpdateTableRequest(*types.UpdateTableInput) dynamodb.UpdateTableRequest

	UpdateTimeToLiveRequest(*types.UpdateTimeToLiveInput) dynamodb.UpdateTimeToLiveRequest

	WaitUntilTableExists(context.Context, *types.DescribeTableInput, ...aws.WaiterOption) error

	WaitUntilTableNotExists(context.Context, *types.DescribeTableInput, ...aws.WaiterOption) error
}

var _ ClientAPI = (*dynamodb.Client)(nil)
