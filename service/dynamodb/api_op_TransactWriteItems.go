// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dynamodb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

const opTransactWriteItems = "TransactWriteItems"

// TransactWriteItemsRequest returns a request value for making API operation for
// Amazon DynamoDB.
//
// TransactWriteItems is a synchronous write operation that groups up to 25
// action requests. These actions can target items in different tables, but
// not in different AWS accounts or Regions, and no two actions can target the
// same item. For example, you cannot both ConditionCheck and Update the same
// item. The aggregate size of the items in the transaction cannot exceed 4
// MB.
//
// The actions are completed atomically so that either all of them succeed,
// or all of them fail. They are defined by the following objects:
//
//    * Put — Initiates a PutItem operation to write a new item. This structure
//    specifies the primary key of the item to be written, the name of the table
//    to write it in, an optional condition expression that must be satisfied
//    for the write to succeed, a list of the item's attributes, and a field
//    indicating whether to retrieve the item's attributes if the condition
//    is not met.
//
//    * Update — Initiates an UpdateItem operation to update an existing item.
//    This structure specifies the primary key of the item to be updated, the
//    name of the table where it resides, an optional condition expression that
//    must be satisfied for the update to succeed, an expression that defines
//    one or more attributes to be updated, and a field indicating whether to
//    retrieve the item's attributes if the condition is not met.
//
//    * Delete — Initiates a DeleteItem operation to delete an existing item.
//    This structure specifies the primary key of the item to be deleted, the
//    name of the table where it resides, an optional condition expression that
//    must be satisfied for the deletion to succeed, and a field indicating
//    whether to retrieve the item's attributes if the condition is not met.
//
//    * ConditionCheck — Applies a condition to an item that is not being
//    modified by the transaction. This structure specifies the primary key
//    of the item to be checked, the name of the table where it resides, a condition
//    expression that must be satisfied for the transaction to succeed, and
//    a field indicating whether to retrieve the item's attributes if the condition
//    is not met.
//
// DynamoDB rejects the entire TransactWriteItems request if any of the following
// is true:
//
//    * A condition in one of the condition expressions is not met.
//
//    * An ongoing operation is in the process of updating the same item.
//
//    * There is insufficient provisioned capacity for the transaction to be
//    completed.
//
//    * An item size becomes too large (bigger than 400 KB), a local secondary
//    index (LSI) becomes too large, or a similar validation error occurs because
//    of changes made by the transaction.
//
//    * The aggregate size of the items in the transaction exceeds 4 MB.
//
//    * There is a user error, such as an invalid data format.
//
//    // Example sending a request using TransactWriteItemsRequest.
//    req := client.TransactWriteItemsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/TransactWriteItems
func (c *Client) TransactWriteItemsRequest(input *types.TransactWriteItemsInput) TransactWriteItemsRequest {
	op := &aws.Operation{
		Name:       opTransactWriteItems,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.TransactWriteItemsInput{}
	}

	req := c.newRequest(op, input, &types.TransactWriteItemsOutput{})
	return TransactWriteItemsRequest{Request: req, Input: input, Copy: c.TransactWriteItemsRequest}
}

// TransactWriteItemsRequest is the request type for the
// TransactWriteItems API operation.
type TransactWriteItemsRequest struct {
	*aws.Request
	Input *types.TransactWriteItemsInput
	Copy  func(*types.TransactWriteItemsInput) TransactWriteItemsRequest
}

// Send marshals and sends the TransactWriteItems API request.
func (r TransactWriteItemsRequest) Send(ctx context.Context) (*TransactWriteItemsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &TransactWriteItemsResponse{
		TransactWriteItemsOutput: r.Request.Data.(*types.TransactWriteItemsOutput),
		response:                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// TransactWriteItemsResponse is the response type for the
// TransactWriteItems API operation.
type TransactWriteItemsResponse struct {
	*types.TransactWriteItemsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// TransactWriteItems request.
func (r *TransactWriteItemsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
