// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dynamodb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

const opRestoreTableToPointInTime = "RestoreTableToPointInTime"

// RestoreTableToPointInTimeRequest returns a request value for making API operation for
// Amazon DynamoDB.
//
// Restores the specified table to the specified point in time within EarliestRestorableDateTime
// and LatestRestorableDateTime. You can restore your table to any point in
// time during the last 35 days. Any number of users can execute up to 4 concurrent
// restores (any type of restore) in a given account.
//
// When you restore using point in time recovery, DynamoDB restores your table
// data to the state based on the selected date and time (day:hour:minute:second)
// to a new table.
//
// Along with data, the following are also included on the new restored table
// using point in time recovery:
//
//    * Global secondary indexes (GSIs)
//
//    * Local secondary indexes (LSIs)
//
//    * Provisioned read and write capacity
//
//    * Encryption settings All these settings come from the current settings
//    of the source table at the time of restore.
//
// You must manually set up the following on the restored table:
//
//    * Auto scaling policies
//
//    * IAM policies
//
//    * Amazon CloudWatch metrics and alarms
//
//    * Tags
//
//    * Stream settings
//
//    * Time to Live (TTL) settings
//
//    * Point in time recovery settings
//
//    // Example sending a request using RestoreTableToPointInTimeRequest.
//    req := client.RestoreTableToPointInTimeRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/RestoreTableToPointInTime
func (c *Client) RestoreTableToPointInTimeRequest(input *types.RestoreTableToPointInTimeInput) RestoreTableToPointInTimeRequest {
	op := &aws.Operation{
		Name:       opRestoreTableToPointInTime,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RestoreTableToPointInTimeInput{}
	}

	req := c.newRequest(op, input, &types.RestoreTableToPointInTimeOutput{})
	return RestoreTableToPointInTimeRequest{Request: req, Input: input, Copy: c.RestoreTableToPointInTimeRequest}
}

// RestoreTableToPointInTimeRequest is the request type for the
// RestoreTableToPointInTime API operation.
type RestoreTableToPointInTimeRequest struct {
	*aws.Request
	Input *types.RestoreTableToPointInTimeInput
	Copy  func(*types.RestoreTableToPointInTimeInput) RestoreTableToPointInTimeRequest
}

// Send marshals and sends the RestoreTableToPointInTime API request.
func (r RestoreTableToPointInTimeRequest) Send(ctx context.Context) (*RestoreTableToPointInTimeResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RestoreTableToPointInTimeResponse{
		RestoreTableToPointInTimeOutput: r.Request.Data.(*types.RestoreTableToPointInTimeOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RestoreTableToPointInTimeResponse is the response type for the
// RestoreTableToPointInTime API operation.
type RestoreTableToPointInTimeResponse struct {
	*types.RestoreTableToPointInTimeOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RestoreTableToPointInTime request.
func (r *RestoreTableToPointInTimeResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
