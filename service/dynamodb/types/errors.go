// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// There is another ongoing conflicting backup control plane operation on the
// table. The backup is either being created, deleted or restored to a table.
type BackupInUseException struct {
	Message *string
}

func (e *BackupInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *BackupInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *BackupInUseException) ErrorCode() string             { return "BackupInUseException" }
func (e *BackupInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *BackupInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *BackupInUseException) HasMessage() bool {
	return e.Message != nil
}

// Backup not found for the given BackupARN.
type BackupNotFoundException struct {
	Message *string
}

func (e *BackupNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *BackupNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *BackupNotFoundException) ErrorCode() string             { return "BackupNotFoundException" }
func (e *BackupNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *BackupNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *BackupNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// A condition specified in the operation could not be evaluated.
type ConditionalCheckFailedException struct {
	Message *string
}

func (e *ConditionalCheckFailedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConditionalCheckFailedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConditionalCheckFailedException) ErrorCode() string {
	return "ConditionalCheckFailedException"
}
func (e *ConditionalCheckFailedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConditionalCheckFailedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConditionalCheckFailedException) HasMessage() bool {
	return e.Message != nil
}

// Backups have not yet been enabled for this table.
type ContinuousBackupsUnavailableException struct {
	Message *string
}

func (e *ContinuousBackupsUnavailableException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ContinuousBackupsUnavailableException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ContinuousBackupsUnavailableException) ErrorCode() string {
	return "ContinuousBackupsUnavailableException"
}
func (e *ContinuousBackupsUnavailableException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ContinuousBackupsUnavailableException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ContinuousBackupsUnavailableException) HasMessage() bool {
	return e.Message != nil
}

// The specified global table already exists.
type GlobalTableAlreadyExistsException struct {
	Message *string
}

func (e *GlobalTableAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *GlobalTableAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *GlobalTableAlreadyExistsException) ErrorCode() string {
	return "GlobalTableAlreadyExistsException"
}
func (e *GlobalTableAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *GlobalTableAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *GlobalTableAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// The specified global table does not exist.
type GlobalTableNotFoundException struct {
	Message *string
}

func (e *GlobalTableNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *GlobalTableNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *GlobalTableNotFoundException) ErrorCode() string             { return "GlobalTableNotFoundException" }
func (e *GlobalTableNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *GlobalTableNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *GlobalTableNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// DynamoDB rejected the request because you retried a request with a different
// payload but with an idempotent token that was already used.
type IdempotentParameterMismatchException struct {
	Message *string
}

func (e *IdempotentParameterMismatchException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IdempotentParameterMismatchException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IdempotentParameterMismatchException) ErrorCode() string {
	return "IdempotentParameterMismatchException"
}
func (e *IdempotentParameterMismatchException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *IdempotentParameterMismatchException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IdempotentParameterMismatchException) HasMessage() bool {
	return e.Message != nil
}

// The operation tried to access a nonexistent index.
type IndexNotFoundException struct {
	Message *string
}

func (e *IndexNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IndexNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IndexNotFoundException) ErrorCode() string             { return "IndexNotFoundException" }
func (e *IndexNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IndexNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IndexNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// An error occurred on the server side.
type InternalServerError struct {
	Message *string
}

func (e *InternalServerError) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServerError) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServerError) ErrorCode() string             { return "InternalServerError" }
func (e *InternalServerError) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalServerError) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalServerError) HasMessage() bool {
	return e.Message != nil
}

type InvalidEndpointException struct {
	Message *string
}

func (e *InvalidEndpointException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidEndpointException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidEndpointException) ErrorCode() string             { return "InvalidEndpointException" }
func (e *InvalidEndpointException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidEndpointException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidEndpointException) HasMessage() bool {
	return e.Message != nil
}

// An invalid restore time was specified. RestoreDateTime must be between
// EarliestRestorableDateTime and LatestRestorableDateTime.
type InvalidRestoreTimeException struct {
	Message *string
}

func (e *InvalidRestoreTimeException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidRestoreTimeException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidRestoreTimeException) ErrorCode() string             { return "InvalidRestoreTimeException" }
func (e *InvalidRestoreTimeException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidRestoreTimeException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidRestoreTimeException) HasMessage() bool {
	return e.Message != nil
}

// An item collection is too large. This exception is only returned for tables that
// have one or more local secondary indexes.
type ItemCollectionSizeLimitExceededException struct {
	Message *string
}

func (e *ItemCollectionSizeLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ItemCollectionSizeLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ItemCollectionSizeLimitExceededException) ErrorCode() string {
	return "ItemCollectionSizeLimitExceededException"
}
func (e *ItemCollectionSizeLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ItemCollectionSizeLimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ItemCollectionSizeLimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// There is no limit to the number of daily on-demand backups that can be taken. Up
// to 50 simultaneous table operations are allowed per account. These operations
// include CreateTable, UpdateTable, DeleteTable,UpdateTimeToLive,
// RestoreTableFromBackup, and RestoreTableToPointInTime. The only exception is
// when you are creating a table with one or more secondary indexes. You can have
// up to 25 such requests running at a time; however, if the table or index
// specifications are complex, DynamoDB might temporarily reduce the number of
// concurrent operations. There is a soft account limit of 256 tables.
type LimitExceededException struct {
	Message *string
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string             { return "LimitExceededException" }
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// Point in time recovery has not yet been enabled for this source table.
type PointInTimeRecoveryUnavailableException struct {
	Message *string
}

func (e *PointInTimeRecoveryUnavailableException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PointInTimeRecoveryUnavailableException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PointInTimeRecoveryUnavailableException) ErrorCode() string {
	return "PointInTimeRecoveryUnavailableException"
}
func (e *PointInTimeRecoveryUnavailableException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *PointInTimeRecoveryUnavailableException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PointInTimeRecoveryUnavailableException) HasMessage() bool {
	return e.Message != nil
}

// Your request rate is too high. The AWS SDKs for DynamoDB automatically retry
// requests that receive this exception. Your request is eventually successful,
// unless your retry queue is too large to finish. Reduce the frequency of requests
// and use exponential backoff. For more information, go to Error Retries and
// Exponential Backoff
// (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff)
// in the Amazon DynamoDB Developer Guide.
type ProvisionedThroughputExceededException struct {
	Message *string
}

func (e *ProvisionedThroughputExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ProvisionedThroughputExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ProvisionedThroughputExceededException) ErrorCode() string {
	return "ProvisionedThroughputExceededException"
}
func (e *ProvisionedThroughputExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ProvisionedThroughputExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ProvisionedThroughputExceededException) HasMessage() bool {
	return e.Message != nil
}

// The specified replica is already part of the global table.
type ReplicaAlreadyExistsException struct {
	Message *string
}

func (e *ReplicaAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ReplicaAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ReplicaAlreadyExistsException) ErrorCode() string             { return "ReplicaAlreadyExistsException" }
func (e *ReplicaAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ReplicaAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ReplicaAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// The specified replica is no longer part of the global table.
type ReplicaNotFoundException struct {
	Message *string
}

func (e *ReplicaNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ReplicaNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ReplicaNotFoundException) ErrorCode() string             { return "ReplicaNotFoundException" }
func (e *ReplicaNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ReplicaNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ReplicaNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// Throughput exceeds the current throughput limit for your account. Please contact
// AWS Support at AWS Support (https://aws.amazon.com/support) to request a limit
// increase.
type RequestLimitExceeded struct {
	Message *string
}

func (e *RequestLimitExceeded) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *RequestLimitExceeded) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *RequestLimitExceeded) ErrorCode() string             { return "RequestLimitExceeded" }
func (e *RequestLimitExceeded) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *RequestLimitExceeded) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *RequestLimitExceeded) HasMessage() bool {
	return e.Message != nil
}

// The operation conflicts with the resource's availability. For example, you
// attempted to recreate an existing table, or tried to delete a table currently in
// the CREATING state.
type ResourceInUseException struct {
	Message *string
}

func (e *ResourceInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceInUseException) ErrorCode() string             { return "ResourceInUseException" }
func (e *ResourceInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceInUseException) HasMessage() bool {
	return e.Message != nil
}

// The operation tried to access a nonexistent table or index. The resource might
// not be specified correctly, or its status might not be ACTIVE.
type ResourceNotFoundException struct {
	Message *string
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// A target table with the specified name already exists.
type TableAlreadyExistsException struct {
	Message *string
}

func (e *TableAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TableAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TableAlreadyExistsException) ErrorCode() string             { return "TableAlreadyExistsException" }
func (e *TableAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TableAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TableAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// A target table with the specified name is either being created or deleted.
type TableInUseException struct {
	Message *string
}

func (e *TableInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TableInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TableInUseException) ErrorCode() string             { return "TableInUseException" }
func (e *TableInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TableInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TableInUseException) HasMessage() bool {
	return e.Message != nil
}

// A source table with the name TableName does not currently exist within the
// subscriber's account.
type TableNotFoundException struct {
	Message *string
}

func (e *TableNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TableNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TableNotFoundException) ErrorCode() string             { return "TableNotFoundException" }
func (e *TableNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TableNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TableNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The entire transaction request was canceled. DynamoDB cancels a
// TransactWriteItems request under the following circumstances:
//
//     * A condition
// in one of the condition expressions is not met.
//
//     * A table in the
// TransactWriteItems request is in a different account or region.
//
//     * More than
// one action in the TransactWriteItems operation targets the same item.
//
//     *
// There is insufficient provisioned capacity for the transaction to be
// completed.
//
//     * An item size becomes too large (larger than 400 KB), or a
// local secondary index (LSI) becomes too large, or a similar validation error
// occurs because of changes made by the transaction.
//
//     * There is a user error,
// such as an invalid data format.
//
//     <p>DynamoDB cancels a
// <code>TransactGetItems</code> request under the following circumstances:</p>
// <ul> <li> <p>There is an ongoing <code>TransactGetItems</code> operation that
// conflicts with a concurrent <code>PutItem</code>, <code>UpdateItem</code>,
// <code>DeleteItem</code> or <code>TransactWriteItems</code> request. In this case
// the <code>TransactGetItems</code> operation fails with a
// <code>TransactionCanceledException</code>.</p> </li> <li> <p>A table in the
// <code>TransactGetItems</code> request is in a different account or region.</p>
// </li> <li> <p>There is insufficient provisioned capacity for the transaction to
// be completed.</p> </li> <li> <p>There is a user error, such as an invalid data
// format.</p> </li> </ul> <note> <p>If using Java, DynamoDB lists the cancellation
// reasons on the <code>CancellationReasons</code> property. This property is not
// set for other languages. Transaction cancellation reasons are ordered in the
// order of requested items, if an item has no error it will have <code>NONE</code>
// code and <code>Null</code> message.</p> </note> <p>Cancellation reason codes and
// possible error messages:</p> <ul> <li> <p>No Errors:</p> <ul> <li> <p>Code:
// <code>NONE</code> </p> </li> <li> <p>Message: <code>null</code> </p> </li> </ul>
// </li> <li> <p>Conditional Check Failed:</p> <ul> <li> <p>Code:
// <code>ConditionalCheckFailed</code> </p> </li> <li> <p>Message: The conditional
// request failed. </p> </li> </ul> </li> <li> <p>Item Collection Size Limit
// Exceeded:</p> <ul> <li> <p>Code: <code>ItemCollectionSizeLimitExceeded</code>
// </p> </li> <li> <p>Message: Collection size exceeded.</p> </li> </ul> </li> <li>
// <p>Transaction Conflict:</p> <ul> <li> <p>Code: <code>TransactionConflict</code>
// </p> </li> <li> <p>Message: Transaction is ongoing for the item.</p> </li> </ul>
// </li> <li> <p>Provisioned Throughput Exceeded:</p> <ul> <li> <p>Code:
// <code>ProvisionedThroughputExceeded</code> </p> </li> <li> <p>Messages: </p>
// <ul> <li> <p>The level of configured provisioned throughput for the table was
// exceeded. Consider increasing your provisioning level with the UpdateTable
// API.</p> <note> <p>This Message is received when provisioned throughput is
// exceeded is on a provisioned DynamoDB table.</p> </note> </li> <li> <p>The level
// of configured provisioned throughput for one or more global secondary indexes of
// the table was exceeded. Consider increasing your provisioning level for the
// under-provisioned global secondary indexes with the UpdateTable API.</p> <note>
// <p>This message is returned when provisioned throughput is exceeded is on a
// provisioned GSI.</p> </note> </li> </ul> </li> </ul> </li> <li> <p>Throttling
// Error:</p> <ul> <li> <p>Code: <code>ThrottlingError</code> </p> </li> <li>
// <p>Messages: </p> <ul> <li> <p>Throughput exceeds the current capacity of your
// table or index. DynamoDB is automatically scaling your table or index so please
// try again shortly. If exceptions persist, check if you have a hot key:
// https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html.</p>
// <note> <p>This message is returned when writes get throttled on an On-Demand
// table as DynamoDB is automatically scaling the table.</p> </note> </li> <li>
// <p>Throughput exceeds the current capacity for one or more global secondary
// indexes. DynamoDB is automatically scaling your index so please try again
// shortly.</p> <note> <p>This message is returned when when writes get throttled
// on an On-Demand GSI as DynamoDB is automatically scaling the GSI.</p> </note>
// </li> </ul> </li> </ul> </li> <li> <p>Validation Error:</p> <ul> <li> <p>Code:
// <code>ValidationError</code> </p> </li> <li> <p>Messages: </p> <ul> <li> <p>One
// or more parameter values were invalid.</p> </li> <li> <p>The update expression
// attempted to update the secondary index key beyond allowed size limits.</p>
// </li> <li> <p>The update expression attempted to update the secondary index key
// to unsupported type.</p> </li> <li> <p>An operand in the update expression has
// an incorrect data type.</p> </li> <li> <p>Item size to update has exceeded the
// maximum allowed size.</p> </li> <li> <p>Number overflow. Attempting to store a
// number with magnitude larger than supported range.</p> </li> <li> <p>Type
// mismatch for attribute to update.</p> </li> <li> <p>Nesting Levels have exceeded
// supported limits.</p> </li> <li> <p>The document path provided in the update
// expression is invalid for update.</p> </li> <li> <p>The provided expression
// refers to an attribute that does not exist in the item.</p> </li> </ul> </li>
// </ul> </li> </ul>
type TransactionCanceledException struct {
	Message *string

	CancellationReasons []*CancellationReason
}

func (e *TransactionCanceledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TransactionCanceledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TransactionCanceledException) ErrorCode() string             { return "TransactionCanceledException" }
func (e *TransactionCanceledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TransactionCanceledException) GetCancellationReasons() []*CancellationReason {
	return e.CancellationReasons
}
func (e *TransactionCanceledException) HasCancellationReasons() bool {
	return e.CancellationReasons != nil
}
func (e *TransactionCanceledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TransactionCanceledException) HasMessage() bool {
	return e.Message != nil
}

// Operation was rejected because there is an ongoing transaction for the item.
type TransactionConflictException struct {
	Message *string
}

func (e *TransactionConflictException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TransactionConflictException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TransactionConflictException) ErrorCode() string             { return "TransactionConflictException" }
func (e *TransactionConflictException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TransactionConflictException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TransactionConflictException) HasMessage() bool {
	return e.Message != nil
}

// The transaction with the given request token is already in progress.
type TransactionInProgressException struct {
	Message *string
}

func (e *TransactionInProgressException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TransactionInProgressException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TransactionInProgressException) ErrorCode() string             { return "TransactionInProgressException" }
func (e *TransactionInProgressException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TransactionInProgressException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TransactionInProgressException) HasMessage() bool {
	return e.Message != nil
}
