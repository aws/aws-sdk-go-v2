// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dynamodb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

const opScan = "Scan"

// ScanRequest returns a request value for making API operation for
// Amazon DynamoDB.
//
// The Scan operation returns one or more items and item attributes by accessing
// every item in a table or a secondary index. To have DynamoDB return fewer
// items, you can provide a FilterExpression operation.
//
// If the total number of scanned items exceeds the maximum dataset size limit
// of 1 MB, the scan stops and results are returned to the user as a LastEvaluatedKey
// value to continue the scan in a subsequent operation. The results also include
// the number of items exceeding the limit. A scan can result in no table data
// meeting the filter criteria.
//
// A single Scan operation reads up to the maximum number of items set (if using
// the Limit parameter) or a maximum of 1 MB of data and then apply any filtering
// to the results using FilterExpression. If LastEvaluatedKey is present in
// the response, you need to paginate the result set. For more information,
// see Paginating the Results (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination)
// in the Amazon DynamoDB Developer Guide.
//
// Scan operations proceed sequentially; however, for faster performance on
// a large table or secondary index, applications can request a parallel Scan
// operation by providing the Segment and TotalSegments parameters. For more
// information, see Parallel Scan (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan)
// in the Amazon DynamoDB Developer Guide.
//
// Scan uses eventually consistent reads when accessing the data in a table;
// therefore, the result set might not include the changes to data in the table
// immediately before the operation began. If you need a consistent copy of
// the data, as of the time that the Scan begins, you can set the ConsistentRead
// parameter to true.
//
//    // Example sending a request using ScanRequest.
//    req := client.ScanRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/dynamodb-2012-08-10/Scan
func (c *Client) ScanRequest(input *types.ScanInput) ScanRequest {
	op := &aws.Operation{
		Name:       opScan,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"ExclusiveStartKey"},
			OutputTokens:    []string{"LastEvaluatedKey"},
			LimitToken:      "Limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ScanInput{}
	}

	req := c.newRequest(op, input, &types.ScanOutput{})
	return ScanRequest{Request: req, Input: input, Copy: c.ScanRequest}
}

// ScanRequest is the request type for the
// Scan API operation.
type ScanRequest struct {
	*aws.Request
	Input *types.ScanInput
	Copy  func(*types.ScanInput) ScanRequest
}

// Send marshals and sends the Scan API request.
func (r ScanRequest) Send(ctx context.Context) (*ScanResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ScanResponse{
		ScanOutput: r.Request.Data.(*types.ScanOutput),
		response:   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewScanRequestPaginator returns a paginator for Scan.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ScanRequest(input)
//   p := dynamodb.NewScanRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewScanPaginator(req ScanRequest) ScanPaginator {
	return ScanPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ScanInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ScanPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ScanPaginator struct {
	aws.Pager
}

func (p *ScanPaginator) CurrentPage() *types.ScanOutput {
	return p.Pager.CurrentPage().(*types.ScanOutput)
}

// ScanResponse is the response type for the
// Scan API operation.
type ScanResponse struct {
	*types.ScanOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// Scan request.
func (r *ScanResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
