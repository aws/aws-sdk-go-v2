// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// Specifies the EBS volume upgrade information. The broker identifier must be set
// to the keyword ALL. This means the changes apply to all the brokers in the
// cluster.
type BrokerEBSVolumeInfo struct {
	// The ID of the broker to update.
	KafkaBrokerNodeId *string
	// Size of the EBS volume to update.
	VolumeSizeGB *int32
}

type BrokerLogs struct {
	Firehose       *Firehose
	CloudWatchLogs *CloudWatchLogs
	S3             *S3
}

// Describes the setup to be used for Kafka broker nodes in the cluster.
type BrokerNodeGroupInfo struct {
	// The list of subnets to connect to in the client virtual private cloud (VPC). AWS
	// creates elastic network interfaces inside these subnets. Client applications use
	// elastic network interfaces to produce and consume data. Client subnets can't be
	// in Availability Zone us-east-1e.
	ClientSubnets []*string
	// The type of Amazon EC2 instances to use for Kafka brokers. The following
	// instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge,
	// kafka.m5.4xlarge, kafka.m5.12xlarge, and kafka.m5.24xlarge.
	InstanceType *string
	// Contains information about storage volumes attached to MSK broker nodes.
	StorageInfo *StorageInfo
	// The distribution of broker nodes across Availability Zones. This is an optional
	// parameter. If you don't specify it, Amazon MSK gives it the value DEFAULT. You
	// can also explicitly set this parameter to the value DEFAULT. No other values are
	// currently allowed. Amazon MSK distributes the broker nodes evenly across the
	// Availability Zones that correspond to the subnets you provide when you create
	// the cluster.
	BrokerAZDistribution BrokerAZDistribution
	// The AWS security groups to associate with the elastic network interfaces in
	// order to specify who can connect to and communicate with the Amazon MSK cluster.
	// If you don't specify a security group, Amazon MSK uses the default security
	// group associated with the VPC.
	SecurityGroups []*string
}

// BrokerNodeInfo
type BrokerNodeInfo struct {
	// Information about the version of software currently deployed on the Kafka
	// brokers in the cluster.
	CurrentBrokerSoftwareInfo *BrokerSoftwareInfo
	// The attached elastic network interface of the broker.
	AttachedENIId *string
	// Endpoints for accessing the broker.
	Endpoints []*string
	// The virtual private cloud (VPC) of the client.
	ClientVpcIpAddress *string
	// The ID of the broker.
	BrokerId *float64
	// The client subnet to which this broker node belongs.
	ClientSubnet *string
}

// Information about the current software installed on the cluster.
type BrokerSoftwareInfo struct {
	// The version of Apache Kafka.
	KafkaVersion *string
	// The revision of the configuration to use. This field isn't visible in this
	// preview release.
	ConfigurationRevision *int64
	// The Amazon Resource Name (ARN) of the configuration used for the cluster. This
	// field isn't visible in this preview release.
	ConfigurationArn *string
}

// Includes all client authentication information.
type ClientAuthentication struct {
	// Details for ClientAuthentication using TLS.
	Tls *Tls
}

type CloudWatchLogs struct {
	Enabled  *bool
	LogGroup *string
}

// Returns information about a cluster.
type ClusterInfo struct {
	LoggingInfo *LoggingInfo
	// Includes all encryption-related information.
	EncryptionInfo *EncryptionInfo
	// The number of broker nodes in the cluster.
	NumberOfBrokerNodes *int32
	// Information about the version of software currently deployed on the Kafka
	// brokers in the cluster.
	CurrentBrokerSoftwareInfo *BrokerSoftwareInfo
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterArn *string
	// The connection string to use to connect to the Apache ZooKeeper cluster.
	ZookeeperConnectString *string
	// Settings for open monitoring using Prometheus.
	OpenMonitoring *OpenMonitoring
	// Arn of active cluster operation.
	ActiveOperationArn *string
	// Specifies which metrics are gathered for the MSK cluster. This property has
	// three possible values: DEFAULT, PER_BROKER, and PER_TOPIC_PER_BROKER. For a list
	// of the metrics associated with each of these three levels of monitoring, see
	// Monitoring
	// (https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html).
	EnhancedMonitoring EnhancedMonitoring
	// Information about the broker nodes.
	BrokerNodeGroupInfo *BrokerNodeGroupInfo
	// The state of the cluster. The possible states are CREATING, ACTIVE, and FAILED.
	State ClusterState
	// The current version of the MSK cluster.
	CurrentVersion *string
	StateInfo      *StateInfo
	// Includes all client authentication information.
	ClientAuthentication *ClientAuthentication
	// Tags attached to the cluster.
	Tags map[string]*string
	// The name of the cluster.
	ClusterName *string
	// The time when the cluster was created.
	CreationTime *time.Time
}

// Returns information about a cluster operation.
type ClusterOperationInfo struct {
	// ARN of the cluster operation.
	OperationArn *string
	// The ID of the API request that triggered this operation.
	ClientRequestId *string
	// Information about cluster attributes before a cluster is updated.
	SourceClusterInfo *MutableClusterInfo
	// Describes the error if the operation fails.
	ErrorInfo *ErrorInfo
	// Type of the cluster operation.
	OperationType *string
	// State of the cluster operation.
	OperationState *string
	// The time that the operation was created.
	CreationTime *time.Time
	// ARN of the cluster.
	ClusterArn *string
	// The time at which the operation finished.
	EndTime *time.Time
	// Steps completed during the operation.
	OperationSteps []*ClusterOperationStep
	// Information about cluster attributes after a cluster is updated.
	TargetClusterInfo *MutableClusterInfo
}

// Step taken during a cluster operation.
type ClusterOperationStep struct {
	// The name of the step.
	StepName *string
	// Information about the step and its status.
	StepInfo *ClusterOperationStepInfo
}

// State information about the operation step.
type ClusterOperationStepInfo struct {
	// The steps current status.
	StepStatus *string
}

// Contains source Kafka versions and compatible target Kafka versions.
type CompatibleKafkaVersion struct {
	// A Kafka version.
	SourceVersion *string
	// A list of Kafka versions.
	TargetVersions []*string
}

// Represents an MSK Configuration.
type Configuration struct {
	// Latest revision of the configuration.
	LatestRevision *ConfigurationRevision
	// The description of the configuration.
	Description *string
	// The name of the configuration.
	Name *string
	// An array of the versions of Apache Kafka with which you can use this MSK
	// configuration. You can use this configuration for an MSK cluster only if the
	// Apache Kafka version specified for the cluster appears in this array.
	KafkaVersions []*string
	// The Amazon Resource Name (ARN) of the configuration.
	Arn *string
	// The time when the configuration was created.
	CreationTime *time.Time
}

// Specifies the configuration to use for the brokers.
type ConfigurationInfo struct {
	// The revision of the configuration to use.
	Revision *int64
	// ARN of the configuration to use.
	Arn *string
}

// Describes a configuration revision.
type ConfigurationRevision struct {
	// The time when the configuration revision was created.
	CreationTime *time.Time
	// The description of the configuration revision.
	Description *string
	// The revision number.
	Revision *int64
}

// Contains information about the EBS storage volumes attached to Kafka broker
// nodes.
type EBSStorageInfo struct {
	// The size in GiB of the EBS volume for the data drive on each broker node.
	VolumeSize *int32
}

// The data-volume encryption details.
type EncryptionAtRest struct {
	// The ARN of the AWS KMS key for encrypting data at rest. If you don't specify a
	// KMS key, MSK creates one for you and uses it.
	DataVolumeKMSKeyId *string
}

// Includes encryption-related information, such as the AWS KMS key used for
// encrypting data at rest and whether you want MSK to encrypt your data in
// transit.
type EncryptionInfo struct {
	// The details for encryption in transit.
	EncryptionInTransit *EncryptionInTransit
	// The data-volume encryption details.
	EncryptionAtRest *EncryptionAtRest
}

// The settings for encrypting data in transit.
type EncryptionInTransit struct {
	// Indicates the encryption setting for data in transit between clients and
	// brokers. The following are the possible values. TLS means that client-broker
	// communication is enabled with TLS only. TLS_PLAINTEXT means that client-broker
	// communication is enabled for both TLS-encrypted, as well as plaintext data.
	// PLAINTEXT means that client-broker communication is enabled in plaintext only.
	// The default value is TLS_PLAINTEXT.
	ClientBroker ClientBroker
	// When set to true, it indicates that data communication among the broker nodes of
	// the cluster is encrypted. When set to false, the communication happens in
	// plaintext. The default value is true.
	InCluster *bool
}

// Returns information about an error state of the cluster.
type ErrorInfo struct {
	// A number describing the error programmatically.
	ErrorCode *string
	// An optional field to provide more details about the error.
	ErrorString *string
}

type Firehose struct {
	Enabled        *bool
	DeliveryStream *string
}

// Indicates whether you want to enable or disable the JMX Exporter.
type JmxExporter struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	EnabledInBroker *bool
}

// Indicates whether you want to enable or disable the JMX Exporter.
type JmxExporterInfo struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	EnabledInBroker *bool
}

type KafkaVersion struct {
	Status  KafkaVersionStatus
	Version *string
}

type LoggingInfo struct {
	BrokerLogs *BrokerLogs
}

// Information about cluster attributes that can be updated via update APIs.
type MutableClusterInfo struct {
	LoggingInfo *LoggingInfo
	// Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon
	// CloudWatch for this cluster.
	EnhancedMonitoring EnhancedMonitoring
	// The settings for open monitoring.
	OpenMonitoring *OpenMonitoring
	// The Kafka version.
	KafkaVersion *string
	// The number of broker nodes in the cluster.
	NumberOfBrokerNodes *int32
	// Specifies the size of the EBS volume and the ID of the associated broker.
	BrokerEBSVolumeInfo []*BrokerEBSVolumeInfo
	// Information about the changes in the configuration of the brokers.
	ConfigurationInfo *ConfigurationInfo
}

// Indicates whether you want to enable or disable the Node Exporter.
type NodeExporter struct {
	// Indicates whether you want to enable or disable the Node Exporter.
	EnabledInBroker *bool
}

// Indicates whether you want to enable or disable the Node Exporter.
type NodeExporterInfo struct {
	// Indicates whether you want to enable or disable the Node Exporter.
	EnabledInBroker *bool
}

// The node information object.
type NodeInfo struct {
	// The node type.
	NodeType NodeType
	// The start time.
	AddedToClusterTime *string
	// The instance type.
	InstanceType *string
	// The Amazon Resource Name (ARN) of the node.
	NodeARN *string
	// The broker node info.
	BrokerNodeInfo *BrokerNodeInfo
	// The ZookeeperNodeInfo.
	ZookeeperNodeInfo *ZookeeperNodeInfo
}

// JMX and Node monitoring for the MSK cluster.
type OpenMonitoring struct {
	// Prometheus settings.
	Prometheus *Prometheus
}

// JMX and Node monitoring for the MSK cluster.
type OpenMonitoringInfo struct {
	// Prometheus settings.
	Prometheus *PrometheusInfo
}

// Prometheus settings.
type Prometheus struct {
	// Indicates whether you want to enable or disable the Node Exporter.
	NodeExporter *NodeExporter
	// Indicates whether you want to enable or disable the JMX Exporter.
	JmxExporter *JmxExporter
}

// Prometheus settings.
type PrometheusInfo struct {
	// Indicates whether you want to enable or disable the Node Exporter.
	NodeExporter *NodeExporterInfo
	// Indicates whether you want to enable or disable the JMX Exporter.
	JmxExporter *JmxExporterInfo
}

type S3 struct {
	Prefix  *string
	Enabled *bool
	Bucket  *string
}

type StateInfo struct {
	Code    *string
	Message *string
}

// Contains information about storage volumes attached to MSK broker nodes.
type StorageInfo struct {
	// EBS volume information.
	EbsStorageInfo *EBSStorageInfo
}

// Details for client authentication using TLS.
type Tls struct {
	// List of ACM Certificate Authority ARNs.
	CertificateAuthorityArnList []*string
}

// Zookeeper node information.
type ZookeeperNodeInfo struct {
	// The role-specific ID for Zookeeper.
	ZookeeperId *float64
	// The virtual private cloud (VPC) IP address of the client.
	ClientVpcIpAddress *string
	// The version of Zookeeper.
	ZookeeperVersion *string
	// The attached elastic network interface of the broker.
	AttachedENIId *string
	// Endpoints for accessing the ZooKeeper.
	Endpoints []*string
}
