// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ApplicationDeploymentLifecycle string

// Enum values for ApplicationDeploymentLifecycle
const (
	ApplicationDeploymentLifecycleDeploying ApplicationDeploymentLifecycle = "Deploying"
	ApplicationDeploymentLifecycleDeployed  ApplicationDeploymentLifecycle = "Deployed"
)

// Values returns all known values for ApplicationDeploymentLifecycle. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (ApplicationDeploymentLifecycle) Values() []ApplicationDeploymentLifecycle {
	return []ApplicationDeploymentLifecycle{
		"Deploying",
		"Deployed",
	}
}

type ApplicationLifecycle string

// Enum values for ApplicationLifecycle
const (
	ApplicationLifecycleCreating                ApplicationLifecycle = "Creating"
	ApplicationLifecycleCreated                 ApplicationLifecycle = "Created"
	ApplicationLifecycleAvailable               ApplicationLifecycle = "Available"
	ApplicationLifecycleReady                   ApplicationLifecycle = "Ready"
	ApplicationLifecycleStarting                ApplicationLifecycle = "Starting"
	ApplicationLifecycleRunning                 ApplicationLifecycle = "Running"
	ApplicationLifecycleStopping                ApplicationLifecycle = "Stopping"
	ApplicationLifecycleStopped                 ApplicationLifecycle = "Stopped"
	ApplicationLifecycleFailed                  ApplicationLifecycle = "Failed"
	ApplicationLifecycleDeleting                ApplicationLifecycle = "Deleting"
	ApplicationLifecycleDeletingFromEnvironment ApplicationLifecycle = "Deleting From Environment"
)

// Values returns all known values for ApplicationLifecycle. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ApplicationLifecycle) Values() []ApplicationLifecycle {
	return []ApplicationLifecycle{
		"Creating",
		"Created",
		"Available",
		"Ready",
		"Starting",
		"Running",
		"Stopping",
		"Stopped",
		"Failed",
		"Deleting",
		"Deleting From Environment",
	}
}

type ApplicationVersionLifecycle string

// Enum values for ApplicationVersionLifecycle
const (
	ApplicationVersionLifecycleCreating  ApplicationVersionLifecycle = "Creating"
	ApplicationVersionLifecycleAvailable ApplicationVersionLifecycle = "Available"
	ApplicationVersionLifecycleFailed    ApplicationVersionLifecycle = "Failed"
)

// Values returns all known values for ApplicationVersionLifecycle. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ApplicationVersionLifecycle) Values() []ApplicationVersionLifecycle {
	return []ApplicationVersionLifecycle{
		"Creating",
		"Available",
		"Failed",
	}
}

type BatchJobExecutionStatus string

// Enum values for BatchJobExecutionStatus
const (
	BatchJobExecutionStatusSubmitting           BatchJobExecutionStatus = "Submitting"
	BatchJobExecutionStatusHolding              BatchJobExecutionStatus = "Holding"
	BatchJobExecutionStatusDispatch             BatchJobExecutionStatus = "Dispatching"
	BatchJobExecutionStatusRunning              BatchJobExecutionStatus = "Running"
	BatchJobExecutionStatusCancelling           BatchJobExecutionStatus = "Cancelling"
	BatchJobExecutionStatusCancelled            BatchJobExecutionStatus = "Cancelled"
	BatchJobExecutionStatusSucceeded            BatchJobExecutionStatus = "Succeeded"
	BatchJobExecutionStatusFailed               BatchJobExecutionStatus = "Failed"
	BatchJobExecutionStatusSucceededWithWarning BatchJobExecutionStatus = "Succeeded With Warning"
)

// Values returns all known values for BatchJobExecutionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (BatchJobExecutionStatus) Values() []BatchJobExecutionStatus {
	return []BatchJobExecutionStatus{
		"Submitting",
		"Holding",
		"Dispatching",
		"Running",
		"Cancelling",
		"Cancelled",
		"Succeeded",
		"Failed",
		"Succeeded With Warning",
	}
}

type BatchJobType string

// Enum values for BatchJobType
const (
	BatchJobTypeVse  BatchJobType = "VSE"
	BatchJobTypeJes2 BatchJobType = "JES2"
	BatchJobTypeJes3 BatchJobType = "JES3"
)

// Values returns all known values for BatchJobType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (BatchJobType) Values() []BatchJobType {
	return []BatchJobType{
		"VSE",
		"JES2",
		"JES3",
	}
}

type DataSetTaskLifecycle string

// Enum values for DataSetTaskLifecycle
const (
	DataSetTaskLifecycleCreating  DataSetTaskLifecycle = "Creating"
	DataSetTaskLifecycleRunning   DataSetTaskLifecycle = "Running"
	DataSetTaskLifecycleCompleted DataSetTaskLifecycle = "Completed"
)

// Values returns all known values for DataSetTaskLifecycle. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DataSetTaskLifecycle) Values() []DataSetTaskLifecycle {
	return []DataSetTaskLifecycle{
		"Creating",
		"Running",
		"Completed",
	}
}

type DeploymentLifecycle string

// Enum values for DeploymentLifecycle
const (
	DeploymentLifecycleDeploying DeploymentLifecycle = "Deploying"
	DeploymentLifecycleSucceeded DeploymentLifecycle = "Succeeded"
	DeploymentLifecycleFailed    DeploymentLifecycle = "Failed"
)

// Values returns all known values for DeploymentLifecycle. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentLifecycle) Values() []DeploymentLifecycle {
	return []DeploymentLifecycle{
		"Deploying",
		"Succeeded",
		"Failed",
	}
}

type EngineType string

// Enum values for EngineType
const (
	EngineTypeMicrofocus EngineType = "microfocus"
	EngineTypeBluage     EngineType = "bluage"
)

// Values returns all known values for EngineType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (EngineType) Values() []EngineType {
	return []EngineType{
		"microfocus",
		"bluage",
	}
}

type EnvironmentLifecycle string

// Enum values for EnvironmentLifecycle
const (
	EnvironmentLifecycleCreating  EnvironmentLifecycle = "Creating"
	EnvironmentLifecycleAvailable EnvironmentLifecycle = "Available"
	EnvironmentLifecycleUpdating  EnvironmentLifecycle = "Updating"
	EnvironmentLifecycleDeleting  EnvironmentLifecycle = "Deleting"
	EnvironmentLifecycleFailed    EnvironmentLifecycle = "Failed"
)

// Values returns all known values for EnvironmentLifecycle. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (EnvironmentLifecycle) Values() []EnvironmentLifecycle {
	return []EnvironmentLifecycle{
		"Creating",
		"Available",
		"Updating",
		"Deleting",
		"Failed",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonUnknownOperation      ValidationExceptionReason = "unknownOperation"
	ValidationExceptionReasonCannotParse           ValidationExceptionReason = "cannotParse"
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "fieldValidationFailed"
	ValidationExceptionReasonOther                 ValidationExceptionReason = "other"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"unknownOperation",
		"cannotParse",
		"fieldValidationFailed",
		"other",
	}
}
