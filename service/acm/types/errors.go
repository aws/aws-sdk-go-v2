// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/aws/smithy-go"
)

// You do not have access required to perform this action.
type AccessDeniedException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "AccessDeniedException"
	}
	return *e.DynamicErrorCode
}
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// You are trying to update a resource or configuration that is already being
// created or updated. Wait for the previous operation to finish and try again.
type ConflictException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ConflictException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConflictException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConflictException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ConflictException"
	}
	return *e.DynamicErrorCode
}
func (e *ConflictException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// One or more of of request parameters specified is not valid.
type InvalidArgsException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidArgsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidArgsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidArgsException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidArgsException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidArgsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The requested Amazon Resource Name (ARN) does not refer to an existing resource.
type InvalidArnException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidArnException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidArnException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidArnException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidArnException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidArnException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// One or more values in the DomainValidationOption structure is incorrect.
type InvalidDomainValidationOptionsException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidDomainValidationOptionsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDomainValidationOptionsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDomainValidationOptionsException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidDomainValidationOptionsException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidDomainValidationOptionsException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// An input parameter was invalid.
type InvalidParameterException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidParameterException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Processing has reached an invalid state.
type InvalidStateException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidStateException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidStateException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// One or both of the values that make up the key-value pair is not valid. For
// example, you cannot specify a tag value that begins with aws:.
type InvalidTagException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *InvalidTagException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidTagException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidTagException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "InvalidTagException"
	}
	return *e.DynamicErrorCode
}
func (e *InvalidTagException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// An ACM quota has been exceeded.
type LimitExceededException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "LimitExceededException"
	}
	return *e.DynamicErrorCode
}
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The certificate request is in process and the certificate in your account has
// not yet been issued.
type RequestInProgressException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *RequestInProgressException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *RequestInProgressException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *RequestInProgressException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "RequestInProgressException"
	}
	return *e.DynamicErrorCode
}
func (e *RequestInProgressException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The certificate is in use by another Amazon Web Services service in the caller's
// account. Remove the association and try again.
type ResourceInUseException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceInUseException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceInUseException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The specified certificate cannot be found in the caller's account or the
// caller's account cannot be found.
type ResourceNotFoundException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ResourceNotFoundException"
	}
	return *e.DynamicErrorCode
}
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// A specified tag did not comply with an existing tag policy and was rejected.
type TagPolicyException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *TagPolicyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TagPolicyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TagPolicyException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "TagPolicyException"
	}
	return *e.DynamicErrorCode
}
func (e *TagPolicyException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The request was denied because it exceeded a quota.
type ThrottlingException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ThrottlingException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ThrottlingException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ThrottlingException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ThrottlingException"
	}
	return *e.DynamicErrorCode
}
func (e *ThrottlingException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The request contains too many tags. Try the request again with fewer tags.
type TooManyTagsException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *TooManyTagsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyTagsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyTagsException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "TooManyTagsException"
	}
	return *e.DynamicErrorCode
}
func (e *TooManyTagsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The supplied input failed to satisfy constraints of an Amazon Web Services
// service.
type ValidationException struct {
	Message *string

	DynamicErrorCode *string

	noSmithyDocumentSerde
}

func (e *ValidationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ValidationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ValidationException) ErrorCode() string {
	if e.DynamicErrorCode == nil {
		return "ValidationException"
	}
	return *e.DynamicErrorCode
}
func (e *ValidationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
