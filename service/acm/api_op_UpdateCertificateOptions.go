// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package acm

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/acm/types"
)

const opUpdateCertificateOptions = "UpdateCertificateOptions"

// UpdateCertificateOptionsRequest returns a request value for making API operation for
// AWS Certificate Manager.
//
// Updates a certificate. Currently, you can use this function to specify whether
// to opt in to or out of recording your certificate in a certificate transparency
// log. For more information, see Opting Out of Certificate Transparency Logging
// (https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency).
//
//    // Example sending a request using UpdateCertificateOptionsRequest.
//    req := client.UpdateCertificateOptionsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/acm-2015-12-08/UpdateCertificateOptions
func (c *Client) UpdateCertificateOptionsRequest(input *types.UpdateCertificateOptionsInput) UpdateCertificateOptionsRequest {
	op := &aws.Operation{
		Name:       opUpdateCertificateOptions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UpdateCertificateOptionsInput{}
	}

	req := c.newRequest(op, input, &types.UpdateCertificateOptionsOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return UpdateCertificateOptionsRequest{Request: req, Input: input, Copy: c.UpdateCertificateOptionsRequest}
}

// UpdateCertificateOptionsRequest is the request type for the
// UpdateCertificateOptions API operation.
type UpdateCertificateOptionsRequest struct {
	*aws.Request
	Input *types.UpdateCertificateOptionsInput
	Copy  func(*types.UpdateCertificateOptionsInput) UpdateCertificateOptionsRequest
}

// Send marshals and sends the UpdateCertificateOptions API request.
func (r UpdateCertificateOptionsRequest) Send(ctx context.Context) (*UpdateCertificateOptionsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateCertificateOptionsResponse{
		UpdateCertificateOptionsOutput: r.Request.Data.(*types.UpdateCertificateOptionsOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateCertificateOptionsResponse is the response type for the
// UpdateCertificateOptions API operation.
type UpdateCertificateOptionsResponse struct {
	*types.UpdateCertificateOptionsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateCertificateOptions request.
func (r *UpdateCertificateOptionsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
