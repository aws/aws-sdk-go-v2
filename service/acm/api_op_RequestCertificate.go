// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package acm

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/acm/types"
)

const opRequestCertificate = "RequestCertificate"

// RequestCertificateRequest returns a request value for making API operation for
// AWS Certificate Manager.
//
// Requests an ACM certificate for use with other AWS services. To request an
// ACM certificate, you must specify a fully qualified domain name (FQDN) in
// the DomainName parameter. You can also specify additional FQDNs in the SubjectAlternativeNames
// parameter.
//
// If you are requesting a private certificate, domain validation is not required.
// If you are requesting a public certificate, each domain name that you specify
// must be validated to verify that you own or control the domain. You can use
// DNS validation (https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html)
// or email validation (https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html).
// We recommend that you use DNS validation. ACM issues public certificates
// after receiving approval from the domain owner.
//
//    // Example sending a request using RequestCertificateRequest.
//    req := client.RequestCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/acm-2015-12-08/RequestCertificate
func (c *Client) RequestCertificateRequest(input *types.RequestCertificateInput) RequestCertificateRequest {
	op := &aws.Operation{
		Name:       opRequestCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RequestCertificateInput{}
	}

	req := c.newRequest(op, input, &types.RequestCertificateOutput{})
	return RequestCertificateRequest{Request: req, Input: input, Copy: c.RequestCertificateRequest}
}

// RequestCertificateRequest is the request type for the
// RequestCertificate API operation.
type RequestCertificateRequest struct {
	*aws.Request
	Input *types.RequestCertificateInput
	Copy  func(*types.RequestCertificateInput) RequestCertificateRequest
}

// Send marshals and sends the RequestCertificate API request.
func (r RequestCertificateRequest) Send(ctx context.Context) (*RequestCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RequestCertificateResponse{
		RequestCertificateOutput: r.Request.Data.(*types.RequestCertificateOutput),
		response:                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RequestCertificateResponse is the response type for the
// RequestCertificate API operation.
type RequestCertificateResponse struct {
	*types.RequestCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RequestCertificate request.
func (r *RequestCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
