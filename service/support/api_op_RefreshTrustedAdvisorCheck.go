// Code generated by smithy-go-codegen DO NOT EDIT.

package support

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/support/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Refreshes the AWS Trusted Advisor check that you specify using the check ID. You
// can get the check IDs by calling the DescribeTrustedAdvisorChecks () operation.
// Some checks are refreshed automatically. If you call the
// RefreshTrustedAdvisorCheck operation to refresh them, you might see the
// InvalidParameterValue error. The response contains a
// TrustedAdvisorCheckRefreshStatus () object.
//
//     * You must have a Business or
// Enterprise support plan to use the AWS Support API.
//
//     * If you call the AWS
// Support API from an account that does not have a Business or Enterprise support
// plan, the SubscriptionRequiredException error message appears. For information
// about changing your support plan, see AWS Support
// (http://aws.amazon.com/premiumsupport/).
func (c *Client) RefreshTrustedAdvisorCheck(ctx context.Context, params *RefreshTrustedAdvisorCheckInput, optFns ...func(*Options)) (*RefreshTrustedAdvisorCheckOutput, error) {
	stack := middleware.NewStack("RefreshTrustedAdvisorCheck", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpRefreshTrustedAdvisorCheckMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRefreshTrustedAdvisorCheckValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRefreshTrustedAdvisorCheck(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RefreshTrustedAdvisorCheck",
			Err:           err,
		}
	}
	out := result.(*RefreshTrustedAdvisorCheckOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type RefreshTrustedAdvisorCheckInput struct {
	// The unique identifier for the Trusted Advisor check to refresh. Note: Specifying
	// the check ID of a check that is automatically refreshed causes an
	// InvalidParameterValue error.
	CheckId *string
}

// The current refresh status of a Trusted Advisor check.
type RefreshTrustedAdvisorCheckOutput struct {
	// The current refresh status for a check, including the amount of time until the
	// check is eligible for refresh.
	Status *types.TrustedAdvisorCheckRefreshStatus

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpRefreshTrustedAdvisorCheckMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpRefreshTrustedAdvisorCheck{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpRefreshTrustedAdvisorCheck{}, middleware.After)
}

func newServiceMetadataMiddleware_opRefreshTrustedAdvisorCheck(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "support",
		OperationName: "RefreshTrustedAdvisorCheck",
	}
}
