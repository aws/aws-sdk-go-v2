// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// Describes resources needed to authenticate access to some source repositories.
// The specific resource depends on the repository provider.
type AuthenticationConfiguration struct {

	// The Amazon Resource Name (ARN) of the IAM role that grants the App Runner
	// service access to a source repository. It's required for ECR image repositories
	// (but not for ECR Public repositories).
	AccessRoleArn *string

	// The Amazon Resource Name (ARN) of the App Runner connection that enables the App
	// Runner service to connect to a source repository. It's required for GitHub code
	// repositories.
	ConnectionArn *string
}

// Describes an AWS App Runner automatic scaling configuration resource. Multiple
// revisions of a configuration have the same AutoScalingConfigurationName and
// different AutoScalingConfigurationRevision values. A higher MinSize increases
// the spread of your App Runner service over more Availability Zones in the AWS
// Region. The tradeoff is a higher minimal cost. A lower MaxSize controls your
// cost. The tradeoff is lower responsiveness during peak demand.
type AutoScalingConfiguration struct {

	// The Amazon Resource Name (ARN) of this auto scaling configuration.
	AutoScalingConfigurationArn *string

	// The customer-provided auto scaling configuration name. It can be used in
	// multiple revisions of a configuration.
	AutoScalingConfigurationName *string

	// The revision of this auto scaling configuration. It's unique among all the
	// active configurations ("Status": "ACTIVE") that share the same
	// AutoScalingConfigurationName.
	AutoScalingConfigurationRevision int32

	// The time when the auto scaling configuration was created. It's in Unix time
	// stamp format.
	CreatedAt *time.Time

	// The time when the auto scaling configuration was deleted. It's in Unix time
	// stamp format.
	DeletedAt *time.Time

	// It's set to true for the configuration with the highest Revision among all
	// configurations that share the same Name. It's set to false otherwise.
	Latest bool

	// The maximum number of concurrent requests that an instance processes. If the
	// number of concurrent requests exceeds this limit, App Runner scales the service
	// up.
	MaxConcurrency int32

	// The maximum number of instances that a service scales up to. At most MaxSize
	// instances actively serve traffic for your service.
	MaxSize int32

	// The minimum number of instances that App Runner provisions for a service. The
	// service always has at least MinSize provisioned instances. Some of them actively
	// serve traffic. The rest of them (provisioned and inactive instances) are a
	// cost-effective compute capacity reserve and are ready to be quickly activated.
	// You pay for memory usage of all the provisioned instances. You pay for CPU usage
	// of only the active subset. App Runner temporarily doubles the number of
	// provisioned instances during deployments, to maintain the same capacity for both
	// old and new code.
	MinSize int32

	// The current state of the auto scaling configuration. If the status of a
	// configuration revision is INACTIVE, it was deleted and can't be used. Inactive
	// configuration revisions are permanently removed some time after they are
	// deleted.
	Status AutoScalingConfigurationStatus
}

// Provides summary information about an AWS App Runner automatic scaling
// configuration resource. This type contains limited information about an auto
// scaling configuration. It includes only identification information, without
// configuration details. It's returned by the ListAutoScalingConfigurations
// action. Complete configuration information is returned by the
// CreateAutoScalingConfiguration, DescribeAutoScalingConfiguration, and
// DeleteAutoScalingConfiguration actions using the AutoScalingConfiguration type.
type AutoScalingConfigurationSummary struct {

	// The Amazon Resource Name (ARN) of this auto scaling configuration.
	AutoScalingConfigurationArn *string

	// The customer-provided auto scaling configuration name. It can be used in
	// multiple revisions of a configuration.
	AutoScalingConfigurationName *string

	// The revision of this auto scaling configuration. It's unique among all the
	// active configurations ("Status": "ACTIVE") with the same
	// AutoScalingConfigurationName.
	AutoScalingConfigurationRevision int32
}

// Describes a certificate CNAME record to add to your DNS. For more information,
// see AssociateCustomDomain
// (https://docs.aws.amazon.com/apprunner/latest/api/API_AssociateCustomDomain.html).
type CertificateValidationRecord struct {

	// The certificate CNAME record name.
	Name *string

	// The current state of the certificate CNAME record validation. It should change
	// to SUCCESS after App Runner completes validation with your DNS.
	Status CertificateValidationRecordStatus

	// The record type, always CNAME.
	Type *string

	// The certificate CNAME record value.
	Value *string
}

// Describes the configuration that AWS App Runner uses to build and run an App
// Runner service from a source code repository.
type CodeConfiguration struct {

	// The source of the App Runner configuration. Values are interpreted as
	// follows:
	//
	// * REPOSITORY – App Runner reads configuration values from the
	// apprunner.yaml file in the source code repository and ignores
	// CodeConfigurationValues.
	//
	// * API – App Runner uses configuration values provided
	// in CodeConfigurationValues and ignores the apprunner.yaml file in the source
	// code repository.
	//
	// This member is required.
	ConfigurationSource ConfigurationSource

	// The basic configuration for building and running the App Runner service. Use it
	// to quickly launch an App Runner service without providing a apprunner.yaml file
	// in the source code repository (or ignoring the file if it exists).
	CodeConfigurationValues *CodeConfigurationValues
}

// Describes the basic configuration needed for building and running an AWS App
// Runner service. This type doesn't support the full set of possible configuration
// options. Fur full configuration capabilities, use a apprunner.yaml file in the
// source code repository.
type CodeConfigurationValues struct {

	// A runtime environment type for building and running an App Runner service. It
	// represents a programming language runtime.
	//
	// This member is required.
	Runtime Runtime

	// The command App Runner runs to build your application.
	BuildCommand *string

	// The port that your application listens to in the container. Default: 8080
	Port *string

	// The environment variables that are available to your running App Runner service.
	// An array of key-value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for
	// system use and aren't valid.
	RuntimeEnvironmentVariables map[string]string

	// The command App Runner runs to start your application.
	StartCommand *string
}

// Describes a source code repository.
type CodeRepository struct {

	// The location of the repository that contains the source code.
	//
	// This member is required.
	RepositoryUrl *string

	// The version that should be used within the source code repository.
	//
	// This member is required.
	SourceCodeVersion *SourceCodeVersion

	// Configuration for building and running the service from a source code
	// repository.
	CodeConfiguration *CodeConfiguration
}

// Describes an AWS App Runner connection resource.
type Connection struct {

	// The Amazon Resource Name (ARN) of this connection.
	ConnectionArn *string

	// The customer-provided connection name.
	ConnectionName *string

	// The App Runner connection creation time, expressed as a Unix time stamp.
	CreatedAt *time.Time

	// The source repository provider.
	ProviderType ProviderType

	// The current state of the App Runner connection. When the state is AVAILABLE, you
	// can use the connection to create an App Runner service.
	Status ConnectionStatus
}

// Provides summary information about an AWS App Runner connection resource.
type ConnectionSummary struct {

	// The Amazon Resource Name (ARN) of this connection.
	ConnectionArn *string

	// The customer-provided connection name.
	ConnectionName *string

	// The App Runner connection creation time, expressed as a Unix time stamp.
	CreatedAt *time.Time

	// The source repository provider.
	ProviderType ProviderType

	// The current state of the App Runner connection. When the state is AVAILABLE, you
	// can use the connection to create an App Runner service.
	Status ConnectionStatus
}

// Describes a custom domain that's associated with an AWS App Runner service.
type CustomDomain struct {

	// An associated custom domain endpoint. It can be a root domain (for example,
	// example.com), a subdomain (for example, login.example.com or
	// admin.login.example.com), or a wildcard (for example, *.example.com).
	//
	// This member is required.
	DomainName *string

	// When true, the subdomain www.DomainName  is associated with the App Runner
	// service in addition to the base domain.
	//
	// This member is required.
	EnableWWWSubdomain *bool

	// The current state of the domain name association.
	//
	// This member is required.
	Status CustomDomainAssociationStatus

	// A list of certificate CNAME records that's used for this domain name.
	CertificateValidationRecords []CertificateValidationRecord
}

// Describes a custom encryption key that AWS App Runner uses to encrypt copies of
// the source repository and service logs.
type EncryptionConfiguration struct {

	// The ARN of the KMS key that's used for encryption.
	//
	// This member is required.
	KmsKey *string
}

// Describes the settings for the health check that AWS App Runner performs to
// monitor the health of a service.
type HealthCheckConfiguration struct {

	// The number of consecutive checks that must succeed before App Runner decides
	// that the service is healthy. Default: 3
	HealthyThreshold *int32

	// The time interval, in seconds, between health checks. Default: 5
	Interval *int32

	// The URL that health check requests are sent to. Path is only applicable when you
	// set Protocol to HTTP. Default: "/"
	Path *string

	// The IP protocol that App Runner uses to perform health checks for your service.
	// If you set Protocol to HTTP, App Runner sends health check requests to the HTTP
	// path specified by Path. Default: TCP
	Protocol HealthCheckProtocol

	// The time, in seconds, to wait for a health check response before deciding it
	// failed. Default: 2
	Timeout *int32

	// The number of consecutive checks that must fail before App Runner decides that
	// the service is unhealthy. Default: 3
	UnhealthyThreshold *int32
}

// Describes the configuration that AWS App Runner uses to run an App Runner
// service using an image pulled from a source image repository.
type ImageConfiguration struct {

	// The port that your application listens to in the container. Default: 8080
	Port *string

	// Environment variables that are available to your running App Runner service. An
	// array of key-value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for
	// system use and aren't valid.
	RuntimeEnvironmentVariables map[string]string

	// An optional command that App Runner runs to start the application in the source
	// image. If specified, this command overrides the Docker image’s default start
	// command.
	StartCommand *string
}

// Describes a source image repository.
type ImageRepository struct {

	// The identifier of an image. For an image in Amazon Elastic Container Registry
	// (Amazon ECR), this is an image name. For the image name format, see Pulling an
	// image
	// (https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html)
	// in the Amazon ECR User Guide.
	//
	// This member is required.
	ImageIdentifier *string

	// The type of the image repository. This reflects the repository provider and
	// whether the repository is private or public.
	//
	// This member is required.
	ImageRepositoryType ImageRepositoryType

	// Configuration for running the identified image.
	ImageConfiguration *ImageConfiguration
}

// Describes the runtime configuration of an AWS App Runner service instance
// (scaling unit).
type InstanceConfiguration struct {

	// The number of CPU units reserved for each instance of your App Runner service.
	// Default: 1 vCPU
	Cpu *string

	// The Amazon Resource Name (ARN) of an IAM role that provides permissions to your
	// App Runner service. These are permissions that your code needs when it calls any
	// AWS APIs.
	InstanceRoleArn *string

	// The amount of memory, in MB or GB, reserved for each instance of your App Runner
	// service. Default: 2 GB
	Memory *string
}

// Provides summary information for an operation that occurred on an AWS App Runner
// service.
type OperationSummary struct {

	// The time when the operation ended. It's in the Unix time stamp format.
	EndedAt *time.Time

	// A unique ID of this operation. It's unique in the scope of the App Runner
	// service.
	Id *string

	// The time when the operation started. It's in the Unix time stamp format.
	StartedAt *time.Time

	// The current state of the operation.
	Status OperationStatus

	// The Amazon Resource Name (ARN) of the resource that the operation acted on (for
	// example, an App Runner service).
	TargetArn *string

	// The type of operation. It indicates a specific action that occured.
	Type OperationType

	// The time when the operation was last updated. It's in the Unix time stamp
	// format.
	UpdatedAt *time.Time
}

// Describes an AWS App Runner service. It can describe a service in any state,
// including deleted services. This type contains the full information about a
// service, including configuration details. It's returned by the CreateService
// (https://docs.aws.amazon.com/apprunner/latest/api/API_CreateService.html),
// DescribeService
// (https://docs.aws.amazon.com/apprunner/latest/api/API_DescribeService.html), and
// DeleteService
// (https://docs.aws.amazon.com/apprunner/latest/api/API_DeleteService.html)
// actions. A subset of this information is returned by the ListServices
// (https://docs.aws.amazon.com/apprunner/latest/api/API_ListServices.html) action
// using the ServiceSummary
// (https://docs.aws.amazon.com/apprunner/latest/api/API_ServiceSummary.html) type.
type Service struct {

	// Summary information for the App Runner automatic scaling configuration resource
	// that's associated with this service.
	//
	// This member is required.
	AutoScalingConfigurationSummary *AutoScalingConfigurationSummary

	// The time when the App Runner service was created. It's in the Unix time stamp
	// format.
	//
	// This member is required.
	CreatedAt *time.Time

	// The runtime configuration of instances (scaling units) of this service.
	//
	// This member is required.
	InstanceConfiguration *InstanceConfiguration

	// The Amazon Resource Name (ARN) of this service.
	//
	// This member is required.
	ServiceArn *string

	// An ID that App Runner generated for this service. It's unique within the AWS
	// Region.
	//
	// This member is required.
	ServiceId *string

	// The customer-provided service name.
	//
	// This member is required.
	ServiceName *string

	// A subdomain URL that App Runner generated for this service. You can use this URL
	// to access your service web application.
	//
	// This member is required.
	ServiceUrl *string

	// The source deployed to the App Runner service. It can be a code or an image
	// repository.
	//
	// This member is required.
	SourceConfiguration *SourceConfiguration

	// The current state of the App Runner service. These particular values mean the
	// following.
	//
	// * CREATE_FAILED – The service failed to create. To troubleshoot this
	// failure, read the failure events and logs, change any parameters that need to be
	// fixed, and retry the call to create the service. The failed service isn't
	// usable, and still counts towards your service quota. When you're done analyzing
	// the failure, delete the service.
	//
	// * DELETE_FAILED – The service failed to delete
	// and can't be successfully recovered. Retry the service deletion call to ensure
	// that all related resources are removed.
	//
	// This member is required.
	Status ServiceStatus

	// The time when the App Runner service was last updated at. It's in the Unix time
	// stamp format.
	//
	// This member is required.
	UpdatedAt *time.Time

	// The time when the App Runner service was deleted. It's in the Unix time stamp
	// format.
	DeletedAt *time.Time

	// The encryption key that App Runner uses to encrypt the service logs and the copy
	// of the source repository that App Runner maintains for the service. It can be
	// either a customer-provided encryption key or an AWS managed CMK.
	EncryptionConfiguration *EncryptionConfiguration

	// The settings for the health check that App Runner performs to monitor the health
	// of this service.
	HealthCheckConfiguration *HealthCheckConfiguration
}

// Provides summary information for an AWS App Runner service. This type contains
// limited information about a service. It doesn't include configuration details.
// It's returned by the ListServices
// (https://docs.aws.amazon.com/apprunner/latest/api/API_ListServices.html) action.
// Complete service information is returned by the CreateService
// (https://docs.aws.amazon.com/apprunner/latest/api/API_CreateService.html),
// DescribeService
// (https://docs.aws.amazon.com/apprunner/latest/api/API_DescribeService.html), and
// DeleteService
// (https://docs.aws.amazon.com/apprunner/latest/api/API_DeleteService.html)
// actions using the Service
// (https://docs.aws.amazon.com/apprunner/latest/api/API_Service.html) type.
type ServiceSummary struct {

	// The time when the App Runner service was created. It's in the Unix time stamp
	// format.
	CreatedAt *time.Time

	// The Amazon Resource Name (ARN) of this service.
	ServiceArn *string

	// An ID that App Runner generated for this service. It's unique within the AWS
	// Region.
	ServiceId *string

	// The customer-provided service name.
	ServiceName *string

	// A subdomain URL that App Runner generated for this service. You can use this URL
	// to access your service web application.
	ServiceUrl *string

	// The current state of the App Runner service. These particular values mean the
	// following.
	//
	// * CREATE_FAILED – The service failed to create. Read the failure
	// events and logs, change any parameters that need to be fixed, and retry the call
	// to create the service. The failed service isn't usable, and still counts towards
	// your service quota. When you're done analyzing the failure, delete the
	// service.
	//
	// * DELETE_FAILED – The service failed to delete and can't be
	// successfully recovered. Retry the service deletion call to ensure that all
	// related resources are removed.
	Status ServiceStatus

	// The time when the App Runner service was last updated. It's in theUnix time
	// stamp format.
	UpdatedAt *time.Time
}

// Identifies a version of code that AWS App Runner refers to within a source code
// repository.
type SourceCodeVersion struct {

	// The type of version identifier. For a git-based repository, branches represent
	// versions.
	//
	// This member is required.
	Type SourceCodeVersionType

	// A source code version. For a git-based repository, a branch name maps to a
	// specific version. App Runner uses the most recent commit to the branch.
	//
	// This member is required.
	Value *string
}

// Describes the source deployed to an AWS App Runner service. It can be a code or
// an image repository.
type SourceConfiguration struct {

	// Describes the resources that are needed to authenticate access to some source
	// repositories.
	AuthenticationConfiguration *AuthenticationConfiguration

	// If true, continuous integration from the source repository is enabled for the
	// App Runner service. Each repository change (source code commit or new image
	// version) starts a deployment. Default: true
	AutoDeploymentsEnabled *bool

	// The description of a source code repository. You must provide either this member
	// or ImageRepository (but not both).
	CodeRepository *CodeRepository

	// The description of a source image repository. You must provide either this
	// member or CodeRepository (but not both).
	ImageRepository *ImageRepository
}

// Describes a tag that is applied to an AWS App Runner resource. A tag is a
// metadata item consisting of a key-value pair.
type Tag struct {

	// The key of the tag.
	Key *string

	// The value of the tag.
	Value *string
}
