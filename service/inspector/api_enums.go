// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package inspector

type AccessDeniedErrorCode string

// Enum values for AccessDeniedErrorCode
const (
	AccessDeniedErrorCodeAccessDeniedToAssessmentTarget   AccessDeniedErrorCode = "ACCESS_DENIED_TO_ASSESSMENT_TARGET"
	AccessDeniedErrorCodeAccessDeniedToAssessmentTemplate AccessDeniedErrorCode = "ACCESS_DENIED_TO_ASSESSMENT_TEMPLATE"
	AccessDeniedErrorCodeAccessDeniedToAssessmentRun      AccessDeniedErrorCode = "ACCESS_DENIED_TO_ASSESSMENT_RUN"
	AccessDeniedErrorCodeAccessDeniedToFinding            AccessDeniedErrorCode = "ACCESS_DENIED_TO_FINDING"
	AccessDeniedErrorCodeAccessDeniedToResourceGroup      AccessDeniedErrorCode = "ACCESS_DENIED_TO_RESOURCE_GROUP"
	AccessDeniedErrorCodeAccessDeniedToRulesPackage       AccessDeniedErrorCode = "ACCESS_DENIED_TO_RULES_PACKAGE"
	AccessDeniedErrorCodeAccessDeniedToSnsTopic           AccessDeniedErrorCode = "ACCESS_DENIED_TO_SNS_TOPIC"
	AccessDeniedErrorCodeAccessDeniedToIamRole            AccessDeniedErrorCode = "ACCESS_DENIED_TO_IAM_ROLE"
)

func (enum AccessDeniedErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AccessDeniedErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AgentHealth string

// Enum values for AgentHealth
const (
	AgentHealthHealthy   AgentHealth = "HEALTHY"
	AgentHealthUnhealthy AgentHealth = "UNHEALTHY"
	AgentHealthUnknown   AgentHealth = "UNKNOWN"
)

func (enum AgentHealth) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AgentHealth) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AgentHealthCode string

// Enum values for AgentHealthCode
const (
	AgentHealthCodeIdle      AgentHealthCode = "IDLE"
	AgentHealthCodeRunning   AgentHealthCode = "RUNNING"
	AgentHealthCodeShutdown  AgentHealthCode = "SHUTDOWN"
	AgentHealthCodeUnhealthy AgentHealthCode = "UNHEALTHY"
	AgentHealthCodeThrottled AgentHealthCode = "THROTTLED"
	AgentHealthCodeUnknown   AgentHealthCode = "UNKNOWN"
)

func (enum AgentHealthCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AgentHealthCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AssessmentRunNotificationSnsStatusCode string

// Enum values for AssessmentRunNotificationSnsStatusCode
const (
	AssessmentRunNotificationSnsStatusCodeSuccess           AssessmentRunNotificationSnsStatusCode = "SUCCESS"
	AssessmentRunNotificationSnsStatusCodeTopicDoesNotExist AssessmentRunNotificationSnsStatusCode = "TOPIC_DOES_NOT_EXIST"
	AssessmentRunNotificationSnsStatusCodeAccessDenied      AssessmentRunNotificationSnsStatusCode = "ACCESS_DENIED"
	AssessmentRunNotificationSnsStatusCodeInternalError     AssessmentRunNotificationSnsStatusCode = "INTERNAL_ERROR"
)

func (enum AssessmentRunNotificationSnsStatusCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AssessmentRunNotificationSnsStatusCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AssessmentRunState string

// Enum values for AssessmentRunState
const (
	AssessmentRunStateCreated                       AssessmentRunState = "CREATED"
	AssessmentRunStateStartDataCollectionPending    AssessmentRunState = "START_DATA_COLLECTION_PENDING"
	AssessmentRunStateStartDataCollectionInProgress AssessmentRunState = "START_DATA_COLLECTION_IN_PROGRESS"
	AssessmentRunStateCollectingData                AssessmentRunState = "COLLECTING_DATA"
	AssessmentRunStateStopDataCollectionPending     AssessmentRunState = "STOP_DATA_COLLECTION_PENDING"
	AssessmentRunStateDataCollected                 AssessmentRunState = "DATA_COLLECTED"
	AssessmentRunStateStartEvaluatingRulesPending   AssessmentRunState = "START_EVALUATING_RULES_PENDING"
	AssessmentRunStateEvaluatingRules               AssessmentRunState = "EVALUATING_RULES"
	AssessmentRunStateFailed                        AssessmentRunState = "FAILED"
	AssessmentRunStateError                         AssessmentRunState = "ERROR"
	AssessmentRunStateCompleted                     AssessmentRunState = "COMPLETED"
	AssessmentRunStateCompletedWithErrors           AssessmentRunState = "COMPLETED_WITH_ERRORS"
	AssessmentRunStateCanceled                      AssessmentRunState = "CANCELED"
)

func (enum AssessmentRunState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AssessmentRunState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AssetType string

// Enum values for AssetType
const (
	AssetTypeEc2Instance AssetType = "ec2-instance"
)

func (enum AssetType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AssetType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FailedItemErrorCode string

// Enum values for FailedItemErrorCode
const (
	FailedItemErrorCodeInvalidArn       FailedItemErrorCode = "INVALID_ARN"
	FailedItemErrorCodeDuplicateArn     FailedItemErrorCode = "DUPLICATE_ARN"
	FailedItemErrorCodeItemDoesNotExist FailedItemErrorCode = "ITEM_DOES_NOT_EXIST"
	FailedItemErrorCodeAccessDenied     FailedItemErrorCode = "ACCESS_DENIED"
	FailedItemErrorCodeLimitExceeded    FailedItemErrorCode = "LIMIT_EXCEEDED"
	FailedItemErrorCodeInternalError    FailedItemErrorCode = "INTERNAL_ERROR"
)

func (enum FailedItemErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FailedItemErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InspectorEvent string

// Enum values for InspectorEvent
const (
	InspectorEventAssessmentRunStarted      InspectorEvent = "ASSESSMENT_RUN_STARTED"
	InspectorEventAssessmentRunCompleted    InspectorEvent = "ASSESSMENT_RUN_COMPLETED"
	InspectorEventAssessmentRunStateChanged InspectorEvent = "ASSESSMENT_RUN_STATE_CHANGED"
	InspectorEventFindingReported           InspectorEvent = "FINDING_REPORTED"
	InspectorEventOther                     InspectorEvent = "OTHER"
)

func (enum InspectorEvent) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InspectorEvent) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InvalidCrossAccountRoleErrorCode string

// Enum values for InvalidCrossAccountRoleErrorCode
const (
	InvalidCrossAccountRoleErrorCodeRoleDoesNotExistOrInvalidTrustRelationship InvalidCrossAccountRoleErrorCode = "ROLE_DOES_NOT_EXIST_OR_INVALID_TRUST_RELATIONSHIP"
	InvalidCrossAccountRoleErrorCodeRoleDoesNotHaveCorrectPolicy               InvalidCrossAccountRoleErrorCode = "ROLE_DOES_NOT_HAVE_CORRECT_POLICY"
)

func (enum InvalidCrossAccountRoleErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InvalidCrossAccountRoleErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InvalidInputErrorCode string

// Enum values for InvalidInputErrorCode
const (
	InvalidInputErrorCodeInvalidAssessmentTargetArn               InvalidInputErrorCode = "INVALID_ASSESSMENT_TARGET_ARN"
	InvalidInputErrorCodeInvalidAssessmentTemplateArn             InvalidInputErrorCode = "INVALID_ASSESSMENT_TEMPLATE_ARN"
	InvalidInputErrorCodeInvalidAssessmentRunArn                  InvalidInputErrorCode = "INVALID_ASSESSMENT_RUN_ARN"
	InvalidInputErrorCodeInvalidFindingArn                        InvalidInputErrorCode = "INVALID_FINDING_ARN"
	InvalidInputErrorCodeInvalidResourceGroupArn                  InvalidInputErrorCode = "INVALID_RESOURCE_GROUP_ARN"
	InvalidInputErrorCodeInvalidRulesPackageArn                   InvalidInputErrorCode = "INVALID_RULES_PACKAGE_ARN"
	InvalidInputErrorCodeInvalidResourceArn                       InvalidInputErrorCode = "INVALID_RESOURCE_ARN"
	InvalidInputErrorCodeInvalidSnsTopicArn                       InvalidInputErrorCode = "INVALID_SNS_TOPIC_ARN"
	InvalidInputErrorCodeInvalidIamRoleArn                        InvalidInputErrorCode = "INVALID_IAM_ROLE_ARN"
	InvalidInputErrorCodeInvalidAssessmentTargetName              InvalidInputErrorCode = "INVALID_ASSESSMENT_TARGET_NAME"
	InvalidInputErrorCodeInvalidAssessmentTargetNamePattern       InvalidInputErrorCode = "INVALID_ASSESSMENT_TARGET_NAME_PATTERN"
	InvalidInputErrorCodeInvalidAssessmentTemplateName            InvalidInputErrorCode = "INVALID_ASSESSMENT_TEMPLATE_NAME"
	InvalidInputErrorCodeInvalidAssessmentTemplateNamePattern     InvalidInputErrorCode = "INVALID_ASSESSMENT_TEMPLATE_NAME_PATTERN"
	InvalidInputErrorCodeInvalidAssessmentTemplateDuration        InvalidInputErrorCode = "INVALID_ASSESSMENT_TEMPLATE_DURATION"
	InvalidInputErrorCodeInvalidAssessmentTemplateDurationRange   InvalidInputErrorCode = "INVALID_ASSESSMENT_TEMPLATE_DURATION_RANGE"
	InvalidInputErrorCodeInvalidAssessmentRunDurationRange        InvalidInputErrorCode = "INVALID_ASSESSMENT_RUN_DURATION_RANGE"
	InvalidInputErrorCodeInvalidAssessmentRunStartTimeRange       InvalidInputErrorCode = "INVALID_ASSESSMENT_RUN_START_TIME_RANGE"
	InvalidInputErrorCodeInvalidAssessmentRunCompletionTimeRange  InvalidInputErrorCode = "INVALID_ASSESSMENT_RUN_COMPLETION_TIME_RANGE"
	InvalidInputErrorCodeInvalidAssessmentRunStateChangeTimeRange InvalidInputErrorCode = "INVALID_ASSESSMENT_RUN_STATE_CHANGE_TIME_RANGE"
	InvalidInputErrorCodeInvalidAssessmentRunState                InvalidInputErrorCode = "INVALID_ASSESSMENT_RUN_STATE"
	InvalidInputErrorCodeInvalidTag                               InvalidInputErrorCode = "INVALID_TAG"
	InvalidInputErrorCodeInvalidTagKey                            InvalidInputErrorCode = "INVALID_TAG_KEY"
	InvalidInputErrorCodeInvalidTagValue                          InvalidInputErrorCode = "INVALID_TAG_VALUE"
	InvalidInputErrorCodeInvalidResourceGroupTagKey               InvalidInputErrorCode = "INVALID_RESOURCE_GROUP_TAG_KEY"
	InvalidInputErrorCodeInvalidResourceGroupTagValue             InvalidInputErrorCode = "INVALID_RESOURCE_GROUP_TAG_VALUE"
	InvalidInputErrorCodeInvalidAttribute                         InvalidInputErrorCode = "INVALID_ATTRIBUTE"
	InvalidInputErrorCodeInvalidUserAttribute                     InvalidInputErrorCode = "INVALID_USER_ATTRIBUTE"
	InvalidInputErrorCodeInvalidUserAttributeKey                  InvalidInputErrorCode = "INVALID_USER_ATTRIBUTE_KEY"
	InvalidInputErrorCodeInvalidUserAttributeValue                InvalidInputErrorCode = "INVALID_USER_ATTRIBUTE_VALUE"
	InvalidInputErrorCodeInvalidPaginationToken                   InvalidInputErrorCode = "INVALID_PAGINATION_TOKEN"
	InvalidInputErrorCodeInvalidMaxResults                        InvalidInputErrorCode = "INVALID_MAX_RESULTS"
	InvalidInputErrorCodeInvalidAgentId                           InvalidInputErrorCode = "INVALID_AGENT_ID"
	InvalidInputErrorCodeInvalidAutoScalingGroup                  InvalidInputErrorCode = "INVALID_AUTO_SCALING_GROUP"
	InvalidInputErrorCodeInvalidRuleName                          InvalidInputErrorCode = "INVALID_RULE_NAME"
	InvalidInputErrorCodeInvalidSeverity                          InvalidInputErrorCode = "INVALID_SEVERITY"
	InvalidInputErrorCodeInvalidLocale                            InvalidInputErrorCode = "INVALID_LOCALE"
	InvalidInputErrorCodeInvalidEvent                             InvalidInputErrorCode = "INVALID_EVENT"
	InvalidInputErrorCodeAssessmentTargetNameAlreadyTaken         InvalidInputErrorCode = "ASSESSMENT_TARGET_NAME_ALREADY_TAKEN"
	InvalidInputErrorCodeAssessmentTemplateNameAlreadyTaken       InvalidInputErrorCode = "ASSESSMENT_TEMPLATE_NAME_ALREADY_TAKEN"
	InvalidInputErrorCodeInvalidNumberOfAssessmentTargetArns      InvalidInputErrorCode = "INVALID_NUMBER_OF_ASSESSMENT_TARGET_ARNS"
	InvalidInputErrorCodeInvalidNumberOfAssessmentTemplateArns    InvalidInputErrorCode = "INVALID_NUMBER_OF_ASSESSMENT_TEMPLATE_ARNS"
	InvalidInputErrorCodeInvalidNumberOfAssessmentRunArns         InvalidInputErrorCode = "INVALID_NUMBER_OF_ASSESSMENT_RUN_ARNS"
	InvalidInputErrorCodeInvalidNumberOfFindingArns               InvalidInputErrorCode = "INVALID_NUMBER_OF_FINDING_ARNS"
	InvalidInputErrorCodeInvalidNumberOfResourceGroupArns         InvalidInputErrorCode = "INVALID_NUMBER_OF_RESOURCE_GROUP_ARNS"
	InvalidInputErrorCodeInvalidNumberOfRulesPackageArns          InvalidInputErrorCode = "INVALID_NUMBER_OF_RULES_PACKAGE_ARNS"
	InvalidInputErrorCodeInvalidNumberOfAssessmentRunStates       InvalidInputErrorCode = "INVALID_NUMBER_OF_ASSESSMENT_RUN_STATES"
	InvalidInputErrorCodeInvalidNumberOfTags                      InvalidInputErrorCode = "INVALID_NUMBER_OF_TAGS"
	InvalidInputErrorCodeInvalidNumberOfResourceGroupTags         InvalidInputErrorCode = "INVALID_NUMBER_OF_RESOURCE_GROUP_TAGS"
	InvalidInputErrorCodeInvalidNumberOfAttributes                InvalidInputErrorCode = "INVALID_NUMBER_OF_ATTRIBUTES"
	InvalidInputErrorCodeInvalidNumberOfUserAttributes            InvalidInputErrorCode = "INVALID_NUMBER_OF_USER_ATTRIBUTES"
	InvalidInputErrorCodeInvalidNumberOfAgentIds                  InvalidInputErrorCode = "INVALID_NUMBER_OF_AGENT_IDS"
	InvalidInputErrorCodeInvalidNumberOfAutoScalingGroups         InvalidInputErrorCode = "INVALID_NUMBER_OF_AUTO_SCALING_GROUPS"
	InvalidInputErrorCodeInvalidNumberOfRuleNames                 InvalidInputErrorCode = "INVALID_NUMBER_OF_RULE_NAMES"
	InvalidInputErrorCodeInvalidNumberOfSeverities                InvalidInputErrorCode = "INVALID_NUMBER_OF_SEVERITIES"
)

func (enum InvalidInputErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InvalidInputErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LimitExceededErrorCode string

// Enum values for LimitExceededErrorCode
const (
	LimitExceededErrorCodeAssessmentTargetLimitExceeded   LimitExceededErrorCode = "ASSESSMENT_TARGET_LIMIT_EXCEEDED"
	LimitExceededErrorCodeAssessmentTemplateLimitExceeded LimitExceededErrorCode = "ASSESSMENT_TEMPLATE_LIMIT_EXCEEDED"
	LimitExceededErrorCodeAssessmentRunLimitExceeded      LimitExceededErrorCode = "ASSESSMENT_RUN_LIMIT_EXCEEDED"
	LimitExceededErrorCodeResourceGroupLimitExceeded      LimitExceededErrorCode = "RESOURCE_GROUP_LIMIT_EXCEEDED"
	LimitExceededErrorCodeEventSubscriptionLimitExceeded  LimitExceededErrorCode = "EVENT_SUBSCRIPTION_LIMIT_EXCEEDED"
)

func (enum LimitExceededErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LimitExceededErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type Locale string

// Enum values for Locale
const (
	LocaleEnUs Locale = "EN_US"
)

func (enum Locale) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Locale) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type NoSuchEntityErrorCode string

// Enum values for NoSuchEntityErrorCode
const (
	NoSuchEntityErrorCodeAssessmentTargetDoesNotExist   NoSuchEntityErrorCode = "ASSESSMENT_TARGET_DOES_NOT_EXIST"
	NoSuchEntityErrorCodeAssessmentTemplateDoesNotExist NoSuchEntityErrorCode = "ASSESSMENT_TEMPLATE_DOES_NOT_EXIST"
	NoSuchEntityErrorCodeAssessmentRunDoesNotExist      NoSuchEntityErrorCode = "ASSESSMENT_RUN_DOES_NOT_EXIST"
	NoSuchEntityErrorCodeFindingDoesNotExist            NoSuchEntityErrorCode = "FINDING_DOES_NOT_EXIST"
	NoSuchEntityErrorCodeResourceGroupDoesNotExist      NoSuchEntityErrorCode = "RESOURCE_GROUP_DOES_NOT_EXIST"
	NoSuchEntityErrorCodeRulesPackageDoesNotExist       NoSuchEntityErrorCode = "RULES_PACKAGE_DOES_NOT_EXIST"
	NoSuchEntityErrorCodeSnsTopicDoesNotExist           NoSuchEntityErrorCode = "SNS_TOPIC_DOES_NOT_EXIST"
	NoSuchEntityErrorCodeIamRoleDoesNotExist            NoSuchEntityErrorCode = "IAM_ROLE_DOES_NOT_EXIST"
)

func (enum NoSuchEntityErrorCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum NoSuchEntityErrorCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type PreviewStatus string

// Enum values for PreviewStatus
const (
	PreviewStatusWorkInProgress PreviewStatus = "WORK_IN_PROGRESS"
	PreviewStatusCompleted      PreviewStatus = "COMPLETED"
)

func (enum PreviewStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum PreviewStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReportFileFormat string

// Enum values for ReportFileFormat
const (
	ReportFileFormatHtml ReportFileFormat = "HTML"
	ReportFileFormatPdf  ReportFileFormat = "PDF"
)

func (enum ReportFileFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReportFileFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReportStatus string

// Enum values for ReportStatus
const (
	ReportStatusWorkInProgress ReportStatus = "WORK_IN_PROGRESS"
	ReportStatusFailed         ReportStatus = "FAILED"
	ReportStatusCompleted      ReportStatus = "COMPLETED"
)

func (enum ReportStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReportStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReportType string

// Enum values for ReportType
const (
	ReportTypeFinding ReportType = "FINDING"
	ReportTypeFull    ReportType = "FULL"
)

func (enum ReportType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReportType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ScopeType string

// Enum values for ScopeType
const (
	ScopeTypeInstanceId      ScopeType = "INSTANCE_ID"
	ScopeTypeRulesPackageArn ScopeType = "RULES_PACKAGE_ARN"
)

func (enum ScopeType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ScopeType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type Severity string

// Enum values for Severity
const (
	SeverityLow           Severity = "Low"
	SeverityMedium        Severity = "Medium"
	SeverityHigh          Severity = "High"
	SeverityInformational Severity = "Informational"
	SeverityUndefined     Severity = "Undefined"
)

func (enum Severity) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Severity) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StopAction string

// Enum values for StopAction
const (
	StopActionStartEvaluation StopAction = "START_EVALUATION"
	StopActionSkipEvaluation  StopAction = "SKIP_EVALUATION"
)

func (enum StopAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StopAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
