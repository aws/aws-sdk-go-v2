// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package inspector

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/inspector/types"
)

const opSubscribeToEvent = "SubscribeToEvent"

// SubscribeToEventRequest returns a request value for making API operation for
// Amazon Inspector.
//
// Enables the process of sending Amazon Simple Notification Service (SNS) notifications
// about a specified event to a specified SNS topic.
//
//    // Example sending a request using SubscribeToEventRequest.
//    req := client.SubscribeToEventRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/inspector-2016-02-16/SubscribeToEvent
func (c *Client) SubscribeToEventRequest(input *types.SubscribeToEventInput) SubscribeToEventRequest {
	op := &aws.Operation{
		Name:       opSubscribeToEvent,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.SubscribeToEventInput{}
	}

	req := c.newRequest(op, input, &types.SubscribeToEventOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return SubscribeToEventRequest{Request: req, Input: input, Copy: c.SubscribeToEventRequest}
}

// SubscribeToEventRequest is the request type for the
// SubscribeToEvent API operation.
type SubscribeToEventRequest struct {
	*aws.Request
	Input *types.SubscribeToEventInput
	Copy  func(*types.SubscribeToEventInput) SubscribeToEventRequest
}

// Send marshals and sends the SubscribeToEvent API request.
func (r SubscribeToEventRequest) Send(ctx context.Context) (*SubscribeToEventResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SubscribeToEventResponse{
		SubscribeToEventOutput: r.Request.Data.(*types.SubscribeToEventOutput),
		response:               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SubscribeToEventResponse is the response type for the
// SubscribeToEvent API operation.
type SubscribeToEventResponse struct {
	*types.SubscribeToEventOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SubscribeToEvent request.
func (r *SubscribeToEventResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
