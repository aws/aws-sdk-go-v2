// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package inspector

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/inspector/types"
)

const opRegisterCrossAccountAccessRole = "RegisterCrossAccountAccessRole"

// RegisterCrossAccountAccessRoleRequest returns a request value for making API operation for
// Amazon Inspector.
//
// Registers the IAM role that grants Amazon Inspector access to AWS Services
// needed to perform security assessments.
//
//    // Example sending a request using RegisterCrossAccountAccessRoleRequest.
//    req := client.RegisterCrossAccountAccessRoleRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/inspector-2016-02-16/RegisterCrossAccountAccessRole
func (c *Client) RegisterCrossAccountAccessRoleRequest(input *types.RegisterCrossAccountAccessRoleInput) RegisterCrossAccountAccessRoleRequest {
	op := &aws.Operation{
		Name:       opRegisterCrossAccountAccessRole,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RegisterCrossAccountAccessRoleInput{}
	}

	req := c.newRequest(op, input, &types.RegisterCrossAccountAccessRoleOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return RegisterCrossAccountAccessRoleRequest{Request: req, Input: input, Copy: c.RegisterCrossAccountAccessRoleRequest}
}

// RegisterCrossAccountAccessRoleRequest is the request type for the
// RegisterCrossAccountAccessRole API operation.
type RegisterCrossAccountAccessRoleRequest struct {
	*aws.Request
	Input *types.RegisterCrossAccountAccessRoleInput
	Copy  func(*types.RegisterCrossAccountAccessRoleInput) RegisterCrossAccountAccessRoleRequest
}

// Send marshals and sends the RegisterCrossAccountAccessRole API request.
func (r RegisterCrossAccountAccessRoleRequest) Send(ctx context.Context) (*RegisterCrossAccountAccessRoleResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RegisterCrossAccountAccessRoleResponse{
		RegisterCrossAccountAccessRoleOutput: r.Request.Data.(*types.RegisterCrossAccountAccessRoleOutput),
		response:                             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RegisterCrossAccountAccessRoleResponse is the response type for the
// RegisterCrossAccountAccessRole API operation.
type RegisterCrossAccountAccessRoleResponse struct {
	*types.RegisterCrossAccountAccessRoleOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RegisterCrossAccountAccessRole request.
func (r *RegisterCrossAccountAccessRoleResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
