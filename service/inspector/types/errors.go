// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// You do not have required permissions to access the requested resource.
type AccessDeniedException struct {
	Message *string

	CanRetry   *bool
	ErrorCode_ AccessDeniedErrorCode
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessDeniedException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *AccessDeniedException) HasCanRetry() bool {
	return e.CanRetry != nil
}
func (e *AccessDeniedException) GetErrorCode_() AccessDeniedErrorCode {
	return e.ErrorCode_
}
func (e *AccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// You started an assessment run, but one of the instances is already participating
// in another assessment run.
type AgentsAlreadyRunningAssessmentException struct {
	Message *string

	Agents          []*AgentAlreadyRunningAssessment
	AgentsTruncated *bool
	CanRetry        *bool
}

func (e *AgentsAlreadyRunningAssessmentException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AgentsAlreadyRunningAssessmentException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AgentsAlreadyRunningAssessmentException) ErrorCode() string {
	return "AgentsAlreadyRunningAssessmentException"
}
func (e *AgentsAlreadyRunningAssessmentException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *AgentsAlreadyRunningAssessmentException) GetAgents() []*AgentAlreadyRunningAssessment {
	return e.Agents
}
func (e *AgentsAlreadyRunningAssessmentException) HasAgents() bool {
	return e.Agents != nil
}
func (e *AgentsAlreadyRunningAssessmentException) GetAgentsTruncated() bool {
	return ptr.ToBool(e.AgentsTruncated)
}
func (e *AgentsAlreadyRunningAssessmentException) HasAgentsTruncated() bool {
	return e.AgentsTruncated != nil
}
func (e *AgentsAlreadyRunningAssessmentException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AgentsAlreadyRunningAssessmentException) HasMessage() bool {
	return e.Message != nil
}
func (e *AgentsAlreadyRunningAssessmentException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *AgentsAlreadyRunningAssessmentException) HasCanRetry() bool {
	return e.CanRetry != nil
}

// You cannot perform a specified action if an assessment run is currently in
// progress.
type AssessmentRunInProgressException struct {
	Message *string

	AssessmentRunArns          []*string
	AssessmentRunArnsTruncated *bool
	CanRetry                   *bool
}

func (e *AssessmentRunInProgressException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AssessmentRunInProgressException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AssessmentRunInProgressException) ErrorCode() string {
	return "AssessmentRunInProgressException"
}
func (e *AssessmentRunInProgressException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AssessmentRunInProgressException) GetAssessmentRunArns() []*string {
	return e.AssessmentRunArns
}
func (e *AssessmentRunInProgressException) HasAssessmentRunArns() bool {
	return e.AssessmentRunArns != nil
}
func (e *AssessmentRunInProgressException) GetAssessmentRunArnsTruncated() bool {
	return ptr.ToBool(e.AssessmentRunArnsTruncated)
}
func (e *AssessmentRunInProgressException) HasAssessmentRunArnsTruncated() bool {
	return e.AssessmentRunArnsTruncated != nil
}
func (e *AssessmentRunInProgressException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *AssessmentRunInProgressException) HasCanRetry() bool {
	return e.CanRetry != nil
}
func (e *AssessmentRunInProgressException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AssessmentRunInProgressException) HasMessage() bool {
	return e.Message != nil
}

// Internal server error.
type InternalException struct {
	Message *string

	CanRetry *bool
}

func (e *InternalException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalException) ErrorCode() string             { return "InternalException" }
func (e *InternalException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalException) HasMessage() bool {
	return e.Message != nil
}
func (e *InternalException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *InternalException) HasCanRetry() bool {
	return e.CanRetry != nil
}

// Amazon Inspector cannot assume the cross-account role that it needs to list your
// EC2 instances during the assessment run.
type InvalidCrossAccountRoleException struct {
	Message *string

	ErrorCode_ InvalidCrossAccountRoleErrorCode
	CanRetry   *bool
}

func (e *InvalidCrossAccountRoleException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidCrossAccountRoleException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidCrossAccountRoleException) ErrorCode() string {
	return "InvalidCrossAccountRoleException"
}
func (e *InvalidCrossAccountRoleException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidCrossAccountRoleException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidCrossAccountRoleException) HasMessage() bool {
	return e.Message != nil
}
func (e *InvalidCrossAccountRoleException) GetErrorCode_() InvalidCrossAccountRoleErrorCode {
	return e.ErrorCode_
}
func (e *InvalidCrossAccountRoleException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *InvalidCrossAccountRoleException) HasCanRetry() bool {
	return e.CanRetry != nil
}

// The request was rejected because an invalid or out-of-range value was supplied
// for an input parameter.
type InvalidInputException struct {
	Message *string

	CanRetry   *bool
	ErrorCode_ InvalidInputErrorCode
}

func (e *InvalidInputException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidInputException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidInputException) ErrorCode() string             { return "InvalidInputException" }
func (e *InvalidInputException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidInputException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *InvalidInputException) HasCanRetry() bool {
	return e.CanRetry != nil
}
func (e *InvalidInputException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidInputException) HasMessage() bool {
	return e.Message != nil
}
func (e *InvalidInputException) GetErrorCode_() InvalidInputErrorCode {
	return e.ErrorCode_
}

// The request was rejected because it attempted to create resources beyond the
// current AWS account limits. The error code describes the limit exceeded.
type LimitExceededException struct {
	Message *string

	ErrorCode_ LimitExceededErrorCode
	CanRetry   *bool
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string             { return "LimitExceededException" }
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LimitExceededException) HasMessage() bool {
	return e.Message != nil
}
func (e *LimitExceededException) GetErrorCode_() LimitExceededErrorCode {
	return e.ErrorCode_
}
func (e *LimitExceededException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *LimitExceededException) HasCanRetry() bool {
	return e.CanRetry != nil
}

// The request was rejected because it referenced an entity that does not exist.
// The error code describes the entity.
type NoSuchEntityException struct {
	Message *string

	CanRetry   *bool
	ErrorCode_ NoSuchEntityErrorCode
}

func (e *NoSuchEntityException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NoSuchEntityException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NoSuchEntityException) ErrorCode() string             { return "NoSuchEntityException" }
func (e *NoSuchEntityException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NoSuchEntityException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *NoSuchEntityException) HasCanRetry() bool {
	return e.CanRetry != nil
}
func (e *NoSuchEntityException) GetErrorCode_() NoSuchEntityErrorCode {
	return e.ErrorCode_
}
func (e *NoSuchEntityException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NoSuchEntityException) HasMessage() bool {
	return e.Message != nil
}

// The request is rejected. The specified assessment template is currently
// generating an exclusions preview.
type PreviewGenerationInProgressException struct {
	Message *string
}

func (e *PreviewGenerationInProgressException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PreviewGenerationInProgressException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PreviewGenerationInProgressException) ErrorCode() string {
	return "PreviewGenerationInProgressException"
}
func (e *PreviewGenerationInProgressException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *PreviewGenerationInProgressException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PreviewGenerationInProgressException) HasMessage() bool {
	return e.Message != nil
}

// The serice is temporary unavailable.
type ServiceTemporarilyUnavailableException struct {
	Message *string

	CanRetry *bool
}

func (e *ServiceTemporarilyUnavailableException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServiceTemporarilyUnavailableException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServiceTemporarilyUnavailableException) ErrorCode() string {
	return "ServiceTemporarilyUnavailableException"
}
func (e *ServiceTemporarilyUnavailableException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultServer
}
func (e *ServiceTemporarilyUnavailableException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *ServiceTemporarilyUnavailableException) HasCanRetry() bool {
	return e.CanRetry != nil
}
func (e *ServiceTemporarilyUnavailableException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ServiceTemporarilyUnavailableException) HasMessage() bool {
	return e.Message != nil
}

// Used by the GetAssessmentReport () API. The request was rejected because you
// tried to generate a report for an assessment run that existed before reporting
// was supported in Amazon Inspector. You can only generate reports for assessment
// runs that took place or will take place after generating reports in Amazon
// Inspector became available.
type UnsupportedFeatureException struct {
	Message *string

	CanRetry *bool
}

func (e *UnsupportedFeatureException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *UnsupportedFeatureException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *UnsupportedFeatureException) ErrorCode() string             { return "UnsupportedFeatureException" }
func (e *UnsupportedFeatureException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *UnsupportedFeatureException) GetCanRetry() bool {
	return ptr.ToBool(e.CanRetry)
}
func (e *UnsupportedFeatureException) HasCanRetry() bool {
	return e.CanRetry != nil
}
func (e *UnsupportedFeatureException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *UnsupportedFeatureException) HasMessage() bool {
	return e.Message != nil
}
