// Code generated by smithy-go-codegen DO NOT EDIT.

package cloud9

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Changes the settings of an existing SSH Cloud9 development environment.
func (c *Client) UpdateSSHRemote(ctx context.Context, params *UpdateSSHRemoteInput, optFns ...func(*Options)) (*UpdateSSHRemoteOutput, error) {
	if params == nil {
		params = &UpdateSSHRemoteInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdateSSHRemote", params, optFns, c.addOperationUpdateSSHRemoteMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdateSSHRemoteOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateSSHRemoteInput struct {

	// The ID of the environment to change settings.
	//
	// This member is required.
	EnvironmentId *string

	// The host the environment will connect to.
	//
	// This member is required.
	Host *string

	// The login name of the user the environment will connect to.
	//
	// This member is required.
	LoginName *string

	// The port to the SSH server on the host.
	//
	// This member is required.
	Port *int32

	// The jump host to use to connect to the remote host.
	BastionHost *string

	// The path on the host the environment will connect to (default: The home of the
	// user).
	EnvironmentPath *string

	// The path to node.js on the remote host (default: /usr/bin/node).
	NodePath *string

	noSmithyDocumentSerde
}

type UpdateSSHRemoteOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationUpdateSSHRemoteMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpUpdateSSHRemote{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpUpdateSSHRemote{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpUpdateSSHRemoteValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateSSHRemote(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opUpdateSSHRemote(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloud9",
		OperationName: "UpdateSSHRemote",
	}
}
