// Code generated by smithy-go-codegen DO NOT EDIT.

package cloud9

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloud9/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Creates a cloud9 SSH environment.
func (c *Client) CreateEnvironmentSSH(ctx context.Context, params *CreateEnvironmentSSHInput, optFns ...func(*Options)) (*CreateEnvironmentSSHOutput, error) {
	if params == nil {
		params = &CreateEnvironmentSSHInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateEnvironmentSSH", params, optFns, c.addOperationCreateEnvironmentSSHMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateEnvironmentSSHOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateEnvironmentSSHInput struct {

	// The host the environment will connect to.
	//
	// This member is required.
	Host *string

	// The login name of the user the environment will connect to.
	//
	// This member is required.
	LoginName *string

	// The name of the environment to create. This name is visible to other IAM users
	// in the same Amazon Web Services account.
	//
	// This member is required.
	Name *string

	// The port to the SSH server on the host.
	//
	// This member is required.
	Port *int32

	// The jump host to use to connect to the remote host.
	BastionHost *string

	// The description of the environment to create.
	Description *string

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation . Otherwise, it is
	// UnauthorizedOperation .
	DryRun *bool

	// The path on the host the environment will connect to (default: The home of the
	// user).
	EnvironmentPath *string

	// The path to node.js on the remote host (default: /usr/bin/node).
	NodePath *string

	// An array of key-value pairs that will be associated with the new Cloud9
	// development environment.
	Tags []types.Tag

	noSmithyDocumentSerde
}

type CreateEnvironmentSSHOutput struct {

	// The ID of the environment that was created.
	EnvironmentId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateEnvironmentSSHMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateEnvironmentSSH{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateEnvironmentSSH{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateEnvironmentSSHValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateEnvironmentSSH(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateEnvironmentSSH(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloud9",
		OperationName: "CreateEnvironmentSSH",
	}
}
