// Code generated by smithy-go-codegen DO NOT EDIT.

package imagebuilder

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/imagebuilder/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Creates a new container recipe. Container recipes define how images are
// configured, tested, and assessed.
func (c *Client) CreateContainerRecipe(ctx context.Context, params *CreateContainerRecipeInput, optFns ...func(*Options)) (*CreateContainerRecipeOutput, error) {
	if params == nil {
		params = &CreateContainerRecipeInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateContainerRecipe", params, optFns, addOperationCreateContainerRecipeMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateContainerRecipeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateContainerRecipeInput struct {

	// The client token used to make this request idempotent.
	//
	// This member is required.
	ClientToken *string

	// Components for build and test that are included in the container recipe.
	//
	// This member is required.
	Components []types.ComponentConfiguration

	// The type of container to create.
	//
	// This member is required.
	ContainerType types.ContainerType

	// The Dockerfile template used to build your image as an inline data blob.
	//
	// This member is required.
	DockerfileTemplateData *string

	// The name of the container recipe.
	//
	// This member is required.
	Name *string

	// The source image for the container recipe.
	//
	// This member is required.
	ParentImage *string

	// The semantic version of the container recipe (<major>.<minor>.<patch>).
	//
	// This member is required.
	SemanticVersion *string

	// The destination repository for the container image.
	//
	// This member is required.
	TargetRepository *types.TargetContainerRepository

	// The description of the container recipe.
	Description *string

	// The S3 URI for the Dockerfile that will be used to build your container image.
	DockerfileTemplateUri *string

	// Specifies the operating system version for the source image.
	ImageOsVersionOverride *string

	// Identifies which KMS key is used to encrypt the container image.
	KmsKeyId *string

	// Specifies the operating system platform when you use a custom source image.
	PlatformOverride types.Platform

	// Tags that are attached to the container recipe.
	Tags map[string]string

	// The working directory for use during build and test workflows.
	WorkingDirectory *string
}

type CreateContainerRecipeOutput struct {

	// The client token used to make this request idempotent.
	ClientToken *string

	// Returns the Amazon Resource Name (ARN) of the container recipe that the request
	// created.
	ContainerRecipeArn *string

	// The request ID that uniquely identifies this request.
	RequestId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateContainerRecipeMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateContainerRecipe{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateContainerRecipe{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addIdempotencyToken_opCreateContainerRecipeMiddleware(stack, options); err != nil {
		return err
	}
	if err = addOpCreateContainerRecipeValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateContainerRecipe(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

type idempotencyToken_initializeOpCreateContainerRecipe struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpCreateContainerRecipe) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpCreateContainerRecipe) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*CreateContainerRecipeInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *CreateContainerRecipeInput ")
	}

	if input.ClientToken == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.ClientToken = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opCreateContainerRecipeMiddleware(stack *middleware.Stack, cfg Options) error {
	return stack.Initialize.Add(&idempotencyToken_initializeOpCreateContainerRecipe{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opCreateContainerRecipe(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "imagebuilder",
		OperationName: "CreateContainerRecipe",
	}
}
