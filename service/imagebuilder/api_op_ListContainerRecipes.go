// Code generated by smithy-go-codegen DO NOT EDIT.

package imagebuilder

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/imagebuilder/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Returns a list of container recipes.
func (c *Client) ListContainerRecipes(ctx context.Context, params *ListContainerRecipesInput, optFns ...func(*Options)) (*ListContainerRecipesOutput, error) {
	if params == nil {
		params = &ListContainerRecipesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListContainerRecipes", params, optFns, c.addOperationListContainerRecipesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListContainerRecipesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListContainerRecipesInput struct {

	// Request filters that are used to narrow the list of container images that are
	// returned.
	Filters []types.Filter

	// The maximum number of results to return in the list.
	MaxResults int32

	// Provides a token for pagination, which determines where to begin the next set of
	// results when the current set reaches the maximum for one request.
	NextToken *string

	// Returns container recipes belonging to the specified owner, that have been
	// shared with you. You can omit this field to return container recipes belonging
	// to your account.
	Owner types.Ownership
}

type ListContainerRecipesOutput struct {

	// The list of container recipes returned for the request.
	ContainerRecipeSummaryList []types.ContainerRecipeSummary

	// The next token field is used for paginated responses. When this is not empty,
	// there are additional container recipes that the service has not included in this
	// response. Use this token with the next request to retrieve additional list
	// items.
	NextToken *string

	// The request ID that uniquely identifies this request.
	RequestId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func (c *Client) addOperationListContainerRecipesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpListContainerRecipes{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpListContainerRecipes{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListContainerRecipes(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

// ListContainerRecipesAPIClient is a client that implements the
// ListContainerRecipes operation.
type ListContainerRecipesAPIClient interface {
	ListContainerRecipes(context.Context, *ListContainerRecipesInput, ...func(*Options)) (*ListContainerRecipesOutput, error)
}

var _ ListContainerRecipesAPIClient = (*Client)(nil)

// ListContainerRecipesPaginatorOptions is the paginator options for
// ListContainerRecipes
type ListContainerRecipesPaginatorOptions struct {
	// The maximum number of results to return in the list.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// ListContainerRecipesPaginator is a paginator for ListContainerRecipes
type ListContainerRecipesPaginator struct {
	options   ListContainerRecipesPaginatorOptions
	client    ListContainerRecipesAPIClient
	params    *ListContainerRecipesInput
	nextToken *string
	firstPage bool
}

// NewListContainerRecipesPaginator returns a new ListContainerRecipesPaginator
func NewListContainerRecipesPaginator(client ListContainerRecipesAPIClient, params *ListContainerRecipesInput, optFns ...func(*ListContainerRecipesPaginatorOptions)) *ListContainerRecipesPaginator {
	if params == nil {
		params = &ListContainerRecipesInput{}
	}

	options := ListContainerRecipesPaginatorOptions{}
	if params.MaxResults != 0 {
		options.Limit = params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	return &ListContainerRecipesPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *ListContainerRecipesPaginator) HasMorePages() bool {
	return p.firstPage || p.nextToken != nil
}

// NextPage retrieves the next ListContainerRecipes page.
func (p *ListContainerRecipesPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*ListContainerRecipesOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	params.MaxResults = p.options.Limit

	result, err := p.client.ListContainerRecipes(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken && prevToken != nil && p.nextToken != nil && *prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

func newServiceMetadataMiddleware_opListContainerRecipes(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "imagebuilder",
		OperationName: "ListContainerRecipes",
	}
}
