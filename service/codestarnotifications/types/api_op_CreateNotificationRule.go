// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/service/codestarnotifications/enums"
)

type CreateNotificationRuleInput struct {
	_ struct{} `type:"structure"`

	// A unique, client-generated idempotency token that, when provided in a request,
	// ensures the request cannot be repeated with a changed parameter. If a request
	// with the same parameters is received and a token is included, the request
	// returns information about the initial request that used that token.
	//
	// The AWS SDKs prepopulate client request tokens. If you are using an AWS SDK,
	// an idempotency token is created for you.
	ClientRequestToken *string `min:"1" type:"string" idempotencyToken:"true"`

	// The level of detail to include in the notifications for this resource. BASIC
	// will include only the contents of the event as it would appear in AWS CloudWatch.
	// FULL will include any supplemental information provided by AWS CodeStar Notifications
	// and/or the service for the resource for which the notification is created.
	//
	// DetailType is a required field
	DetailType enums.DetailType `type:"string" required:"true" enum:"true"`

	// A list of event types associated with this notification rule. For a list
	// of allowed events, see EventTypeSummary.
	//
	// EventTypeIds is a required field
	EventTypeIds []string `type:"list" required:"true"`

	// The name for the notification rule. Notifictaion rule names must be unique
	// in your AWS account.
	//
	// Name is a required field
	Name *string `min:"1" type:"string" required:"true" sensitive:"true"`

	// The Amazon Resource Name (ARN) of the resource to associate with the notification
	// rule. Supported resources include pipelines in AWS CodePipeline, repositories
	// in AWS CodeCommit, and build projects in AWS CodeBuild.
	//
	// Resource is a required field
	Resource *string `type:"string" required:"true"`

	// The status of the notification rule. The default value is ENABLED. If the
	// status is set to DISABLED, notifications aren't sent for the notification
	// rule.
	Status enums.NotificationRuleStatus `type:"string" enum:"true"`

	// A list of tags to apply to this notification rule. Key names cannot start
	// with "aws".
	Tags map[string]string `type:"map"`

	// A list of Amazon Resource Names (ARNs) of SNS topics to associate with the
	// notification rule.
	//
	// Targets is a required field
	Targets []Target `type:"list" required:"true"`
}

// String returns the string representation
func (s CreateNotificationRuleInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNotificationRuleInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateNotificationRuleInput"}
	if s.ClientRequestToken != nil && len(*s.ClientRequestToken) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ClientRequestToken", 1))
	}
	if len(s.DetailType) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("DetailType"))
	}

	if s.EventTypeIds == nil {
		invalidParams.Add(aws.NewErrParamRequired("EventTypeIds"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Name", 1))
	}

	if s.Resource == nil {
		invalidParams.Add(aws.NewErrParamRequired("Resource"))
	}

	if s.Targets == nil {
		invalidParams.Add(aws.NewErrParamRequired("Targets"))
	}
	if s.Targets != nil {
		for i, v := range s.Targets {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Targets", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type CreateNotificationRuleOutput struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) of the notification rule.
	Arn *string `type:"string"`
}

// String returns the string representation
func (s CreateNotificationRuleOutput) String() string {
	return awsutil.Prettify(s)
}
