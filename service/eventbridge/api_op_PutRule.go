// Code generated by smithy-go-codegen DO NOT EDIT.

package eventbridge

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates or updates the specified rule. Rules are enabled by default, or based on
// value of the state. You can disable a rule using DisableRule ().  <p>A single
// rule watches for events from a single event bus. Events generated by AWS
// services go to your account's default event bus. Events generated by SaaS
// partner services or applications go to the matching partner event bus. If you
// have custom applications or services, you can specify whether their events go to
// your default event bus or a custom event bus that you have created. For more
// information, see <a>CreateEventBus</a>.</p> <p>If you are updating an existing
// rule, the rule is replaced with what you specify in this <code>PutRule</code>
// command. If you omit arguments in <code>PutRule</code>, the old values for those
// arguments are not kept. Instead, they are replaced with null values.</p> <p>When
// you create or update a rule, incoming events might not immediately start
// matching to new or updated rules. Allow a short period of time for changes to
// take effect.</p> <p>A rule must contain at least an EventPattern or
// ScheduleExpression. Rules with EventPatterns are triggered when a matching event
// is observed. Rules with ScheduleExpressions self-trigger based on the given
// schedule. A rule can have both an EventPattern and a ScheduleExpression, in
// which case the rule triggers on matching events as well as on a schedule.</p>
// <p>When you initially create a rule, you can optionally assign one or more tags
// to the rule. Tags can help you organize and categorize your resources. You can
// also use them to scope user permissions, by granting a user permission to access
// or change only rules with certain tag values. To use the <code>PutRule</code>
// operation and assign tags, you must have both the <code>events:PutRule</code>
// and <code>events:TagResource</code> permissions.</p> <p>If you are updating an
// existing rule, any tags you specify in the <code>PutRule</code> operation are
// ignored. To update the tags of an existing rule, use <a>TagResource</a> and
// <a>UntagResource</a>.</p> <p>Most services in AWS treat : or / as the same
// character in Amazon Resource Names (ARNs). However, EventBridge uses an exact
// match in event patterns and rules. Be sure to use the correct ARN characters
// when creating event patterns so that they match the ARN syntax in the event you
// want to match.</p> <p>In EventBridge, it is possible to create rules that lead
// to infinite loops, where a rule is fired repeatedly. For example, a rule might
// detect that ACLs have changed on an S3 bucket, and trigger software to change
// them to the desired state. If the rule is not written carefully, the subsequent
// change to the ACLs fires the rule again, creating an infinite loop.</p> <p>To
// prevent this, write the rules so that the triggered actions do not re-fire the
// same rule. For example, your rule could fire only if ACLs are found to be in a
// bad state, instead of after any change. </p> <p>An infinite loop can quickly
// cause higher than expected charges. We recommend that you use budgeting, which
// alerts you when charges exceed your specified limit. For more information, see
// <a
// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html">Managing
// Your Costs with Budgets</a>.</p>
func (c *Client) PutRule(ctx context.Context, params *PutRuleInput, optFns ...func(*Options)) (*PutRuleOutput, error) {
	stack := middleware.NewStack("PutRule", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpPutRuleMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutRuleValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutRule(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutRule",
			Err:           err,
		}
	}
	out := result.(*PutRuleOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutRuleInput struct {
	// The scheduling expression. For example, "cron(0 20 * * ? *)" or "rate(5
	// minutes)".
	ScheduleExpression *string
	// Indicates whether the rule is enabled or disabled.
	State types.RuleState
	// A description of the rule.
	Description *string
	// The event pattern. For more information, see Events and Event Patterns
	// (https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html)
	// in the Amazon EventBridge User Guide.
	EventPattern *string
	// The event bus to associate with this rule. If you omit this, the default event
	// bus is used.
	EventBusName *string
	// The list of key-value pairs to associate with the rule.
	Tags []*types.Tag
	// The Amazon Resource Name (ARN) of the IAM role associated with the rule.
	RoleArn *string
	// The name of the rule that you are creating or updating.
	Name *string
}

type PutRuleOutput struct {
	// The Amazon Resource Name (ARN) of the rule.
	RuleArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpPutRuleMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpPutRule{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutRule{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutRule(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "events",
		OperationName: "PutRule",
	}
}
