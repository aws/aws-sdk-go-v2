// Code generated by smithy-go-codegen DO NOT EDIT.

package eventbridge

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"os"
	"path/filepath"
	"reflect"
	"testing"
)

func TestConfiguredEndpoints(t *testing.T) {
	cases := map[string]struct {
		Env              map[string]string
		SharedConfigFile string
		ClientEndpoint   *string
		ExpectURL        *string
	}{
		"env ignore": {
			Env: map[string]string{
				"AWS_ENDPOINT_URL":                    "https://env-global.dev",
				"AWS_ENDPOINT_URL_EVENTBRIDGE":        "https://env-eventbridge.dev",
				"AWS_IGNORE_CONFIGURED_ENDPOINT_URLS": "true",
			},
			SharedConfigFile: `[profile dev]
endpoint_url = http://config-global.dev
services = testing-eventbridge

[services testing-eventbridge]
eventbridge =
    endpoint_url = http://config-eventbridge.dev
`,
			ExpectURL: nil,
		},
		"env global": {
			Env: map[string]string{
				"AWS_ENDPOINT_URL": "https://env-global.dev",
			},
			SharedConfigFile: `[profile dev]
endpoint_url = http://config-global.dev
`,
			ExpectURL: aws.String("https://env-global.dev"),
		},
		"env service": {
			Env: map[string]string{
				"AWS_ENDPOINT_URL":             "https://env-global.dev",
				"AWS_ENDPOINT_URL_EVENTBRIDGE": "https://env-eventbridge.dev",
			},
			SharedConfigFile: `[profile dev]
endpoint_url = http://config-global.dev
services = testing-eventbridge

[services testing-eventbridge]
eventbridge =
    endpoint_url = http://config-eventbridge.dev
`,
			ExpectURL: aws.String("https://env-eventbridge.dev"),
		},
		"config ignore": {
			Env: map[string]string{
				"AWS_ENDPOINT_URL":             "https://env-global.dev",
				"AWS_ENDPOINT_URL_EVENTBRIDGE": "https://env-eventbridge.dev",
			},
			SharedConfigFile: `[profile dev]
endpoint_url = http://config-global.dev
services = testing-eventbridge
ignore_configured_endpoint_urls = true

[services testing-eventbridge]
eventbridge =
    endpoint_url = http://config-eventbridge.dev
`,
			ExpectURL: nil,
		},
		"config global": {
			SharedConfigFile: `[profile dev]
endpoint_url = http://config-global.dev
`,
			ExpectURL: aws.String("http://config-global.dev"),
		},
		"config service": {
			Env: map[string]string{
				"AWS_ENDPOINT_URL": "https://env-global.dev",
			},
			SharedConfigFile: `[profile dev]
endpoint_url = http://config-global.dev
services = testing-eventbridge

[services testing-eventbridge]
eventbridge =
    endpoint_url = http://config-eventbridge.dev
`,
			ExpectURL: aws.String("http://config-eventbridge.dev"),
		},
		"client": {
			Env: map[string]string{
				"AWS_ENDPOINT_URL":                    "https://env-global.dev",
				"AWS_ENDPOINT_URL_EVENTBRIDGE":        "https://env-eventbridge.dev",
				"AWS_IGNORE_CONFIGURED_ENDPOINT_URLS": "true",
			},
			SharedConfigFile: `[profile dev]
endpoint_url = http://config-global.dev
services = testing-eventbridge

[services testing-eventbridge]
eventbridge =
    endpoint_url = http://config-eventbridge.dev
`,
			ClientEndpoint: aws.String("https://client-eventbridge.dev"),
			ExpectURL:      aws.String("https://client-eventbridge.dev"),
		},
	}

	for name, c := range cases {
		t.Run(name, func(t *testing.T) {
			os.Clearenv()
			for k, v := range c.Env {
				t.Setenv(k, v)
			}

			tmpDir := t.TempDir()
			os.WriteFile(filepath.Join(tmpDir, "test_shared_config"), []byte(c.SharedConfigFile), os.FileMode(int(0777)))

			awsConfig, err := config.LoadDefaultConfig(
				context.TODO(),
				config.WithSharedConfigFiles([]string{filepath.Join(tmpDir, "test_shared_config")}),
				config.WithSharedConfigProfile("dev"),
			)
			if err != nil {
				t.Fatalf("error loading default config: %v", err)
			}

			client := NewFromConfig(awsConfig, func(o *Options) {
				if c.ClientEndpoint != nil {
					o.BaseEndpoint = c.ClientEndpoint
				}
			})

			if e, a := c.ExpectURL, client.options.BaseEndpoint; !reflect.DeepEqual(e, a) {
				t.Errorf("expect endpoint %v , got %v", e, a)
			}
		})
	}
}
