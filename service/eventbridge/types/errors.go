// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// There is concurrent modification on a rule or target.
type ConcurrentModificationException struct {
	Message *string
}

func (e *ConcurrentModificationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConcurrentModificationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConcurrentModificationException) ErrorCode() string {
	return "ConcurrentModificationException"
}
func (e *ConcurrentModificationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConcurrentModificationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConcurrentModificationException) HasMessage() bool {
	return e.Message != nil
}

// This exception occurs due to unexpected causes.
type InternalException struct {
	Message *string
}

func (e *InternalException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalException) ErrorCode() string             { return "InternalException" }
func (e *InternalException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalException) HasMessage() bool {
	return e.Message != nil
}

// The event pattern is not valid.
type InvalidEventPatternException struct {
	Message *string
}

func (e *InvalidEventPatternException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidEventPatternException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidEventPatternException) ErrorCode() string             { return "InvalidEventPatternException" }
func (e *InvalidEventPatternException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidEventPatternException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidEventPatternException) HasMessage() bool {
	return e.Message != nil
}

// The specified state is not a valid state for an event source.
type InvalidStateException struct {
	Message *string
}

func (e *InvalidStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidStateException) ErrorCode() string             { return "InvalidStateException" }
func (e *InvalidStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidStateException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidStateException) HasMessage() bool {
	return e.Message != nil
}

// You tried to create more rules or add more targets to a rule than is allowed.
type LimitExceededException struct {
	Message *string
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string             { return "LimitExceededException" }
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// This rule was created by an AWS service on behalf of your account. It is managed
// by that service. If you see this error in response to DeleteRule or
// RemoveTargets, you can use the Force parameter in those calls to delete the rule
// or remove targets from the rule. You cannot modify these managed rules by using
// DisableRule, EnableRule, PutTargets, PutRule, TagResource, or UntagResource.
type ManagedRuleException struct {
	Message *string
}

func (e *ManagedRuleException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ManagedRuleException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ManagedRuleException) ErrorCode() string             { return "ManagedRuleException" }
func (e *ManagedRuleException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ManagedRuleException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ManagedRuleException) HasMessage() bool {
	return e.Message != nil
}

// The operation you are attempting is not available in this region.
type OperationDisabledException struct {
	Message *string
}

func (e *OperationDisabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OperationDisabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OperationDisabledException) ErrorCode() string             { return "OperationDisabledException" }
func (e *OperationDisabledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OperationDisabledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OperationDisabledException) HasMessage() bool {
	return e.Message != nil
}

// The event bus policy is too long. For more information, see the limits.
type PolicyLengthExceededException struct {
	Message *string
}

func (e *PolicyLengthExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyLengthExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyLengthExceededException) ErrorCode() string             { return "PolicyLengthExceededException" }
func (e *PolicyLengthExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyLengthExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyLengthExceededException) HasMessage() bool {
	return e.Message != nil
}

// The resource you are trying to create already exists.
type ResourceAlreadyExistsException struct {
	Message *string
}

func (e *ResourceAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceAlreadyExistsException) ErrorCode() string             { return "ResourceAlreadyExistsException" }
func (e *ResourceAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// An entity that you specified does not exist.
type ResourceNotFoundException struct {
	Message *string
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundException) HasMessage() bool {
	return e.Message != nil
}
