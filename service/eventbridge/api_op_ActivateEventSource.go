// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package eventbridge

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
)

const opActivateEventSource = "ActivateEventSource"

// ActivateEventSourceRequest returns a request value for making API operation for
// Amazon EventBridge.
//
// Activates a partner event source that has been deactivated. Once activated,
// your matching event bus will start receiving events from the event source.
//
// This operation is performed by AWS customers, not by SaaS partners.
//
//    // Example sending a request using ActivateEventSourceRequest.
//    req := client.ActivateEventSourceRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ActivateEventSource
func (c *Client) ActivateEventSourceRequest(input *types.ActivateEventSourceInput) ActivateEventSourceRequest {
	op := &aws.Operation{
		Name:       opActivateEventSource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ActivateEventSourceInput{}
	}

	req := c.newRequest(op, input, &types.ActivateEventSourceOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return ActivateEventSourceRequest{Request: req, Input: input, Copy: c.ActivateEventSourceRequest}
}

// ActivateEventSourceRequest is the request type for the
// ActivateEventSource API operation.
type ActivateEventSourceRequest struct {
	*aws.Request
	Input *types.ActivateEventSourceInput
	Copy  func(*types.ActivateEventSourceInput) ActivateEventSourceRequest
}

// Send marshals and sends the ActivateEventSource API request.
func (r ActivateEventSourceRequest) Send(ctx context.Context) (*ActivateEventSourceResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ActivateEventSourceResponse{
		ActivateEventSourceOutput: r.Request.Data.(*types.ActivateEventSourceOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ActivateEventSourceResponse is the response type for the
// ActivateEventSource API operation.
type ActivateEventSourceResponse struct {
	*types.ActivateEventSourceOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ActivateEventSource request.
func (r *ActivateEventSourceResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
