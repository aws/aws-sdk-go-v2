// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package secretsmanager

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
)

const opDeleteSecret = "DeleteSecret"

// DeleteSecretRequest returns a request value for making API operation for
// AWS Secrets Manager.
//
// Deletes an entire secret and all of its versions. You can optionally include
// a recovery window during which you can restore the secret. If you don't specify
// a recovery window value, the operation defaults to 30 days. Secrets Manager
// attaches a DeletionDate stamp to the secret that specifies the end of the
// recovery window. At the end of the recovery window, Secrets Manager deletes
// the secret permanently.
//
// At any time before recovery window ends, you can use RestoreSecret to remove
// the DeletionDate and cancel the deletion of the secret.
//
// You cannot access the encrypted secret information in any secret that is
// scheduled for deletion. If you need to access that information, you must
// cancel the deletion with RestoreSecret and then retrieve the information.
//
//    * There is no explicit operation to delete a version of a secret. Instead,
//    remove all staging labels from the VersionStage field of a version. That
//    marks the version as deprecated and allows Secrets Manager to delete it
//    as needed. Versions that do not have any staging labels do not show up
//    in ListSecretVersionIds unless you specify IncludeDeprecated.
//
//    * The permanent secret deletion at the end of the waiting period is performed
//    as a background task with low priority. There is no guarantee of a specific
//    time after the recovery window for the actual delete operation to occur.
//
// Minimum permissions
//
// To run this command, you must have the following permissions:
//
//    * secretsmanager:DeleteSecret
//
// Related operations
//
//    * To create a secret, use CreateSecret.
//
//    * To cancel deletion of a version of a secret before the recovery window
//    has expired, use RestoreSecret.
//
//    // Example sending a request using DeleteSecretRequest.
//    req := client.DeleteSecretRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/secretsmanager-2017-10-17/DeleteSecret
func (c *Client) DeleteSecretRequest(input *types.DeleteSecretInput) DeleteSecretRequest {
	op := &aws.Operation{
		Name:       opDeleteSecret,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.DeleteSecretInput{}
	}

	req := c.newRequest(op, input, &types.DeleteSecretOutput{})
	return DeleteSecretRequest{Request: req, Input: input, Copy: c.DeleteSecretRequest}
}

// DeleteSecretRequest is the request type for the
// DeleteSecret API operation.
type DeleteSecretRequest struct {
	*aws.Request
	Input *types.DeleteSecretInput
	Copy  func(*types.DeleteSecretInput) DeleteSecretRequest
}

// Send marshals and sends the DeleteSecret API request.
func (r DeleteSecretRequest) Send(ctx context.Context) (*DeleteSecretResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeleteSecretResponse{
		DeleteSecretOutput: r.Request.Data.(*types.DeleteSecretOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeleteSecretResponse is the response type for the
// DeleteSecret API operation.
type DeleteSecretResponse struct {
	*types.DeleteSecretOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeleteSecret request.
func (r *DeleteSecretResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
