// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package secretsmanager

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
)

const opListSecretVersionIds = "ListSecretVersionIds"

// ListSecretVersionIdsRequest returns a request value for making API operation for
// AWS Secrets Manager.
//
// Lists all of the versions attached to the specified secret. The output does
// not include the SecretString or SecretBinary fields. By default, the list
// includes only versions that have at least one staging label in VersionStage
// attached.
//
// Always check the NextToken response parameter when calling any of the List*
// operations. These operations can occasionally return an empty or shorter
// than expected list of results even when there are more results available.
// When this happens, the NextToken response parameter contains a value to pass
// to the next call to the same API to request the next part of the list.
//
// Minimum permissions
//
// To run this command, you must have the following permissions:
//
//    * secretsmanager:ListSecretVersionIds
//
// Related operations
//
//    * To list the secrets in an account, use ListSecrets.
//
//    // Example sending a request using ListSecretVersionIdsRequest.
//    req := client.ListSecretVersionIdsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/secretsmanager-2017-10-17/ListSecretVersionIds
func (c *Client) ListSecretVersionIdsRequest(input *types.ListSecretVersionIdsInput) ListSecretVersionIdsRequest {
	op := &aws.Operation{
		Name:       opListSecretVersionIds,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListSecretVersionIdsInput{}
	}

	req := c.newRequest(op, input, &types.ListSecretVersionIdsOutput{})
	return ListSecretVersionIdsRequest{Request: req, Input: input, Copy: c.ListSecretVersionIdsRequest}
}

// ListSecretVersionIdsRequest is the request type for the
// ListSecretVersionIds API operation.
type ListSecretVersionIdsRequest struct {
	*aws.Request
	Input *types.ListSecretVersionIdsInput
	Copy  func(*types.ListSecretVersionIdsInput) ListSecretVersionIdsRequest
}

// Send marshals and sends the ListSecretVersionIds API request.
func (r ListSecretVersionIdsRequest) Send(ctx context.Context) (*ListSecretVersionIdsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListSecretVersionIdsResponse{
		ListSecretVersionIdsOutput: r.Request.Data.(*types.ListSecretVersionIdsOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListSecretVersionIdsRequestPaginator returns a paginator for ListSecretVersionIds.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListSecretVersionIdsRequest(input)
//   p := secretsmanager.NewListSecretVersionIdsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListSecretVersionIdsPaginator(req ListSecretVersionIdsRequest) ListSecretVersionIdsPaginator {
	return ListSecretVersionIdsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListSecretVersionIdsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListSecretVersionIdsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListSecretVersionIdsPaginator struct {
	aws.Pager
}

func (p *ListSecretVersionIdsPaginator) CurrentPage() *types.ListSecretVersionIdsOutput {
	return p.Pager.CurrentPage().(*types.ListSecretVersionIdsOutput)
}

// ListSecretVersionIdsResponse is the response type for the
// ListSecretVersionIds API operation.
type ListSecretVersionIdsResponse struct {
	*types.ListSecretVersionIdsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListSecretVersionIds request.
func (r *ListSecretVersionIdsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
