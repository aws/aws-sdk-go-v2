// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package secretsmanager

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
)

const opCreateSecret = "CreateSecret"

// CreateSecretRequest returns a request value for making API operation for
// AWS Secrets Manager.
//
// Creates a new secret. A secret in Secrets Manager consists of both the protected
// secret data and the important information needed to manage the secret.
//
// Secrets Manager stores the encrypted secret data in one of a collection of
// "versions" associated with the secret. Each version contains a copy of the
// encrypted secret data. Each version is associated with one or more "staging
// labels" that identify where the version is in the rotation cycle. The SecretVersionsToStages
// field of the secret contains the mapping of staging labels to the active
// versions of the secret. Versions without a staging label are considered deprecated
// and are not included in the list.
//
// You provide the secret data to be encrypted by putting text in either the
// SecretString parameter or binary data in the SecretBinary parameter, but
// not both. If you include SecretString or SecretBinary then Secrets Manager
// also creates an initial secret version and automatically attaches the staging
// label AWSCURRENT to the new version.
//
//    * If you call an operation that needs to encrypt or decrypt the SecretString
//    or SecretBinary for a secret in the same account as the calling user and
//    that secret doesn't specify a AWS KMS encryption key, Secrets Manager
//    uses the account's default AWS managed customer master key (CMK) with
//    the alias aws/secretsmanager. If this key doesn't already exist in your
//    account then Secrets Manager creates it for you automatically. All users
//    and roles in the same AWS account automatically have access to use the
//    default CMK. Note that if an Secrets Manager API call results in AWS having
//    to create the account's AWS-managed CMK, it can result in a one-time significant
//    delay in returning the result.
//
//    * If the secret is in a different AWS account from the credentials calling
//    an API that requires encryption or decryption of the secret value then
//    you must create and use a custom AWS KMS CMK because you can't access
//    the default CMK for the account using credentials from a different AWS
//    account. Store the ARN of the CMK in the secret when you create the secret
//    or when you update it by including it in the KMSKeyId. If you call an
//    API that must encrypt or decrypt SecretString or SecretBinary using credentials
//    from a different account then the AWS KMS key policy must grant cross-account
//    access to that other account's user or role for both the kms:GenerateDataKey
//    and kms:Decrypt operations.
//
// Minimum permissions
//
// To run this command, you must have the following permissions:
//
//    * secretsmanager:CreateSecret
//
//    * kms:GenerateDataKey - needed only if you use a customer-managed AWS
//    KMS key to encrypt the secret. You do not need this permission to use
//    the account's default AWS managed CMK for Secrets Manager.
//
//    * kms:Decrypt - needed only if you use a customer-managed AWS KMS key
//    to encrypt the secret. You do not need this permission to use the account's
//    default AWS managed CMK for Secrets Manager.
//
//    * secretsmanager:TagResource - needed only if you include the Tags parameter.
//
// Related operations
//
//    * To delete a secret, use DeleteSecret.
//
//    * To modify an existing secret, use UpdateSecret.
//
//    * To create a new version of a secret, use PutSecretValue.
//
//    * To retrieve the encrypted secure string and secure binary values, use
//    GetSecretValue.
//
//    * To retrieve all other details for a secret, use DescribeSecret. This
//    does not include the encrypted secure string and secure binary values.
//
//    * To retrieve the list of secret versions associated with the current
//    secret, use DescribeSecret and examine the SecretVersionsToStages response
//    value.
//
//    // Example sending a request using CreateSecretRequest.
//    req := client.CreateSecretRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/secretsmanager-2017-10-17/CreateSecret
func (c *Client) CreateSecretRequest(input *types.CreateSecretInput) CreateSecretRequest {
	op := &aws.Operation{
		Name:       opCreateSecret,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateSecretInput{}
	}

	req := c.newRequest(op, input, &types.CreateSecretOutput{})
	return CreateSecretRequest{Request: req, Input: input, Copy: c.CreateSecretRequest}
}

// CreateSecretRequest is the request type for the
// CreateSecret API operation.
type CreateSecretRequest struct {
	*aws.Request
	Input *types.CreateSecretInput
	Copy  func(*types.CreateSecretInput) CreateSecretRequest
}

// Send marshals and sends the CreateSecret API request.
func (r CreateSecretRequest) Send(ctx context.Context) (*CreateSecretResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateSecretResponse{
		CreateSecretOutput: r.Request.Data.(*types.CreateSecretOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateSecretResponse is the response type for the
// CreateSecret API operation.
type CreateSecretResponse struct {
	*types.CreateSecretOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateSecret request.
func (r *CreateSecretResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
