// Code generated by smithy-go-codegen DO NOT EDIT.

package quicksight

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Updates Amazon QuickSight customizations the current AWS Region. Currently, the
// only customization you can use is a theme. You can use customizations for your
// AWS account or, if you specify a namespace, for a QuickSight namespace instead.
// Customizations that apply to a namespace override customizations that apply to
// an AWS account. To find out which customizations apply, use the
// DescribeAccountCustomization API operation.
func (c *Client) UpdateAccountCustomization(ctx context.Context, params *UpdateAccountCustomizationInput, optFns ...func(*Options)) (*UpdateAccountCustomizationOutput, error) {
	if params == nil {
		params = &UpdateAccountCustomizationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdateAccountCustomization", params, optFns, c.addOperationUpdateAccountCustomizationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdateAccountCustomizationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateAccountCustomizationInput struct {

	// The QuickSight customizations you're updating in the current AWS Region.
	//
	// This member is required.
	AccountCustomization *types.AccountCustomization

	// The ID for the AWS account that you want to update QuickSight customizations
	// for.
	//
	// This member is required.
	AwsAccountId *string

	// The namespace that you want to update QuickSight customizations for.
	Namespace *string
}

type UpdateAccountCustomizationOutput struct {

	// The QuickSight customizations you're updating in the current AWS Region.
	AccountCustomization *types.AccountCustomization

	// The Amazon Resource Name (ARN) for the updated customization for this AWS
	// account.
	Arn *string

	// The ID for the AWS account that you want to update QuickSight customizations
	// for.
	AwsAccountId *string

	// The namespace associated with the customization that you're updating.
	Namespace *string

	// The AWS request ID for this operation.
	RequestId *string

	// The HTTP status of the request.
	Status int32

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func (c *Client) addOperationUpdateAccountCustomizationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpUpdateAccountCustomization{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateAccountCustomization{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpUpdateAccountCustomizationValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateAccountCustomization(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opUpdateAccountCustomization(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "quicksight",
		OperationName: "UpdateAccountCustomization",
	}
}
