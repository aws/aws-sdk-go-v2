// Code generated by smithy-go-codegen DO NOT EDIT.

package quicksight

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates a dashboard in an AWS account.
func (c *Client) UpdateDashboard(ctx context.Context, params *UpdateDashboardInput, optFns ...func(*Options)) (*UpdateDashboardOutput, error) {
	if params == nil {
		params = &UpdateDashboardInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdateDashboard", params, optFns, addOperationUpdateDashboardMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdateDashboardOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateDashboardInput struct {

	// The ID of the AWS account that contains the dashboard that you're updating.
	//
	// This member is required.
	AwsAccountId *string

	// The ID for the dashboard.
	//
	// This member is required.
	DashboardId *string

	// The display name of the dashboard.
	//
	// This member is required.
	Name *string

	// The entity that you are using as a source when you update the dashboard. In
	// SourceEntity, you specify the type of object you're using as source. You can
	// only update a dashboard from a template, so you use a SourceTemplate entity. If
	// you need to update a dashboard from an analysis, first convert the analysis to a
	// template by using the CreateTemplate () API operation. For SourceTemplate,
	// specify the Amazon Resource Name (ARN) of the source template. The
	// SourceTemplate ARN can contain any AWS Account and any QuickSight-supported AWS
	// Region. Use the DataSetReferences entity within SourceTemplate to list the
	// replacement datasets for the placeholders listed in the original. The schema in
	// each dataset must match its placeholder.
	//
	// This member is required.
	SourceEntity *types.DashboardSourceEntity

	// Options for publishing the dashboard when you create it:
	//
	//     *
	// AvailabilityStatus for AdHocFilteringOption - This status can be either ENABLED
	// or DISABLED. When this is set to DISABLED, QuickSight disables the left filter
	// pane on the published dashboard, which can be used for ad hoc (one-time)
	// filtering. This option is ENABLED by default.
	//
	//     * AvailabilityStatus for
	// ExportToCSVOption - This status can be either ENABLED or DISABLED. The visual
	// option to export data to .csv format isn't enabled when this is set to DISABLED.
	// This option is ENABLED by default.
	//
	//     * VisibilityState for
	// SheetControlsOption - This visibility state can be either COLLAPSED or EXPANDED.
	// This option is COLLAPSED by default.
	DashboardPublishOptions *types.DashboardPublishOptions

	// A structure that contains the parameters of the dashboard. These are parameter
	// overrides for a dashboard. A dashboard can have any type of parameters, and some
	// parameters might accept multiple values.
	Parameters *types.Parameters

	// The Amazon Resource Name (ARN) of the theme that is being used for this
	// dashboard. If you add a value for this field, it overrides the value that was
	// originally associated with the entity. The theme ARN must exist in the same AWS
	// account where you create the dashboard.
	ThemeArn *string

	// A description for the first version of the dashboard being created.
	VersionDescription *string
}

type UpdateDashboardOutput struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// The creation status of the request.
	CreationStatus types.ResourceStatus

	// The ID for the dashboard.
	DashboardId *string

	// The AWS request ID for this operation.
	RequestId *string

	// The HTTP status of the request.
	Status *int32

	// The ARN of the dashboard, including the version number.
	VersionArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationUpdateDashboardMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpUpdateDashboard{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateDashboard{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateDashboardValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateDashboard(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opUpdateDashboard(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "quicksight",
		OperationName: "UpdateDashboard",
	}
}
