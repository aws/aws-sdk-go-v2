// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package quicksight

type AssignmentStatus string

// Enum values for AssignmentStatus
const (
	AssignmentStatusEnabled  AssignmentStatus = "ENABLED"
	AssignmentStatusDraft    AssignmentStatus = "DRAFT"
	AssignmentStatusDisabled AssignmentStatus = "DISABLED"
)

func (enum AssignmentStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AssignmentStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ColumnDataType string

// Enum values for ColumnDataType
const (
	ColumnDataTypeString   ColumnDataType = "STRING"
	ColumnDataTypeInteger  ColumnDataType = "INTEGER"
	ColumnDataTypeDecimal  ColumnDataType = "DECIMAL"
	ColumnDataTypeDatetime ColumnDataType = "DATETIME"
)

func (enum ColumnDataType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ColumnDataType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DashboardBehavior string

// Enum values for DashboardBehavior
const (
	DashboardBehaviorEnabled  DashboardBehavior = "ENABLED"
	DashboardBehaviorDisabled DashboardBehavior = "DISABLED"
)

func (enum DashboardBehavior) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DashboardBehavior) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DashboardErrorType string

// Enum values for DashboardErrorType
const (
	DashboardErrorTypeDataSetNotFound              DashboardErrorType = "DATA_SET_NOT_FOUND"
	DashboardErrorTypeInternalFailure              DashboardErrorType = "INTERNAL_FAILURE"
	DashboardErrorTypeParameterValueIncompatible   DashboardErrorType = "PARAMETER_VALUE_INCOMPATIBLE"
	DashboardErrorTypeParameterTypeInvalid         DashboardErrorType = "PARAMETER_TYPE_INVALID"
	DashboardErrorTypeParameterNotFound            DashboardErrorType = "PARAMETER_NOT_FOUND"
	DashboardErrorTypeColumnTypeMismatch           DashboardErrorType = "COLUMN_TYPE_MISMATCH"
	DashboardErrorTypeColumnGeographicRoleMismatch DashboardErrorType = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
	DashboardErrorTypeColumnReplacementMissing     DashboardErrorType = "COLUMN_REPLACEMENT_MISSING"
)

func (enum DashboardErrorType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DashboardErrorType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DashboardUIState string

// Enum values for DashboardUIState
const (
	DashboardUIStateExpanded  DashboardUIState = "EXPANDED"
	DashboardUIStateCollapsed DashboardUIState = "COLLAPSED"
)

func (enum DashboardUIState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DashboardUIState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DataSetImportMode string

// Enum values for DataSetImportMode
const (
	DataSetImportModeSpice       DataSetImportMode = "SPICE"
	DataSetImportModeDirectQuery DataSetImportMode = "DIRECT_QUERY"
)

func (enum DataSetImportMode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DataSetImportMode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DataSourceErrorInfoType string

// Enum values for DataSourceErrorInfoType
const (
	DataSourceErrorInfoTypeTimeout                   DataSourceErrorInfoType = "TIMEOUT"
	DataSourceErrorInfoTypeEngineVersionNotSupported DataSourceErrorInfoType = "ENGINE_VERSION_NOT_SUPPORTED"
	DataSourceErrorInfoTypeUnknownHost               DataSourceErrorInfoType = "UNKNOWN_HOST"
	DataSourceErrorInfoTypeGenericSqlFailure         DataSourceErrorInfoType = "GENERIC_SQL_FAILURE"
	DataSourceErrorInfoTypeConflict                  DataSourceErrorInfoType = "CONFLICT"
	DataSourceErrorInfoTypeUnknown                   DataSourceErrorInfoType = "UNKNOWN"
)

func (enum DataSourceErrorInfoType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DataSourceErrorInfoType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DataSourceType string

// Enum values for DataSourceType
const (
	DataSourceTypeAdobeAnalytics      DataSourceType = "ADOBE_ANALYTICS"
	DataSourceTypeAmazonElasticsearch DataSourceType = "AMAZON_ELASTICSEARCH"
	DataSourceTypeAthena              DataSourceType = "ATHENA"
	DataSourceTypeAurora              DataSourceType = "AURORA"
	DataSourceTypeAuroraPostgresql    DataSourceType = "AURORA_POSTGRESQL"
	DataSourceTypeAwsIotAnalytics     DataSourceType = "AWS_IOT_ANALYTICS"
	DataSourceTypeGithub              DataSourceType = "GITHUB"
	DataSourceTypeJira                DataSourceType = "JIRA"
	DataSourceTypeMariadb             DataSourceType = "MARIADB"
	DataSourceTypeMysql               DataSourceType = "MYSQL"
	DataSourceTypePostgresql          DataSourceType = "POSTGRESQL"
	DataSourceTypePresto              DataSourceType = "PRESTO"
	DataSourceTypeRedshift            DataSourceType = "REDSHIFT"
	DataSourceTypeS3                  DataSourceType = "S3"
	DataSourceTypeSalesforce          DataSourceType = "SALESFORCE"
	DataSourceTypeServicenow          DataSourceType = "SERVICENOW"
	DataSourceTypeSnowflake           DataSourceType = "SNOWFLAKE"
	DataSourceTypeSpark               DataSourceType = "SPARK"
	DataSourceTypeSqlserver           DataSourceType = "SQLSERVER"
	DataSourceTypeTeradata            DataSourceType = "TERADATA"
	DataSourceTypeTwitter             DataSourceType = "TWITTER"
)

func (enum DataSourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DataSourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ExceptionResourceType string

// Enum values for ExceptionResourceType
const (
	ExceptionResourceTypeUser                ExceptionResourceType = "USER"
	ExceptionResourceTypeGroup               ExceptionResourceType = "GROUP"
	ExceptionResourceTypeNamespace           ExceptionResourceType = "NAMESPACE"
	ExceptionResourceTypeAccountSettings     ExceptionResourceType = "ACCOUNT_SETTINGS"
	ExceptionResourceTypeIampolicyAssignment ExceptionResourceType = "IAMPOLICY_ASSIGNMENT"
	ExceptionResourceTypeDataSource          ExceptionResourceType = "DATA_SOURCE"
	ExceptionResourceTypeDataSet             ExceptionResourceType = "DATA_SET"
	ExceptionResourceTypeVpcConnection       ExceptionResourceType = "VPC_CONNECTION"
	ExceptionResourceTypeIngestion           ExceptionResourceType = "INGESTION"
)

func (enum ExceptionResourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ExceptionResourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FileFormat string

// Enum values for FileFormat
const (
	FileFormatCsv  FileFormat = "CSV"
	FileFormatTsv  FileFormat = "TSV"
	FileFormatClf  FileFormat = "CLF"
	FileFormatElf  FileFormat = "ELF"
	FileFormatXlsx FileFormat = "XLSX"
	FileFormatJson FileFormat = "JSON"
)

func (enum FileFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FileFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GeoSpatialCountryCode string

// Enum values for GeoSpatialCountryCode
const (
	GeoSpatialCountryCodeUs GeoSpatialCountryCode = "US"
)

func (enum GeoSpatialCountryCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GeoSpatialCountryCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GeoSpatialDataRole string

// Enum values for GeoSpatialDataRole
const (
	GeoSpatialDataRoleCountry   GeoSpatialDataRole = "COUNTRY"
	GeoSpatialDataRoleState     GeoSpatialDataRole = "STATE"
	GeoSpatialDataRoleCounty    GeoSpatialDataRole = "COUNTY"
	GeoSpatialDataRoleCity      GeoSpatialDataRole = "CITY"
	GeoSpatialDataRolePostcode  GeoSpatialDataRole = "POSTCODE"
	GeoSpatialDataRoleLongitude GeoSpatialDataRole = "LONGITUDE"
	GeoSpatialDataRoleLatitude  GeoSpatialDataRole = "LATITUDE"
)

func (enum GeoSpatialDataRole) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GeoSpatialDataRole) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IdentityType string

// Enum values for IdentityType
const (
	IdentityTypeIam        IdentityType = "IAM"
	IdentityTypeQuicksight IdentityType = "QUICKSIGHT"
)

func (enum IdentityType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IdentityType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IngestionErrorType string

// Enum values for IngestionErrorType
const (
	IngestionErrorTypeFailureToAssumeRole             IngestionErrorType = "FAILURE_TO_ASSUME_ROLE"
	IngestionErrorTypeIngestionSuperseded             IngestionErrorType = "INGESTION_SUPERSEDED"
	IngestionErrorTypeIngestionCanceled               IngestionErrorType = "INGESTION_CANCELED"
	IngestionErrorTypeDataSetDeleted                  IngestionErrorType = "DATA_SET_DELETED"
	IngestionErrorTypeDataSetNotSpice                 IngestionErrorType = "DATA_SET_NOT_SPICE"
	IngestionErrorTypeS3UploadedFileDeleted           IngestionErrorType = "S3_UPLOADED_FILE_DELETED"
	IngestionErrorTypeS3ManifestError                 IngestionErrorType = "S3_MANIFEST_ERROR"
	IngestionErrorTypeDataToleranceException          IngestionErrorType = "DATA_TOLERANCE_EXCEPTION"
	IngestionErrorTypeSpiceTableNotFound              IngestionErrorType = "SPICE_TABLE_NOT_FOUND"
	IngestionErrorTypeDataSetSizeLimitExceeded        IngestionErrorType = "DATA_SET_SIZE_LIMIT_EXCEEDED"
	IngestionErrorTypeRowSizeLimitExceeded            IngestionErrorType = "ROW_SIZE_LIMIT_EXCEEDED"
	IngestionErrorTypeAccountCapacityLimitExceeded    IngestionErrorType = "ACCOUNT_CAPACITY_LIMIT_EXCEEDED"
	IngestionErrorTypeCustomerError                   IngestionErrorType = "CUSTOMER_ERROR"
	IngestionErrorTypeDataSourceNotFound              IngestionErrorType = "DATA_SOURCE_NOT_FOUND"
	IngestionErrorTypeIamRoleNotAvailable             IngestionErrorType = "IAM_ROLE_NOT_AVAILABLE"
	IngestionErrorTypeConnectionFailure               IngestionErrorType = "CONNECTION_FAILURE"
	IngestionErrorTypeSqlTableNotFound                IngestionErrorType = "SQL_TABLE_NOT_FOUND"
	IngestionErrorTypePermissionDenied                IngestionErrorType = "PERMISSION_DENIED"
	IngestionErrorTypeSslCertificateValidationFailure IngestionErrorType = "SSL_CERTIFICATE_VALIDATION_FAILURE"
	IngestionErrorTypeOauthTokenFailure               IngestionErrorType = "OAUTH_TOKEN_FAILURE"
	IngestionErrorTypeSourceApiLimitExceededFailure   IngestionErrorType = "SOURCE_API_LIMIT_EXCEEDED_FAILURE"
	IngestionErrorTypePasswordAuthenticationFailure   IngestionErrorType = "PASSWORD_AUTHENTICATION_FAILURE"
	IngestionErrorTypeSqlSchemaMismatchError          IngestionErrorType = "SQL_SCHEMA_MISMATCH_ERROR"
	IngestionErrorTypeInvalidDateFormat               IngestionErrorType = "INVALID_DATE_FORMAT"
	IngestionErrorTypeInvalidDataprepSyntax           IngestionErrorType = "INVALID_DATAPREP_SYNTAX"
	IngestionErrorTypeSourceResourceLimitExceeded     IngestionErrorType = "SOURCE_RESOURCE_LIMIT_EXCEEDED"
	IngestionErrorTypeSqlInvalidParameterValue        IngestionErrorType = "SQL_INVALID_PARAMETER_VALUE"
	IngestionErrorTypeQueryTimeout                    IngestionErrorType = "QUERY_TIMEOUT"
	IngestionErrorTypeSqlNumericOverflow              IngestionErrorType = "SQL_NUMERIC_OVERFLOW"
	IngestionErrorTypeUnresolvableHost                IngestionErrorType = "UNRESOLVABLE_HOST"
	IngestionErrorTypeUnroutableHost                  IngestionErrorType = "UNROUTABLE_HOST"
	IngestionErrorTypeSqlException                    IngestionErrorType = "SQL_EXCEPTION"
	IngestionErrorTypeS3FileInaccessible              IngestionErrorType = "S3_FILE_INACCESSIBLE"
	IngestionErrorTypeIotFileNotFound                 IngestionErrorType = "IOT_FILE_NOT_FOUND"
	IngestionErrorTypeIotDataSetFileEmpty             IngestionErrorType = "IOT_DATA_SET_FILE_EMPTY"
	IngestionErrorTypeInvalidDataSourceConfig         IngestionErrorType = "INVALID_DATA_SOURCE_CONFIG"
	IngestionErrorTypeDataSourceAuthFailed            IngestionErrorType = "DATA_SOURCE_AUTH_FAILED"
	IngestionErrorTypeDataSourceConnectionFailed      IngestionErrorType = "DATA_SOURCE_CONNECTION_FAILED"
	IngestionErrorTypeFailureToProcessJsonFile        IngestionErrorType = "FAILURE_TO_PROCESS_JSON_FILE"
	IngestionErrorTypeInternalServiceError            IngestionErrorType = "INTERNAL_SERVICE_ERROR"
)

func (enum IngestionErrorType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IngestionErrorType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IngestionRequestSource string

// Enum values for IngestionRequestSource
const (
	IngestionRequestSourceManual    IngestionRequestSource = "MANUAL"
	IngestionRequestSourceScheduled IngestionRequestSource = "SCHEDULED"
)

func (enum IngestionRequestSource) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IngestionRequestSource) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IngestionRequestType string

// Enum values for IngestionRequestType
const (
	IngestionRequestTypeInitialIngestion   IngestionRequestType = "INITIAL_INGESTION"
	IngestionRequestTypeEdit               IngestionRequestType = "EDIT"
	IngestionRequestTypeIncrementalRefresh IngestionRequestType = "INCREMENTAL_REFRESH"
	IngestionRequestTypeFullRefresh        IngestionRequestType = "FULL_REFRESH"
)

func (enum IngestionRequestType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IngestionRequestType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IngestionStatus string

// Enum values for IngestionStatus
const (
	IngestionStatusInitialized IngestionStatus = "INITIALIZED"
	IngestionStatusQueued      IngestionStatus = "QUEUED"
	IngestionStatusRunning     IngestionStatus = "RUNNING"
	IngestionStatusFailed      IngestionStatus = "FAILED"
	IngestionStatusCompleted   IngestionStatus = "COMPLETED"
	IngestionStatusCancelled   IngestionStatus = "CANCELLED"
)

func (enum IngestionStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IngestionStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InputColumnDataType string

// Enum values for InputColumnDataType
const (
	InputColumnDataTypeString   InputColumnDataType = "STRING"
	InputColumnDataTypeInteger  InputColumnDataType = "INTEGER"
	InputColumnDataTypeDecimal  InputColumnDataType = "DECIMAL"
	InputColumnDataTypeDatetime InputColumnDataType = "DATETIME"
	InputColumnDataTypeBit      InputColumnDataType = "BIT"
	InputColumnDataTypeBoolean  InputColumnDataType = "BOOLEAN"
	InputColumnDataTypeJson     InputColumnDataType = "JSON"
)

func (enum InputColumnDataType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InputColumnDataType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type JoinType string

// Enum values for JoinType
const (
	JoinTypeInner JoinType = "INNER"
	JoinTypeOuter JoinType = "OUTER"
	JoinTypeLeft  JoinType = "LEFT"
	JoinTypeRight JoinType = "RIGHT"
)

func (enum JoinType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum JoinType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ResourceStatus string

// Enum values for ResourceStatus
const (
	ResourceStatusCreationInProgress ResourceStatus = "CREATION_IN_PROGRESS"
	ResourceStatusCreationSuccessful ResourceStatus = "CREATION_SUCCESSFUL"
	ResourceStatusCreationFailed     ResourceStatus = "CREATION_FAILED"
	ResourceStatusUpdateInProgress   ResourceStatus = "UPDATE_IN_PROGRESS"
	ResourceStatusUpdateSuccessful   ResourceStatus = "UPDATE_SUCCESSFUL"
	ResourceStatusUpdateFailed       ResourceStatus = "UPDATE_FAILED"
)

func (enum ResourceStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ResourceStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RowLevelPermissionPolicy string

// Enum values for RowLevelPermissionPolicy
const (
	RowLevelPermissionPolicyGrantAccess RowLevelPermissionPolicy = "GRANT_ACCESS"
	RowLevelPermissionPolicyDenyAccess  RowLevelPermissionPolicy = "DENY_ACCESS"
)

func (enum RowLevelPermissionPolicy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RowLevelPermissionPolicy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TemplateErrorType string

// Enum values for TemplateErrorType
const (
	TemplateErrorTypeDataSetNotFound TemplateErrorType = "DATA_SET_NOT_FOUND"
	TemplateErrorTypeInternalFailure TemplateErrorType = "INTERNAL_FAILURE"
)

func (enum TemplateErrorType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TemplateErrorType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type TextQualifier string

// Enum values for TextQualifier
const (
	TextQualifierDoubleQuote TextQualifier = "DOUBLE_QUOTE"
	TextQualifierSingleQuote TextQualifier = "SINGLE_QUOTE"
)

func (enum TextQualifier) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TextQualifier) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type UserRole string

// Enum values for UserRole
const (
	UserRoleAdmin            UserRole = "ADMIN"
	UserRoleAuthor           UserRole = "AUTHOR"
	UserRoleReader           UserRole = "READER"
	UserRoleRestrictedAuthor UserRole = "RESTRICTED_AUTHOR"
	UserRoleRestrictedReader UserRole = "RESTRICTED_READER"
)

func (enum UserRole) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum UserRole) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
