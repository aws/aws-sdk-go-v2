// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package quicksight

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
)

const opUpdateIAMPolicyAssignment = "UpdateIAMPolicyAssignment"

// UpdateIAMPolicyAssignmentRequest returns a request value for making API operation for
// Amazon QuickSight.
//
// Updates an existing assignment. This operation updates only the optional
// parameter or parameters that are specified in the request.
//
// CLI syntax:
//
// aws quicksight update-iam-policy-assignment --aws-account-id=111122223333
// --assignment-name=FullAccessAssignment --assignment-status=DRAFT --policy-arns=arn:aws:iam::aws:policy/AdministratorAccess
// --identities="user=user-1,user-2,group=admin" --namespace=default --region=us-east-1
//
//    // Example sending a request using UpdateIAMPolicyAssignmentRequest.
//    req := client.UpdateIAMPolicyAssignmentRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/quicksight-2018-04-01/UpdateIAMPolicyAssignment
func (c *Client) UpdateIAMPolicyAssignmentRequest(input *types.UpdateIAMPolicyAssignmentInput) UpdateIAMPolicyAssignmentRequest {
	op := &aws.Operation{
		Name:       opUpdateIAMPolicyAssignment,
		HTTPMethod: "PUT",
		HTTPPath:   "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}",
	}

	if input == nil {
		input = &types.UpdateIAMPolicyAssignmentInput{}
	}

	req := c.newRequest(op, input, &types.UpdateIAMPolicyAssignmentOutput{})
	return UpdateIAMPolicyAssignmentRequest{Request: req, Input: input, Copy: c.UpdateIAMPolicyAssignmentRequest}
}

// UpdateIAMPolicyAssignmentRequest is the request type for the
// UpdateIAMPolicyAssignment API operation.
type UpdateIAMPolicyAssignmentRequest struct {
	*aws.Request
	Input *types.UpdateIAMPolicyAssignmentInput
	Copy  func(*types.UpdateIAMPolicyAssignmentInput) UpdateIAMPolicyAssignmentRequest
}

// Send marshals and sends the UpdateIAMPolicyAssignment API request.
func (r UpdateIAMPolicyAssignmentRequest) Send(ctx context.Context) (*UpdateIAMPolicyAssignmentResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateIAMPolicyAssignmentResponse{
		UpdateIAMPolicyAssignmentOutput: r.Request.Data.(*types.UpdateIAMPolicyAssignmentOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateIAMPolicyAssignmentResponse is the response type for the
// UpdateIAMPolicyAssignment API operation.
type UpdateIAMPolicyAssignmentResponse struct {
	*types.UpdateIAMPolicyAssignmentOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateIAMPolicyAssignment request.
func (r *UpdateIAMPolicyAssignmentResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
