// Code generated by smithy-go-codegen DO NOT EDIT.

package quicksight

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a theme. A theme is set of configuration options for color and layout.
// Themes apply to analyses and dashboards. For more information, see Using Themes
// in Amazon QuickSight
// (https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html)
// in the Amazon QuickSight User Guide.
func (c *Client) CreateTheme(ctx context.Context, params *CreateThemeInput, optFns ...func(*Options)) (*CreateThemeOutput, error) {
	stack := middleware.NewStack("CreateTheme", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateThemeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateThemeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateTheme(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateTheme",
			Err:           err,
		}
	}
	out := result.(*CreateThemeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateThemeInput struct {
	// An ID for the theme that you want to create. The theme ID is unique per AWS
	// Region in each AWS account.
	ThemeId *string
	// The ID of the theme that a custom theme will inherit from. All themes inherit
	// from one of the starting themes defined by Amazon QuickSight. For a list of the
	// starting themes, use ListThemes or choose Themes from within a QuickSight
	// analysis.
	BaseThemeId *string
	// A map of the key-value pairs for the resource tag or tags that you want to add
	// to the resource.
	Tags []*types.Tag
	// The ID of the AWS account where you want to store the new theme.
	AwsAccountId *string
	// A valid grouping of resource permissions to apply to the new theme.
	Permissions []*types.ResourcePermission
	// The theme configuration, which contains the theme display properties.
	Configuration *types.ThemeConfiguration
	// A display name for the theme.
	Name *string
	// A description of the first version of the theme that you're creating. Every time
	// UpdateTheme is called, a new version is created. Each version of the theme has a
	// description of the version in the VersionDescription field.
	VersionDescription *string
}

type CreateThemeOutput struct {
	// The ID of the theme.
	ThemeId *string
	// The AWS request ID for this operation.
	RequestId *string
	// The Amazon Resource Name (ARN) for the theme.
	Arn *string
	// The theme creation status.
	CreationStatus types.ResourceStatus
	// The Amazon Resource Name (ARN) for the new theme.
	VersionArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateThemeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateTheme{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateTheme{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateTheme(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "quicksight",
		OperationName: "CreateTheme",
	}
}
