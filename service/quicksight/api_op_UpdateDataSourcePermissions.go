// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package quicksight

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
)

const opUpdateDataSourcePermissions = "UpdateDataSourcePermissions"

// UpdateDataSourcePermissionsRequest returns a request value for making API operation for
// Amazon QuickSight.
//
// Updates the permissions to a data source.
//
// The permissions resource is arn:aws:quicksight:region:aws-account-id:datasource/data-source-id
//
// CLI syntax:
//
// aws quicksight update-data-source-permissions \
//
// --aws-account-id=111122223333 \
//
// --data-source-id=unique-data-source-id \
//
// --name='My Data Source' \
//
// --grant-permissions='[{"Principal":"arn:aws:quicksight:us-east-1:111122223333:user/default/user1","Actions":["quicksight:DescribeDataSource","quicksight:DescribeDataSourcePermissions","quicksight:PassDataSource"]}]'
// \
//
// --revoke-permissions='[{"Principal":"arn:aws:quicksight:us-east-1:111122223333:user/default/user2","Actions":["quicksight:UpdateDataSource","quicksight:DeleteDataSource","quicksight:UpdateDataSourcePermissions"]}]'
//
//    // Example sending a request using UpdateDataSourcePermissionsRequest.
//    req := client.UpdateDataSourcePermissionsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/quicksight-2018-04-01/UpdateDataSourcePermissions
func (c *Client) UpdateDataSourcePermissionsRequest(input *types.UpdateDataSourcePermissionsInput) UpdateDataSourcePermissionsRequest {
	op := &aws.Operation{
		Name:       opUpdateDataSourcePermissions,
		HTTPMethod: "POST",
		HTTPPath:   "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions",
	}

	if input == nil {
		input = &types.UpdateDataSourcePermissionsInput{}
	}

	req := c.newRequest(op, input, &types.UpdateDataSourcePermissionsOutput{})
	return UpdateDataSourcePermissionsRequest{Request: req, Input: input, Copy: c.UpdateDataSourcePermissionsRequest}
}

// UpdateDataSourcePermissionsRequest is the request type for the
// UpdateDataSourcePermissions API operation.
type UpdateDataSourcePermissionsRequest struct {
	*aws.Request
	Input *types.UpdateDataSourcePermissionsInput
	Copy  func(*types.UpdateDataSourcePermissionsInput) UpdateDataSourcePermissionsRequest
}

// Send marshals and sends the UpdateDataSourcePermissions API request.
func (r UpdateDataSourcePermissionsRequest) Send(ctx context.Context) (*UpdateDataSourcePermissionsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateDataSourcePermissionsResponse{
		UpdateDataSourcePermissionsOutput: r.Request.Data.(*types.UpdateDataSourcePermissionsOutput),
		response:                          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateDataSourcePermissionsResponse is the response type for the
// UpdateDataSourcePermissions API operation.
type UpdateDataSourcePermissionsResponse struct {
	*types.UpdateDataSourcePermissionsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateDataSourcePermissions request.
func (r *UpdateDataSourcePermissionsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
