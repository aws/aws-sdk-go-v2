// Code generated by smithy-go-codegen DO NOT EDIT.

package quicksight

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a customization for the Amazon QuickSight subscription associated with
// your AWS account.
func (c *Client) CreateAccountCustomization(ctx context.Context, params *CreateAccountCustomizationInput, optFns ...func(*Options)) (*CreateAccountCustomizationOutput, error) {
	if params == nil {
		params = &CreateAccountCustomizationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateAccountCustomization", params, optFns, addOperationCreateAccountCustomizationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateAccountCustomizationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateAccountCustomizationInput struct {

	// The customizations you're adding to the QuickSight subscription for the AWS
	// account. For example, you could add a default theme by setting
	// AccountCustomization to the midnight theme
	// (DefaultTheme="arn:aws:quicksight::aws:theme/MIDNIGHT") or to a custom theme
	// (DefaultTheme="arn:aws:quicksight:us-west-2:111122223333:theme/bdb844d0-0fe9-4d9d-b520-0fe602d93639").
	//
	// This member is required.
	AccountCustomization *types.AccountCustomization

	// The ID for the AWS account that you want to customize QuickSight for.
	//
	// This member is required.
	AwsAccountId *string

	// The namespace associated with the customization that you're creating.
	Namespace *string
}

type CreateAccountCustomizationOutput struct {

	// The customizations you're adding to the QuickSight subscription for the AWS
	// account.
	AccountCustomization *types.AccountCustomization

	// The ID for the AWS account that you want to customize QuickSight for.
	AwsAccountId *string

	// The namespace associated with the customization you're creating.
	Namespace *string

	// The AWS request ID for this operation.
	RequestId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateAccountCustomizationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateAccountCustomization{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateAccountCustomization{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateAccountCustomizationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateAccountCustomization(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opCreateAccountCustomization(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "quicksight",
		OperationName: "CreateAccountCustomization",
	}
}
