// Code generated by smithy-go-codegen DO NOT EDIT.

package quicksight

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a customization for the Amazon QuickSight subscription associated with
// your AWS account.
func (c *Client) CreateAccountCustomization(ctx context.Context, params *CreateAccountCustomizationInput, optFns ...func(*Options)) (*CreateAccountCustomizationOutput, error) {
	stack := middleware.NewStack("CreateAccountCustomization", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateAccountCustomizationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateAccountCustomizationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateAccountCustomization(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateAccountCustomization",
			Err:           err,
		}
	}
	out := result.(*CreateAccountCustomizationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateAccountCustomizationInput struct {
	// The namespace associated with the customization that you're creating.
	Namespace *string
	// The customizations you're adding to the QuickSight subscription for the AWS
	// account. For example, you could add a default theme by setting
	// AccountCustomization to the midnight theme
	// (DefaultTheme="arn:aws:quicksight::aws:theme/MIDNIGHT") or to a custom theme
	// (DefaultTheme="arn:aws:quicksight:us-west-2:111122223333:theme/bdb844d0-0fe9-4d9d-b520-0fe602d93639").
	AccountCustomization *types.AccountCustomization
	// The ID for the AWS account that you want to customize QuickSight for.
	AwsAccountId *string
}

type CreateAccountCustomizationOutput struct {
	// The AWS request ID for this operation.
	RequestId *string
	// The customizations you're adding to the QuickSight subscription for the AWS
	// account.
	AccountCustomization *types.AccountCustomization
	// The namespace associated with the customization you're creating.
	Namespace *string
	// The ID for the AWS account that you want to customize QuickSight for.
	AwsAccountId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateAccountCustomizationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateAccountCustomization{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateAccountCustomization{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateAccountCustomization(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "quicksight",
		OperationName: "CreateAccountCustomization",
	}
}
