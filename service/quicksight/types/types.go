// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// The Amazon QuickSight customizations associated with your AWS account or a
// QuickSight namespace in a specific AWS Region.
type AccountCustomization struct {

	// The default theme for this QuickSight subscription.
	DefaultTheme *string
}

// The QuickSight settings associated with your AWS account.
type AccountSettings struct {

	// The "account name" you provided for the QuickSight subscription in your AWS
	// account. You create this name when you sign up for QuickSight. It is unique in
	// all of AWS and it appears only in the console when users sign in.
	AccountName *string

	// The default QuickSight namespace for your AWS account.
	DefaultNamespace *string

	// The edition of QuickSight that you're currently subscribed to: Enterprise
	// edition or Standard edition.
	Edition Edition

	// The main notification email for your QuickSight subscription.
	NotificationEmail *string
}

// The active AWS Identity and Access Management (IAM) policy assignment.
type ActiveIAMPolicyAssignment struct {

	// A name for the IAM policy assignment.
	AssignmentName *string

	// The Amazon Resource Name (ARN) of the resource.
	PolicyArn *string
}

// Ad hoc (one-time) filtering option.
type AdHocFilteringOption struct {

	// Availability status.
	AvailabilityStatus DashboardBehavior
}

// Amazon Elasticsearch Service parameters.
type AmazonElasticsearchParameters struct {

	// The Amazon Elasticsearch Service domain.
	//
	// This member is required.
	Domain *string
}

// Metadata structure for an analysis in Amazon QuickSight
type Analysis struct {

	// The ID of the analysis.
	AnalysisId *string

	// The Amazon Resource Name (ARN) of the analysis.
	Arn *string

	// The time that the analysis was created.
	CreatedTime *time.Time

	// The ARNs of the datasets of the analysis.
	DataSetArns []*string

	// Errors associated with the analysis.
	Errors []*AnalysisError

	// The time that the analysis was last updated.
	LastUpdatedTime *time.Time

	// The descriptive name of the analysis.
	Name *string

	// A list of the associated sheets with the unique identifier and name of each
	// sheet.
	Sheets []*Sheet

	// Status associated with the analysis.
	Status ResourceStatus

	// The ARN of the theme of the analysis.
	ThemeArn *string
}

// A metadata error structure for an analysis.
type AnalysisError struct {

	// The message associated with the analysis error.
	Message *string

	// The type of the analysis error.
	Type AnalysisErrorType
}

// A filter that you apply when searching for one or more analyses.
type AnalysisSearchFilter struct {

	// The name of the value that you want to use as a filter, for example "Name":
	// "QUICKSIGHT_USER".
	Name AnalysisFilterAttribute

	// The comparison operator that you want to use as a filter, for example
	// "Operator": "StringEquals".
	Operator FilterOperator

	// The value of the named item, in this case QUICKSIGHT_USER, that you want to use
	// as a filter, for example "Value". An example is
	// "arn:aws:quicksight:us-east-1:1:user/default/UserName1".
	Value *string
}

// The source entity of an analysis.
type AnalysisSourceEntity struct {

	// The source template for the source entity of the analysis.
	SourceTemplate *AnalysisSourceTemplate
}

// The source template of an analysis.
type AnalysisSourceTemplate struct {

	// The Amazon Resource Name (ARN) of the source template of an analysis.
	//
	// This member is required.
	Arn *string

	// The dataset references of the source template of an analysis.
	//
	// This member is required.
	DataSetReferences []*DataSetReference
}

// The summary metadata that describes an analysis.
type AnalysisSummary struct {

	// The ID of the analysis. This ID displays in the URL.
	AnalysisId *string

	// The Amazon Resource Name (ARN) for the analysis.
	Arn *string

	// The time that the analysis was created.
	CreatedTime *time.Time

	// The time that the analysis was last updated.
	LastUpdatedTime *time.Time

	// The name of the analysis. This name is displayed in the QuickSight console.
	Name *string

	// The last known status for the analysis.
	Status ResourceStatus
}

// Amazon Athena parameters.
type AthenaParameters struct {

	// The workgroup that Amazon Athena uses.
	WorkGroup *string
}

// Amazon Aurora parameters.
type AuroraParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// Amazon Aurora with PostgreSQL compatibility parameters.
type AuroraPostgreSqlParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// AWS IoT Analytics parameters.
type AwsIotAnalyticsParameters struct {

	// Dataset name.
	//
	// This member is required.
	DataSetName *string
}

// The display options for tile borders for visuals.
type BorderStyle struct {

	// The option to enable display of borders for visuals.
	Show *bool
}

// A calculated column for a dataset.
type CalculatedColumn struct {

	// A unique ID to identify a calculated column. During a dataset update, if the
	// column ID of a calculated column matches that of an existing calculated column,
	// Amazon QuickSight preserves the existing calculated column.
	//
	// This member is required.
	ColumnId *string

	// Column name.
	//
	// This member is required.
	ColumnName *string

	// An expression that defines the calculated column.
	//
	// This member is required.
	Expression *string
}

// A transform operation that casts a column to a different type.
type CastColumnTypeOperation struct {

	// Column name.
	//
	// This member is required.
	ColumnName *string

	// New column data type.
	//
	// This member is required.
	NewColumnType ColumnDataType

	// When casting a column from string to datetime type, you can supply a string in a
	// format supported by Amazon QuickSight to denote the source data format.
	Format *string
}

// Metadata that contains a description for a column.
type ColumnDescription struct {

	// The text of a description for a column.
	Text *string
}

// Groupings of columns that work together in certain Amazon QuickSight features.
// This is a variant type structure. For this structure to be valid, only one of
// the attributes can be non-null.
type ColumnGroup struct {

	// Geospatial column group that denotes a hierarchy.
	GeoSpatialColumnGroup *GeoSpatialColumnGroup
}

// A structure describing the name, data type, and geographic role of the columns.
type ColumnGroupColumnSchema struct {

	// The name of the column group's column schema.
	Name *string
}

// The column group schema.
type ColumnGroupSchema struct {

	// A structure containing the list of schemas for column group columns.
	ColumnGroupColumnSchemaList []*ColumnGroupColumnSchema

	// The name of the column group schema.
	Name *string
}

// The column schema.
type ColumnSchema struct {

	// The data type of the column schema.
	DataType *string

	// The geographic role of the column schema.
	GeographicRole *string

	// The name of the column schema.
	Name *string
}

// A tag for a column in a TagColumnOperation structure. This is a variant type
// structure. For this structure to be valid, only one of the attributes can be
// non-null.
type ColumnTag struct {

	// A description for a column.
	ColumnDescription *ColumnDescription

	// A geospatial role for a column.
	ColumnGeographicRole GeoSpatialDataRole
}

// A transform operation that creates calculated columns. Columns created in one
// such operation form a lexical closure.
type CreateColumnsOperation struct {

	// Calculated columns to create.
	//
	// This member is required.
	Columns []*CalculatedColumn
}

// The combination of user name and password that are used as credentials.
type CredentialPair struct {

	// Password.
	//
	// This member is required.
	Password *string

	// User name.
	//
	// This member is required.
	Username *string

	// A set of alternate data source parameters that you want to share for these
	// credentials. The credentials are applied in tandem with the data source
	// parameters when you copy a data source by using a create or update request. The
	// API operation compares the DataSourceParameters structure that's in the request
	// with the structures in the AlternateDataSourceParameters allow list. If the
	// structures are an exact match, the request is allowed to use the new data source
	// with the existing credentials. If the AlternateDataSourceParameters list is
	// null, the DataSourceParameters originally used with these Credentials is
	// automatically allowed.
	AlternateDataSourceParameters []*DataSourceParameters
}

// A physical table type built from the results of the custom SQL query.
type CustomSql struct {

	// The Amazon Resource Name (ARN) of the data source.
	//
	// This member is required.
	DataSourceArn *string

	// A display name for the SQL query result.
	//
	// This member is required.
	Name *string

	// The SQL query.
	//
	// This member is required.
	SqlQuery *string

	// The column schema from the SQL query result set.
	Columns []*InputColumn
}

// Dashboard.
type Dashboard struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// The time that this dataset was created.
	CreatedTime *time.Time

	// Dashboard ID.
	DashboardId *string

	// The last time that this dataset was published.
	LastPublishedTime *time.Time

	// The last time that this dataset was updated.
	LastUpdatedTime *time.Time

	// A display name for the dashboard.
	Name *string

	// Version.
	Version *DashboardVersion
}

// Dashboard error.
type DashboardError struct {

	// Message.
	Message *string

	// Type.
	Type DashboardErrorType
}

// Dashboard publish options.
type DashboardPublishOptions struct {

	// Ad hoc (one-time) filtering option.
	AdHocFilteringOption *AdHocFilteringOption

	// Export to .csv option.
	ExportToCSVOption *ExportToCSVOption

	// Sheet controls option.
	SheetControlsOption *SheetControlsOption
}

// A filter that you apply when searching for dashboards.
type DashboardSearchFilter struct {

	// The comparison operator that you want to use as a filter, for example,
	// "Operator": "StringEquals".
	//
	// This member is required.
	Operator FilterOperator

	// The name of the value that you want to use as a filter, for example, "Name":
	// "QUICKSIGHT_USER".
	Name DashboardFilterAttribute

	// The value of the named item, in this case QUICKSIGHT_USER, that you want to use
	// as a filter, for example, "Value":
	// "arn:aws:quicksight:us-east-1:1:user/default/UserName1".
	Value *string
}

// Dashboard source entity.
type DashboardSourceEntity struct {

	// Source template.
	SourceTemplate *DashboardSourceTemplate
}

// Dashboard source template.
type DashboardSourceTemplate struct {

	// The Amazon Resource Name (ARN) of the resource.
	//
	// This member is required.
	Arn *string

	// Dataset references.
	//
	// This member is required.
	DataSetReferences []*DataSetReference
}

// Dashboard summary.
type DashboardSummary struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// The time that this dashboard was created.
	CreatedTime *time.Time

	// Dashboard ID.
	DashboardId *string

	// The last time that this dashboard was published.
	LastPublishedTime *time.Time

	// The last time that this dashboard was updated.
	LastUpdatedTime *time.Time

	// A display name for the dashboard.
	Name *string

	// Published version number.
	PublishedVersionNumber *int64
}

// Dashboard version.
type DashboardVersion struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// The time that this dashboard version was created.
	CreatedTime *time.Time

	// The Amazon Resource Numbers (ARNs) for the datasets that are associated with
	// this version of the dashboard.
	DataSetArns []*string

	// Description.
	Description *string

	// Errors associated with this dashboard version.
	Errors []*DashboardError

	// A list of the associated sheets with the unique identifier and name of each
	// sheet.
	Sheets []*Sheet

	// Source entity ARN.
	SourceEntityArn *string

	// The HTTP status of the request.
	Status ResourceStatus

	// The ARN of the theme associated with a version of the dashboard.
	ThemeArn *string

	// Version number for this version of the dashboard.
	VersionNumber *int64
}

// Dashboard version summary.
type DashboardVersionSummary struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// The time that this dashboard version was created.
	CreatedTime *time.Time

	// Description.
	Description *string

	// Source entity ARN.
	SourceEntityArn *string

	// The HTTP status of the request.
	Status ResourceStatus

	// Version number.
	VersionNumber *int64
}

// The theme colors that are used for data colors in charts. The colors description
// is a hexadecimal color code that consists of six alphanumerical characters,
// prefixed with #, for example #37BFF5.
type DataColorPalette struct {

	// The hexadecimal codes for the colors.
	Colors []*string

	// The hexadecimal code of a color that applies to charts where a lack of data is
	// highlighted.
	EmptyFillColor *string

	// The minimum and maximum hexadecimal codes that describe a color gradient.
	MinMaxGradient []*string
}

// Dataset.
type DataSet struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// Groupings of columns that work together in certain Amazon QuickSight features.
	// Currently, only geospatial hierarchy is supported.
	ColumnGroups []*ColumnGroup

	// The amount of SPICE capacity used by this dataset. This is 0 if the dataset
	// isn't imported into SPICE.
	ConsumedSpiceCapacityInBytes *int64

	// The time that this dataset was created.
	CreatedTime *time.Time

	// The ID of the dataset.
	DataSetId *string

	// Indicates whether you want to import the data into SPICE.
	ImportMode DataSetImportMode

	// The last time that this dataset was updated.
	LastUpdatedTime *time.Time

	// Configures the combination and transformation of the data from the physical
	// tables.
	LogicalTableMap map[string]*LogicalTable

	// A display name for the dataset.
	Name *string

	// The list of columns after all transforms. These columns are available in
	// templates, analyses, and dashboards.
	OutputColumns []*OutputColumn

	// Declares the physical tables that are available in the underlying data sources.
	PhysicalTableMap map[string]*PhysicalTable

	// The row-level security configuration for the dataset.
	RowLevelPermissionDataSet *RowLevelPermissionDataSet
}

// Dataset configuration.
type DataSetConfiguration struct {

	// A structure containing the list of column group schemas.
	ColumnGroupSchemaList []*ColumnGroupSchema

	// Dataset schema.
	DataSetSchema *DataSetSchema

	// Placeholder.
	Placeholder *string
}

// Dataset reference.
type DataSetReference struct {

	// Dataset Amazon Resource Name (ARN).
	//
	// This member is required.
	DataSetArn *string

	// Dataset placeholder.
	//
	// This member is required.
	DataSetPlaceholder *string
}

// Dataset schema.
type DataSetSchema struct {

	// A structure containing the list of column schemas.
	ColumnSchemaList []*ColumnSchema
}

// Dataset summary.
type DataSetSummary struct {

	// The Amazon Resource Name (ARN) of the dataset.
	Arn *string

	// The time that this dataset was created.
	CreatedTime *time.Time

	// The ID of the dataset.
	DataSetId *string

	// Indicates whether you want to import the data into SPICE.
	ImportMode DataSetImportMode

	// The last time that this dataset was updated.
	LastUpdatedTime *time.Time

	// A display name for the dataset.
	Name *string

	// The row-level security configuration for the dataset.
	RowLevelPermissionDataSet *RowLevelPermissionDataSet
}

// The structure of a data source.
type DataSource struct {

	// A set of alternate data source parameters that you want to share for the
	// credentials stored with this data source. The credentials are applied in tandem
	// with the data source parameters when you copy a data source by using a create or
	// update request. The API operation compares the DataSourceParameters structure
	// that's in the request with the structures in the AlternateDataSourceParameters
	// allow list. If the structures are an exact match, the request is allowed to use
	// the credentials from this existing data source. If the
	// AlternateDataSourceParameters list is null, the Credentials originally used with
	// this DataSourceParameters are automatically allowed.
	AlternateDataSourceParameters []*DataSourceParameters

	// The Amazon Resource Name (ARN) of the data source.
	Arn *string

	// The time that this data source was created.
	CreatedTime *time.Time

	// The ID of the data source. This ID is unique per AWS Region for each AWS
	// account.
	DataSourceId *string

	// The parameters that Amazon QuickSight uses to connect to your underlying source.
	// This is a variant type structure. For this structure to be valid, only one of
	// the attributes can be non-null.
	DataSourceParameters *DataSourceParameters

	// Error information from the last update or the creation of the data source.
	ErrorInfo *DataSourceErrorInfo

	// The last time that this data source was updated.
	LastUpdatedTime *time.Time

	// A display name for the data source.
	Name *string

	// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
	// underlying source.
	SslProperties *SslProperties

	// The HTTP status of the request.
	Status ResourceStatus

	// The type of the data source. This type indicates which database engine the data
	// source connects to.
	Type DataSourceType

	// The VPC connection information. You need to use this parameter only when you
	// want QuickSight to use a VPC connection when connecting to your underlying
	// source.
	VpcConnectionProperties *VpcConnectionProperties
}

// Data source credentials. This is a variant type structure. For this structure to
// be valid, only one of the attributes can be non-null.
type DataSourceCredentials struct {

	// The Amazon Resource Name (ARN) of a data source that has the credential pair
	// that you want to use. When CopySourceArn is not null, the credential pair from
	// the data source in the ARN is used as the credentials for the
	// DataSourceCredentials structure.
	CopySourceArn *string

	// Credential pair. For more information, see CredentialPair.
	CredentialPair *CredentialPair
}

// Error information for the data source creation or update.
type DataSourceErrorInfo struct {

	// Error message.
	Message *string

	// Error type.
	Type DataSourceErrorInfoType
}

// The parameters that Amazon QuickSight uses to connect to your underlying data
// source. This is a variant type structure. For this structure to be valid, only
// one of the attributes can be non-null.
type DataSourceParameters struct {

	// Amazon Elasticsearch Service parameters.
	AmazonElasticsearchParameters *AmazonElasticsearchParameters

	// Amazon Athena parameters.
	AthenaParameters *AthenaParameters

	// Amazon Aurora MySQL parameters.
	AuroraParameters *AuroraParameters

	// Aurora PostgreSQL parameters.
	AuroraPostgreSqlParameters *AuroraPostgreSqlParameters

	// AWS IoT Analytics parameters.
	AwsIotAnalyticsParameters *AwsIotAnalyticsParameters

	// Jira parameters.
	JiraParameters *JiraParameters

	// MariaDB parameters.
	MariaDbParameters *MariaDbParameters

	// MySQL parameters.
	MySqlParameters *MySqlParameters

	// PostgreSQL parameters.
	PostgreSqlParameters *PostgreSqlParameters

	// Presto parameters.
	PrestoParameters *PrestoParameters

	// Amazon RDS parameters.
	RdsParameters *RdsParameters

	// Amazon Redshift parameters.
	RedshiftParameters *RedshiftParameters

	// S3 parameters.
	S3Parameters *S3Parameters

	// ServiceNow parameters.
	ServiceNowParameters *ServiceNowParameters

	// Snowflake parameters.
	SnowflakeParameters *SnowflakeParameters

	// Spark parameters.
	SparkParameters *SparkParameters

	// SQL Server parameters.
	SqlServerParameters *SqlServerParameters

	// Teradata parameters.
	TeradataParameters *TeradataParameters

	// Twitter parameters.
	TwitterParameters *TwitterParameters
}

// A date-time parameter.
type DateTimeParameter struct {

	// A display name for the date-time parameter.
	//
	// This member is required.
	Name *string

	// The values for the date-time parameter.
	//
	// This member is required.
	Values []*time.Time
}

// A decimal parameter.
type DecimalParameter struct {

	// A display name for the decimal parameter.
	//
	// This member is required.
	Name *string

	// The values for the decimal parameter.
	//
	// This member is required.
	Values []*float64
}

// Error information for the SPICE ingestion of a dataset.
type ErrorInfo struct {

	// Error message.
	Message *string

	// Error type.
	Type IngestionErrorType
}

// Export to .csv option.
type ExportToCSVOption struct {

	// Availability status.
	AvailabilityStatus DashboardBehavior
}

// A transform operation that filters rows based on a condition.
type FilterOperation struct {

	// An expression that must evaluate to a Boolean value. Rows for which the
	// expression evaluates to true are kept in the dataset.
	//
	// This member is required.
	ConditionExpression *string
}

// Geospatial column group that denotes a hierarchy.
type GeoSpatialColumnGroup struct {

	// Columns in this hierarchy.
	//
	// This member is required.
	Columns []*string

	// Country code.
	//
	// This member is required.
	CountryCode GeoSpatialCountryCode

	// A display name for the hierarchy.
	//
	// This member is required.
	Name *string
}

// A group in Amazon QuickSight consists of a set of users. You can use groups to
// make it easier to manage access and security.
type Group struct {

	// The Amazon Resource Name (ARN) for the group.
	Arn *string

	// The group description.
	Description *string

	// The name of the group.
	GroupName *string

	// The principal ID of the group.
	PrincipalId *string
}

// A member of an Amazon QuickSight group. Currently, group members must be users.
// Groups can't be members of another group. .
type GroupMember struct {

	// The Amazon Resource Name (ARN) for the group member (user).
	Arn *string

	// The name of the group member (user).
	MemberName *string
}

// The display options for gutter spacing between tiles on a sheet.
type GutterStyle struct {

	// This Boolean value controls whether to display a gutter space between sheet
	// tiles.
	Show *bool
}

// An AWS Identity and Access Management (IAM) policy assignment.
type IAMPolicyAssignment struct {

	// Assignment ID.
	AssignmentId *string

	// Assignment name.
	AssignmentName *string

	// Assignment status.
	AssignmentStatus AssignmentStatus

	// The AWS account ID.
	AwsAccountId *string

	// Identities.
	Identities map[string][]*string

	// The Amazon Resource Name (ARN) for the IAM policy.
	PolicyArn *string
}

// IAM policy assignment summary.
type IAMPolicyAssignmentSummary struct {

	// Assignment name.
	AssignmentName *string

	// Assignment status.
	AssignmentStatus AssignmentStatus
}

// Information about the SPICE ingestion for a dataset.
type Ingestion struct {

	// The Amazon Resource Name (ARN) of the resource.
	//
	// This member is required.
	Arn *string

	// The time that this ingestion started.
	//
	// This member is required.
	CreatedTime *time.Time

	// Ingestion status.
	//
	// This member is required.
	IngestionStatus IngestionStatus

	// Error information for this ingestion.
	ErrorInfo *ErrorInfo

	// Ingestion ID.
	IngestionId *string

	// The size of the data ingested, in bytes.
	IngestionSizeInBytes *int64

	// The time that this ingestion took, measured in seconds.
	IngestionTimeInSeconds *int64

	// Information about a queued dataset SPICE ingestion.
	QueueInfo *QueueInfo

	// Event source for this ingestion.
	RequestSource IngestionRequestSource

	// Type of this ingestion.
	RequestType IngestionRequestType

	// Information about rows for a data set SPICE ingestion.
	RowInfo *RowInfo
}

// Metadata for a column that is used as the input of a transform operation.
type InputColumn struct {

	// The name of this column in the underlying data source.
	//
	// This member is required.
	Name *string

	// The data type of the column.
	//
	// This member is required.
	Type InputColumnDataType
}

// An integer parameter.
type IntegerParameter struct {

	// The name of the integer parameter.
	//
	// This member is required.
	Name *string

	// The values for the integer parameter.
	//
	// This member is required.
	Values []*int64
}

// Jira parameters.
type JiraParameters struct {

	// The base URL of the Jira site.
	//
	// This member is required.
	SiteBaseUrl *string
}

// Join instruction.
type JoinInstruction struct {

	// Left operand.
	//
	// This member is required.
	LeftOperand *string

	// On Clause.
	//
	// This member is required.
	OnClause *string

	// Right operand.
	//
	// This member is required.
	RightOperand *string

	// Type.
	//
	// This member is required.
	Type JoinType
}

// A logical table is a unit that joins and that data transformations operate on. A
// logical table has a source, which can be either a physical table or result of a
// join. When a logical table points to a physical table, the logical table acts as
// a mutable copy of that physical table through transform operations.
type LogicalTable struct {

	// A display name for the logical table.
	//
	// This member is required.
	Alias *string

	// Source of this logical table.
	//
	// This member is required.
	Source *LogicalTableSource

	// Transform operations that act on this logical table.
	DataTransforms []*TransformOperation
}

// Information about the source of a logical table. This is a variant type
// structure. For this structure to be valid, only one of the attributes can be
// non-null.
type LogicalTableSource struct {

	// Specifies the result of a join of two logical tables.
	JoinInstruction *JoinInstruction

	// Physical table ID.
	PhysicalTableId *string
}

// Amazon S3 manifest file location.
type ManifestFileLocation struct {

	// Amazon S3 bucket.
	//
	// This member is required.
	Bucket *string

	// Amazon S3 key that identifies an object.
	//
	// This member is required.
	Key *string
}

// The display options for margins around the outside edge of sheets.
type MarginStyle struct {

	// This Boolean value controls whether to display sheet margins.
	Show *bool
}

// MariaDB parameters.
type MariaDbParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// MySQL parameters.
type MySqlParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// Errors that occur during namespace creation.
type NamespaceError struct {

	// The message for the error.
	Message *string

	// The error type.
	Type NamespaceErrorType
}

// The error type.
type NamespaceInfoV2 struct {

	// The namespace ARN.
	Arn *string

	// The namespace AWS Region.
	CapacityRegion *string

	// The creation status of a namespace that is not yet completely created.
	CreationStatus NamespaceStatus

	// The identity store used for the namespace.
	IdentityStore IdentityStore

	// The name of the error.
	Name *string

	// An error that occurred when the namespace was created.
	NamespaceError *NamespaceError
}

// Output column.
type OutputColumn struct {

	// A description for a column.
	Description *string

	// A display name for the dataset.
	Name *string

	// Type.
	Type ColumnDataType
}

// A list of QuickSight parameters and the list's override values.
type Parameters struct {

	// Date-time parameters.
	DateTimeParameters []*DateTimeParameter

	// Decimal parameters.
	DecimalParameters []*DecimalParameter

	// Integer parameters.
	IntegerParameters []*IntegerParameter

	// String parameters.
	StringParameters []*StringParameter
}

// A view of a data source that contains information about the shape of the data in
// the underlying source. This is a variant type structure. For this structure to
// be valid, only one of the attributes can be non-null.
type PhysicalTable struct {

	// A physical table type built from the results of the custom SQL query.
	CustomSql *CustomSql

	// A physical table type for relational data sources.
	RelationalTable *RelationalTable

	// A physical table type for as S3 data source.
	S3Source *S3Source
}

// PostgreSQL parameters.
type PostgreSqlParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// Presto parameters.
type PrestoParameters struct {

	// Catalog.
	//
	// This member is required.
	Catalog *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// A transform operation that projects columns. Operations that come after a
// projection can only refer to projected columns.
type ProjectOperation struct {

	// Projected columns.
	//
	// This member is required.
	ProjectedColumns []*string
}

// Information about a queued dataset SPICE ingestion.
type QueueInfo struct {

	// The ID of the ongoing ingestion. The queued ingestion is waiting for the ongoing
	// ingestion to complete.
	//
	// This member is required.
	QueuedIngestion *string

	// The ID of the queued ingestion.
	//
	// This member is required.
	WaitingOnIngestion *string
}

// Amazon RDS parameters.
type RdsParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Instance ID.
	//
	// This member is required.
	InstanceId *string
}

// Amazon Redshift parameters. The ClusterId field can be blank if Host and Port
// are both set. The Host and Port fields can be blank if the ClusterId field is
// set.
type RedshiftParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Cluster ID. This field can be blank if the Host and Port are provided.
	ClusterId *string

	// Host. This field can be blank if ClusterId is provided.
	Host *string

	// Port. This field can be blank if the ClusterId is provided.
	Port *int32
}

// A physical table type for relational data sources.
type RelationalTable struct {

	// The Amazon Resource Name (ARN) for the data source.
	//
	// This member is required.
	DataSourceArn *string

	// The column schema of the table.
	//
	// This member is required.
	InputColumns []*InputColumn

	// The name of the relational table.
	//
	// This member is required.
	Name *string

	// The schema name. This name applies to certain relational database engines.
	Schema *string
}

// A transform operation that renames a column.
type RenameColumnOperation struct {

	// The name of the column to be renamed.
	//
	// This member is required.
	ColumnName *string

	// The new name for the column.
	//
	// This member is required.
	NewColumnName *string
}

// Permission for the resource.
type ResourcePermission struct {

	// The IAM action to grant or revoke permissions on, for example
	// "quicksight:DescribeDashboard".
	//
	// This member is required.
	Actions []*string

	// The Amazon Resource Name (ARN) of the principal. This can be one of the
	// following:
	//
	//     * The ARN of an Amazon QuickSight user or group associated with
	// a data source or dataset. (This is common.)
	//
	//     * The ARN of an Amazon
	// QuickSight user, group, or namespace associated with an analysis, dashboard,
	// template, or theme. (This is common.)
	//
	//     * The ARN of an AWS account root:
	// This is an IAM ARN rather than a QuickSight ARN. Use this option only to share
	// resources (templates) across AWS accounts. (This is less common.)
	//
	// This member is required.
	Principal *string
}

// Information about rows for a data set SPICE ingestion.
type RowInfo struct {

	// The number of rows that were not ingested.
	RowsDropped *int64

	// The number of rows that were ingested.
	RowsIngested *int64
}

// The row-level security configuration for the dataset.
type RowLevelPermissionDataSet struct {

	// The Amazon Resource Name (ARN) of the permission dataset.
	//
	// This member is required.
	Arn *string

	// Permission policy.
	//
	// This member is required.
	PermissionPolicy RowLevelPermissionPolicy

	// The namespace associated with the row-level permissions dataset.
	Namespace *string
}

// S3 parameters.
type S3Parameters struct {

	// Location of the Amazon S3 manifest file. This is NULL if the manifest file was
	// uploaded in the console.
	//
	// This member is required.
	ManifestFileLocation *ManifestFileLocation
}

// A physical table type for as S3 data source.
type S3Source struct {

	// The amazon Resource Name (ARN) for the data source.
	//
	// This member is required.
	DataSourceArn *string

	// A physical table type for as S3 data source.
	//
	// This member is required.
	InputColumns []*InputColumn

	// Information about the format for the S3 source file or files.
	UploadSettings *UploadSettings
}

// ServiceNow parameters.
type ServiceNowParameters struct {

	// URL of the base site.
	//
	// This member is required.
	SiteBaseUrl *string
}

// A sheet, which is an object that contains a set of visuals that are viewed
// together on one page in the Amazon QuickSight console. Every analysis and
// dashboard contains at least one sheet. Each sheet contains at least one
// visualization widget, for example a chart, pivot table, or narrative insight.
// Sheets can be associated with other components, such as controls, filters, and
// so on.
type Sheet struct {

	// The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
	// console.
	Name *string

	// The unique identifier associated with a sheet.
	SheetId *string
}

// Sheet controls option.
type SheetControlsOption struct {

	// Visibility state.
	VisibilityState DashboardUIState
}

// The theme display options for sheets.
type SheetStyle struct {

	// The display options for tiles.
	Tile *TileStyle

	// The layout options for tiles.
	TileLayout *TileLayoutStyle
}

// Snowflake parameters.
type SnowflakeParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Warehouse.
	//
	// This member is required.
	Warehouse *string
}

// Spark parameters.
type SparkParameters struct {

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// SQL Server parameters.
type SqlServerParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
// underlying data source.
type SslProperties struct {

	// A Boolean option to control whether SSL should be disabled.
	DisableSsl *bool
}

// A string parameter.
type StringParameter struct {

	// A display name for a string parameter.
	//
	// This member is required.
	Name *string

	// The values of a string parameter.
	//
	// This member is required.
	Values []*string
}

// The key or keys of the key-value pairs for the resource tag or tags assigned to
// the resource.
type Tag struct {

	// Tag key.
	//
	// This member is required.
	Key *string

	// Tag value.
	//
	// This member is required.
	Value *string
}

// A transform operation that tags a column with additional information.
type TagColumnOperation struct {

	// The column that this operation acts on.
	//
	// This member is required.
	ColumnName *string

	// The dataset column tag, currently only used for geospatial type tagging. . This
	// is not tags for the AWS tagging feature. .
	//
	// This member is required.
	Tags []*ColumnTag
}

// A template object. A template is an entity in QuickSight that encapsulates the
// metadata required to create an analysis and that you can use to create a
// dashboard. A template adds a layer of abstraction by using placeholders to
// replace the dataset associated with an analysis. You can use templates to create
// dashboards by replacing dataset placeholders with datasets that follow the same
// schema that was used to create the source analysis and template. You can share
// templates across AWS accounts by allowing users in other AWS accounts to create
// a template or a dashboard from an existing template.
type Template struct {

	// The Amazon Resource Name (ARN) of the template.
	Arn *string

	// Time when this was created.
	CreatedTime *time.Time

	// Time when this was last updated.
	LastUpdatedTime *time.Time

	// The display name of the template.
	Name *string

	// The ID for the template. This is unique per AWS Region for each AWS account.
	TemplateId *string

	// A structure describing the versions of the template.
	Version *TemplateVersion
}

// The template alias.
type TemplateAlias struct {

	// The display name of the template alias.
	AliasName *string

	// The Amazon Resource Name (ARN) of the template alias.
	Arn *string

	// The version number of the template alias.
	TemplateVersionNumber *int64
}

// List of errors that occurred when the template version creation failed.
type TemplateError struct {

	// Description of the error type.
	Message *string

	// Type of error.
	Type TemplateErrorType
}

// The source analysis of the template.
type TemplateSourceAnalysis struct {

	// The Amazon Resource Name (ARN) of the resource.
	//
	// This member is required.
	Arn *string

	// A structure containing information about the dataset references used as
	// placeholders in the template.
	//
	// This member is required.
	DataSetReferences []*DataSetReference
}

// The source entity of the template.
type TemplateSourceEntity struct {

	// The source analysis, if it is based on an analysis.
	SourceAnalysis *TemplateSourceAnalysis

	// The source template, if it is based on an template.
	SourceTemplate *TemplateSourceTemplate
}

// The source template of the template.
type TemplateSourceTemplate struct {

	// The Amazon Resource Name (ARN) of the resource.
	//
	// This member is required.
	Arn *string
}

// The template summary.
type TemplateSummary struct {

	// A summary of a template.
	Arn *string

	// The last time that this template was created.
	CreatedTime *time.Time

	// The last time that this template was updated.
	LastUpdatedTime *time.Time

	// A structure containing a list of version numbers for the template summary.
	LatestVersionNumber *int64

	// A display name for the template.
	Name *string

	// The ID of the template. This ID is unique per AWS Region for each AWS account.
	TemplateId *string
}

// A version of a template.
type TemplateVersion struct {

	// The time that this template version was created.
	CreatedTime *time.Time

	// Schema of the dataset identified by the placeholder. Any dashboard created from
	// this template should be bound to new datasets matching the same schema described
	// through this API operation.
	DataSetConfigurations []*DataSetConfiguration

	// The description of the template.
	Description *string

	// Errors associated with this template version.
	Errors []*TemplateError

	// A list of the associated sheets with the unique identifier and name of each
	// sheet.
	Sheets []*Sheet

	// The Amazon Resource Name (ARN) of an analysis or template that was used to
	// create this template.
	SourceEntityArn *string

	// The HTTP status of the request.
	Status ResourceStatus

	// The ARN of the theme associated with this version of the template.
	ThemeArn *string

	// The version number of the template version.
	VersionNumber *int64
}

// The template version.
type TemplateVersionSummary struct {

	// The Amazon Resource Name (ARN) of the template version.
	Arn *string

	// The time that this template version was created.
	CreatedTime *time.Time

	// The description of the template version.
	Description *string

	// The status of the template version.
	Status ResourceStatus

	// The version number of the template version.
	VersionNumber *int64
}

// Teradata parameters.
type TeradataParameters struct {

	// Database.
	//
	// This member is required.
	Database *string

	// Host.
	//
	// This member is required.
	Host *string

	// Port.
	//
	// This member is required.
	Port *int32
}

// Summary information about a theme.
type Theme struct {

	// The Amazon Resource Name (ARN) of the theme.
	Arn *string

	// The date and time that the theme was created.
	CreatedTime *time.Time

	// The date and time that the theme was last updated.
	LastUpdatedTime *time.Time

	// The name that the user gives to the theme.
	Name *string

	// The identifier that the user gives to the theme.
	ThemeId *string

	// The type of theme, based on how it was created. Valid values include: QUICKSIGHT
	// and CUSTOM.
	Type ThemeType

	// A version of a theme.
	Version *ThemeVersion
}

// An alias for a theme.
type ThemeAlias struct {

	// The display name of the theme alias.
	AliasName *string

	// The Amazon Resource Name (ARN) of the theme alias.
	Arn *string

	// The version number of the theme alias.
	ThemeVersionNumber *int64
}

// The theme configuration. This configuration contains all of the display
// properties for a theme.
type ThemeConfiguration struct {

	// Color properties that apply to chart data colors.
	DataColorPalette *DataColorPalette

	// Display options related to sheets.
	Sheet *SheetStyle

	// Color properties that apply to the UI and to charts, excluding the colors that
	// apply to data.
	UIColorPalette *UIColorPalette
}

// Theme error.
type ThemeError struct {

	// The error message.
	Message *string

	// The type of error.
	Type ThemeErrorType
}

// The theme summary.
type ThemeSummary struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// The date and time that this theme was created.
	CreatedTime *time.Time

	// The last date and time that this theme was updated.
	LastUpdatedTime *time.Time

	// The latest version number for the theme.
	LatestVersionNumber *int64

	// the display name for the theme.
	Name *string

	// The ID of the theme. This ID is unique per AWS Region for each AWS account.
	ThemeId *string
}

// A version of a theme.
type ThemeVersion struct {

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string

	// The Amazon QuickSight-defined ID of the theme that a custom theme inherits from.
	// All themes initially inherit from a default QuickSight theme.
	BaseThemeId *string

	// The theme configuration, which contains all the theme display properties.
	Configuration *ThemeConfiguration

	// The date and time that this theme version was created.
	CreatedTime *time.Time

	// The description of the theme.
	Description *string

	// Errors associated with the theme.
	Errors []*ThemeError

	// The status of the theme version.
	Status ResourceStatus

	// The version number of the theme.
	VersionNumber *int64
}

// The theme version.
type ThemeVersionSummary struct {

	// The Amazon Resource Name (ARN) of the theme version.
	Arn *string

	// The date and time that this theme version was created.
	CreatedTime *time.Time

	// The description of the theme version.
	Description *string

	// The status of the theme version.
	Status ResourceStatus

	// The version number of the theme version.
	VersionNumber *int64
}

// The display options for the layout of tiles on a sheet.
type TileLayoutStyle struct {

	// The gutter settings that apply between tiles.
	Gutter *GutterStyle

	// The margin settings that apply around the outside edge of sheets.
	Margin *MarginStyle
}

// Display options related to tiles on a sheet.
type TileStyle struct {

	// The border around a tile.
	Border *BorderStyle
}

// A data transformation on a logical table. This is a variant type structure. For
// this structure to be valid, only one of the attributes can be non-null.
type TransformOperation struct {

	// A transform operation that casts a column to a different type.
	CastColumnTypeOperation *CastColumnTypeOperation

	// An operation that creates calculated columns. Columns created in one such
	// operation form a lexical closure.
	CreateColumnsOperation *CreateColumnsOperation

	// An operation that filters rows based on some condition.
	FilterOperation *FilterOperation

	// An operation that projects columns. Operations that come after a projection can
	// only refer to projected columns.
	ProjectOperation *ProjectOperation

	// An operation that renames a column.
	RenameColumnOperation *RenameColumnOperation

	// An operation that tags a column with additional information.
	TagColumnOperation *TagColumnOperation
}

// Twitter parameters.
type TwitterParameters struct {

	// Maximum number of rows to query Twitter.
	//
	// This member is required.
	MaxRows *int32

	// Twitter query string.
	//
	// This member is required.
	Query *string
}

// The theme colors that apply to UI and to charts, excluding data colors. The
// colors description is a hexadecimal color code that consists of six
// alphanumerical characters, prefixed with #, for example #37BFF5. For more
// information, see Using Themes in Amazon QuickSight
// (https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html)
// in the Amazon QuickSight User Guide.
type UIColorPalette struct {

	// This color is that applies to selected states and buttons.
	Accent *string

	// The foreground color that applies to any text or other elements that appear over
	// the accent color.
	AccentForeground *string

	// The color that applies to error messages.
	Danger *string

	// The foreground color that applies to any text or other elements that appear over
	// the error color.
	DangerForeground *string

	// The color that applies to the names of fields that are identified as dimensions.
	Dimension *string

	// The foreground color that applies to any text or other elements that appear over
	// the dimension color.
	DimensionForeground *string

	// The color that applies to the names of fields that are identified as measures.
	Measure *string

	// The foreground color that applies to any text or other elements that appear over
	// the measure color.
	MeasureForeground *string

	// The background color that applies to visuals and other high emphasis UI.
	PrimaryBackground *string

	// The color of text and other foreground elements that appear over the primary
	// background regions, such as grid lines, borders, table banding, icons, and so
	// on.
	PrimaryForeground *string

	// The background color that applies to the sheet background and sheet controls.
	SecondaryBackground *string

	// The foreground color that applies to any sheet title, sheet control text, or UI
	// that appears over the secondary background.
	SecondaryForeground *string

	// The color that applies to success messages, for example the check mark for a
	// successful download.
	Success *string

	// The foreground color that applies to any text or other elements that appear over
	// the success color.
	SuccessForeground *string

	// This color that applies to warning and informational messages.
	Warning *string

	// The foreground color that applies to any text or other elements that appear over
	// the warning color.
	WarningForeground *string
}

// Information about the format for a source file or files.
type UploadSettings struct {

	// Whether the file has a header row, or the files each have a header row.
	ContainsHeader *bool

	// The delimiter between values in the file.
	Delimiter *string

	// File format.
	Format FileFormat

	// A row number to start reading data from.
	StartFromRow *int32

	// Text qualifier.
	TextQualifier TextQualifier
}

// A registered user of Amazon QuickSight.
type User struct {

	// The active status of user. When you create an Amazon QuickSight user that’s not
	// an IAM user or an Active Directory user, that user is inactive until they sign
	// in and provide a password.
	Active *bool

	// The Amazon Resource Name (ARN) for the user.
	Arn *string

	// The custom permissions profile associated with this user.
	CustomPermissionsName *string

	// The user's email address.
	Email *string

	// The type of identity authentication used by the user.
	IdentityType IdentityType

	// The principal ID of the user.
	PrincipalId *string

	// The Amazon QuickSight role for the user. The user role can be one of the
	// following:.
	//
	//     * READER: A user who has read-only access to dashboards.
	//
	//     *
	// AUTHOR: A user who can create data sources, datasets, analyses, and
	// dashboards.
	//
	//     * ADMIN: A user who is an author, who can also manage Amazon
	// QuickSight settings.
	//
	//     * RESTRICTED_READER: This role isn't currently
	// available for use.
	//
	//     * RESTRICTED_AUTHOR: This role isn't currently available
	// for use.
	Role UserRole

	// The user's user name.
	UserName *string
}

// VPC connection properties.
type VpcConnectionProperties struct {

	// The Amazon Resource Name (ARN) for the VPC connection.
	//
	// This member is required.
	VpcConnectionArn *string
}
