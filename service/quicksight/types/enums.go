// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AnalysisErrorType string

// Enum values for AnalysisErrorType
const (
	AnalysisErrorTypeAccess_denied                   AnalysisErrorType = "ACCESS_DENIED"
	AnalysisErrorTypeSource_not_found                AnalysisErrorType = "SOURCE_NOT_FOUND"
	AnalysisErrorTypeData_set_not_found              AnalysisErrorType = "DATA_SET_NOT_FOUND"
	AnalysisErrorTypeInternal_failure                AnalysisErrorType = "INTERNAL_FAILURE"
	AnalysisErrorTypeParameter_value_incompatible    AnalysisErrorType = "PARAMETER_VALUE_INCOMPATIBLE"
	AnalysisErrorTypeParameter_type_invalid          AnalysisErrorType = "PARAMETER_TYPE_INVALID"
	AnalysisErrorTypeParameter_not_found             AnalysisErrorType = "PARAMETER_NOT_FOUND"
	AnalysisErrorTypeColumn_type_mismatch            AnalysisErrorType = "COLUMN_TYPE_MISMATCH"
	AnalysisErrorTypeColumn_geographic_role_mismatch AnalysisErrorType = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
	AnalysisErrorTypeColumn_replacement_missing      AnalysisErrorType = "COLUMN_REPLACEMENT_MISSING"
)

// Values returns all known values for AnalysisErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AnalysisErrorType) Values() []AnalysisErrorType {
	return []AnalysisErrorType{
		"ACCESS_DENIED",
		"SOURCE_NOT_FOUND",
		"DATA_SET_NOT_FOUND",
		"INTERNAL_FAILURE",
		"PARAMETER_VALUE_INCOMPATIBLE",
		"PARAMETER_TYPE_INVALID",
		"PARAMETER_NOT_FOUND",
		"COLUMN_TYPE_MISMATCH",
		"COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
		"COLUMN_REPLACEMENT_MISSING",
	}
}

type AnalysisFilterAttribute string

// Enum values for AnalysisFilterAttribute
const (
	AnalysisFilterAttributeQuicksight_user AnalysisFilterAttribute = "QUICKSIGHT_USER"
)

// Values returns all known values for AnalysisFilterAttribute. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AnalysisFilterAttribute) Values() []AnalysisFilterAttribute {
	return []AnalysisFilterAttribute{
		"QUICKSIGHT_USER",
	}
}

type AssignmentStatus string

// Enum values for AssignmentStatus
const (
	AssignmentStatusEnabled  AssignmentStatus = "ENABLED"
	AssignmentStatusDraft    AssignmentStatus = "DRAFT"
	AssignmentStatusDisabled AssignmentStatus = "DISABLED"
)

// Values returns all known values for AssignmentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AssignmentStatus) Values() []AssignmentStatus {
	return []AssignmentStatus{
		"ENABLED",
		"DRAFT",
		"DISABLED",
	}
}

type ColumnDataType string

// Enum values for ColumnDataType
const (
	ColumnDataTypeString   ColumnDataType = "STRING"
	ColumnDataTypeInteger  ColumnDataType = "INTEGER"
	ColumnDataTypeDecimal  ColumnDataType = "DECIMAL"
	ColumnDataTypeDatetime ColumnDataType = "DATETIME"
)

// Values returns all known values for ColumnDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ColumnDataType) Values() []ColumnDataType {
	return []ColumnDataType{
		"STRING",
		"INTEGER",
		"DECIMAL",
		"DATETIME",
	}
}

type DashboardBehavior string

// Enum values for DashboardBehavior
const (
	DashboardBehaviorEnabled  DashboardBehavior = "ENABLED"
	DashboardBehaviorDisabled DashboardBehavior = "DISABLED"
)

// Values returns all known values for DashboardBehavior. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DashboardBehavior) Values() []DashboardBehavior {
	return []DashboardBehavior{
		"ENABLED",
		"DISABLED",
	}
}

type DashboardErrorType string

// Enum values for DashboardErrorType
const (
	DashboardErrorTypeAccess_denied                   DashboardErrorType = "ACCESS_DENIED"
	DashboardErrorTypeSource_not_found                DashboardErrorType = "SOURCE_NOT_FOUND"
	DashboardErrorTypeData_set_not_found              DashboardErrorType = "DATA_SET_NOT_FOUND"
	DashboardErrorTypeInternal_failure                DashboardErrorType = "INTERNAL_FAILURE"
	DashboardErrorTypeParameter_value_incompatible    DashboardErrorType = "PARAMETER_VALUE_INCOMPATIBLE"
	DashboardErrorTypeParameter_type_invalid          DashboardErrorType = "PARAMETER_TYPE_INVALID"
	DashboardErrorTypeParameter_not_found             DashboardErrorType = "PARAMETER_NOT_FOUND"
	DashboardErrorTypeColumn_type_mismatch            DashboardErrorType = "COLUMN_TYPE_MISMATCH"
	DashboardErrorTypeColumn_geographic_role_mismatch DashboardErrorType = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
	DashboardErrorTypeColumn_replacement_missing      DashboardErrorType = "COLUMN_REPLACEMENT_MISSING"
)

// Values returns all known values for DashboardErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DashboardErrorType) Values() []DashboardErrorType {
	return []DashboardErrorType{
		"ACCESS_DENIED",
		"SOURCE_NOT_FOUND",
		"DATA_SET_NOT_FOUND",
		"INTERNAL_FAILURE",
		"PARAMETER_VALUE_INCOMPATIBLE",
		"PARAMETER_TYPE_INVALID",
		"PARAMETER_NOT_FOUND",
		"COLUMN_TYPE_MISMATCH",
		"COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
		"COLUMN_REPLACEMENT_MISSING",
	}
}

type DashboardFilterAttribute string

// Enum values for DashboardFilterAttribute
const (
	DashboardFilterAttributeQuicksight_user DashboardFilterAttribute = "QUICKSIGHT_USER"
)

// Values returns all known values for DashboardFilterAttribute. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DashboardFilterAttribute) Values() []DashboardFilterAttribute {
	return []DashboardFilterAttribute{
		"QUICKSIGHT_USER",
	}
}

type DashboardUIState string

// Enum values for DashboardUIState
const (
	DashboardUIStateExpanded  DashboardUIState = "EXPANDED"
	DashboardUIStateCollapsed DashboardUIState = "COLLAPSED"
)

// Values returns all known values for DashboardUIState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DashboardUIState) Values() []DashboardUIState {
	return []DashboardUIState{
		"EXPANDED",
		"COLLAPSED",
	}
}

type DataSetImportMode string

// Enum values for DataSetImportMode
const (
	DataSetImportModeSpice        DataSetImportMode = "SPICE"
	DataSetImportModeDirect_query DataSetImportMode = "DIRECT_QUERY"
)

// Values returns all known values for DataSetImportMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DataSetImportMode) Values() []DataSetImportMode {
	return []DataSetImportMode{
		"SPICE",
		"DIRECT_QUERY",
	}
}

type DataSourceErrorInfoType string

// Enum values for DataSourceErrorInfoType
const (
	DataSourceErrorInfoTypeAccess_denied                DataSourceErrorInfoType = "ACCESS_DENIED"
	DataSourceErrorInfoTypeCopy_source_not_found        DataSourceErrorInfoType = "COPY_SOURCE_NOT_FOUND"
	DataSourceErrorInfoTypeTimeout                      DataSourceErrorInfoType = "TIMEOUT"
	DataSourceErrorInfoTypeEngine_version_not_supported DataSourceErrorInfoType = "ENGINE_VERSION_NOT_SUPPORTED"
	DataSourceErrorInfoTypeUnknown_host                 DataSourceErrorInfoType = "UNKNOWN_HOST"
	DataSourceErrorInfoTypeGeneric_sql_failure          DataSourceErrorInfoType = "GENERIC_SQL_FAILURE"
	DataSourceErrorInfoTypeConflict                     DataSourceErrorInfoType = "CONFLICT"
	DataSourceErrorInfoTypeUnknown                      DataSourceErrorInfoType = "UNKNOWN"
)

// Values returns all known values for DataSourceErrorInfoType. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DataSourceErrorInfoType) Values() []DataSourceErrorInfoType {
	return []DataSourceErrorInfoType{
		"ACCESS_DENIED",
		"COPY_SOURCE_NOT_FOUND",
		"TIMEOUT",
		"ENGINE_VERSION_NOT_SUPPORTED",
		"UNKNOWN_HOST",
		"GENERIC_SQL_FAILURE",
		"CONFLICT",
		"UNKNOWN",
	}
}

type DataSourceType string

// Enum values for DataSourceType
const (
	DataSourceTypeAdobe_analytics      DataSourceType = "ADOBE_ANALYTICS"
	DataSourceTypeAmazon_elasticsearch DataSourceType = "AMAZON_ELASTICSEARCH"
	DataSourceTypeAthena               DataSourceType = "ATHENA"
	DataSourceTypeAurora               DataSourceType = "AURORA"
	DataSourceTypeAurora_postgresql    DataSourceType = "AURORA_POSTGRESQL"
	DataSourceTypeAws_iot_analytics    DataSourceType = "AWS_IOT_ANALYTICS"
	DataSourceTypeGithub               DataSourceType = "GITHUB"
	DataSourceTypeJira                 DataSourceType = "JIRA"
	DataSourceTypeMariadb              DataSourceType = "MARIADB"
	DataSourceTypeMysql                DataSourceType = "MYSQL"
	DataSourceTypePostgresql           DataSourceType = "POSTGRESQL"
	DataSourceTypePresto               DataSourceType = "PRESTO"
	DataSourceTypeRedshift             DataSourceType = "REDSHIFT"
	DataSourceTypeS3                   DataSourceType = "S3"
	DataSourceTypeSalesforce           DataSourceType = "SALESFORCE"
	DataSourceTypeServicenow           DataSourceType = "SERVICENOW"
	DataSourceTypeSnowflake            DataSourceType = "SNOWFLAKE"
	DataSourceTypeSpark                DataSourceType = "SPARK"
	DataSourceTypeSqlserver            DataSourceType = "SQLSERVER"
	DataSourceTypeTeradata             DataSourceType = "TERADATA"
	DataSourceTypeTwitter              DataSourceType = "TWITTER"
	DataSourceTypeTimestream           DataSourceType = "TIMESTREAM"
)

// Values returns all known values for DataSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DataSourceType) Values() []DataSourceType {
	return []DataSourceType{
		"ADOBE_ANALYTICS",
		"AMAZON_ELASTICSEARCH",
		"ATHENA",
		"AURORA",
		"AURORA_POSTGRESQL",
		"AWS_IOT_ANALYTICS",
		"GITHUB",
		"JIRA",
		"MARIADB",
		"MYSQL",
		"POSTGRESQL",
		"PRESTO",
		"REDSHIFT",
		"S3",
		"SALESFORCE",
		"SERVICENOW",
		"SNOWFLAKE",
		"SPARK",
		"SQLSERVER",
		"TERADATA",
		"TWITTER",
		"TIMESTREAM",
	}
}

type Edition string

// Enum values for Edition
const (
	EditionStandard   Edition = "STANDARD"
	EditionEnterprise Edition = "ENTERPRISE"
)

// Values returns all known values for Edition. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Edition) Values() []Edition {
	return []Edition{
		"STANDARD",
		"ENTERPRISE",
	}
}

type ExceptionResourceType string

// Enum values for ExceptionResourceType
const (
	ExceptionResourceTypeUser                 ExceptionResourceType = "USER"
	ExceptionResourceTypeGroup                ExceptionResourceType = "GROUP"
	ExceptionResourceTypeNamespace            ExceptionResourceType = "NAMESPACE"
	ExceptionResourceTypeAccount_settings     ExceptionResourceType = "ACCOUNT_SETTINGS"
	ExceptionResourceTypeIampolicy_assignment ExceptionResourceType = "IAMPOLICY_ASSIGNMENT"
	ExceptionResourceTypeData_source          ExceptionResourceType = "DATA_SOURCE"
	ExceptionResourceTypeData_set             ExceptionResourceType = "DATA_SET"
	ExceptionResourceTypeVpc_connection       ExceptionResourceType = "VPC_CONNECTION"
	ExceptionResourceTypeIngestion            ExceptionResourceType = "INGESTION"
)

// Values returns all known values for ExceptionResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ExceptionResourceType) Values() []ExceptionResourceType {
	return []ExceptionResourceType{
		"USER",
		"GROUP",
		"NAMESPACE",
		"ACCOUNT_SETTINGS",
		"IAMPOLICY_ASSIGNMENT",
		"DATA_SOURCE",
		"DATA_SET",
		"VPC_CONNECTION",
		"INGESTION",
	}
}

type FileFormat string

// Enum values for FileFormat
const (
	FileFormatCsv  FileFormat = "CSV"
	FileFormatTsv  FileFormat = "TSV"
	FileFormatClf  FileFormat = "CLF"
	FileFormatElf  FileFormat = "ELF"
	FileFormatXlsx FileFormat = "XLSX"
	FileFormatJson FileFormat = "JSON"
)

// Values returns all known values for FileFormat. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (FileFormat) Values() []FileFormat {
	return []FileFormat{
		"CSV",
		"TSV",
		"CLF",
		"ELF",
		"XLSX",
		"JSON",
	}
}

type FilterOperator string

// Enum values for FilterOperator
const (
	FilterOperatorStringequals FilterOperator = "StringEquals"
)

// Values returns all known values for FilterOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (FilterOperator) Values() []FilterOperator {
	return []FilterOperator{
		"StringEquals",
	}
}

type GeoSpatialCountryCode string

// Enum values for GeoSpatialCountryCode
const (
	GeoSpatialCountryCodeUs GeoSpatialCountryCode = "US"
)

// Values returns all known values for GeoSpatialCountryCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (GeoSpatialCountryCode) Values() []GeoSpatialCountryCode {
	return []GeoSpatialCountryCode{
		"US",
	}
}

type GeoSpatialDataRole string

// Enum values for GeoSpatialDataRole
const (
	GeoSpatialDataRoleCountry   GeoSpatialDataRole = "COUNTRY"
	GeoSpatialDataRoleState     GeoSpatialDataRole = "STATE"
	GeoSpatialDataRoleCounty    GeoSpatialDataRole = "COUNTY"
	GeoSpatialDataRoleCity      GeoSpatialDataRole = "CITY"
	GeoSpatialDataRolePostcode  GeoSpatialDataRole = "POSTCODE"
	GeoSpatialDataRoleLongitude GeoSpatialDataRole = "LONGITUDE"
	GeoSpatialDataRoleLatitude  GeoSpatialDataRole = "LATITUDE"
)

// Values returns all known values for GeoSpatialDataRole. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (GeoSpatialDataRole) Values() []GeoSpatialDataRole {
	return []GeoSpatialDataRole{
		"COUNTRY",
		"STATE",
		"COUNTY",
		"CITY",
		"POSTCODE",
		"LONGITUDE",
		"LATITUDE",
	}
}

type IdentityStore string

// Enum values for IdentityStore
const (
	IdentityStoreQuicksight IdentityStore = "QUICKSIGHT"
)

// Values returns all known values for IdentityStore. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IdentityStore) Values() []IdentityStore {
	return []IdentityStore{
		"QUICKSIGHT",
	}
}

type IdentityType string

// Enum values for IdentityType
const (
	IdentityTypeIam        IdentityType = "IAM"
	IdentityTypeQuicksight IdentityType = "QUICKSIGHT"
)

// Values returns all known values for IdentityType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (IdentityType) Values() []IdentityType {
	return []IdentityType{
		"IAM",
		"QUICKSIGHT",
	}
}

type IngestionErrorType string

// Enum values for IngestionErrorType
const (
	IngestionErrorTypeFailure_to_assume_role             IngestionErrorType = "FAILURE_TO_ASSUME_ROLE"
	IngestionErrorTypeIngestion_superseded               IngestionErrorType = "INGESTION_SUPERSEDED"
	IngestionErrorTypeIngestion_canceled                 IngestionErrorType = "INGESTION_CANCELED"
	IngestionErrorTypeData_set_deleted                   IngestionErrorType = "DATA_SET_DELETED"
	IngestionErrorTypeData_set_not_spice                 IngestionErrorType = "DATA_SET_NOT_SPICE"
	IngestionErrorTypeS3_uploaded_file_deleted           IngestionErrorType = "S3_UPLOADED_FILE_DELETED"
	IngestionErrorTypeS3_manifest_error                  IngestionErrorType = "S3_MANIFEST_ERROR"
	IngestionErrorTypeData_tolerance_exception           IngestionErrorType = "DATA_TOLERANCE_EXCEPTION"
	IngestionErrorTypeSpice_table_not_found              IngestionErrorType = "SPICE_TABLE_NOT_FOUND"
	IngestionErrorTypeData_set_size_limit_exceeded       IngestionErrorType = "DATA_SET_SIZE_LIMIT_EXCEEDED"
	IngestionErrorTypeRow_size_limit_exceeded            IngestionErrorType = "ROW_SIZE_LIMIT_EXCEEDED"
	IngestionErrorTypeAccount_capacity_limit_exceeded    IngestionErrorType = "ACCOUNT_CAPACITY_LIMIT_EXCEEDED"
	IngestionErrorTypeCustomer_error                     IngestionErrorType = "CUSTOMER_ERROR"
	IngestionErrorTypeData_source_not_found              IngestionErrorType = "DATA_SOURCE_NOT_FOUND"
	IngestionErrorTypeIam_role_not_available             IngestionErrorType = "IAM_ROLE_NOT_AVAILABLE"
	IngestionErrorTypeConnection_failure                 IngestionErrorType = "CONNECTION_FAILURE"
	IngestionErrorTypeSql_table_not_found                IngestionErrorType = "SQL_TABLE_NOT_FOUND"
	IngestionErrorTypePermission_denied                  IngestionErrorType = "PERMISSION_DENIED"
	IngestionErrorTypeSsl_certificate_validation_failure IngestionErrorType = "SSL_CERTIFICATE_VALIDATION_FAILURE"
	IngestionErrorTypeOauth_token_failure                IngestionErrorType = "OAUTH_TOKEN_FAILURE"
	IngestionErrorTypeSource_api_limit_exceeded_failure  IngestionErrorType = "SOURCE_API_LIMIT_EXCEEDED_FAILURE"
	IngestionErrorTypePassword_authentication_failure    IngestionErrorType = "PASSWORD_AUTHENTICATION_FAILURE"
	IngestionErrorTypeSql_schema_mismatch_error          IngestionErrorType = "SQL_SCHEMA_MISMATCH_ERROR"
	IngestionErrorTypeInvalid_date_format                IngestionErrorType = "INVALID_DATE_FORMAT"
	IngestionErrorTypeInvalid_dataprep_syntax            IngestionErrorType = "INVALID_DATAPREP_SYNTAX"
	IngestionErrorTypeSource_resource_limit_exceeded     IngestionErrorType = "SOURCE_RESOURCE_LIMIT_EXCEEDED"
	IngestionErrorTypeSql_invalid_parameter_value        IngestionErrorType = "SQL_INVALID_PARAMETER_VALUE"
	IngestionErrorTypeQuery_timeout                      IngestionErrorType = "QUERY_TIMEOUT"
	IngestionErrorTypeSql_numeric_overflow               IngestionErrorType = "SQL_NUMERIC_OVERFLOW"
	IngestionErrorTypeUnresolvable_host                  IngestionErrorType = "UNRESOLVABLE_HOST"
	IngestionErrorTypeUnroutable_host                    IngestionErrorType = "UNROUTABLE_HOST"
	IngestionErrorTypeSql_exception                      IngestionErrorType = "SQL_EXCEPTION"
	IngestionErrorTypeS3_file_inaccessible               IngestionErrorType = "S3_FILE_INACCESSIBLE"
	IngestionErrorTypeIot_file_not_found                 IngestionErrorType = "IOT_FILE_NOT_FOUND"
	IngestionErrorTypeIot_data_set_file_empty            IngestionErrorType = "IOT_DATA_SET_FILE_EMPTY"
	IngestionErrorTypeInvalid_data_source_config         IngestionErrorType = "INVALID_DATA_SOURCE_CONFIG"
	IngestionErrorTypeData_source_auth_failed            IngestionErrorType = "DATA_SOURCE_AUTH_FAILED"
	IngestionErrorTypeData_source_connection_failed      IngestionErrorType = "DATA_SOURCE_CONNECTION_FAILED"
	IngestionErrorTypeFailure_to_process_json_file       IngestionErrorType = "FAILURE_TO_PROCESS_JSON_FILE"
	IngestionErrorTypeInternal_service_error             IngestionErrorType = "INTERNAL_SERVICE_ERROR"
)

// Values returns all known values for IngestionErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IngestionErrorType) Values() []IngestionErrorType {
	return []IngestionErrorType{
		"FAILURE_TO_ASSUME_ROLE",
		"INGESTION_SUPERSEDED",
		"INGESTION_CANCELED",
		"DATA_SET_DELETED",
		"DATA_SET_NOT_SPICE",
		"S3_UPLOADED_FILE_DELETED",
		"S3_MANIFEST_ERROR",
		"DATA_TOLERANCE_EXCEPTION",
		"SPICE_TABLE_NOT_FOUND",
		"DATA_SET_SIZE_LIMIT_EXCEEDED",
		"ROW_SIZE_LIMIT_EXCEEDED",
		"ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
		"CUSTOMER_ERROR",
		"DATA_SOURCE_NOT_FOUND",
		"IAM_ROLE_NOT_AVAILABLE",
		"CONNECTION_FAILURE",
		"SQL_TABLE_NOT_FOUND",
		"PERMISSION_DENIED",
		"SSL_CERTIFICATE_VALIDATION_FAILURE",
		"OAUTH_TOKEN_FAILURE",
		"SOURCE_API_LIMIT_EXCEEDED_FAILURE",
		"PASSWORD_AUTHENTICATION_FAILURE",
		"SQL_SCHEMA_MISMATCH_ERROR",
		"INVALID_DATE_FORMAT",
		"INVALID_DATAPREP_SYNTAX",
		"SOURCE_RESOURCE_LIMIT_EXCEEDED",
		"SQL_INVALID_PARAMETER_VALUE",
		"QUERY_TIMEOUT",
		"SQL_NUMERIC_OVERFLOW",
		"UNRESOLVABLE_HOST",
		"UNROUTABLE_HOST",
		"SQL_EXCEPTION",
		"S3_FILE_INACCESSIBLE",
		"IOT_FILE_NOT_FOUND",
		"IOT_DATA_SET_FILE_EMPTY",
		"INVALID_DATA_SOURCE_CONFIG",
		"DATA_SOURCE_AUTH_FAILED",
		"DATA_SOURCE_CONNECTION_FAILED",
		"FAILURE_TO_PROCESS_JSON_FILE",
		"INTERNAL_SERVICE_ERROR",
	}
}

type IngestionRequestSource string

// Enum values for IngestionRequestSource
const (
	IngestionRequestSourceManual    IngestionRequestSource = "MANUAL"
	IngestionRequestSourceScheduled IngestionRequestSource = "SCHEDULED"
)

// Values returns all known values for IngestionRequestSource. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IngestionRequestSource) Values() []IngestionRequestSource {
	return []IngestionRequestSource{
		"MANUAL",
		"SCHEDULED",
	}
}

type IngestionRequestType string

// Enum values for IngestionRequestType
const (
	IngestionRequestTypeInitial_ingestion   IngestionRequestType = "INITIAL_INGESTION"
	IngestionRequestTypeEdit                IngestionRequestType = "EDIT"
	IngestionRequestTypeIncremental_refresh IngestionRequestType = "INCREMENTAL_REFRESH"
	IngestionRequestTypeFull_refresh        IngestionRequestType = "FULL_REFRESH"
)

// Values returns all known values for IngestionRequestType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IngestionRequestType) Values() []IngestionRequestType {
	return []IngestionRequestType{
		"INITIAL_INGESTION",
		"EDIT",
		"INCREMENTAL_REFRESH",
		"FULL_REFRESH",
	}
}

type IngestionStatus string

// Enum values for IngestionStatus
const (
	IngestionStatusInitialized IngestionStatus = "INITIALIZED"
	IngestionStatusQueued      IngestionStatus = "QUEUED"
	IngestionStatusRunning     IngestionStatus = "RUNNING"
	IngestionStatusFailed      IngestionStatus = "FAILED"
	IngestionStatusCompleted   IngestionStatus = "COMPLETED"
	IngestionStatusCancelled   IngestionStatus = "CANCELLED"
)

// Values returns all known values for IngestionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IngestionStatus) Values() []IngestionStatus {
	return []IngestionStatus{
		"INITIALIZED",
		"QUEUED",
		"RUNNING",
		"FAILED",
		"COMPLETED",
		"CANCELLED",
	}
}

type InputColumnDataType string

// Enum values for InputColumnDataType
const (
	InputColumnDataTypeString   InputColumnDataType = "STRING"
	InputColumnDataTypeInteger  InputColumnDataType = "INTEGER"
	InputColumnDataTypeDecimal  InputColumnDataType = "DECIMAL"
	InputColumnDataTypeDatetime InputColumnDataType = "DATETIME"
	InputColumnDataTypeBit      InputColumnDataType = "BIT"
	InputColumnDataTypeBoolean  InputColumnDataType = "BOOLEAN"
	InputColumnDataTypeJson     InputColumnDataType = "JSON"
)

// Values returns all known values for InputColumnDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InputColumnDataType) Values() []InputColumnDataType {
	return []InputColumnDataType{
		"STRING",
		"INTEGER",
		"DECIMAL",
		"DATETIME",
		"BIT",
		"BOOLEAN",
		"JSON",
	}
}

type JoinType string

// Enum values for JoinType
const (
	JoinTypeInner JoinType = "INNER"
	JoinTypeOuter JoinType = "OUTER"
	JoinTypeLeft  JoinType = "LEFT"
	JoinTypeRight JoinType = "RIGHT"
)

// Values returns all known values for JoinType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (JoinType) Values() []JoinType {
	return []JoinType{
		"INNER",
		"OUTER",
		"LEFT",
		"RIGHT",
	}
}

type NamespaceErrorType string

// Enum values for NamespaceErrorType
const (
	NamespaceErrorTypePermission_denied      NamespaceErrorType = "PERMISSION_DENIED"
	NamespaceErrorTypeInternal_service_error NamespaceErrorType = "INTERNAL_SERVICE_ERROR"
)

// Values returns all known values for NamespaceErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NamespaceErrorType) Values() []NamespaceErrorType {
	return []NamespaceErrorType{
		"PERMISSION_DENIED",
		"INTERNAL_SERVICE_ERROR",
	}
}

type NamespaceStatus string

// Enum values for NamespaceStatus
const (
	NamespaceStatusCreated               NamespaceStatus = "CREATED"
	NamespaceStatusCreating              NamespaceStatus = "CREATING"
	NamespaceStatusDeleting              NamespaceStatus = "DELETING"
	NamespaceStatusRetryable_failure     NamespaceStatus = "RETRYABLE_FAILURE"
	NamespaceStatusNon_retryable_failure NamespaceStatus = "NON_RETRYABLE_FAILURE"
)

// Values returns all known values for NamespaceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NamespaceStatus) Values() []NamespaceStatus {
	return []NamespaceStatus{
		"CREATED",
		"CREATING",
		"DELETING",
		"RETRYABLE_FAILURE",
		"NON_RETRYABLE_FAILURE",
	}
}

type ResourceStatus string

// Enum values for ResourceStatus
const (
	ResourceStatusCreation_in_progress ResourceStatus = "CREATION_IN_PROGRESS"
	ResourceStatusCreation_successful  ResourceStatus = "CREATION_SUCCESSFUL"
	ResourceStatusCreation_failed      ResourceStatus = "CREATION_FAILED"
	ResourceStatusUpdate_in_progress   ResourceStatus = "UPDATE_IN_PROGRESS"
	ResourceStatusUpdate_successful    ResourceStatus = "UPDATE_SUCCESSFUL"
	ResourceStatusUpdate_failed        ResourceStatus = "UPDATE_FAILED"
	ResourceStatusDeleted              ResourceStatus = "DELETED"
)

// Values returns all known values for ResourceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ResourceStatus) Values() []ResourceStatus {
	return []ResourceStatus{
		"CREATION_IN_PROGRESS",
		"CREATION_SUCCESSFUL",
		"CREATION_FAILED",
		"UPDATE_IN_PROGRESS",
		"UPDATE_SUCCESSFUL",
		"UPDATE_FAILED",
		"DELETED",
	}
}

type RowLevelPermissionPolicy string

// Enum values for RowLevelPermissionPolicy
const (
	RowLevelPermissionPolicyGrant_access RowLevelPermissionPolicy = "GRANT_ACCESS"
	RowLevelPermissionPolicyDeny_access  RowLevelPermissionPolicy = "DENY_ACCESS"
)

// Values returns all known values for RowLevelPermissionPolicy. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RowLevelPermissionPolicy) Values() []RowLevelPermissionPolicy {
	return []RowLevelPermissionPolicy{
		"GRANT_ACCESS",
		"DENY_ACCESS",
	}
}

type TemplateErrorType string

// Enum values for TemplateErrorType
const (
	TemplateErrorTypeSource_not_found   TemplateErrorType = "SOURCE_NOT_FOUND"
	TemplateErrorTypeData_set_not_found TemplateErrorType = "DATA_SET_NOT_FOUND"
	TemplateErrorTypeInternal_failure   TemplateErrorType = "INTERNAL_FAILURE"
	TemplateErrorTypeAccess_denied      TemplateErrorType = "ACCESS_DENIED"
)

// Values returns all known values for TemplateErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TemplateErrorType) Values() []TemplateErrorType {
	return []TemplateErrorType{
		"SOURCE_NOT_FOUND",
		"DATA_SET_NOT_FOUND",
		"INTERNAL_FAILURE",
		"ACCESS_DENIED",
	}
}

type TextQualifier string

// Enum values for TextQualifier
const (
	TextQualifierDouble_quote TextQualifier = "DOUBLE_QUOTE"
	TextQualifierSingle_quote TextQualifier = "SINGLE_QUOTE"
)

// Values returns all known values for TextQualifier. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TextQualifier) Values() []TextQualifier {
	return []TextQualifier{
		"DOUBLE_QUOTE",
		"SINGLE_QUOTE",
	}
}

type ThemeErrorType string

// Enum values for ThemeErrorType
const (
	ThemeErrorTypeInternal_failure ThemeErrorType = "INTERNAL_FAILURE"
)

// Values returns all known values for ThemeErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ThemeErrorType) Values() []ThemeErrorType {
	return []ThemeErrorType{
		"INTERNAL_FAILURE",
	}
}

type ThemeType string

// Enum values for ThemeType
const (
	ThemeTypeQuicksight ThemeType = "QUICKSIGHT"
	ThemeTypeCustom     ThemeType = "CUSTOM"
	ThemeTypeAll        ThemeType = "ALL"
)

// Values returns all known values for ThemeType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (ThemeType) Values() []ThemeType {
	return []ThemeType{
		"QUICKSIGHT",
		"CUSTOM",
		"ALL",
	}
}

type UserRole string

// Enum values for UserRole
const (
	UserRoleAdmin             UserRole = "ADMIN"
	UserRoleAuthor            UserRole = "AUTHOR"
	UserRoleReader            UserRole = "READER"
	UserRoleRestricted_author UserRole = "RESTRICTED_AUTHOR"
	UserRoleRestricted_reader UserRole = "RESTRICTED_READER"
)

// Values returns all known values for UserRole. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (UserRole) Values() []UserRole {
	return []UserRole{
		"ADMIN",
		"AUTHOR",
		"READER",
		"RESTRICTED_AUTHOR",
		"RESTRICTED_READER",
	}
}
