// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package quicksight

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight/types"
)

const opCreateIngestion = "CreateIngestion"

// CreateIngestionRequest returns a request value for making API operation for
// Amazon QuickSight.
//
// Creates and starts a new SPICE ingestion on a dataset
//
// Any ingestions operating on tagged datasets inherit the same tags automatically
// for use in access-control. For an example, see How do I create an IAM policy
// to control access to Amazon EC2 resources using tags? (https://aws.example.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/).
// Tags will be visible on the tagged dataset, but not on the ingestion resource.
//
//    // Example sending a request using CreateIngestionRequest.
//    req := client.CreateIngestionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/quicksight-2018-04-01/CreateIngestion
func (c *Client) CreateIngestionRequest(input *types.CreateIngestionInput) CreateIngestionRequest {
	op := &aws.Operation{
		Name:       opCreateIngestion,
		HTTPMethod: "PUT",
		HTTPPath:   "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}",
	}

	if input == nil {
		input = &types.CreateIngestionInput{}
	}

	req := c.newRequest(op, input, &types.CreateIngestionOutput{})
	return CreateIngestionRequest{Request: req, Input: input, Copy: c.CreateIngestionRequest}
}

// CreateIngestionRequest is the request type for the
// CreateIngestion API operation.
type CreateIngestionRequest struct {
	*aws.Request
	Input *types.CreateIngestionInput
	Copy  func(*types.CreateIngestionInput) CreateIngestionRequest
}

// Send marshals and sends the CreateIngestion API request.
func (r CreateIngestionRequest) Send(ctx context.Context) (*CreateIngestionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateIngestionResponse{
		CreateIngestionOutput: r.Request.Data.(*types.CreateIngestionOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateIngestionResponse is the response type for the
// CreateIngestion API operation.
type CreateIngestionResponse struct {
	*types.CreateIngestionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateIngestion request.
func (r *CreateIngestionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
