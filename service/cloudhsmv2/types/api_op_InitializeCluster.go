// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/service/cloudhsmv2/enums"
)

type InitializeClusterInput struct {
	_ struct{} `type:"structure"`

	// The identifier (ID) of the cluster that you are claiming. To find the cluster
	// ID, use DescribeClusters.
	//
	// ClusterId is a required field
	ClusterId *string `type:"string" required:"true"`

	// The cluster certificate issued (signed) by your issuing certificate authority
	// (CA). The certificate must be in PEM format and can contain a maximum of
	// 5000 characters.
	//
	// SignedCert is a required field
	SignedCert *string `type:"string" required:"true"`

	// The issuing certificate of the issuing certificate authority (CA) that issued
	// (signed) the cluster certificate. This can be a root (self-signed) certificate
	// or a certificate chain that begins with the certificate that issued the cluster
	// certificate and ends with a root certificate. The certificate or certificate
	// chain must be in PEM format and can contain a maximum of 5000 characters.
	//
	// TrustAnchor is a required field
	TrustAnchor *string `type:"string" required:"true"`
}

// String returns the string representation
func (s InitializeClusterInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InitializeClusterInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InitializeClusterInput"}

	if s.ClusterId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterId"))
	}

	if s.SignedCert == nil {
		invalidParams.Add(aws.NewErrParamRequired("SignedCert"))
	}

	if s.TrustAnchor == nil {
		invalidParams.Add(aws.NewErrParamRequired("TrustAnchor"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type InitializeClusterOutput struct {
	_ struct{} `type:"structure"`

	// The cluster's state.
	State enums.ClusterState `type:"string" enum:"true"`

	// A description of the cluster's state.
	StateMessage *string `type:"string"`
}

// String returns the string representation
func (s InitializeClusterOutput) String() string {
	return awsutil.Prettify(s)
}
