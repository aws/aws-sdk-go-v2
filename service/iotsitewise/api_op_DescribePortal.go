// Code generated by smithy-go-codegen DO NOT EDIT.

package iotsitewise

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iotsitewise/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves information about a portal.
func (c *Client) DescribePortal(ctx context.Context, params *DescribePortalInput, optFns ...func(*Options)) (*DescribePortalOutput, error) {
	if params == nil {
		params = &DescribePortalInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribePortal", params, optFns, addOperationDescribePortalMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribePortalOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribePortalInput struct {

	// The ID of the portal.
	//
	// This member is required.
	PortalId *string
}

type DescribePortalOutput struct {

	// The ARN
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
	// the portal, which has the following format.
	// arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}
	//
	// This member is required.
	PortalArn *string

	// The AWS SSO application generated client ID (used with AWS SSO APIs).
	//
	// This member is required.
	PortalClientId *string

	// The AWS administrator's contact email address.
	//
	// This member is required.
	PortalContactEmail *string

	// The date the portal was created, in Unix epoch time.
	//
	// This member is required.
	PortalCreationDate *time.Time

	// The ID of the portal.
	//
	// This member is required.
	PortalId *string

	// The date the portal was last updated, in Unix epoch time.
	//
	// This member is required.
	PortalLastUpdateDate *time.Time

	// The name of the portal.
	//
	// This member is required.
	PortalName *string

	// The public root URL for the AWS IoT AWS IoT SiteWise Monitor application portal.
	//
	// This member is required.
	PortalStartUrl *string

	// The current status of the portal, which contains a state and any error message.
	//
	// This member is required.
	PortalStatus *types.PortalStatus

	// The portal's description.
	PortalDescription *string

	// The portal's logo image, which is available at a URL.
	PortalLogoImageLocation *types.ImageLocation

	// The ARN
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of
	// the service role that allows the portal's users to access your AWS IoT SiteWise
	// resources on your behalf. For more information, see Using service roles for AWS
	// IoT SiteWise Monitor
	// (https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html)
	// in the AWS IoT SiteWise User Guide.
	RoleArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribePortalMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpDescribePortal{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribePortal{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribePortalValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribePortal(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDescribePortal(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iotsitewise",
		OperationName: "DescribePortal",
	}
}
