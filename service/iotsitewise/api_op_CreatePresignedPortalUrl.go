// Code generated by smithy-go-codegen DO NOT EDIT.

package iotsitewise

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a pre-signed URL to a portal. Use this operation to create URLs to
// portals that use AWS Identity and Access Management (IAM) to authenticate users.
// An IAM user with access to a portal can call this API to get a URL to that
// portal. The URL contains a session token that lets the IAM user access the
// portal.
func (c *Client) CreatePresignedPortalUrl(ctx context.Context, params *CreatePresignedPortalUrlInput, optFns ...func(*Options)) (*CreatePresignedPortalUrlOutput, error) {
	if params == nil {
		params = &CreatePresignedPortalUrlInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreatePresignedPortalUrl", params, optFns, addOperationCreatePresignedPortalUrlMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreatePresignedPortalUrlOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreatePresignedPortalUrlInput struct {

	// The ID of the portal to access.
	//
	// This member is required.
	PortalId *string

	// The duration (in seconds) for which the session at the URL is valid. Default:
	// 900 seconds (15 minutes)
	SessionDurationSeconds *int32
}

type CreatePresignedPortalUrlOutput struct {

	// The pre-signed URL to the portal. The URL contains the portal ID and a session
	// token that lets you access the portal. The URL has the following format.
	// https://.app.iotsitewise.aws/auth?token=
	//
	// This member is required.
	PresignedPortalUrl *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreatePresignedPortalUrlMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreatePresignedPortalUrl{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreatePresignedPortalUrl{}, middleware.After)
	if err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addEndpointPrefix_opCreatePresignedPortalUrlMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreatePresignedPortalUrlValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreatePresignedPortalUrl(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	return nil
}

type endpointPrefix_opCreatePresignedPortalUrlMiddleware struct {
}

func (*endpointPrefix_opCreatePresignedPortalUrlMiddleware) ID() string {
	return "EndpointHostPrefix"
}

func (m *endpointPrefix_opCreatePresignedPortalUrlMiddleware) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	if smithyhttp.GetHostnameImmutable(ctx) {
		return next.HandleSerialize(ctx, in)
	}

	req, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, fmt.Errorf("unknown transport type %T", in.Request)
	}

	req.HostPrefix = "monitor."

	return next.HandleSerialize(ctx, in)
}
func addEndpointPrefix_opCreatePresignedPortalUrlMiddleware(stack *middleware.Stack) error {
	return stack.Serialize.Insert(&endpointPrefix_opCreatePresignedPortalUrlMiddleware{}, `OperationSerializer`, middleware.Before)
}

func newServiceMetadataMiddleware_opCreatePresignedPortalUrl(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iotsitewise",
		OperationName: "CreatePresignedPortalUrl",
	}
}
