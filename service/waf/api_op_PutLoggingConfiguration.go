// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/waf/types"
)

const opPutLoggingConfiguration = "PutLoggingConfiguration"

// PutLoggingConfigurationRequest returns a request value for making API operation for
// AWS WAF.
//
// Associates a LoggingConfiguration with a specified web ACL.
//
// You can access information about all traffic that AWS WAF inspects using
// the following steps:
//
// Create an Amazon Kinesis Data Firehose.
//
// Create the data firehose with a PUT source and in the region that you are
// operating. However, if you are capturing logs for Amazon CloudFront, always
// create the firehose in US East (N. Virginia).
//
// Do not create the data firehose using a Kinesis stream as your source.
//
// Associate that firehose to your web ACL using a PutLoggingConfiguration request.
//
// When you successfully enable logging using a PutLoggingConfiguration request,
// AWS WAF will create a service linked role with the necessary permissions
// to write logs to the Amazon Kinesis Data Firehose. For more information,
// see Logging Web ACL Traffic Information (https://docs.aws.amazon.com/waf/latest/developerguide/logging.html)
// in the AWS WAF Developer Guide.
//
//    // Example sending a request using PutLoggingConfigurationRequest.
//    req := client.PutLoggingConfigurationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/waf-2015-08-24/PutLoggingConfiguration
func (c *Client) PutLoggingConfigurationRequest(input *types.PutLoggingConfigurationInput) PutLoggingConfigurationRequest {
	op := &aws.Operation{
		Name:       opPutLoggingConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutLoggingConfigurationInput{}
	}

	req := c.newRequest(op, input, &types.PutLoggingConfigurationOutput{})
	return PutLoggingConfigurationRequest{Request: req, Input: input, Copy: c.PutLoggingConfigurationRequest}
}

// PutLoggingConfigurationRequest is the request type for the
// PutLoggingConfiguration API operation.
type PutLoggingConfigurationRequest struct {
	*aws.Request
	Input *types.PutLoggingConfigurationInput
	Copy  func(*types.PutLoggingConfigurationInput) PutLoggingConfigurationRequest
}

// Send marshals and sends the PutLoggingConfiguration API request.
func (r PutLoggingConfigurationRequest) Send(ctx context.Context) (*PutLoggingConfigurationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutLoggingConfigurationResponse{
		PutLoggingConfigurationOutput: r.Request.Data.(*types.PutLoggingConfigurationOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutLoggingConfigurationResponse is the response type for the
// PutLoggingConfiguration API operation.
type PutLoggingConfigurationResponse struct {
	*types.PutLoggingConfigurationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutLoggingConfiguration request.
func (r *PutLoggingConfigurationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
