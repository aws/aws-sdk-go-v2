// Code generated by smithy-go-codegen DO NOT EDIT.

package codecommit

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/codecommit/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Adds or updates a file in a branch in an AWS CodeCommit repository, and
// generates a commit for the addition in the specified branch.
func (c *Client) PutFile(ctx context.Context, params *PutFileInput, optFns ...func(*Options)) (*PutFileOutput, error) {
	stack := middleware.NewStack("PutFile", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpPutFileMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutFileValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutFile(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutFile",
			Err:           err,
		}
	}
	out := result.(*PutFileOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutFileInput struct {
	// The full commit ID of the head commit in the branch where you want to add or
	// update the file. If this is an empty repository, no commit ID is required. If
	// this is not an empty repository, a commit ID is required. The commit ID must
	// match the ID of the head commit at the time of the operation. Otherwise, an
	// error occurs, and the file is not added or updated.
	ParentCommitId *string
	// The name of the branch where you want to add or update the file. If this is an
	// empty repository, this branch is created.
	BranchName *string
	// The content of the file, in binary object format.
	FileContent []byte
	// The file mode permissions of the blob. Valid file mode permissions are listed
	// here.
	FileMode types.FileModeTypeEnum
	// An email address for the person adding or updating the file.
	Email *string
	// The name of the file you want to add or update, including the relative path to
	// the file in the repository. If the path does not currently exist in the
	// repository, the path is created as part of adding the file.
	FilePath *string
	// The name of the repository where you want to add or update the file.
	RepositoryName *string
	// The name of the person adding or updating the file. Although it is optional, a
	// name makes the commit history for your repository more useful.
	Name *string
	// A message about why this file was added or updated. Although it is optional, a
	// message makes the commit history for your repository more useful.
	CommitMessage *string
}

type PutFileOutput struct {
	// The ID of the blob, which is its SHA-1 pointer.
	BlobId *string
	// The full SHA-1 pointer of the tree information for the commit that contains this
	// file change.
	TreeId *string
	// The full SHA ID of the commit that contains this file change.
	CommitId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpPutFileMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpPutFile{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutFile{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutFile(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codecommit",
		OperationName: "PutFile",
	}
}
