// Code generated by smithy-go-codegen DO NOT EDIT.

package codecommit

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sets or changes the comment or description for a repository. The description
// field for a repository accepts all HTML characters and all valid Unicode
// characters. Applications that do not HTML-encode the description and display it
// in a webpage can expose users to potentially malicious code. Make sure that you
// HTML-encode the description field in any application that uses this API to
// display the repository description on a webpage.
func (c *Client) UpdateRepositoryDescription(ctx context.Context, params *UpdateRepositoryDescriptionInput, optFns ...func(*Options)) (*UpdateRepositoryDescriptionOutput, error) {
	stack := middleware.NewStack("UpdateRepositoryDescription", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpUpdateRepositoryDescriptionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateRepositoryDescriptionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateRepositoryDescription(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateRepositoryDescription",
			Err:           err,
		}
	}
	out := result.(*UpdateRepositoryDescriptionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input of an update repository description operation.
type UpdateRepositoryDescriptionInput struct {
	// The name of the repository to set or change the comment or description for.
	RepositoryName *string
	// The new comment or description for the specified repository. Repository
	// descriptions are limited to 1,000 characters.
	RepositoryDescription *string
}

type UpdateRepositoryDescriptionOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpUpdateRepositoryDescriptionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpUpdateRepositoryDescription{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpUpdateRepositoryDescription{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateRepositoryDescription(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codecommit",
		OperationName: "UpdateRepositoryDescription",
	}
}
