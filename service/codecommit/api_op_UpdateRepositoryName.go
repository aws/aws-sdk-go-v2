// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package codecommit

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/codecommit/types"
)

const opUpdateRepositoryName = "UpdateRepositoryName"

// UpdateRepositoryNameRequest returns a request value for making API operation for
// AWS CodeCommit.
//
// Renames a repository. The repository name must be unique across the calling
// AWS account. Repository names are limited to 100 alphanumeric, dash, and
// underscore characters, and cannot include certain characters. The suffix
// .git is prohibited. For more information about the limits on repository names,
// see Limits (https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html)
// in the AWS CodeCommit User Guide.
//
//    // Example sending a request using UpdateRepositoryNameRequest.
//    req := client.UpdateRepositoryNameRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/codecommit-2015-04-13/UpdateRepositoryName
func (c *Client) UpdateRepositoryNameRequest(input *types.UpdateRepositoryNameInput) UpdateRepositoryNameRequest {
	op := &aws.Operation{
		Name:       opUpdateRepositoryName,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UpdateRepositoryNameInput{}
	}

	req := c.newRequest(op, input, &types.UpdateRepositoryNameOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return UpdateRepositoryNameRequest{Request: req, Input: input, Copy: c.UpdateRepositoryNameRequest}
}

// UpdateRepositoryNameRequest is the request type for the
// UpdateRepositoryName API operation.
type UpdateRepositoryNameRequest struct {
	*aws.Request
	Input *types.UpdateRepositoryNameInput
	Copy  func(*types.UpdateRepositoryNameInput) UpdateRepositoryNameRequest
}

// Send marshals and sends the UpdateRepositoryName API request.
func (r UpdateRepositoryNameRequest) Send(ctx context.Context) (*UpdateRepositoryNameResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateRepositoryNameResponse{
		UpdateRepositoryNameOutput: r.Request.Data.(*types.UpdateRepositoryNameOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateRepositoryNameResponse is the response type for the
// UpdateRepositoryName API operation.
type UpdateRepositoryNameResponse struct {
	*types.UpdateRepositoryNameOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateRepositoryName request.
func (r *UpdateRepositoryNameResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
