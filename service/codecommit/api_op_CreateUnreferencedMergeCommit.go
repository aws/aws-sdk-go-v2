// Code generated by smithy-go-codegen DO NOT EDIT.

package codecommit

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/codecommit/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an unreferenced commit that represents the result of merging two
// branches using a specified merge strategy. This can help you determine the
// outcome of a potential merge. This API cannot be used with the fast-forward
// merge strategy because that strategy does not create a merge commit. This
// unreferenced merge commit can only be accessed using the GetCommit API or
// through git commands such as git fetch. To retrieve this commit, you must
// specify its commit ID or otherwise reference it.
func (c *Client) CreateUnreferencedMergeCommit(ctx context.Context, params *CreateUnreferencedMergeCommitInput, optFns ...func(*Options)) (*CreateUnreferencedMergeCommitOutput, error) {
	stack := middleware.NewStack("CreateUnreferencedMergeCommit", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateUnreferencedMergeCommitMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateUnreferencedMergeCommitValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateUnreferencedMergeCommit(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateUnreferencedMergeCommit",
			Err:           err,
		}
	}
	out := result.(*CreateUnreferencedMergeCommitOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateUnreferencedMergeCommitInput struct {
	// The name of the repository where you want to create the unreferenced merge
	// commit.
	RepositoryName *string
	// The commit message for the unreferenced commit.
	CommitMessage *string
	// The merge option or strategy you want to use to merge the code.
	MergeOption types.MergeOptionTypeEnum
	// The branch, tag, HEAD, or other fully qualified reference used to identify a
	// commit (for example, a branch name or a full commit ID).
	DestinationCommitSpecifier *string
	// The email address for the person who created the unreferenced commit.
	Email *string
	// If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when
	// resolving conflicts during a merge.
	ConflictResolution *types.ConflictResolution
	// The name of the author who created the unreferenced commit. This information is
	// used as both the author and committer for the commit.
	AuthorName *string
	// Specifies which branch to use when resolving conflicts, or whether to attempt
	// automatically merging two versions of a file. The default is NONE, which
	// requires any conflicts to be resolved manually before the merge operation is
	// successful.
	ConflictResolutionStrategy types.ConflictResolutionStrategyTypeEnum
	// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is
	// used, which returns a not-mergeable result if the same file has differences in
	// both branches. If LINE_LEVEL is specified, a conflict is considered not
	// mergeable if the same file in both branches has differences on the same line.
	ConflictDetailLevel types.ConflictDetailLevelTypeEnum
	// The branch, tag, HEAD, or other fully qualified reference used to identify a
	// commit (for example, a branch name or a full commit ID).
	SourceCommitSpecifier *string
	// If the commit contains deletions, whether to keep a folder or folder structure
	// if the changes leave the folders empty. If this is specified as true, a .gitkeep
	// file is created for empty folders. The default is false.
	KeepEmptyFolders *bool
}

type CreateUnreferencedMergeCommitOutput struct {
	// The full commit ID of the commit that contains your merge results.
	CommitId *string
	// The full SHA-1 pointer of the tree information for the commit that contains the
	// merge results.
	TreeId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateUnreferencedMergeCommitMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateUnreferencedMergeCommit{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateUnreferencedMergeCommit{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateUnreferencedMergeCommit(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codecommit",
		OperationName: "CreateUnreferencedMergeCommit",
	}
}
