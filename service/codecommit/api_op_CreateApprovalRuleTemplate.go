// Code generated by smithy-go-codegen DO NOT EDIT.

package codecommit

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/codecommit/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a template for approval rules that can then be associated with one or
// more repositories in your AWS account. When you associate a template with a
// repository, AWS CodeCommit creates an approval rule that matches the conditions
// of the template for all pull requests that meet the conditions of the template.
// For more information, see AssociateApprovalRuleTemplateWithRepository ().
func (c *Client) CreateApprovalRuleTemplate(ctx context.Context, params *CreateApprovalRuleTemplateInput, optFns ...func(*Options)) (*CreateApprovalRuleTemplateOutput, error) {
	stack := middleware.NewStack("CreateApprovalRuleTemplate", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateApprovalRuleTemplateMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateApprovalRuleTemplateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateApprovalRuleTemplate(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateApprovalRuleTemplate",
			Err:           err,
		}
	}
	out := result.(*CreateApprovalRuleTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateApprovalRuleTemplateInput struct {
	// The name of the approval rule template. Provide descriptive names, because this
	// name is applied to the approval rules created automatically in associated
	// repositories.
	ApprovalRuleTemplateName *string
	// The description of the approval rule template. Consider providing a description
	// that explains what this template does and when it might be appropriate to
	// associate it with repositories.
	ApprovalRuleTemplateDescription *string
	// The content of the approval rule that is created on pull requests in associated
	// repositories. If you specify one or more destination references (branches),
	// approval rules are created in an associated repository only if their destination
	// references (branches) match those specified in the template. When you create the
	// content of the approval rule template, you can specify approvers in an approval
	// pool in one of two ways:
	//
	//     * CodeCommitApprovers: This option only requires
	// an AWS account and a resource. It can be used for both IAM users and federated
	// access users whose name matches the provided resource name. This is a very
	// powerful option that offers a great deal of flexibility. For example, if you
	// specify the AWS account 123456789012 and Mary_Major, all of the following are
	// counted as approvals coming from that user:
	//
	//         * An IAM user in the
	// account (arn:aws:iam::123456789012:user/Mary_Major)
	//
	//         * A federated user
	// identified in IAM as Mary_Major
	// (arn:aws:sts::123456789012:federated-user/Mary_Major)
	//
	//     This option does not
	// recognize an active session of someone assuming the role of CodeCommitReview
	// with a role session name of Mary_Major
	// (arn:aws:sts::123456789012:assumed-role/CodeCommitReview/Mary_Major) unless you
	// include a wildcard (*Mary_Major).
	//
	//     * Fully qualified ARN: This option allows
	// you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or
	// role.
	//
	// For more information about IAM ARNs, wildcards, and formats, see IAM
	// Identifiers
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) in
	// the IAM User Guide.  </note>
	ApprovalRuleTemplateContent *string
}

type CreateApprovalRuleTemplateOutput struct {
	// The content and structure of the created approval rule template.
	ApprovalRuleTemplate *types.ApprovalRuleTemplate

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateApprovalRuleTemplateMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateApprovalRuleTemplate{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateApprovalRuleTemplate{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateApprovalRuleTemplate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codecommit",
		OperationName: "CreateApprovalRuleTemplate",
	}
}
