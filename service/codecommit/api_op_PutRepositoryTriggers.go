// Code generated by smithy-go-codegen DO NOT EDIT.

package codecommit

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/codecommit/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Replaces all triggers for a repository. Used to create or delete triggers.
func (c *Client) PutRepositoryTriggers(ctx context.Context, params *PutRepositoryTriggersInput, optFns ...func(*Options)) (*PutRepositoryTriggersOutput, error) {
	if params == nil {
		params = &PutRepositoryTriggersInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutRepositoryTriggers", params, optFns, addOperationPutRepositoryTriggersMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutRepositoryTriggersOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input of a put repository triggers operation.
type PutRepositoryTriggersInput struct {

	// The name of the repository where you want to create or update the trigger.
	//
	// This member is required.
	RepositoryName *string

	// The JSON block of configuration information for each trigger.
	//
	// This member is required.
	Triggers []*types.RepositoryTrigger
}

// Represents the output of a put repository triggers operation.
type PutRepositoryTriggersOutput struct {

	// The system-generated unique ID for the create or update operation.
	ConfigurationId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutRepositoryTriggersMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpPutRepositoryTriggers{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutRepositoryTriggers{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutRepositoryTriggersValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutRepositoryTriggers(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutRepositoryTriggers(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codecommit",
		OperationName: "PutRepositoryTriggers",
	}
}
