// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package codecommit

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/codecommit/types"
)

const opAssociateApprovalRuleTemplateWithRepository = "AssociateApprovalRuleTemplateWithRepository"

// AssociateApprovalRuleTemplateWithRepositoryRequest returns a request value for making API operation for
// AWS CodeCommit.
//
// Creates an association between an approval rule template and a specified
// repository. Then, the next time a pull request is created in the repository
// where the destination reference (if specified) matches the destination reference
// (branch) for the pull request, an approval rule that matches the template
// conditions is automatically created for that pull request. If no destination
// references are specified in the template, an approval rule that matches the
// template contents is created for all pull requests in that repository.
//
//    // Example sending a request using AssociateApprovalRuleTemplateWithRepositoryRequest.
//    req := client.AssociateApprovalRuleTemplateWithRepositoryRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/codecommit-2015-04-13/AssociateApprovalRuleTemplateWithRepository
func (c *Client) AssociateApprovalRuleTemplateWithRepositoryRequest(input *types.AssociateApprovalRuleTemplateWithRepositoryInput) AssociateApprovalRuleTemplateWithRepositoryRequest {
	op := &aws.Operation{
		Name:       opAssociateApprovalRuleTemplateWithRepository,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AssociateApprovalRuleTemplateWithRepositoryInput{}
	}

	req := c.newRequest(op, input, &types.AssociateApprovalRuleTemplateWithRepositoryOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return AssociateApprovalRuleTemplateWithRepositoryRequest{Request: req, Input: input, Copy: c.AssociateApprovalRuleTemplateWithRepositoryRequest}
}

// AssociateApprovalRuleTemplateWithRepositoryRequest is the request type for the
// AssociateApprovalRuleTemplateWithRepository API operation.
type AssociateApprovalRuleTemplateWithRepositoryRequest struct {
	*aws.Request
	Input *types.AssociateApprovalRuleTemplateWithRepositoryInput
	Copy  func(*types.AssociateApprovalRuleTemplateWithRepositoryInput) AssociateApprovalRuleTemplateWithRepositoryRequest
}

// Send marshals and sends the AssociateApprovalRuleTemplateWithRepository API request.
func (r AssociateApprovalRuleTemplateWithRepositoryRequest) Send(ctx context.Context) (*AssociateApprovalRuleTemplateWithRepositoryResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AssociateApprovalRuleTemplateWithRepositoryResponse{
		AssociateApprovalRuleTemplateWithRepositoryOutput: r.Request.Data.(*types.AssociateApprovalRuleTemplateWithRepositoryOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AssociateApprovalRuleTemplateWithRepositoryResponse is the response type for the
// AssociateApprovalRuleTemplateWithRepository API operation.
type AssociateApprovalRuleTemplateWithRepositoryResponse struct {
	*types.AssociateApprovalRuleTemplateWithRepositoryOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AssociateApprovalRuleTemplateWithRepository request.
func (r *AssociateApprovalRuleTemplateWithRepositoryResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
