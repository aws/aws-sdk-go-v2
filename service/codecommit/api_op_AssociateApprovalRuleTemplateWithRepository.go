// Code generated by smithy-go-codegen DO NOT EDIT.

package codecommit

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an association between an approval rule template and a specified
// repository. Then, the next time a pull request is created in the repository
// where the destination reference (if specified) matches the destination reference
// (branch) for the pull request, an approval rule that matches the template
// conditions is automatically created for that pull request. If no destination
// references are specified in the template, an approval rule that matches the
// template contents is created for all pull requests in that repository.
func (c *Client) AssociateApprovalRuleTemplateWithRepository(ctx context.Context, params *AssociateApprovalRuleTemplateWithRepositoryInput, optFns ...func(*Options)) (*AssociateApprovalRuleTemplateWithRepositoryOutput, error) {
	if params == nil {
		params = &AssociateApprovalRuleTemplateWithRepositoryInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "AssociateApprovalRuleTemplateWithRepository", params, optFns, addOperationAssociateApprovalRuleTemplateWithRepositoryMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*AssociateApprovalRuleTemplateWithRepositoryOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AssociateApprovalRuleTemplateWithRepositoryInput struct {

	// The name for the approval rule template.
	//
	// This member is required.
	ApprovalRuleTemplateName *string

	// The name of the repository that you want to associate with the template.
	//
	// This member is required.
	RepositoryName *string
}

type AssociateApprovalRuleTemplateWithRepositoryOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationAssociateApprovalRuleTemplateWithRepositoryMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpAssociateApprovalRuleTemplateWithRepository{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpAssociateApprovalRuleTemplateWithRepository{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAssociateApprovalRuleTemplateWithRepositoryValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAssociateApprovalRuleTemplateWithRepository(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opAssociateApprovalRuleTemplateWithRepository(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codecommit",
		OperationName: "AssociateApprovalRuleTemplateWithRepository",
	}
}
