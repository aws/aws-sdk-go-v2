// Code generated by smithy-go-codegen DO NOT EDIT.

package kinesisvideoarchivedmedia

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kinesisvideoarchivedmedia/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"io"
)

// Downloads an MP4 file (clip) containing the archived, on-demand media from the
// specified video stream over the specified time range. Both the StreamName and
// the StreamARN parameters are optional, but you must specify either the
// StreamName or the StreamARN when invoking this API operation.  <p>As a
// prerequsite to using GetCLip API, you must obtain an endpoint using
// <code>GetDataEndpoint</code>, specifying GET_CLIP for<code></code> the
// <code>APIName</code> parameter. </p> <p>An Amazon Kinesis video stream has the
// following requirements for providing data through MP4:</p> <ul> <li> <p>The
// media must contain h.264 or h.265 encoded video and, optionally, AAC or G.711
// encoded audio. Specifically, the codec ID of track 1 should be
// <code>V_MPEG/ISO/AVC</code> (for h.264) or V_MPEGH/ISO/HEVC (for H.265).
// Optionally, the codec ID of track 2 should be <code>A_AAC</code> (for AAC) or
// A_MS/ACM (for G.711).</p> </li> <li> <p>Data retention must be greater than
// 0.</p> </li> <li> <p>The video track of each fragment must contain codec private
// data in the Advanced Video Coding (AVC) for H.264 format and HEVC for H.265
// format. For more information, see <a
// href="https://www.iso.org/standard/55980.html">MPEG-4 specification ISO/IEC
// 14496-15</a>. For information about adapting stream data to a given format, see
// <a
// href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html">NAL
// Adaptation Flags</a>.</p> </li> <li> <p>The audio track (if present) of each
// fragment must contain codec private data in the AAC format (<a
// href="https://www.iso.org/standard/43345.html">AAC specification ISO/IEC
// 13818-7</a>) or the <a
// href="http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html">MS
// Wave format</a>.</p> </li> </ul> <p>You can monitor the amount of outgoing data
// by monitoring the <code>GetClip.OutgoingBytes</code> Amazon CloudWatch metric.
// For information about using CloudWatch to monitor Kinesis Video Streams, see <a
// href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html">Monitoring
// Kinesis Video Streams</a>. For pricing information, see <a
// href="https://aws.amazon.com/kinesis/video-streams/pricing/">Amazon Kinesis
// Video Streams Pricing</a> and <a href="https://aws.amazon.com/pricing/">AWS
// Pricing</a>. Charges for outgoing AWS data apply.</p>
func (c *Client) GetClip(ctx context.Context, params *GetClipInput, optFns ...func(*Options)) (*GetClipOutput, error) {
	stack := middleware.NewStack("GetClip", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetClipMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	addOpGetClipValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetClip(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetClip",
			Err:           err,
		}
	}
	out := result.(*GetClipOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetClipInput struct {
	// The Amazon Resource Name (ARN) of the stream for which to retrieve the media
	// clip. You must specify either the StreamName or the StreamARN.
	StreamARN *string
	// The time range of the requested clip and the source of the timestamps.
	ClipFragmentSelector *types.ClipFragmentSelector
	// The name of the stream for which to retrieve the media clip. You must specify
	// either the StreamName or the StreamARN.
	StreamName *string
}

type GetClipOutput struct {
	// Traditional MP4 file that contains the media clip from the specified video
	// stream. The output will contain the first 100 MB or the first 200 fragments from
	// the specified start timestamp. For more information, see Kinesis Video Streams
	// Limits ().
	Payload io.ReadCloser
	// The content type of the media in the requested clip.
	ContentType *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetClipMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetClip{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetClip{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetClip(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kinesisvideo",
		OperationName: "GetClip",
	}
}
