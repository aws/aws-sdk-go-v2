// Code generated by smithy-go-codegen DO NOT EDIT.

package kinesisvideoarchivedmedia

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"io"
)

// Gets media for a list of fragments (specified by fragment number) from the
// archived data in an Amazon Kinesis video stream.  <note> <p>You must first call
// the <code>GetDataEndpoint</code> API to get an endpoint. Then send the
// <code>GetMediaForFragmentList</code> requests to this endpoint using the <a
// href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url
// parameter</a>. </p> </note> <p>The following limits apply when using the
// <code>GetMediaForFragmentList</code> API:</p> <ul> <li> <p>A client can call
// <code>GetMediaForFragmentList</code> up to five times per second per stream.
// </p> </li> <li> <p>Kinesis Video Streams sends media data at a rate of up to 25
// megabytes per second (or 200 megabits per second) during a
// <code>GetMediaForFragmentList</code> session. </p> </li> </ul> <important> <p>If
// an error is thrown after invoking a Kinesis Video Streams archived media API, in
// addition to the HTTP status code and the response body, it includes the
// following pieces of information: </p> <ul> <li> <p> <code>x-amz-ErrorType</code>
// HTTP header – contains a more specific error type in addition to what the HTTP
// status code provides. </p> </li> <li> <p> <code>x-amz-RequestId</code> HTTP
// header – if you want to report an issue to AWS, the support team can better
// diagnose the problem if given the Request Id.</p> </li> </ul> <p>Both the HTTP
// status code and the ErrorType header can be utilized to make programmatic
// decisions about whether errors are retry-able and under what conditions, as well
// as provide information on what actions the client programmer might need to take
// in order to successfully try again.</p> <p>For more information, see the
// <b>Errors</b> section at the bottom of this topic, as well as <a
// href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
// Errors</a>. </p> </important>
func (c *Client) GetMediaForFragmentList(ctx context.Context, params *GetMediaForFragmentListInput, optFns ...func(*Options)) (*GetMediaForFragmentListOutput, error) {
	stack := middleware.NewStack("GetMediaForFragmentList", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetMediaForFragmentListMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	addOpGetMediaForFragmentListValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetMediaForFragmentList(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetMediaForFragmentList",
			Err:           err,
		}
	}
	out := result.(*GetMediaForFragmentListOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetMediaForFragmentListInput struct {
	// The name of the stream from which to retrieve fragment media.
	StreamName *string
	// A list of the numbers of fragments for which to retrieve media. You retrieve
	// these values with ListFragments ().
	Fragments []*string
}

type GetMediaForFragmentListOutput struct {
	// The content type of the requested media.
	ContentType *string
	// The payload that Kinesis Video Streams returns is a sequence of chunks from the
	// specified stream. For information about the chunks, see PutMedia
	// (http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html).
	// The chunks that Kinesis Video Streams returns in the GetMediaForFragmentList
	// call also include the following additional Matroska (MKV) tags:
	//
	//     *
	// AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the chunk.
	//
	//     *
	// AWS_KINESISVIDEO_SERVER_SIDE_TIMESTAMP - Server-side timestamp of the
	// fragment.
	//
	//     * AWS_KINESISVIDEO_PRODUCER_SIDE_TIMESTAMP - Producer-side
	// timestamp of the fragment.
	//
	// The following tags will be included if an exception
	// occurs:
	//
	//     * AWS_KINESISVIDEO_FRAGMENT_NUMBER - The number of the fragment
	// that threw the exception
	//
	//     * AWS_KINESISVIDEO_EXCEPTION_ERROR_CODE - The
	// integer code of the exception
	//
	//     * AWS_KINESISVIDEO_EXCEPTION_MESSAGE - A text
	// description of the exception
	Payload io.ReadCloser

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetMediaForFragmentListMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetMediaForFragmentList{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetMediaForFragmentList{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetMediaForFragmentList(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kinesisvideo",
		OperationName: "GetMediaForFragmentList",
	}
}
