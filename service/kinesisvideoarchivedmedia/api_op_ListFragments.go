// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kinesisvideoarchivedmedia

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kinesisvideoarchivedmedia/types"
)

const opListFragments = "ListFragments"

// ListFragmentsRequest returns a request value for making API operation for
// Amazon Kinesis Video Streams Archived Media.
//
// Returns a list of Fragment objects from the specified stream and timestamp
// range within the archived data.
//
// Listing fragments is eventually consistent. This means that even if the producer
// receives an acknowledgment that a fragment is persisted, the result might
// not be returned immediately from a request to ListFragments. However, results
// are typically available in less than one second.
//
// You must first call the GetDataEndpoint API to get an endpoint. Then send
// the ListFragments requests to this endpoint using the --endpoint-url parameter
// (https://docs.aws.amazon.com/cli/latest/reference/).
//
// If an error is thrown after invoking a Kinesis Video Streams archived media
// API, in addition to the HTTP status code and the response body, it includes
// the following pieces of information:
//
//    * x-amz-ErrorType HTTP header – contains a more specific error type
//    in addition to what the HTTP status code provides.
//
//    * x-amz-RequestId HTTP header – if you want to report an issue to AWS,
//    the support team can better diagnose the problem if given the Request
//    Id.
//
// Both the HTTP status code and the ErrorType header can be utilized to make
// programmatic decisions about whether errors are retry-able and under what
// conditions, as well as provide information on what actions the client programmer
// might need to take in order to successfully try again.
//
// For more information, see the Errors section at the bottom of this topic,
// as well as Common Errors (https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html).
//
//    // Example sending a request using ListFragmentsRequest.
//    req := client.ListFragmentsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/ListFragments
func (c *Client) ListFragmentsRequest(input *types.ListFragmentsInput) ListFragmentsRequest {
	op := &aws.Operation{
		Name:       opListFragments,
		HTTPMethod: "POST",
		HTTPPath:   "/listFragments",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListFragmentsInput{}
	}

	req := c.newRequest(op, input, &types.ListFragmentsOutput{})
	return ListFragmentsRequest{Request: req, Input: input, Copy: c.ListFragmentsRequest}
}

// ListFragmentsRequest is the request type for the
// ListFragments API operation.
type ListFragmentsRequest struct {
	*aws.Request
	Input *types.ListFragmentsInput
	Copy  func(*types.ListFragmentsInput) ListFragmentsRequest
}

// Send marshals and sends the ListFragments API request.
func (r ListFragmentsRequest) Send(ctx context.Context) (*ListFragmentsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListFragmentsResponse{
		ListFragmentsOutput: r.Request.Data.(*types.ListFragmentsOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListFragmentsRequestPaginator returns a paginator for ListFragments.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListFragmentsRequest(input)
//   p := kinesisvideoarchivedmedia.NewListFragmentsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListFragmentsPaginator(req ListFragmentsRequest) ListFragmentsPaginator {
	return ListFragmentsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListFragmentsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListFragmentsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListFragmentsPaginator struct {
	aws.Pager
}

func (p *ListFragmentsPaginator) CurrentPage() *types.ListFragmentsOutput {
	return p.Pager.CurrentPage().(*types.ListFragmentsOutput)
}

// ListFragmentsResponse is the response type for the
// ListFragments API operation.
type ListFragmentsResponse struct {
	*types.ListFragmentsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListFragments request.
func (r *ListFragmentsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
