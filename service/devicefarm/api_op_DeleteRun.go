// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package devicefarm

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/devicefarm/types"
)

const opDeleteRun = "DeleteRun"

// DeleteRunRequest returns a request value for making API operation for
// AWS Device Farm.
//
// Deletes the run, given the run ARN.
//
// Note Deleting this resource does not stop an in-progress run.
//
//    // Example sending a request using DeleteRunRequest.
//    req := client.DeleteRunRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/devicefarm-2015-06-23/DeleteRun
func (c *Client) DeleteRunRequest(input *types.DeleteRunInput) DeleteRunRequest {
	op := &aws.Operation{
		Name:       opDeleteRun,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.DeleteRunInput{}
	}

	req := c.newRequest(op, input, &types.DeleteRunOutput{})
	return DeleteRunRequest{Request: req, Input: input, Copy: c.DeleteRunRequest}
}

// DeleteRunRequest is the request type for the
// DeleteRun API operation.
type DeleteRunRequest struct {
	*aws.Request
	Input *types.DeleteRunInput
	Copy  func(*types.DeleteRunInput) DeleteRunRequest
}

// Send marshals and sends the DeleteRun API request.
func (r DeleteRunRequest) Send(ctx context.Context) (*DeleteRunResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeleteRunResponse{
		DeleteRunOutput: r.Request.Data.(*types.DeleteRunOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeleteRunResponse is the response type for the
// DeleteRun API operation.
type DeleteRunResponse struct {
	*types.DeleteRunOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeleteRun request.
func (r *DeleteRunResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
