// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package devicefarm

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/devicefarm/types"
)

const opCreateUpload = "CreateUpload"

// CreateUploadRequest returns a request value for making API operation for
// AWS Device Farm.
//
// Uploads an app or test scripts.
//
//    // Example sending a request using CreateUploadRequest.
//    req := client.CreateUploadRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/devicefarm-2015-06-23/CreateUpload
func (c *Client) CreateUploadRequest(input *types.CreateUploadInput) CreateUploadRequest {
	op := &aws.Operation{
		Name:       opCreateUpload,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateUploadInput{}
	}

	req := c.newRequest(op, input, &types.CreateUploadOutput{})
	return CreateUploadRequest{Request: req, Input: input, Copy: c.CreateUploadRequest}
}

// CreateUploadRequest is the request type for the
// CreateUpload API operation.
type CreateUploadRequest struct {
	*aws.Request
	Input *types.CreateUploadInput
	Copy  func(*types.CreateUploadInput) CreateUploadRequest
}

// Send marshals and sends the CreateUpload API request.
func (r CreateUploadRequest) Send(ctx context.Context) (*CreateUploadResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateUploadResponse{
		CreateUploadOutput: r.Request.Data.(*types.CreateUploadOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateUploadResponse is the response type for the
// CreateUpload API operation.
type CreateUploadResponse struct {
	*types.CreateUploadOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateUpload request.
func (r *CreateUploadResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
