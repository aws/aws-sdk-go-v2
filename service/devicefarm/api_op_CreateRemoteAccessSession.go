// Code generated by smithy-go-codegen DO NOT EDIT.

package devicefarm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/devicefarm/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Specifies and starts a remote access session.
func (c *Client) CreateRemoteAccessSession(ctx context.Context, params *CreateRemoteAccessSessionInput, optFns ...func(*Options)) (*CreateRemoteAccessSessionOutput, error) {
	stack := middleware.NewStack("CreateRemoteAccessSession", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateRemoteAccessSessionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateRemoteAccessSessionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateRemoteAccessSession(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateRemoteAccessSession",
			Err:           err,
		}
	}
	out := result.(*CreateRemoteAccessSessionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Creates and submits a request to start a remote access session.
type CreateRemoteAccessSessionInput struct {
	// The Amazon Resource Name (ARN) of the project for which you want to create a
	// remote access session.
	ProjectArn *string
	// The interaction mode of the remote access session. Valid values are:
	//
	//     *
	// INTERACTIVE: You can interact with the iOS device by viewing, touching, and
	// rotating the screen. You cannot run XCUITest framework-based tests in this
	// mode.
	//
	//     * NO_VIDEO: You are connected to the device, but cannot interact with
	// it or view the screen. This mode has the fastest test execution speed. You can
	// run XCUITest framework-based tests in this mode.
	//
	//     * VIDEO_ONLY: You can view
	// the screen, but cannot touch or rotate it. You can run XCUITest framework-based
	// tests and watch the screen in this mode.
	InteractionMode types.InteractionMode
	// Set to true to enable remote recording for the remote access session.
	RemoteRecordEnabled *bool
	// Ignored. The public key of the ssh key pair you want to use for connecting to
	// remote devices in your remote debugging session. This key is required only if
	// remoteDebugEnabled is set to true. Remote debugging is no longer supported
	// (https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html).
	SshPublicKey *string
	// Unique identifier for the client. If you want access to multiple devices on the
	// same client, you should pass the same clientId value in each call to
	// CreateRemoteAccessSession. This identifier is required only if
	// remoteDebugEnabled is set to true. Remote debugging is no longer supported
	// (https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html).
	ClientId *string
	// The configuration information for the remote access session request.
	Configuration *types.CreateRemoteAccessSessionConfiguration
	// The ARN of the device for which you want to create a remote access session.
	DeviceArn *string
	// When set to true, for private devices, Device Farm does not sign your app again.
	// For public devices, Device Farm always signs your apps again. For more
	// information on how Device Farm modifies your uploads during tests, see Do you
	// modify my app? (https://aws.amazon.com/device-farm/faq/)
	SkipAppResign *bool
	// The name of the remote access session to create.
	Name *string
	// The Amazon Resource Name (ARN) of the device instance for which you want to
	// create a remote access session.
	InstanceArn *string
	// The Amazon Resource Name (ARN) for the app to be recorded in the remote access
	// session.
	RemoteRecordAppArn *string
	// Set to true if you want to access devices remotely for debugging in your remote
	// access session. Remote debugging is no longer supported
	// (https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html).
	RemoteDebugEnabled *bool
}

// Represents the server response from a request to create a remote access session.
type CreateRemoteAccessSessionOutput struct {
	// A container that describes the remote access session when the request to create
	// a remote access session is sent.
	RemoteAccessSession *types.RemoteAccessSession

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateRemoteAccessSessionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateRemoteAccessSession{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateRemoteAccessSession{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateRemoteAccessSession(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "devicefarm",
		OperationName: "CreateRemoteAccessSession",
	}
}
