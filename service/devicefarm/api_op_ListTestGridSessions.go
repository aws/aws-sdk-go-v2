// Code generated by smithy-go-codegen DO NOT EDIT.

package devicefarm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/devicefarm/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves a list of sessions for a TestGridProject.
func (c *Client) ListTestGridSessions(ctx context.Context, params *ListTestGridSessionsInput, optFns ...func(*Options)) (*ListTestGridSessionsOutput, error) {
	if params == nil {
		params = &ListTestGridSessionsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListTestGridSessions", params, optFns, addOperationListTestGridSessionsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListTestGridSessionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListTestGridSessionsInput struct {

	// ARN of a TestGridProject.
	//
	// This member is required.
	ProjectArn *string

	// Return only sessions created after this time.
	CreationTimeAfter *time.Time

	// Return only sessions created before this time.
	CreationTimeBefore *time.Time

	// Return only sessions that ended after this time.
	EndTimeAfter *time.Time

	// Return only sessions that ended before this time.
	EndTimeBefore *time.Time

	// Return only this many results at a time.
	MaxResult *int32

	// Pagination token.
	NextToken *string

	// Return only sessions in this state.
	Status types.TestGridSessionStatus
}

type ListTestGridSessionsOutput struct {

	// Pagination token.
	NextToken *string

	// The sessions that match the criteria in a ListTestGridSessionsRequest.
	TestGridSessions []*types.TestGridSession

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListTestGridSessionsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpListTestGridSessions{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpListTestGridSessions{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpListTestGridSessionsValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListTestGridSessions(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opListTestGridSessions(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "devicefarm",
		OperationName: "ListTestGridSessions",
	}
}
