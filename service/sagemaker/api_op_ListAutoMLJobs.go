// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Request a list of jobs.
func (c *Client) ListAutoMLJobs(ctx context.Context, params *ListAutoMLJobsInput, optFns ...func(*Options)) (*ListAutoMLJobsOutput, error) {
	if params == nil {
		params = &ListAutoMLJobsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListAutoMLJobs", params, optFns, addOperationListAutoMLJobsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListAutoMLJobsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListAutoMLJobsInput struct {

	// Request a list of jobs, using a filter for time.
	CreationTimeAfter *time.Time

	// Request a list of jobs, using a filter for time.
	CreationTimeBefore *time.Time

	// Request a list of jobs, using a filter for time.
	LastModifiedTimeAfter *time.Time

	// Request a list of jobs, using a filter for time.
	LastModifiedTimeBefore *time.Time

	// Request a list of jobs up to a specified limit.
	MaxResults *int32

	// Request a list of jobs, using a search filter for name.
	NameContains *string

	// If the previous response was truncated, you receive this token. Use it in your
	// next request to receive the next set of results.
	NextToken *string

	// The parameter by which to sort the results. The default is AutoMLJobName.
	SortBy types.AutoMLSortBy

	// The sort order for the results. The default is Descending.
	SortOrder types.AutoMLSortOrder

	// Request a list of jobs, using a filter for status.
	StatusEquals types.AutoMLJobStatus
}

type ListAutoMLJobsOutput struct {

	// Returns a summary list of jobs.
	//
	// This member is required.
	AutoMLJobSummaries []*types.AutoMLJobSummary

	// If the previous response was truncated, you receive this token. Use it in your
	// next request to receive the next set of results.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListAutoMLJobsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpListAutoMLJobs{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpListAutoMLJobs{}, middleware.After)
	if err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListAutoMLJobs(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opListAutoMLJobs(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "ListAutoMLJobs",
	}
}
