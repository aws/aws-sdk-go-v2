// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sagemaker

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
)

const opCreateEndpointConfig = "CreateEndpointConfig"

// CreateEndpointConfigRequest returns a request value for making API operation for
// Amazon SageMaker Service.
//
// Creates an endpoint configuration that Amazon SageMaker hosting services
// uses to deploy models. In the configuration, you identify one or more models,
// created using the CreateModel API, to deploy and the resources that you want
// Amazon SageMaker to provision. Then you call the CreateEndpoint (https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html)
// API.
//
// Use this API only if you want to use Amazon SageMaker hosting services to
// deploy models into production.
//
// In the request, you define one or more ProductionVariants, each of which
// identifies a model. Each ProductionVariant parameter also describes the resources
// that you want Amazon SageMaker to provision. This includes the number and
// type of ML compute instances to deploy.
//
// If you are hosting multiple models, you also assign a VariantWeight to specify
// how much traffic you want to allocate to each model. For example, suppose
// that you want to host two models, A and B, and you assign traffic weight
// 2 for model A and 1 for model B. Amazon SageMaker distributes two-thirds
// of the traffic to Model A, and one-third to model B.
//
//    // Example sending a request using CreateEndpointConfigRequest.
//    req := client.CreateEndpointConfigRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/sagemaker-2017-07-24/CreateEndpointConfig
func (c *Client) CreateEndpointConfigRequest(input *types.CreateEndpointConfigInput) CreateEndpointConfigRequest {
	op := &aws.Operation{
		Name:       opCreateEndpointConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateEndpointConfigInput{}
	}

	req := c.newRequest(op, input, &types.CreateEndpointConfigOutput{})
	return CreateEndpointConfigRequest{Request: req, Input: input, Copy: c.CreateEndpointConfigRequest}
}

// CreateEndpointConfigRequest is the request type for the
// CreateEndpointConfig API operation.
type CreateEndpointConfigRequest struct {
	*aws.Request
	Input *types.CreateEndpointConfigInput
	Copy  func(*types.CreateEndpointConfigInput) CreateEndpointConfigRequest
}

// Send marshals and sends the CreateEndpointConfig API request.
func (r CreateEndpointConfigRequest) Send(ctx context.Context) (*CreateEndpointConfigResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateEndpointConfigResponse{
		CreateEndpointConfigOutput: r.Request.Data.(*types.CreateEndpointConfigOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateEndpointConfigResponse is the response type for the
// CreateEndpointConfig API operation.
type CreateEndpointConfigResponse struct {
	*types.CreateEndpointConfigOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateEndpointConfig request.
func (r *CreateEndpointConfigResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
