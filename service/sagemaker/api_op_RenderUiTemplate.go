// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Renders the UI template so that you can preview the worker's experience.
func (c *Client) RenderUiTemplate(ctx context.Context, params *RenderUiTemplateInput, optFns ...func(*Options)) (*RenderUiTemplateOutput, error) {
	stack := middleware.NewStack("RenderUiTemplate", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpRenderUiTemplateMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRenderUiTemplateValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRenderUiTemplate(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RenderUiTemplate",
			Err:           err,
		}
	}
	out := result.(*RenderUiTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RenderUiTemplateInput struct {
	// A Template object containing the worker UI template to render.
	UiTemplate *types.UiTemplate
	// The HumanTaskUiArn of the worker UI that you want to render. Do not provide a
	// HumanTaskUiArn if you use the UiTemplate parameter. See a list of available
	// Human Ui Amazon Resource Names (ARNs) in UiConfig ().
	HumanTaskUiArn *string
	// A RenderableTask object containing a representative task to render.
	Task *types.RenderableTask
	// The Amazon Resource Name (ARN) that has access to the S3 objects that are used
	// by the template.
	RoleArn *string
}

type RenderUiTemplateOutput struct {
	// A Liquid template that renders the HTML for the worker UI.
	RenderedContent *string
	// A list of one or more RenderingError objects if any were encountered while
	// rendering the template. If there were no errors, the list is empty.
	Errors []*types.RenderingError

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpRenderUiTemplateMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpRenderUiTemplate{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpRenderUiTemplate{}, middleware.After)
}

func newServiceMetadataMiddleware_opRenderUiTemplate(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "RenderUiTemplate",
	}
}
