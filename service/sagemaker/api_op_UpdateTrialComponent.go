// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Updates one or more properties of a trial component.
func (c *Client) UpdateTrialComponent(ctx context.Context, params *UpdateTrialComponentInput, optFns ...func(*Options)) (*UpdateTrialComponentOutput, error) {
	stack := middleware.NewStack("UpdateTrialComponent", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpUpdateTrialComponentMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateTrialComponentValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateTrialComponent(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateTrialComponent",
			Err:           err,
		}
	}
	out := result.(*UpdateTrialComponentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateTrialComponentInput struct {
	// Replaces all of the component's hyperparameters with the specified
	// hyperparameters.
	Parameters map[string]*types.TrialComponentParameterValue
	// The output artifacts to remove from the component.
	OutputArtifactsToRemove []*string
	// The new status of the component.
	Status *types.TrialComponentStatus
	// Replaces all of the component's input artifacts with the specified artifacts.
	InputArtifacts map[string]*types.TrialComponentArtifact
	// The input artifacts to remove from the component.
	InputArtifactsToRemove []*string
	// Replaces all of the component's output artifacts with the specified artifacts.
	OutputArtifacts map[string]*types.TrialComponentArtifact
	// The hyperparameters to remove from the component.
	ParametersToRemove []*string
	// When the component started.
	StartTime *time.Time
	// The name of the component to update.
	TrialComponentName *string
	// When the component ended.
	EndTime *time.Time
	// The name of the component as displayed. The name doesn't need to be unique. If
	// DisplayName isn't specified, TrialComponentName is displayed.
	DisplayName *string
}

type UpdateTrialComponentOutput struct {
	// The Amazon Resource Name (ARN) of the trial component.
	TrialComponentArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpUpdateTrialComponentMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpUpdateTrialComponent{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpUpdateTrialComponent{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateTrialComponent(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "UpdateTrialComponent",
	}
}
