// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an AutoPilot job. After you run an AutoPilot job, you can find the best
// performing model by calling , and then deploy that model by following the steps
// described in Step 6.1: Deploy the Model to Amazon SageMaker Hosting Services
// (https://docs.aws.amazon.com/sagemaker/latest/dg/ex1-deploy-model.html). For
// information about how to use AutoPilot, see Use AutoPilot to Automate Model
// Development
// (https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html).
func (c *Client) CreateAutoMLJob(ctx context.Context, params *CreateAutoMLJobInput, optFns ...func(*Options)) (*CreateAutoMLJobOutput, error) {
	stack := middleware.NewStack("CreateAutoMLJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateAutoMLJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateAutoMLJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateAutoMLJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateAutoMLJob",
			Err:           err,
		}
	}
	out := result.(*CreateAutoMLJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateAutoMLJobInput struct {
	// Identifies an AutoPilot job. Must be unique to your account and is
	// case-insensitive.
	AutoMLJobName *string
	// Defines the job's objective. You provide a MetricName and AutoML will infer
	// minimize or maximize. If this is not provided, the most commonly used
	// ObjectiveMetric for problem type will be selected.
	AutoMLJobObjective *types.AutoMLJobObjective
	// Defines the kind of preprocessing and algorithms intended for the candidates.
	// Options include: BinaryClassification, MulticlassClassification, and Regression.
	ProblemType types.ProblemType
	// Similar to InputDataConfig supported by Tuning. Format(s) supported: CSV.
	// Minimum of 1000 rows.
	InputDataConfig []*types.AutoMLChannel
	// The ARN of the role that will be used to access the data.
	RoleArn *string
	// Contains CompletionCriteria and SecurityConfig.
	AutoMLJobConfig *types.AutoMLJobConfig
	// This will generate possible candidates without training a model. A candidate is
	// a combination of data preprocessors, algorithms, and algorithm parameter
	// settings.
	GenerateCandidateDefinitionsOnly *bool
	// Similar to OutputDataConfig supported by Tuning. Format(s) supported: CSV.
	OutputDataConfig *types.AutoMLOutputDataConfig
	// Each tag consists of a key and an optional value. Tag keys must be unique per
	// resource.
	Tags []*types.Tag
}

type CreateAutoMLJobOutput struct {
	// When a job is created, it is assigned a unique ARN.
	AutoMLJobArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateAutoMLJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateAutoMLJob{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateAutoMLJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateAutoMLJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "CreateAutoMLJob",
	}
}
