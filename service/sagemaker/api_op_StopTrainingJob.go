// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sagemaker

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
)

const opStopTrainingJob = "StopTrainingJob"

// StopTrainingJobRequest returns a request value for making API operation for
// Amazon SageMaker Service.
//
// Stops a training job. To stop a job, Amazon SageMaker sends the algorithm
// the SIGTERM signal, which delays job termination for 120 seconds. Algorithms
// might use this 120-second window to save the model artifacts, so the results
// of the training is not lost.
//
// When it receives a StopTrainingJob request, Amazon SageMaker changes the
// status of the job to Stopping. After Amazon SageMaker stops the job, it sets
// the status to Stopped.
//
//    // Example sending a request using StopTrainingJobRequest.
//    req := client.StopTrainingJobRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/sagemaker-2017-07-24/StopTrainingJob
func (c *Client) StopTrainingJobRequest(input *types.StopTrainingJobInput) StopTrainingJobRequest {
	op := &aws.Operation{
		Name:       opStopTrainingJob,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StopTrainingJobInput{}
	}

	req := c.newRequest(op, input, &types.StopTrainingJobOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return StopTrainingJobRequest{Request: req, Input: input, Copy: c.StopTrainingJobRequest}
}

// StopTrainingJobRequest is the request type for the
// StopTrainingJob API operation.
type StopTrainingJobRequest struct {
	*aws.Request
	Input *types.StopTrainingJobInput
	Copy  func(*types.StopTrainingJobInput) StopTrainingJobRequest
}

// Send marshals and sends the StopTrainingJob API request.
func (r StopTrainingJobRequest) Send(ctx context.Context) (*StopTrainingJobResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StopTrainingJobResponse{
		StopTrainingJobOutput: r.Request.Data.(*types.StopTrainingJobOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StopTrainingJobResponse is the response type for the
// StopTrainingJob API operation.
type StopTrainingJobResponse struct {
	*types.StopTrainingJobOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StopTrainingJob request.
func (r *StopTrainingJobResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
