// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sagemaker

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
)

const opCreateCodeRepository = "CreateCodeRepository"

// CreateCodeRepositoryRequest returns a request value for making API operation for
// Amazon SageMaker Service.
//
// Creates a Git repository as a resource in your Amazon SageMaker account.
// You can associate the repository with notebook instances so that you can
// use Git source control for the notebooks you create. The Git repository is
// a resource in your Amazon SageMaker account, so it can be associated with
// more than one notebook instance, and it persists independently from the lifecycle
// of any notebook instances it is associated with.
//
// The repository can be hosted either in AWS CodeCommit (https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)
// or in any other Git repository.
//
//    // Example sending a request using CreateCodeRepositoryRequest.
//    req := client.CreateCodeRepositoryRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/sagemaker-2017-07-24/CreateCodeRepository
func (c *Client) CreateCodeRepositoryRequest(input *types.CreateCodeRepositoryInput) CreateCodeRepositoryRequest {
	op := &aws.Operation{
		Name:       opCreateCodeRepository,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateCodeRepositoryInput{}
	}

	req := c.newRequest(op, input, &types.CreateCodeRepositoryOutput{})
	return CreateCodeRepositoryRequest{Request: req, Input: input, Copy: c.CreateCodeRepositoryRequest}
}

// CreateCodeRepositoryRequest is the request type for the
// CreateCodeRepository API operation.
type CreateCodeRepositoryRequest struct {
	*aws.Request
	Input *types.CreateCodeRepositoryInput
	Copy  func(*types.CreateCodeRepositoryInput) CreateCodeRepositoryRequest
}

// Send marshals and sends the CreateCodeRepository API request.
func (r CreateCodeRepositoryRequest) Send(ctx context.Context) (*CreateCodeRepositoryResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateCodeRepositoryResponse{
		CreateCodeRepositoryOutput: r.Request.Data.(*types.CreateCodeRepositoryOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateCodeRepositoryResponse is the response type for the
// CreateCodeRepository API operation.
type CreateCodeRepositoryResponse struct {
	*types.CreateCodeRepositoryOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateCodeRepository request.
func (r *CreateCodeRepositoryResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
