// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an Amazon SageMaker notebook instance. A notebook instance is a machine
// learning (ML) compute instance running on a Jupyter notebook. In a
// CreateNotebookInstance request, specify the type of ML compute instance that you
// want to run. Amazon SageMaker launches the instance, installs common libraries
// that you can use to explore datasets for model training, and attaches an ML
// storage volume to the notebook instance. Amazon SageMaker also provides a set of
// example notebooks. Each notebook demonstrates how to use Amazon SageMaker with a
// specific algorithm or with a machine learning framework. After receiving the
// request, Amazon SageMaker does the following:
//
//     * Creates a network interface
// in the Amazon SageMaker VPC.
//
//     * (Option) If you specified SubnetId, Amazon
// SageMaker creates a network interface in your own VPC, which is inferred from
// the subnet ID that you provide in the input. When creating this network
// interface, Amazon SageMaker attaches the security group that you specified in
// the request to the network interface that it creates in your VPC.  </li> <li>
// <p>Launches an EC2 instance of the type specified in the request in the Amazon
// SageMaker VPC. If you specified <code>SubnetId</code> of your VPC, Amazon
// SageMaker specifies both network interfaces when launching this instance. This
// enables inbound traffic from your own VPC to the notebook instance, assuming
// that the security groups allow it.</p> </li> </ol> <p>After creating the
// notebook instance, Amazon SageMaker returns its Amazon Resource Name (ARN). You
// can't change the name of a notebook instance after you create it.</p> <p>After
// Amazon SageMaker creates the notebook instance, you can connect to the Jupyter
// server and work in Jupyter notebooks. For example, you can write code to explore
// a dataset that you can use for model training, train a model, host models by
// creating Amazon SageMaker endpoints, and validate hosted models. </p> <p>For
// more information, see <a
// href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It
// Works</a>. </p>
func (c *Client) CreateNotebookInstance(ctx context.Context, params *CreateNotebookInstanceInput, optFns ...func(*Options)) (*CreateNotebookInstanceOutput, error) {
	stack := middleware.NewStack("CreateNotebookInstance", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateNotebookInstanceMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateNotebookInstanceValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateNotebookInstance(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateNotebookInstance",
			Err:           err,
		}
	}
	out := result.(*CreateNotebookInstanceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateNotebookInstanceInput struct {
	// A Git repository to associate with the notebook instance as its default code
	// repository. This can be either the name of a Git repository stored as a resource
	// in your account, or the URL of a Git repository in AWS CodeCommit
	// (https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any
	// other Git repository. When you open a notebook instance, it opens in the
	// directory that contains this repository. For more information, see Associating
	// Git Repositories with Amazon SageMaker Notebook Instances
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
	DefaultCodeRepository *string
	// An array of up to three Git repositories to associate with the notebook
	// instance. These can be either the names of Git repositories stored as resources
	// in your account, or the URL of Git repositories in AWS CodeCommit
	// (https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any
	// other Git repository. These repositories are cloned at the same level as the
	// default repository of your notebook instance. For more information, see
	// Associating Git Repositories with Amazon SageMaker Notebook Instances
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
	AdditionalCodeRepositories []*string
	// Sets whether Amazon SageMaker provides internet access to the notebook instance.
	// If you set this to Disabled this notebook instance will be able to access
	// resources only in your VPC, and will not be able to connect to Amazon SageMaker
	// training and endpoint services unless your configure a NAT Gateway in your VPC.
	// For more information, see Notebook Instances Are Internet-Enabled by Default
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access).
	// You can set the value of this parameter to Disabled only if you set a value for
	// the SubnetId parameter.
	DirectInternetAccess types.DirectInternetAccess
	// The ID of the subnet in a VPC to which you would like to have a connectivity
	// from your ML compute instance.
	SubnetId *string
	// A list of Elastic Inference (EI) instance types to associate with this notebook
	// instance. Currently, only one instance type can be associated with a notebook
	// instance. For more information, see Using Elastic Inference in Amazon SageMaker
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
	AcceleratorTypes []types.NotebookInstanceAcceleratorType
	// The name of a lifecycle configuration to associate with the notebook instance.
	// For information about lifestyle configurations, see Step 2.1: (Optional)
	// Customize a Notebook Instance
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
	LifecycleConfigName *string
	// Whether root access is enabled or disabled for users of the notebook instance.
	// The default value is Enabled. Lifecycle configurations need root access to be
	// able to set up a notebook instance. Because of this, lifecycle configurations
	// associated with a notebook instance always run with root access even if you
	// disable root access for users.
	RootAccess types.RootAccess
	// The type of ML compute instance to launch for the notebook instance.
	InstanceType types.InstanceType
	// The size, in GB, of the ML storage volume to attach to the notebook instance.
	// The default value is 5 GB.
	VolumeSizeInGB *int32
	// A list of tags to associate with the notebook instance. You can add tags later
	// by using the CreateTags API.
	Tags []*types.Tag
	// The name of the new notebook instance.
	NotebookInstanceName *string
	// The Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon
	// SageMaker uses to encrypt data on the storage volume attached to your notebook
	// instance. The KMS key you provide must be enabled. For information, see Enabling
	// and Disabling Keys
	// (https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html) in
	// the AWS Key Management Service Developer Guide.
	KmsKeyId *string
	// When you send any requests to AWS resources from the notebook instance, Amazon
	// SageMaker assumes this role to perform tasks on your behalf. You must grant this
	// role necessary permissions so Amazon SageMaker can perform these tasks. The
	// policy must allow the Amazon SageMaker service principal
	// (sagemaker.amazonaws.com) permissions to assume this role. For more information,
	// see Amazon SageMaker Roles
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be
	// able to pass this role to Amazon SageMaker, the caller of this API must have the
	// iam:PassRole permission.
	RoleArn *string
	// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be
	// for the same VPC as specified in the subnet.
	SecurityGroupIds []*string
}

type CreateNotebookInstanceOutput struct {
	// The Amazon Resource Name (ARN) of the notebook instance.
	NotebookInstanceArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateNotebookInstanceMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateNotebookInstance{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateNotebookInstance{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateNotebookInstance(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "CreateNotebookInstance",
	}
}
