// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Use this operation to create a workforce. This operation will return an error if
// a workforce already exists in the AWS Region that you specify. You can only
// create one workforce in each AWS Region.  <p>If you want to create a new
// workforce in an AWS Region where the a workforce already exists, use the API
// operation to delete the existing workforce and then use this operation to create
// a new workforce.</p> <p>To create a private workforce using Amazon Cognito, you
// must specify a Cognito user pool in <code>CognitoConfig</code>. You can also
// create an Amazon Cognito workforce using the Amazon SageMaker console. For more
// information, see <a
// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">
// Create a Private Workforce (Amazon Cognito)</a>.</p> <p>To create a private
// workforce using your own OIDC Identity Provider (IdP), specify your IdP
// configuration in <code>OidcConfig</code>. You must create a OIDC IdP workforce
// using this API operation. For more information, see <a
// href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html">
// Create a Private Workforce (OIDC IdP)</a>.</p>
func (c *Client) CreateWorkforce(ctx context.Context, params *CreateWorkforceInput, optFns ...func(*Options)) (*CreateWorkforceOutput, error) {
	stack := middleware.NewStack("CreateWorkforce", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateWorkforceMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateWorkforceValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateWorkforce(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateWorkforce",
			Err:           err,
		}
	}
	out := result.(*CreateWorkforceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateWorkforceInput struct {
	// An array of key-value pairs that contain metadata to help you categorize and
	// organize our workforce. Each tag consists of a key and a value, both of which
	// you define.
	Tags []*types.Tag
	// Use this parameter to configure a private workforce using your own OIDC Identity
	// Provider. Do not use CognitoConfig if you specify values for OidcConfig.
	OidcConfig *types.OidcConfig
	// Use this parameter to configure an Amazon Cognito private workforce. A single
	// Cognito workforce is created using and corresponds to a single  Amazon Cognito
	// user pool
	// (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
	// <p>Do not use <code>OidcConfig</code> if you specify values for
	// <code>CognitoConfig</code>.</p>
	CognitoConfig *types.CognitoConfig
	// A list of IP address ranges (CIDRs
	// (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)). Used to
	// create an allow list of IP addresses for a private workforce. For more
	// information, see .
	SourceIpConfig *types.SourceIpConfig
	// The name of the private workforce.
	WorkforceName *string
}

type CreateWorkforceOutput struct {
	// The Amazon Resource Name (ARN) of the workforce.
	WorkforceArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateWorkforceMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateWorkforce{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateWorkforce{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateWorkforce(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "CreateWorkforce",
	}
}
