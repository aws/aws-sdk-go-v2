// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns the description of an endpoint.
func (c *Client) DescribeEndpoint(ctx context.Context, params *DescribeEndpointInput, optFns ...func(*Options)) (*DescribeEndpointOutput, error) {
	stack := middleware.NewStack("DescribeEndpoint", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeEndpointMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeEndpointValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeEndpoint(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeEndpoint",
			Err:           err,
		}
	}
	out := result.(*DescribeEndpointOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeEndpointInput struct {
	// The name of the endpoint.
	EndpointName *string
}

type DescribeEndpointOutput struct {
	// The status of the endpoint.
	//
	//     * OutOfService: Endpoint is not available to
	// take incoming requests.
	//
	//     * Creating: CreateEndpoint () is executing.
	//
	//     *
	// Updating: UpdateEndpoint () or UpdateEndpointWeightsAndCapacities () is
	// executing.
	//
	//     * SystemUpdating: Endpoint is undergoing maintenance and cannot
	// be updated or deleted or re-scaled until it has completed. This maintenance
	// operation does not change any customer-specified values such as VPC config, KMS
	// encryption, model, instance type, or instance count.
	//
	//     * RollingBack:
	// Endpoint fails to scale up or down or change its variant weight and is in the
	// process of rolling back to its previous configuration. Once the rollback
	// completes, endpoint returns to an InService status. This transitional status
	// only applies to an endpoint that has autoscaling enabled and is undergoing
	// variant weight or capacity changes as part of an
	// UpdateEndpointWeightsAndCapacities () call or when the
	// UpdateEndpointWeightsAndCapacities () operation is called explicitly.
	//
	//     *
	// InService: Endpoint is available to process incoming requests.
	//
	//     * Deleting:
	// DeleteEndpoint () is executing.
	//
	//     * Failed: Endpoint could not be created,
	// updated, or re-scaled. Use DescribeEndpointOutput$FailureReason () for
	// information about the failure. DeleteEndpoint () is the only operation that can
	// be performed on a failed endpoint.
	EndpointStatus types.EndpointStatus
	// An array of ProductionVariantSummary () objects, one for each model hosted
	// behind this endpoint.
	ProductionVariants []*types.ProductionVariantSummary
	// The name of the endpoint configuration associated with this endpoint.
	EndpointConfigName *string
	// Name of the endpoint.
	EndpointName *string
	// If the status of the endpoint is Failed, the reason why it failed.
	FailureReason *string
	// A timestamp that shows when the endpoint was created.
	CreationTime *time.Time
	// A timestamp that shows when the endpoint was last modified.
	LastModifiedTime *time.Time
	// The Amazon Resource Name (ARN) of the endpoint.
	EndpointArn *string
	//
	DataCaptureConfig *types.DataCaptureConfigSummary

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeEndpointMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeEndpoint{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeEndpoint{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeEndpoint(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "DescribeEndpoint",
	}
}
