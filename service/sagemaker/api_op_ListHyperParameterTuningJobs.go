// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Gets a list of HyperParameterTuningJobSummary () objects that describe the
// hyperparameter tuning jobs launched in your account.
func (c *Client) ListHyperParameterTuningJobs(ctx context.Context, params *ListHyperParameterTuningJobsInput, optFns ...func(*Options)) (*ListHyperParameterTuningJobsOutput, error) {
	stack := middleware.NewStack("ListHyperParameterTuningJobs", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListHyperParameterTuningJobsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListHyperParameterTuningJobs(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListHyperParameterTuningJobs",
			Err:           err,
		}
	}
	out := result.(*ListHyperParameterTuningJobsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListHyperParameterTuningJobsInput struct {
	// A filter that returns only tuning jobs that were created after the specified
	// time.
	CreationTimeAfter *time.Time
	// If the result of the previous ListHyperParameterTuningJobs request was
	// truncated, the response includes a NextToken. To retrieve the next set of tuning
	// jobs, use the token in the next request.
	NextToken *string
	// A string in the tuning job name. This filter returns only tuning jobs whose name
	// contains the specified string.
	NameContains *string
	// A filter that returns only tuning jobs that were created before the specified
	// time.
	CreationTimeBefore *time.Time
	// A filter that returns only tuning jobs that were modified before the specified
	// time.
	LastModifiedTimeBefore *time.Time
	// The maximum number of tuning jobs to return. The default value is 10.
	MaxResults *int32
	// A filter that returns only tuning jobs with the specified status.
	StatusEquals types.HyperParameterTuningJobStatus
	// A filter that returns only tuning jobs that were modified after the specified
	// time.
	LastModifiedTimeAfter *time.Time
	// The field to sort results by. The default is Name.
	SortBy types.HyperParameterTuningJobSortByOptions
	// The sort order for results. The default is Ascending.
	SortOrder types.SortOrder
}

type ListHyperParameterTuningJobsOutput struct {
	// If the result of this ListHyperParameterTuningJobs request was truncated, the
	// response includes a NextToken. To retrieve the next set of tuning jobs, use the
	// token in the next request.
	NextToken *string
	// A list of HyperParameterTuningJobSummary () objects that describe the tuning
	// jobs that the ListHyperParameterTuningJobs request returned.
	HyperParameterTuningJobSummaries []*types.HyperParameterTuningJobSummary

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListHyperParameterTuningJobsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListHyperParameterTuningJobs{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListHyperParameterTuningJobs{}, middleware.After)
}

func newServiceMetadataMiddleware_opListHyperParameterTuningJobs(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "ListHyperParameterTuningJobs",
	}
}
