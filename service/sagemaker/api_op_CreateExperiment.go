// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an SageMaker experiment. An experiment is a collection of trials that
// are observed, compared and evaluated as a group. A trial is a set of steps,
// called trial components, that produce a machine learning model. The goal of an
// experiment is to determine the components that produce the best model. Multiple
// trials are performed, each one isolating and measuring the impact of a change to
// one or more inputs, while keeping the remaining inputs constant. When you use
// Amazon SageMaker Studio or the Amazon SageMaker Python SDK, all experiments,
// trials, and trial components are automatically tracked, logged, and indexed.
// When you use the AWS SDK for Python (Boto), you must use the logging APIs
// provided by the SDK. You can add tags to experiments, trials, trial components
// and then use the Search () API to search for the tags. To add a description to
// an experiment, specify the optional Description parameter. To add a description
// later, or to change the description, call the UpdateExperiment () API. To get a
// list of all your experiments, call the ListExperiments () API. To view an
// experiment's properties, call the DescribeExperiment () API. To get a list of
// all the trials associated with an experiment, call the ListTrials () API. To
// create a trial call the CreateTrial () API.
func (c *Client) CreateExperiment(ctx context.Context, params *CreateExperimentInput, optFns ...func(*Options)) (*CreateExperimentOutput, error) {
	stack := middleware.NewStack("CreateExperiment", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateExperimentMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateExperimentValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateExperiment(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateExperiment",
			Err:           err,
		}
	}
	out := result.(*CreateExperimentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateExperimentInput struct {
	// The description of the experiment.
	Description *string
	// The name of the experiment. The name must be unique in your AWS account and is
	// not case-sensitive.
	ExperimentName *string
	// The name of the experiment as displayed. The name doesn't need to be unique. If
	// you don't specify DisplayName, the value in ExperimentName is displayed.
	DisplayName *string
	// A list of tags to associate with the experiment. You can use Search () API to
	// search on the tags.
	Tags []*types.Tag
}

type CreateExperimentOutput struct {
	// The Amazon Resource Name (ARN) of the experiment.
	ExperimentArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateExperimentMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateExperiment{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateExperiment{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateExperiment(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "sagemaker",
		OperationName: "CreateExperiment",
	}
}
