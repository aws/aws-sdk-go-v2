// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticsearchservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticsearchservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describe Elasticsearch Limits for a given InstanceType and ElasticsearchVersion.
// When modifying existing Domain, specify the DomainName () to know what Limits
// are supported for modifying.
func (c *Client) DescribeElasticsearchInstanceTypeLimits(ctx context.Context, params *DescribeElasticsearchInstanceTypeLimitsInput, optFns ...func(*Options)) (*DescribeElasticsearchInstanceTypeLimitsOutput, error) {
	stack := middleware.NewStack("DescribeElasticsearchInstanceTypeLimits", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDescribeElasticsearchInstanceTypeLimitsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeElasticsearchInstanceTypeLimitsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeElasticsearchInstanceTypeLimits(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeElasticsearchInstanceTypeLimits",
			Err:           err,
		}
	}
	out := result.(*DescribeElasticsearchInstanceTypeLimitsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Container for the parameters to DescribeElasticsearchInstanceTypeLimits ()
// operation.
type DescribeElasticsearchInstanceTypeLimitsInput struct {
	// The instance type for an Elasticsearch cluster for which Elasticsearch Limits ()
	// are needed.
	InstanceType types.ESPartitionInstanceType
	// Version of Elasticsearch for which Limits () are needed.
	ElasticsearchVersion *string
	// DomainName represents the name of the Domain that we are trying to modify. This
	// should be present only if we are querying for Elasticsearch Limits () for
	// existing domain.
	DomainName *string
}

// Container for the parameters received from
// DescribeElasticsearchInstanceTypeLimits () operation.
type DescribeElasticsearchInstanceTypeLimitsOutput struct {
	// Map of Role of the Instance and Limits that are applicable. Role performed by
	// given Instance in Elasticsearch can be one of the following:
	//
	//     * data: If the
	// given InstanceType is used as data node
	//
	//     * master: If the given InstanceType
	// is used as master node
	//
	//     * ultra_warm: If the given InstanceType is used as
	// warm node
	LimitsByRole map[string]*types.Limits

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDescribeElasticsearchInstanceTypeLimitsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDescribeElasticsearchInstanceTypeLimits{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeElasticsearchInstanceTypeLimits{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeElasticsearchInstanceTypeLimits(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "es",
		OperationName: "DescribeElasticsearchInstanceTypeLimits",
	}
}
