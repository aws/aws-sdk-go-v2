// Code generated by smithy-go-codegen DO NOT EDIT.

package datapipeline

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Task runners call EvaluateExpression to evaluate a string in the context of the
// specified object. For example, a task runner can evaluate SQL queries stored in
// Amazon S3.
func (c *Client) EvaluateExpression(ctx context.Context, params *EvaluateExpressionInput, optFns ...func(*Options)) (*EvaluateExpressionOutput, error) {
	if params == nil {
		params = &EvaluateExpressionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "EvaluateExpression", params, optFns, addOperationEvaluateExpressionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*EvaluateExpressionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the parameters for EvaluateExpression.
type EvaluateExpressionInput struct {

	// The expression to evaluate.
	//
	// This member is required.
	Expression *string

	// The ID of the object.
	//
	// This member is required.
	ObjectId *string

	// The ID of the pipeline.
	//
	// This member is required.
	PipelineId *string
}

// Contains the output of EvaluateExpression.
type EvaluateExpressionOutput struct {

	// The evaluated expression.
	//
	// This member is required.
	EvaluatedExpression *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationEvaluateExpressionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpEvaluateExpression{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpEvaluateExpression{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpEvaluateExpressionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opEvaluateExpression(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opEvaluateExpression(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "datapipeline",
		OperationName: "EvaluateExpression",
	}
}
