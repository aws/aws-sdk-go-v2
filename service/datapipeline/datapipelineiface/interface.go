// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package datapipelineiface provides an interface to enable mocking the AWS Data Pipeline service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package datapipelineiface

import (
	"github.com/aws/aws-sdk-go-v2/service/datapipeline"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline/types"
)

// ClientAPI provides an interface to enable mocking the
// datapipeline.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // AWS Data Pipeline.
//    func myFunc(svc datapipelineiface.ClientAPI) bool {
//        // Make svc.ActivatePipeline request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := datapipeline.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        datapipelineiface.ClientPI
//    }
//    func (m *mockClientClient) ActivatePipeline(input *types.ActivatePipelineInput) (*types.ActivatePipelineOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	ActivatePipelineRequest(*types.ActivatePipelineInput) datapipeline.ActivatePipelineRequest

	AddTagsRequest(*types.AddTagsInput) datapipeline.AddTagsRequest

	CreatePipelineRequest(*types.CreatePipelineInput) datapipeline.CreatePipelineRequest

	DeactivatePipelineRequest(*types.DeactivatePipelineInput) datapipeline.DeactivatePipelineRequest

	DeletePipelineRequest(*types.DeletePipelineInput) datapipeline.DeletePipelineRequest

	DescribeObjectsRequest(*types.DescribeObjectsInput) datapipeline.DescribeObjectsRequest

	DescribePipelinesRequest(*types.DescribePipelinesInput) datapipeline.DescribePipelinesRequest

	EvaluateExpressionRequest(*types.EvaluateExpressionInput) datapipeline.EvaluateExpressionRequest

	GetPipelineDefinitionRequest(*types.GetPipelineDefinitionInput) datapipeline.GetPipelineDefinitionRequest

	ListPipelinesRequest(*types.ListPipelinesInput) datapipeline.ListPipelinesRequest

	PollForTaskRequest(*types.PollForTaskInput) datapipeline.PollForTaskRequest

	PutPipelineDefinitionRequest(*types.PutPipelineDefinitionInput) datapipeline.PutPipelineDefinitionRequest

	QueryObjectsRequest(*types.QueryObjectsInput) datapipeline.QueryObjectsRequest

	RemoveTagsRequest(*types.RemoveTagsInput) datapipeline.RemoveTagsRequest

	ReportTaskProgressRequest(*types.ReportTaskProgressInput) datapipeline.ReportTaskProgressRequest

	ReportTaskRunnerHeartbeatRequest(*types.ReportTaskRunnerHeartbeatInput) datapipeline.ReportTaskRunnerHeartbeatRequest

	SetStatusRequest(*types.SetStatusInput) datapipeline.SetStatusRequest

	SetTaskStatusRequest(*types.SetTaskStatusInput) datapipeline.SetTaskStatusRequest

	ValidatePipelineDefinitionRequest(*types.ValidatePipelineDefinitionInput) datapipeline.ValidatePipelineDefinitionRequest
}

var _ ClientAPI = (*datapipeline.Client)(nil)
