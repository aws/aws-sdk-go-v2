// Code generated by smithy-go-codegen DO NOT EDIT.

package datapipeline

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Validates the specified pipeline and starts processing pipeline tasks. If the
// pipeline does not pass validation, activation fails. If you need to pause the
// pipeline to investigate an issue with a component, such as a data source or
// script, call DeactivatePipeline (). To activate a finished pipeline, modify the
// end date for the pipeline and then activate it. If you activate an on-demand
// pipeline that is already running, it will cancel all running objects and re-run
// the pipeline. StartTimestamp does not apply to on-demand pipelines.
func (c *Client) ActivatePipeline(ctx context.Context, params *ActivatePipelineInput, optFns ...func(*Options)) (*ActivatePipelineOutput, error) {
	stack := middleware.NewStack("ActivatePipeline", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpActivatePipelineMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpActivatePipelineValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opActivatePipeline(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ActivatePipeline",
			Err:           err,
		}
	}
	out := result.(*ActivatePipelineOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the parameters for ActivatePipeline.
type ActivatePipelineInput struct {
	// A list of parameter values to pass to the pipeline at activation.
	ParameterValues []*types.ParameterValue
	// The ID of the pipeline.
	PipelineId *string
	// The date and time to resume the pipeline. By default, the pipeline resumes from
	// the last completed execution.
	StartTimestamp *time.Time
}

// Contains the output of ActivatePipeline.
type ActivatePipelineOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpActivatePipelineMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpActivatePipeline{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpActivatePipeline{}, middleware.After)
}

func newServiceMetadataMiddleware_opActivatePipeline(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "datapipeline",
		OperationName: "ActivatePipeline",
	}
}
