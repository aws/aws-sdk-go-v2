// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package datapipeline

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline/types"
)

const opPollForTask = "PollForTask"

// PollForTaskRequest returns a request value for making API operation for
// AWS Data Pipeline.
//
// Task runners call PollForTask to receive a task to perform from AWS Data
// Pipeline. The task runner specifies which tasks it can perform by setting
// a value for the workerGroup parameter. The task returned can come from any
// of the pipelines that match the workerGroup value passed in by the task runner
// and that was launched using the IAM user credentials specified by the task
// runner.
//
// If tasks are ready in the work queue, PollForTask returns a response immediately.
// If no tasks are available in the queue, PollForTask uses long-polling and
// holds on to a poll connection for up to a 90 seconds, during which time the
// first newly scheduled task is handed to the task runner. To accomodate this,
// set the socket timeout in your task runner to 90 seconds. The task runner
// should not call PollForTask again on the same workerGroup until it receives
// a response, and this can take up to 90 seconds.
//
//    // Example sending a request using PollForTaskRequest.
//    req := client.PollForTaskRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/datapipeline-2012-10-29/PollForTask
func (c *Client) PollForTaskRequest(input *types.PollForTaskInput) PollForTaskRequest {
	op := &aws.Operation{
		Name:       opPollForTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PollForTaskInput{}
	}

	req := c.newRequest(op, input, &types.PollForTaskOutput{})
	return PollForTaskRequest{Request: req, Input: input, Copy: c.PollForTaskRequest}
}

// PollForTaskRequest is the request type for the
// PollForTask API operation.
type PollForTaskRequest struct {
	*aws.Request
	Input *types.PollForTaskInput
	Copy  func(*types.PollForTaskInput) PollForTaskRequest
}

// Send marshals and sends the PollForTask API request.
func (r PollForTaskRequest) Send(ctx context.Context) (*PollForTaskResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PollForTaskResponse{
		PollForTaskOutput: r.Request.Data.(*types.PollForTaskOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PollForTaskResponse is the response type for the
// PollForTask API operation.
type PollForTaskResponse struct {
	*types.PollForTaskOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PollForTask request.
func (r *PollForTaskResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
