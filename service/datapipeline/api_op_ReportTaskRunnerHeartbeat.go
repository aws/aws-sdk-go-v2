// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package datapipeline

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline/types"
)

const opReportTaskRunnerHeartbeat = "ReportTaskRunnerHeartbeat"

// ReportTaskRunnerHeartbeatRequest returns a request value for making API operation for
// AWS Data Pipeline.
//
// Task runners call ReportTaskRunnerHeartbeat every 15 minutes to indicate
// that they are operational. If the AWS Data Pipeline Task Runner is launched
// on a resource managed by AWS Data Pipeline, the web service can use this
// call to detect when the task runner application has failed and restart a
// new instance.
//
//    // Example sending a request using ReportTaskRunnerHeartbeatRequest.
//    req := client.ReportTaskRunnerHeartbeatRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/datapipeline-2012-10-29/ReportTaskRunnerHeartbeat
func (c *Client) ReportTaskRunnerHeartbeatRequest(input *types.ReportTaskRunnerHeartbeatInput) ReportTaskRunnerHeartbeatRequest {
	op := &aws.Operation{
		Name:       opReportTaskRunnerHeartbeat,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ReportTaskRunnerHeartbeatInput{}
	}

	req := c.newRequest(op, input, &types.ReportTaskRunnerHeartbeatOutput{})
	return ReportTaskRunnerHeartbeatRequest{Request: req, Input: input, Copy: c.ReportTaskRunnerHeartbeatRequest}
}

// ReportTaskRunnerHeartbeatRequest is the request type for the
// ReportTaskRunnerHeartbeat API operation.
type ReportTaskRunnerHeartbeatRequest struct {
	*aws.Request
	Input *types.ReportTaskRunnerHeartbeatInput
	Copy  func(*types.ReportTaskRunnerHeartbeatInput) ReportTaskRunnerHeartbeatRequest
}

// Send marshals and sends the ReportTaskRunnerHeartbeat API request.
func (r ReportTaskRunnerHeartbeatRequest) Send(ctx context.Context) (*ReportTaskRunnerHeartbeatResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ReportTaskRunnerHeartbeatResponse{
		ReportTaskRunnerHeartbeatOutput: r.Request.Data.(*types.ReportTaskRunnerHeartbeatOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ReportTaskRunnerHeartbeatResponse is the response type for the
// ReportTaskRunnerHeartbeat API operation.
type ReportTaskRunnerHeartbeatResponse struct {
	*types.ReportTaskRunnerHeartbeatOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ReportTaskRunnerHeartbeat request.
func (r *ReportTaskRunnerHeartbeatResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
