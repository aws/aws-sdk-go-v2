// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package opsworks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opsworks/types"
)

const opDescribeEcsClusters = "DescribeEcsClusters"

// DescribeEcsClustersRequest returns a request value for making API operation for
// AWS OpsWorks.
//
// Describes Amazon ECS clusters that are registered with a stack. If you specify
// only a stack ID, you can use the MaxResults and NextToken parameters to paginate
// the response. However, AWS OpsWorks Stacks currently supports only one cluster
// per layer, so the result set has a maximum of one element.
//
// Required Permissions: To use this action, an IAM user must have a Show, Deploy,
// or Manage permissions level for the stack or an attached policy that explicitly
// grants permission. For more information about user permissions, see Managing
// User Permissions (https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).
//
// This call accepts only one resource-identifying parameter.
//
//    // Example sending a request using DescribeEcsClustersRequest.
//    req := client.DescribeEcsClustersRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/opsworks-2013-02-18/DescribeEcsClusters
func (c *Client) DescribeEcsClustersRequest(input *types.DescribeEcsClustersInput) DescribeEcsClustersRequest {
	op := &aws.Operation{
		Name:       opDescribeEcsClusters,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeEcsClustersInput{}
	}

	req := c.newRequest(op, input, &types.DescribeEcsClustersOutput{})
	return DescribeEcsClustersRequest{Request: req, Input: input, Copy: c.DescribeEcsClustersRequest}
}

// DescribeEcsClustersRequest is the request type for the
// DescribeEcsClusters API operation.
type DescribeEcsClustersRequest struct {
	*aws.Request
	Input *types.DescribeEcsClustersInput
	Copy  func(*types.DescribeEcsClustersInput) DescribeEcsClustersRequest
}

// Send marshals and sends the DescribeEcsClusters API request.
func (r DescribeEcsClustersRequest) Send(ctx context.Context) (*DescribeEcsClustersResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeEcsClustersResponse{
		DescribeEcsClustersOutput: r.Request.Data.(*types.DescribeEcsClustersOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeEcsClustersRequestPaginator returns a paginator for DescribeEcsClusters.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeEcsClustersRequest(input)
//   p := opsworks.NewDescribeEcsClustersRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeEcsClustersPaginator(req DescribeEcsClustersRequest) DescribeEcsClustersPaginator {
	return DescribeEcsClustersPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeEcsClustersInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeEcsClustersPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeEcsClustersPaginator struct {
	aws.Pager
}

func (p *DescribeEcsClustersPaginator) CurrentPage() *types.DescribeEcsClustersOutput {
	return p.Pager.CurrentPage().(*types.DescribeEcsClustersOutput)
}

// DescribeEcsClustersResponse is the response type for the
// DescribeEcsClusters API operation.
type DescribeEcsClustersResponse struct {
	*types.DescribeEcsClustersOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeEcsClusters request.
func (r *DescribeEcsClustersResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
