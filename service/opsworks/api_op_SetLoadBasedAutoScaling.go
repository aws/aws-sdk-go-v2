// Code generated by smithy-go-codegen DO NOT EDIT.

package opsworks

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/opsworks/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Specify the load-based auto scaling configuration for a specified layer. For
// more information, see Managing Load with Time-based and Load-based Instances
// (https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html).
// To use load-based auto scaling, you must create a set of load-based auto scaling
// instances. Load-based auto scaling operates only on the instances from that set,
// so you must ensure that you have created enough instances to handle the maximum
// anticipated load. Required Permissions: To use this action, an IAM user must
// have a Manage permissions level for the stack, or an attached policy that
// explicitly grants permissions. For more information on user permissions, see
// Managing User Permissions
// (https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).
func (c *Client) SetLoadBasedAutoScaling(ctx context.Context, params *SetLoadBasedAutoScalingInput, optFns ...func(*Options)) (*SetLoadBasedAutoScalingOutput, error) {
	stack := middleware.NewStack("SetLoadBasedAutoScaling", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpSetLoadBasedAutoScalingMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSetLoadBasedAutoScalingValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSetLoadBasedAutoScaling(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SetLoadBasedAutoScaling",
			Err:           err,
		}
	}
	out := result.(*SetLoadBasedAutoScalingOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SetLoadBasedAutoScalingInput struct {
	// An AutoScalingThresholds object with the upscaling threshold configuration. If
	// the load exceeds these thresholds for a specified amount of time, AWS OpsWorks
	// Stacks starts a specified number of instances.
	UpScaling *types.AutoScalingThresholds
	// The layer ID.
	LayerId *string
	// Enables load-based auto scaling for the layer.
	Enable *bool
	// An AutoScalingThresholds object with the downscaling threshold configuration. If
	// the load falls below these thresholds for a specified amount of time, AWS
	// OpsWorks Stacks stops a specified number of instances.
	DownScaling *types.AutoScalingThresholds
}

type SetLoadBasedAutoScalingOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpSetLoadBasedAutoScalingMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpSetLoadBasedAutoScaling{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpSetLoadBasedAutoScaling{}, middleware.After)
}

func newServiceMetadataMiddleware_opSetLoadBasedAutoScaling(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "opsworks",
		OperationName: "SetLoadBasedAutoScaling",
	}
}
