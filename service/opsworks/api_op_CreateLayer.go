// Code generated by smithy-go-codegen DO NOT EDIT.

package opsworks

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/opsworks/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a layer. For more information, see How to Create a Layer
// (https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-create.html).
// You should use CreateLayer for noncustom layer types such as PHP App Server only
// if the stack does not have an existing layer of that type. A stack can have at
// most one instance of each noncustom layer; if you attempt to create a second
// instance, CreateLayer fails. A stack can have an arbitrary number of custom
// layers, so you can call CreateLayer as many times as you like for that layer
// type. Required Permissions: To use this action, an IAM user must have a Manage
// permissions level for the stack, or an attached policy that explicitly grants
// permissions. For more information on user permissions, see Managing User
// Permissions
// (https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html).
func (c *Client) CreateLayer(ctx context.Context, params *CreateLayerInput, optFns ...func(*Options)) (*CreateLayerOutput, error) {
	stack := middleware.NewStack("CreateLayer", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateLayerMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateLayerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateLayer(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateLayer",
			Err:           err,
		}
	}
	out := result.(*CreateLayerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateLayerInput struct {
	// Whether to use Amazon EBS-optimized instances.
	UseEbsOptimizedInstances *bool
	// The ARN of an IAM profile to be used for the layer's EC2 instances. For more
	// information about IAM ARNs, see Using Identifiers
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html).
	CustomInstanceProfileArn *string
	// Whether to disable auto healing for the layer.
	EnableAutoHealing *bool
	// A LifeCycleEventConfiguration object that you can use to configure the Shutdown
	// event to specify an execution timeout and enable or disable Elastic Load
	// Balancer connection draining.
	LifecycleEventConfiguration *types.LifecycleEventConfiguration
	// The layer stack ID.
	StackId *string
	// The layer name, which is used by the console.
	Name *string
	// For custom layers only, use this parameter to specify the layer's short name,
	// which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short
	// name is also used as the name for the directory where your app files are
	// installed. It can have a maximum of 200 characters, which are limited to the
	// alphanumeric characters, '-', '_', and '.'. The built-in layers' short names are
	// defined by AWS OpsWorks Stacks. For more information, see the Layer Reference
	// (https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html).
	Shortname *string
	// Whether to install operating system and package updates when the instance boots.
	// The default value is true. To control when updates are installed, set this value
	// to false. You must then update your instances manually by using CreateDeployment
	// () to run the update_dependencies stack command or by manually running yum
	// (Amazon Linux) or apt-get (Ubuntu) on the instances. To ensure that your
	// instances have the latest security updates, we strongly recommend using the
	// default value of true.
	InstallUpdatesOnBoot *bool
	// Specifies CloudWatch Logs configuration options for the layer. For more
	// information, see CloudWatchLogsLogStream ().
	CloudWatchLogsConfiguration *types.CloudWatchLogsConfiguration
	// An array of Package objects that describes the layer packages.
	Packages []*string
	// Whether to automatically assign an Elastic IP address
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
	// to the layer's instances. For more information, see How to Edit a Layer
	// (https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html).
	AutoAssignElasticIps *bool
	// An array containing the layer custom security group IDs.
	CustomSecurityGroupIds []*string
	// The layer type. A stack cannot have more than one built-in layer of the same
	// type. It can have any number of custom layers. Built-in layers are not available
	// in Chef 12 stacks.
	Type types.LayerType
	// A JSON-formatted string containing custom stack configuration and deployment
	// attributes to be installed on the layer's instances. For more information, see
	// Using Custom JSON
	// (https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html).
	// This feature is supported as of version 1.7.42 of the AWS CLI.
	CustomJson *string
	// A LayerCustomRecipes object that specifies the layer custom recipes.
	CustomRecipes *types.Recipes
	// A VolumeConfigurations object that describes the layer's Amazon EBS volumes.
	VolumeConfigurations []*types.VolumeConfiguration
	// For stacks that are running in a VPC, whether to automatically assign a public
	// IP address to the layer's instances. For more information, see How to Edit a
	// Layer
	// (https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html).
	AutoAssignPublicIps *bool
	// One or more user-defined key-value pairs to be added to the stack attributes. To
	// create a cluster layer, set the EcsClusterArn attribute to the cluster's ARN.
	Attributes map[string]*string
}

// Contains the response to a CreateLayer request.
type CreateLayerOutput struct {
	// The layer ID.
	LayerId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateLayerMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateLayer{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateLayer{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateLayer(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "opsworks",
		OperationName: "CreateLayer",
	}
}
