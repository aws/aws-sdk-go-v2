// Code generated by smithy-go-codegen DO NOT EDIT.

package opsworks

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"net/http"
	"time"
)

const ServiceID = "OpsWorks"
const ServiceAPIVersion = "2013-02-18"

// AWS OpsWorks Welcome to the AWS OpsWorks Stacks API Reference. This guide
// provides descriptions, syntax, and usage examples for AWS OpsWorks Stacks
// actions and data types, including common parameters and error codes. AWS
// OpsWorks Stacks is an application management service that provides an integrated
// experience for overseeing the complete application lifecycle. For information
// about this product, go to the AWS OpsWorks (http://aws.amazon.com/opsworks/)
// details page.  <p> <b>SDKs and CLI</b> </p> <p>The most common way to use the
// AWS OpsWorks Stacks API is by using the AWS Command Line Interface (CLI) or by
// using one of the AWS SDKs to implement applications in your preferred language.
// For more information, see:</p> <ul> <li> <p> <a
// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html">AWS
// CLI</a> </p> </li> <li> <p> <a
// href="https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html">AWS
// SDK for Java</a> </p> </li> <li> <p> <a
// href="https://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm">AWS
// SDK for .NET</a> </p> </li> <li> <p> <a
// href="https://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html">AWS
// SDK for PHP 2</a> </p> </li> <li> <p> <a
// href="http://docs.aws.amazon.com/sdkforruby/api/">AWS SDK for Ruby</a> </p>
// </li> <li> <p> <a
// href="http://aws.amazon.com/documentation/sdkforjavascript/">AWS SDK for
// Node.js</a> </p> </li> <li> <p> <a
// href="http://docs.pythonboto.org/en/latest/ref/opsworks.html">AWS SDK for
// Python(Boto)</a> </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks
// Stacks supports the following endpoints, all HTTPS. You must connect to one of
// the following endpoints. Stacks can only be accessed or managed within the
// endpoint in which they are created.</p> <ul> <li>
// <p>opsworks.us-east-1.amazonaws.com</p> </li> <li>
// <p>opsworks.us-east-2.amazonaws.com</p> </li> <li>
// <p>opsworks.us-west-1.amazonaws.com</p> </li> <li>
// <p>opsworks.us-west-2.amazonaws.com</p> </li> <li>
// <p>opsworks.ca-central-1.amazonaws.com (API only; not available in the AWS
// console)</p> </li> <li> <p>opsworks.eu-west-1.amazonaws.com</p> </li> <li>
// <p>opsworks.eu-west-2.amazonaws.com</p> </li> <li>
// <p>opsworks.eu-west-3.amazonaws.com</p> </li> <li>
// <p>opsworks.eu-central-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-northeast-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-northeast-2.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-south-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-southeast-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-southeast-2.amazonaws.com</p> </li> <li>
// <p>opsworks.sa-east-1.amazonaws.com</p> </li> </ul> <p> <b>Chef Versions</b>
// </p> <p>When you call <a>CreateStack</a>, <a>CloneStack</a>, or
// <a>UpdateStack</a> we recommend you use the <code>ConfigurationManager</code>
// parameter to specify the Chef version. The recommended and default value for
// Linux stacks is currently 12. Windows stacks use Chef 12.2. For more
// information, see <a
// href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html">Chef
// Versions</a>.</p> <note> <p>You can specify Chef 12, 11.10, or 11.4 for your
// Linux stack. We recommend migrating your existing Linux stacks to Chef 12 as
// soon as possible.</p> </note>
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveHTTPSignerV4(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []func(*middleware.Stack) error

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// Signature Version 4 (SigV4) Signer
	HTTPSignerV4 HTTPSignerV4

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]func(*middleware.Stack) error, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}
func (c *Client) invokeOperation(ctx context.Context, opID string, params interface{}, optFns []func(*Options), stackFns ...func(*middleware.Stack, Options) error) (result interface{}, metadata middleware.Metadata, err error) {
	stack := middleware.NewStack(opID, smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}

	for _, fn := range stackFns {
		if err := fn(stack, options); err != nil {
			return nil, metadata, err
		}
	}

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, metadata, err
		}
	}

	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err = handler.Handle(ctx, params)
	if err != nil {
		err = &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: opID,
			Err:           err,
		}
	}
	return result, metadata, err
}

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
		APIOptions:  cfg.APIOptions,
	}
	resolveAWSEndpointResolver(cfg, &opts)
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func resolveAWSEndpointResolver(cfg aws.Config, o *Options) {
	if cfg.EndpointResolver == nil {
		return
	}
	o.EndpointResolver = WithEndpointResolver(cfg.EndpointResolver, NewDefaultEndpointResolver())
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("opsworks")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, o.HTTPSignerV4), middleware.After)
}

type HTTPSignerV4 interface {
	SignHTTP(ctx context.Context, credentials aws.Credentials, r *http.Request, payloadHash string, service string, region string, signingTime time.Time) error
}

func resolveHTTPSignerV4(o *Options) {
	if o.HTTPSignerV4 != nil {
		return
	}
	o.HTTPSignerV4 = v4.NewSigner()
}

func addRetryMiddlewares(stack *middleware.Stack, o Options) error {
	mo := retry.AddRetryMiddlewaresOptions{
		Retryer: o.Retryer,
	}
	return retry.AddRetryMiddlewares(stack, mo)
}

func addRequestIDRetrieverMiddleware(stack *middleware.Stack) {
	awsmiddleware.AddRequestIDRetrieverMiddleware(stack)
}

func addResponseErrorMiddleware(stack *middleware.Stack) {
	awshttp.AddResponseErrorMiddleware(stack)
}
