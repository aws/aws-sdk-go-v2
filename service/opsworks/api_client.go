// Code generated by smithy-go-codegen DO NOT EDIT.

package opsworks

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	"net/http"
)

const ServiceID = "OpsWorks"

// AWS OpsWorks Welcome to the AWS OpsWorks Stacks API Reference. This guide
// provides descriptions, syntax, and usage examples for AWS OpsWorks Stacks
// actions and data types, including common parameters and error codes. AWS
// OpsWorks Stacks is an application management service that provides an integrated
// experience for overseeing the complete application lifecycle. For information
// about this product, go to the AWS OpsWorks (http://aws.amazon.com/opsworks/)
// details page.  <p> <b>SDKs and CLI</b> </p> <p>The most common way to use the
// AWS OpsWorks Stacks API is by using the AWS Command Line Interface (CLI) or by
// using one of the AWS SDKs to implement applications in your preferred language.
// For more information, see:</p> <ul> <li> <p> <a
// href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html">AWS
// CLI</a> </p> </li> <li> <p> <a
// href="https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html">AWS
// SDK for Java</a> </p> </li> <li> <p> <a
// href="https://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm">AWS
// SDK for .NET</a> </p> </li> <li> <p> <a
// href="https://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html">AWS
// SDK for PHP 2</a> </p> </li> <li> <p> <a
// href="http://docs.aws.amazon.com/sdkforruby/api/">AWS SDK for Ruby</a> </p>
// </li> <li> <p> <a
// href="http://aws.amazon.com/documentation/sdkforjavascript/">AWS SDK for
// Node.js</a> </p> </li> <li> <p> <a
// href="http://docs.pythonboto.org/en/latest/ref/opsworks.html">AWS SDK for
// Python(Boto)</a> </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks
// Stacks supports the following endpoints, all HTTPS. You must connect to one of
// the following endpoints. Stacks can only be accessed or managed within the
// endpoint in which they are created.</p> <ul> <li>
// <p>opsworks.us-east-1.amazonaws.com</p> </li> <li>
// <p>opsworks.us-east-2.amazonaws.com</p> </li> <li>
// <p>opsworks.us-west-1.amazonaws.com</p> </li> <li>
// <p>opsworks.us-west-2.amazonaws.com</p> </li> <li>
// <p>opsworks.ca-central-1.amazonaws.com (API only; not available in the AWS
// console)</p> </li> <li> <p>opsworks.eu-west-1.amazonaws.com</p> </li> <li>
// <p>opsworks.eu-west-2.amazonaws.com</p> </li> <li>
// <p>opsworks.eu-west-3.amazonaws.com</p> </li> <li>
// <p>opsworks.eu-central-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-northeast-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-northeast-2.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-south-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-southeast-1.amazonaws.com</p> </li> <li>
// <p>opsworks.ap-southeast-2.amazonaws.com</p> </li> <li>
// <p>opsworks.sa-east-1.amazonaws.com</p> </li> </ul> <p> <b>Chef Versions</b>
// </p> <p>When you call <a>CreateStack</a>, <a>CloneStack</a>, or
// <a>UpdateStack</a> we recommend you use the <code>ConfigurationManager</code>
// parameter to specify the Chef version. The recommended and default value for
// Linux stacks is currently 12. Windows stacks use Chef 12.2. For more
// information, see <a
// href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html">Chef
// Versions</a>.</p> <note> <p>You can specify Chef 12, 11.10, or 11.4 for your
// Linux stack. We recommend migrating your existing Linux stacks to Chef 12 as
// soon as possible.</p> </note>
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []APIOptionFunc

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// An integer value representing the logging level.
	LogLevel aws.LogLevel

	// The logger writer interface to write logging messages to.
	Logger aws.Logger

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

func (o Options) GetCredentials() aws.CredentialsProvider {
	return o.Credentials
}

func (o Options) GetEndpointOptions() ResolverOptions {
	return o.EndpointOptions
}

func (o Options) GetEndpointResolver() EndpointResolver {
	return o.EndpointResolver
}

func (o Options) GetLogLevel() aws.LogLevel {
	return o.LogLevel
}

func (o Options) GetLogger() aws.Logger {
	return o.Logger
}

func (o Options) GetRegion() string {
	return o.Region
}

func (o Options) GetRetryer() retry.Retryer {
	return o.Retryer
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]APIOptionFunc, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}

type APIOptionFunc func(*middleware.Stack) error

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		LogLevel:    cfg.LogLevel,
		Logger:      cfg.Logger,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
	}
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("opsworks")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	signer := v4.Signer{}
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, signer), middleware.After)
}
