// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AppAttributesKeys string

// Enum values for AppAttributesKeys
const (
	AppAttributesKeysDocumentroot        AppAttributesKeys = "DocumentRoot"
	AppAttributesKeysRailsenv            AppAttributesKeys = "RailsEnv"
	AppAttributesKeysAutobundleondeploy  AppAttributesKeys = "AutoBundleOnDeploy"
	AppAttributesKeysAwsflowrubysettings AppAttributesKeys = "AwsFlowRubySettings"
)

// Values returns all known values for AppAttributesKeys. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AppAttributesKeys) Values() []AppAttributesKeys {
	return []AppAttributesKeys{
		"DocumentRoot",
		"RailsEnv",
		"AutoBundleOnDeploy",
		"AwsFlowRubySettings",
	}
}

type AppType string

// Enum values for AppType
const (
	AppTypeAwsFlowRuby AppType = "aws-flow-ruby"
	AppTypeJava        AppType = "java"
	AppTypeRails       AppType = "rails"
	AppTypePhp         AppType = "php"
	AppTypeNodejs      AppType = "nodejs"
	AppTypeStatic      AppType = "static"
	AppTypeOther       AppType = "other"
)

// Values returns all known values for AppType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (AppType) Values() []AppType {
	return []AppType{
		"aws-flow-ruby",
		"java",
		"rails",
		"php",
		"nodejs",
		"static",
		"other",
	}
}

type Architecture string

// Enum values for Architecture
const (
	ArchitectureX86_64 Architecture = "x86_64"
	ArchitectureI386   Architecture = "i386"
)

// Values returns all known values for Architecture. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (Architecture) Values() []Architecture {
	return []Architecture{
		"x86_64",
		"i386",
	}
}

type AutoScalingType string

// Enum values for AutoScalingType
const (
	AutoScalingTypeLoad  AutoScalingType = "load"
	AutoScalingTypeTimer AutoScalingType = "timer"
)

// Values returns all known values for AutoScalingType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AutoScalingType) Values() []AutoScalingType {
	return []AutoScalingType{
		"load",
		"timer",
	}
}

type CloudWatchLogsEncoding string

// Enum values for CloudWatchLogsEncoding
const (
	CloudWatchLogsEncodingAscii           CloudWatchLogsEncoding = "ascii"
	CloudWatchLogsEncodingBig5            CloudWatchLogsEncoding = "big5"
	CloudWatchLogsEncodingBig5hkscs       CloudWatchLogsEncoding = "big5hkscs"
	CloudWatchLogsEncodingCp037           CloudWatchLogsEncoding = "cp037"
	CloudWatchLogsEncodingCp424           CloudWatchLogsEncoding = "cp424"
	CloudWatchLogsEncodingCp437           CloudWatchLogsEncoding = "cp437"
	CloudWatchLogsEncodingCp500           CloudWatchLogsEncoding = "cp500"
	CloudWatchLogsEncodingCp720           CloudWatchLogsEncoding = "cp720"
	CloudWatchLogsEncodingCp737           CloudWatchLogsEncoding = "cp737"
	CloudWatchLogsEncodingCp775           CloudWatchLogsEncoding = "cp775"
	CloudWatchLogsEncodingCp850           CloudWatchLogsEncoding = "cp850"
	CloudWatchLogsEncodingCp852           CloudWatchLogsEncoding = "cp852"
	CloudWatchLogsEncodingCp855           CloudWatchLogsEncoding = "cp855"
	CloudWatchLogsEncodingCp856           CloudWatchLogsEncoding = "cp856"
	CloudWatchLogsEncodingCp857           CloudWatchLogsEncoding = "cp857"
	CloudWatchLogsEncodingCp858           CloudWatchLogsEncoding = "cp858"
	CloudWatchLogsEncodingCp860           CloudWatchLogsEncoding = "cp860"
	CloudWatchLogsEncodingCp861           CloudWatchLogsEncoding = "cp861"
	CloudWatchLogsEncodingCp862           CloudWatchLogsEncoding = "cp862"
	CloudWatchLogsEncodingCp863           CloudWatchLogsEncoding = "cp863"
	CloudWatchLogsEncodingCp864           CloudWatchLogsEncoding = "cp864"
	CloudWatchLogsEncodingCp865           CloudWatchLogsEncoding = "cp865"
	CloudWatchLogsEncodingCp866           CloudWatchLogsEncoding = "cp866"
	CloudWatchLogsEncodingCp869           CloudWatchLogsEncoding = "cp869"
	CloudWatchLogsEncodingCp874           CloudWatchLogsEncoding = "cp874"
	CloudWatchLogsEncodingCp875           CloudWatchLogsEncoding = "cp875"
	CloudWatchLogsEncodingCp932           CloudWatchLogsEncoding = "cp932"
	CloudWatchLogsEncodingCp949           CloudWatchLogsEncoding = "cp949"
	CloudWatchLogsEncodingCp950           CloudWatchLogsEncoding = "cp950"
	CloudWatchLogsEncodingCp1006          CloudWatchLogsEncoding = "cp1006"
	CloudWatchLogsEncodingCp1026          CloudWatchLogsEncoding = "cp1026"
	CloudWatchLogsEncodingCp1140          CloudWatchLogsEncoding = "cp1140"
	CloudWatchLogsEncodingCp1250          CloudWatchLogsEncoding = "cp1250"
	CloudWatchLogsEncodingCp1251          CloudWatchLogsEncoding = "cp1251"
	CloudWatchLogsEncodingCp1252          CloudWatchLogsEncoding = "cp1252"
	CloudWatchLogsEncodingCp1253          CloudWatchLogsEncoding = "cp1253"
	CloudWatchLogsEncodingCp1254          CloudWatchLogsEncoding = "cp1254"
	CloudWatchLogsEncodingCp1255          CloudWatchLogsEncoding = "cp1255"
	CloudWatchLogsEncodingCp1256          CloudWatchLogsEncoding = "cp1256"
	CloudWatchLogsEncodingCp1257          CloudWatchLogsEncoding = "cp1257"
	CloudWatchLogsEncodingCp1258          CloudWatchLogsEncoding = "cp1258"
	CloudWatchLogsEncodingEuc_jp          CloudWatchLogsEncoding = "euc_jp"
	CloudWatchLogsEncodingEuc_jis_2004    CloudWatchLogsEncoding = "euc_jis_2004"
	CloudWatchLogsEncodingEuc_jisx0213    CloudWatchLogsEncoding = "euc_jisx0213"
	CloudWatchLogsEncodingEuc_kr          CloudWatchLogsEncoding = "euc_kr"
	CloudWatchLogsEncodingGb2312          CloudWatchLogsEncoding = "gb2312"
	CloudWatchLogsEncodingGbk             CloudWatchLogsEncoding = "gbk"
	CloudWatchLogsEncodingGb18030         CloudWatchLogsEncoding = "gb18030"
	CloudWatchLogsEncodingHz              CloudWatchLogsEncoding = "hz"
	CloudWatchLogsEncodingIso2022_jp      CloudWatchLogsEncoding = "iso2022_jp"
	CloudWatchLogsEncodingIso2022_jp_1    CloudWatchLogsEncoding = "iso2022_jp_1"
	CloudWatchLogsEncodingIso2022_jp_2    CloudWatchLogsEncoding = "iso2022_jp_2"
	CloudWatchLogsEncodingIso2022_jp_2004 CloudWatchLogsEncoding = "iso2022_jp_2004"
	CloudWatchLogsEncodingIso2022_jp_3    CloudWatchLogsEncoding = "iso2022_jp_3"
	CloudWatchLogsEncodingIso2022_jp_ext  CloudWatchLogsEncoding = "iso2022_jp_ext"
	CloudWatchLogsEncodingIso2022_kr      CloudWatchLogsEncoding = "iso2022_kr"
	CloudWatchLogsEncodingLatin_1         CloudWatchLogsEncoding = "latin_1"
	CloudWatchLogsEncodingIso8859_2       CloudWatchLogsEncoding = "iso8859_2"
	CloudWatchLogsEncodingIso8859_3       CloudWatchLogsEncoding = "iso8859_3"
	CloudWatchLogsEncodingIso8859_4       CloudWatchLogsEncoding = "iso8859_4"
	CloudWatchLogsEncodingIso8859_5       CloudWatchLogsEncoding = "iso8859_5"
	CloudWatchLogsEncodingIso8859_6       CloudWatchLogsEncoding = "iso8859_6"
	CloudWatchLogsEncodingIso8859_7       CloudWatchLogsEncoding = "iso8859_7"
	CloudWatchLogsEncodingIso8859_8       CloudWatchLogsEncoding = "iso8859_8"
	CloudWatchLogsEncodingIso8859_9       CloudWatchLogsEncoding = "iso8859_9"
	CloudWatchLogsEncodingIso8859_10      CloudWatchLogsEncoding = "iso8859_10"
	CloudWatchLogsEncodingIso8859_13      CloudWatchLogsEncoding = "iso8859_13"
	CloudWatchLogsEncodingIso8859_14      CloudWatchLogsEncoding = "iso8859_14"
	CloudWatchLogsEncodingIso8859_15      CloudWatchLogsEncoding = "iso8859_15"
	CloudWatchLogsEncodingIso8859_16      CloudWatchLogsEncoding = "iso8859_16"
	CloudWatchLogsEncodingJohab           CloudWatchLogsEncoding = "johab"
	CloudWatchLogsEncodingKoi8_r          CloudWatchLogsEncoding = "koi8_r"
	CloudWatchLogsEncodingKoi8_u          CloudWatchLogsEncoding = "koi8_u"
	CloudWatchLogsEncodingMac_cyrillic    CloudWatchLogsEncoding = "mac_cyrillic"
	CloudWatchLogsEncodingMac_greek       CloudWatchLogsEncoding = "mac_greek"
	CloudWatchLogsEncodingMac_iceland     CloudWatchLogsEncoding = "mac_iceland"
	CloudWatchLogsEncodingMac_latin2      CloudWatchLogsEncoding = "mac_latin2"
	CloudWatchLogsEncodingMac_roman       CloudWatchLogsEncoding = "mac_roman"
	CloudWatchLogsEncodingMac_turkish     CloudWatchLogsEncoding = "mac_turkish"
	CloudWatchLogsEncodingPtcp154         CloudWatchLogsEncoding = "ptcp154"
	CloudWatchLogsEncodingShift_jis       CloudWatchLogsEncoding = "shift_jis"
	CloudWatchLogsEncodingShift_jis_2004  CloudWatchLogsEncoding = "shift_jis_2004"
	CloudWatchLogsEncodingShift_jisx0213  CloudWatchLogsEncoding = "shift_jisx0213"
	CloudWatchLogsEncodingUtf_32          CloudWatchLogsEncoding = "utf_32"
	CloudWatchLogsEncodingUtf_32_be       CloudWatchLogsEncoding = "utf_32_be"
	CloudWatchLogsEncodingUtf_32_le       CloudWatchLogsEncoding = "utf_32_le"
	CloudWatchLogsEncodingUtf_16          CloudWatchLogsEncoding = "utf_16"
	CloudWatchLogsEncodingUtf_16_be       CloudWatchLogsEncoding = "utf_16_be"
	CloudWatchLogsEncodingUtf_16_le       CloudWatchLogsEncoding = "utf_16_le"
	CloudWatchLogsEncodingUtf_7           CloudWatchLogsEncoding = "utf_7"
	CloudWatchLogsEncodingUtf_8           CloudWatchLogsEncoding = "utf_8"
	CloudWatchLogsEncodingUtf_8_sig       CloudWatchLogsEncoding = "utf_8_sig"
)

// Values returns all known values for CloudWatchLogsEncoding. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CloudWatchLogsEncoding) Values() []CloudWatchLogsEncoding {
	return []CloudWatchLogsEncoding{
		"ascii",
		"big5",
		"big5hkscs",
		"cp037",
		"cp424",
		"cp437",
		"cp500",
		"cp720",
		"cp737",
		"cp775",
		"cp850",
		"cp852",
		"cp855",
		"cp856",
		"cp857",
		"cp858",
		"cp860",
		"cp861",
		"cp862",
		"cp863",
		"cp864",
		"cp865",
		"cp866",
		"cp869",
		"cp874",
		"cp875",
		"cp932",
		"cp949",
		"cp950",
		"cp1006",
		"cp1026",
		"cp1140",
		"cp1250",
		"cp1251",
		"cp1252",
		"cp1253",
		"cp1254",
		"cp1255",
		"cp1256",
		"cp1257",
		"cp1258",
		"euc_jp",
		"euc_jis_2004",
		"euc_jisx0213",
		"euc_kr",
		"gb2312",
		"gbk",
		"gb18030",
		"hz",
		"iso2022_jp",
		"iso2022_jp_1",
		"iso2022_jp_2",
		"iso2022_jp_2004",
		"iso2022_jp_3",
		"iso2022_jp_ext",
		"iso2022_kr",
		"latin_1",
		"iso8859_2",
		"iso8859_3",
		"iso8859_4",
		"iso8859_5",
		"iso8859_6",
		"iso8859_7",
		"iso8859_8",
		"iso8859_9",
		"iso8859_10",
		"iso8859_13",
		"iso8859_14",
		"iso8859_15",
		"iso8859_16",
		"johab",
		"koi8_r",
		"koi8_u",
		"mac_cyrillic",
		"mac_greek",
		"mac_iceland",
		"mac_latin2",
		"mac_roman",
		"mac_turkish",
		"ptcp154",
		"shift_jis",
		"shift_jis_2004",
		"shift_jisx0213",
		"utf_32",
		"utf_32_be",
		"utf_32_le",
		"utf_16",
		"utf_16_be",
		"utf_16_le",
		"utf_7",
		"utf_8",
		"utf_8_sig",
	}
}

type CloudWatchLogsInitialPosition string

// Enum values for CloudWatchLogsInitialPosition
const (
	CloudWatchLogsInitialPositionStart_of_file CloudWatchLogsInitialPosition = "start_of_file"
	CloudWatchLogsInitialPositionEnd_of_file   CloudWatchLogsInitialPosition = "end_of_file"
)

// Values returns all known values for CloudWatchLogsInitialPosition. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (CloudWatchLogsInitialPosition) Values() []CloudWatchLogsInitialPosition {
	return []CloudWatchLogsInitialPosition{
		"start_of_file",
		"end_of_file",
	}
}

type CloudWatchLogsTimeZone string

// Enum values for CloudWatchLogsTimeZone
const (
	CloudWatchLogsTimeZoneLocal CloudWatchLogsTimeZone = "LOCAL"
	CloudWatchLogsTimeZoneUtc   CloudWatchLogsTimeZone = "UTC"
)

// Values returns all known values for CloudWatchLogsTimeZone. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CloudWatchLogsTimeZone) Values() []CloudWatchLogsTimeZone {
	return []CloudWatchLogsTimeZone{
		"LOCAL",
		"UTC",
	}
}

type DeploymentCommandName string

// Enum values for DeploymentCommandName
const (
	DeploymentCommandNameInstall_dependencies    DeploymentCommandName = "install_dependencies"
	DeploymentCommandNameUpdate_dependencies     DeploymentCommandName = "update_dependencies"
	DeploymentCommandNameUpdate_custom_cookbooks DeploymentCommandName = "update_custom_cookbooks"
	DeploymentCommandNameExecute_recipes         DeploymentCommandName = "execute_recipes"
	DeploymentCommandNameConfigure               DeploymentCommandName = "configure"
	DeploymentCommandNameSetup                   DeploymentCommandName = "setup"
	DeploymentCommandNameDeploy                  DeploymentCommandName = "deploy"
	DeploymentCommandNameRollback                DeploymentCommandName = "rollback"
	DeploymentCommandNameStart                   DeploymentCommandName = "start"
	DeploymentCommandNameStop                    DeploymentCommandName = "stop"
	DeploymentCommandNameRestart                 DeploymentCommandName = "restart"
	DeploymentCommandNameUndeploy                DeploymentCommandName = "undeploy"
)

// Values returns all known values for DeploymentCommandName. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentCommandName) Values() []DeploymentCommandName {
	return []DeploymentCommandName{
		"install_dependencies",
		"update_dependencies",
		"update_custom_cookbooks",
		"execute_recipes",
		"configure",
		"setup",
		"deploy",
		"rollback",
		"start",
		"stop",
		"restart",
		"undeploy",
	}
}

type LayerAttributesKeys string

// Enum values for LayerAttributesKeys
const (
	LayerAttributesKeysEcsclusterarn               LayerAttributesKeys = "EcsClusterArn"
	LayerAttributesKeysEnablehaproxystats          LayerAttributesKeys = "EnableHaproxyStats"
	LayerAttributesKeysHaproxystatsurl             LayerAttributesKeys = "HaproxyStatsUrl"
	LayerAttributesKeysHaproxystatsuser            LayerAttributesKeys = "HaproxyStatsUser"
	LayerAttributesKeysHaproxystatspassword        LayerAttributesKeys = "HaproxyStatsPassword"
	LayerAttributesKeysHaproxyhealthcheckurl       LayerAttributesKeys = "HaproxyHealthCheckUrl"
	LayerAttributesKeysHaproxyhealthcheckmethod    LayerAttributesKeys = "HaproxyHealthCheckMethod"
	LayerAttributesKeysMysqlrootpassword           LayerAttributesKeys = "MysqlRootPassword"
	LayerAttributesKeysMysqlrootpasswordubiquitous LayerAttributesKeys = "MysqlRootPasswordUbiquitous"
	LayerAttributesKeysGangliaurl                  LayerAttributesKeys = "GangliaUrl"
	LayerAttributesKeysGangliauser                 LayerAttributesKeys = "GangliaUser"
	LayerAttributesKeysGangliapassword             LayerAttributesKeys = "GangliaPassword"
	LayerAttributesKeysMemcachedmemory             LayerAttributesKeys = "MemcachedMemory"
	LayerAttributesKeysNodejsversion               LayerAttributesKeys = "NodejsVersion"
	LayerAttributesKeysRubyversion                 LayerAttributesKeys = "RubyVersion"
	LayerAttributesKeysRubygemsversion             LayerAttributesKeys = "RubygemsVersion"
	LayerAttributesKeysManagebundler               LayerAttributesKeys = "ManageBundler"
	LayerAttributesKeysBundlerversion              LayerAttributesKeys = "BundlerVersion"
	LayerAttributesKeysRailsstack                  LayerAttributesKeys = "RailsStack"
	LayerAttributesKeysPassengerversion            LayerAttributesKeys = "PassengerVersion"
	LayerAttributesKeysJvm                         LayerAttributesKeys = "Jvm"
	LayerAttributesKeysJvmversion                  LayerAttributesKeys = "JvmVersion"
	LayerAttributesKeysJvmoptions                  LayerAttributesKeys = "JvmOptions"
	LayerAttributesKeysJavaappserver               LayerAttributesKeys = "JavaAppServer"
	LayerAttributesKeysJavaappserverversion        LayerAttributesKeys = "JavaAppServerVersion"
)

// Values returns all known values for LayerAttributesKeys. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LayerAttributesKeys) Values() []LayerAttributesKeys {
	return []LayerAttributesKeys{
		"EcsClusterArn",
		"EnableHaproxyStats",
		"HaproxyStatsUrl",
		"HaproxyStatsUser",
		"HaproxyStatsPassword",
		"HaproxyHealthCheckUrl",
		"HaproxyHealthCheckMethod",
		"MysqlRootPassword",
		"MysqlRootPasswordUbiquitous",
		"GangliaUrl",
		"GangliaUser",
		"GangliaPassword",
		"MemcachedMemory",
		"NodejsVersion",
		"RubyVersion",
		"RubygemsVersion",
		"ManageBundler",
		"BundlerVersion",
		"RailsStack",
		"PassengerVersion",
		"Jvm",
		"JvmVersion",
		"JvmOptions",
		"JavaAppServer",
		"JavaAppServerVersion",
	}
}

type LayerType string

// Enum values for LayerType
const (
	LayerTypeAwsFlowRuby      LayerType = "aws-flow-ruby"
	LayerTypeEcsCluster       LayerType = "ecs-cluster"
	LayerTypeJavaApp          LayerType = "java-app"
	LayerTypeLb               LayerType = "lb"
	LayerTypeWeb              LayerType = "web"
	LayerTypePhpApp           LayerType = "php-app"
	LayerTypeRailsApp         LayerType = "rails-app"
	LayerTypeNodejsApp        LayerType = "nodejs-app"
	LayerTypeMemcached        LayerType = "memcached"
	LayerTypeDbMaster         LayerType = "db-master"
	LayerTypeMonitoringMaster LayerType = "monitoring-master"
	LayerTypeCustom           LayerType = "custom"
)

// Values returns all known values for LayerType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (LayerType) Values() []LayerType {
	return []LayerType{
		"aws-flow-ruby",
		"ecs-cluster",
		"java-app",
		"lb",
		"web",
		"php-app",
		"rails-app",
		"nodejs-app",
		"memcached",
		"db-master",
		"monitoring-master",
		"custom",
	}
}

type RootDeviceType string

// Enum values for RootDeviceType
const (
	RootDeviceTypeEbs           RootDeviceType = "ebs"
	RootDeviceTypeInstanceStore RootDeviceType = "instance-store"
)

// Values returns all known values for RootDeviceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RootDeviceType) Values() []RootDeviceType {
	return []RootDeviceType{
		"ebs",
		"instance-store",
	}
}

type SourceType string

// Enum values for SourceType
const (
	SourceTypeGit     SourceType = "git"
	SourceTypeSvn     SourceType = "svn"
	SourceTypeArchive SourceType = "archive"
	SourceTypeS3      SourceType = "s3"
)

// Values returns all known values for SourceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (SourceType) Values() []SourceType {
	return []SourceType{
		"git",
		"svn",
		"archive",
		"s3",
	}
}

type StackAttributesKeys string

// Enum values for StackAttributesKeys
const (
	StackAttributesKeysColor StackAttributesKeys = "Color"
)

// Values returns all known values for StackAttributesKeys. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StackAttributesKeys) Values() []StackAttributesKeys {
	return []StackAttributesKeys{
		"Color",
	}
}

type VirtualizationType string

// Enum values for VirtualizationType
const (
	VirtualizationTypeParavirtual VirtualizationType = "paravirtual"
	VirtualizationTypeHvm         VirtualizationType = "hvm"
)

// Values returns all known values for VirtualizationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (VirtualizationType) Values() []VirtualizationType {
	return []VirtualizationType{
		"paravirtual",
		"hvm",
	}
}

type VolumeType string

// Enum values for VolumeType
const (
	VolumeTypeGp2      VolumeType = "gp2"
	VolumeTypeIo1      VolumeType = "io1"
	VolumeTypeStandard VolumeType = "standard"
)

// Values returns all known values for VolumeType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (VolumeType) Values() []VolumeType {
	return []VolumeType{
		"gp2",
		"io1",
		"standard",
	}
}
