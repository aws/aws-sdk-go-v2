// Code generated by smithy-go-codegen DO NOT EDIT.

package opsworks

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/opsworks/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// This action can be used only with Windows stacks. Grants RDP access to a Windows
// instance for a specified time period.
func (c *Client) GrantAccess(ctx context.Context, params *GrantAccessInput, optFns ...func(*Options)) (*GrantAccessOutput, error) {
	if params == nil {
		params = &GrantAccessInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GrantAccess", params, optFns, addOperationGrantAccessMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GrantAccessOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GrantAccessInput struct {

	// The instance's AWS OpsWorks Stacks ID.
	//
	// This member is required.
	InstanceId *string

	// The length of time (in minutes) that the grant is valid. When the grant expires
	// at the end of this period, the user will no longer be able to use the
	// credentials to log in. If the user is logged in at the time, he or she
	// automatically will be logged out.
	ValidForInMinutes *int32
}

// Contains the response to a GrantAccess request.
type GrantAccessOutput struct {

	// A TemporaryCredential object that contains the data needed to log in to the
	// instance by RDP clients, such as the Microsoft Remote Desktop Connection.
	TemporaryCredential *types.TemporaryCredential

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationGrantAccessMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpGrantAccess{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpGrantAccess{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGrantAccessValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGrantAccess(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opGrantAccess(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "opsworks",
		OperationName: "GrantAccess",
	}
}
