// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// The caller is not authorized to invoke this operation.
type ForbiddenException struct {
	Message *string
}

func (e *ForbiddenException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ForbiddenException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ForbiddenException) ErrorCode() string             { return "ForbiddenException" }
func (e *ForbiddenException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The connection with the provided id no longer exists.
type GoneException struct {
	Message *string
}

func (e *GoneException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *GoneException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *GoneException) ErrorCode() string             { return "GoneException" }
func (e *GoneException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The client is sending more than the allowed number of requests per unit of time
// or the WebSocket client side buffer is full.
type LimitExceededException struct {
	Message *string
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string             { return "LimitExceededException" }
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The data has exceeded the maximum size allowed.
type PayloadTooLargeException struct {
	Message *string
}

func (e *PayloadTooLargeException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PayloadTooLargeException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PayloadTooLargeException) ErrorCode() string             { return "PayloadTooLargeException" }
func (e *PayloadTooLargeException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PayloadTooLargeException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PayloadTooLargeException) HasMessage() bool {
	return e.Message != nil
}
