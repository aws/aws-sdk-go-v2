// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// Information about an AWS CodeCommit repository. The CodeCommit repository must
// be in the same AWS Region and AWS account where its CodeGuru Reviewer code
// reviews are configured.
type CodeCommitRepository struct {
	// The name of the AWS CodeCommit repository. For more information, see
	// repositoryName
	// (https://docs.aws.amazon.com/codecommit/latest/APIReference/API_GetRepository.html#CodeCommit-GetRepository-request-repositoryName)
	// in the AWS CodeCommit API Reference.
	Name *string
}

// Information about a code review.
type CodeReview struct {
	// The reason for the state of the code review.
	StateReason *string
	// The type of code review.
	Type Type
	// The owner of the repository. For an AWS CodeCommit repository, this is the AWS
	// account ID of the account that owns the repository. For a GitHub or Bitbucket
	// repository, this is the username for the account that owns the repository.
	Owner *string
	// The type of the source code for the code review.
	SourceCodeType *SourceCodeType
	// The time, in milliseconds since the epoch, when the code review was last
	// updated.
	LastUpdatedTimeStamp *time.Time
	// The type of repository that contains the reviewed code (for example, GitHub or
	// Bitbucket).
	ProviderType ProviderType
	// The Amazon Resource Name (ARN) of the CodeReview
	// (https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
	// object.
	CodeReviewArn *string
	// The pull request ID for the code review.
	PullRequestId *string
	// The name of the code review.
	Name *string
	// The valid code review states are:
	//
	//     * Completed: The code review is
	// complete.
	//
	//     * Pending: The code review started and has not completed or
	// failed.
	//
	//     * Failed: The code review failed.
	//
	//     * Deleting: The code review
	// is being deleted.
	State JobState
	// The statistics from the code review.
	Metrics *Metrics
	// The time, in milliseconds since the epoch, when the code review was created.
	CreatedTimeStamp *time.Time
	// The name of the repository.
	RepositoryName *string
}

// Information about the summary of the code review.
type CodeReviewSummary struct {
	// The provider type of the repository association.
	ProviderType ProviderType
	// The state of the code review. The valid code review states are:
	//
	//     *
	// Completed: The code review is complete.
	//
	//     * Pending: The code review started
	// and has not completed or failed.
	//
	//     * Failed: The code review failed.
	//
	//     *
	// Deleting: The code review is being deleted.
	State JobState
	// The statistics from the code review.
	MetricsSummary *MetricsSummary
	// The pull request ID for the code review.
	PullRequestId *string
	// The Amazon Resource Name (ARN) of the CodeReview
	// (https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
	// object.
	CodeReviewArn *string
	// The owner of the repository. For an AWS CodeCommit repository, this is the AWS
	// account ID of the account that owns the repository. For a GitHub or Bitbucket
	// repository, this is the username for the account that owns the repository.
	Owner *string
	// The type of the code review.
	Type Type
	// The time, in milliseconds since the epoch, when the code review was created.
	CreatedTimeStamp *time.Time
	// The name of the code review.
	Name *string
	// The time, in milliseconds since the epoch, when the code review was last
	// updated.
	LastUpdatedTimeStamp *time.Time
	// The name of the repository.
	RepositoryName *string
}

// The commit diff for the pull request.
type CommitDiffSourceCodeType struct {
	// The SHA of the source commit.
	SourceCommit *string
	// The SHA of the destination commit.
	DestinationCommit *string
}

// Information about the statistics from the code review.
type Metrics struct {
	// Lines of code metered in the code review. For the initial code review pull
	// request and all subsequent revisions, this includes all lines of code in the
	// files added to the pull request. In subsequent revisions, for files that already
	// existed in the pull request, this includes only the changed lines of code. In
	// both cases, this does not include non-code lines such as comments and import
	// statements. For example, if you submit a pull request containing 5 files, each
	// with 500 lines of code, and in a subsequent revision you added a new file with
	// 200 lines of code, and also modified a total of 25 lines across the initial 5
	// files, MeteredLinesOfCodeCount includes the first 5 files (5 * 500 = 2,500
	// lines), the new file (200 lines) and the 25 changed lines of code for a total of
	// 2,725 lines of code.
	MeteredLinesOfCodeCount *int64
	// Total number of recommendations found in the code review.
	FindingsCount *int64
}

// Information about metrics summaries.
type MetricsSummary struct {
	// Lines of code metered in the code review. For the initial code review pull
	// request and all subsequent revisions, this includes all lines of code in the
	// files added to the pull request. In subsequent revisions, for files that already
	// existed in the pull request, this includes only the changed lines of code. In
	// both cases, this does not include non-code lines such as comments and import
	// statements. For example, if you submit a pull request containing 5 files, each
	// with 500 lines of code, and in a subsequent revision you added a new file with
	// 200 lines of code, and also modified a total of 25 lines across the initial 5
	// files, MeteredLinesOfCodeCount includes the first 5 files (5 * 500 = 2,500
	// lines), the new file (200 lines) and the 25 changed lines of code for a total of
	// 2,725 lines of code.
	MeteredLinesOfCodeCount *int64
	// Total number of recommendations found in the code review.
	FindingsCount *int64
}

// Information about the recommendation feedback.
type RecommendationFeedback struct {
	// The recommendation ID that can be used to track the provided recommendations.
	// Later on it can be used to collect the feedback.
	RecommendationId *string
	// The time at which the feedback was created.
	CreatedTimeStamp *time.Time
	// The Amazon Resource Name (ARN) of the CodeReview
	// (https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
	// object.
	CodeReviewArn *string
	// List for storing reactions. Reactions are utf-8 text code for emojis. You can
	// send an empty list to clear off all your feedback.
	Reactions []Reaction
	// The ID of the user that made the API call. The UserId is an IAM principal that
	// can be specified as an AWS account ID or an Amazon Resource Name (ARN). For more
	// information, see  Specifying a Principal
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying)
	// in the AWS Identity and Access Management User Guide.
	UserId *string
	// The time at which the feedback was last updated.
	LastUpdatedTimeStamp *time.Time
}

// Information about recommendation feedback summaries.
type RecommendationFeedbackSummary struct {
	// List for storing reactions. Reactions are utf-8 text code for emojis.
	Reactions []Reaction
	// The recommendation ID that can be used to track the provided recommendations.
	// Later on it can be used to collect the feedback.
	RecommendationId *string
	// The ID of the user that gave the feedback. The UserId is an IAM principal that
	// can be specified as an AWS account ID or an Amazon Resource Name (ARN). For more
	// information, see  Specifying a Principal
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying)
	// in the AWS Identity and Access Management User Guide.
	UserId *string
}

// Information about recommendations.
type RecommendationSummary struct {
	// Name of the file on which a recommendation is provided.
	FilePath *string
	// A description of the recommendation generated by CodeGuru Reviewer for the lines
	// of code between the start line and the end line.
	Description *string
	// Start line from where the recommendation is applicable in the source commit or
	// source branch.
	StartLine *int32
	// The recommendation ID that can be used to track the provided recommendations.
	// Later on it can be used to collect the feedback.
	RecommendationId *string
	// Last line where the recommendation is applicable in the source commit or source
	// branch. For a single line comment the start line and end line values are the
	// same.
	EndLine *int32
}

// Information about an associated AWS CodeCommit repository or an associated
// repository that is managed by AWS CodeStar Connections (for example, Bitbucket).
// This Repository object is not used if your source code is in an associated
// GitHub repository.
type Repository struct {
	// Information about a GitHub Enterprise Server repository.
	GitHubEnterpriseServer *ThirdPartySourceRepository
	// Information about a Bitbucket repository.
	Bitbucket *ThirdPartySourceRepository
	// Information about an AWS CodeCommit repository.
	CodeCommit *CodeCommitRepository
}

// Information about a repository association. The DescribeRepositoryAssociation
// (https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_DescribeRepositoryAssociation.html)
// operation returns a RepositoryAssociation object.
type RepositoryAssociation struct {
	// The Amazon Resource Name (ARN) identifying the repository association.
	AssociationArn *string
	// The time, in milliseconds since the epoch, when the repository association was
	// last updated.
	LastUpdatedTimeStamp *time.Time
	// The time, in milliseconds since the epoch, when the repository association was
	// created.
	CreatedTimeStamp *time.Time
	// The provider type of the repository association.
	ProviderType ProviderType
	// A description of why the repository association is in the current state.
	StateReason *string
	// The state of the repository association. The valid repository association states
	// are:
	//
	//     * Associated: The repository association is complete.
	//
	//     *
	// Associating: CodeGuru Reviewer is:
	//
	//         * Setting up pull request
	// notifications. This is required for pull requests to trigger a CodeGuru Reviewer
	// review. If your repository ProviderType is GitHub or Bitbucket, CodeGuru
	// Reviewer creates webhooks in your repository to trigger CodeGuru Reviewer
	// reviews. If you delete these webhooks, reviews of code in your repository cannot
	// be triggered.
	//
	//         * Setting up source code access. This is required for
	// CodeGuru Reviewer to securely clone code in your repository.
	//
	//     * Failed: The
	// repository failed to associate or disassociate.
	//
	//     * Disassociating: CodeGuru
	// Reviewer is removing the repository's pull request notifications and source code
	// access.
	State RepositoryAssociationState
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection. Its
	// format is
	// arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id.
	// For more information, see Connection
	// (https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html)
	// in the AWS CodeStar Connections API Reference.
	ConnectionArn *string
	// The name of the repository.
	Name *string
	// The ID of the repository association.
	AssociationId *string
	// The owner of the repository. For an AWS CodeCommit repository, this is the AWS
	// account ID of the account that owns the repository. For a GitHub or Bitbucket
	// repository, this is the username for the account that owns the repository.
	Owner *string
}

// Summary information about a repository association. The
// ListRepositoryAssociations
// (https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html)
// operation returns a list of RepositoryAssociationSummary objects.
type RepositoryAssociationSummary struct {
	// The state of the repository association. The valid repository association states
	// are:
	//
	//     * Associated: The repository association is complete.
	//
	//     *
	// Associating: CodeGuru Reviewer is:
	//
	//         * Setting up pull request
	// notifications. This is required for pull requests to trigger a CodeGuru Reviewer
	// review. If your repository ProviderType is GitHub or Bitbucket, CodeGuru
	// Reviewer creates webhooks in your repository to trigger CodeGuru Reviewer
	// reviews. If you delete these webhooks, reviews of code in your repository cannot
	// be triggered.
	//
	//         * Setting up source code access. This is required for
	// CodeGuru Reviewer to securely clone code in your repository.
	//
	//     * Failed: The
	// repository failed to associate or disassociate.
	//
	//     * Disassociating: CodeGuru
	// Reviewer is removing the repository's pull request notifications and source code
	// access.
	State RepositoryAssociationState
	// The repository association ID.
	AssociationId *string
	// The provider type of the repository association.
	ProviderType ProviderType
	// The name of the repository association.
	Name *string
	// The Amazon Resource Name (ARN) of the RepositoryAssociation
	// (https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
	// object.
	AssociationArn *string
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection. Its
	// format is
	// arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id.
	// For more information, see Connection
	// (https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html)
	// in the AWS CodeStar Connections API Reference.
	ConnectionArn *string
	// The owner of the repository. For an AWS CodeCommit repository, this is the AWS
	// account ID of the account that owns the repository. For a GitHub or Bitbucket
	// repository, this is the username for the account that owns the repository.
	Owner *string
	// The time, in milliseconds since the epoch, since the repository association was
	// last updated.
	LastUpdatedTimeStamp *time.Time
}

// Information about the source code type.
type SourceCodeType struct {
	// The commit diff for the pull request.
	CommitDiff *CommitDiffSourceCodeType
}

// Information about a third-party source repository connected to CodeGuru
// Reviewer.
type ThirdPartySourceRepository struct {
	// The owner of the repository. For a GitHub, GitHub Enterprise, or Bitbucket
	// repository, this is the username for the account that owns the repository.
	Owner *string
	// The name of the third party source repository.
	Name *string
	// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection. Its
	// format is
	// arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id.
	// For more information, see Connection
	// (https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html)
	// in the AWS CodeStar Connections API Reference.
	ConnectionArn *string
}
