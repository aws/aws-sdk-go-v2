// Code generated by smithy-go-codegen DO NOT EDIT.

package forecast

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/forecast/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Exports a forecast created by the CreateForecast () operation to your Amazon
// Simple Storage Service (Amazon S3) bucket. The forecast file name will match the
// following conventions: __ where the component is in Java SimpleDateFormat
// (yyyy-MM-ddTHH-mm-ssZ). You must specify a DataDestination () object that
// includes an AWS Identity and Access Management (IAM) role that Amazon Forecast
// can assume to access the Amazon S3 bucket. For more information, see
// aws-forecast-iam-roles (). For more information, see howitworks-forecast (). To
// get a list of all your forecast export jobs, use the ListForecastExportJobs ()
// operation. The Status of the forecast export job must be ACTIVE before you can
// access the forecast in your Amazon S3 bucket. To get the status, use the
// DescribeForecastExportJob () operation.
func (c *Client) CreateForecastExportJob(ctx context.Context, params *CreateForecastExportJobInput, optFns ...func(*Options)) (*CreateForecastExportJobOutput, error) {
	stack := middleware.NewStack("CreateForecastExportJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateForecastExportJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateForecastExportJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateForecastExportJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateForecastExportJob",
			Err:           err,
		}
	}
	out := result.(*CreateForecastExportJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateForecastExportJobInput struct {
	// The name for the forecast export job.
	ForecastExportJobName *string
	// The Amazon Resource Name (ARN) of the forecast that you want to export.
	ForecastArn *string
	// The location where you want to save the forecast and an AWS Identity and Access
	// Management (IAM) role that Amazon Forecast can assume to access the location.
	// The forecast must be exported to an Amazon S3 bucket. If encryption is used,
	// Destination must include an AWS Key Management Service (KMS) key. The IAM role
	// must allow Amazon Forecast permission to access the key.
	Destination *types.DataDestination
	// The optional metadata that you apply to the forecast export job to help you
	// categorize and organize them. Each tag consists of a key and an optional value,
	// both of which you define. The following basic restrictions apply to tags:
	//
	//     *
	// Maximum number of tags per resource - 50.
	//
	//     * For each resource, each tag key
	// must be unique, and each tag key can have only one value.
	//
	//     * Maximum key
	// length - 128 Unicode characters in UTF-8.
	//
	//     * Maximum value length - 256
	// Unicode characters in UTF-8.
	//
	//     * If your tagging schema is used across
	// multiple services and resources, remember that other services may have
	// restrictions on allowed characters. Generally allowed characters are: letters,
	// numbers, and spaces representable in UTF-8, and the following characters: + - =
	// . _ : / @.
	//
	//     * Tag keys and values are case sensitive.
	//
	//     * Do not use
	// aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys
	// as it is reserved for AWS use. You cannot edit or delete tag keys with this
	// prefix. Values can have this prefix. If a tag value has aws as its prefix but
	// the key does not, then Forecast considers it to be a user tag and will count
	// against the limit of 50 tags. Tags with only the key prefix of aws do not count
	// against your tags per resource limit.
	Tags []*types.Tag
}

type CreateForecastExportJobOutput struct {
	// The Amazon Resource Name (ARN) of the export job.
	ForecastExportJobArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateForecastExportJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateForecastExportJob{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateForecastExportJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateForecastExportJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "forecast",
		OperationName: "CreateForecastExportJob",
	}
}
