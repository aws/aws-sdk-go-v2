// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package forecast

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/forecast/types"
)

const opCreateDatasetImportJob = "CreateDatasetImportJob"

// CreateDatasetImportJobRequest returns a request value for making API operation for
// Amazon Forecast Service.
//
// Imports your training data to an Amazon Forecast dataset. You provide the
// location of your training data in an Amazon Simple Storage Service (Amazon
// S3) bucket and the Amazon Resource Name (ARN) of the dataset that you want
// to import the data to.
//
// You must specify a DataSource object that includes an AWS Identity and Access
// Management (IAM) role that Amazon Forecast can assume to access the data.
// For more information, see aws-forecast-iam-roles.
//
// Two properties of the training data are optionally specified:
//
//    * The delimiter that separates the data fields. The default delimiter
//    is a comma (,), which is the only supported delimiter in this release.
//
//    * The format of timestamps. If the format is not specified, Amazon Forecast
//    expects the format to be "yyyy-MM-dd HH:mm:ss".
//
// When Amazon Forecast uploads your training data, it verifies that the data
// was collected at the DataFrequency specified when the target dataset was
// created. For more information, see CreateDataset and howitworks-datasets-groups.
// Amazon Forecast also verifies the delimiter and timestamp format.
//
// You can use the ListDatasetImportJobs operation to get a list of all your
// dataset import jobs, filtered by specified criteria.
//
// To get a list of all your dataset import jobs, filtered by the specified
// criteria, use the ListDatasetGroups operation.
//
//    // Example sending a request using CreateDatasetImportJobRequest.
//    req := client.CreateDatasetImportJobRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/forecast-2018-06-26/CreateDatasetImportJob
func (c *Client) CreateDatasetImportJobRequest(input *types.CreateDatasetImportJobInput) CreateDatasetImportJobRequest {
	op := &aws.Operation{
		Name:       opCreateDatasetImportJob,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateDatasetImportJobInput{}
	}

	req := c.newRequest(op, input, &types.CreateDatasetImportJobOutput{})
	return CreateDatasetImportJobRequest{Request: req, Input: input, Copy: c.CreateDatasetImportJobRequest}
}

// CreateDatasetImportJobRequest is the request type for the
// CreateDatasetImportJob API operation.
type CreateDatasetImportJobRequest struct {
	*aws.Request
	Input *types.CreateDatasetImportJobInput
	Copy  func(*types.CreateDatasetImportJobInput) CreateDatasetImportJobRequest
}

// Send marshals and sends the CreateDatasetImportJob API request.
func (r CreateDatasetImportJobRequest) Send(ctx context.Context) (*CreateDatasetImportJobResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateDatasetImportJobResponse{
		CreateDatasetImportJobOutput: r.Request.Data.(*types.CreateDatasetImportJobOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateDatasetImportJobResponse is the response type for the
// CreateDatasetImportJob API operation.
type CreateDatasetImportJobResponse struct {
	*types.CreateDatasetImportJobOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateDatasetImportJob request.
func (r *CreateDatasetImportJobResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
