// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package forecast

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/forecast/types"
)

const opCreatePredictor = "CreatePredictor"

// CreatePredictorRequest returns a request value for making API operation for
// Amazon Forecast Service.
//
// Creates an Amazon Forecast predictor.
//
// In the request, you provide a dataset group and either specify an algorithm
// or let Amazon Forecast choose the algorithm for you using AutoML. If you
// specify an algorithm, you also can override algorithm-specific hyperparameters.
//
// Amazon Forecast uses the chosen algorithm to train a model using the latest
// version of the datasets in the specified dataset group. The result is called
// a predictor. You then generate a forecast using the CreateForecast operation.
//
// After training a model, the CreatePredictor operation also evaluates it.
// To see the evaluation metrics, use the GetAccuracyMetrics operation. Always
// review the evaluation metrics before deciding to use the predictor to generate
// a forecast.
//
// Optionally, you can specify a featurization configuration to fill and aggragate
// the data fields in the TARGET_TIME_SERIES dataset to improve model training.
// For more information, see FeaturizationConfig.
//
// AutoML
//
// If you set PerformAutoML to true, Amazon Forecast evaluates each algorithm
// and chooses the one that minimizes the objective function. The objective
// function is defined as the mean of the weighted p10, p50, and p90 quantile
// losses. For more information, see EvaluationResult.
//
// When AutoML is enabled, the following properties are disallowed:
//
//    * AlgorithmArn
//
//    * HPOConfig
//
//    * PerformHPO
//
//    * TrainingParameters
//
// To get a list of all your predictors, use the ListPredictors operation.
//
// The Status of the predictor must be ACTIVE, signifying that training has
// completed, before you can use the predictor to create a forecast. Use the
// DescribePredictor operation to get the status.
//
//    // Example sending a request using CreatePredictorRequest.
//    req := client.CreatePredictorRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/forecast-2018-06-26/CreatePredictor
func (c *Client) CreatePredictorRequest(input *types.CreatePredictorInput) CreatePredictorRequest {
	op := &aws.Operation{
		Name:       opCreatePredictor,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreatePredictorInput{}
	}

	req := c.newRequest(op, input, &types.CreatePredictorOutput{})
	return CreatePredictorRequest{Request: req, Input: input, Copy: c.CreatePredictorRequest}
}

// CreatePredictorRequest is the request type for the
// CreatePredictor API operation.
type CreatePredictorRequest struct {
	*aws.Request
	Input *types.CreatePredictorInput
	Copy  func(*types.CreatePredictorInput) CreatePredictorRequest
}

// Send marshals and sends the CreatePredictor API request.
func (r CreatePredictorRequest) Send(ctx context.Context) (*CreatePredictorResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreatePredictorResponse{
		CreatePredictorOutput: r.Request.Data.(*types.CreatePredictorOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreatePredictorResponse is the response type for the
// CreatePredictor API operation.
type CreatePredictorResponse struct {
	*types.CreatePredictorOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreatePredictor request.
func (r *CreatePredictorResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
