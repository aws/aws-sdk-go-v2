// Code generated by smithy-go-codegen DO NOT EDIT.

package forecast

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/forecast/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Creates an Amazon Forecast predictor. Amazon Forecast creates predictors with
// AutoPredictor, which involves applying the optimal combination of algorithms to
// each time series in your datasets. You can use CreateAutoPredictor to create new
// predictors or upgrade/retrain existing predictors. Creating new predictors The
// following parameters are required when creating a new predictor:
//
// *
// PredictorName - A unique name for the predictor.
//
// * DatasetGroupArn - The ARN of
// the dataset group used to train the predictor.
//
// * ForecastFrequency - The
// granularity of your forecasts (hourly, daily, weekly, etc).
//
// * ForecastHorizon -
// The number of time steps being forecasted.
//
// When creating a new predictor, do
// not specify a value for ReferencePredictorArn. Upgrading and retraining
// predictors The following parameters are required when retraining or upgrading a
// predictor:
//
// * PredictorName - A unique name for the predictor.
//
// *
// ReferencePredictorArn - The ARN of the predictor to retrain or upgrade.
//
// When
// upgrading or retraining a predictor, only specify values for the
// ReferencePredictorArn and PredictorName.
func (c *Client) CreateAutoPredictor(ctx context.Context, params *CreateAutoPredictorInput, optFns ...func(*Options)) (*CreateAutoPredictorOutput, error) {
	if params == nil {
		params = &CreateAutoPredictorInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateAutoPredictor", params, optFns, c.addOperationCreateAutoPredictorMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateAutoPredictorOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateAutoPredictorInput struct {

	// A unique name for the predictor
	//
	// This member is required.
	PredictorName *string

	// The data configuration for your dataset group and any additional datasets.
	DataConfig *types.DataConfig

	// An AWS Key Management Service (KMS) key and an AWS Identity and Access
	// Management (IAM) role that Amazon Forecast can assume to access the key. You can
	// specify this optional object in the CreateDataset and CreatePredictor requests.
	EncryptionConfig *types.EncryptionConfig

	// Create an Explainability resource for the predictor.
	ExplainPredictor *bool

	// An array of dimension (field) names that specify how to group the generated
	// forecast. For example, if you are generating forecasts for item sales across all
	// your stores, and your dataset contains a store_id field, you would specify
	// store_id as a dimension to group sales forecasts for each store.
	ForecastDimensions []string

	// The frequency of predictions in a forecast. Valid intervals are Y (Year), M
	// (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes),
	// 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y"
	// indicates every year and "5min" indicates every five minutes. The frequency must
	// be greater than or equal to the TARGET_TIME_SERIES dataset frequency. When a
	// RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the
	// RELATED_TIME_SERIES dataset frequency.
	ForecastFrequency *string

	// The number of time-steps that the model predicts. The forecast horizon is also
	// called the prediction length.
	ForecastHorizon *int32

	// The forecast types used to train a predictor. You can specify up to five
	// forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments
	// of 0.01 or higher. You can also specify the mean forecast with mean.
	ForecastTypes []string

	// The accuracy metric used to optimize the predictor.
	OptimizationMetric types.OptimizationMetric

	// The ARN of the predictor to retrain or upgrade. This parameter is only used when
	// retraining or upgrading a predictor. When creating a new predictor, do not
	// specify a value for this parameter. When upgrading or retraining a predictor,
	// only specify values for the ReferencePredictorArn and PredictorName. The value
	// for PredictorName must be a unique predictor name.
	ReferencePredictorArn *string

	// Optional metadata to help you categorize and organize your predictors. Each tag
	// consists of a key and an optional value, both of which you define. Tag keys and
	// values are case sensitive. The following restrictions apply to tags:
	//
	// * For each
	// resource, each tag key must be unique and each tag key must have one value.
	//
	// *
	// Maximum number of tags per resource: 50.
	//
	// * Maximum key length: 128 Unicode
	// characters in UTF-8.
	//
	// * Maximum value length: 256 Unicode characters in
	// UTF-8.
	//
	// * Accepted characters: all letters and numbers, spaces representable in
	// UTF-8, and + - = . _ : / @. If your tagging schema is used across other services
	// and resources, the character restrictions of those services also apply.
	//
	// * Key
	// prefixes cannot include any upper or lowercase combination of aws: or AWS:.
	// Values can have this prefix. If a tag value has aws as its prefix but the key
	// does not, Forecast considers it to be a user tag and will count against the
	// limit of 50 tags. Tags with only the key prefix of aws do not count against your
	// tags per resource limit. You cannot edit or delete tag keys with this prefix.
	Tags []types.Tag

	noSmithyDocumentSerde
}

type CreateAutoPredictorOutput struct {

	// The Amazon Resource Name (ARN) of the predictor.
	PredictorArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateAutoPredictorMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateAutoPredictor{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateAutoPredictor{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateAutoPredictorValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateAutoPredictor(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateAutoPredictor(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "forecast",
		OperationName: "CreateAutoPredictor",
	}
}
