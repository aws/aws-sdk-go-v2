// Code generated by smithy-go-codegen DO NOT EDIT.

package forecast

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/forecast/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Describes an Amazon Forecast dataset created using the CreateDataset ()
// operation. In addition to listing the parameters specified in the CreateDataset
// request, this operation includes the following dataset properties:
//
//     *
// CreationTime
//
//     * LastModificationTime
//
//     * Status
func (c *Client) DescribeDataset(ctx context.Context, params *DescribeDatasetInput, optFns ...func(*Options)) (*DescribeDatasetOutput, error) {
	stack := middleware.NewStack("DescribeDataset", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeDatasetMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeDatasetValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeDataset(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeDataset",
			Err:           err,
		}
	}
	out := result.(*DescribeDatasetOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeDatasetInput struct {
	// The Amazon Resource Name (ARN) of the dataset.
	DatasetArn *string
}

type DescribeDatasetOutput struct {
	// When you create a dataset, LastModificationTime is the same as CreationTime.
	// While data is being imported to the dataset, LastModificationTime is the current
	// time of the DescribeDataset call. After a CreateDatasetImportJob () operation
	// has finished, LastModificationTime is when the import job completed or failed.
	LastModificationTime *time.Time
	// The status of the dataset. States include:
	//
	//     * ACTIVE
	//
	//     * CREATE_PENDING,
	// CREATE_IN_PROGRESS, CREATE_FAILED
	//
	//     * DELETE_PENDING, DELETE_IN_PROGRESS,
	// DELETE_FAILED
	//
	//     * UPDATE_PENDING, UPDATE_IN_PROGRESS, UPDATE_FAILED
	//
	// The
	// UPDATE states apply while data is imported to the dataset from a call to the
	// CreateDatasetImportJob () operation and reflect the status of the dataset import
	// job. For example, when the import job status is CREATE_IN_PROGRESS, the status
	// of the dataset is UPDATE_IN_PROGRESS. The Status of the dataset must be ACTIVE
	// before you can import training data.
	Status *string
	// The name of the dataset.
	DatasetName *string
	// The Amazon Resource Name (ARN) of the dataset.
	DatasetArn *string
	// The AWS Key Management Service (KMS) key and the AWS Identity and Access
	// Management (IAM) role that Amazon Forecast can assume to access the key.
	EncryptionConfig *types.EncryptionConfig
	// When the dataset was created.
	CreationTime *time.Time
	// The domain associated with the dataset.
	Domain types.Domain
	// An array of SchemaAttribute objects that specify the dataset fields. Each
	// SchemaAttribute specifies the name and data type of a field.
	Schema *types.Schema
	// The frequency of data collection. Valid intervals are Y (Year), M (Month), W
	// (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10
	// minutes), 5min (5 minutes), and 1min (1 minute). For example, "M" indicates
	// every month and "30min" indicates every 30 minutes.
	DataFrequency *string
	// The dataset type.
	DatasetType types.DatasetType

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeDatasetMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeDataset{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeDataset{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeDataset(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "forecast",
		OperationName: "DescribeDataset",
	}
}
