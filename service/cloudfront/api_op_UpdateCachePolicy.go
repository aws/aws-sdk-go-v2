// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudfront

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates a cache policy configuration. When you update a cache policy
// configuration, all the fields are updated with the values provided in the
// request. You cannot update some fields independent of others. To update a cache
// policy configuration:
//
//     * Use GetCachePolicyConfig to get the current
// configuration.
//
//     * Locally modify the fields in the cache policy
// configuration that you want to update.
//
//     * Call UpdateCachePolicy by
// providing the entire cache policy configuration, including the fields that you
// modified and those that you didn’t.
func (c *Client) UpdateCachePolicy(ctx context.Context, params *UpdateCachePolicyInput, optFns ...func(*Options)) (*UpdateCachePolicyOutput, error) {
	stack := middleware.NewStack("UpdateCachePolicy", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpUpdateCachePolicyMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateCachePolicyValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateCachePolicy(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateCachePolicy",
			Err:           err,
		}
	}
	out := result.(*UpdateCachePolicyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateCachePolicyInput struct {
	// The version of the cache policy that you are updating. The version is returned
	// in the cache policy’s ETag field in the response to GetCachePolicyConfig.
	IfMatch *string
	// The unique identifier for the cache policy that you are updating. The identifier
	// is returned in a cache behavior’s CachePolicyId field in the response to
	// GetDistributionConfig.
	Id *string
	// A cache policy configuration.
	CachePolicyConfig *types.CachePolicyConfig
}

type UpdateCachePolicyOutput struct {
	// The current version of the cache policy.
	ETag *string
	// A cache policy.
	CachePolicy *types.CachePolicy

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpUpdateCachePolicyMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpUpdateCachePolicy{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpUpdateCachePolicy{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateCachePolicy(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudfront",
		OperationName: "UpdateCachePolicy",
	}
}
