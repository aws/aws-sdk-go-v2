// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudfront

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// List the distributions that are associated with a specified AWS WAF web ACL.
func (c *Client) ListDistributionsByWebACLId(ctx context.Context, params *ListDistributionsByWebACLIdInput, optFns ...func(*Options)) (*ListDistributionsByWebACLIdOutput, error) {
	stack := middleware.NewStack("ListDistributionsByWebACLId", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpListDistributionsByWebACLIdMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListDistributionsByWebACLIdValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListDistributionsByWebACLId(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListDistributionsByWebACLId",
			Err:           err,
		}
	}
	out := result.(*ListDistributionsByWebACLIdOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The request to list distributions that are associated with a specified AWS WAF
// web ACL.
type ListDistributionsByWebACLIdInput struct {
	// Use Marker and MaxItems to control pagination of results. If you have more than
	// MaxItems distributions that satisfy the request, the response includes a
	// NextMarker element. To get the next page of results, submit another request. For
	// the value of Marker, specify the value of NextMarker from the last response.
	// (For the first request, omit Marker.)
	Marker *string
	// The ID of the AWS WAF web ACL that you want to list the associated
	// distributions. If you specify "null" for the ID, the request returns a list of
	// the distributions that aren't associated with a web ACL.
	WebACLId *string
	// The maximum number of distributions that you want CloudFront to return in the
	// response body. The maximum and default values are both 100.
	MaxItems *string
}

// The response to a request to list the distributions that are associated with a
// specified AWS WAF web ACL.
type ListDistributionsByWebACLIdOutput struct {
	// The DistributionList type.
	DistributionList *types.DistributionList

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpListDistributionsByWebACLIdMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpListDistributionsByWebACLId{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpListDistributionsByWebACLId{}, middleware.After)
}

func newServiceMetadataMiddleware_opListDistributionsByWebACLId(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudfront",
		OperationName: "ListDistributionsByWebACLId",
	}
}
