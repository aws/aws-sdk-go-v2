// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// A complex type that lists the AWS accounts, if any, that you included in the
// TrustedSigners complex type for this distribution. These are the accounts that
// you want to allow to create signed URLs for private content. The Signer complex
// type lists the AWS account number of the trusted signer or self if the signer is
// the AWS account that created the distribution. The Signer element also includes
// the IDs of any active CloudFront key pairs that are associated with the trusted
// signer's AWS account. If no KeyPairId element appears for a Signer, that signer
// can't create signed URLs. For more information, see Serving Private Content
// through CloudFront
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
// in the Amazon CloudFront Developer Guide.
type ActiveTrustedSigners struct {
	// Enabled is true if any of the AWS accounts listed in the TrustedSigners complex
	// type for this distribution have active CloudFront key pairs. If not, Enabled is
	// false.
	Enabled *bool
	// A complex type that contains one Signer complex type for each trusted signer
	// that is specified in the TrustedSigners complex type.
	Items []*Signer
	// The number of trusted signers specified in the TrustedSigners complex type.
	Quantity *int32
}

// A complex type that contains information about CNAMEs (alternate domain names),
// if any, for this distribution.
type Aliases struct {
	// The number of CNAME aliases, if any, that you want to associate with this
	// distribution.
	Quantity *int32
	// A complex type that contains the CNAME aliases, if any, that you want to
	// associate with this distribution.
	Items []*string
}

// AWS services in China customers must file for an Internet Content Provider (ICP)
// recordal if they want to serve content publicly on an alternate domain name,
// also known as a CNAME, that they've added to CloudFront. AliasICPRecordal
// provides the ICP recordal status for CNAMEs associated with distributions. The
// status is returned in the CloudFront response; you can't configure it yourself.
// For more information about ICP recordals, see  Signup, Accounts, and Credentials
// (https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html)
// in Getting Started with AWS services in China.
type AliasICPRecordal struct {
	// The Internet Content Provider (ICP) recordal status for a CNAME. The
	// ICPRecordalStatus is set to APPROVED for all CNAMEs (aliases) in regions outside
	// of China. The status values returned are the following:
	//
	//     * APPROVED
	// indicates that the associated CNAME has a valid ICP recordal number. Multiple
	// CNAMEs can be associated with a distribution, and CNAMEs can correspond to
	// different ICP recordals. To be marked as APPROVED, that is, valid to use with
	// China region, a CNAME must have one ICP recordal number associated with it.
	//
	//
	// * SUSPENDED indicates that the associated CNAME does not have a valid ICP
	// recordal number.
	//
	//     * PENDING indicates that CloudFront can't determine the
	// ICP recordal status of the CNAME associated with the distribution because there
	// was an error in trying to determine the status. You can try again to see if the
	// error is resolved in which case CloudFront returns an APPROVED or SUSPENDED
	// status.
	ICPRecordalStatus ICPRecordalStatus
	// A domain name associated with a distribution.
	CNAME *string
}

// A complex type that controls which HTTP methods CloudFront processes and
// forwards to your Amazon S3 bucket or your custom origin. There are three
// choices:
//
//     * CloudFront forwards only GET and HEAD requests.
//
//     *
// CloudFront forwards only GET, HEAD, and OPTIONS requests.
//
//     * CloudFront
// forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
//
// If you pick
// the third choice, you may need to restrict access to your Amazon S3 bucket or to
// your custom origin so users can't perform operations that you don't want them
// to. For example, you might not want users to have permissions to delete objects
// from your origin.
type AllowedMethods struct {
	// The number of HTTP methods that you want CloudFront to forward to your origin.
	// Valid values are 2 (for GET and HEAD requests), 3 (for GET, HEAD, and OPTIONS
	// requests) and 7 (for GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests).
	Quantity *int32
	// A complex type that controls whether CloudFront caches the response to requests
	// using the specified HTTP methods. There are two choices:
	//
	//     * CloudFront
	// caches responses to GET and HEAD requests.
	//
	//     * CloudFront caches responses to
	// GET, HEAD, and OPTIONS requests.
	//
	// If you pick the second choice for your Amazon
	// S3 Origin, you may need to forward Access-Control-Request-Method,
	// Access-Control-Request-Headers, and Origin headers for the responses to be
	// cached correctly.
	CachedMethods *CachedMethods
	// A complex type that contains the HTTP methods that you want CloudFront to
	// process and forward to your origin.
	Items []Method
}

// A complex type that describes how CloudFront processes requests. You must create
// at least as many cache behaviors (including the default cache behavior) as you
// have origins if you want CloudFront to serve objects from all of the origins.
// Each cache behavior specifies the one origin from which you want CloudFront to
// get objects. If you have two origins and only the default cache behavior, the
// default cache behavior will cause CloudFront to get objects from one of the
// origins, but the other origin is never used. For the current quota (formerly
// known as limit) on the number of cache behaviors that you can add to a
// distribution, see Quotas
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html)
// in the Amazon CloudFront Developer Guide. If you don’t want to specify any cache
// behaviors, include only an empty CacheBehaviors element. Don’t include an empty
// CacheBehavior element because this is invalid. To delete all cache behaviors in
// an existing distribution, update the distribution configuration and include only
// an empty CacheBehaviors element. To add, change, or remove one or more cache
// behaviors, update the distribution configuration and specify all of the cache
// behaviors that you want to include in the updated distribution. For more
// information about cache behaviors, see Cache Behavior Settings
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior)
// in the Amazon CloudFront Developer Guide.
type CacheBehavior struct {
	// This field is deprecated. We recommend that you use the DefaultTTL field in a
	// cache policy instead of this field. For more information, see Creating cache
	// policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. The default amount of time that you
	// want objects to stay in CloudFront caches before CloudFront forwards another
	// request to your origin to determine whether the object has been updated. The
	// value that you specify applies only when your origin does not add HTTP headers
	// such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects.
	// For more information, see Managing How Long Content Stays in an Edge Cache
	// (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide.
	DefaultTTL *int64
	// The unique identifier of the origin request policy that is attached to this
	// cache behavior. For more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// or Using the managed origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
	// in the Amazon CloudFront Developer Guide.
	OriginRequestPolicyId *string
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. For more information, see Working with
	// policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html)
	// in the Amazon CloudFront Developer Guide. If you want to include values in the
	// cache key, use a cache policy. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. If you want to send values to the
	// origin but not include them in the cache key, use an origin request policy. For
	// more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// or Using the managed origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
	// in the Amazon CloudFront Developer Guide. A complex type that specifies how
	// CloudFront handles query strings, cookies, and HTTP headers.
	ForwardedValues *ForwardedValues
	// The value of ID for the field-level encryption configuration that you want
	// CloudFront to use for encrypting specific fields of data for this cache
	// behavior.
	FieldLevelEncryptionId *string
	// Indicates whether you want to distribute media files in the Microsoft Smooth
	// Streaming format using the origin that is associated with this cache behavior.
	// If so, specify true; if not, specify false. If you specify true for
	// SmoothStreaming, you can still distribute other content using this cache
	// behavior if the content matches the value of PathPattern.
	SmoothStreaming *bool
	// This field is deprecated. We recommend that you use the MinTTL field in a cache
	// policy instead of this field. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. The minimum amount of time that you
	// want objects to stay in CloudFront caches before CloudFront forwards another
	// request to your origin to determine whether the object has been updated. For
	// more information, see  Managing How Long Content Stays in an Edge Cache
	// (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you
	// configure CloudFront to forward all headers to your origin (under Headers, if
	// you specify 1 for Quantity and * for Name).
	MinTTL *int64
	// The protocol that viewers can use to access the files in the origin specified by
	// TargetOriginId when a request matches the path pattern in PathPattern. You can
	// specify the following options:
	//
	//     * allow-all: Viewers can use HTTP or
	// HTTPS.
	//
	//     * redirect-to-https: If a viewer submits an HTTP request, CloudFront
	// returns an HTTP status code of 301 (Moved Permanently) to the viewer along with
	// the HTTPS URL. The viewer then resubmits the request using the new URL.
	//
	//     *
	// https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status
	// code of 403 (Forbidden).
	//
	// For more information about requiring the HTTPS
	// protocol, see Requiring HTTPS Between Viewers and CloudFront
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html)
	// in the Amazon CloudFront Developer Guide. The only way to guarantee that viewers
	// retrieve an object that was fetched from the origin using HTTPS is never to use
	// any other protocol to fetch the object. If you have recently changed from HTTP
	// to HTTPS, we recommend that you clear your objects’ cache because cached objects
	// are protocol agnostic. That means that an edge location will return an object
	// from the cache regardless of whether the current request protocol matches the
	// protocol used previously. For more information, see Managing Cache Expiration
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide.
	ViewerProtocolPolicy ViewerProtocolPolicy
	// This field is deprecated. We recommend that you use the MaxTTL field in a cache
	// policy instead of this field. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. The maximum amount of time that you
	// want objects to stay in CloudFront caches before CloudFront forwards another
	// request to your origin to determine whether the object has been updated. The
	// value that you specify applies only when your origin adds HTTP headers such as
	// Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more
	// information, see Managing How Long Content Stays in an Edge Cache (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide.
	MaxTTL *int64
	// A complex type that specifies the AWS accounts, if any, that you want to allow
	// to create signed URLs for private content. If you want to require signed URLs in
	// requests for objects in the target origin that match the PathPattern for this
	// cache behavior, specify true for Enabled, and specify the applicable values for
	// Quantity and Items. For more information, see Serving Private Content with
	// Signed URLs and Signed Cookies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
	// in the Amazon CloudFront Developer Guide. If you don’t want to require signed
	// URLs in requests for objects that match PathPattern, specify false for Enabled
	// and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted
	// signers, change Enabled to true (if it’s currently false), change Quantity as
	// applicable, and specify all of the trusted signers that you want to include in
	// the updated distribution.
	TrustedSigners *TrustedSigners
	// A complex type that controls which HTTP methods CloudFront processes and
	// forwards to your Amazon S3 bucket or your custom origin. There are three
	// choices:
	//
	//     * CloudFront forwards only GET and HEAD requests.
	//
	//     *
	// CloudFront forwards only GET, HEAD, and OPTIONS requests.
	//
	//     * CloudFront
	// forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
	//
	// If you pick
	// the third choice, you may need to restrict access to your Amazon S3 bucket or to
	// your custom origin so users can't perform operations that you don't want them
	// to. For example, you might not want users to have permissions to delete objects
	// from your origin.
	AllowedMethods *AllowedMethods
	// The value of ID for the origin that you want CloudFront to route requests to
	// when they match this cache behavior.
	TargetOriginId *string
	// Whether you want CloudFront to automatically compress certain files for this
	// cache behavior. If so, specify true; if not, specify false. For more
	// information, see Serving Compressed Files
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
	// in the Amazon CloudFront Developer Guide.
	Compress *bool
	// The unique identifier of the cache policy that is attached to this cache
	// behavior. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide.
	CachePolicyId *string
	// The pattern (for example, images/*.jpg) that specifies which requests to apply
	// the behavior to. When CloudFront receives a viewer request, the requested path
	// is compared with path patterns in the order in which cache behaviors are listed
	// in the distribution. You can optionally include a slash (/) at the beginning of
	// the path pattern. For example, /images/*.jpg. CloudFront behavior is the same
	// with or without the leading /. The path pattern for the default cache behavior
	// is * and cannot be changed. If the request for an object does not match the path
	// pattern for any cache behaviors, CloudFront applies the behavior in the default
	// cache behavior. For more information, see Path Pattern
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern)
	// in the Amazon CloudFront Developer Guide.
	PathPattern *string
	// A complex type that contains zero or more Lambda function associations for a
	// cache behavior.
	LambdaFunctionAssociations *LambdaFunctionAssociations
}

// A complex type that contains zero or more CacheBehavior elements.
type CacheBehaviors struct {
	// Optional: A complex type that contains cache behaviors for this distribution. If
	// Quantity is 0, you can omit Items.
	Items []*CacheBehavior
	// The number of cache behaviors for this distribution.
	Quantity *int32
}

// A complex type that controls whether CloudFront caches the response to requests
// using the specified HTTP methods. There are two choices:
//
//     * CloudFront
// caches responses to GET and HEAD requests.
//
//     * CloudFront caches responses to
// GET, HEAD, and OPTIONS requests.
//
// If you pick the second choice for your Amazon
// S3 Origin, you may need to forward Access-Control-Request-Method,
// Access-Control-Request-Headers, and Origin headers for the responses to be
// cached correctly.
type CachedMethods struct {
	// The number of HTTP methods for which you want CloudFront to cache responses.
	// Valid values are 2 (for caching responses to GET and HEAD requests) and 3 (for
	// caching responses to GET, HEAD, and OPTIONS requests).
	Quantity *int32
	// A complex type that contains the HTTP methods that you want CloudFront to cache
	// responses to.
	Items []Method
}

// A cache policy. When it’s attached to a cache behavior, the cache policy
// determines the following:
//
//     * The values that CloudFront includes in the
// cache key. These values can include HTTP headers, cookies, and URL query
// strings. CloudFront uses the cache key to find an object in its cache that it
// can return to the viewer.
//
//     * The default, minimum, and maximum time to live
// (TTL) values that you want objects to stay in the CloudFront cache.
//
// The
// headers, cookies, and query strings that are included in the cache key are
// automatically included in requests that CloudFront sends to the origin.
// CloudFront sends a request when it can’t find a valid object in its cache that
// matches the request’s cache key. If you want to send values to the origin but
// not include them in the cache key, use OriginRequestPolicy.
type CachePolicy struct {
	// The date and time when the cache policy was last modified.
	LastModifiedTime *time.Time
	// The unique identifier for the cache policy.
	Id *string
	// The cache policy configuration.
	CachePolicyConfig *CachePolicyConfig
}

// A cache policy configuration. This configuration determines the following:
//
//
// * The values that CloudFront includes in the cache key. These values can include
// HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to
// find an object in its cache that it can return to the viewer.
//
//     * The
// default, minimum, and maximum time to live (TTL) values that you want objects to
// stay in the CloudFront cache.
//
// The headers, cookies, and query strings that are
// included in the cache key are automatically included in requests that CloudFront
// sends to the origin. CloudFront sends a request when it can’t find a valid
// object in its cache that matches the request’s cache key. If you want to send
// values to the origin but not include them in the cache key, use
// OriginRequestPolicy.
type CachePolicyConfig struct {
	// The minimum amount of time, in seconds, that you want objects to stay in the
	// CloudFront cache before CloudFront sends another request to the origin to see if
	// the object has been updated. For more information, see Managing How Long Content
	// Stays in an Edge Cache (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide.
	MinTTL *int64
	// The maximum amount of time, in seconds, that objects stay in the CloudFront
	// cache before CloudFront sends another request to the origin to see if the object
	// has been updated. CloudFront uses this value only when the origin sends
	// Cache-Control or Expires headers with the object. For more information, see
	// Managing How Long Content Stays in an Edge Cache (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide. The default value for this field is
	// 31536000 seconds (one year). If the value of MinTTL or DefaultTTL is more than
	// 31536000 seconds, then the default value for this field is the same as the value
	// of DefaultTTL.
	MaxTTL *int64
	// A comment to describe the cache policy.
	Comment *string
	// A unique name to identify the cache policy.
	Name *string
	// The HTTP headers, cookies, and URL query strings to include in the cache key.
	// The values included in the cache key are automatically included in requests that
	// CloudFront sends to the origin.
	ParametersInCacheKeyAndForwardedToOrigin *ParametersInCacheKeyAndForwardedToOrigin
	// The default amount of time, in seconds, that you want objects to stay in the
	// CloudFront cache before CloudFront sends another request to the origin to see if
	// the object has been updated. CloudFront uses this value as the object’s time to
	// live (TTL) only when the origin does not send Cache-Control or Expires headers
	// with the object. For more information, see Managing How Long Content Stays in an
	// Edge Cache (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide. The default value for this field is
	// 86400 seconds (one day). If the value of MinTTL is more than 86400 seconds, then
	// the default value for this field is the same as the value of MinTTL.
	DefaultTTL *int64
}

// An object that determines whether any cookies in viewer requests (and if so,
// which cookies) are included in the cache key and automatically included in
// requests that CloudFront sends to the origin.
type CachePolicyCookiesConfig struct {
	// Determines whether any cookies in viewer requests are included in the cache key
	// and automatically included in requests that CloudFront sends to the origin.
	// Valid values are:
	//
	//     * none – Cookies in viewer requests are not included in
	// the cache key and are not automatically included in requests that CloudFront
	// sends to the origin. Even when this field is set to none, any cookies that are
	// listed in an OriginRequestPolicy are included in origin requests.
	//
	//     *
	// whitelist – The cookies in viewer requests that are listed in the CookieNames
	// type are included in the cache key and automatically included in requests that
	// CloudFront sends to the origin.
	//
	//     * allExcept – All cookies in viewer
	// requests that are not listed in the CookieNames type are included in the cache
	// key and automatically included in requests that CloudFront sends to the
	// origin.
	//
	//     * all – All cookies in viewer requests are included in the cache
	// key and are automatically included in requests that CloudFront sends to the
	// origin.
	CookieBehavior CachePolicyCookieBehavior
	// Contains a list of cookie names.
	Cookies *CookieNames
}

// An object that determines whether any HTTP headers (and if so, which headers)
// are included in the cache key and automatically included in requests that
// CloudFront sends to the origin.
type CachePolicyHeadersConfig struct {
	// Determines whether any HTTP headers are included in the cache key and
	// automatically included in requests that CloudFront sends to the origin. Valid
	// values are:
	//
	//     * none – HTTP headers are not included in the cache key and are
	// not automatically included in requests that CloudFront sends to the origin. Even
	// when this field is set to none, any headers that are listed in an
	// OriginRequestPolicy are included in origin requests.
	//
	//     * whitelist – The HTTP
	// headers that are listed in the Headers type are included in the cache key and
	// are automatically included in requests that CloudFront sends to the origin.
	HeaderBehavior CachePolicyHeaderBehavior
	// Contains a list of HTTP header names.
	Headers *Headers
}

// A list of cache policies.
type CachePolicyList struct {
	// If there are more items in the list than are in this response, this element is
	// present. It contains the value that you should use in the Marker field of a
	// subsequent request to continue listing cache policies where you left off.
	NextMarker *string
	// The total number of cache policies returned in the response.
	Quantity *int32
	// The maximum number of cache policies requested.
	MaxItems *int32
	// Contains the cache policies in the list.
	Items []*CachePolicySummary
}

// An object that determines whether any URL query strings in viewer requests (and
// if so, which query strings) are included in the cache key and automatically
// included in requests that CloudFront sends to the origin.
type CachePolicyQueryStringsConfig struct {
	// Contains the specific query strings in viewer requests that either are or are
	// not included in the cache key and automatically included in requests that
	// CloudFront sends to the origin. The behavior depends on whether the
	// QueryStringBehavior field in the CachePolicyQueryStringsConfig type is set to
	// whitelist (the listed query strings are included) or allExcept (the listed query
	// strings are not included, but all other query strings are).
	QueryStrings *QueryStringNames
	// Determines whether any URL query strings in viewer requests are included in the
	// cache key and automatically included in requests that CloudFront sends to the
	// origin. Valid values are:
	//
	//     * none – Query strings in viewer requests are not
	// included in the cache key and are not automatically included in requests that
	// CloudFront sends to the origin. Even when this field is set to none, any query
	// strings that are listed in an OriginRequestPolicy are included in origin
	// requests.
	//
	//     * whitelist – The query strings in viewer requests that are
	// listed in the QueryStringNames type are included in the cache key and
	// automatically included in requests that CloudFront sends to the origin.
	//
	//     *
	// allExcept – All query strings in viewer requests that are not listed in the
	// QueryStringNames type are included in the cache key and automatically included
	// in requests that CloudFront sends to the origin.
	//
	//     * all – All query strings
	// in viewer requests are included in the cache key and are automatically included
	// in requests that CloudFront sends to the origin.
	QueryStringBehavior CachePolicyQueryStringBehavior
}

// Contains a cache policy.
type CachePolicySummary struct {
	// The type of cache policy, either managed (created by AWS) or custom (created in
	// this AWS account).
	Type CachePolicyType
	// The cache policy.
	CachePolicy *CachePolicy
}

// CloudFront origin access identity.
type CloudFrontOriginAccessIdentity struct {
	// The ID for the origin access identity, for example, E74FTE3AJFJ256A.
	Id *string
	// The current configuration information for the identity.
	CloudFrontOriginAccessIdentityConfig *CloudFrontOriginAccessIdentityConfig
	// The Amazon S3 canonical user ID for the origin access identity, used when giving
	// the origin access identity read permission to an object in Amazon S3.
	S3CanonicalUserId *string
}

// Origin access identity configuration. Send a GET request to the /CloudFront API
// version/CloudFront/identity ID/config resource.
type CloudFrontOriginAccessIdentityConfig struct {
	// Any comments you want to include about the origin access identity.
	Comment *string
	// A unique value (for example, a date-time stamp) that ensures that the request
	// can't be replayed. If the value of CallerReference is new (regardless of the
	// content of the CloudFrontOriginAccessIdentityConfig object), a new origin access
	// identity is created. If the CallerReference is a value already sent in a
	// previous identity request, and the content of the
	// CloudFrontOriginAccessIdentityConfig is identical to the original request
	// (ignoring white space), the response includes the same information returned to
	// the original request. If the CallerReference is a value you already sent in a
	// previous request to create an identity, but the content of the
	// CloudFrontOriginAccessIdentityConfig is different from the original request,
	// CloudFront returns a CloudFrontOriginAccessIdentityAlreadyExists error.
	CallerReference *string
}

// Lists the origin access identities for CloudFront.Send a GET request to the
// /CloudFront API version/origin-access-identity/cloudfront resource. The response
// includes a CloudFrontOriginAccessIdentityList element with zero or more
// CloudFrontOriginAccessIdentitySummary child elements. By default, your entire
// list of origin access identities is returned in one single page. If the list is
// long, you can paginate it using the MaxItems and Marker parameters.
type CloudFrontOriginAccessIdentityList struct {
	// The maximum number of origin access identities you want in the response body.
	MaxItems *int32
	// A complex type that contains one CloudFrontOriginAccessIdentitySummary element
	// for each origin access identity that was created by the current AWS account.
	Items []*CloudFrontOriginAccessIdentitySummary
	// A flag that indicates whether more origin access identities remain to be listed.
	// If your results were truncated, you can make a follow-up pagination request
	// using the Marker request parameter to retrieve more items in the list.
	IsTruncated *bool
	// Use this when paginating results to indicate where to begin in your list of
	// origin access identities. The results include identities in the list that occur
	// after the marker. To get the next page of results, set the Marker to the value
	// of the NextMarker from the current page's response (which is also the ID of the
	// last identity on that page).
	Marker *string
	// The number of CloudFront origin access identities that were created by the
	// current AWS account.
	Quantity *int32
	// If IsTruncated is true, this element is present and contains the value you can
	// use for the Marker request parameter to continue listing your origin access
	// identities where they left off.
	NextMarker *string
}

// Summary of the information about a CloudFront origin access identity.
type CloudFrontOriginAccessIdentitySummary struct {
	// The Amazon S3 canonical user ID for the origin access identity, which you use
	// when giving the origin access identity read permission to an object in Amazon
	// S3.
	S3CanonicalUserId *string
	// The comment for this origin access identity, as originally specified when
	// created.
	Comment *string
	// The ID for the origin access identity. For example: E74FTE3AJFJ256A.
	Id *string
}

// A field-level encryption content type profile.
type ContentTypeProfile struct {
	// The content type for a field-level encryption content type-profile mapping.
	ContentType *string
	// The profile ID for a field-level encryption content type-profile mapping.
	ProfileId *string
	// The format for a field-level encryption content type-profile mapping.
	Format Format
}

// The configuration for a field-level encryption content type-profile mapping.
type ContentTypeProfileConfig struct {
	// The setting in a field-level encryption content type-profile mapping that
	// specifies what to do when an unknown content type is provided for the profile.
	// If true, content is forwarded without being encrypted when the content type is
	// unknown. If false (the default), an error is returned when the content type is
	// unknown.
	ForwardWhenContentTypeIsUnknown *bool
	// The configuration for a field-level encryption content type-profile.
	ContentTypeProfiles *ContentTypeProfiles
}

// Field-level encryption content type-profile.
type ContentTypeProfiles struct {
	// Items in a field-level encryption content type-profile mapping.
	Items []*ContentTypeProfile
	// The number of field-level encryption content type-profile mappings.
	Quantity *int32
}

// Contains a list of cookie names.
type CookieNames struct {
	// The number of cookie names in the Items list.
	Quantity *int32
	// A list of cookie names.
	Items []*string
}

// This field is deprecated. We recommend that you use a cache policy or an origin
// request policy instead of this field. If you want to include cookies in the
// cache key, use CookiesConfig in a cache policy. See CreateCachePolicy. If you
// want to send cookies to the origin but not include them in the cache key, use
// CookiesConfig in an origin request policy. See CreateOriginRequestPolicy. A
// complex type that specifies whether you want CloudFront to forward cookies to
// the origin and, if so, which ones. For more information about forwarding cookies
// to the origin, see Caching Content Based on Cookies
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html)
// in the Amazon CloudFront Developer Guide.
type CookiePreference struct {
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. If you want to include cookies in the
	// cache key, use a cache policy. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide. If you want to send cookies to the
	// origin but not include them in the cache key, use origin request policy. For
	// more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide. Specifies which cookies to forward to
	// the origin for this cache behavior: all, none, or the list of cookies specified
	// in the WhitelistedNames complex type. Amazon S3 doesn't process cookies. When
	// the cache behavior is forwarding requests to an Amazon S3 origin, specify none
	// for the Forward element.
	Forward ItemSelection
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. If you want to include cookies in the
	// cache key, use a cache policy. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide. If you want to send cookies to the
	// origin but not include them in the cache key, use an origin request policy. For
	// more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide. Required if you specify whitelist for
	// the value of Forward. A complex type that specifies how many different cookies
	// you want CloudFront to forward to the origin for this cache behavior and, if you
	// want to forward selected cookies, the names of those cookies. If you specify all
	// or none for the value of Forward, omit WhitelistedNames. If you change the value
	// of Forward from whitelist to all or none and you don't delete the
	// WhitelistedNames element and its child elements, CloudFront deletes them
	// automatically. For the current limit on the number of cookie names that you can
	// whitelist for each cache behavior, see  CloudFront Limits
	// (https://docs.aws.amazon.com/general/latest/gr/xrefaws_service_limits.html#limits_cloudfront)
	// in the AWS General Reference.
	WhitelistedNames *CookieNames
}

// A complex type that controls:
//
//     * Whether CloudFront replaces HTTP status
// codes in the 4xx and 5xx range with custom error messages before returning the
// response to the viewer.
//
//     * How long CloudFront caches HTTP status codes in
// the 4xx and 5xx range.
//
// For more information about custom error pages, see
// Customizing Error Responses
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
// in the Amazon CloudFront Developer Guide.
type CustomErrorResponse struct {
	// The HTTP status code for which you want to specify a custom error page and/or a
	// caching duration.
	ErrorCode *int32
	// The minimum amount of time, in seconds, that you want CloudFront to cache the
	// HTTP status code specified in ErrorCode. When this time period has elapsed,
	// CloudFront queries your origin to see whether the problem that caused the error
	// has been resolved and the requested object is now available. For more
	// information, see Customizing Error Responses
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
	// in the Amazon CloudFront Developer Guide.
	ErrorCachingMinTTL *int64
	// The HTTP status code that you want CloudFront to return to the viewer along with
	// the custom error page. There are a variety of reasons that you might want
	// CloudFront to return a status code different from the status code that your
	// origin returned to CloudFront, for example:
	//
	//     * Some Internet devices (some
	// firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and
	// prevent the response from being returned to the viewer. If you substitute 200,
	// the response typically won't be intercepted.
	//
	//     * If you don't care about
	// distinguishing among different client errors or server errors, you can specify
	// 400 or 500 as the ResponseCode for all 4xx or 5xx errors.
	//
	//     * You might want
	// to return a 200 status code (OK) and static website so your customers don't know
	// that your website is down.
	//
	// If you specify a value for ResponseCode, you must
	// also specify a value for ResponsePagePath.
	ResponseCode *string
	// The path to the custom error page that you want CloudFront to return to a viewer
	// when your origin returns the HTTP status code specified by ErrorCode, for
	// example, /4xx-errors/403-forbidden.html. If you want to store your objects and
	// your custom error pages in different locations, your distribution must include a
	// cache behavior for which the following is true:
	//
	//     * The value of PathPattern
	// matches the path to your custom error messages. For example, suppose you saved
	// custom error pages for 4xx errors in an Amazon S3 bucket in a directory named
	// /4xx-errors. Your distribution must include a cache behavior for which the path
	// pattern routes requests for your custom error pages to that location, for
	// example, /4xx-errors/*.
	//
	//     * The value of TargetOriginId specifies the value
	// of the ID element for the origin that contains your custom error pages.
	//
	// If you
	// specify a value for ResponsePagePath, you must also specify a value for
	// ResponseCode. We recommend that you store custom error pages in an Amazon S3
	// bucket. If you store custom error pages on an HTTP server and the server starts
	// to return 5xx errors, CloudFront can't get the files that you want to return to
	// viewers because the origin server is unavailable.
	ResponsePagePath *string
}

// A complex type that controls:
//
//     * Whether CloudFront replaces HTTP status
// codes in the 4xx and 5xx range with custom error messages before returning the
// response to the viewer.
//
//     * How long CloudFront caches HTTP status codes in
// the 4xx and 5xx range.
//
// For more information about custom error pages, see
// Customizing Error Responses
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
// in the Amazon CloudFront Developer Guide.
type CustomErrorResponses struct {
	// The number of HTTP status codes for which you want to specify a custom error
	// page and/or a caching duration. If Quantity is 0, you can omit Items.
	Quantity *int32
	// A complex type that contains a CustomErrorResponse element for each HTTP status
	// code for which you want to specify a custom error page and/or a caching
	// duration.
	Items []*CustomErrorResponse
}

// A complex type that contains the list of Custom Headers for each origin.
type CustomHeaders struct {
	// The number of custom headers, if any, for this distribution.
	Quantity *int32
	// Optional: A list that contains one OriginCustomHeader element for each custom
	// header that you want CloudFront to forward to the origin. If Quantity is 0, omit
	// Items.
	Items []*OriginCustomHeader
}

// A custom origin. A custom origin is any origin that is not an Amazon S3 bucket,
// with one exception. An Amazon S3 bucket that is configured with static website
// hosting (https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html) is
// a custom origin.
type CustomOriginConfig struct {
	// Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the
	// origin. Valid values are:
	//
	//     * http-only – CloudFront always uses HTTP to
	// connect to the origin.
	//
	//     * match-viewer – CloudFront connects to the origin
	// using the same protocol that the viewer used to connect to CloudFront.
	//
	//     *
	// https-only – CloudFront always uses HTTPS to connect to the origin.
	OriginProtocolPolicy OriginProtocolPolicy
	// The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP
	// port that the origin listens on.
	HTTPPort *int32
	// The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS
	// port that the origin listens on.
	HTTPSPort *int32
	// Specifies how long, in seconds, CloudFront persists its connection to the
	// origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the
	// default (if you don’t specify otherwise) is 5 seconds. For more information, see
	// Origin Keep-alive Timeout
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginKeepaliveTimeout)
	// in the Amazon CloudFront Developer Guide.
	OriginKeepaliveTimeout *int32
	// Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to
	// your origin over HTTPS. Valid values include SSLv3, TLSv1, TLSv1.1, and TLSv1.2.
	// For more information, see Minimum Origin SSL Protocol
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols)
	// in the Amazon CloudFront Developer Guide.
	OriginSslProtocols *OriginSslProtocols
	// Specifies how long, in seconds, CloudFront waits for a response from the origin.
	// This is also known as the origin response timeout. The minimum timeout is 1
	// second, the maximum is 60 seconds, and the default (if you don’t specify
	// otherwise) is 30 seconds. For more information, see Origin Response Timeout
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout)
	// in the Amazon CloudFront Developer Guide.
	OriginReadTimeout *int32
}

// A complex type that describes the default cache behavior if you don’t specify a
// CacheBehavior element or if request URLs don’t match any of the values of
// PathPattern in CacheBehavior elements. You must create exactly one default cache
// behavior.
type DefaultCacheBehavior struct {
	// The unique identifier of the cache policy that is attached to the default cache
	// behavior. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide.
	CachePolicyId *string
	// A complex type that specifies the AWS accounts, if any, that you want to allow
	// to create signed URLs for private content. If you want to require signed URLs in
	// requests for objects in the target origin that match the PathPattern for this
	// cache behavior, specify true for Enabled, and specify the applicable values for
	// Quantity and Items. For more information, see Serving Private Content with
	// Signed URLs and Signed Cookies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
	// in the Amazon CloudFront Developer Guide. If you don’t want to require signed
	// URLs in requests for objects that match PathPattern, specify false for Enabled
	// and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted
	// signers, change Enabled to true (if it’s currently false), change Quantity as
	// applicable, and specify all of the trusted signers that you want to include in
	// the updated distribution.
	TrustedSigners *TrustedSigners
	// This field is deprecated. We recommend that you use the MinTTL field in a cache
	// policy instead of this field. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. The minimum amount of time that you
	// want objects to stay in CloudFront caches before CloudFront forwards another
	// request to your origin to determine whether the object has been updated. For
	// more information, see Managing How Long Content Stays in an Edge Cache
	// (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide. You must specify 0 for MinTTL if you
	// configure CloudFront to forward all headers to your origin (under Headers, if
	// you specify 1 for Quantity and * for Name).
	MinTTL *int64
	// This field is deprecated. We recommend that you use the MaxTTL field in a cache
	// policy instead of this field. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. The maximum amount of time that you
	// want objects to stay in CloudFront caches before CloudFront forwards another
	// request to your origin to determine whether the object has been updated. The
	// value that you specify applies only when your origin adds HTTP headers such as
	// Cache-Control max-age, Cache-Control s-maxage, and Expires to objects. For more
	// information, see Managing How Long Content Stays in an Edge Cache (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide.
	MaxTTL *int64
	// Whether you want CloudFront to automatically compress certain files for this
	// cache behavior. If so, specify true; if not, specify false. For more
	// information, see Serving Compressed Files
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
	// in the Amazon CloudFront Developer Guide.
	Compress *bool
	// A complex type that controls which HTTP methods CloudFront processes and
	// forwards to your Amazon S3 bucket or your custom origin. There are three
	// choices:
	//
	//     * CloudFront forwards only GET and HEAD requests.
	//
	//     *
	// CloudFront forwards only GET, HEAD, and OPTIONS requests.
	//
	//     * CloudFront
	// forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
	//
	// If you pick
	// the third choice, you may need to restrict access to your Amazon S3 bucket or to
	// your custom origin so users can't perform operations that you don't want them
	// to. For example, you might not want users to have permissions to delete objects
	// from your origin.
	AllowedMethods *AllowedMethods
	// A complex type that contains zero or more Lambda function associations for a
	// cache behavior.
	LambdaFunctionAssociations *LambdaFunctionAssociations
	// The unique identifier of the origin request policy that is attached to the
	// default cache behavior. For more information, see Creating origin request
	// policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// or Using the managed origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
	// in the Amazon CloudFront Developer Guide.
	OriginRequestPolicyId *string
	// The value of ID for the origin that you want CloudFront to route requests to
	// when they use the default cache behavior.
	TargetOriginId *string
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. For more information, see Working with
	// policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html)
	// in the Amazon CloudFront Developer Guide. If you want to include values in the
	// cache key, use a cache policy. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. If you want to send values to the
	// origin but not include them in the cache key, use an origin request policy. For
	// more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// or Using the managed origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
	// in the Amazon CloudFront Developer Guide. A complex type that specifies how
	// CloudFront handles query strings, cookies, and HTTP headers.
	ForwardedValues *ForwardedValues
	// This field is deprecated. We recommend that you use the DefaultTTL field in a
	// cache policy instead of this field. For more information, see Creating cache
	// policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// or Using the managed cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
	// in the Amazon CloudFront Developer Guide. The default amount of time that you
	// want objects to stay in CloudFront caches before CloudFront forwards another
	// request to your origin to determine whether the object has been updated. The
	// value that you specify applies only when your origin does not add HTTP headers
	// such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects.
	// For more information, see Managing How Long Content Stays in an Edge Cache
	// (Expiration)
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide.
	DefaultTTL *int64
	// The value of ID for the field-level encryption configuration that you want
	// CloudFront to use for encrypting specific fields of data for the default cache
	// behavior.
	FieldLevelEncryptionId *string
	// The protocol that viewers can use to access the files in the origin specified by
	// TargetOriginId when a request matches the path pattern in PathPattern. You can
	// specify the following options:
	//
	//     * allow-all: Viewers can use HTTP or
	// HTTPS.
	//
	//     * redirect-to-https: If a viewer submits an HTTP request, CloudFront
	// returns an HTTP status code of 301 (Moved Permanently) to the viewer along with
	// the HTTPS URL. The viewer then resubmits the request using the new URL.
	//
	//     *
	// https-only: If a viewer sends an HTTP request, CloudFront returns an HTTP status
	// code of 403 (Forbidden).
	//
	// For more information about requiring the HTTPS
	// protocol, see Requiring HTTPS Between Viewers and CloudFront
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html)
	// in the Amazon CloudFront Developer Guide. The only way to guarantee that viewers
	// retrieve an object that was fetched from the origin using HTTPS is never to use
	// any other protocol to fetch the object. If you have recently changed from HTTP
	// to HTTPS, we recommend that you clear your objects’ cache because cached objects
	// are protocol agnostic. That means that an edge location will return an object
	// from the cache regardless of whether the current request protocol matches the
	// protocol used previously. For more information, see Managing Cache Expiration
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)
	// in the Amazon CloudFront Developer Guide.
	ViewerProtocolPolicy ViewerProtocolPolicy
	// Indicates whether you want to distribute media files in the Microsoft Smooth
	// Streaming format using the origin that is associated with this cache behavior.
	// If so, specify true; if not, specify false. If you specify true for
	// SmoothStreaming, you can still distribute other content using this cache
	// behavior if the content matches the value of PathPattern.
	SmoothStreaming *bool
}

// A distribution tells CloudFront where you want content to be delivered from, and
// the details about how to track and manage content delivery.
type Distribution struct {
	// The domain name corresponding to the distribution, for example,
	// d111111abcdef8.cloudfront.net.
	DomainName *string
	// The date and time the distribution was last modified.
	LastModifiedTime *time.Time
	// CloudFront automatically adds this element to the response only if you've set up
	// the distribution to serve private content with signed URLs. The element lists
	// the key pair IDs that CloudFront is aware of for each trusted signer. The Signer
	// child element lists the AWS account number of the trusted signer (or an empty
	// Self element if the signer is you). The Signer element also includes the IDs of
	// any active key pairs associated with the trusted signer's AWS account. If no
	// KeyPairId element appears for a Signer, that signer can't create working signed
	// URLs.
	ActiveTrustedSigners *ActiveTrustedSigners
	// The number of invalidation batches currently in progress.
	InProgressInvalidationBatches *int32
	// AWS services in China customers must file for an Internet Content Provider (ICP)
	// recordal if they want to serve content publicly on an alternate domain name,
	// also known as a CNAME, that they've added to CloudFront. AliasICPRecordal
	// provides the ICP recordal status for CNAMEs associated with distributions. For
	// more information about ICP recordals, see  Signup, Accounts, and Credentials
	// (https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html)
	// in Getting Started with AWS services in China.
	AliasICPRecordals []*AliasICPRecordal
	// The ARN (Amazon Resource Name) for the distribution. For example:
	// arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where
	// 123456789012 is your AWS account ID.
	ARN *string
	// The identifier for the distribution. For example: EDFDVBD632BHDS5.
	Id *string
	// This response element indicates the current status of the distribution. When the
	// status is Deployed, the distribution's information is fully propagated to all
	// CloudFront edge locations.
	Status *string
	// The current configuration information for the distribution. Send a GET request
	// to the /CloudFront API version/distribution ID/config resource.
	DistributionConfig *DistributionConfig
}

// A distribution configuration.
type DistributionConfig struct {
	// A complex type that determines the distribution’s SSL/TLS configuration for
	// communicating with viewers.
	ViewerCertificate *ViewerCertificate
	// A complex type that contains information about origins for this distribution.
	Origins *Origins
	// A complex type that controls whether access logs are written for the
	// distribution. For more information about logging, see Access Logs
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html)
	// in the Amazon CloudFront Developer Guide.
	Logging *LoggingConfig
	// Any comments you want to include about the distribution. If you don't want to
	// specify a comment, include an empty Comment element. To delete an existing
	// comment, update the distribution configuration and include an empty Comment
	// element. To add or change a comment, update the distribution configuration and
	// specify the new comment.
	Comment *string
	// The object that you want CloudFront to request from your origin (for example,
	// index.html) when a viewer requests the root URL for your distribution
	// (http://www.example.com) instead of an object in your distribution
	// (http://www.example.com/product-description.html). Specifying a default root
	// object avoids exposing the contents of your distribution. Specify only the
	// object name, for example, index.html. Don't add a / before the object name. If
	// you don't want to specify a default root object when you create a distribution,
	// include an empty DefaultRootObject element. To delete the default root object
	// from an existing distribution, update the distribution configuration and include
	// an empty DefaultRootObject element. To replace the default root object, update
	// the distribution configuration and specify the new object. For more information
	// about the default root object, see Creating a Default Root Object
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html)
	// in the Amazon CloudFront Developer Guide.
	DefaultRootObject *string
	// (Optional) Specify the maximum HTTP version that you want viewers to use to
	// communicate with CloudFront. The default value for new web distributions is
	// http2. Viewers that don't support HTTP/2 automatically use an earlier HTTP
	// version. For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2
	// or later, and must support Server Name Identification (SNI). In general,
	// configuring CloudFront to communicate with viewers using HTTP/2 reduces latency.
	// You can improve performance by optimizing for HTTP/2. For more information, do
	// an Internet search for "http/2 optimization."
	HttpVersion HttpVersion
	// The price class that corresponds with the maximum price that you want to pay for
	// CloudFront service. If you specify PriceClass_All, CloudFront responds to
	// requests for your objects from all CloudFront edge locations. If you specify a
	// price class other than PriceClass_All, CloudFront serves your objects from the
	// CloudFront edge location that has the lowest latency among the edge locations in
	// your price class. Viewers who are in or near regions that are excluded from your
	// specified price class may encounter slower performance. For more information
	// about price classes, see Choosing the Price Class for a CloudFront Distribution
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html)
	// in the Amazon CloudFront Developer Guide. For information about CloudFront
	// pricing, including how price classes (such as Price Class 100) map to CloudFront
	// regions, see Amazon CloudFront Pricing
	// (http://aws.amazon.com/cloudfront/pricing/). For price class information, scroll
	// down to see the table at the bottom of the page.
	PriceClass PriceClass
	// A complex type that contains zero or more CacheBehavior elements.
	CacheBehaviors *CacheBehaviors
	// A unique identifier that specifies the AWS WAF web ACL, if any, to associate
	// with this distribution. To specify a web ACL created using the latest version of
	// AWS WAF, use the ACL ARN, for example
	// arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a.
	// To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example
	// 473e64fd-f30b-4765-81a0-62ad96dd167a. AWS WAF is a web application firewall that
	// lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront,
	// and lets you control access to your content. Based on conditions that you
	// specify, such as the IP addresses that requests originate from or the values of
	// query strings, CloudFront responds to requests either with the requested content
	// or with an HTTP 403 status code (Forbidden). You can also configure CloudFront
	// to return a custom error page when a request is blocked. For more information
	// about AWS WAF, see the AWS WAF Developer Guide
	// (https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html).
	WebACLId *string
	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this distribution.
	Aliases *Aliases
	// A complex type that controls the following:
	//
	//     * Whether CloudFront replaces
	// HTTP status codes in the 4xx and 5xx range with custom error messages before
	// returning the response to the viewer.
	//
	//     * How long CloudFront caches HTTP
	// status codes in the 4xx and 5xx range.
	//
	// For more information about custom error
	// pages, see Customizing Error Responses
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
	// in the Amazon CloudFront Developer Guide.
	CustomErrorResponses *CustomErrorResponses
	// A complex type that contains information about origin groups for this
	// distribution.
	OriginGroups *OriginGroups
	// A complex type that identifies ways in which you want to restrict distribution
	// of your content.
	Restrictions *Restrictions
	// From this field, you can enable or disable the selected distribution.
	Enabled *bool
	// A complex type that describes the default cache behavior if you don't specify a
	// CacheBehavior element or if files don't match any of the values of PathPattern
	// in CacheBehavior elements. You must create exactly one default cache behavior.
	DefaultCacheBehavior *DefaultCacheBehavior
	// A unique value (for example, a date-time stamp) that ensures that the request
	// can't be replayed. If the value of CallerReference is new (regardless of the
	// content of the DistributionConfig object), CloudFront creates a new
	// distribution. If CallerReference is a value that you already sent in a previous
	// request to create a distribution, CloudFront returns a DistributionAlreadyExists
	// error.
	CallerReference *string
	// If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for
	// your distribution, specify true. If you specify false, CloudFront responds to
	// IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses.
	// This allows viewers to submit a second request, for an IPv4 address for your
	// distribution. In general, you should enable IPv6 if you have users on IPv6
	// networks who want to access your content. However, if you're using signed URLs
	// or signed cookies to restrict access to your content, and if you're using a
	// custom policy that includes the IpAddress parameter to restrict the IP addresses
	// that can access your content, don't enable IPv6. If you want to restrict access
	// to some content by IP address and not restrict access to other content (or
	// restrict access but not by IP address), you can create two distributions. For
	// more information, see Creating a Signed URL Using a Custom Policy
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html)
	// in the Amazon CloudFront Developer Guide. If you're using an Amazon Route 53
	// alias resource record set to route traffic to your CloudFront distribution, you
	// need to create a second alias resource record set when both of the following are
	// true:
	//
	//     * You enable IPv6 for the distribution
	//
	//     * You're using alternate
	// domain names in the URLs for your objects
	//
	// For more information, see Routing
	// Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name
	// (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html)
	// in the Amazon Route 53 Developer Guide. If you created a CNAME resource record
	// set, either with Amazon Route 53 or with another DNS service, you don't need to
	// make any changes. A CNAME record will route traffic to your distribution
	// regardless of the IP address format of the viewer request.
	IsIPV6Enabled *bool
}

// A distribution Configuration and a list of tags to be associated with the
// distribution.
type DistributionConfigWithTags struct {
	// A distribution configuration.
	DistributionConfig *DistributionConfig
	// A complex type that contains zero or more Tag elements.
	Tags *Tags
}

// A list of distribution IDs.
type DistributionIdList struct {
	// The total number of distribution IDs returned in the response.
	Quantity *int32
	// Contains the value that you should use in the Marker field of a subsequent
	// request to continue listing distribution IDs where you left off.
	NextMarker *string
	// Contains the distribution IDs in the list.
	Items []*string
	// The value provided in the Marker request field.
	Marker *string
	// A flag that indicates whether more distribution IDs remain to be listed. If your
	// results were truncated, you can make a subsequent request using the Marker
	// request field to retrieve more distribution IDs in the list.
	IsTruncated *bool
	// The maximum number of distribution IDs requested.
	MaxItems *int32
}

// A distribution list.
type DistributionList struct {
	// The value you provided for the MaxItems request parameter.
	MaxItems *int32
	// A flag that indicates whether more distributions remain to be listed. If your
	// results were truncated, you can make a follow-up pagination request using the
	// Marker request parameter to retrieve more distributions in the list.
	IsTruncated *bool
	// A complex type that contains one DistributionSummary element for each
	// distribution that was created by the current AWS account.
	Items []*DistributionSummary
	// If IsTruncated is true, this element is present and contains the value you can
	// use for the Marker request parameter to continue listing your distributions
	// where they left off.
	NextMarker *string
	// The value you provided for the Marker request parameter.
	Marker *string
	// The number of distributions that were created by the current AWS account.
	Quantity *int32
}

// A summary of the information about a CloudFront distribution.
type DistributionSummary struct {
	// The ARN (Amazon Resource Name) for the distribution. For example:
	// arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where
	// 123456789012 is your AWS account ID.
	ARN *string
	// The identifier for the distribution. For example: EDFDVBD632BHDS5.
	Id *string
	// A complex type that contains information about origin groups for this
	// distribution.
	OriginGroups *OriginGroups
	// A complex type that describes the default cache behavior if you don't specify a
	// CacheBehavior element or if files don't match any of the values of PathPattern
	// in CacheBehavior elements. You must create exactly one default cache behavior.
	DefaultCacheBehavior *DefaultCacheBehavior
	// Whether the distribution is enabled to accept user requests for content.
	Enabled *bool
	// A complex type that contains zero or more CustomErrorResponses elements.
	CustomErrorResponses *CustomErrorResponses
	// The comment originally specified when this distribution was created.
	Comment *string
	// The date and time the distribution was last modified.
	LastModifiedTime *time.Time
	// A complex type that contains information about origins for this distribution.
	Origins *Origins
	// A complex type that contains zero or more CacheBehavior elements.
	CacheBehaviors *CacheBehaviors
	// A complex type that contains information about price class for this streaming
	// distribution.
	PriceClass PriceClass
	// Specify the maximum HTTP version that you want viewers to use to communicate
	// with CloudFront. The default value for new web distributions is http2. Viewers
	// that don't support HTTP/2 will automatically use an earlier version.
	HttpVersion HttpVersion
	// Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your
	// distribution.
	IsIPV6Enabled *bool
	// A complex type that determines the distribution’s SSL/TLS configuration for
	// communicating with viewers.
	ViewerCertificate *ViewerCertificate
	// AWS services in China customers must file for an Internet Content Provider (ICP)
	// recordal if they want to serve content publicly on an alternate domain name,
	// also known as a CNAME, that they've added to CloudFront. AliasICPRecordal
	// provides the ICP recordal status for CNAMEs associated with distributions. For
	// more information about ICP recordals, see  Signup, Accounts, and Credentials
	// (https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html)
	// in Getting Started with AWS services in China.
	AliasICPRecordals []*AliasICPRecordal
	// The current status of the distribution. When the status is Deployed, the
	// distribution's information is propagated to all CloudFront edge locations.
	Status *string
	// A complex type that identifies ways in which you want to restrict distribution
	// of your content.
	Restrictions *Restrictions
	// The Web ACL Id (if any) associated with the distribution.
	WebACLId *string
	// The domain name that corresponds to the distribution, for example,
	// d111111abcdef8.cloudfront.net.
	DomainName *string
	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this distribution.
	Aliases *Aliases
}

// Complex data type for field-level encryption profiles that includes all of the
// encryption entities.
type EncryptionEntities struct {
	// Number of field pattern items in a field-level encryption content type-profile
	// mapping.
	Quantity *int32
	// An array of field patterns in a field-level encryption content type-profile
	// mapping.
	Items []*EncryptionEntity
}

// Complex data type for field-level encryption profiles that includes the
// encryption key and field pattern specifications.
type EncryptionEntity struct {
	// The provider associated with the public key being used for encryption. This
	// value must also be provided with the private key for applications to be able to
	// decrypt data.
	ProviderId *string
	// Field patterns in a field-level encryption content type profile specify the
	// fields that you want to be encrypted. You can provide the full field name, or
	// any beginning characters followed by a wildcard (*). You can't overlap field
	// patterns. For example, you can't have both ABC* and AB*. Note that field
	// patterns are case-sensitive.
	FieldPatterns *FieldPatterns
	// The public key associated with a set of field-level encryption patterns, to be
	// used when encrypting the fields that match the patterns.
	PublicKeyId *string
}

// A complex data type that includes the profile configurations and other options
// specified for field-level encryption.
type FieldLevelEncryption struct {
	// The last time the field-level encryption configuration was changed.
	LastModifiedTime *time.Time
	// A complex data type that includes the profile configurations specified for
	// field-level encryption.
	FieldLevelEncryptionConfig *FieldLevelEncryptionConfig
	// The configuration ID for a field-level encryption configuration which includes a
	// set of profiles that specify certain selected data fields to be encrypted by
	// specific public keys.
	Id *string
}

// A complex data type that includes the profile configurations specified for
// field-level encryption.
type FieldLevelEncryptionConfig struct {
	// A unique number that ensures the request can't be replayed.
	CallerReference *string
	// An optional comment about the configuration.
	Comment *string
	// A complex data type that specifies when to forward content if a profile isn't
	// found and the profile that can be provided as a query argument in a request.
	QueryArgProfileConfig *QueryArgProfileConfig
	// A complex data type that specifies when to forward content if a content type
	// isn't recognized and profiles to use as by default in a request if a query
	// argument doesn't specify a profile to use.
	ContentTypeProfileConfig *ContentTypeProfileConfig
}

// List of field-level encrpytion configurations.
type FieldLevelEncryptionList struct {
	// The maximum number of elements you want in the response body.
	MaxItems *int32
	// The number of field-level encryption items.
	Quantity *int32
	// An array of field-level encryption items.
	Items []*FieldLevelEncryptionSummary
	// If there are more elements to be listed, this element is present and contains
	// the value that you can use for the Marker request parameter to continue listing
	// your configurations where you left off.
	NextMarker *string
}

// A complex data type for field-level encryption profiles.
type FieldLevelEncryptionProfile struct {
	// A complex data type that includes the profile name and the encryption entities
	// for the field-level encryption profile.
	FieldLevelEncryptionProfileConfig *FieldLevelEncryptionProfileConfig
	// The last time the field-level encryption profile was updated.
	LastModifiedTime *time.Time
	// The ID for a field-level encryption profile configuration which includes a set
	// of profiles that specify certain selected data fields to be encrypted by
	// specific public keys.
	Id *string
}

// A complex data type of profiles for the field-level encryption.
type FieldLevelEncryptionProfileConfig struct {
	// A complex data type of encryption entities for the field-level encryption
	// profile that include the public key ID, provider, and field patterns for
	// specifying which fields to encrypt with this key.
	EncryptionEntities *EncryptionEntities
	// A unique number that ensures that the request can't be replayed.
	CallerReference *string
	// Profile name for the field-level encryption profile.
	Name *string
	// An optional comment for the field-level encryption profile.
	Comment *string
}

// List of field-level encryption profiles.
type FieldLevelEncryptionProfileList struct {
	// If there are more elements to be listed, this element is present and contains
	// the value that you can use for the Marker request parameter to continue listing
	// your profiles where you left off.
	NextMarker *string
	// The number of field-level encryption profiles.
	Quantity *int32
	// The field-level encryption profile items.
	Items []*FieldLevelEncryptionProfileSummary
	// The maximum number of field-level encryption profiles you want in the response
	// body.
	MaxItems *int32
}

// The field-level encryption profile summary.
type FieldLevelEncryptionProfileSummary struct {
	// ID for the field-level encryption profile summary.
	Id *string
	// A complex data type of encryption entities for the field-level encryption
	// profile that include the public key ID, provider, and field patterns for
	// specifying which fields to encrypt with this key.
	EncryptionEntities *EncryptionEntities
	// The time when the the field-level encryption profile summary was last updated.
	LastModifiedTime *time.Time
	// Name for the field-level encryption profile summary.
	Name *string
	// An optional comment for the field-level encryption profile summary.
	Comment *string
}

// A summary of a field-level encryption item.
type FieldLevelEncryptionSummary struct {
	// An optional comment about the field-level encryption item.
	Comment *string
	// The unique ID of a field-level encryption item.
	Id *string
	// A summary of a content type-profile mapping.
	ContentTypeProfileConfig *ContentTypeProfileConfig
	// A summary of a query argument-profile mapping.
	QueryArgProfileConfig *QueryArgProfileConfig
	// The last time that the summary of field-level encryption items was modified.
	LastModifiedTime *time.Time
}

// A complex data type that includes the field patterns to match for field-level
// encryption.
type FieldPatterns struct {
	// The number of field-level encryption field patterns.
	Quantity *int32
	// An array of the field-level encryption field patterns.
	Items []*string
}

// This field is deprecated. We recommend that you use a cache policy or an origin
// request policy instead of this field. If you want to include values in the cache
// key, use a cache policy. For more information, see Creating cache policies
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
// in the Amazon CloudFront Developer Guide. If you want to send values to the
// origin but not include them in the cache key, use an origin request policy. For
// more information, see Creating origin request policies
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
// in the Amazon CloudFront Developer Guide. A complex type that specifies how
// CloudFront handles query strings, cookies, and HTTP headers.
type ForwardedValues struct {
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. If you want to include cookies in the
	// cache key, use a cache policy. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide. If you want to send cookies to the
	// origin but not include them in the cache key, use an origin request policy. For
	// more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide. A complex type that specifies whether
	// you want CloudFront to forward cookies to the origin and, if so, which ones. For
	// more information about forwarding cookies to the origin, see How CloudFront
	// Forwards, Caches, and Logs Cookies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html)
	// in the Amazon CloudFront Developer Guide.
	Cookies *CookiePreference
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. If you want to include query strings in
	// the cache key, use a cache policy. For more information, see Creating cache
	// policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide. If you want to send query strings to
	// the origin but not include them in the cache key, use an origin request policy.
	// For more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide. A complex type that contains
	// information about the query string parameters that you want CloudFront to use
	// for caching for this cache behavior.
	QueryStringCacheKeys *QueryStringCacheKeys
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. If you want to include query strings in
	// the cache key, use a cache policy. For more information, see Creating cache
	// policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide. If you want to send query strings to
	// the origin but not include them in the cache key, use an origin request policy.
	// For more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide. Indicates whether you want CloudFront
	// to forward query strings to the origin that is associated with this cache
	// behavior and cache based on the query string parameters. CloudFront behavior
	// depends on the value of QueryString and on the values that you specify for
	// QueryStringCacheKeys, if any: If you specify true for QueryString and you don't
	// specify any values for QueryStringCacheKeys, CloudFront forwards all query
	// string parameters to the origin and caches based on all query string parameters.
	// Depending on how many query string parameters and values you have, this can
	// adversely affect performance because CloudFront must forward more requests to
	// the origin. If you specify true for QueryString and you specify one or more
	// values for QueryStringCacheKeys, CloudFront forwards all query string parameters
	// to the origin, but it only caches based on the query string parameters that you
	// specify. If you specify false for QueryString, CloudFront doesn't forward any
	// query string parameters to the origin, and doesn't cache based on query string
	// parameters. For more information, see Configuring CloudFront to Cache Based on
	// Query String Parameters
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html)
	// in the Amazon CloudFront Developer Guide.
	QueryString *bool
	// This field is deprecated. We recommend that you use a cache policy or an origin
	// request policy instead of this field. If you want to include headers in the
	// cache key, use a cache policy. For more information, see Creating cache policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide. If you want to send headers to the
	// origin but not include them in the cache key, use an origin request policy. For
	// more information, see Creating origin request policies
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide. A complex type that specifies the
	// Headers, if any, that you want CloudFront to forward to the origin for this
	// cache behavior (whitelisted headers). For the headers that you specify,
	// CloudFront also caches separate versions of a specified object that is based on
	// the header values in viewer requests. For more information, see  Caching Content
	// Based on Request Headers
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html)
	// in the Amazon CloudFront Developer Guide.
	Headers *Headers
}

// A complex type that controls the countries in which your content is distributed.
// CloudFront determines the location of your users using MaxMind GeoIP databases.
type GeoRestriction struct {
	// When geo restriction is enabled, this is the number of countries in your
	// whitelist or blacklist. Otherwise, when it is not enabled, Quantity is 0, and
	// you can omit Items.
	Quantity *int32
	// A complex type that contains a Location element for each country in which you
	// want CloudFront either to distribute your content (whitelist) or not distribute
	// your content (blacklist). The Location element is a two-letter, uppercase
	// country code for a country that you want to include in your blacklist or
	// whitelist. Include one Location element for each country. CloudFront and MaxMind
	// both use ISO 3166 country codes. For the current list of countries and the
	// corresponding codes, see ISO 3166-1-alpha-2 code on the International
	// Organization for Standardization website. You can also refer to the country list
	// on the CloudFront console, which includes both country names and codes.
	Items []*string
	// The method that you want to use to restrict distribution of your content by
	// country:
	//
	//     * none: No geo restriction is enabled, meaning access to content
	// is not restricted by client geo location.
	//
	//     * blacklist: The Location
	// elements specify the countries in which you don't want CloudFront to distribute
	// your content.
	//
	//     * whitelist: The Location elements specify the countries in
	// which you want CloudFront to distribute your content.
	RestrictionType GeoRestrictionType
}

// Contains a list of HTTP header names.
type Headers struct {
	// A list of HTTP header names.
	Items []*string
	// The number of header names in the Items list.
	Quantity *int32
}

// An invalidation.
type Invalidation struct {
	// The identifier for the invalidation request. For example: IDFDVBD632BHDS5.
	Id *string
	// The current invalidation information for the batch request.
	InvalidationBatch *InvalidationBatch
	// The date and time the invalidation request was first made.
	CreateTime *time.Time
	// The status of the invalidation request. When the invalidation batch is finished,
	// the status is Completed.
	Status *string
}

// An invalidation batch.
type InvalidationBatch struct {
	// A complex type that contains information about the objects that you want to
	// invalidate. For more information, see Specifying the Objects to Invalidate
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html#invalidation-specifying-objects)
	// in the Amazon CloudFront Developer Guide.
	Paths *Paths
	// A value that you specify to uniquely identify an invalidation request.
	// CloudFront uses the value to prevent you from accidentally resubmitting an
	// identical request. Whenever you create a new invalidation request, you must
	// specify a new value for CallerReference and change other values in the request
	// as applicable. One way to ensure that the value of CallerReference is unique is
	// to use a timestamp, for example, 20120301090000. If you make a second
	// invalidation request with the same value for CallerReference, and if the rest of
	// the request is the same, CloudFront doesn't create a new invalidation request.
	// Instead, CloudFront returns information about the invalidation request that you
	// previously created with the same CallerReference. If CallerReference is a value
	// you already sent in a previous invalidation batch request but the content of any
	// Path is different from the original request, CloudFront returns an
	// InvalidationBatchAlreadyExists error.
	CallerReference *string
}

// The InvalidationList complex type describes the list of invalidation objects.
// For more information about invalidation, see Invalidating Objects (Web
// Distributions Only)
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html)
// in the Amazon CloudFront Developer Guide.
type InvalidationList struct {
	// A flag that indicates whether more invalidation batch requests remain to be
	// listed. If your results were truncated, you can make a follow-up pagination
	// request using the Marker request parameter to retrieve more invalidation batches
	// in the list.
	IsTruncated *bool
	// The value that you provided for the Marker request parameter.
	Marker *string
	// A complex type that contains one InvalidationSummary element for each
	// invalidation batch created by the current AWS account.
	Items []*InvalidationSummary
	// The value that you provided for the MaxItems request parameter.
	MaxItems *int32
	// The number of invalidation batches that were created by the current AWS account.
	Quantity *int32
	// If IsTruncated is true, this element is present and contains the value that you
	// can use for the Marker request parameter to continue listing your invalidation
	// batches where they left off.
	NextMarker *string
}

// A summary of an invalidation request.
type InvalidationSummary struct {
	// The status of an invalidation request.
	Status *string
	// The unique ID for an invalidation request.
	Id *string
	// The time that an invalidation request was created.
	CreateTime *time.Time
}

// A complex type that lists the active CloudFront key pairs, if any, that are
// associated with AwsAccountNumber. For more information, see ActiveTrustedSigners
// (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ActiveTrustedSigners.html).
type KeyPairIds struct {
	// The number of active CloudFront key pairs for AwsAccountNumber. For more
	// information, see ActiveTrustedSigners
	// (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ActiveTrustedSigners.html).
	Quantity *int32
	// A complex type that lists the active CloudFront key pairs, if any, that are
	// associated with AwsAccountNumber. For more information, see ActiveTrustedSigners
	// (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ActiveTrustedSigners.html).
	Items []*string
}

// A complex type that contains a Lambda function association.
type LambdaFunctionAssociation struct {
	// A flag that allows a Lambda function to have read access to the body content.
	// For more information, see Accessing the Request Body by Choosing the Include
	// Body Option
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html)
	// in the Amazon CloudFront Developer Guide.
	IncludeBody *bool
	// Specifies the event type that triggers a Lambda function invocation. You can
	// specify the following values:
	//
	//     * viewer-request: The function executes when
	// CloudFront receives a request from a viewer and before it checks to see whether
	// the requested object is in the edge cache.
	//
	//     * origin-request: The function
	// executes only when CloudFront sends a request to your origin. When the requested
	// object is in the edge cache, the function doesn't execute.
	//
	//     *
	// origin-response: The function executes after CloudFront receives a response from
	// the origin and before it caches the object in the response. When the requested
	// object is in the edge cache, the function doesn't execute.
	//
	//     *
	// viewer-response: The function executes before CloudFront returns the requested
	// object to the viewer. The function executes regardless of whether the object was
	// already in the edge cache. If the origin returns an HTTP status code other than
	// HTTP 200 (OK), the function doesn't execute.
	EventType EventType
	// The ARN of the Lambda function. You must specify the ARN of a function version;
	// you can't specify a Lambda alias or $LATEST.
	LambdaFunctionARN *string
}

// A complex type that specifies a list of Lambda functions associations for a
// cache behavior.  <p>If you want to invoke one or more Lambda functions triggered
// by requests that match the <code>PathPattern</code> of the cache behavior,
// specify the applicable values for <code>Quantity</code> and <code>Items</code>.
// Note that there can be up to 4 <code>LambdaFunctionAssociation</code> items in
// this list (one for each possible value of <code>EventType</code>) and each
// <code>EventType</code> can be associated with the Lambda function only once.</p>
// <p>If you don't want to invoke any Lambda functions for the requests that match
// <code>PathPattern</code>, specify <code>0</code> for <code>Quantity</code> and
// omit <code>Items</code>. </p>
type LambdaFunctionAssociations struct {
	// The number of Lambda function associations for this cache behavior.
	Quantity *int32
	// Optional: A complex type that contains LambdaFunctionAssociation items for this
	// cache behavior. If Quantity is 0, you can omit Items.
	Items []*LambdaFunctionAssociation
}

// A complex type that controls whether access logs are written for the
// distribution.
type LoggingConfig struct {
	// Specifies whether you want CloudFront to include cookies in access logs, specify
	// true for IncludeCookies. If you choose to include cookies in logs, CloudFront
	// logs all cookies regardless of how you configure the cache behaviors for this
	// distribution. If you don't want to include cookies when you create a
	// distribution or if you want to disable include cookies for an existing
	// distribution, specify false for IncludeCookies.
	IncludeCookies *bool
	// The Amazon S3 bucket to store the access logs in, for example,
	// myawslogbucket.s3.amazonaws.com.
	Bucket *string
	// Specifies whether you want CloudFront to save access logs to an Amazon S3
	// bucket. If you don't want to enable logging when you create a distribution or if
	// you want to disable logging for an existing distribution, specify false for
	// Enabled, and specify empty Bucket and Prefix elements. If you specify false for
	// Enabled but you specify values for Bucket, prefix, and IncludeCookies, the
	// values are automatically deleted.
	Enabled *bool
	// An optional string that you want CloudFront to prefix to the access log
	// filenames for this distribution, for example, myprefix/. If you want to enable
	// logging, but you don't want to specify a prefix, you still must include an empty
	// Prefix element in the Logging element.
	Prefix *string
}

// An origin. An origin is the location where content is stored, and from which
// CloudFront gets content to serve to viewers. To specify an origin:
//
//     * Use
// the S3OriginConfig type to specify an Amazon S3 bucket that is not configured
// with static website hosting.
//
//     * Use the CustomOriginConfig type to specify
// various other kinds of content containers or HTTP servers, including:
//
//         *
// An Amazon S3 bucket that is configured with static website hosting
//
//         * An
// Elastic Load Balancing load balancer
//
//         * An AWS Elemental MediaPackage
// origin
//
//         * An AWS Elemental MediaStore container
//
//         * Any other
// HTTP server, running on an Amazon EC2 instance or any other kind of host
//
// For
// the current maximum number of origins that you can specify per distribution, see
// General Quotas on Web Distributions
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-web-distributions)
// in the Amazon CloudFront Developer Guide (quotas were formerly referred to as
// limits).
type Origin struct {
	// The domain name for the origin. For more information, see Origin Domain Name
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesDomainName)
	// in the Amazon CloudFront Developer Guide.
	DomainName *string
	// Use this type to specify an origin that is an Amazon S3 bucket that is not
	// configured with static website hosting. To specify any other type of origin,
	// including an Amazon S3 bucket that is configured with static website hosting,
	// use the CustomOriginConfig type instead.
	S3OriginConfig *S3OriginConfig
	// Use this type to specify an origin that is a content container or HTTP server,
	// including an Amazon S3 bucket that is configured with static website hosting. To
	// specify an Amazon S3 bucket that is not configured with static website hosting,
	// use the S3OriginConfig type instead.
	CustomOriginConfig *CustomOriginConfig
	// An optional path that CloudFront appends to the origin domain name when
	// CloudFront requests content from the origin. For more information, see Origin
	// Path
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginPath)
	// in the Amazon CloudFront Developer Guide.
	OriginPath *string
	// The number of times that CloudFront attempts to connect to the origin. The
	// minimum number is 1, the maximum is 3, and the default (if you don’t specify
	// otherwise) is 3. For a custom origin (including an Amazon S3 bucket that’s
	// configured with static website hosting), this value also specifies the number of
	// times that CloudFront attempts to get a response from the origin, in the case of
	// an Origin Response Timeout
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout).
	// For more information, see Origin Connection Attempts
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-attempts)
	// in the Amazon CloudFront Developer Guide.
	ConnectionAttempts *int32
	// A unique identifier for the origin. This value must be unique within the
	// distribution. Use this value to specify the TargetOriginId in a CacheBehavior or
	// DefaultCacheBehavior.
	Id *string
	// A list of HTTP header names and values that CloudFront adds to requests it sends
	// to the origin. For more information, see Adding Custom Headers to Origin
	// Requests
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html)
	// in the Amazon CloudFront Developer Guide.
	CustomHeaders *CustomHeaders
	// The number of seconds that CloudFront waits when trying to establish a
	// connection to the origin. The minimum timeout is 1 second, the maximum is 10
	// seconds, and the default (if you don’t specify otherwise) is 10 seconds. For
	// more information, see Origin Connection Timeout
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-timeout)
	// in the Amazon CloudFront Developer Guide.
	ConnectionTimeout *int32
}

// A complex type that contains HeaderName and HeaderValue elements, if any, for
// this distribution.
type OriginCustomHeader struct {
	// The value for the header that you specified in the HeaderName field.
	HeaderValue *string
	// The name of a header that you want CloudFront to send to your origin. For more
	// information, see Adding Custom Headers to Origin Requests
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/forward-custom-headers.html)
	// in the Amazon CloudFront Developer Guide.
	HeaderName *string
}

// An origin group includes two origins (a primary origin and a second origin to
// failover to) and a failover criteria that you specify. You create an origin
// group to support origin failover in CloudFront. When you create or update a
// distribution, you can specifiy the origin group instead of a single origin, and
// CloudFront will failover from the primary origin to the second origin under the
// failover conditions that you've chosen.
type OriginGroup struct {
	// The origin group's ID.
	Id *string
	// A complex type that contains information about the origins in an origin group.
	Members *OriginGroupMembers
	// A complex type that contains information about the failover criteria for an
	// origin group.
	FailoverCriteria *OriginGroupFailoverCriteria
}

// A complex data type that includes information about the failover criteria for an
// origin group, including the status codes for which CloudFront will failover from
// the primary origin to the second origin.
type OriginGroupFailoverCriteria struct {
	// The status codes that, when returned from the primary origin, will trigger
	// CloudFront to failover to the second origin.
	StatusCodes *StatusCodes
}

// An origin in an origin group.
type OriginGroupMember struct {
	// The ID for an origin in an origin group.
	OriginId *string
}

// A complex data type for the origins included in an origin group.
type OriginGroupMembers struct {
	// The number of origins in an origin group.
	Quantity *int32
	// Items (origins) in an origin group.
	Items []*OriginGroupMember
}

// A complex data type for the origin groups specified for a distribution.
type OriginGroups struct {
	// The items (origin groups) in a distribution.
	Items []*OriginGroup
	// The number of origin groups.
	Quantity *int32
}

// An origin request policy. When it’s attached to a cache behavior, the origin
// request policy determines the values that CloudFront includes in requests that
// it sends to the origin. Each request that CloudFront sends to the origin
// includes the following:
//
//     * The request body and the URL path (without the
// domain name) from the viewer request.
//
//     * The headers that CloudFront
// automatically includes in every origin request, including Host, User-Agent, and
// X-Amz-Cf-Id.
//
//     * All HTTP headers, cookies, and URL query strings that are
// specified in the cache policy or the origin request policy. These can include
// items from the viewer request and, in the case of headers, additional ones that
// are added by CloudFront.
//
// CloudFront sends a request when it can’t find an
// object in its cache that matches the request. If you want to send values to the
// origin and also include them in the cache key, use CreateCachePolicy.
type OriginRequestPolicy struct {
	// The unique identifier for the origin request policy.
	Id *string
	// The origin request policy configuration.
	OriginRequestPolicyConfig *OriginRequestPolicyConfig
	// The date and time when the origin request policy was last modified.
	LastModifiedTime *time.Time
}

// An origin request policy configuration. This configuration determines the values
// that CloudFront includes in requests that it sends to the origin. Each request
// that CloudFront sends to the origin includes the following:
//
//     * The request
// body and the URL path (without the domain name) from the viewer request.
//
//     *
// The headers that CloudFront automatically includes in every origin request,
// including Host, User-Agent, and X-Amz-Cf-Id.
//
//     * All HTTP headers, cookies,
// and URL query strings that are specified in the cache policy or the origin
// request policy. These can include items from the viewer request and, in the case
// of headers, additional ones that are added by CloudFront.
//
// CloudFront sends a
// request when it can’t find an object in its cache that matches the request. If
// you want to send values to the origin and also include them in the cache key,
// use CreateCachePolicy.
type OriginRequestPolicyConfig struct {
	// The cookies from viewer requests to include in origin requests.
	CookiesConfig *OriginRequestPolicyCookiesConfig
	// The HTTP headers to include in origin requests. These can include headers from
	// viewer requests and additional headers added by CloudFront.
	HeadersConfig *OriginRequestPolicyHeadersConfig
	// A comment to describe the origin request policy.
	Comment *string
	// The URL query strings from viewer requests to include in origin requests.
	QueryStringsConfig *OriginRequestPolicyQueryStringsConfig
	// A unique name to identify the origin request policy.
	Name *string
}

// An object that determines whether any cookies in viewer requests (and if so,
// which cookies) are included in requests that CloudFront sends to the origin.
type OriginRequestPolicyCookiesConfig struct {
	// Determines whether cookies in viewer requests are included in requests that
	// CloudFront sends to the origin. Valid values are:
	//
	//     * none – Cookies in
	// viewer requests are not included in requests that CloudFront sends to the
	// origin. Even when this field is set to none, any cookies that are listed in a
	// CachePolicy are included in origin requests.
	//
	//     * whitelist – The cookies in
	// viewer requests that are listed in the CookieNames type are included in requests
	// that CloudFront sends to the origin.
	//
	//     * all – All cookies in viewer requests
	// are included in requests that CloudFront sends to the origin.
	CookieBehavior OriginRequestPolicyCookieBehavior
	// Contains a list of cookie names.
	Cookies *CookieNames
}

// An object that determines whether any HTTP headers (and if so, which headers)
// are included in requests that CloudFront sends to the origin.
type OriginRequestPolicyHeadersConfig struct {
	// Determines whether any HTTP headers are included in requests that CloudFront
	// sends to the origin. Valid values are:
	//
	//     * none – HTTP headers are not
	// included in requests that CloudFront sends to the origin. Even when this field
	// is set to none, any headers that are listed in a CachePolicy are included in
	// origin requests.
	//
	//     * whitelist – The HTTP headers that are listed in the
	// Headers type are included in requests that CloudFront sends to the origin.
	//
	//
	// * allViewer – All HTTP headers in viewer requests are included in requests that
	// CloudFront sends to the origin.
	//
	//     * allViewerAndWhitelistCloudFront – All
	// HTTP headers in viewer requests and the additional CloudFront headers that are
	// listed in the Headers type are included in requests that CloudFront sends to the
	// origin. The additional headers are added by CloudFront.
	HeaderBehavior OriginRequestPolicyHeaderBehavior
	// Contains a list of HTTP header names.
	Headers *Headers
}

// A list of origin request policies.
type OriginRequestPolicyList struct {
	// The total number of origin request policies returned in the response.
	Quantity *int32
	// If there are more items in the list than are in this response, this element is
	// present. It contains the value that you should use in the Marker field of a
	// subsequent request to continue listing origin request policies where you left
	// off.
	NextMarker *string
	// The maximum number of origin request policies requested.
	MaxItems *int32
	// Contains the origin request policies in the list.
	Items []*OriginRequestPolicySummary
}

// An object that determines whether any URL query strings in viewer requests (and
// if so, which query strings) are included in requests that CloudFront sends to
// the origin.
type OriginRequestPolicyQueryStringsConfig struct {
	// Contains a list of the query strings in viewer requests that are included in
	// requests that CloudFront sends to the origin.
	QueryStrings *QueryStringNames
	// Determines whether any URL query strings in viewer requests are included in
	// requests that CloudFront sends to the origin. Valid values are:
	//
	//     * none –
	// Query strings in viewer requests are not included in requests that CloudFront
	// sends to the origin. Even when this field is set to none, any query strings that
	// are listed in a CachePolicy are included in origin requests.
	//
	//     * whitelist –
	// The query strings in viewer requests that are listed in the QueryStringNames
	// type are included in requests that CloudFront sends to the origin.
	//
	//     * all –
	// All query strings in viewer requests are included in requests that CloudFront
	// sends to the origin.
	QueryStringBehavior OriginRequestPolicyQueryStringBehavior
}

// Contains an origin request policy.
type OriginRequestPolicySummary struct {
	// The origin request policy.
	OriginRequestPolicy *OriginRequestPolicy
	// The type of origin request policy, either managed (created by AWS) or custom
	// (created in this AWS account).
	Type OriginRequestPolicyType
}

// A complex type that contains information about origins and origin groups for
// this distribution.
type Origins struct {
	// The number of origins or origin groups for this distribution.
	Quantity *int32
	// A complex type that contains origins or origin groups for this distribution.
	Items []*Origin
}

// A complex type that contains information about the SSL/TLS protocols that
// CloudFront can use when establishing an HTTPS connection with your origin.
type OriginSslProtocols struct {
	// The number of SSL/TLS protocols that you want to allow CloudFront to use when
	// establishing an HTTPS connection with this origin.
	Quantity *int32
	// A list that contains allowed SSL/TLS protocols for this distribution.
	Items []SslProtocol
}

// This object determines the values that CloudFront includes in the cache key.
// These values can include HTTP headers, cookies, and URL query strings.
// CloudFront uses the cache key to find an object in its cache that it can return
// to the viewer. The headers, cookies, and query strings that are included in the
// cache key are automatically included in requests that CloudFront sends to the
// origin. CloudFront sends a request when it can’t find an object in its cache
// that matches the request’s cache key. If you want to send values to the origin
// but not include them in the cache key, use CreateOriginRequestPolicy.
type ParametersInCacheKeyAndForwardedToOrigin struct {
	// An object that determines whether any cookies in viewer requests (and if so,
	// which cookies) are included in the cache key and automatically included in
	// requests that CloudFront sends to the origin.
	CookiesConfig *CachePolicyCookiesConfig
	// An object that determines whether any URL query strings in viewer requests (and
	// if so, which query strings) are included in the cache key and automatically
	// included in requests that CloudFront sends to the origin.
	QueryStringsConfig *CachePolicyQueryStringsConfig
	// A flag that determines whether the Accept-Encoding HTTP header is included in
	// the cache key and included in requests that CloudFront sends to the origin. If
	// this field is true and the viewer request includes the Accept-Encoding header,
	// then CloudFront normalizes the value of the viewer’s Accept-Encoding header to
	// one of the following:
	//
	//     * Accept-Encoding: gzip (if gzip is in the viewer’s
	// Accept-Encoding header)
	//
	//     * Accept-Encoding: identity (if gzip is not in the
	// viewer’s Accept-Encoding header)
	//
	// CloudFront includes the normalized header in
	// the cache key and includes it in requests that CloudFront sends to the origin.
	// If this field is false, then CloudFront treats the Accept-Encoding header the
	// same as any other HTTP header in the viewer request. By default, it’s not
	// included in the cache key and it’s not included in origin requests. You can
	// manually add Accept-Encoding to the headers whitelist like any other HTTP
	// header. When this field is true, you should not whitelist the Accept-Encoding
	// header in the cache policy or in an origin request policy attached to the same
	// cache behavior. For more information, see Cache compressed objects
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-policy-compressed-objects)
	// in the Amazon CloudFront Developer Guide.
	EnableAcceptEncodingGzip *bool
	// An object that determines whether any HTTP headers (and if so, which headers)
	// are included in the cache key and automatically included in requests that
	// CloudFront sends to the origin.
	HeadersConfig *CachePolicyHeadersConfig
}

// A complex type that contains information about the objects that you want to
// invalidate. For more information, see Specifying the Objects to Invalidate
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html#invalidation-specifying-objects)
// in the Amazon CloudFront Developer Guide.
type Paths struct {
	// A complex type that contains a list of the paths that you want to invalidate.
	Items []*string
	// The number of invalidation paths specified for the objects that you want to
	// invalidate.
	Quantity *int32
}

// A complex data type of public keys you add to CloudFront to use with features
// like field-level encryption.
type PublicKey struct {
	// A complex data type for a public key you add to CloudFront to use with features
	// like field-level encryption.
	PublicKeyConfig *PublicKeyConfig
	// A time you added a public key to CloudFront.
	CreatedTime *time.Time
	// A unique ID assigned to a public key you've added to CloudFront.
	Id *string
}

// Information about a public key you add to CloudFront to use with features like
// field-level encryption.
type PublicKeyConfig struct {
	// An optional comment about a public key.
	Comment *string
	// The encoded public key that you want to add to CloudFront to use with features
	// like field-level encryption.
	EncodedKey *string
	// The name for a public key you add to CloudFront to use with features like
	// field-level encryption.
	Name *string
	// A unique number that ensures that the request can't be replayed.
	CallerReference *string
}

// A list of public keys you've added to CloudFront to use with features like
// field-level encryption.
type PublicKeyList struct {
	// If there are more elements to be listed, this element is present and contains
	// the value that you can use for the Marker request parameter to continue listing
	// your public keys where you left off.
	NextMarker *string
	// The maximum number of public keys you want in the response body.
	MaxItems *int32
	// An array of information about a public key you add to CloudFront to use with
	// features like field-level encryption.
	Items []*PublicKeySummary
	// The number of public keys you added to CloudFront to use with features like
	// field-level encryption.
	Quantity *int32
}

// A complex data type for public key information.
type PublicKeySummary struct {
	// Name for public key information summary.
	Name *string
	// Creation time for public key information summary.
	CreatedTime *time.Time
	// Encoded key for public key information summary.
	EncodedKey *string
	// ID for public key information summary.
	Id *string
	// Comment for public key information summary.
	Comment *string
}

// Query argument-profile mapping for field-level encryption.
type QueryArgProfile struct {
	// ID of profile to use for field-level encryption query argument-profile mapping
	ProfileId *string
	// Query argument for field-level encryption query argument-profile mapping.
	QueryArg *string
}

// Configuration for query argument-profile mapping for field-level encryption.
type QueryArgProfileConfig struct {
	// Flag to set if you want a request to be forwarded to the origin even if the
	// profile specified by the field-level encryption query argument, fle-profile, is
	// unknown.
	ForwardWhenQueryArgProfileIsUnknown *bool
	// Profiles specified for query argument-profile mapping for field-level
	// encryption.
	QueryArgProfiles *QueryArgProfiles
}

// Query argument-profile mapping for field-level encryption.
type QueryArgProfiles struct {
	// Number of profiles for query argument-profile mapping for field-level
	// encryption.
	Quantity *int32
	// Number of items for query argument-profile mapping for field-level encryption.
	Items []*QueryArgProfile
}

// This field is deprecated. We recommend that you use a cache policy or an origin
// request policy instead of this field. If you want to include query strings in
// the cache key, use QueryStringsConfig in a cache policy. See CreateCachePolicy.
// If you want to send query strings to the origin but not include them in the
// cache key, use QueryStringsConfig in an origin request policy. See
// CreateOriginRequestPolicy. A complex type that contains information about the
// query string parameters that you want CloudFront to use for caching for a cache
// behavior.
type QueryStringCacheKeys struct {
	// The number of whitelisted query string parameters for a cache behavior.
	Quantity *int32
	// A list that contains the query string parameters that you want CloudFront to use
	// as a basis for caching for a cache behavior. If Quantity is 0, you can omit
	// Items.
	Items []*string
}

// Contains a list of query string names.
type QueryStringNames struct {
	// A list of query string names.
	Items []*string
	// The number of query string names in the Items list.
	Quantity *int32
}

// A complex type that identifies ways in which you want to restrict distribution
// of your content.
type Restrictions struct {
	// A complex type that controls the countries in which your content is distributed.
	// CloudFront determines the location of your users using MaxMind GeoIP databases.
	GeoRestriction *GeoRestriction
}

// A complex type that contains information about the Amazon S3 bucket from which
// you want CloudFront to get your media files for distribution.
type S3Origin struct {
	// The CloudFront origin access identity to associate with the distribution. Use an
	// origin access identity to configure the distribution so that end users can only
	// access objects in an Amazon S3 bucket through CloudFront. If you want end users
	// to be able to access objects using either the CloudFront URL or the Amazon S3
	// URL, specify an empty OriginAccessIdentity element. To delete the origin access
	// identity from an existing distribution, update the distribution configuration
	// and include an empty OriginAccessIdentity element. To replace the origin access
	// identity, update the distribution configuration and specify the new origin
	// access identity. For more information, see Using an Origin Access Identity to
	// Restrict Access to Your Amazon S3 Content
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html)
	// in the Amazon CloudFront Developer Guide.
	OriginAccessIdentity *string
	// The DNS name of the Amazon S3 origin.
	DomainName *string
}

// A complex type that contains information about the Amazon S3 origin. If the
// origin is a custom origin or an S3 bucket that is configured as a website
// endpoint, use the CustomOriginConfig element instead.
type S3OriginConfig struct {
	// The CloudFront origin access identity to associate with the origin. Use an
	// origin access identity to configure the origin so that viewers can only access
	// objects in an Amazon S3 bucket through CloudFront. The format of the value is:
	// origin-access-identity/cloudfront/ID-of-origin-access-identity where
	// ID-of-origin-access-identity  is the value that CloudFront returned in the ID
	// element when you created the origin access identity. If you want viewers to be
	// able to access objects using either the CloudFront URL or the Amazon S3 URL,
	// specify an empty OriginAccessIdentity element. To delete the origin access
	// identity from an existing distribution, update the distribution configuration
	// and include an empty OriginAccessIdentity element. To replace the origin access
	// identity, update the distribution configuration and specify the new origin
	// access identity. For more information about the origin access identity, see
	// Serving Private Content through CloudFront
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
	// in the Amazon CloudFront Developer Guide.
	OriginAccessIdentity *string
}

// A complex type that lists the AWS accounts that were included in the
// TrustedSigners complex type, as well as their active CloudFront key pair IDs, if
// any.
type Signer struct {
	// A complex type that lists the active CloudFront key pairs, if any, that are
	// associated with AwsAccountNumber.
	KeyPairIds *KeyPairIds
	// An AWS account that is included in the TrustedSigners complex type for this
	// distribution. Valid values include:
	//
	//     * self, which is the AWS account used
	// to create the distribution.
	//
	//     * An AWS account number.
	AwsAccountNumber *string
}

// A complex data type for the status codes that you specify that, when returned by
// a primary origin, trigger CloudFront to failover to a second origin.
type StatusCodes struct {
	// The items (status codes) for an origin group.
	Items []*int32
	// The number of status codes.
	Quantity *int32
}

// A streaming distribution tells CloudFront where you want RTMP content to be
// delivered from, and the details about how to track and manage content delivery.
type StreamingDistribution struct {
	// The date and time that the distribution was last modified.
	LastModifiedTime *time.Time
	// The current configuration information for the RTMP distribution.
	StreamingDistributionConfig *StreamingDistributionConfig
	// The domain name that corresponds to the streaming distribution, for example,
	// s5c39gqb8ow64r.cloudfront.net.
	DomainName *string
	// The identifier for the RTMP distribution. For example: EGTXBD79EXAMPLE.
	Id *string
	// The current status of the RTMP distribution. When the status is Deployed, the
	// distribution's information is propagated to all CloudFront edge locations.
	Status *string
	// A complex type that lists the AWS accounts, if any, that you included in the
	// TrustedSigners complex type for this distribution. These are the accounts that
	// you want to allow to create signed URLs for private content. The Signer complex
	// type lists the AWS account number of the trusted signer or self if the signer is
	// the AWS account that created the distribution. The Signer element also includes
	// the IDs of any active CloudFront key pairs that are associated with the trusted
	// signer's AWS account. If no KeyPairId element appears for a Signer, that signer
	// can't create signed URLs. For more information, see Serving Private Content
	// through CloudFront
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
	// in the Amazon CloudFront Developer Guide.
	ActiveTrustedSigners *ActiveTrustedSigners
	// The ARN (Amazon Resource Name) for the distribution. For example:
	// arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5, where
	// 123456789012 is your AWS account ID.
	ARN *string
}

// The RTMP distribution's configuration information.
type StreamingDistributionConfig struct {
	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this streaming distribution.
	Aliases *Aliases
	// A complex type that specifies any AWS accounts that you want to permit to create
	// signed URLs for private content. If you want the distribution to use signed
	// URLs, include this element; if you want the distribution to use public URLs,
	// remove this element. For more information, see Serving Private Content through
	// CloudFront
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
	// in the Amazon CloudFront Developer Guide.
	TrustedSigners *TrustedSigners
	// A unique value (for example, a date-time stamp) that ensures that the request
	// can't be replayed. If the value of CallerReference is new (regardless of the
	// content of the StreamingDistributionConfig object), CloudFront creates a new
	// distribution. If CallerReference is a value that you already sent in a previous
	// request to create a distribution, CloudFront returns a DistributionAlreadyExists
	// error.
	CallerReference *string
	// Whether the streaming distribution is enabled to accept user requests for
	// content.
	Enabled *bool
	// A complex type that controls whether access logs are written for the streaming
	// distribution.
	Logging *StreamingLoggingConfig
	// A complex type that contains information about the Amazon S3 bucket from which
	// you want CloudFront to get your media files for distribution.
	S3Origin *S3Origin
	// A complex type that contains information about price class for this streaming
	// distribution.
	PriceClass PriceClass
	// Any comments you want to include about the streaming distribution.
	Comment *string
}

// A streaming distribution Configuration and a list of tags to be associated with
// the streaming distribution.
type StreamingDistributionConfigWithTags struct {
	// A streaming distribution Configuration.
	StreamingDistributionConfig *StreamingDistributionConfig
	// A complex type that contains zero or more Tag elements.
	Tags *Tags
}

// A streaming distribution list.
type StreamingDistributionList struct {
	// A flag that indicates whether more streaming distributions remain to be listed.
	// If your results were truncated, you can make a follow-up pagination request
	// using the Marker request parameter to retrieve more distributions in the list.
	IsTruncated *bool
	// The value you provided for the Marker request parameter.
	Marker *string
	// The value you provided for the MaxItems request parameter.
	MaxItems *int32
	// A complex type that contains one StreamingDistributionSummary element for each
	// distribution that was created by the current AWS account.
	Items []*StreamingDistributionSummary
	// The number of streaming distributions that were created by the current AWS
	// account.
	Quantity *int32
	// If IsTruncated is true, this element is present and contains the value you can
	// use for the Marker request parameter to continue listing your RTMP distributions
	// where they left off.
	NextMarker *string
}

// A summary of the information for a CloudFront streaming distribution.
type StreamingDistributionSummary struct {
	// The identifier for the distribution, for example, EDFDVBD632BHDS5.
	Id *string
	// The ARN (Amazon Resource Name) for the streaming distribution. For example:
	// arn:aws:cloudfront::123456789012:streaming-distribution/EDFDVBD632BHDS5, where
	// 123456789012 is your AWS account ID.
	ARN *string
	// Indicates the current status of the distribution. When the status is Deployed,
	// the distribution's information is fully propagated throughout the Amazon
	// CloudFront system.
	Status *string
	// The date and time the distribution was last modified.
	LastModifiedTime *time.Time
	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this streaming distribution.
	Aliases *Aliases
	// A complex type that contains information about price class for this streaming
	// distribution.
	PriceClass PriceClass
	// The comment originally specified when this distribution was created.
	Comment *string
	// A complex type that contains information about the Amazon S3 bucket from which
	// you want CloudFront to get your media files for distribution.
	S3Origin *S3Origin
	// Whether the distribution is enabled to accept end user requests for content.
	Enabled *bool
	// A complex type that specifies the AWS accounts, if any, that you want to allow
	// to create signed URLs for private content. If you want to require signed URLs in
	// requests for objects in the target origin that match the PathPattern for this
	// cache behavior, specify true for Enabled, and specify the applicable values for
	// Quantity and Items.If you don't want to require signed URLs in requests for
	// objects that match PathPattern, specify false for Enabled and 0 for Quantity.
	// Omit Items. To add, change, or remove one or more trusted signers, change
	// Enabled to true (if it's currently false), change Quantity as applicable, and
	// specify all of the trusted signers that you want to include in the updated
	// distribution. For more information, see Serving Private Content through
	// CloudFront
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
	// in the Amazon CloudFront Developer Guide.
	TrustedSigners *TrustedSigners
	// The domain name corresponding to the distribution, for example,
	// d111111abcdef8.cloudfront.net.
	DomainName *string
}

// A complex type that controls whether access logs are written for this streaming
// distribution.
type StreamingLoggingConfig struct {
	// An optional string that you want CloudFront to prefix to the access log
	// filenames for this streaming distribution, for example, myprefix/. If you want
	// to enable logging, but you don't want to specify a prefix, you still must
	// include an empty Prefix element in the Logging element.
	Prefix *string
	// The Amazon S3 bucket to store the access logs in, for example,
	// myawslogbucket.s3.amazonaws.com.
	Bucket *string
	// Specifies whether you want CloudFront to save access logs to an Amazon S3
	// bucket. If you don't want to enable logging when you create a streaming
	// distribution or if you want to disable logging for an existing streaming
	// distribution, specify false for Enabled, and specify empty Bucket and Prefix
	// elements. If you specify false for Enabled but you specify values for Bucket and
	// Prefix, the values are automatically deleted.
	Enabled *bool
}

// A complex type that contains Tag key and Tag value.
type Tag struct {
	// A string that contains Tag key. The string length should be between 1 and 128
	// characters. Valid characters include a-z, A-Z, 0-9, space, and the special
	// characters _ - . : / = + @.
	Key *string
	// A string that contains an optional Tag value. The string length should be
	// between 0 and 256 characters. Valid characters include a-z, A-Z, 0-9, space, and
	// the special characters _ - . : / = + @.
	Value *string
}

// A complex type that contains zero or more Tag elements.
type TagKeys struct {
	// A complex type that contains Tag key elements.
	Items []*string
}

// A complex type that contains zero or more Tag elements.
type Tags struct {
	// A complex type that contains Tag elements.
	Items []*Tag
}

// A complex type that specifies the AWS accounts, if any, that you want to allow
// to create signed URLs for private content. If you want to require signed URLs in
// requests for objects in the target origin that match the PathPattern for this
// cache behavior, specify true for Enabled, and specify the applicable values for
// Quantity and Items. For more information, see Serving Private Content through
// CloudFront
// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html)
// in the Amazon CloudFront Developer Guide. If you don't want to require signed
// URLs in requests for objects that match PathPattern, specify false for Enabled
// and 0 for Quantity. Omit Items. To add, change, or remove one or more trusted
// signers, change Enabled to true (if it's currently false), change Quantity as
// applicable, and specify all of the trusted signers that you want to include in
// the updated distribution. For more information about updating the distribution
// configuration, see DistributionConfig
// (https://docs.aws.amazon.com/cloudfront/latest/APIReference/DistributionConfig.html)
// in the Amazon CloudFront API Reference.
type TrustedSigners struct {
	// Specifies whether you want to require viewers to use signed URLs to access the
	// files specified by PathPattern and TargetOriginId.
	Enabled *bool
	// The number of trusted signers for this cache behavior.
	Quantity *int32
	// Optional: A complex type that contains trusted signers for this cache behavior.
	// If Quantity is 0, you can omit Items.
	Items []*string
}

// A complex type that determines the distribution’s SSL/TLS configuration for
// communicating with viewers. If the distribution doesn’t use Aliases (also known
// as alternate domain names or CNAMEs)—that is, if the distribution uses the
// CloudFront domain name such as d111111abcdef8.cloudfront.net—set
// CloudFrontDefaultCertificate to true and leave all other fields empty. If the
// distribution uses Aliases (alternate domain names or CNAMEs), use the fields in
// this type to specify the following settings:
//
//     * Which viewers the
// distribution accepts HTTPS connections from: only viewers that support server
// name indication (SNI) (https://en.wikipedia.org/wiki/Server_Name_Indication)
// (recommended), or all viewers including those that don’t support SNI.
//
//         *
// To accept HTTPS connections from only viewers that support SNI, set
// SSLSupportMethod to sni-only. This is recommended. Most browsers and clients
// support SNI.  </p> </li> <li> <p>To accept HTTPS connections from all viewers,
// including those that don’t support SNI, set <code>SSLSupportMethod</code> to
// <code>vip</code>. This is not recommended, and results in additional monthly
// charges from CloudFront. </p> </li> </ul> </li> <li> <p>The minimum SSL/TLS
// protocol version that the distribution can use to communicate with viewers. To
// specify a minimum version, choose a value for
// <code>MinimumProtocolVersion</code>. For more information, see <a
// href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy">Security
// Policy</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> </li> <li>
// <p>The location of the SSL/TLS certificate, <a
// href="https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html">AWS
// Certificate Manager (ACM)</a> (recommended) or <a
// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">AWS
// Identity and Access Management (AWS IAM)</a>. You specify the location by
// setting a value in one of the following fields (not both):</p> <ul> <li> <p>
// <code>ACMCertificateArn</code> </p> </li> <li> <p> <code>IAMCertificateId</code>
// </p> </li> </ul> </li> </ul> <p>All distributions support HTTPS connections from
// viewers. To require viewers to use HTTPS only, or to redirect them from HTTP to
// HTTPS, use <code>ViewerProtocolPolicy</code> in the <code>CacheBehavior</code>
// or <code>DefaultCacheBehavior</code>. To specify how CloudFront should use
// SSL/TLS to communicate with your custom origin, use
// <code>CustomOriginConfig</code>.</p> <p>For more information, see <a
// href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html">Using
// HTTPS with CloudFront</a> and <a
// href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html">
// Using Alternate Domain Names and HTTPS</a> in the <i>Amazon CloudFront Developer
// Guide</i>.</p>
type ViewerCertificate struct {
	// This field is deprecated. Use one of the following fields instead:
	//
	//     *
	// ACMCertificateArn </p> </li> <li> <p> <code>IAMCertificateId</code> </p> </li>
	// <li> <p> <code>CloudFrontDefaultCertificate</code> </p> </li> </ul>
	Certificate *string
	// If the distribution uses Aliases (alternate domain names or CNAMEs), specify
	// which viewers the distribution accepts HTTPS connections from.
	//
	//     * sni-only –
	// The distribution accepts HTTPS connections from only viewers that support server
	// name indication (SNI) (https://en.wikipedia.org/wiki/Server_Name_Indication).
	// This is recommended. Most browsers and clients support SNI.
	//
	//     * vip – The
	// distribution accepts HTTPS connections from all viewers including those that
	// don’t support SNI. This is not recommended, and results in additional monthly
	// charges from CloudFront.  </li> </ul> <p>If the distribution uses the CloudFront
	// domain name such as <code>d111111abcdef8.cloudfront.net</code>, don’t set a
	// value for this field.</p>
	SSLSupportMethod SSLSupportMethod
	// This field is deprecated. Use one of the following fields instead:
	//
	//     *
	// ACMCertificateArn </p> </li> <li> <p> <code>IAMCertificateId</code> </p> </li>
	// <li> <p> <code>CloudFrontDefaultCertificate</code> </p> </li> </ul>
	CertificateSource CertificateSource
	// If the distribution uses Aliases (alternate domain names or CNAMEs) and the
	// SSL/TLS certificate is stored in AWS Identity and Access Management (AWS IAM)
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html),
	// provide the ID of the IAM certificate. If you specify an IAM certificate ID, you
	// must also specify values for MinimumProtocolVerison and SSLSupportMethod.
	IAMCertificateId *string
	// If the distribution uses Aliases (alternate domain names or CNAMEs) and the
	// SSL/TLS certificate is stored in AWS Certificate Manager (ACM)
	// (https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html), provide
	// the Amazon Resource Name (ARN) of the ACM certificate. CloudFront only supports
	// ACM certificates in the US East (N. Virginia) Region (us-east-1). If you specify
	// an ACM certificate ARN, you must also specify values for MinimumProtocolVerison
	// and SSLSupportMethod.
	ACMCertificateArn *string
	// If the distribution uses the CloudFront domain name such as
	// d111111abcdef8.cloudfront.net, set this field to true. If the distribution uses
	// Aliases (alternate domain names or CNAMEs), set this field to false and specify
	// values for the following fields:
	//
	//     * ACMCertificateArn or IAMCertificateId
	// (specify a value for one, not both)  </li> <li> <p>
	// <code>MinimumProtocolVersion</code> </p> </li> <li> <p>
	// <code>SSLSupportMethod</code> </p> </li> </ul>
	CloudFrontDefaultCertificate *bool
	// If the distribution uses Aliases (alternate domain names or CNAMEs), specify the
	// security policy that you want CloudFront to use for HTTPS connections with
	// viewers. The security policy determines two settings:
	//
	//     * The minimum SSL/TLS
	// protocol that CloudFront can use to communicate with viewers.
	//
	//     * The ciphers
	// that CloudFront can use to encrypt the content that it returns to viewers.
	//
	// For
	// more information, see Security Policy
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy)
	// and Supported Protocols and Ciphers Between Viewers and CloudFront
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html#secure-connections-supported-ciphers)
	// in the Amazon CloudFront Developer Guide. On the CloudFront console, this
	// setting is called Security Policy. When you’re using SNI only (you set
	// SSLSupportMethod to sni-only), you must specify TLSv1 or higher. If the
	// distribution uses the CloudFront domain name such as
	// d111111abcdef8.cloudfront.net (you set CloudFrontDefaultCertificate to true),
	// CloudFront automatically sets the security policy to TLSv1 regardless of the
	// value that you set here.
	MinimumProtocolVersion MinimumProtocolVersion
}
