// Code generated by smithy-go-codegen DO NOT EDIT.

package proton

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/proton/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// If no other minor versions of a service template exist, delete a major version
// of the service template if it's not the Recommended version. Delete the
// Recommended version of the service template if no other major versions or minor
// versions of the service template exist. A major version of a service template is
// a version that isn't backwards compatible. Delete a minor version of a service
// template if it's not the Recommended version. Delete a Recommended minor
// version of the service template if no other minor versions of the service
// template exist. A minor version of a service template is a version that's
// backwards compatible.
func (c *Client) DeleteServiceTemplateVersion(ctx context.Context, params *DeleteServiceTemplateVersionInput, optFns ...func(*Options)) (*DeleteServiceTemplateVersionOutput, error) {
	if params == nil {
		params = &DeleteServiceTemplateVersionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DeleteServiceTemplateVersion", params, optFns, c.addOperationDeleteServiceTemplateVersionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DeleteServiceTemplateVersionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DeleteServiceTemplateVersionInput struct {

	// The service template major version to delete.
	//
	// This member is required.
	MajorVersion *string

	// The service template minor version to delete.
	//
	// This member is required.
	MinorVersion *string

	// The name of the service template.
	//
	// This member is required.
	TemplateName *string

	noSmithyDocumentSerde
}

type DeleteServiceTemplateVersionOutput struct {

	// The detailed data of the service template version being deleted.
	ServiceTemplateVersion *types.ServiceTemplateVersion

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationDeleteServiceTemplateVersionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpDeleteServiceTemplateVersion{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpDeleteServiceTemplateVersion{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpDeleteServiceTemplateVersionValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDeleteServiceTemplateVersion(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opDeleteServiceTemplateVersion(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "proton",
		OperationName: "DeleteServiceTemplateVersion",
	}
}
