// Code generated by smithy-go-codegen DO NOT EDIT.

package proton

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/proton/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Create an environment template for AWS Proton. For more information, see
// Environment Templates
// (https://docs.aws.amazon.com/proton/latest/adminguide/ag-env-templates.html) in
// the AWS Proton Administration Guide. You can create an environment template in
// one of the two following ways:
//
// * Register and publish a standard environment
// template that instructs AWS Proton to deploy and manage environment
// infrastructure.
//
// * Register and publish a customer managed environment template
// that connects AWS Proton to your existing provisioned infrastructure that you
// manage. AWS Proton doesn't manage your existing provisioned infrastructure. To
// create an environment template for customer provisioned and managed
// infrastructure, include the provisioning parameter and set the value to
// CUSTOMER_MANAGED. For more information, see Register and publish an environment
// template
// (https://docs.aws.amazon.com/proton/latest/adminguide/env-template-v1.html) in
// the AWS Proton Administration Guide.
func (c *Client) CreateEnvironmentTemplate(ctx context.Context, params *CreateEnvironmentTemplateInput, optFns ...func(*Options)) (*CreateEnvironmentTemplateOutput, error) {
	if params == nil {
		params = &CreateEnvironmentTemplateInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateEnvironmentTemplate", params, optFns, addOperationCreateEnvironmentTemplateMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateEnvironmentTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateEnvironmentTemplateInput struct {

	// The name of the environment template.
	//
	// This member is required.
	Name *string

	// A description of the environment template.
	Description *string

	// The environment template name as displayed in the developer interface.
	DisplayName *string

	// A customer provided encryption key that AWS Proton uses to encrypt data.
	EncryptionKey *string

	// When included, indicates that the environment template is for customer
	// provisioned and managed infrastructure.
	Provisioning types.Provisioning

	// Create tags for your environment template. For more information, see AWS Proton
	// resources and tagging in the AWS Proton Administration Guide
	// (https://docs.aws.amazon.com/proton/latest/adminguide/resources.html) or AWS
	// Proton User Guide
	// (https://docs.aws.amazon.com/proton/latest/userguide/resources.html).
	Tags []types.Tag
}

type CreateEnvironmentTemplateOutput struct {

	// The environment template detail data that's returned by AWS Proton.
	//
	// This member is required.
	EnvironmentTemplate *types.EnvironmentTemplate

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateEnvironmentTemplateMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpCreateEnvironmentTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpCreateEnvironmentTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpCreateEnvironmentTemplateValidationMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}
