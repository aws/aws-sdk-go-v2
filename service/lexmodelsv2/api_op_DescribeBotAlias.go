// Code generated by smithy-go-codegen DO NOT EDIT.

package lexmodelsv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelsv2/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Get information about a specific bot alias.
func (c *Client) DescribeBotAlias(ctx context.Context, params *DescribeBotAliasInput, optFns ...func(*Options)) (*DescribeBotAliasOutput, error) {
	if params == nil {
		params = &DescribeBotAliasInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeBotAlias", params, optFns, c.addOperationDescribeBotAliasMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeBotAliasOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeBotAliasInput struct {

	// The identifier of the bot alias to describe.
	//
	// This member is required.
	BotAliasId *string

	// The identifier of the bot associated with the bot alias to describe.
	//
	// This member is required.
	BotId *string
}

type DescribeBotAliasOutput struct {

	// A list of events that affect a bot alias. For example, an event is recorded when
	// the version that the alias points to changes.
	BotAliasHistoryEvents []types.BotAliasHistoryEvent

	// The identifier of the bot alias.
	BotAliasId *string

	// The locale settings that are unique to the alias.
	BotAliasLocaleSettings map[string]types.BotAliasLocaleSettings

	// The name of the bot alias.
	BotAliasName *string

	// The current status of the alias. When the alias is Available, the alias is ready
	// for use with your bot.
	BotAliasStatus types.BotAliasStatus

	// The identifier of the bot associated with the bot alias.
	BotId *string

	// The version of the bot associated with the bot alias.
	BotVersion *string

	// Specifics of how Amazon Lex logs text and audio conversations with the bot
	// associated with the alias.
	ConversationLogSettings *types.ConversationLogSettings

	// A timestamp of the date and time that the alias was created.
	CreationDateTime *time.Time

	// The description of the bot alias.
	Description *string

	// A timestamp of the date and time that the alias was last updated.
	LastUpdatedDateTime *time.Time

	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment
	// of user utterances.
	SentimentAnalysisSettings *types.SentimentAnalysisSettings

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func (c *Client) addOperationDescribeBotAliasMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpDescribeBotAlias{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeBotAlias{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpDescribeBotAliasValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeBotAlias(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opDescribeBotAlias(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lex",
		OperationName: "DescribeBotAlias",
	}
}
