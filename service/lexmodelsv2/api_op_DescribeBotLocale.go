// Code generated by smithy-go-codegen DO NOT EDIT.

package lexmodelsv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelsv2/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Describes the settings that a bot has for a specific locale.
func (c *Client) DescribeBotLocale(ctx context.Context, params *DescribeBotLocaleInput, optFns ...func(*Options)) (*DescribeBotLocaleOutput, error) {
	if params == nil {
		params = &DescribeBotLocaleInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeBotLocale", params, optFns, c.addOperationDescribeBotLocaleMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeBotLocaleOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeBotLocaleInput struct {

	// The identifier of the bot associated with the locale.
	//
	// This member is required.
	BotId *string

	// The identifier of the version of the bot associated with the locale.
	//
	// This member is required.
	BotVersion *string

	// The unique identifier of the locale to describe. The string must match one of
	// the supported locales. For more information, see Supported languages
	// (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
	//
	// This member is required.
	LocaleId *string
}

type DescribeBotLocaleOutput struct {

	// The identifier of the bot associated with the locale.
	BotId *string

	// History of changes, such as when a locale is used in an alias, that have taken
	// place for the locale.
	BotLocaleHistoryEvents []types.BotLocaleHistoryEvent

	// The status of the bot. If the status is Failed, the reasons for the failure are
	// listed in the failureReasons field.
	BotLocaleStatus types.BotLocaleStatus

	// The identifier of the version of the bot associated with the locale.
	BotVersion *string

	// The date and time that the locale was created.
	CreationDateTime *time.Time

	// The description of the locale.
	Description *string

	// if botLocaleStatus is Failed, Amazon Lex explains why it failed to build the
	// bot.
	FailureReasons []string

	// The number of intents defined for the locale.
	IntentsCount *int32

	// The date and time that the locale was last submitted for building.
	LastBuildSubmittedDateTime *time.Time

	// The date and time that the locale was last updated.
	LastUpdatedDateTime *time.Time

	// The unique identifier of the described locale.
	LocaleId *string

	// The name of the locale.
	LocaleName *string

	// The confidence threshold where Amazon Lex inserts the AMAZON.FallbackIntent and
	// AMAZON.KendraSearchIntent intents in the list of possible intents for an
	// utterance.
	NluIntentConfidenceThreshold *float64

	// The number of slot types defined for the locale.
	SlotTypesCount *int32

	// The Amazon Polly voice Amazon Lex uses for voice interaction with the user.
	VoiceSettings *types.VoiceSettings

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func (c *Client) addOperationDescribeBotLocaleMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpDescribeBotLocale{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeBotLocale{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpDescribeBotLocaleValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeBotLocale(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opDescribeBotLocale(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lex",
		OperationName: "DescribeBotLocale",
	}
}
