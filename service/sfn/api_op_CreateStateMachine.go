// Code generated by smithy-go-codegen DO NOT EDIT.

package sfn

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/sfn/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Creates a state machine. A state machine consists of a collection of states that
// can do work (Task states), determine to which states to transition next (Choice
// states), stop an execution with an error (Fail states), and so on. State
// machines are specified using a JSON-based, structured language. For more
// information, see Amazon States Language
// (https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html)
// in the AWS Step Functions User Guide. This operation is eventually consistent.
// The results are best effort and may not reflect very recent updates and changes.
// CreateStateMachine is an idempotent API. Subsequent requests wonâ€™t create a
// duplicate resource if it was already created. CreateStateMachine's idempotency
// check is based on the state machine name, definition, type, and
// LoggingConfiguration. If a following request has a different roleArn or tags,
// Step Functions will ignore these differences and treat it as an idempotent
// request of the previous. In this case, roleArn and tags will not be updated,
// even if they are different.
func (c *Client) CreateStateMachine(ctx context.Context, params *CreateStateMachineInput, optFns ...func(*Options)) (*CreateStateMachineOutput, error) {
	stack := middleware.NewStack("CreateStateMachine", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson10_serdeOpCreateStateMachineMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateStateMachineValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateStateMachine(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateStateMachine",
			Err:           err,
		}
	}
	out := result.(*CreateStateMachineOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateStateMachineInput struct {
	// Tags to be added when creating a state machine. An array of key-value pairs. For
	// more information, see Using Cost Allocation Tags
	// (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the AWS Billing and Cost Management User Guide, and Controlling Access Using
	// IAM Tags
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html). Tags
	// may only contain Unicode letters, digits, white space, or these symbols: _ . : /
	// = + - @.
	Tags []*types.Tag
	// Determines whether a Standard or Express state machine is created. The default
	// is STANDARD. You cannot update the type of a state machine once it has been
	// created.
	Type types.StateMachineType
	// Defines what execution history events are logged and where they are logged. By
	// default, the level is set to OFF. For more information see Log Levels
	// (https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html)
	// in the AWS Step Functions User Guide.
	LoggingConfiguration *types.LoggingConfiguration
	// The name of the state machine. A name must not contain:
	//
	//     * white space
	//
	//
	// * brackets < > { } [ ]
	//
	//     * wildcard characters ? *
	//
	//     * special characters
	// " # % \ ^ | ~ ` $ & , ; : /
	//
	//     * control characters (U+0000-001F,
	// U+007F-009F)
	//
	// To enable logging with CloudWatch Logs, the name should only
	// contain 0-9, A-Z, a-z, - and _.
	Name *string
	// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
	RoleArn *string
	// The Amazon States Language definition of the state machine. See Amazon States
	// Language
	// (https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
	Definition *string
}

type CreateStateMachineOutput struct {
	// The date the state machine is created.
	CreationDate *time.Time
	// The Amazon Resource Name (ARN) that identifies the created state machine.
	StateMachineArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpCreateStateMachineMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpCreateStateMachine{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpCreateStateMachine{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateStateMachine(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "states",
		OperationName: "CreateStateMachine",
	}
}
