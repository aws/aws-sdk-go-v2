// Code generated by smithy-go-codegen DO NOT EDIT.

package macie2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/macie2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Retrieves information about the status and settings for a classification job.
func (c *Client) DescribeClassificationJob(ctx context.Context, params *DescribeClassificationJobInput, optFns ...func(*Options)) (*DescribeClassificationJobOutput, error) {
	stack := middleware.NewStack("DescribeClassificationJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDescribeClassificationJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeClassificationJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeClassificationJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeClassificationJob",
			Err:           err,
		}
	}
	out := result.(*DescribeClassificationJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeClassificationJobInput struct {
	// The unique identifier for the classification job.
	JobId *string
}

type DescribeClassificationJobOutput struct {
	// The schedule for running the job. Possible values are:
	//
	//     * ONE_TIME - The job
	// ran or will run only once.
	//
	//     * SCHEDULED - The job runs on a daily, weekly,
	// or monthly basis. The scheduleFrequency property indicates the recurrence
	// pattern for the job.
	JobType types.JobType
	// The token that was provided to ensure the idempotency of the request to create
	// the job.
	ClientToken *string
	// The custom data identifiers that the job uses to analyze data.
	CustomDataIdentifierIds []*string
	// The date and time, in UTC and extended ISO 8601 format, when the job last ran.
	LastRunTime *time.Time
	// The Amazon Resource Name (ARN) of the job.
	JobArn *string
	// The custom description of the job.
	Description *string
	// A map of key-value pairs that identifies the tags (keys and values) that are
	// associated with the classification job.
	Tags map[string]*string
	// The sampling depth, as a percentage, that the job applies when it processes
	// objects.
	SamplingPercentage *int32
	// Specifies whether the job has run for the first time.
	InitialRun *bool
	// The current status of the job. Possible values are:
	//
	//     * CANCELLED - The job
	// was cancelled by you or a user of the master account for your organization. A
	// job might also be cancelled if ownership of an S3 bucket changed while the job
	// was running, and that change affected the job's access to the bucket.
	//
	//     *
	// COMPLETE - Amazon Macie finished processing all the data specified for the
	// job.
	//
	//     * IDLE - For a recurring job, the previous scheduled run is complete
	// and the next scheduled run is pending. This value doesn't apply to jobs that
	// occur only once.
	//
	//     * PAUSED - Amazon Macie started the job, but completion of
	// the job would exceed one or more quotas for your account.
	//
	//     * RUNNING - The
	// job is in progress.
	JobStatus types.JobStatus
	// The S3 buckets that the job is configured to analyze, and the scope of that
	// analysis.
	S3JobDefinition *types.S3JobDefinition
	// The date and time, in UTC and extended ISO 8601 format, when the job was
	// created.
	CreatedAt *time.Time
	// The recurrence pattern for running the job. If the job is configured to run only
	// once, this value is null.
	ScheduleFrequency *types.JobScheduleFrequency
	// The unique identifier for the job.
	JobId *string
	// The custom name of the job.
	Name *string
	// The number of times that the job has run and processing statistics for the job's
	// most recent run.
	Statistics *types.Statistics

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDescribeClassificationJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDescribeClassificationJob{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeClassificationJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeClassificationJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "macie2",
		OperationName: "DescribeClassificationJob",
	}
}
