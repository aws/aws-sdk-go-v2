// Code generated by smithy-go-codegen DO NOT EDIT.

package dynamodbstreams

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/dynamodbstreams/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a shard iterator. A shard iterator provides information about how to
// retrieve the stream records from within a shard. Use the shard iterator in a
// subsequent GetRecords request to read the stream records from the shard. A shard
// iterator expires 15 minutes after it is returned to the requester.
func (c *Client) GetShardIterator(ctx context.Context, params *GetShardIteratorInput, optFns ...func(*Options)) (*GetShardIteratorOutput, error) {
	stack := middleware.NewStack("GetShardIterator", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson10_serdeOpGetShardIteratorMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetShardIteratorValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetShardIterator(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetShardIterator",
			Err:           err,
		}
	}
	out := result.(*GetShardIteratorOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input of a GetShardIterator operation.
type GetShardIteratorInput struct {
	// The Amazon Resource Name (ARN) for the stream.
	StreamArn *string
	// The sequence number of a stream record in the shard from which to start reading.
	SequenceNumber *string
	// The identifier of the shard. The iterator will be returned for this shard ID.
	ShardId *string
	// Determines how the shard iterator is used to start reading stream records from
	// the shard:
	//
	//     * AT_SEQUENCE_NUMBER - Start reading exactly from the position
	// denoted by a specific sequence number.
	//
	//     * AFTER_SEQUENCE_NUMBER - Start
	// reading right after the position denoted by a specific sequence number.
	//
	//     *
	// TRIM_HORIZON - Start reading at the last (untrimmed) stream record, which is the
	// oldest record in the shard. In DynamoDB Streams, there is a 24 hour limit on
	// data retention. Stream records whose age exceeds this limit are subject to
	// removal (trimming) from the stream.
	//
	//     * LATEST - Start reading just after the
	// most recent stream record in the shard, so that you always read the most recent
	// data in the shard.
	ShardIteratorType types.ShardIteratorType
}

// Represents the output of a GetShardIterator operation.
type GetShardIteratorOutput struct {
	// The position in the shard from which to start reading stream records
	// sequentially. A shard iterator specifies this position using the sequence number
	// of a stream record in a shard.
	ShardIterator *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpGetShardIteratorMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpGetShardIterator{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpGetShardIterator{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetShardIterator(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "dynamodb",
		OperationName: "GetShardIterator",
	}
}
