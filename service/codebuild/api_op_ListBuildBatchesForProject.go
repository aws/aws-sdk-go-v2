// Code generated by smithy-go-codegen DO NOT EDIT.

package codebuild

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/codebuild/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves the identifiers of the build batches for a specific project.
func (c *Client) ListBuildBatchesForProject(ctx context.Context, params *ListBuildBatchesForProjectInput, optFns ...func(*Options)) (*ListBuildBatchesForProjectOutput, error) {
	if params == nil {
		params = &ListBuildBatchesForProjectInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListBuildBatchesForProject", params, optFns, addOperationListBuildBatchesForProjectMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListBuildBatchesForProjectOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListBuildBatchesForProjectInput struct {

	// A BuildBatchFilter object that specifies the filters for the search.
	Filter *types.BuildBatchFilter

	// The maximum number of results to return.
	MaxResults *int32

	// The nextToken value returned from a previous call to ListBuildBatchesForProject.
	// This specifies the next item to return. To return the beginning of the list,
	// exclude this parameter.
	NextToken *string

	// The name of the project.
	ProjectName *string

	// Specifies the sort order of the returned items. Valid values include:
	//
	// *
	// ASCENDING: List the batch build identifiers in ascending order by identifier.
	//
	// *
	// DESCENDING: List the batch build identifiers in descending order by identifier.
	SortOrder types.SortOrderType
}

type ListBuildBatchesForProjectOutput struct {

	// An array of strings that contains the batch build identifiers.
	Ids []*string

	// If there are more items to return, this contains a token that is passed to a
	// subsequent call to ListBuildBatchesForProject to retrieve the next set of items.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListBuildBatchesForProjectMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpListBuildBatchesForProject{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpListBuildBatchesForProject{}, middleware.After)
	if err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListBuildBatchesForProject(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opListBuildBatchesForProject(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codebuild",
		OperationName: "ListBuildBatchesForProject",
	}
}
