// Code generated by smithy-go-codegen DO NOT EDIT.

package iotdeviceadvisor

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iotdeviceadvisor/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Lists all the test cases in the test suite.
func (c *Client) ListTestCases(ctx context.Context, params *ListTestCasesInput, optFns ...func(*Options)) (*ListTestCasesOutput, error) {
	if params == nil {
		params = &ListTestCasesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListTestCases", params, optFns, addOperationListTestCasesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListTestCasesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListTestCasesInput struct {

	// Lists all the qualification test cases in the test suite.
	IntendedForQualification bool

	// Requests the test cases max results.
	MaxResults int32

	// Requests the test cases next token.
	NextToken *string
}

type ListTestCasesOutput struct {

	// Gets the category of test case.
	Categories []types.TestCaseCategory

	// Gets the configuration of test group.
	GroupConfiguration map[string]string

	// Test cases next token response.
	NextToken *string

	// Gets the configuration of root test group.
	RootGroupConfiguration map[string]string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListTestCasesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpListTestCases{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpListTestCases{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListTestCases(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

// ListTestCasesAPIClient is a client that implements the ListTestCases operation.
type ListTestCasesAPIClient interface {
	ListTestCases(context.Context, *ListTestCasesInput, ...func(*Options)) (*ListTestCasesOutput, error)
}

var _ ListTestCasesAPIClient = (*Client)(nil)

// ListTestCasesPaginatorOptions is the paginator options for ListTestCases
type ListTestCasesPaginatorOptions struct {
	// Requests the test cases max results.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// ListTestCasesPaginator is a paginator for ListTestCases
type ListTestCasesPaginator struct {
	options   ListTestCasesPaginatorOptions
	client    ListTestCasesAPIClient
	params    *ListTestCasesInput
	nextToken *string
	firstPage bool
}

// NewListTestCasesPaginator returns a new ListTestCasesPaginator
func NewListTestCasesPaginator(client ListTestCasesAPIClient, params *ListTestCasesInput, optFns ...func(*ListTestCasesPaginatorOptions)) *ListTestCasesPaginator {
	options := ListTestCasesPaginatorOptions{}
	if params.MaxResults != 0 {
		options.Limit = params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	if params == nil {
		params = &ListTestCasesInput{}
	}

	return &ListTestCasesPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *ListTestCasesPaginator) HasMorePages() bool {
	return p.firstPage || p.nextToken != nil
}

// NextPage retrieves the next ListTestCases page.
func (p *ListTestCasesPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*ListTestCasesOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	params.MaxResults = p.options.Limit

	result, err := p.client.ListTestCases(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken && prevToken != nil && p.nextToken != nil && *prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

func newServiceMetadataMiddleware_opListTestCases(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iotdeviceadvisor",
		OperationName: "ListTestCases",
	}
}
