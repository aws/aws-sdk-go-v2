// Code generated by smithy-go-codegen DO NOT EDIT.

package codepipeline

import (
	"context"
	cryptorand "crypto/rand"
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyrand "github.com/awslabs/smithy-go/rand"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"net/http"
	"time"
)

const ServiceID = "CodePipeline"
const ServiceAPIVersion = "2015-07-09"

// AWS CodePipeline Overview This is the AWS CodePipeline API Reference. This guide
// provides descriptions of the actions and data types for AWS CodePipeline. Some
// functionality for your pipeline can only be configured through the API. For more
// information, see the AWS CodePipeline User Guide
// (https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html). You
// can use the AWS CodePipeline API to work with pipelines, stages, actions, and
// transitions. Pipelines are models of automated release processes. Each pipeline
// is uniquely named, and consists of stages, actions, and transitions. You can
// work with pipelines by calling:
//
//     * CreatePipeline (), which creates a
// uniquely named pipeline.
//
//     * DeletePipeline (), which deletes the specified
// pipeline.
//
//     * GetPipeline (), which returns information about the pipeline
// structure and pipeline metadata, including the pipeline Amazon Resource Name
// (ARN).
//
//     * GetPipelineExecution (), which returns information about a
// specific execution of a pipeline.
//
//     * GetPipelineState (), which returns
// information about the current state of the stages and actions of a pipeline.
//
//
// * ListActionExecutions (), which returns action-level details for past
// executions. The details include full stage and action-level details, including
// individual action duration, status, any errors that occurred during the
// execution, and input and output artifact location details.
//
//     * ListPipelines
// (), which gets a summary of all of the pipelines associated with your account.
//
//
// * ListPipelineExecutions (), which gets a summary of the most recent executions
// for a pipeline.
//
//     * StartPipelineExecution (), which runs the most recent
// revision of an artifact through the pipeline.
//
//     * StopPipelineExecution (),
// which stops the specified pipeline execution from continuing through the
// pipeline.
//
//     * UpdatePipeline (), which updates a pipeline with edits or
// changes to the structure of the pipeline.
//
// Pipelines include stages. Each stage
// contains one or more actions that must complete before the next stage begins. A
// stage results in success or failure. If a stage fails, the pipeline stops at
// that stage and remains stopped until either a new version of an artifact appears
// in the source location, or a user takes action to rerun the most recent artifact
// through the pipeline. You can call GetPipelineState (), which displays the
// status of a pipeline, including the status of stages in the pipeline, or
// GetPipeline (), which returns the entire structure of the pipeline, including
// the stages of that pipeline. For more information about the structure of stages
// and actions, see AWS CodePipeline Pipeline Structure Reference
// (https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-structure.html).
// Pipeline stages include actions that are categorized into categories such as
// source or build actions performed in a stage of a pipeline. For example, you can
// use a source action to import artifacts into a pipeline from a source such as
// Amazon S3. Like stages, you do not work with actions directly in most cases, but
// you do define and interact with actions when working with pipeline operations
// such as CreatePipeline () and GetPipelineState (). Valid action categories
// are:
//
//     * Source
//
//     * Build
//
//     * Test
//
//     * Deploy
//
//     * Approval
//
//     *
// Invoke
//
// Pipelines also include transitions, which allow the transition of
// artifacts from one stage to the next in a pipeline after the actions in one
// stage complete. You can work with transitions by calling:
//
//     *
// DisableStageTransition (), which prevents artifacts from transitioning to the
// next stage in a pipeline.
//
//     * EnableStageTransition (), which enables
// transition of artifacts between stages in a pipeline.
//
// Using the API to
// integrate with AWS CodePipeline For third-party integrators or developers who
// want to create their own integrations with AWS CodePipeline, the expected
// sequence varies from the standard API user. To integrate with AWS CodePipeline,
// developers need to work with the following items: Jobs, which are instances of
// an action. For example, a job for a source action might import a revision of an
// artifact from a source. You can work with jobs by calling:
//
//     * AcknowledgeJob
// (), which confirms whether a job worker has received the specified job.
//
//     *
// GetJobDetails (), which returns the details of a job.
//
//     * PollForJobs (),
// which determines whether there are any jobs to act on.
//
//     *
// PutJobFailureResult (), which provides details of a job failure.
//
//     *
// PutJobSuccessResult (), which provides details of a job success.
//
// Third party
// jobs, which are instances of an action created by a partner action and
// integrated into AWS CodePipeline. Partner actions are created by members of the
// AWS Partner Network. You can work with third party jobs by calling:
//
//     *
// AcknowledgeThirdPartyJob (), which confirms whether a job worker has received
// the specified job.
//
//     * GetThirdPartyJobDetails (), which requests the details
// of a job for a partner action.
//
//     * PollForThirdPartyJobs (), which determines
// whether there are any jobs to act on.
//
//     * PutThirdPartyJobFailureResult (),
// which provides details of a job failure.
//
//     * PutThirdPartyJobSuccessResult
// (), which provides details of a job success.
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveHTTPSignerV4(&options)

	resolveDefaultEndpointConfiguration(&options)

	resolveIdempotencyTokenProvider(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []func(*middleware.Stack) error

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// Signature Version 4 (SigV4) Signer
	HTTPSignerV4 HTTPSignerV4

	// Provides idempotency tokens values that will be automatically populated into
	// idempotent API operations.
	IdempotencyTokenProvider IdempotencyTokenProvider

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]func(*middleware.Stack) error, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}
func (c *Client) invokeOperation(ctx context.Context, opID string, params interface{}, optFns []func(*Options), stackFns ...func(*middleware.Stack, Options) error) (result interface{}, metadata middleware.Metadata, err error) {
	stack := middleware.NewStack(opID, smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}

	for _, fn := range stackFns {
		if err := fn(stack, options); err != nil {
			return nil, metadata, err
		}
	}

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, metadata, err
		}
	}

	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err = handler.Handle(ctx, params)
	if err != nil {
		err = &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: opID,
			Err:           err,
		}
	}
	return result, metadata, err
}

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
		APIOptions:  cfg.APIOptions,
	}
	resolveAWSEndpointResolver(cfg, &opts)
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func resolveAWSEndpointResolver(cfg aws.Config, o *Options) {
	if cfg.EndpointResolver == nil {
		return
	}
	o.EndpointResolver = WithEndpointResolver(cfg.EndpointResolver, NewDefaultEndpointResolver())
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("codepipeline")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, o.HTTPSignerV4), middleware.After)
}

type HTTPSignerV4 interface {
	SignHTTP(ctx context.Context, credentials aws.Credentials, r *http.Request, payloadHash string, service string, region string, signingTime time.Time) error
}

func resolveHTTPSignerV4(o *Options) {
	if o.HTTPSignerV4 != nil {
		return
	}
	o.HTTPSignerV4 = v4.NewSigner()
}

func resolveIdempotencyTokenProvider(o *Options) {
	if o.IdempotencyTokenProvider != nil {
		return
	}
	o.IdempotencyTokenProvider = smithyrand.NewUUIDIdempotencyToken(cryptorand.Reader)
}

func addRetryMiddlewares(stack *middleware.Stack, o Options) error {
	mo := retry.AddRetryMiddlewaresOptions{
		Retryer: o.Retryer,
	}
	return retry.AddRetryMiddlewares(stack, mo)
}

// IdempotencyTokenProvider interface for providing idempotency token
type IdempotencyTokenProvider interface {
	GetIdempotencyToken() (string, error)
}

func addRequestIDRetrieverMiddleware(stack *middleware.Stack) {
	awsmiddleware.AddRequestIDRetrieverMiddleware(stack)
}

func addResponseErrorMiddleware(stack *middleware.Stack) {
	awshttp.AddResponseErrorMiddleware(stack)
}
