// Code generated by smithy-go-codegen DO NOT EDIT.

package codepipeline

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/codepipeline/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns information about any jobs for AWS CodePipeline to act on. PollForJobs
// is valid only for action types with "Custom" in the owner field. If the action
// type contains "AWS" or "ThirdParty" in the owner field, the PollForJobs action
// returns an error. When this API is called, AWS CodePipeline returns temporary
// credentials for the S3 bucket used to store artifacts for the pipeline, if the
// action requires access to that S3 bucket for input or output artifacts. This API
// also returns any secret values defined for the action.
func (c *Client) PollForJobs(ctx context.Context, params *PollForJobsInput, optFns ...func(*Options)) (*PollForJobsOutput, error) {
	stack := middleware.NewStack("PollForJobs", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpPollForJobsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPollForJobsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPollForJobs(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PollForJobs",
			Err:           err,
		}
	}
	out := result.(*PollForJobsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input of a PollForJobs action.
type PollForJobsInput struct {
	// A map of property names and values. For an action type with no queryable
	// properties, this value must be null or an empty map. For an action type with a
	// queryable property, you must supply that property as a key in the map. Only jobs
	// whose action configuration matches the mapped value are returned.
	QueryParam map[string]*string
	// The maximum number of jobs to return in a poll for jobs call.
	MaxBatchSize *int32
	// Represents information about an action type.
	ActionTypeId *types.ActionTypeId
}

// Represents the output of a PollForJobs action.
type PollForJobsOutput struct {
	// Information about the jobs to take action on.
	Jobs []*types.Job

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpPollForJobsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpPollForJobs{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpPollForJobs{}, middleware.After)
}

func newServiceMetadataMiddleware_opPollForJobs(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codepipeline",
		OperationName: "PollForJobs",
	}
}
