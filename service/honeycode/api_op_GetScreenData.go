// Code generated by smithy-go-codegen DO NOT EDIT.

package honeycode

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/honeycode/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// The GetScreenData API allows retrieval of data from a screen in a Honeycode app.
// The API allows setting local variables in the screen to filter, sort or
// otherwise affect what will be displayed on the screen.
func (c *Client) GetScreenData(ctx context.Context, params *GetScreenDataInput, optFns ...func(*Options)) (*GetScreenDataOutput, error) {
	stack := middleware.NewStack("GetScreenData", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetScreenDataMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetScreenDataValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetScreenData(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetScreenData",
			Err:           err,
		}
	}
	out := result.(*GetScreenDataOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetScreenDataInput struct {
	// Variables are optional and are needed only if the screen requires them to render
	// correctly. Variables are specified as a map where the key is the name of the
	// variable as defined on the screen. The value is an object which currently has
	// only one property, rawValue, which holds the value of the variable to be passed
	// to the screen.
	Variables map[string]*types.VariableValue
	// This parameter is optional. If a nextToken is not specified, the API returns the
	// first page of data. Pagination tokens expire after 1 hour. If you use a token
	// that was returned more than an hour back, the API will throw
	// ValidationException.
	NextToken *string
	// The ID of the app that contains the screem.
	AppId *string
	// The number of results to be returned on a single page. Specify a number between
	// 1 and 100. The maximum value is 100. This parameter is optional. If you don't
	// specify this parameter, the default page size is 100.
	MaxResults *int32
	// The ID of the screen.
	ScreenId *string
	// The ID of the workbook that contains the screen.
	WorkbookId *string
}

type GetScreenDataOutput struct {
	// Provides the pagination token to load the next page if there are more results
	// matching the request. If a pagination token is not present in the response, it
	// means that all data matching the query has been loaded.
	NextToken *string
	// Indicates the cursor of the workbook at which the data returned by this workbook
	// is read. Workbook cursor keeps increasing with every update and the increments
	// are not sequential.
	WorkbookCursor *int64
	// A map of all the rows on the screen keyed by block name.
	Results map[string]*types.ResultSet

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetScreenDataMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetScreenData{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetScreenData{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetScreenData(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "honeycode",
		OperationName: "GetScreenData",
	}
}
