// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ErrorCode string

// Enum values for ErrorCode
const (
	ErrorCodeAccessDenied              ErrorCode = "ACCESS_DENIED"
	ErrorCodeInvalidUrlError           ErrorCode = "INVALID_URL_ERROR"
	ErrorCodeInvalidImportOptionsError ErrorCode = "INVALID_IMPORT_OPTIONS_ERROR"
	ErrorCodeInvalidTableIdError       ErrorCode = "INVALID_TABLE_ID_ERROR"
	ErrorCodeInvalidTableColumnIdError ErrorCode = "INVALID_TABLE_COLUMN_ID_ERROR"
	ErrorCodeTableNotFoundError        ErrorCode = "TABLE_NOT_FOUND_ERROR"
	ErrorCodeFileEmptyError            ErrorCode = "FILE_EMPTY_ERROR"
	ErrorCodeInvalidFileTypeError      ErrorCode = "INVALID_FILE_TYPE_ERROR"
	ErrorCodeFileParsingError          ErrorCode = "FILE_PARSING_ERROR"
	ErrorCodeFileSizeLimitError        ErrorCode = "FILE_SIZE_LIMIT_ERROR"
	ErrorCodeFileNotFoundError         ErrorCode = "FILE_NOT_FOUND_ERROR"
	ErrorCodeUnknownError              ErrorCode = "UNKNOWN_ERROR"
	ErrorCodeResourceNotFoundError     ErrorCode = "RESOURCE_NOT_FOUND_ERROR"
	ErrorCodeSystemLimitError          ErrorCode = "SYSTEM_LIMIT_ERROR"
)

// Values returns all known values for ErrorCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ErrorCode) Values() []ErrorCode {
	return []ErrorCode{
		"ACCESS_DENIED",
		"INVALID_URL_ERROR",
		"INVALID_IMPORT_OPTIONS_ERROR",
		"INVALID_TABLE_ID_ERROR",
		"INVALID_TABLE_COLUMN_ID_ERROR",
		"TABLE_NOT_FOUND_ERROR",
		"FILE_EMPTY_ERROR",
		"INVALID_FILE_TYPE_ERROR",
		"FILE_PARSING_ERROR",
		"FILE_SIZE_LIMIT_ERROR",
		"FILE_NOT_FOUND_ERROR",
		"UNKNOWN_ERROR",
		"RESOURCE_NOT_FOUND_ERROR",
		"SYSTEM_LIMIT_ERROR",
	}
}

type Format string

// Enum values for Format
const (
	FormatAuto       Format = "AUTO"
	FormatNumber     Format = "NUMBER"
	FormatCurrency   Format = "CURRENCY"
	FormatDate       Format = "DATE"
	FormatTime       Format = "TIME"
	FormatDateTime   Format = "DATE_TIME"
	FormatPercentage Format = "PERCENTAGE"
	FormatText       Format = "TEXT"
	FormatAccounting Format = "ACCOUNTING"
	FormatContact    Format = "CONTACT"
	FormatRowlink    Format = "ROWLINK"
	FormatRowset     Format = "ROWSET"
)

// Values returns all known values for Format. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Format) Values() []Format {
	return []Format{
		"AUTO",
		"NUMBER",
		"CURRENCY",
		"DATE",
		"TIME",
		"DATE_TIME",
		"PERCENTAGE",
		"TEXT",
		"ACCOUNTING",
		"CONTACT",
		"ROWLINK",
		"ROWSET",
	}
}

type ImportDataCharacterEncoding string

// Enum values for ImportDataCharacterEncoding
const (
	ImportDataCharacterEncodingUtf8     ImportDataCharacterEncoding = "UTF-8"
	ImportDataCharacterEncodingUsAscii  ImportDataCharacterEncoding = "US-ASCII"
	ImportDataCharacterEncodingIso88591 ImportDataCharacterEncoding = "ISO-8859-1"
	ImportDataCharacterEncodingUtf16be  ImportDataCharacterEncoding = "UTF-16BE"
	ImportDataCharacterEncodingUtf16le  ImportDataCharacterEncoding = "UTF-16LE"
	ImportDataCharacterEncodingUtf16    ImportDataCharacterEncoding = "UTF-16"
)

// Values returns all known values for ImportDataCharacterEncoding. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImportDataCharacterEncoding) Values() []ImportDataCharacterEncoding {
	return []ImportDataCharacterEncoding{
		"UTF-8",
		"US-ASCII",
		"ISO-8859-1",
		"UTF-16BE",
		"UTF-16LE",
		"UTF-16",
	}
}

type ImportSourceDataFormat string

// Enum values for ImportSourceDataFormat
const (
	ImportSourceDataFormatDelimitedText ImportSourceDataFormat = "DELIMITED_TEXT"
)

// Values returns all known values for ImportSourceDataFormat. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ImportSourceDataFormat) Values() []ImportSourceDataFormat {
	return []ImportSourceDataFormat{
		"DELIMITED_TEXT",
	}
}

type TableDataImportJobStatus string

// Enum values for TableDataImportJobStatus
const (
	TableDataImportJobStatusSubmitted  TableDataImportJobStatus = "SUBMITTED"
	TableDataImportJobStatusInProgress TableDataImportJobStatus = "IN_PROGRESS"
	TableDataImportJobStatusCompleted  TableDataImportJobStatus = "COMPLETED"
	TableDataImportJobStatusFailed     TableDataImportJobStatus = "FAILED"
)

// Values returns all known values for TableDataImportJobStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableDataImportJobStatus) Values() []TableDataImportJobStatus {
	return []TableDataImportJobStatus{
		"SUBMITTED",
		"IN_PROGRESS",
		"COMPLETED",
		"FAILED",
	}
}

type UpsertAction string

// Enum values for UpsertAction
const (
	UpsertActionUpdated  UpsertAction = "UPDATED"
	UpsertActionAppended UpsertAction = "APPENDED"
)

// Values returns all known values for UpsertAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (UpsertAction) Values() []UpsertAction {
	return []UpsertAction{
		"UPDATED",
		"APPENDED",
	}
}
