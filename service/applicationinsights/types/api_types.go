// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"time"

	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/service/applicationinsights/enums"
)

// Describes a standalone resource or similarly grouped resources that the application
// is made up of.
type ApplicationComponent struct {
	_ struct{} `type:"structure"`

	// The name of the component.
	ComponentName *string `type:"string"`

	// Indicates whether the application component is monitored.
	Monitor *bool `type:"boolean"`

	// The resource type. Supported resource types include EC2 instances, Auto Scaling
	// group, Classic ELB, Application ELB, and SQS Queue.
	ResourceType *string `type:"string"`

	// The stack tier of the application component.
	Tier *string `type:"string"`
}

// String returns the string representation
func (s ApplicationComponent) String() string {
	return awsutil.Prettify(s)
}

// Describes the status of the application.
type ApplicationInfo struct {
	_ struct{} `type:"structure"`

	// The lifecycle of the application.
	LifeCycle *string `type:"string"`

	// Indicates whether Application Insights will create opsItems for any problem
	// detected by Application Insights for an application.
	OpsCenterEnabled *bool `type:"boolean"`

	// The SNS topic provided to Application Insights that is associated to the
	// created opsItems to receive SNS notifications for opsItem updates.
	OpsItemSNSTopicArn *string `type:"string"`

	// The issues on the user side that block Application Insights from successfully
	// monitoring an application.
	Remarks *string `type:"string"`

	// The name of the resource group used for the application.
	ResourceGroupName *string `type:"string"`
}

// String returns the string representation
func (s ApplicationInfo) String() string {
	return awsutil.Prettify(s)
}

// Describes an anomaly or error with the application.
type Observation struct {
	_ struct{} `type:"structure"`

	// The time when the observation ended, in epoch seconds.
	EndTime *time.Time `type:"timestamp"`

	// The ID of the observation type.
	Id *string `type:"string"`

	// The timestamp in the CloudWatch Logs that specifies when the matched line
	// occurred.
	LineTime *time.Time `type:"timestamp"`

	// The log filter of the observation.
	LogFilter enums.LogFilter `type:"string" enum:"true"`

	// The log group name.
	LogGroup *string `type:"string"`

	// The log text of the observation.
	LogText *string `type:"string"`

	// The name of the observation metric.
	MetricName *string `type:"string"`

	// The namespace of the observation metric.
	MetricNamespace *string `type:"string"`

	// The source resource ARN of the observation.
	SourceARN *string `type:"string"`

	// The source type of the observation.
	SourceType *string `type:"string"`

	// The time when the observation was first detected, in epoch seconds.
	StartTime *time.Time `type:"timestamp"`

	// The unit of the source observation metric.
	Unit *string `type:"string"`

	// The value of the source observation metric.
	Value *float64 `type:"double"`
}

// String returns the string representation
func (s Observation) String() string {
	return awsutil.Prettify(s)
}

// Describes a problem that is detected by correlating observations.
type Problem struct {
	_ struct{} `type:"structure"`

	// The resource affected by the problem.
	AffectedResource *string `type:"string"`

	// The time when the problem ended, in epoch seconds.
	EndTime *time.Time `type:"timestamp"`

	// Feedback provided by the user about the problem.
	Feedback map[string]enums.FeedbackValue `type:"map"`

	// The ID of the problem.
	Id *string `type:"string"`

	// A detailed analysis of the problem using machine learning.
	Insights *string `type:"string"`

	// The name of the resource group affected by the problem.
	ResourceGroupName *string `type:"string"`

	// A measure of the level of impact of the problem.
	SeverityLevel enums.SeverityLevel `type:"string" enum:"true"`

	// The time when the problem started, in epoch seconds.
	StartTime *time.Time `type:"timestamp"`

	// The status of the problem.
	Status enums.Status `type:"string" enum:"true"`

	// The name of the problem.
	Title *string `type:"string"`
}

// String returns the string representation
func (s Problem) String() string {
	return awsutil.Prettify(s)
}

// Describes observations related to the problem.
type RelatedObservations struct {
	_ struct{} `type:"structure"`

	// The list of observations related to the problem.
	ObservationList []Observation `type:"list"`
}

// String returns the string representation
func (s RelatedObservations) String() string {
	return awsutil.Prettify(s)
}
