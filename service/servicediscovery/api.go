// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package servicediscovery

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opCreatePrivateDnsNamespace = "CreatePrivateDnsNamespace"

// CreatePrivateDnsNamespaceRequest is a API request type for the CreatePrivateDnsNamespace API operation.
type CreatePrivateDnsNamespaceRequest struct {
	*aws.Request
	Input *CreatePrivateDnsNamespaceInput
}

// Send marshals and sends the CreatePrivateDnsNamespace API request.
func (r CreatePrivateDnsNamespaceRequest) Send() (*CreatePrivateDnsNamespaceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreatePrivateDnsNamespaceOutput), nil
}

// CreatePrivateDnsNamespaceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Creates a private namespace based on DNS, which will be visible only inside
// a specified Amazon VPC. The namespace defines your service naming scheme.
// For example, if you name your namespace example.com and name your service
// backend, the resulting DNS name for the service will be backend.example.com.
// You can associate more than one service with the same namespace.
//
//    // Example sending a request using the CreatePrivateDnsNamespaceRequest method.
//    req := client.CreatePrivateDnsNamespaceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePrivateDnsNamespace
func (c *ServiceDiscovery) CreatePrivateDnsNamespaceRequest(input *CreatePrivateDnsNamespaceInput) CreatePrivateDnsNamespaceRequest {
	op := &aws.Operation{
		Name:       opCreatePrivateDnsNamespace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreatePrivateDnsNamespaceInput{}
	}

	output := &CreatePrivateDnsNamespaceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreatePrivateDnsNamespaceRequest{Request: req, Input: input}
}

const opCreatePublicDnsNamespace = "CreatePublicDnsNamespace"

// CreatePublicDnsNamespaceRequest is a API request type for the CreatePublicDnsNamespace API operation.
type CreatePublicDnsNamespaceRequest struct {
	*aws.Request
	Input *CreatePublicDnsNamespaceInput
}

// Send marshals and sends the CreatePublicDnsNamespace API request.
func (r CreatePublicDnsNamespaceRequest) Send() (*CreatePublicDnsNamespaceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreatePublicDnsNamespaceOutput), nil
}

// CreatePublicDnsNamespaceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Creates a public namespace based on DNS, which will be visible on the internet.
// The namespace defines your service naming scheme. For example, if you name
// your namespace example.com and name your service backend, the resulting DNS
// name for the service will be backend.example.com. You can associate more
// than one service with the same namespace.
//
//    // Example sending a request using the CreatePublicDnsNamespaceRequest method.
//    req := client.CreatePublicDnsNamespaceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePublicDnsNamespace
func (c *ServiceDiscovery) CreatePublicDnsNamespaceRequest(input *CreatePublicDnsNamespaceInput) CreatePublicDnsNamespaceRequest {
	op := &aws.Operation{
		Name:       opCreatePublicDnsNamespace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreatePublicDnsNamespaceInput{}
	}

	output := &CreatePublicDnsNamespaceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreatePublicDnsNamespaceRequest{Request: req, Input: input}
}

const opCreateService = "CreateService"

// CreateServiceRequest is a API request type for the CreateService API operation.
type CreateServiceRequest struct {
	*aws.Request
	Input *CreateServiceInput
}

// Send marshals and sends the CreateService API request.
func (r CreateServiceRequest) Send() (*CreateServiceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateServiceOutput), nil
}

// CreateServiceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Creates a service, which defines a template for the following entities:
//
//    * One to five resource record sets
//
//    * Optionally, a health check
//
// After you create the service, you can submit a RegisterInstance request,
// and Amazon Route 53 uses the values in the template to create the specified
// entities.
//
//    // Example sending a request using the CreateServiceRequest method.
//    req := client.CreateServiceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreateService
func (c *ServiceDiscovery) CreateServiceRequest(input *CreateServiceInput) CreateServiceRequest {
	op := &aws.Operation{
		Name:       opCreateService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateServiceInput{}
	}

	output := &CreateServiceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateServiceRequest{Request: req, Input: input}
}

const opDeleteNamespace = "DeleteNamespace"

// DeleteNamespaceRequest is a API request type for the DeleteNamespace API operation.
type DeleteNamespaceRequest struct {
	*aws.Request
	Input *DeleteNamespaceInput
}

// Send marshals and sends the DeleteNamespace API request.
func (r DeleteNamespaceRequest) Send() (*DeleteNamespaceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteNamespaceOutput), nil
}

// DeleteNamespaceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Deletes a namespace from the current account. If the namespace still contains
// one or more services, the request fails.
//
//    // Example sending a request using the DeleteNamespaceRequest method.
//    req := client.DeleteNamespaceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteNamespace
func (c *ServiceDiscovery) DeleteNamespaceRequest(input *DeleteNamespaceInput) DeleteNamespaceRequest {
	op := &aws.Operation{
		Name:       opDeleteNamespace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNamespaceInput{}
	}

	output := &DeleteNamespaceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteNamespaceRequest{Request: req, Input: input}
}

const opDeleteService = "DeleteService"

// DeleteServiceRequest is a API request type for the DeleteService API operation.
type DeleteServiceRequest struct {
	*aws.Request
	Input *DeleteServiceInput
}

// Send marshals and sends the DeleteService API request.
func (r DeleteServiceRequest) Send() (*DeleteServiceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteServiceOutput), nil
}

// DeleteServiceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Deletes a specified service. If the service still contains one or more registered
// instances, the request fails.
//
//    // Example sending a request using the DeleteServiceRequest method.
//    req := client.DeleteServiceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteService
func (c *ServiceDiscovery) DeleteServiceRequest(input *DeleteServiceInput) DeleteServiceRequest {
	op := &aws.Operation{
		Name:       opDeleteService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteServiceInput{}
	}

	output := &DeleteServiceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteServiceRequest{Request: req, Input: input}
}

const opDeregisterInstance = "DeregisterInstance"

// DeregisterInstanceRequest is a API request type for the DeregisterInstance API operation.
type DeregisterInstanceRequest struct {
	*aws.Request
	Input *DeregisterInstanceInput
}

// Send marshals and sends the DeregisterInstance API request.
func (r DeregisterInstanceRequest) Send() (*DeregisterInstanceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeregisterInstanceOutput), nil
}

// DeregisterInstanceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Deletes the resource record sets and the health check, if any, that Amazon
// Route 53 created for the specified instance.
//
//    // Example sending a request using the DeregisterInstanceRequest method.
//    req := client.DeregisterInstanceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeregisterInstance
func (c *ServiceDiscovery) DeregisterInstanceRequest(input *DeregisterInstanceInput) DeregisterInstanceRequest {
	op := &aws.Operation{
		Name:       opDeregisterInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeregisterInstanceInput{}
	}

	output := &DeregisterInstanceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeregisterInstanceRequest{Request: req, Input: input}
}

const opGetInstance = "GetInstance"

// GetInstanceRequest is a API request type for the GetInstance API operation.
type GetInstanceRequest struct {
	*aws.Request
	Input *GetInstanceInput
}

// Send marshals and sends the GetInstance API request.
func (r GetInstanceRequest) Send() (*GetInstanceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetInstanceOutput), nil
}

// GetInstanceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets information about a specified instance.
//
//    // Example sending a request using the GetInstanceRequest method.
//    req := client.GetInstanceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstance
func (c *ServiceDiscovery) GetInstanceRequest(input *GetInstanceInput) GetInstanceRequest {
	op := &aws.Operation{
		Name:       opGetInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetInstanceInput{}
	}

	output := &GetInstanceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetInstanceRequest{Request: req, Input: input}
}

const opGetInstancesHealthStatus = "GetInstancesHealthStatus"

// GetInstancesHealthStatusRequest is a API request type for the GetInstancesHealthStatus API operation.
type GetInstancesHealthStatusRequest struct {
	*aws.Request
	Input *GetInstancesHealthStatusInput
}

// Send marshals and sends the GetInstancesHealthStatus API request.
func (r GetInstancesHealthStatusRequest) Send() (*GetInstancesHealthStatusOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetInstancesHealthStatusOutput), nil
}

// GetInstancesHealthStatusRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets the current health status (Healthy, Unhealthy, or Unknown) of one or
// more instances that are associated with a specified service.
//
//    // Example sending a request using the GetInstancesHealthStatusRequest method.
//    req := client.GetInstancesHealthStatusRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstancesHealthStatus
func (c *ServiceDiscovery) GetInstancesHealthStatusRequest(input *GetInstancesHealthStatusInput) GetInstancesHealthStatusRequest {
	op := &aws.Operation{
		Name:       opGetInstancesHealthStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &GetInstancesHealthStatusInput{}
	}

	output := &GetInstancesHealthStatusOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetInstancesHealthStatusRequest{Request: req, Input: input}
}

// GetInstancesHealthStatusPages iterates over the pages of a GetInstancesHealthStatus operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See GetInstancesHealthStatus method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a GetInstancesHealthStatus operation.
//    pageNum := 0
//    err := client.GetInstancesHealthStatusPages(params,
//        func(page *GetInstancesHealthStatusOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *ServiceDiscovery) GetInstancesHealthStatusPages(input *GetInstancesHealthStatusInput, fn func(*GetInstancesHealthStatusOutput, bool) bool) error {
	return c.GetInstancesHealthStatusPagesWithContext(aws.BackgroundContext(), input, fn)
}

// GetInstancesHealthStatusPagesWithContext same as GetInstancesHealthStatusPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ServiceDiscovery) GetInstancesHealthStatusPagesWithContext(ctx aws.Context, input *GetInstancesHealthStatusInput, fn func(*GetInstancesHealthStatusOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *GetInstancesHealthStatusInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.GetInstancesHealthStatusRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*GetInstancesHealthStatusOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opGetNamespace = "GetNamespace"

// GetNamespaceRequest is a API request type for the GetNamespace API operation.
type GetNamespaceRequest struct {
	*aws.Request
	Input *GetNamespaceInput
}

// Send marshals and sends the GetNamespace API request.
func (r GetNamespaceRequest) Send() (*GetNamespaceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetNamespaceOutput), nil
}

// GetNamespaceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets information about a namespace.
//
//    // Example sending a request using the GetNamespaceRequest method.
//    req := client.GetNamespaceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetNamespace
func (c *ServiceDiscovery) GetNamespaceRequest(input *GetNamespaceInput) GetNamespaceRequest {
	op := &aws.Operation{
		Name:       opGetNamespace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetNamespaceInput{}
	}

	output := &GetNamespaceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetNamespaceRequest{Request: req, Input: input}
}

const opGetOperation = "GetOperation"

// GetOperationRequest is a API request type for the GetOperation API operation.
type GetOperationRequest struct {
	*aws.Request
	Input *GetOperationInput
}

// Send marshals and sends the GetOperation API request.
func (r GetOperationRequest) Send() (*GetOperationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetOperationOutput), nil
}

// GetOperationRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets information about any operation that returns an operation ID in the
// response, such as a CreateService request. To get a list of operations that
// match specified criteria, see ListOperations.
//
//    // Example sending a request using the GetOperationRequest method.
//    req := client.GetOperationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetOperation
func (c *ServiceDiscovery) GetOperationRequest(input *GetOperationInput) GetOperationRequest {
	op := &aws.Operation{
		Name:       opGetOperation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetOperationInput{}
	}

	output := &GetOperationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetOperationRequest{Request: req, Input: input}
}

const opGetService = "GetService"

// GetServiceRequest is a API request type for the GetService API operation.
type GetServiceRequest struct {
	*aws.Request
	Input *GetServiceInput
}

// Send marshals and sends the GetService API request.
func (r GetServiceRequest) Send() (*GetServiceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetServiceOutput), nil
}

// GetServiceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets the settings for a specified service.
//
//    // Example sending a request using the GetServiceRequest method.
//    req := client.GetServiceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetService
func (c *ServiceDiscovery) GetServiceRequest(input *GetServiceInput) GetServiceRequest {
	op := &aws.Operation{
		Name:       opGetService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetServiceInput{}
	}

	output := &GetServiceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetServiceRequest{Request: req, Input: input}
}

const opListInstances = "ListInstances"

// ListInstancesRequest is a API request type for the ListInstances API operation.
type ListInstancesRequest struct {
	*aws.Request
	Input *ListInstancesInput
}

// Send marshals and sends the ListInstances API request.
func (r ListInstancesRequest) Send() (*ListInstancesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListInstancesOutput), nil
}

// ListInstancesRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets summary information about the instances that you created by using a
// specified service.
//
//    // Example sending a request using the ListInstancesRequest method.
//    req := client.ListInstancesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListInstances
func (c *ServiceDiscovery) ListInstancesRequest(input *ListInstancesInput) ListInstancesRequest {
	op := &aws.Operation{
		Name:       opListInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListInstancesInput{}
	}

	output := &ListInstancesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListInstancesRequest{Request: req, Input: input}
}

// ListInstancesPages iterates over the pages of a ListInstances operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See ListInstances method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListInstances operation.
//    pageNum := 0
//    err := client.ListInstancesPages(params,
//        func(page *ListInstancesOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *ServiceDiscovery) ListInstancesPages(input *ListInstancesInput, fn func(*ListInstancesOutput, bool) bool) error {
	return c.ListInstancesPagesWithContext(aws.BackgroundContext(), input, fn)
}

// ListInstancesPagesWithContext same as ListInstancesPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ServiceDiscovery) ListInstancesPagesWithContext(ctx aws.Context, input *ListInstancesInput, fn func(*ListInstancesOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *ListInstancesInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.ListInstancesRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*ListInstancesOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opListNamespaces = "ListNamespaces"

// ListNamespacesRequest is a API request type for the ListNamespaces API operation.
type ListNamespacesRequest struct {
	*aws.Request
	Input *ListNamespacesInput
}

// Send marshals and sends the ListNamespaces API request.
func (r ListNamespacesRequest) Send() (*ListNamespacesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListNamespacesOutput), nil
}

// ListNamespacesRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets information about the namespaces that were created by the current AWS
// account.
//
//    // Example sending a request using the ListNamespacesRequest method.
//    req := client.ListNamespacesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListNamespaces
func (c *ServiceDiscovery) ListNamespacesRequest(input *ListNamespacesInput) ListNamespacesRequest {
	op := &aws.Operation{
		Name:       opListNamespaces,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListNamespacesInput{}
	}

	output := &ListNamespacesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListNamespacesRequest{Request: req, Input: input}
}

// ListNamespacesPages iterates over the pages of a ListNamespaces operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See ListNamespaces method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListNamespaces operation.
//    pageNum := 0
//    err := client.ListNamespacesPages(params,
//        func(page *ListNamespacesOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *ServiceDiscovery) ListNamespacesPages(input *ListNamespacesInput, fn func(*ListNamespacesOutput, bool) bool) error {
	return c.ListNamespacesPagesWithContext(aws.BackgroundContext(), input, fn)
}

// ListNamespacesPagesWithContext same as ListNamespacesPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ServiceDiscovery) ListNamespacesPagesWithContext(ctx aws.Context, input *ListNamespacesInput, fn func(*ListNamespacesOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *ListNamespacesInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.ListNamespacesRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*ListNamespacesOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opListOperations = "ListOperations"

// ListOperationsRequest is a API request type for the ListOperations API operation.
type ListOperationsRequest struct {
	*aws.Request
	Input *ListOperationsInput
}

// Send marshals and sends the ListOperations API request.
func (r ListOperationsRequest) Send() (*ListOperationsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListOperationsOutput), nil
}

// ListOperationsRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Lists operations that match the criteria that you specify.
//
//    // Example sending a request using the ListOperationsRequest method.
//    req := client.ListOperationsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListOperations
func (c *ServiceDiscovery) ListOperationsRequest(input *ListOperationsInput) ListOperationsRequest {
	op := &aws.Operation{
		Name:       opListOperations,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListOperationsInput{}
	}

	output := &ListOperationsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListOperationsRequest{Request: req, Input: input}
}

// ListOperationsPages iterates over the pages of a ListOperations operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See ListOperations method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListOperations operation.
//    pageNum := 0
//    err := client.ListOperationsPages(params,
//        func(page *ListOperationsOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *ServiceDiscovery) ListOperationsPages(input *ListOperationsInput, fn func(*ListOperationsOutput, bool) bool) error {
	return c.ListOperationsPagesWithContext(aws.BackgroundContext(), input, fn)
}

// ListOperationsPagesWithContext same as ListOperationsPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ServiceDiscovery) ListOperationsPagesWithContext(ctx aws.Context, input *ListOperationsInput, fn func(*ListOperationsOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *ListOperationsInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.ListOperationsRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*ListOperationsOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opListServices = "ListServices"

// ListServicesRequest is a API request type for the ListServices API operation.
type ListServicesRequest struct {
	*aws.Request
	Input *ListServicesInput
}

// Send marshals and sends the ListServices API request.
func (r ListServicesRequest) Send() (*ListServicesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListServicesOutput), nil
}

// ListServicesRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Gets settings for all the services that are associated with one or more specified
// namespaces.
//
//    // Example sending a request using the ListServicesRequest method.
//    req := client.ListServicesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListServices
func (c *ServiceDiscovery) ListServicesRequest(input *ListServicesInput) ListServicesRequest {
	op := &aws.Operation{
		Name:       opListServices,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListServicesInput{}
	}

	output := &ListServicesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListServicesRequest{Request: req, Input: input}
}

// ListServicesPages iterates over the pages of a ListServices operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See ListServices method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListServices operation.
//    pageNum := 0
//    err := client.ListServicesPages(params,
//        func(page *ListServicesOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *ServiceDiscovery) ListServicesPages(input *ListServicesInput, fn func(*ListServicesOutput, bool) bool) error {
	return c.ListServicesPagesWithContext(aws.BackgroundContext(), input, fn)
}

// ListServicesPagesWithContext same as ListServicesPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ServiceDiscovery) ListServicesPagesWithContext(ctx aws.Context, input *ListServicesInput, fn func(*ListServicesOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *ListServicesInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.ListServicesRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*ListServicesOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opRegisterInstance = "RegisterInstance"

// RegisterInstanceRequest is a API request type for the RegisterInstance API operation.
type RegisterInstanceRequest struct {
	*aws.Request
	Input *RegisterInstanceInput
}

// Send marshals and sends the RegisterInstance API request.
func (r RegisterInstanceRequest) Send() (*RegisterInstanceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*RegisterInstanceOutput), nil
}

// RegisterInstanceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Creates one or more resource record sets and optionally a health check based
// on the settings in a specified service. When you submit a RegisterInstance
// request, Amazon Route 53 does the following:
//
//    * Creates a resource record set for each resource record set template
//    in the service
//
//    * Creates a health check based on the settings in the health check template
//    in the service, if any
//
//    * Associates the health check, if any, with each of the resource record
//    sets
//
// One RegisterInstance request must complete before you can submit another
// request and specify the same service and instance ID.
//
// For more information, see CreateService.
//
// When Amazon Route 53 receives a DNS query for the specified DNS name, it
// returns the applicable value:
//
//    * If the health check is healthy: returns all the resource record sets
//
//    * If the health check is unhealthy: returns the IP address of the last
//    healthy instance
//
//    * If you didn't specify a health check template: returns all the resource
//    record sets
//
//    // Example sending a request using the RegisterInstanceRequest method.
//    req := client.RegisterInstanceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/RegisterInstance
func (c *ServiceDiscovery) RegisterInstanceRequest(input *RegisterInstanceInput) RegisterInstanceRequest {
	op := &aws.Operation{
		Name:       opRegisterInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RegisterInstanceInput{}
	}

	output := &RegisterInstanceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return RegisterInstanceRequest{Request: req, Input: input}
}

const opUpdateService = "UpdateService"

// UpdateServiceRequest is a API request type for the UpdateService API operation.
type UpdateServiceRequest struct {
	*aws.Request
	Input *UpdateServiceInput
}

// Send marshals and sends the UpdateService API request.
func (r UpdateServiceRequest) Send() (*UpdateServiceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateServiceOutput), nil
}

// UpdateServiceRequest returns a request value for making API operation for
// Amazon Route 53 Auto Naming.
//
// Updates the TTL setting for a specified service. You must specify all the
// resource record set templates (and, optionally, a health check template)
// that you want to appear in the updated service. Any current resource record
// set templates (or health check template) that don't appear in an UpdateService
// request are deleted.
//
// When you update the TTL setting for a service, Amazon Route 53 also updates
// the corresponding settings in all the resource record sets and health checks
// that were created by using the specified service.
//
//    // Example sending a request using the UpdateServiceRequest method.
//    req := client.UpdateServiceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdateService
func (c *ServiceDiscovery) UpdateServiceRequest(input *UpdateServiceInput) UpdateServiceRequest {
	op := &aws.Operation{
		Name:       opUpdateService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateServiceInput{}
	}

	output := &UpdateServiceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateServiceRequest{Request: req, Input: input}
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePrivateDnsNamespaceRequest
type CreatePrivateDnsNamespaceInput struct {
	_ struct{} `type:"structure"`

	// An optional parameter that you can use to resolve concurrent creation requests.
	// CreatorRequestId helps to determine if a specific client owns the namespace.
	CreatorRequestId *string `type:"string" idempotencyToken:"true"`

	// A description for the namespace.
	Description *string `type:"string"`

	// The name that you want to assign to this namespace. When you create a namespace,
	// Amazon Route 53 automatically creates a hosted zone that has the same name
	// as the namespace.
	//
	// Name is a required field
	Name *string `type:"string" required:"true"`

	// The ID of the Amazon VPC that you want to associate the namespace with.
	//
	// Vpc is a required field
	Vpc *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreatePrivateDnsNamespaceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePrivateDnsNamespaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreatePrivateDnsNamespaceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreatePrivateDnsNamespaceInput"}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.Vpc == nil {
		invalidParams.Add(aws.NewErrParamRequired("Vpc"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePrivateDnsNamespaceResponse
type CreatePrivateDnsNamespaceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A value that you can use to determine whether the request completed successfully.
	// To get the status of the operation, see GetOperation.
	OperationId *string `type:"string"`
}

// String returns the string representation
func (s CreatePrivateDnsNamespaceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePrivateDnsNamespaceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreatePrivateDnsNamespaceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePublicDnsNamespaceRequest
type CreatePublicDnsNamespaceInput struct {
	_ struct{} `type:"structure"`

	// An optional parameter that you can use to resolve concurrent creation requests.
	// CreatorRequestId helps to determine if a specific client owns the namespace.
	CreatorRequestId *string `type:"string" idempotencyToken:"true"`

	// A description for the namespace.
	Description *string `type:"string"`

	// The name that you want to assign to this namespace.
	//
	// Name is a required field
	Name *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreatePublicDnsNamespaceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePublicDnsNamespaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreatePublicDnsNamespaceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreatePublicDnsNamespaceInput"}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePublicDnsNamespaceResponse
type CreatePublicDnsNamespaceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A value that you can use to determine whether the request completed successfully.
	// To get the status of the operation, see GetOperation.
	OperationId *string `type:"string"`
}

// String returns the string representation
func (s CreatePublicDnsNamespaceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePublicDnsNamespaceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreatePublicDnsNamespaceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreateServiceRequest
type CreateServiceInput struct {
	_ struct{} `type:"structure"`

	// An optional parameter that you can use to resolve concurrent creation requests.
	// CreatorRequestId helps to determine if a specific client owns the namespace.
	CreatorRequestId *string `type:"string" idempotencyToken:"true"`

	// A description for the service.
	Description *string `type:"string"`

	// A complex type that contains information about the resource record sets that
	// you want Amazon Route 53 to create when you register an instance.
	//
	// DnsConfig is a required field
	DnsConfig *DnsConfig `type:"structure" required:"true"`

	// Public DNS namespaces only. A complex type that contains settings for an
	// optional health check. If you specify settings for a health check, Amazon
	// Route 53 associates the health check with all the resource record sets that
	// you specify in DnsConfig.
	//
	// The health check uses 30 seconds as the request interval. This is the number
	// of seconds between the time that each Amazon Route 53 health checker gets
	// a response from your endpoint and the time that it sends the next health
	// check request. A health checker in each data center around the world sends
	// your endpoint a health check request every 30 seconds. On average, your endpoint
	// receives a health check request about every two seconds. Health checkers
	// in different data centers don't coordinate with one another, so you'll sometimes
	// see several requests per second followed by a few seconds with no health
	// checks at all.
	//
	// For information about the charges for health checks, see Amazon Route 53
	// Pricing (http://aws.amazon.com/route53/pricing).
	HealthCheckConfig *HealthCheckConfig `type:"structure"`

	// The name that you want to assign to the service.
	//
	// Name is a required field
	Name *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateServiceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateServiceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateServiceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateServiceInput"}

	if s.DnsConfig == nil {
		invalidParams.Add(aws.NewErrParamRequired("DnsConfig"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}
	if s.DnsConfig != nil {
		if err := s.DnsConfig.Validate(); err != nil {
			invalidParams.AddNested("DnsConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.HealthCheckConfig != nil {
		if err := s.HealthCheckConfig.Validate(); err != nil {
			invalidParams.AddNested("HealthCheckConfig", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreateServiceResponse
type CreateServiceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A complex type that contains information about the new service.
	Service *Service `type:"structure"`
}

// String returns the string representation
func (s CreateServiceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateServiceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateServiceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteNamespaceRequest
type DeleteNamespaceInput struct {
	_ struct{} `type:"structure"`

	// The ID of the namespace that you want to delete.
	//
	// Id is a required field
	Id *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteNamespaceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNamespaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNamespaceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteNamespaceInput"}

	if s.Id == nil {
		invalidParams.Add(aws.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteNamespaceResponse
type DeleteNamespaceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A value that you can use to determine whether the request completed successfully.
	// To get the status of the operation, see GetOperation.
	OperationId *string `type:"string"`
}

// String returns the string representation
func (s DeleteNamespaceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNamespaceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteNamespaceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteServiceRequest
type DeleteServiceInput struct {
	_ struct{} `type:"structure"`

	// The ID of the service that you want to delete.
	//
	// Id is a required field
	Id *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteServiceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteServiceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteServiceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteServiceInput"}

	if s.Id == nil {
		invalidParams.Add(aws.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteServiceResponse
type DeleteServiceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteServiceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteServiceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteServiceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeregisterInstanceRequest
type DeregisterInstanceInput struct {
	_ struct{} `type:"structure"`

	// The value that you specified for Id in the RegisterInstance request.
	//
	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// The ID of the service that the instance is associated with.
	//
	// ServiceId is a required field
	ServiceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeregisterInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeregisterInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeregisterInstanceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeregisterInstanceInput"}

	if s.InstanceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("InstanceId"))
	}

	if s.ServiceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ServiceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeregisterInstanceResponse
type DeregisterInstanceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A value that you can use to determine whether the request completed successfully.
	// For more information, see GetOperation.
	OperationId *string `type:"string"`
}

// String returns the string representation
func (s DeregisterInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeregisterInstanceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeregisterInstanceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// A complex type that contains information about the resource record sets that
// you want Amazon Route 53 to create when you register an instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DnsConfig
type DnsConfig struct {
	_ struct{} `type:"structure"`

	// An array that contains one DnsRecord object for each resource record set
	// that you want Amazon Route 53 to create when you register an instance.
	//
	// DnsRecords is a required field
	DnsRecords []DnsRecord `type:"list" required:"true"`

	// The ID of the namespace to use for DNS configuration.
	//
	// NamespaceId is a required field
	NamespaceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DnsConfig) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DnsConfig) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DnsConfig) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DnsConfig"}

	if s.DnsRecords == nil {
		invalidParams.Add(aws.NewErrParamRequired("DnsRecords"))
	}

	if s.NamespaceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("NamespaceId"))
	}
	if s.DnsRecords != nil {
		for i, v := range s.DnsRecords {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "DnsRecords", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A complex type that contains information about changes to the resource record
// sets that Amazon Route 53 creates when you register an instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DnsConfigChange
type DnsConfigChange struct {
	_ struct{} `type:"structure"`

	// An array that contains one DnsRecord object for each resource record set
	// that you want Amazon Route 53 to create when you register an instance.
	//
	// DnsRecords is a required field
	DnsRecords []DnsRecord `type:"list" required:"true"`
}

// String returns the string representation
func (s DnsConfigChange) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DnsConfigChange) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DnsConfigChange) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DnsConfigChange"}

	if s.DnsRecords == nil {
		invalidParams.Add(aws.NewErrParamRequired("DnsRecords"))
	}
	if s.DnsRecords != nil {
		for i, v := range s.DnsRecords {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "DnsRecords", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A complex type that contains the ID for the hosted zone that Amazon Route
// 53 creates when you create a namespace.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DnsProperties
type DnsProperties struct {
	_ struct{} `type:"structure"`

	// The ID for the hosted zone that Amazon Route 53 creates when you create a
	// namespace.
	HostedZoneId *string `type:"string"`
}

// String returns the string representation
func (s DnsProperties) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DnsProperties) GoString() string {
	return s.String()
}

// A complex type that contains information about the resource record sets that
// you want Amazon Route 53 to create when you register an instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DnsRecord
type DnsRecord struct {
	_ struct{} `type:"structure"`

	// The amount of time, in seconds, that you want DNS resolvers to cache the
	// settings for this resource record set.
	//
	// TTL is a required field
	TTL *int64 `type:"long" required:"true"`

	// The type of the resource, which indicates the value that Amazon Route 53
	// returns in response to DNS queries. The following values are supported:
	//
	//    * A: Amazon Route 53 returns the IP address of the resource in IPv4 format,
	//    such as 192.0.2.44.
	//
	//    * AAAA: Amazon Route 53 returns the IP address of the resource in IPv6
	//    format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.
	//
	//    * SRV: Amazon Route 53 returns the value for an SRV record. The value
	//    for an SRV record uses the following template, which can't be changed:
	//
	// priority weight port resource-record-set-name
	//
	// The values of priority and weight are both set to 1. The value of port comes
	//    from the value that you specify for Port when you submit a RegisterInstance
	//    request.
	//
	// Type is a required field
	Type RecordType `type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s DnsRecord) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DnsRecord) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DnsRecord) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DnsRecord"}

	if s.TTL == nil {
		invalidParams.Add(aws.NewErrParamRequired("TTL"))
	}
	if len(s.Type) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstanceRequest
type GetInstanceInput struct {
	_ struct{} `type:"structure"`

	// The ID of the instance that you want to get information about.
	//
	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// The ID of the service that the instance is associated with.
	//
	// ServiceId is a required field
	ServiceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetInstanceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetInstanceInput"}

	if s.InstanceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("InstanceId"))
	}

	if s.ServiceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ServiceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstanceResponse
type GetInstanceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A complex type that contains information about a specified instance.
	Instance *Instance `type:"structure"`
}

// String returns the string representation
func (s GetInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetInstanceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstancesHealthStatusRequest
type GetInstancesHealthStatusInput struct {
	_ struct{} `type:"structure"`

	// An array that contains the IDs of all the instances that you want to get
	// the health status for. To get the IDs for the instances that you've created
	// by using a specified service, submit a ListInstances request.
	//
	// If you omit Instances, Amazon Route 53 returns the health status for all
	// the instances that are associated with the specified service.
	Instances []string `min:"1" type:"list"`

	// The maximum number of instances that you want Amazon Route 53 to return in
	// the response to a GetInstancesHealthStatus request. If you don't specify
	// a value for MaxResults, Amazon Route 53 returns up to 100 instances.
	MaxResults *int64 `min:"1" type:"integer"`

	// For the first GetInstancesHealthStatus request, omit this value.
	//
	// If more than MaxResults instances match the specified criteria, you can submit
	// another GetInstancesHealthStatus request to get the next group of results.
	// Specify the value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`

	// The ID of the service that the instance is associated with.
	//
	// ServiceId is a required field
	ServiceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetInstancesHealthStatusInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstancesHealthStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetInstancesHealthStatusInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetInstancesHealthStatusInput"}
	if s.Instances != nil && len(s.Instances) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Instances", 1))
	}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 1))
	}

	if s.ServiceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ServiceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstancesHealthStatusResponse
type GetInstancesHealthStatusOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// If more than MaxResults instances match the specified criteria, you can submit
	// another GetInstancesHealthStatus request to get the next group of results.
	// Specify the value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`

	// A complex type that contains the IDs and the health status of the instances
	// that you specified in the GetInstancesHealthStatus request.
	Status map[string]HealthStatus `type:"map"`
}

// String returns the string representation
func (s GetInstancesHealthStatusOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstancesHealthStatusOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetInstancesHealthStatusOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetNamespaceRequest
type GetNamespaceInput struct {
	_ struct{} `type:"structure"`

	// The ID of the namespace that you want to get information about.
	//
	// Id is a required field
	Id *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetNamespaceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNamespaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetNamespaceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetNamespaceInput"}

	if s.Id == nil {
		invalidParams.Add(aws.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetNamespaceResponse
type GetNamespaceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A complex type that contains information about the specified namespace.
	Namespace *Namespace `type:"structure"`
}

// String returns the string representation
func (s GetNamespaceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNamespaceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetNamespaceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetOperationRequest
type GetOperationInput struct {
	_ struct{} `type:"structure"`

	// The ID of the operation that you want to get more information about.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetOperationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOperationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetOperationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetOperationInput"}

	if s.OperationId == nil {
		invalidParams.Add(aws.NewErrParamRequired("OperationId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetOperationResponse
type GetOperationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A complex type that contains information about the operation.
	Operation *Operation `type:"structure"`
}

// String returns the string representation
func (s GetOperationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOperationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetOperationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetServiceRequest
type GetServiceInput struct {
	_ struct{} `type:"structure"`

	// The ID of the service that you want to get settings for.
	//
	// Id is a required field
	Id *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetServiceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetServiceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetServiceInput"}

	if s.Id == nil {
		invalidParams.Add(aws.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetServiceResponse
type GetServiceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A complex type that contains information about the service.
	Service *Service `type:"structure"`
}

// String returns the string representation
func (s GetServiceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetServiceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Public DNS namespaces only. A complex type that contains settings for an
// optional health check. If you specify settings for a health check, Amazon
// Route 53 associates the health check with all the resource record sets that
// you specify in DnsConfig.
//
// The health check uses 30 seconds as the request interval. This is the number
// of seconds between the time that each Amazon Route 53 health checker gets
// a response from your endpoint and the time that it sends the next health
// check request. A health checker in each data center around the world sends
// your endpoint a health check request every 30 seconds. On average, your endpoint
// receives a health check request about every two seconds. Health checkers
// in different data centers don't coordinate with one another, so you'll sometimes
// see several requests per second followed by a few seconds with no health
// checks at all.
//
// For information about the charges for health checks, see Amazon Route 53
// Pricing (http://aws.amazon.com/route53/pricing).
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/HealthCheckConfig
type HealthCheckConfig struct {
	_ struct{} `type:"structure"`

	// The number of consecutive health checks that an endpoint must pass or fail
	// for Amazon Route 53 to change the current status of the endpoint from unhealthy
	// to healthy or vice versa. For more information, see How Amazon Route 53 Determines
	// Whether an Endpoint Is Healthy (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html)
	// in the Amazon Route 53 Developer Guide.
	FailureThreshold *int64 `min:"1" type:"integer"`

	// The path that you want Amazon Route 53 to request when performing health
	// checks. The path can be any value for which your endpoint will return an
	// HTTP status code of 2xx or 3xx when the endpoint is healthy, such as the
	// file /docs/route53-health-check.html. Amazon Route 53 automatically adds
	// the DNS name for the service and a leading forward slash (/) character.
	ResourcePath *string `type:"string"`

	// The type of health check that you want to create, which indicates how Amazon
	// Route 53 determines whether an endpoint is healthy.
	//
	// You can't change the value of Type after you create a health check.
	//
	// You can create the following types of health checks:
	//
	//    * HTTP: Amazon Route 53 tries to establish a TCP connection. If successful,
	//    Amazon Route 53 submits an HTTP request and waits for an HTTP status code
	//    of 200 or greater and less than 400.
	//
	//    * HTTPS: Amazon Route 53 tries to establish a TCP connection. If successful,
	//    Amazon Route 53 submits an HTTPS request and waits for an HTTP status
	//    code of 200 or greater and less than 400.
	//
	// If you specify HTTPS for the value of Type, the endpoint must support TLS
	//    v1.0 or later.
	//
	//    * TCP: Amazon Route 53 tries to establish a TCP connection.
	//
	// For more information, see How Amazon Route 53 Determines Whether an Endpoint
	// Is Healthy (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html)
	// in the Amazon Route 53 Developer Guide.
	Type HealthCheckType `type:"string" enum:"true"`
}

// String returns the string representation
func (s HealthCheckConfig) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s HealthCheckConfig) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *HealthCheckConfig) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "HealthCheckConfig"}
	if s.FailureThreshold != nil && *s.FailureThreshold < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("FailureThreshold", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A complex type that contains information about an instance that Amazon Route
// 53 creates when you submit a RegisterInstance request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/Instance
type Instance struct {
	_ struct{} `type:"structure"`

	// A string map that contains attribute keys and values. Supported attribute
	// keys include the following:
	//
	//    * AWS_INSTANCE_PORT: The port on the endpoint that you want Amazon Route
	//    53 to perform health checks on. This value is also used for the port value
	//    in an SRV record if the service that you specify includes an SRV record.
	//    For more information, see CreateService.
	//
	//    * AWS_INSTANCE_IP: If the service that you specify contains a resource
	//    record set template for an A or AAAA record, the IP address that you want
	//    Amazon Route 53 to use for the value of the A record.
	//
	//    * AWS_INSTANCE_WEIGHT: The weight value in an SRV record if the service
	//    that you specify includes an SRV record. You can also specify a default
	//    weight that is applied to all instances in the Service configuration.
	//    For more information, see CreateService.
	//
	//    * AWS_INSTANCE_PRIORITY: The priority value in an SRV record if the service
	//    that you specify includes an SRV record.
	Attributes map[string]string `type:"map"`

	// An optional parameter that you can use to resolve concurrent creation requests.
	// CreatorRequestId helps to determine if a specific client owns the namespace.
	CreatorRequestId *string `type:"string"`

	// An identifier that you want to associate with the instance. Note the following:
	//
	//    * You can use this value to update an existing instance.
	//
	//    * To associate a new instance, you must specify a value that is unique
	//    among instances that you associate by using the same service.
	//
	// Id is a required field
	Id *string `type:"string" required:"true"`
}

// String returns the string representation
func (s Instance) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Instance) GoString() string {
	return s.String()
}

// A complex type that contains information about the instances that you created
// by using a specified service.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/InstanceSummary
type InstanceSummary struct {
	_ struct{} `type:"structure"`

	// A string map that contain attribute keys and values for an instance. Supported
	// attribute keys include the following:
	//
	//    * AWS_INSTANCE_PORT: The port on the endpoint that you want Amazon Route
	//    53 to perform health checks on. This value is also used for the port value
	//    in an SRV record if the service that you specify includes an SRV record.
	//    For more information, see CreateService.
	//
	//    * AWS_INSTANCE_IP: If the service that you specify contains a resource
	//    record set template for an A or AAAA record, the IP address that you want
	//    Amazon Route 53 to use for the value of the A record.
	Attributes map[string]string `type:"map"`

	// The ID for an instance that you created by using a specified service.
	Id *string `type:"string"`
}

// String returns the string representation
func (s InstanceSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceSummary) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListInstancesRequest
type ListInstancesInput struct {
	_ struct{} `type:"structure"`

	// The maximum number of instances that you want Amazon Route 53 to return in
	// the response to a ListInstances request. If you don't specify a value for
	// MaxResults, Amazon Route 53 returns up to 100 instances.
	MaxResults *int64 `min:"1" type:"integer"`

	// For the first ListInstances request, omit this value.
	//
	// If more than MaxResults instances match the specified criteria, you can submit
	// another ListInstances request to get the next group of results. Specify the
	// value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`

	// The ID of the service that you want to list instances for.
	//
	// ServiceId is a required field
	ServiceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListInstancesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListInstancesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListInstancesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListInstancesInput"}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 1))
	}

	if s.ServiceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ServiceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListInstancesResponse
type ListInstancesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Summary information about the instances that are associated with the specified
	// service.
	Instances []InstanceSummary `type:"list"`

	// If more than MaxResults instances match the specified criteria, you can submit
	// another ListInstances request to get the next group of results. Specify the
	// value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListInstancesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListInstancesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListInstancesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListNamespacesRequest
type ListNamespacesInput struct {
	_ struct{} `type:"structure"`

	// A complex type that contains specifications for the namespaces that you want
	// to list.
	//
	// If you specify more than one filter, an operation must match all filters
	// to be returned by ListNamespaces.
	Filters []NamespaceFilter `type:"list"`

	// The maximum number of namespaces that you want Amazon Route 53 to return
	// in the response to a ListNamespaces request. If you don't specify a value
	// for MaxResults, Amazon Route 53 returns up to 100 namespaces.
	MaxResults *int64 `min:"1" type:"integer"`

	// For the first ListNamespaces request, omit this value.
	//
	// If more than MaxResults namespaces match the specified criteria, you can
	// submit another ListNamespaces request to get the next group of results. Specify
	// the value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListNamespacesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNamespacesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListNamespacesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListNamespacesInput"}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 1))
	}
	if s.Filters != nil {
		for i, v := range s.Filters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Filters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListNamespacesResponse
type ListNamespacesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// An array that contains one NamespaceSummary object for each namespace that
	// matches the specified filter criteria.
	Namespaces []NamespaceSummary `type:"list"`

	// If more than MaxResults namespaces match the specified criteria, you can
	// submit another ListNamespaces request to get the next group of results. Specify
	// the value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListNamespacesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNamespacesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListNamespacesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListOperationsRequest
type ListOperationsInput struct {
	_ struct{} `type:"structure"`

	// A complex type that contains specifications for the operations that you want
	// to list, for example, operations that you started between a specified start
	// date and end date.
	//
	// If you specify more than one filter, an operation must match all filters
	// to be returned by ListOperations.
	Filters []OperationFilter `type:"list"`

	// The maximum number of items that you want Amazon Route 53 to return in the
	// response to a ListOperations request. If you don't specify a value for MaxResults,
	// Amazon Route 53 returns up to 100 operations.
	MaxResults *int64 `min:"1" type:"integer"`

	// For the first ListOperations request, omit this value.
	//
	// If more than MaxResults operations match the specified criteria, you can
	// submit another ListOperations request to get the next group of results. Specify
	// the value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListOperationsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListOperationsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListOperationsInput"}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 1))
	}
	if s.Filters != nil {
		for i, v := range s.Filters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Filters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListOperationsResponse
type ListOperationsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// If more than MaxResults operations match the specified criteria, you can
	// submit another ListOperations request to get the next group of results. Specify
	// the value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`

	// Summary information about the operations that match the specified criteria.
	Operations []OperationSummary `type:"list"`
}

// String returns the string representation
func (s ListOperationsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListOperationsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListServicesRequest
type ListServicesInput struct {
	_ struct{} `type:"structure"`

	// A complex type that contains specifications for the namespaces that you want
	// to list services for.
	//
	// If you specify more than one filter, an operation must match all filters
	// to be returned by ListServices.
	Filters []ServiceFilter `type:"list"`

	// The maximum number of services that you want Amazon Route 53 to return in
	// the response to a ListServices request. If you don't specify a value for
	// MaxResults, Amazon Route 53 returns up to 100 services.
	MaxResults *int64 `min:"1" type:"integer"`

	// For the first ListServices request, omit this value.
	//
	// If more than MaxResults services match the specified criteria, you can submit
	// another ListServices request to get the next group of results. Specify the
	// value of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListServicesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListServicesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListServicesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListServicesInput"}
	if s.MaxResults != nil && *s.MaxResults < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 1))
	}
	if s.Filters != nil {
		for i, v := range s.Filters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Filters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListServicesResponse
type ListServicesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// If more than MaxResults operations match the specified criteria, the value
	// of NextToken is the first service in the next group of services that were
	// created by the current AWS account. To get the next group, specify the value
	// of NextToken from the previous response in the next request.
	NextToken *string `type:"string"`

	// An array that contains one ServiceSummary object for each service that matches
	// the specified filter criteria.
	Services []ServiceSummary `type:"list"`
}

// String returns the string representation
func (s ListServicesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListServicesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListServicesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// A complex type that contains information about a specified namespace.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/Namespace
type Namespace struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) that Amazon Route 53 assigns to the namespace
	// when you create it.
	Arn *string `type:"string"`

	// The date that the namespace was created, in Unix date/time format and Coordinated
	// Universal Time (UTC).
	CreateDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// An optional parameter that you can use to resolve concurrent creation requests.
	// CreatorRequestId helps to determine if a specific client owns the namespace.
	CreatorRequestId *string `type:"string"`

	// The description that you specify for the namespace when you create it.
	Description *string `type:"string"`

	// The ID of a namespace.
	Id *string `type:"string"`

	// The name of the namespace, such as example.com.
	Name *string `type:"string"`

	// A complex type that contains information that's specific to the type of the
	// namespace.
	Properties *NamespaceProperties `type:"structure"`

	// The number of services that are associated with the namespace.
	ServiceCount *int64 `type:"integer"`

	// The type of the namespace. Valid values are DNS_PUBLIC and DNS_PRIVATE.
	Type NamespaceType `type:"string" enum:"true"`
}

// String returns the string representation
func (s Namespace) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Namespace) GoString() string {
	return s.String()
}

// A complex type that identifies the namespaces that you want to list. You
// can choose to list public or private namespaces.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/NamespaceFilter
type NamespaceFilter struct {
	_ struct{} `type:"structure"`

	// The operator that you want to use to determine whether ListNamespaces returns
	// a namespace. Valid values for condition include:
	//
	//    * EQ: When you specify EQ for the condition, you can choose to list only
	//    public namespaces or private namespaces, but not both. EQ is the default
	//    condition and can be omitted.
	//
	//    * IN: When you specify IN for the condition, you can choose to list public
	//    namespaces, private namespaces, or both.
	Condition FilterCondition `type:"string" enum:"true"`

	// Specify TYPE.
	//
	// Name is a required field
	Name NamespaceFilterName `type:"string" required:"true" enum:"true"`

	// If you specify EQ for Condition, specify either DNS_PUBLIC or DNS_PRIVATE.
	//
	// If you specify IN for Condition, you can specify DNS_PUBLIC, DNS_PRIVATE,
	// or both.
	//
	// Values is a required field
	Values []string `type:"list" required:"true"`
}

// String returns the string representation
func (s NamespaceFilter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NamespaceFilter) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *NamespaceFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "NamespaceFilter"}
	if len(s.Name) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A complex type that contains information that is specific to the namespace
// type.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/NamespaceProperties
type NamespaceProperties struct {
	_ struct{} `type:"structure"`

	// A complex type that contains the ID for the hosted zone that Amazon Route
	// 53 creates when you create a namespace.
	DnsProperties *DnsProperties `type:"structure"`
}

// String returns the string representation
func (s NamespaceProperties) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NamespaceProperties) GoString() string {
	return s.String()
}

// A complex type that contains information about a namespace.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/NamespaceSummary
type NamespaceSummary struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) that Amazon Route 53 assigns to the namespace
	// when you create it.
	Arn *string `type:"string"`

	// The ID of the namespace.
	Id *string `type:"string"`

	// The name of the namespace. When you create a namespace, Amazon Route 53 automatically
	// creates a hosted zone that has the same name as the namespace.
	Name *string `type:"string"`

	// The type of the namespace, either public or private.
	Type NamespaceType `type:"string" enum:"true"`
}

// String returns the string representation
func (s NamespaceSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NamespaceSummary) GoString() string {
	return s.String()
}

// A complex type that contains information about a specified operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/Operation
type Operation struct {
	_ struct{} `type:"structure"`

	// The date and time that the request was submitted, in Unix date/time format
	// and Coordinated Universal Time (UTC).
	CreateDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// The code associated with ErrorMessage.
	ErrorCode *string `type:"string"`

	// If the value of Status is FAIL, the reason that the operation failed.
	ErrorMessage *string `type:"string"`

	// The ID of the operation that you want to get information about.
	Id *string `type:"string"`

	// The status of the operation. Values include the following:
	//
	//    * SUBMITTED: This is the initial state immediately after you submit a
	//    request.
	//
	//    * PENDING: Amazon Route 53 is performing the operation.
	//
	//    * SUCCESS: The operation succeeded.
	//
	//    * FAIL: The operation failed. For the failure reason, see ErrorMessage.
	Status OperationStatus `type:"string" enum:"true"`

	// The name of the target entity that is associated with the operation:
	//
	//    * NAMESPACE: The namespace ID is returned in the ResourceId property.
	//
	//    * SERVICE: The service ID is returned in the ResourceId property.
	//
	//    * INSTANCE: The instance ID is returned in the ResourceId property.
	Targets map[string]string `type:"map"`

	// The name of the operation that is associated with the specified ID.
	Type OperationType `type:"string" enum:"true"`

	// The date and time that the value of Status changed to the current value,
	// in Unix date/time format and Coordinated Universal Time (UTC).
	UpdateDate *time.Time `type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s Operation) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Operation) GoString() string {
	return s.String()
}

// A complex type that lets you select the operations that you want to list.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/OperationFilter
type OperationFilter struct {
	_ struct{} `type:"structure"`

	// The operator that you want to use to determine whether an operation matches
	// the specified value. Valid values for condition include:
	//
	//    * EQ: When you specify EQ for the condition, you can specify only one
	//    value. EQ is supported for NAMESPACE_ID, SERVICE_ID, STATUS, and TYPE.
	//    EQ is the default condition and can be omitted.
	//
	//    * IN: When you specify IN for the condition, you can specify a list of
	//    one or more values. IN is supported for STATUS and TYPE. An operation
	//    must match one of the specified values to be returned in the response.
	//
	//    * BETWEEN: Specify two values, a start date and an end date. The start
	//    date must be the first value. BETWEEN is supported for U.
	Condition FilterCondition `type:"string" enum:"true"`

	// Specify the operations that you want to get:
	//
	//    * NAMESPACE_ID: Gets operations related to specified namespaces.
	//
	//    * SERVICE_ID: Gets operations related to specified services.
	//
	//    * STATUS: Gets operations based on the status of the operations: SUBMITTED,
	//    PENDING, SUCCEED, or FAIL.
	//
	//    * TYPE: Gets specified types of operation.
	//
	//    * UPDATE_DATE: Gets operations that changed status during a specified
	//    date/time range.
	//
	// Name is a required field
	Name OperationFilterName `type:"string" required:"true" enum:"true"`

	// Specify values that are applicable to the value that you specify for Name:
	//
	//    * NAMESPACE_ID: Specify one namespace ID.
	//
	//    * SERVICE_ID: Specify one service ID.
	//
	//    * STATUS: Specify one or more statuses: SUBMITTED, PENDING, SUCCEED, or
	//    FAIL.
	//
	//    * TYPE: Specify one or more of the following types: CREATE_NAMESPACE,
	//    DELETE_NAMESPACE, UPDATE_SERVICE, REGISTER_INSTANCE, or DEREGISTER_INSTANCE.
	//
	//    * UPDATE_DATE: Specify a start date and an end date in Unix date/time
	//    format and Coordinated Universal Time (UTC). The start date must be the
	//    first value.
	//
	// Values is a required field
	Values []string `type:"list" required:"true"`
}

// String returns the string representation
func (s OperationFilter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationFilter) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OperationFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "OperationFilter"}
	if len(s.Name) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A complex type that contains information about an operation that matches
// the criteria that you specified in a ListOperations request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/OperationSummary
type OperationSummary struct {
	_ struct{} `type:"structure"`

	// The ID for an operation.
	Id *string `type:"string"`

	// The status of the operation. Values include the following:
	//
	//    * SUBMITTED: This is the initial state immediately after you submit a
	//    request.
	//
	//    * PENDING: Amazon Route 53 is performing the operation.
	//
	//    * SUCCESS: The operation succeeded.
	//
	//    * FAIL: The operation failed. For the failure reason, see ErrorMessage.
	Status OperationStatus `type:"string" enum:"true"`
}

// String returns the string representation
func (s OperationSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationSummary) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/RegisterInstanceRequest
type RegisterInstanceInput struct {
	_ struct{} `type:"structure"`

	// A string map that contain attribute keys and values. Supported attribute
	// keys include the following:
	//
	//    * AWS_INSTANCE_PORT: The port on the endpoint that you want Amazon Route
	//    53 to perform health checks on. This value is also used for the port value
	//    in an SRV record if the service that you specify includes an SRV record.
	//    For more information, see CreateService.
	//
	//    * AWS_INSTANCE_IPV4: If the service that you specify contains a resource
	//    record set template for an A record, the IPv4 address that you want Amazon
	//    Route 53 to use for the value of the A record.
	//
	//    * AWS_INSTANCE_IPV6: If the service that you specify contains a resource
	//    record set template for an AAAA record, the IPv6 address that you want
	//    Amazon Route 53 to use for the value of the AAAA record.
	//
	// Attributes is a required field
	Attributes map[string]string `type:"map" required:"true"`

	// An optional parameter that you can use to resolve concurrent creation requests.
	// CreatorRequestId helps to determine if a specific client owns the namespace.
	CreatorRequestId *string `type:"string" idempotencyToken:"true"`

	// An identifier that you want to associate with the instance. Note the following:
	//
	//    * You can use this value to update an existing instance.
	//
	//    * To register a new instance, you must specify a value that is unique
	//    among instances that you register by using the same service.
	//
	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// The ID of the service that you want to use for settings for the resource
	// record sets and health check that Amazon Route 53 will create.
	//
	// ServiceId is a required field
	ServiceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RegisterInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RegisterInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RegisterInstanceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RegisterInstanceInput"}

	if s.Attributes == nil {
		invalidParams.Add(aws.NewErrParamRequired("Attributes"))
	}

	if s.InstanceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("InstanceId"))
	}

	if s.ServiceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("ServiceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/RegisterInstanceResponse
type RegisterInstanceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A value that you can use to determine whether the request completed successfully.
	// To get the status of the operation, see GetOperation.
	OperationId *string `type:"string"`
}

// String returns the string representation
func (s RegisterInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RegisterInstanceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s RegisterInstanceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// A complex type that contains information about the specified service.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/Service
type Service struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) that Amazon Route 53 assigns to the service
	// when you create it.
	Arn *string `type:"string"`

	// The date and time that the service was created, in Unix format and Coordinated
	// Universal Time (UTC).
	CreateDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// An optional parameter that you can use to resolve concurrent creation requests.
	// CreatorRequestId helps to determine if a specific client owns the namespace.
	CreatorRequestId *string `type:"string"`

	// The description of the service.
	Description *string `type:"string"`

	// A complex type that contains information about the resource record sets that
	// you want Amazon Route 53 to create when you register an instance.
	DnsConfig *DnsConfig `type:"structure"`

	// Public DNS namespaces only. A complex type that contains settings for an
	// optional health check. If you specify settings for a health check, Amazon
	// Route 53 associates the health check with all the resource record sets that
	// you specify in DnsConfig.
	//
	// The health check uses 30 seconds as the request interval. This is the number
	// of seconds between the time that each Amazon Route 53 health checker gets
	// a response from your endpoint and the time that it sends the next health
	// check request. A health checker in each data center around the world sends
	// your endpoint a health check request every 30 seconds. On average, your endpoint
	// receives a health check request about every two seconds. Health checkers
	// in different data centers don't coordinate with one another, so you'll sometimes
	// see several requests per second followed by a few seconds with no health
	// checks at all.
	//
	// For information about the charges for health checks, see Amazon Route 53
	// Pricing (http://aws.amazon.com/route53/pricing).
	HealthCheckConfig *HealthCheckConfig `type:"structure"`

	// The ID that Amazon Route 53 assigned to the service when you created it.
	Id *string `type:"string"`

	// The number of instances that are currently associated with the service. Instances
	// that were previously associated with the service but that have been deleted
	// are not included in the count.
	InstanceCount *int64 `type:"integer"`

	// The name of the service.
	Name *string `type:"string"`
}

// String returns the string representation
func (s Service) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Service) GoString() string {
	return s.String()
}

// A complex type that contains changes to an existing service.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ServiceChange
type ServiceChange struct {
	_ struct{} `type:"structure"`

	// A description for the service.
	Description *string `type:"string"`

	// A complex type that contains information about the resource record sets that
	// you want Amazon Route 53 to create when you register an instance.
	//
	// DnsConfig is a required field
	DnsConfig *DnsConfigChange `type:"structure" required:"true"`

	// Public DNS namespaces only. A complex type that contains settings for an
	// optional health check. If you specify settings for a health check, Amazon
	// Route 53 associates the health check with all the resource record sets that
	// you specify in DnsConfig.
	//
	// The health check uses 30 seconds as the request interval. This is the number
	// of seconds between the time that each Amazon Route 53 health checker gets
	// a response from your endpoint and the time that it sends the next health
	// check request. A health checker in each data center around the world sends
	// your endpoint a health check request every 30 seconds. On average, your endpoint
	// receives a health check request about every two seconds. Health checkers
	// in different data centers don't coordinate with one another, so you'll sometimes
	// see several requests per second followed by a few seconds with no health
	// checks at all.
	//
	// For information about the charges for health checks, see Amazon Route 53
	// Pricing (http://aws.amazon.com/route53/pricing).
	HealthCheckConfig *HealthCheckConfig `type:"structure"`
}

// String returns the string representation
func (s ServiceChange) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ServiceChange) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ServiceChange) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ServiceChange"}

	if s.DnsConfig == nil {
		invalidParams.Add(aws.NewErrParamRequired("DnsConfig"))
	}
	if s.DnsConfig != nil {
		if err := s.DnsConfig.Validate(); err != nil {
			invalidParams.AddNested("DnsConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.HealthCheckConfig != nil {
		if err := s.HealthCheckConfig.Validate(); err != nil {
			invalidParams.AddNested("HealthCheckConfig", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A complex type that lets you specify the namespaces that you want to list
// services for.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ServiceFilter
type ServiceFilter struct {
	_ struct{} `type:"structure"`

	// The operator that you want to use to determine whether a service is returned
	// by ListServices. Valid values for Condition include the following:
	//
	//    * EQ: When you specify EQ, specify one namespace ID for Values. EQ is
	//    the default condition and can be omitted.
	//
	//    * IN: When you specify IN, specify a list of the IDs for the namespaces
	//    that you want ListServices to return a list of services for.
	Condition FilterCondition `type:"string" enum:"true"`

	// Specify NAMESPACE_ID.
	//
	// Name is a required field
	Name ServiceFilterName `type:"string" required:"true" enum:"true"`

	// The values that are applicable to the value that you specify for Condition
	// to filter the list of services.
	//
	// Values is a required field
	Values []string `type:"list" required:"true"`
}

// String returns the string representation
func (s ServiceFilter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ServiceFilter) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ServiceFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ServiceFilter"}
	if len(s.Name) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A complex type that contains information about a specified service.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ServiceSummary
type ServiceSummary struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) that Amazon Route 53 assigns to the service
	// when you create it.
	Arn *string `type:"string"`

	// The description that you specify when you create the service.
	Description *string `type:"string"`

	// The ID that Amazon Route 53 assigned to the service when you created it.
	Id *string `type:"string"`

	// The number of instances that are currently associated with the service. Instances
	// that were previously associated with the service but that have been deleted
	// are not included in the count.
	InstanceCount *int64 `type:"integer"`

	// The name of the service.
	Name *string `type:"string"`
}

// String returns the string representation
func (s ServiceSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ServiceSummary) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdateServiceRequest
type UpdateServiceInput struct {
	_ struct{} `type:"structure"`

	// The ID of the service that you want to update.
	//
	// Id is a required field
	Id *string `type:"string" required:"true"`

	// A complex type that contains the new settings for the service.
	//
	// Service is a required field
	Service *ServiceChange `type:"structure" required:"true"`
}

// String returns the string representation
func (s UpdateServiceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateServiceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateServiceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateServiceInput"}

	if s.Id == nil {
		invalidParams.Add(aws.NewErrParamRequired("Id"))
	}

	if s.Service == nil {
		invalidParams.Add(aws.NewErrParamRequired("Service"))
	}
	if s.Service != nil {
		if err := s.Service.Validate(); err != nil {
			invalidParams.AddNested("Service", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdateServiceResponse
type UpdateServiceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A value that you can use to determine whether the request completed successfully.
	// To get the status of the operation, see GetOperation.
	OperationId *string `type:"string"`
}

// String returns the string representation
func (s UpdateServiceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateServiceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateServiceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

type FilterCondition string

// Enum values for FilterCondition
const (
	FilterConditionEq      FilterCondition = "EQ"
	FilterConditionIn      FilterCondition = "IN"
	FilterConditionBetween FilterCondition = "BETWEEN"
)

func (enum FilterCondition) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FilterCondition) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type HealthCheckType string

// Enum values for HealthCheckType
const (
	HealthCheckTypeHttp  HealthCheckType = "HTTP"
	HealthCheckTypeHttps HealthCheckType = "HTTPS"
	HealthCheckTypeTcp   HealthCheckType = "TCP"
)

func (enum HealthCheckType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum HealthCheckType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type HealthStatus string

// Enum values for HealthStatus
const (
	HealthStatusHealthy   HealthStatus = "HEALTHY"
	HealthStatusUnhealthy HealthStatus = "UNHEALTHY"
	HealthStatusUnknown   HealthStatus = "UNKNOWN"
)

func (enum HealthStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum HealthStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type NamespaceFilterName string

// Enum values for NamespaceFilterName
const (
	NamespaceFilterNameType NamespaceFilterName = "TYPE"
)

func (enum NamespaceFilterName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum NamespaceFilterName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type NamespaceType string

// Enum values for NamespaceType
const (
	NamespaceTypeDnsPublic  NamespaceType = "DNS_PUBLIC"
	NamespaceTypeDnsPrivate NamespaceType = "DNS_PRIVATE"
)

func (enum NamespaceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum NamespaceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationFilterName string

// Enum values for OperationFilterName
const (
	OperationFilterNameNamespaceId OperationFilterName = "NAMESPACE_ID"
	OperationFilterNameServiceId   OperationFilterName = "SERVICE_ID"
	OperationFilterNameStatus      OperationFilterName = "STATUS"
	OperationFilterNameType        OperationFilterName = "TYPE"
	OperationFilterNameUpdateDate  OperationFilterName = "UPDATE_DATE"
)

func (enum OperationFilterName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationFilterName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationStatus string

// Enum values for OperationStatus
const (
	OperationStatusSubmitted OperationStatus = "SUBMITTED"
	OperationStatusPending   OperationStatus = "PENDING"
	OperationStatusSuccess   OperationStatus = "SUCCESS"
	OperationStatusFail      OperationStatus = "FAIL"
)

func (enum OperationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationTargetType string

// Enum values for OperationTargetType
const (
	OperationTargetTypeNamespace OperationTargetType = "NAMESPACE"
	OperationTargetTypeService   OperationTargetType = "SERVICE"
	OperationTargetTypeInstance  OperationTargetType = "INSTANCE"
)

func (enum OperationTargetType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationTargetType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationType string

// Enum values for OperationType
const (
	OperationTypeCreateNamespace    OperationType = "CREATE_NAMESPACE"
	OperationTypeDeleteNamespace    OperationType = "DELETE_NAMESPACE"
	OperationTypeUpdateService      OperationType = "UPDATE_SERVICE"
	OperationTypeRegisterInstance   OperationType = "REGISTER_INSTANCE"
	OperationTypeDeregisterInstance OperationType = "DEREGISTER_INSTANCE"
)

func (enum OperationType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RecordType string

// Enum values for RecordType
const (
	RecordTypeSrv  RecordType = "SRV"
	RecordTypeA    RecordType = "A"
	RecordTypeAaaa RecordType = "AAAA"
)

func (enum RecordType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RecordType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ServiceFilterName string

// Enum values for ServiceFilterName
const (
	ServiceFilterNameNamespaceId ServiceFilterName = "NAMESPACE_ID"
)

func (enum ServiceFilterName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ServiceFilterName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
