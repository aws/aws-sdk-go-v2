// Code generated by smithy-go-codegen DO NOT EDIT.

package servicediscovery

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/servicediscovery/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets the current health status (Healthy, Unhealthy, or Unknown) of one or more
// instances that are associated with a specified service. There is a brief delay
// between when you register an instance and when the health status for the
// instance is available.
func (c *Client) GetInstancesHealthStatus(ctx context.Context, params *GetInstancesHealthStatusInput, optFns ...func(*Options)) (*GetInstancesHealthStatusOutput, error) {
	stack := middleware.NewStack("GetInstancesHealthStatus", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetInstancesHealthStatusMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetInstancesHealthStatusValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetInstancesHealthStatus(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetInstancesHealthStatus",
			Err:           err,
		}
	}
	out := result.(*GetInstancesHealthStatusOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetInstancesHealthStatusInput struct {
	// The ID of the service that the instance is associated with.
	ServiceId *string
	// An array that contains the IDs of all the instances that you want to get the
	// health status for. If you omit Instances, AWS Cloud Map returns the health
	// status for all the instances that are associated with the specified service. To
	// get the IDs for the instances that you've registered by using a specified
	// service, submit a ListInstances
	// (https://docs.aws.amazon.com/cloud-map/latest/api/API_ListInstances.html)
	// request.
	Instances []*string
	// For the first GetInstancesHealthStatus request, omit this value. If more than
	// MaxResults instances match the specified criteria, you can submit another
	// GetInstancesHealthStatus request to get the next group of results. Specify the
	// value of NextToken from the previous response in the next request.
	NextToken *string
	// The maximum number of instances that you want AWS Cloud Map to return in the
	// response to a GetInstancesHealthStatus request. If you don't specify a value for
	// MaxResults, AWS Cloud Map returns up to 100 instances.
	MaxResults *int32
}

type GetInstancesHealthStatusOutput struct {
	// A complex type that contains the IDs and the health status of the instances that
	// you specified in the GetInstancesHealthStatus request.
	Status map[string]types.HealthStatus
	// If more than MaxResults instances match the specified criteria, you can submit
	// another GetInstancesHealthStatus request to get the next group of results.
	// Specify the value of NextToken from the previous response in the next request.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetInstancesHealthStatusMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetInstancesHealthStatus{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetInstancesHealthStatus{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetInstancesHealthStatus(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "servicediscovery",
		OperationName: "GetInstancesHealthStatus",
	}
}
