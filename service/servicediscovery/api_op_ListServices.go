// Code generated by smithy-go-codegen DO NOT EDIT.

package servicediscovery

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/servicediscovery/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Lists summary information for all the services that are associated with one or
// more specified namespaces.
func (c *Client) ListServices(ctx context.Context, params *ListServicesInput, optFns ...func(*Options)) (*ListServicesOutput, error) {
	stack := middleware.NewStack("ListServices", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListServicesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListServicesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListServices(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListServices",
			Err:           err,
		}
	}
	out := result.(*ListServicesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListServicesInput struct {
	// The maximum number of services that you want AWS Cloud Map to return in the
	// response to a ListServices request. If you don't specify a value for MaxResults,
	// AWS Cloud Map returns up to 100 services.
	MaxResults *int32
	// A complex type that contains specifications for the namespaces that you want to
	// list services for. If you specify more than one filter, an operation must match
	// all filters to be returned by ListServices.
	Filters []*types.ServiceFilter
	// For the first ListServices request, omit this value. If the response contains
	// NextToken, submit another ListServices request to get the next group of results.
	// Specify the value of NextToken from the previous response in the next request.
	// AWS Cloud Map gets MaxResults services and then filters them based on the
	// specified criteria. It's possible that no services in the first MaxResults
	// services matched the specified criteria but that subsequent groups of MaxResults
	// services do contain services that match the criteria.
	NextToken *string
}

type ListServicesOutput struct {
	// If the response contains NextToken, submit another ListServices request to get
	// the next group of results. Specify the value of NextToken from the previous
	// response in the next request. AWS Cloud Map gets MaxResults services and then
	// filters them based on the specified criteria. It's possible that no services in
	// the first MaxResults services matched the specified criteria but that subsequent
	// groups of MaxResults services do contain services that match the criteria.
	NextToken *string
	// An array that contains one ServiceSummary object for each service that matches
	// the specified filter criteria.
	Services []*types.ServiceSummary

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListServicesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListServices{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListServices{}, middleware.After)
}

func newServiceMetadataMiddleware_opListServices(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "servicediscovery",
		OperationName: "ListServices",
	}
}
