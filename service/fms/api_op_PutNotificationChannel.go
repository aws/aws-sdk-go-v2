// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package fms

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/fms/types"
)

const opPutNotificationChannel = "PutNotificationChannel"

// PutNotificationChannelRequest returns a request value for making API operation for
// Firewall Management Service.
//
// Designates the IAM role and Amazon Simple Notification Service (SNS) topic
// that AWS Firewall Manager uses to record SNS logs.
//
//    // Example sending a request using PutNotificationChannelRequest.
//    req := client.PutNotificationChannelRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/fms-2018-01-01/PutNotificationChannel
func (c *Client) PutNotificationChannelRequest(input *types.PutNotificationChannelInput) PutNotificationChannelRequest {
	op := &aws.Operation{
		Name:       opPutNotificationChannel,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutNotificationChannelInput{}
	}

	req := c.newRequest(op, input, &types.PutNotificationChannelOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return PutNotificationChannelRequest{Request: req, Input: input, Copy: c.PutNotificationChannelRequest}
}

// PutNotificationChannelRequest is the request type for the
// PutNotificationChannel API operation.
type PutNotificationChannelRequest struct {
	*aws.Request
	Input *types.PutNotificationChannelInput
	Copy  func(*types.PutNotificationChannelInput) PutNotificationChannelRequest
}

// Send marshals and sends the PutNotificationChannel API request.
func (r PutNotificationChannelRequest) Send(ctx context.Context) (*PutNotificationChannelResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutNotificationChannelResponse{
		PutNotificationChannelOutput: r.Request.Data.(*types.PutNotificationChannelOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutNotificationChannelResponse is the response type for the
// PutNotificationChannel API operation.
type PutNotificationChannelResponse struct {
	*types.PutNotificationChannelOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutNotificationChannel request.
func (r *PutNotificationChannelResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
