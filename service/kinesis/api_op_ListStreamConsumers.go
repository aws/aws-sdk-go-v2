// Code generated by smithy-go-codegen DO NOT EDIT.

package kinesis

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/kinesis/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Lists the consumers registered to receive data from a stream using enhanced
// fan-out, and provides information about each consumer. This operation has a
// limit of 10 transactions per second per account.
func (c *Client) ListStreamConsumers(ctx context.Context, params *ListStreamConsumersInput, optFns ...func(*Options)) (*ListStreamConsumersOutput, error) {
	stack := middleware.NewStack("ListStreamConsumers", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpListStreamConsumersMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListStreamConsumersValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListStreamConsumers(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListStreamConsumers",
			Err:           err,
		}
	}
	out := result.(*ListStreamConsumersOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListStreamConsumersInput struct {
	// Specify this input parameter to distinguish data streams that have the same
	// name. For example, if you create a data stream and then delete it, and you later
	// create another data stream with the same name, you can use this input parameter
	// to specify which of the two streams you want to list the consumers for. You
	// can't specify this parameter if you specify the NextToken parameter.
	StreamCreationTimestamp *time.Time
	// When the number of consumers that are registered with the data stream is greater
	// than the default value for the MaxResults parameter, or if you explicitly
	// specify a value for MaxResults that is less than the number of consumers that
	// are registered with the data stream, the response includes a pagination token
	// named NextToken. You can specify this NextToken value in a subsequent call to
	// ListStreamConsumers to list the next set of registered consumers. Don't specify
	// StreamName or StreamCreationTimestamp if you specify NextToken because the
	// latter unambiguously identifies the stream. You can optionally specify a value
	// for the MaxResults parameter when you specify NextToken. If you specify a
	// MaxResults value that is less than the number of consumers that the operation
	// returns if you don't specify MaxResults, the response will contain a new
	// NextToken value. You can use the new NextToken value in a subsequent call to the
	// ListStreamConsumers operation to list the next set of consumers. Tokens expire
	// after 300 seconds. When you obtain a value for NextToken in the response to a
	// call to ListStreamConsumers, you have 300 seconds to use that value. If you
	// specify an expired token in a call to ListStreamConsumers, you get
	// ExpiredNextTokenException.
	NextToken *string
	// The maximum number of consumers that you want a single call of
	// ListStreamConsumers to return.
	MaxResults *int32
	// The ARN of the Kinesis data stream for which you want to list the registered
	// consumers. For more information, see Amazon Resource Names (ARNs) and AWS
	// Service Namespaces
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams).
	StreamARN *string
}

type ListStreamConsumersOutput struct {
	// When the number of consumers that are registered with the data stream is greater
	// than the default value for the MaxResults parameter, or if you explicitly
	// specify a value for MaxResults that is less than the number of registered
	// consumers, the response includes a pagination token named NextToken. You can
	// specify this NextToken value in a subsequent call to ListStreamConsumers to list
	// the next set of registered consumers. For more information about the use of this
	// pagination token when calling the ListStreamConsumers operation, see
	// ListStreamConsumersInput$NextToken (). Tokens expire after 300 seconds. When you
	// obtain a value for NextToken in the response to a call to ListStreamConsumers,
	// you have 300 seconds to use that value. If you specify an expired token in a
	// call to ListStreamConsumers, you get ExpiredNextTokenException.
	NextToken *string
	// An array of JSON objects. Each object represents one registered consumer.
	Consumers []*types.Consumer

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpListStreamConsumersMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpListStreamConsumers{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpListStreamConsumers{}, middleware.After)
}

func newServiceMetadataMiddleware_opListStreamConsumers(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "kinesis",
		OperationName: "ListStreamConsumers",
	}
}
