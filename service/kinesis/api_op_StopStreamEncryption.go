// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kinesis

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/kinesis/types"
)

const opStopStreamEncryption = "StopStreamEncryption"

// StopStreamEncryptionRequest returns a request value for making API operation for
// Amazon Kinesis.
//
// Disables server-side encryption for a specified stream.
//
// Stopping encryption is an asynchronous operation. Upon receiving the request,
// Kinesis Data Streams returns immediately and sets the status of the stream
// to UPDATING. After the update is complete, Kinesis Data Streams sets the
// status of the stream back to ACTIVE. Stopping encryption normally takes a
// few seconds to complete, but it can take minutes. You can continue to read
// and write data to your stream while its status is UPDATING. Once the status
// of the stream is ACTIVE, records written to the stream are no longer encrypted
// by Kinesis Data Streams.
//
// API Limits: You can successfully disable server-side encryption 25 times
// in a rolling 24-hour period.
//
// Note: It can take up to 5 seconds after the stream is in an ACTIVE status
// before all records written to the stream are no longer subject to encryption.
// After you disabled encryption, you can verify that encryption is not applied
// by inspecting the API response from PutRecord or PutRecords.
//
//    // Example sending a request using StopStreamEncryptionRequest.
//    req := client.StopStreamEncryptionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StopStreamEncryption
func (c *Client) StopStreamEncryptionRequest(input *types.StopStreamEncryptionInput) StopStreamEncryptionRequest {
	op := &aws.Operation{
		Name:       opStopStreamEncryption,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StopStreamEncryptionInput{}
	}

	req := c.newRequest(op, input, &types.StopStreamEncryptionOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return StopStreamEncryptionRequest{Request: req, Input: input, Copy: c.StopStreamEncryptionRequest}
}

// StopStreamEncryptionRequest is the request type for the
// StopStreamEncryption API operation.
type StopStreamEncryptionRequest struct {
	*aws.Request
	Input *types.StopStreamEncryptionInput
	Copy  func(*types.StopStreamEncryptionInput) StopStreamEncryptionRequest
}

// Send marshals and sends the StopStreamEncryption API request.
func (r StopStreamEncryptionRequest) Send(ctx context.Context) (*StopStreamEncryptionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StopStreamEncryptionResponse{
		StopStreamEncryptionOutput: r.Request.Data.(*types.StopStreamEncryptionOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StopStreamEncryptionResponse is the response type for the
// StopStreamEncryption API operation.
type StopStreamEncryptionResponse struct {
	*types.StopStreamEncryptionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StopStreamEncryption request.
func (r *StopStreamEncryptionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
