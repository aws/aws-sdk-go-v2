// Code generated by smithy-go-codegen DO NOT EDIT.

package kinesis

import (
	"bytes"
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/aws/protocol/eventstream"
	"github.com/aws/aws-sdk-go-v2/aws/protocol/eventstream/eventstreamapi"
	"github.com/aws/aws-sdk-go-v2/service/kinesis/types"
	smithy "github.com/aws/smithy-go"
	smithycbor "github.com/aws/smithy-go/encoding/cbor"
	"github.com/aws/smithy-go/middleware"
	"github.com/aws/smithy-go/ptr"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"io"
	"io/ioutil"
	"strings"
	"time"
)

type smithyRpcv2cbor_deserializeOpAddTagsToStream struct {
}

func (*smithyRpcv2cbor_deserializeOpAddTagsToStream) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpAddTagsToStream) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorAddTagsToStream(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &AddTagsToStreamOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpCreateStream struct {
}

func (*smithyRpcv2cbor_deserializeOpCreateStream) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpCreateStream) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorCreateStream(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &CreateStreamOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDecreaseStreamRetentionPeriod struct {
}

func (*smithyRpcv2cbor_deserializeOpDecreaseStreamRetentionPeriod) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDecreaseStreamRetentionPeriod) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDecreaseStreamRetentionPeriod(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &DecreaseStreamRetentionPeriodOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDeleteResourcePolicy struct {
}

func (*smithyRpcv2cbor_deserializeOpDeleteResourcePolicy) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDeleteResourcePolicy) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDeleteResourcePolicy(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &DeleteResourcePolicyOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDeleteStream struct {
}

func (*smithyRpcv2cbor_deserializeOpDeleteStream) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDeleteStream) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDeleteStream(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &DeleteStreamOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDeregisterStreamConsumer struct {
}

func (*smithyRpcv2cbor_deserializeOpDeregisterStreamConsumer) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDeregisterStreamConsumer) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDeregisterStreamConsumer(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &DeregisterStreamConsumerOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDescribeLimits struct {
}

func (*smithyRpcv2cbor_deserializeOpDescribeLimits) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDescribeLimits) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDescribeLimits(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &DescribeLimitsOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_DescribeLimitsOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDescribeStream struct {
}

func (*smithyRpcv2cbor_deserializeOpDescribeStream) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDescribeStream) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDescribeStream(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &DescribeStreamOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_DescribeStreamOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDescribeStreamConsumer struct {
}

func (*smithyRpcv2cbor_deserializeOpDescribeStreamConsumer) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDescribeStreamConsumer) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDescribeStreamConsumer(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &DescribeStreamConsumerOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_DescribeStreamConsumerOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDescribeStreamSummary struct {
}

func (*smithyRpcv2cbor_deserializeOpDescribeStreamSummary) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDescribeStreamSummary) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDescribeStreamSummary(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &DescribeStreamSummaryOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_DescribeStreamSummaryOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpDisableEnhancedMonitoring struct {
}

func (*smithyRpcv2cbor_deserializeOpDisableEnhancedMonitoring) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpDisableEnhancedMonitoring) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorDisableEnhancedMonitoring(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &DisableEnhancedMonitoringOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_DisableEnhancedMonitoringOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpEnableEnhancedMonitoring struct {
}

func (*smithyRpcv2cbor_deserializeOpEnableEnhancedMonitoring) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpEnableEnhancedMonitoring) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorEnableEnhancedMonitoring(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &EnableEnhancedMonitoringOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_EnableEnhancedMonitoringOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpGetRecords struct {
}

func (*smithyRpcv2cbor_deserializeOpGetRecords) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpGetRecords) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorGetRecords(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &GetRecordsOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_GetRecordsOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpGetResourcePolicy struct {
}

func (*smithyRpcv2cbor_deserializeOpGetResourcePolicy) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpGetResourcePolicy) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorGetResourcePolicy(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &GetResourcePolicyOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_GetResourcePolicyOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpGetShardIterator struct {
}

func (*smithyRpcv2cbor_deserializeOpGetShardIterator) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpGetShardIterator) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorGetShardIterator(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &GetShardIteratorOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_GetShardIteratorOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpIncreaseStreamRetentionPeriod struct {
}

func (*smithyRpcv2cbor_deserializeOpIncreaseStreamRetentionPeriod) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpIncreaseStreamRetentionPeriod) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorIncreaseStreamRetentionPeriod(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &IncreaseStreamRetentionPeriodOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpListShards struct {
}

func (*smithyRpcv2cbor_deserializeOpListShards) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpListShards) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorListShards(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &ListShardsOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_ListShardsOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpListStreamConsumers struct {
}

func (*smithyRpcv2cbor_deserializeOpListStreamConsumers) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpListStreamConsumers) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorListStreamConsumers(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &ListStreamConsumersOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_ListStreamConsumersOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpListStreams struct {
}

func (*smithyRpcv2cbor_deserializeOpListStreams) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpListStreams) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorListStreams(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &ListStreamsOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_ListStreamsOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpListTagsForStream struct {
}

func (*smithyRpcv2cbor_deserializeOpListTagsForStream) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpListTagsForStream) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorListTagsForStream(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &ListTagsForStreamOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_ListTagsForStreamOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpMergeShards struct {
}

func (*smithyRpcv2cbor_deserializeOpMergeShards) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpMergeShards) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorMergeShards(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &MergeShardsOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpPutRecord struct {
}

func (*smithyRpcv2cbor_deserializeOpPutRecord) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpPutRecord) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorPutRecord(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &PutRecordOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_PutRecordOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpPutRecords struct {
}

func (*smithyRpcv2cbor_deserializeOpPutRecords) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpPutRecords) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorPutRecords(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &PutRecordsOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_PutRecordsOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpPutResourcePolicy struct {
}

func (*smithyRpcv2cbor_deserializeOpPutResourcePolicy) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpPutResourcePolicy) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorPutResourcePolicy(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &PutResourcePolicyOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpRegisterStreamConsumer struct {
}

func (*smithyRpcv2cbor_deserializeOpRegisterStreamConsumer) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpRegisterStreamConsumer) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorRegisterStreamConsumer(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &RegisterStreamConsumerOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_RegisterStreamConsumerOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpRemoveTagsFromStream struct {
}

func (*smithyRpcv2cbor_deserializeOpRemoveTagsFromStream) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpRemoveTagsFromStream) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorRemoveTagsFromStream(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &RemoveTagsFromStreamOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpSplitShard struct {
}

func (*smithyRpcv2cbor_deserializeOpSplitShard) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpSplitShard) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorSplitShard(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &SplitShardOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpStartStreamEncryption struct {
}

func (*smithyRpcv2cbor_deserializeOpStartStreamEncryption) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpStartStreamEncryption) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorStartStreamEncryption(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &StartStreamEncryptionOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpStopStreamEncryption struct {
}

func (*smithyRpcv2cbor_deserializeOpStopStreamEncryption) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpStopStreamEncryption) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorStopStreamEncryption(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &StopStreamEncryptionOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpSubscribeToShard struct {
}

func (*smithyRpcv2cbor_deserializeOpSubscribeToShard) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpSubscribeToShard) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorSubscribeToShard(resp)
	}

	out.Result = &SubscribeToShardOutput{}

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpUpdateShardCount struct {
}

func (*smithyRpcv2cbor_deserializeOpUpdateShardCount) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpUpdateShardCount) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorUpdateShardCount(resp)
	}

	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return out, metadata, err
	}

	if len(payload) == 0 {
		out.Result = &UpdateShardCountOutput{}
		return out, metadata, nil
	}

	cv, err := smithycbor.Decode(payload)
	if err != nil {
		return out, metadata, err
	}

	output, err := deserializeCBOR_UpdateShardCountOutput(cv)
	if err != nil {
		return out, metadata, err
	}

	out.Result = output

	return out, metadata, nil
}

type smithyRpcv2cbor_deserializeOpUpdateStreamMode struct {
}

func (*smithyRpcv2cbor_deserializeOpUpdateStreamMode) ID() string {
	return "OperationDeserializer"
}

func (m *smithyRpcv2cbor_deserializeOpUpdateStreamMode) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	resp, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, fmt.Errorf("unexpected transport type %T", out.RawResponse)
	}

	if resp.Header.Get("smithy-protocol") != "rpc-v2-cbor" {
		return out, metadata, &smithy.DeserializationError{
			Err: fmt.Errorf(
				"unexpected smithy-protocol response header '%s' (HTTP status: %s)",
				resp.Header.Get("smithy-protocol"),
				resp.Status,
			),
		}
	}

	if resp.StatusCode != 200 {
		return out, metadata, rpc2_deserializeOpErrorUpdateStreamMode(resp)
	}

	if _, err = io.Copy(ioutil.Discard, resp.Body); err != nil {
		return out, metadata, fmt.Errorf("discard response body: %w", err)
	}

	out.Result = &UpdateStreamModeOutput{}

	return out, metadata, nil
}
func deserializeCBOR_InvalidArgumentException(v smithycbor.Value) (*types.InvalidArgumentException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.InvalidArgumentException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_DescribeStreamOutput(v smithycbor.Value) (*DescribeStreamOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &DescribeStreamOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamDescription" {
			dv, err := deserializeCBOR_StreamDescription(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamDescription = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ResourceNotFoundException(v smithycbor.Value) (*types.ResourceNotFoundException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ResourceNotFoundException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_KMSAccessDeniedException(v smithycbor.Value) (*types.KMSAccessDeniedException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.KMSAccessDeniedException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ListShardsOutput(v smithycbor.Value) (*ListShardsOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &ListShardsOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Shards" {
			dv, err := deserializeCBOR_ShardList(sv)
			if err != nil {
				return nil, err
			}
			ds.Shards = dv
		}

		if key == "NextToken" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.NextToken = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_DescribeStreamConsumerOutput(v smithycbor.Value) (*DescribeStreamConsumerOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &DescribeStreamConsumerOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ConsumerDescription" {
			dv, err := deserializeCBOR_ConsumerDescription(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerDescription = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ListTagsForStreamOutput(v smithycbor.Value) (*ListTagsForStreamOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &ListTagsForStreamOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Tags" {
			dv, err := deserializeCBOR_TagList(sv)
			if err != nil {
				return nil, err
			}
			ds.Tags = dv
		}

		if key == "HasMoreTags" {
			dv, err := deserializeCBOR_Bool(sv)
			if err != nil {
				return nil, err
			}
			ds.HasMoreTags = ptr.Bool(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_KMSNotFoundException(v smithycbor.Value) (*types.KMSNotFoundException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.KMSNotFoundException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_StreamSummaryList(v smithycbor.Value) ([]types.StreamSummary, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.StreamSummary
	for _, si := range av {

		di, err := deserializeCBOR_StreamSummary(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_KMSDisabledException(v smithycbor.Value) (*types.KMSDisabledException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.KMSDisabledException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_LimitExceededException(v smithycbor.Value) (*types.LimitExceededException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.LimitExceededException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_Shard(v smithycbor.Value) (*types.Shard, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.Shard{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ShardId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ShardId = ptr.String(dv)
		}

		if key == "ParentShardId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ParentShardId = ptr.String(dv)
		}

		if key == "AdjacentParentShardId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.AdjacentParentShardId = ptr.String(dv)
		}

		if key == "HashKeyRange" {
			dv, err := deserializeCBOR_HashKeyRange(sv)
			if err != nil {
				return nil, err
			}
			ds.HashKeyRange = dv
		}

		if key == "SequenceNumberRange" {
			dv, err := deserializeCBOR_SequenceNumberRange(sv)
			if err != nil {
				return nil, err
			}
			ds.SequenceNumberRange = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_PutRecordsResultEntryList(v smithycbor.Value) ([]types.PutRecordsResultEntry, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.PutRecordsResultEntry
	for _, si := range av {

		di, err := deserializeCBOR_PutRecordsResultEntry(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_RegisterStreamConsumerOutput(v smithycbor.Value) (*RegisterStreamConsumerOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &RegisterStreamConsumerOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Consumer" {
			dv, err := deserializeCBOR_Consumer(sv)
			if err != nil {
				return nil, err
			}
			ds.Consumer = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_StreamDescription(v smithycbor.Value) (*types.StreamDescription, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.StreamDescription{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamName = ptr.String(dv)
		}

		if key == "StreamARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamARN = ptr.String(dv)
		}

		if key == "StreamStatus" {
			dv, err := deserializeCBOR_StreamStatus(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamStatus = dv
		}

		if key == "StreamModeDetails" {
			dv, err := deserializeCBOR_StreamModeDetails(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamModeDetails = dv
		}

		if key == "Shards" {
			dv, err := deserializeCBOR_ShardList(sv)
			if err != nil {
				return nil, err
			}
			ds.Shards = dv
		}

		if key == "HasMoreShards" {
			dv, err := deserializeCBOR_Bool(sv)
			if err != nil {
				return nil, err
			}
			ds.HasMoreShards = ptr.Bool(dv)
		}

		if key == "RetentionPeriodHours" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.RetentionPeriodHours = ptr.Int32(dv)
		}

		if key == "StreamCreationTimestamp" {
			dv, err := deserializeCBOR_Time(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamCreationTimestamp = ptr.Time(dv)
		}

		if key == "EnhancedMonitoring" {
			dv, err := deserializeCBOR_EnhancedMonitoringList(sv)
			if err != nil {
				return nil, err
			}
			ds.EnhancedMonitoring = dv
		}

		if key == "EncryptionType" {
			dv, err := deserializeCBOR_EncryptionType(sv)
			if err != nil {
				return nil, err
			}
			ds.EncryptionType = dv
		}

		if key == "KeyId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.KeyId = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_AccessDeniedException(v smithycbor.Value) (*types.AccessDeniedException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.AccessDeniedException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_DescribeLimitsOutput(v smithycbor.Value) (*DescribeLimitsOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &DescribeLimitsOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ShardLimit" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.ShardLimit = ptr.Int32(dv)
		}

		if key == "OpenShardCount" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.OpenShardCount = ptr.Int32(dv)
		}

		if key == "OnDemandStreamCount" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.OnDemandStreamCount = ptr.Int32(dv)
		}

		if key == "OnDemandStreamCountLimit" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.OnDemandStreamCountLimit = ptr.Int32(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_StreamMode(v smithycbor.Value) (types.StreamMode, error) {
	av, ok := v.(smithycbor.String)
	if !ok {
		return types.StreamMode(""), fmt.Errorf("unexpected value type %T", v)
	}
	return types.StreamMode(av), nil
}

func deserializeCBOR_Bool(v smithycbor.Value) (bool, error) {
	av, ok := v.(smithycbor.Bool)
	if !ok {
		return false, fmt.Errorf("unexpected value type %T", v)
	}
	return bool(av), nil
}

func deserializeCBOR_GetResourcePolicyOutput(v smithycbor.Value) (*GetResourcePolicyOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &GetResourcePolicyOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Policy" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Policy = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ShardIdList(v smithycbor.Value) ([]string, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []string
	for _, si := range av {

		di, err := deserializeCBOR_String(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, di)
	}
	return dl, nil
}

func deserializeCBOR_DisableEnhancedMonitoringOutput(v smithycbor.Value) (*DisableEnhancedMonitoringOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &DisableEnhancedMonitoringOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamName = ptr.String(dv)
		}

		if key == "CurrentShardLevelMetrics" {
			dv, err := deserializeCBOR_MetricsNameList(sv)
			if err != nil {
				return nil, err
			}
			ds.CurrentShardLevelMetrics = dv
		}

		if key == "DesiredShardLevelMetrics" {
			dv, err := deserializeCBOR_MetricsNameList(sv)
			if err != nil {
				return nil, err
			}
			ds.DesiredShardLevelMetrics = dv
		}

		if key == "StreamARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamARN = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ChildShard(v smithycbor.Value) (*types.ChildShard, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ChildShard{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ShardId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ShardId = ptr.String(dv)
		}

		if key == "ParentShards" {
			dv, err := deserializeCBOR_ShardIdList(sv)
			if err != nil {
				return nil, err
			}
			ds.ParentShards = dv
		}

		if key == "HashKeyRange" {
			dv, err := deserializeCBOR_HashKeyRange(sv)
			if err != nil {
				return nil, err
			}
			ds.HashKeyRange = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ConsumerDescription(v smithycbor.Value) (*types.ConsumerDescription, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ConsumerDescription{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ConsumerName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerName = ptr.String(dv)
		}

		if key == "ConsumerARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerARN = ptr.String(dv)
		}

		if key == "ConsumerStatus" {
			dv, err := deserializeCBOR_ConsumerStatus(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerStatus = dv
		}

		if key == "ConsumerCreationTimestamp" {
			dv, err := deserializeCBOR_Time(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerCreationTimestamp = ptr.Time(dv)
		}

		if key == "StreamARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamARN = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_StreamDescriptionSummary(v smithycbor.Value) (*types.StreamDescriptionSummary, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.StreamDescriptionSummary{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamName = ptr.String(dv)
		}

		if key == "StreamARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamARN = ptr.String(dv)
		}

		if key == "StreamStatus" {
			dv, err := deserializeCBOR_StreamStatus(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamStatus = dv
		}

		if key == "StreamModeDetails" {
			dv, err := deserializeCBOR_StreamModeDetails(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamModeDetails = dv
		}

		if key == "RetentionPeriodHours" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.RetentionPeriodHours = ptr.Int32(dv)
		}

		if key == "StreamCreationTimestamp" {
			dv, err := deserializeCBOR_Time(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamCreationTimestamp = ptr.Time(dv)
		}

		if key == "EnhancedMonitoring" {
			dv, err := deserializeCBOR_EnhancedMonitoringList(sv)
			if err != nil {
				return nil, err
			}
			ds.EnhancedMonitoring = dv
		}

		if key == "EncryptionType" {
			dv, err := deserializeCBOR_EncryptionType(sv)
			if err != nil {
				return nil, err
			}
			ds.EncryptionType = dv
		}

		if key == "KeyId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.KeyId = ptr.String(dv)
		}

		if key == "OpenShardCount" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.OpenShardCount = ptr.Int32(dv)
		}

		if key == "ConsumerCount" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerCount = ptr.Int32(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ValidationException(v smithycbor.Value) (*types.ValidationException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ValidationException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_MetricsName(v smithycbor.Value) (types.MetricsName, error) {
	av, ok := v.(smithycbor.String)
	if !ok {
		return types.MetricsName(""), fmt.Errorf("unexpected value type %T", v)
	}
	return types.MetricsName(av), nil
}

func deserializeCBOR_Record(v smithycbor.Value) (*types.Record, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.Record{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "SequenceNumber" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.SequenceNumber = ptr.String(dv)
		}

		if key == "ApproximateArrivalTimestamp" {
			dv, err := deserializeCBOR_Time(sv)
			if err != nil {
				return nil, err
			}
			ds.ApproximateArrivalTimestamp = ptr.Time(dv)
		}

		if key == "Data" {
			dv, err := deserializeCBOR_Blob(sv)
			if err != nil {
				return nil, err
			}
			ds.Data = dv
		}

		if key == "PartitionKey" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.PartitionKey = ptr.String(dv)
		}

		if key == "EncryptionType" {
			dv, err := deserializeCBOR_EncryptionType(sv)
			if err != nil {
				return nil, err
			}
			ds.EncryptionType = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_StreamSummary(v smithycbor.Value) (*types.StreamSummary, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.StreamSummary{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamName = ptr.String(dv)
		}

		if key == "StreamARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamARN = ptr.String(dv)
		}

		if key == "StreamStatus" {
			dv, err := deserializeCBOR_StreamStatus(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamStatus = dv
		}

		if key == "StreamModeDetails" {
			dv, err := deserializeCBOR_StreamModeDetails(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamModeDetails = dv
		}

		if key == "StreamCreationTimestamp" {
			dv, err := deserializeCBOR_Time(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamCreationTimestamp = ptr.Time(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_PutRecordOutput(v smithycbor.Value) (*PutRecordOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &PutRecordOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ShardId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ShardId = ptr.String(dv)
		}

		if key == "SequenceNumber" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.SequenceNumber = ptr.String(dv)
		}

		if key == "EncryptionType" {
			dv, err := deserializeCBOR_EncryptionType(sv)
			if err != nil {
				return nil, err
			}
			ds.EncryptionType = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_Int32(v smithycbor.Value) (int32, error) {
	return smithycbor.AsInt32(v)
}

func deserializeCBOR_PutRecordsOutput(v smithycbor.Value) (*PutRecordsOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &PutRecordsOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "FailedRecordCount" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.FailedRecordCount = ptr.Int32(dv)
		}

		if key == "Records" {
			dv, err := deserializeCBOR_PutRecordsResultEntryList(sv)
			if err != nil {
				return nil, err
			}
			ds.Records = dv
		}

		if key == "EncryptionType" {
			dv, err := deserializeCBOR_EncryptionType(sv)
			if err != nil {
				return nil, err
			}
			ds.EncryptionType = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ResourceInUseException(v smithycbor.Value) (*types.ResourceInUseException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ResourceInUseException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ShardList(v smithycbor.Value) ([]types.Shard, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.Shard
	for _, si := range av {

		di, err := deserializeCBOR_Shard(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_EnhancedMonitoringList(v smithycbor.Value) ([]types.EnhancedMetrics, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.EnhancedMetrics
	for _, si := range av {

		di, err := deserializeCBOR_EnhancedMetrics(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_UpdateShardCountOutput(v smithycbor.Value) (*UpdateShardCountOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &UpdateShardCountOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamName = ptr.String(dv)
		}

		if key == "CurrentShardCount" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.CurrentShardCount = ptr.Int32(dv)
		}

		if key == "TargetShardCount" {
			dv, err := deserializeCBOR_Int32(sv)
			if err != nil {
				return nil, err
			}
			ds.TargetShardCount = ptr.Int32(dv)
		}

		if key == "StreamARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamARN = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_Int64(v smithycbor.Value) (int64, error) {
	return smithycbor.AsInt64(v)
}

func deserializeCBOR_SequenceNumberRange(v smithycbor.Value) (*types.SequenceNumberRange, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.SequenceNumberRange{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StartingSequenceNumber" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StartingSequenceNumber = ptr.String(dv)
		}

		if key == "EndingSequenceNumber" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.EndingSequenceNumber = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_String(v smithycbor.Value) (string, error) {
	av, ok := v.(smithycbor.String)
	if !ok {
		return "", fmt.Errorf("unexpected value type %T", v)
	}
	return string(av), nil
}

func deserializeCBOR_DescribeStreamSummaryOutput(v smithycbor.Value) (*DescribeStreamSummaryOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &DescribeStreamSummaryOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamDescriptionSummary" {
			dv, err := deserializeCBOR_StreamDescriptionSummary(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamDescriptionSummary = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ListStreamsOutput(v smithycbor.Value) (*ListStreamsOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &ListStreamsOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamNames" {
			dv, err := deserializeCBOR_StreamNameList(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamNames = dv
		}

		if key == "HasMoreStreams" {
			dv, err := deserializeCBOR_Bool(sv)
			if err != nil {
				return nil, err
			}
			ds.HasMoreStreams = ptr.Bool(dv)
		}

		if key == "NextToken" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.NextToken = ptr.String(dv)
		}

		if key == "StreamSummaries" {
			dv, err := deserializeCBOR_StreamSummaryList(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamSummaries = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ListStreamConsumersOutput(v smithycbor.Value) (*ListStreamConsumersOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &ListStreamConsumersOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Consumers" {
			dv, err := deserializeCBOR_ConsumerList(sv)
			if err != nil {
				return nil, err
			}
			ds.Consumers = dv
		}

		if key == "NextToken" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.NextToken = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_SubscribeToShardOutput(v smithycbor.Value) (*SubscribeToShardOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &SubscribeToShardOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "initialResponseOne" {
			dv, err := deserializeCBOR_ChildShardList(sv)
			if err != nil {
				return nil, err
			}
			ds.InitialResponseOne = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_KMSOptInRequired(v smithycbor.Value) (*types.KMSOptInRequired, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.KMSOptInRequired{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ConsumerList(v smithycbor.Value) ([]types.Consumer, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.Consumer
	for _, si := range av {

		di, err := deserializeCBOR_Consumer(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_EnhancedMetrics(v smithycbor.Value) (*types.EnhancedMetrics, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.EnhancedMetrics{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ShardLevelMetrics" {
			dv, err := deserializeCBOR_MetricsNameList(sv)
			if err != nil {
				return nil, err
			}
			ds.ShardLevelMetrics = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ProvisionedThroughputExceededException(v smithycbor.Value) (*types.ProvisionedThroughputExceededException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ProvisionedThroughputExceededException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_EnableEnhancedMonitoringOutput(v smithycbor.Value) (*EnableEnhancedMonitoringOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &EnableEnhancedMonitoringOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamName = ptr.String(dv)
		}

		if key == "CurrentShardLevelMetrics" {
			dv, err := deserializeCBOR_MetricsNameList(sv)
			if err != nil {
				return nil, err
			}
			ds.CurrentShardLevelMetrics = dv
		}

		if key == "DesiredShardLevelMetrics" {
			dv, err := deserializeCBOR_MetricsNameList(sv)
			if err != nil {
				return nil, err
			}
			ds.DesiredShardLevelMetrics = dv
		}

		if key == "StreamARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamARN = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_StreamNameList(v smithycbor.Value) ([]string, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []string
	for _, si := range av {

		di, err := deserializeCBOR_String(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, di)
	}
	return dl, nil
}

func deserializeCBOR_StreamStatus(v smithycbor.Value) (types.StreamStatus, error) {
	av, ok := v.(smithycbor.String)
	if !ok {
		return types.StreamStatus(""), fmt.Errorf("unexpected value type %T", v)
	}
	return types.StreamStatus(av), nil
}

func deserializeCBOR_Blob(v smithycbor.Value) ([]byte, error) {
	av, ok := v.(smithycbor.Slice)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	return []byte(av), nil
}

func deserializeCBOR_MetricsNameList(v smithycbor.Value) ([]types.MetricsName, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.MetricsName
	for _, si := range av {

		di, err := deserializeCBOR_MetricsName(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, di)
	}
	return dl, nil
}

func deserializeCBOR_RecordList(v smithycbor.Value) ([]types.Record, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.Record
	for _, si := range av {

		di, err := deserializeCBOR_Record(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_ExpiredNextTokenException(v smithycbor.Value) (*types.ExpiredNextTokenException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ExpiredNextTokenException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ConsumerStatus(v smithycbor.Value) (types.ConsumerStatus, error) {
	av, ok := v.(smithycbor.String)
	if !ok {
		return types.ConsumerStatus(""), fmt.Errorf("unexpected value type %T", v)
	}
	return types.ConsumerStatus(av), nil
}

func deserializeCBOR_GetRecordsOutput(v smithycbor.Value) (*GetRecordsOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &GetRecordsOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Records" {
			dv, err := deserializeCBOR_RecordList(sv)
			if err != nil {
				return nil, err
			}
			ds.Records = dv
		}

		if key == "NextShardIterator" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.NextShardIterator = ptr.String(dv)
		}

		if key == "MillisBehindLatest" {
			dv, err := deserializeCBOR_Int64(sv)
			if err != nil {
				return nil, err
			}
			ds.MillisBehindLatest = ptr.Int64(dv)
		}

		if key == "ChildShards" {
			dv, err := deserializeCBOR_ChildShardList(sv)
			if err != nil {
				return nil, err
			}
			ds.ChildShards = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_StreamModeDetails(v smithycbor.Value) (*types.StreamModeDetails, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.StreamModeDetails{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StreamMode" {
			dv, err := deserializeCBOR_StreamMode(sv)
			if err != nil {
				return nil, err
			}
			ds.StreamMode = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_EncryptionType(v smithycbor.Value) (types.EncryptionType, error) {
	av, ok := v.(smithycbor.String)
	if !ok {
		return types.EncryptionType(""), fmt.Errorf("unexpected value type %T", v)
	}
	return types.EncryptionType(av), nil
}

func deserializeCBOR_HashKeyRange(v smithycbor.Value) (*types.HashKeyRange, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.HashKeyRange{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "StartingHashKey" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.StartingHashKey = ptr.String(dv)
		}

		if key == "EndingHashKey" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.EndingHashKey = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_TagList(v smithycbor.Value) ([]types.Tag, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.Tag
	for _, si := range av {

		di, err := deserializeCBOR_Tag(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_PutRecordsResultEntry(v smithycbor.Value) (*types.PutRecordsResultEntry, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.PutRecordsResultEntry{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "SequenceNumber" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.SequenceNumber = ptr.String(dv)
		}

		if key == "ShardId" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ShardId = ptr.String(dv)
		}

		if key == "ErrorCode" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ErrorCode = ptr.String(dv)
		}

		if key == "ErrorMessage" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ErrorMessage = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_KMSInvalidStateException(v smithycbor.Value) (*types.KMSInvalidStateException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.KMSInvalidStateException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_SubscribeToShardEvent(v smithycbor.Value) (*types.SubscribeToShardEvent, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.SubscribeToShardEvent{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Records" {
			dv, err := deserializeCBOR_RecordList(sv)
			if err != nil {
				return nil, err
			}
			ds.Records = dv
		}

		if key == "ContinuationSequenceNumber" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ContinuationSequenceNumber = ptr.String(dv)
		}

		if key == "MillisBehindLatest" {
			dv, err := deserializeCBOR_Int64(sv)
			if err != nil {
				return nil, err
			}
			ds.MillisBehindLatest = ptr.Int64(dv)
		}

		if key == "ChildShards" {
			dv, err := deserializeCBOR_ChildShardList(sv)
			if err != nil {
				return nil, err
			}
			ds.ChildShards = dv
		}
	}
	return ds, nil
}

func deserializeCBOR_ExpiredIteratorException(v smithycbor.Value) (*types.ExpiredIteratorException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.ExpiredIteratorException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_Time(v smithycbor.Value) (time.Time, error) {
	return smithycbor.AsTime(v)
}

func deserializeCBOR_Tag(v smithycbor.Value) (*types.Tag, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.Tag{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "Key" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Key = ptr.String(dv)
		}

		if key == "Value" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Value = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_GetShardIteratorOutput(v smithycbor.Value) (*GetShardIteratorOutput, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &GetShardIteratorOutput{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ShardIterator" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ShardIterator = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_InternalFailureException(v smithycbor.Value) (*types.InternalFailureException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.InternalFailureException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_ChildShardList(v smithycbor.Value) ([]types.ChildShard, error) {
	av, ok := v.(smithycbor.List)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	var dl []types.ChildShard
	for _, si := range av {

		di, err := deserializeCBOR_ChildShard(si)
		if err != nil {
			return nil, err
		}
		dl = append(dl, *di)
	}
	return dl, nil
}

func deserializeCBOR_Consumer(v smithycbor.Value) (*types.Consumer, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.Consumer{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "ConsumerName" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerName = ptr.String(dv)
		}

		if key == "ConsumerARN" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerARN = ptr.String(dv)
		}

		if key == "ConsumerStatus" {
			dv, err := deserializeCBOR_ConsumerStatus(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerStatus = dv
		}

		if key == "ConsumerCreationTimestamp" {
			dv, err := deserializeCBOR_Time(sv)
			if err != nil {
				return nil, err
			}
			ds.ConsumerCreationTimestamp = ptr.Time(dv)
		}
	}
	return ds, nil
}

func deserializeCBOR_KMSThrottlingException(v smithycbor.Value) (*types.KMSThrottlingException, error) {
	av, ok := v.(smithycbor.Map)
	if !ok {
		return nil, fmt.Errorf("unexpected value type %T", v)
	}
	ds := &types.KMSThrottlingException{}
	for key, sv := range av {
		_, _ = key, sv
		if key == "message" {
			dv, err := deserializeCBOR_String(sv)
			if err != nil {
				return nil, err
			}
			ds.Message = ptr.String(dv)
		}
	}
	return ds, nil
}
func rpc2_deserializeOpErrorAddTagsToStream(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorCreateStream(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDecreaseStreamRetentionPeriod(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDeleteResourcePolicy(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDeleteStream(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDeregisterStreamConsumer(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDescribeLimits(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDescribeStream(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDescribeStreamConsumer(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDescribeStreamSummary(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorDisableEnhancedMonitoring(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorEnableEnhancedMonitoring(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorGetRecords(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ExpiredIteratorException":
		verr, err := deserializeCBOR_ExpiredIteratorException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ExpiredIteratorException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSAccessDeniedException":
		verr, err := deserializeCBOR_KMSAccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSAccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSDisabledException":
		verr, err := deserializeCBOR_KMSDisabledException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSDisabledException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSInvalidStateException":
		verr, err := deserializeCBOR_KMSInvalidStateException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSInvalidStateException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSNotFoundException":
		verr, err := deserializeCBOR_KMSNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSOptInRequired":
		verr, err := deserializeCBOR_KMSOptInRequired(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSOptInRequired: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSThrottlingException":
		verr, err := deserializeCBOR_KMSThrottlingException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSThrottlingException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
		verr, err := deserializeCBOR_ProvisionedThroughputExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ProvisionedThroughputExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorGetResourcePolicy(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorGetShardIterator(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
		verr, err := deserializeCBOR_ProvisionedThroughputExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ProvisionedThroughputExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorIncreaseStreamRetentionPeriod(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorListShards(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ExpiredNextTokenException":
		verr, err := deserializeCBOR_ExpiredNextTokenException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ExpiredNextTokenException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorListStreamConsumers(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#ExpiredNextTokenException":
		verr, err := deserializeCBOR_ExpiredNextTokenException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ExpiredNextTokenException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorListStreams(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#ExpiredNextTokenException":
		verr, err := deserializeCBOR_ExpiredNextTokenException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ExpiredNextTokenException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorListTagsForStream(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorMergeShards(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ValidationException":
		verr, err := deserializeCBOR_ValidationException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ValidationException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorPutRecord(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSAccessDeniedException":
		verr, err := deserializeCBOR_KMSAccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSAccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSDisabledException":
		verr, err := deserializeCBOR_KMSDisabledException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSDisabledException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSInvalidStateException":
		verr, err := deserializeCBOR_KMSInvalidStateException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSInvalidStateException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSNotFoundException":
		verr, err := deserializeCBOR_KMSNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSOptInRequired":
		verr, err := deserializeCBOR_KMSOptInRequired(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSOptInRequired: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSThrottlingException":
		verr, err := deserializeCBOR_KMSThrottlingException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSThrottlingException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
		verr, err := deserializeCBOR_ProvisionedThroughputExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ProvisionedThroughputExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorPutRecords(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSAccessDeniedException":
		verr, err := deserializeCBOR_KMSAccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSAccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSDisabledException":
		verr, err := deserializeCBOR_KMSDisabledException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSDisabledException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSInvalidStateException":
		verr, err := deserializeCBOR_KMSInvalidStateException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSInvalidStateException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSNotFoundException":
		verr, err := deserializeCBOR_KMSNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSOptInRequired":
		verr, err := deserializeCBOR_KMSOptInRequired(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSOptInRequired: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSThrottlingException":
		verr, err := deserializeCBOR_KMSThrottlingException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSThrottlingException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ProvisionedThroughputExceededException":
		verr, err := deserializeCBOR_ProvisionedThroughputExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ProvisionedThroughputExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorPutResourcePolicy(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorRegisterStreamConsumer(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorRemoveTagsFromStream(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorSplitShard(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ValidationException":
		verr, err := deserializeCBOR_ValidationException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ValidationException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorStartStreamEncryption(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSAccessDeniedException":
		verr, err := deserializeCBOR_KMSAccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSAccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSDisabledException":
		verr, err := deserializeCBOR_KMSDisabledException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSDisabledException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSInvalidStateException":
		verr, err := deserializeCBOR_KMSInvalidStateException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSInvalidStateException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSNotFoundException":
		verr, err := deserializeCBOR_KMSNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSOptInRequired":
		verr, err := deserializeCBOR_KMSOptInRequired(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSOptInRequired: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#KMSThrottlingException":
		verr, err := deserializeCBOR_KMSThrottlingException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#KMSThrottlingException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorStopStreamEncryption(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorSubscribeToShard(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorUpdateShardCount(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#AccessDeniedException":
		verr, err := deserializeCBOR_AccessDeniedException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#AccessDeniedException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ValidationException":
		verr, err := deserializeCBOR_ValidationException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ValidationException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}

func rpc2_deserializeOpErrorUpdateStreamMode(resp *smithyhttp.Response) error {
	payload, err := io.ReadAll(resp.Body)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("read response body: %w", err)}
	}

	typ, msg, v, err := getProtocolErrorInfo(payload)
	if err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("get error info: %w", err)}
	}

	if len(typ) == 0 {
		typ = "UnknownError"
	}
	if len(msg) == 0 {
		msg = "UnknownError"
	}

	_ = v
	switch string(typ) {
	case "com.amazonaws.kinesis#InvalidArgumentException":
		verr, err := deserializeCBOR_InvalidArgumentException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#InvalidArgumentException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#LimitExceededException":
		verr, err := deserializeCBOR_LimitExceededException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#LimitExceededException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceInUseException":
		verr, err := deserializeCBOR_ResourceInUseException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceInUseException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	case "com.amazonaws.kinesis#ResourceNotFoundException":
		verr, err := deserializeCBOR_ResourceNotFoundException(v)
		if err != nil {
			return &smithy.DeserializationError{
				Err:      fmt.Errorf("deserialize com.amazonaws.kinesis#ResourceNotFoundException: %w", err),
				Snapshot: payload,
			}
		}

		return verr
	default:

		return &smithy.GenericAPIError{Code: typ, Message: msg}
	}
}
func getProtocolErrorInfo(payload []byte) (typ, msg string, v smithycbor.Value, err error) {
	v, err = smithycbor.Decode(payload)
	if err != nil {
		return "", "", nil, fmt.Errorf("decode: %w", err)
	}

	mv, ok := v.(smithycbor.Map)
	if !ok {
		return "", "", nil, fmt.Errorf("unexpected payload type %T", v)
	}

	if ctyp, ok := mv["__type"]; ok {
		if ttyp, ok := ctyp.(smithycbor.String); ok {
			typ = string(ttyp)
		}
	}

	if cmsg, ok := mv["message"]; ok {
		if tmsg, ok := cmsg.(smithycbor.String); ok {
			msg = string(tmsg)
		}
	}

	return typ, msg, mv, nil
}
func getAwsQueryErrorCode(resp *smithyhttp.Response) string {
	header := resp.Header.Get("x-amzn-query-error")
	if header == "" {
		return ""
	}

	parts := strings.Split(header, ";")
	if len(parts) != 2 {
		return ""
	}

	return parts[0]
}
func smithyRpcv2cbor_deserializeEventMessageResponseSubscribeToShardOutput(msg *eventstream.Message) (interface{}, error) {
	cv, err := smithycbor.Decode(msg.Payload)
	if err != nil {
		return nil, err
	}

	return deserializeCBOR_SubscribeToShardOutput(cv)
}
func smithyRpcv2cbor_deserializeEventStreamSubscribeToShardEventStream(v *types.SubscribeToShardEventStream, msg *eventstream.Message) error {
	cv, err := smithycbor.Decode(msg.Payload)
	if err != nil {
		return err
	}

	typ := msg.Headers.Get(eventstreamapi.EventTypeHeader)
	if typ == nil {
		return fmt.Errorf("%s event header not present", eventstreamapi.EventTypeHeader)
	}

	switch {
	case strings.EqualFold(typ.String(), "SubscribeToShardEvent"):
		vv, err := deserializeCBOR_SubscribeToShardEvent(cv)
		if err != nil {
			return err
		}
		*v = &types.SubscribeToShardEventStreamMemberSubscribeToShardEvent{Value: *vv}
		return nil
	default:
		buffer := bytes.NewBuffer(nil)
		eventstream.NewEncoder().Encode(buffer, *msg)
		*v = &types.UnknownUnionMember{
			Tag:   typ.String(),
			Value: buffer.Bytes(),
		}
		return nil
	}
}
func smithyRpcv2cbor_deserializeEventStreamExceptionSubscribeToShardEventStream(msg *eventstream.Message) error {
	cv, err := smithycbor.Decode(msg.Payload)
	if err != nil {
		return err
	}

	typ := msg.Headers.Get(eventstreamapi.ExceptionTypeHeader)
	if typ == nil {
		return fmt.Errorf("%s event header not present", eventstreamapi.ExceptionTypeHeader)
	}

	switch {
	case strings.EqualFold(typ.String(), "ResourceNotFoundException"):
		verr, err := deserializeCBOR_ResourceNotFoundException(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "ResourceInUseException"):
		verr, err := deserializeCBOR_ResourceInUseException(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "KMSDisabledException"):
		verr, err := deserializeCBOR_KMSDisabledException(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "KMSInvalidStateException"):
		verr, err := deserializeCBOR_KMSInvalidStateException(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "KMSAccessDeniedException"):
		verr, err := deserializeCBOR_KMSAccessDeniedException(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "KMSNotFoundException"):
		verr, err := deserializeCBOR_KMSNotFoundException(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "KMSOptInRequired"):
		verr, err := deserializeCBOR_KMSOptInRequired(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "KMSThrottlingException"):
		verr, err := deserializeCBOR_KMSThrottlingException(cv)
		if err != nil {
			return err
		}
		return verr
	case strings.EqualFold(typ.String(), "InternalFailureException"):
		verr, err := deserializeCBOR_InternalFailureException(cv)
		if err != nil {
			return err
		}
		return verr
	default:
		code, msg, _, err := getProtocolErrorInfo(msg.Payload)
		if err != nil {
			return err
		}

		if len(code) == 0 {
			code = typ.String()
		}
		if len(code) == 0 {
			code = "UnknownError"
		}
		if len(msg) == 0 {
			msg = "UnknownError"
		}
		return &smithy.GenericAPIError{Code: code, Message: msg}
	}
}
