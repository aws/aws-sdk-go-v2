// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package shieldiface provides an interface to enable mocking the AWS Shield service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package shieldiface

import (
	"github.com/aws/aws-sdk-go-v2/service/shield"
	"github.com/aws/aws-sdk-go-v2/service/shield/types"
)

// ClientAPI provides an interface to enable mocking the
// shield.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // AWS Shield.
//    func myFunc(svc shieldiface.ClientAPI) bool {
//        // Make svc.AssociateDRTLogBucket request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := shield.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        shieldiface.ClientPI
//    }
//    func (m *mockClientClient) AssociateDRTLogBucket(input *types.AssociateDRTLogBucketInput) (*types.AssociateDRTLogBucketOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	AssociateDRTLogBucketRequest(*types.AssociateDRTLogBucketInput) shield.AssociateDRTLogBucketRequest

	AssociateDRTRoleRequest(*types.AssociateDRTRoleInput) shield.AssociateDRTRoleRequest

	CreateProtectionRequest(*types.CreateProtectionInput) shield.CreateProtectionRequest

	CreateSubscriptionRequest(*types.CreateSubscriptionInput) shield.CreateSubscriptionRequest

	DeleteProtectionRequest(*types.DeleteProtectionInput) shield.DeleteProtectionRequest

	DeleteSubscriptionRequest(*types.DeleteSubscriptionInput) shield.DeleteSubscriptionRequest

	DescribeAttackRequest(*types.DescribeAttackInput) shield.DescribeAttackRequest

	DescribeDRTAccessRequest(*types.DescribeDRTAccessInput) shield.DescribeDRTAccessRequest

	DescribeEmergencyContactSettingsRequest(*types.DescribeEmergencyContactSettingsInput) shield.DescribeEmergencyContactSettingsRequest

	DescribeProtectionRequest(*types.DescribeProtectionInput) shield.DescribeProtectionRequest

	DescribeSubscriptionRequest(*types.DescribeSubscriptionInput) shield.DescribeSubscriptionRequest

	DisassociateDRTLogBucketRequest(*types.DisassociateDRTLogBucketInput) shield.DisassociateDRTLogBucketRequest

	DisassociateDRTRoleRequest(*types.DisassociateDRTRoleInput) shield.DisassociateDRTRoleRequest

	GetSubscriptionStateRequest(*types.GetSubscriptionStateInput) shield.GetSubscriptionStateRequest

	ListAttacksRequest(*types.ListAttacksInput) shield.ListAttacksRequest

	ListProtectionsRequest(*types.ListProtectionsInput) shield.ListProtectionsRequest

	UpdateEmergencyContactSettingsRequest(*types.UpdateEmergencyContactSettingsInput) shield.UpdateEmergencyContactSettingsRequest

	UpdateSubscriptionRequest(*types.UpdateSubscriptionInput) shield.UpdateSubscriptionRequest
}

var _ ClientAPI = (*shield.Client)(nil)
