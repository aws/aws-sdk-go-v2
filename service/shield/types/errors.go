// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// Exception that indicates the specified AttackId does not exist, or the requester
// does not have the appropriate permissions to access the AttackId.
type AccessDeniedException struct {
	Message *string
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// In order to grant the necessary access to the DDoS Response Team (DRT), the user
// submitting the request must have the iam:PassRole permission. This error
// indicates the user did not have the appropriate permissions. For more
// information, see Granting a User Permissions to Pass a Role to an AWS Service
// (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_passrole.html).
type AccessDeniedForDependencyException struct {
	Message *string
}

func (e *AccessDeniedForDependencyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedForDependencyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedForDependencyException) ErrorCode() string {
	return "AccessDeniedForDependencyException"
}
func (e *AccessDeniedForDependencyException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *AccessDeniedForDependencyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedForDependencyException) HasMessage() bool {
	return e.Message != nil
}

// Exception that indicates that a problem occurred with the service
// infrastructure. You can retry the request.
type InternalErrorException struct {
	Message *string
}

func (e *InternalErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalErrorException) ErrorCode() string             { return "InternalErrorException" }
func (e *InternalErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalErrorException) HasMessage() bool {
	return e.Message != nil
}

// Exception that indicates that the operation would not cause any change to occur.
type InvalidOperationException struct {
	Message *string
}

func (e *InvalidOperationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidOperationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidOperationException) ErrorCode() string             { return "InvalidOperationException" }
func (e *InvalidOperationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidOperationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidOperationException) HasMessage() bool {
	return e.Message != nil
}

// Exception that indicates that the NextToken specified in the request is invalid.
// Submit the request using the NextToken value that was returned in the response.
type InvalidPaginationTokenException struct {
	Message *string
}

func (e *InvalidPaginationTokenException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidPaginationTokenException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidPaginationTokenException) ErrorCode() string {
	return "InvalidPaginationTokenException"
}
func (e *InvalidPaginationTokenException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidPaginationTokenException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidPaginationTokenException) HasMessage() bool {
	return e.Message != nil
}

// Exception that indicates that the parameters passed to the API are invalid.
type InvalidParameterException struct {
	Message *string
}

func (e *InvalidParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterException) ErrorCode() string             { return "InvalidParameterException" }
func (e *InvalidParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidParameterException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidParameterException) HasMessage() bool {
	return e.Message != nil
}

// Exception that indicates that the resource is invalid. You might not have access
// to the resource, or the resource might not exist.
type InvalidResourceException struct {
	Message *string
}

func (e *InvalidResourceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidResourceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidResourceException) ErrorCode() string             { return "InvalidResourceException" }
func (e *InvalidResourceException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidResourceException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidResourceException) HasMessage() bool {
	return e.Message != nil
}

// Exception that indicates that the operation would exceed a limit. Type is the
// type of limit that would be exceeded. Limit is the threshold that would be
// exceeded.
type LimitsExceededException struct {
	Message *string

	Limit *int64
	Type  *string
}

func (e *LimitsExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitsExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitsExceededException) ErrorCode() string             { return "LimitsExceededException" }
func (e *LimitsExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LimitsExceededException) GetLimit() int64 {
	return ptr.ToInt64(e.Limit)
}
func (e *LimitsExceededException) HasLimit() bool {
	return e.Limit != nil
}
func (e *LimitsExceededException) GetType() string {
	return ptr.ToString(e.Type)
}
func (e *LimitsExceededException) HasType() bool {
	return e.Type != nil
}
func (e *LimitsExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LimitsExceededException) HasMessage() bool {
	return e.Message != nil
}

// You are trying to update a subscription that has not yet completed the 1-year
// commitment. You can change the AutoRenew parameter during the last 30 days of
// your subscription. This exception indicates that you are attempting to change
// AutoRenew prior to that period.
type LockedSubscriptionException struct {
	Message *string
}

func (e *LockedSubscriptionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LockedSubscriptionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LockedSubscriptionException) ErrorCode() string             { return "LockedSubscriptionException" }
func (e *LockedSubscriptionException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LockedSubscriptionException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LockedSubscriptionException) HasMessage() bool {
	return e.Message != nil
}

// The ARN of the role that you specifed does not exist.
type NoAssociatedRoleException struct {
	Message *string
}

func (e *NoAssociatedRoleException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NoAssociatedRoleException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NoAssociatedRoleException) ErrorCode() string             { return "NoAssociatedRoleException" }
func (e *NoAssociatedRoleException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NoAssociatedRoleException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NoAssociatedRoleException) HasMessage() bool {
	return e.Message != nil
}

// Exception that indicates that the resource state has been modified by another
// client. Retrieve the resource and then retry your request.
type OptimisticLockException struct {
	Message *string
}

func (e *OptimisticLockException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OptimisticLockException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OptimisticLockException) ErrorCode() string             { return "OptimisticLockException" }
func (e *OptimisticLockException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OptimisticLockException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OptimisticLockException) HasMessage() bool {
	return e.Message != nil
}

// Exception indicating the specified resource already exists.
type ResourceAlreadyExistsException struct {
	Message *string
}

func (e *ResourceAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceAlreadyExistsException) ErrorCode() string             { return "ResourceAlreadyExistsException" }
func (e *ResourceAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// Exception indicating the specified resource does not exist.
type ResourceNotFoundException struct {
	Message *string
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundException) HasMessage() bool {
	return e.Message != nil
}
