// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type DatasourcePackage string

// Enum values for DatasourcePackage
const (
	DatasourcePackageDetectiveCore          DatasourcePackage = "DETECTIVE_CORE"
	DatasourcePackageEksAudit               DatasourcePackage = "EKS_AUDIT"
	DatasourcePackageAsffSecurityhubFinding DatasourcePackage = "ASFF_SECURITYHUB_FINDING"
)

// Values returns all known values for DatasourcePackage. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DatasourcePackage) Values() []DatasourcePackage {
	return []DatasourcePackage{
		"DETECTIVE_CORE",
		"EKS_AUDIT",
		"ASFF_SECURITYHUB_FINDING",
	}
}

type DatasourcePackageIngestState string

// Enum values for DatasourcePackageIngestState
const (
	DatasourcePackageIngestStateStarted  DatasourcePackageIngestState = "STARTED"
	DatasourcePackageIngestStateStopped  DatasourcePackageIngestState = "STOPPED"
	DatasourcePackageIngestStateDisabled DatasourcePackageIngestState = "DISABLED"
)

// Values returns all known values for DatasourcePackageIngestState. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (DatasourcePackageIngestState) Values() []DatasourcePackageIngestState {
	return []DatasourcePackageIngestState{
		"STARTED",
		"STOPPED",
		"DISABLED",
	}
}

type ErrorCode string

// Enum values for ErrorCode
const (
	ErrorCodeInvalidGraphArn    ErrorCode = "INVALID_GRAPH_ARN"
	ErrorCodeInvalidRequestBody ErrorCode = "INVALID_REQUEST_BODY"
	ErrorCodeInternalError      ErrorCode = "INTERNAL_ERROR"
)

// Values returns all known values for ErrorCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ErrorCode) Values() []ErrorCode {
	return []ErrorCode{
		"INVALID_GRAPH_ARN",
		"INVALID_REQUEST_BODY",
		"INTERNAL_ERROR",
	}
}

type InvitationType string

// Enum values for InvitationType
const (
	InvitationTypeInvitation   InvitationType = "INVITATION"
	InvitationTypeOrganization InvitationType = "ORGANIZATION"
)

// Values returns all known values for InvitationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InvitationType) Values() []InvitationType {
	return []InvitationType{
		"INVITATION",
		"ORGANIZATION",
	}
}

type MemberDisabledReason string

// Enum values for MemberDisabledReason
const (
	MemberDisabledReasonVolumeTooHigh MemberDisabledReason = "VOLUME_TOO_HIGH"
	MemberDisabledReasonVolumeUnknown MemberDisabledReason = "VOLUME_UNKNOWN"
)

// Values returns all known values for MemberDisabledReason. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (MemberDisabledReason) Values() []MemberDisabledReason {
	return []MemberDisabledReason{
		"VOLUME_TOO_HIGH",
		"VOLUME_UNKNOWN",
	}
}

type MemberStatus string

// Enum values for MemberStatus
const (
	MemberStatusInvited                MemberStatus = "INVITED"
	MemberStatusVerificationInProgress MemberStatus = "VERIFICATION_IN_PROGRESS"
	MemberStatusVerificationFailed     MemberStatus = "VERIFICATION_FAILED"
	MemberStatusEnabled                MemberStatus = "ENABLED"
	MemberStatusAcceptedButDisabled    MemberStatus = "ACCEPTED_BUT_DISABLED"
)

// Values returns all known values for MemberStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (MemberStatus) Values() []MemberStatus {
	return []MemberStatus{
		"INVITED",
		"VERIFICATION_IN_PROGRESS",
		"VERIFICATION_FAILED",
		"ENABLED",
		"ACCEPTED_BUT_DISABLED",
	}
}
