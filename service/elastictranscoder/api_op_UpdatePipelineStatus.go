// Code generated by smithy-go-codegen DO NOT EDIT.

package elastictranscoder

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	awsid "github.com/aws/aws-sdk-go-v2/aws/middleware/id"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyid "github.com/awslabs/smithy-go/middleware/id"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// The UpdatePipelineStatus operation pauses or reactivates a pipeline, so that the
// pipeline stops or restarts the processing of jobs. Changing the pipeline status
// is useful if you want to cancel one or more jobs. You can't cancel jobs after
// Elastic Transcoder has started processing them; if you pause the pipeline to
// which you submitted the jobs, you have more time to get the job IDs for the jobs
// that you want to cancel, and to send a CancelJob request.
func (c *Client) UpdatePipelineStatus(ctx context.Context, params *UpdatePipelineStatusInput, optFns ...func(*Options)) (*UpdatePipelineStatusOutput, error) {
	if params == nil {
		params = &UpdatePipelineStatusInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdatePipelineStatus", params, optFns, addOperationUpdatePipelineStatusMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdatePipelineStatusOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The UpdatePipelineStatusRequest structure.
type UpdatePipelineStatusInput struct {

	// The identifier of the pipeline to update.
	//
	// This member is required.
	Id *string

	// The desired status of the pipeline:
	//
	//     * Active: The pipeline is processing
	// jobs.
	//
	//     * Paused: The pipeline is not currently processing jobs.
	//
	// This member is required.
	Status *string
}

// When you update status for a pipeline, Elastic Transcoder returns the values
// that you specified in the request.
type UpdatePipelineStatusOutput struct {

	// A section of the response body that provides information about the pipeline.
	Pipeline *types.Pipeline

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationUpdatePipelineStatusStackSlots(stack *middleware.Stack) error {
	if err := stack.Initialize.AddSlot(middleware.After,
		smithyid.OperationIdempotencyTokenAutoFill,
		smithyid.OperationInputValidation,
	); err != nil {
		return err
	}
	if err := stack.Initialize.AddSlot(middleware.Before,
		awsid.RegisterServiceMetadata,
		awsid.Presigning,
	); err != nil {
		return err
	}
	if err := stack.Serialize.AddSlot(middleware.After,
		smithyid.OperationSerializer,
	); err != nil {
		return err
	}
	if err := stack.Serialize.InsertSlot(smithyid.OperationSerializer, middleware.Before,
		awsid.ResolveEndpoint,
	); err != nil {
		return err
	}
	if err := stack.Build.AddSlot(middleware.After,
		smithyid.ContentChecksum,
		smithyid.ComputeContentLength,
		smithyid.ValidateContentLength,
	); err != nil {
		return err
	}
	if err := stack.Build.AddSlot(middleware.After,
		awsid.ClientRequestID,
		awsid.ComputePayloadHash,
		awsid.UserAgent,
	); err != nil {
		return err
	}
	if err := stack.Finalize.AddSlot(middleware.After,
		awsid.Retry,
		awsid.Signing,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.AddSlot(middleware.After,
		smithyid.ErrorCloseResponseBody,
		smithyid.CloseResponseBody,
		smithyid.OperationDeserializer,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.AddSlot(middleware.Before,
		awsid.ResponseErrorWrapper,
		awsid.RequestIDRetriever,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.InsertSlot(smithyid.OperationDeserializer, middleware.After,
		awsid.ResponseReadTimeout,
	); err != nil {
		return err
	}
	return nil
}
func addOperationUpdatePipelineStatusMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := addOperationUpdatePipelineStatusStackSlots(stack); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpUpdatePipelineStatus{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdatePipelineStatus{}, middleware.After)
	if err != nil {
		return err
	}
	if err := awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err := smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err := addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err := v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err := addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err := addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err := awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err := addClientUserAgent(stack); err != nil {
		return err
	}
	if err := smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err := smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err := addOpUpdatePipelineStatusValidationMiddleware(stack); err != nil {
		return err
	}
	if err := stack.Initialize.Add(newServiceMetadataMiddleware_opUpdatePipelineStatus(options.Region), middleware.Before); err != nil {
		return err
	}
	if err := addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err := addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opUpdatePipelineStatus(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elastictranscoder",
		OperationName: "UpdatePipelineStatus",
	}
}
