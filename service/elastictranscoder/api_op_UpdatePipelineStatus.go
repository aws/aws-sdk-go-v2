// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elastictranscoder

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder/types"
)

const opUpdatePipelineStatus = "UpdatePipelineStatus"

// UpdatePipelineStatusRequest returns a request value for making API operation for
// Amazon Elastic Transcoder.
//
// The UpdatePipelineStatus operation pauses or reactivates a pipeline, so that
// the pipeline stops or restarts the processing of jobs.
//
// Changing the pipeline status is useful if you want to cancel one or more
// jobs. You can't cancel jobs after Elastic Transcoder has started processing
// them; if you pause the pipeline to which you submitted the jobs, you have
// more time to get the job IDs for the jobs that you want to cancel, and to
// send a CancelJob request.
//
//    // Example sending a request using UpdatePipelineStatusRequest.
//    req := client.UpdatePipelineStatusRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) UpdatePipelineStatusRequest(input *types.UpdatePipelineStatusInput) UpdatePipelineStatusRequest {
	op := &aws.Operation{
		Name:       opUpdatePipelineStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/2012-09-25/pipelines/{Id}/status",
	}

	if input == nil {
		input = &types.UpdatePipelineStatusInput{}
	}

	req := c.newRequest(op, input, &types.UpdatePipelineStatusOutput{})
	return UpdatePipelineStatusRequest{Request: req, Input: input, Copy: c.UpdatePipelineStatusRequest}
}

// UpdatePipelineStatusRequest is the request type for the
// UpdatePipelineStatus API operation.
type UpdatePipelineStatusRequest struct {
	*aws.Request
	Input *types.UpdatePipelineStatusInput
	Copy  func(*types.UpdatePipelineStatusInput) UpdatePipelineStatusRequest
}

// Send marshals and sends the UpdatePipelineStatus API request.
func (r UpdatePipelineStatusRequest) Send(ctx context.Context) (*UpdatePipelineStatusResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdatePipelineStatusResponse{
		UpdatePipelineStatusOutput: r.Request.Data.(*types.UpdatePipelineStatusOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdatePipelineStatusResponse is the response type for the
// UpdatePipelineStatus API operation.
type UpdatePipelineStatusResponse struct {
	*types.UpdatePipelineStatusOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdatePipelineStatus request.
func (r *UpdatePipelineStatusResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
