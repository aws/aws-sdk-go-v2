// Code generated by smithy-go-codegen DO NOT EDIT.

package elastictranscoder

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// With the UpdatePipelineNotifications operation, you can update Amazon Simple
// Notification Service (Amazon SNS) notifications for a pipeline. When you update
// notifications for a pipeline, Elastic Transcoder returns the values that you
// specified in the request.
func (c *Client) UpdatePipelineNotifications(ctx context.Context, params *UpdatePipelineNotificationsInput, optFns ...func(*Options)) (*UpdatePipelineNotificationsOutput, error) {
	stack := middleware.NewStack("UpdatePipelineNotifications", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpUpdatePipelineNotificationsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdatePipelineNotificationsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdatePipelineNotifications(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdatePipelineNotifications",
			Err:           err,
		}
	}
	out := result.(*UpdatePipelineNotificationsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The UpdatePipelineNotificationsRequest structure.
type UpdatePipelineNotificationsInput struct {
	// The identifier of the pipeline for which you want to change notification
	// settings.
	Id *string
	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that
	// you want to notify to report job status. To receive notifications, you must also
	// subscribe to the new topic in the Amazon SNS console.
	//
	//     * Progressing: The
	// topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you
	// want to notify when Elastic Transcoder has started to process jobs that are
	// added to this pipeline. This is the ARN that Amazon SNS returned when you
	// created the topic.
	//
	//     * Complete: The topic ARN for the Amazon SNS topic that
	// you want to notify when Elastic Transcoder has finished processing a job. This
	// is the ARN that Amazon SNS returned when you created the topic.
	//
	//     * Warning:
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic
	// Transcoder encounters a warning condition. This is the ARN that Amazon SNS
	// returned when you created the topic.
	//
	//     * Error: The topic ARN for the Amazon
	// SNS topic that you want to notify when Elastic Transcoder encounters an error
	// condition. This is the ARN that Amazon SNS returned when you created the topic.
	Notifications *types.Notifications
}

// The UpdatePipelineNotificationsResponse structure.
type UpdatePipelineNotificationsOutput struct {
	// A section of the response body that provides information about the pipeline
	// associated with this notification.
	Pipeline *types.Pipeline

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpUpdatePipelineNotificationsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpUpdatePipelineNotifications{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdatePipelineNotifications{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdatePipelineNotifications(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elastictranscoder",
		OperationName: "UpdatePipelineNotifications",
	}
}
