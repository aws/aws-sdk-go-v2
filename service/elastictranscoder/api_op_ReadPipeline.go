// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elastictranscoder

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder/types"
)

const opReadPipeline = "ReadPipeline"

// ReadPipelineRequest returns a request value for making API operation for
// Amazon Elastic Transcoder.
//
// The ReadPipeline operation gets detailed information about a pipeline.
//
//    // Example sending a request using ReadPipelineRequest.
//    req := client.ReadPipelineRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) ReadPipelineRequest(input *types.ReadPipelineInput) ReadPipelineRequest {
	op := &aws.Operation{
		Name:       opReadPipeline,
		HTTPMethod: "GET",
		HTTPPath:   "/2012-09-25/pipelines/{Id}",
	}

	if input == nil {
		input = &types.ReadPipelineInput{}
	}

	req := c.newRequest(op, input, &types.ReadPipelineOutput{})
	return ReadPipelineRequest{Request: req, Input: input, Copy: c.ReadPipelineRequest}
}

// ReadPipelineRequest is the request type for the
// ReadPipeline API operation.
type ReadPipelineRequest struct {
	*aws.Request
	Input *types.ReadPipelineInput
	Copy  func(*types.ReadPipelineInput) ReadPipelineRequest
}

// Send marshals and sends the ReadPipeline API request.
func (r ReadPipelineRequest) Send(ctx context.Context) (*ReadPipelineResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ReadPipelineResponse{
		ReadPipelineOutput: r.Request.Data.(*types.ReadPipelineOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ReadPipelineResponse is the response type for the
// ReadPipeline API operation.
type ReadPipelineResponse struct {
	*types.ReadPipelineOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ReadPipeline request.
func (r *ReadPipelineResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
