// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elastictranscoder

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder/types"
)

const opListJobsByStatus = "ListJobsByStatus"

// ListJobsByStatusRequest returns a request value for making API operation for
// Amazon Elastic Transcoder.
//
// The ListJobsByStatus operation gets a list of jobs that have a specified
// status. The response body contains one element for each job that satisfies
// the search criteria.
//
//    // Example sending a request using ListJobsByStatusRequest.
//    req := client.ListJobsByStatusRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) ListJobsByStatusRequest(input *types.ListJobsByStatusInput) ListJobsByStatusRequest {
	op := &aws.Operation{
		Name:       opListJobsByStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/2012-09-25/jobsByStatus/{Status}",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"PageToken"},
			OutputTokens:    []string{"NextPageToken"},
			LimitToken:      "",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListJobsByStatusInput{}
	}

	req := c.newRequest(op, input, &types.ListJobsByStatusOutput{})
	return ListJobsByStatusRequest{Request: req, Input: input, Copy: c.ListJobsByStatusRequest}
}

// ListJobsByStatusRequest is the request type for the
// ListJobsByStatus API operation.
type ListJobsByStatusRequest struct {
	*aws.Request
	Input *types.ListJobsByStatusInput
	Copy  func(*types.ListJobsByStatusInput) ListJobsByStatusRequest
}

// Send marshals and sends the ListJobsByStatus API request.
func (r ListJobsByStatusRequest) Send(ctx context.Context) (*ListJobsByStatusResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListJobsByStatusResponse{
		ListJobsByStatusOutput: r.Request.Data.(*types.ListJobsByStatusOutput),
		response:               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListJobsByStatusRequestPaginator returns a paginator for ListJobsByStatus.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListJobsByStatusRequest(input)
//   p := elastictranscoder.NewListJobsByStatusRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListJobsByStatusPaginator(req ListJobsByStatusRequest) ListJobsByStatusPaginator {
	return ListJobsByStatusPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListJobsByStatusInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListJobsByStatusPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListJobsByStatusPaginator struct {
	aws.Pager
}

func (p *ListJobsByStatusPaginator) CurrentPage() *types.ListJobsByStatusOutput {
	return p.Pager.CurrentPage().(*types.ListJobsByStatusOutput)
}

// ListJobsByStatusResponse is the response type for the
// ListJobsByStatus API operation.
type ListJobsByStatusResponse struct {
	*types.ListJobsByStatusOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListJobsByStatus request.
func (r *ListJobsByStatusResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
