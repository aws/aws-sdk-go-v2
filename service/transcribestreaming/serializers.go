// Code generated by smithy-go-codegen DO NOT EDIT.

package transcribestreaming

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/transcribestreaming/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/httpbinding"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

type awsRestjson1_serializeOpStartStreamTranscription struct {
}

func (*awsRestjson1_serializeOpStartStreamTranscription) ID() string {
	return "OperationSerializer"
}

func (m *awsRestjson1_serializeOpStartStreamTranscription) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}

	input, ok := in.Parameters.(*StartStreamTranscriptionInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}

	opPath, opQuery := httpbinding.SplitURI("/stream-transcription")
	request.URL.Path = opPath
	if len(request.URL.RawQuery) > 0 {
		request.URL.RawQuery = "&" + opQuery
	} else {
		request.URL.RawQuery = opQuery
	}

	request.Method = "POST"
	restEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}

	if err := awsRestjson1_serializeHttpBindingsStartStreamTranscriptionInput(input, restEncoder); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}

	if input.AudioStream != nil {
		if !restEncoder.HasHeader("Content-Type") {
			restEncoder.SetHeader("Content-Type").String("application/json")
		}

		payload := input.AudioStream
		if request, err = request.SetStream(payload); err != nil {
			return out, metadata, &smithy.SerializationError{Err: err}
		}
	}

	if request.Request, err = restEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request

	return next.HandleSerialize(ctx, in)
}
func awsRestjson1_serializeHttpBindingsStartStreamTranscriptionInput(v *StartStreamTranscriptionInput, encoder *httpbinding.Encoder) error {
	if v == nil {
		return fmt.Errorf("unsupported serialization of nil %T", v)
	}

	if len(v.LanguageCode) > 0 {
		locationName := "x-amzn-transcribe-language-code"
		encoder.SetHeader(locationName).String(string(v.LanguageCode))
	}

	if len(v.MediaEncoding) > 0 {
		locationName := "x-amzn-transcribe-media-encoding"
		encoder.SetHeader(locationName).String(string(v.MediaEncoding))
	}

	if v.MediaSampleRateHertz != nil {
		locationName := "x-amzn-transcribe-sample-rate"
		encoder.SetHeader(locationName).Integer(*v.MediaSampleRateHertz)
	}

	if v.SessionId != nil {
		locationName := "x-amzn-transcribe-session-id"
		if len(*v.SessionId) > 0 {
			encoder.SetHeader(locationName).String(*v.SessionId)
		}
	}

	if len(v.VocabularyFilterMethod) > 0 {
		locationName := "x-amzn-transcribe-vocabulary-filter-method"
		encoder.SetHeader(locationName).String(string(v.VocabularyFilterMethod))
	}

	if v.VocabularyFilterName != nil {
		locationName := "x-amzn-transcribe-vocabulary-filter-name"
		if len(*v.VocabularyFilterName) > 0 {
			encoder.SetHeader(locationName).String(*v.VocabularyFilterName)
		}
	}

	if v.VocabularyName != nil {
		locationName := "x-amzn-transcribe-vocabulary-name"
		if len(*v.VocabularyName) > 0 {
			encoder.SetHeader(locationName).String(*v.VocabularyName)
		}
	}

	return nil
}

func awsRestjson1_serializeDocumentAudioEvent(v *types.AudioEvent, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()

	if v.AudioChunk != nil {
		ok := object.Key("AudioChunk")
		ok.Base64EncodeBytes(v.AudioChunk)
	}

	return nil
}

func awsRestjson1_serializeDocumentAudioStream(v types.AudioStream, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()

	switch uv := v.(type) {
	case *types.AudioStreamMemberAudioEvent:
		av := object.Key("AudioEvent")
		if err := awsRestjson1_serializeDocumentAudioEvent(uv.Value, av); err != nil {
			return err
		}

	default:
		return fmt.Errorf("attempted to serialize unknown member type %T for union %T", uv, v)

	}
	return nil
}
