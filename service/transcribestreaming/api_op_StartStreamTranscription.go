// Code generated by smithy-go-codegen DO NOT EDIT.

package transcribestreaming

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/transcribestreaming/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Starts a bidirectional HTTP2 stream where audio is streamed to Amazon Transcribe
// and the transcription results are streamed to your application. The following
// are encoded as HTTP2 headers:
//
//     * x-amzn-transcribe-language-code
//
//     *
// x-amzn-transcribe-media-encoding
//
//     * x-amzn-transcribe-sample-rate
//
//     *
// x-amzn-transcribe-session-id
func (c *Client) StartStreamTranscription(ctx context.Context, params *StartStreamTranscriptionInput, optFns ...func(*Options)) (*StartStreamTranscriptionOutput, error) {
	if params == nil {
		params = &StartStreamTranscriptionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "StartStreamTranscription", params, optFns, addOperationStartStreamTranscriptionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*StartStreamTranscriptionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartStreamTranscriptionInput struct {

	// PCM-encoded stream of audio blobs. The audio stream is encoded as an HTTP2 data
	// frame.
	//
	// This member is required.
	AudioStream types.AudioStream

	// Indicates the source language used in the input audio stream.
	//
	// This member is required.
	LanguageCode types.LanguageCode

	// The encoding used for the input audio. pcm is the only valid value.
	//
	// This member is required.
	MediaEncoding types.MediaEncoding

	// The sample rate, in Hertz, of the input audio. We suggest that you use 8000 Hz
	// for low quality audio and 16000 Hz for high quality audio.
	//
	// This member is required.
	MediaSampleRateHertz *int32

	// When true, instructs Amazon Transcribe to process each audio channel separately
	// and then merge the transcription output of each channel into a single
	// transcription. Amazon Transcribe also produces a transcription of each item. An
	// item includes the start time, end time, and any alternative transcriptions. You
	// can't set both ShowSpeakerLabel and EnableChannelIdentification in the same
	// request. If you set both, your request returns a BadRequestException.
	EnableChannelIdentification *bool

	// The number of channels that are in your audio stream.
	NumberOfChannels *int32

	// A identifier for the transcription session. Use this parameter when you want to
	// retry a session. If you don't provide a session ID, Amazon Transcribe will
	// generate one for you and return it in the response.
	SessionId *string

	// When true, enables speaker identification in your real-time stream.
	ShowSpeakerLabel *bool

	// The manner in which you use your vocabulary filter to filter words in your
	// transcript. Remove removes filtered words from your transcription results. Mask
	// masks those words with a *** in your transcription results. Tag keeps the
	// filtered words in your transcription results and tags them. The tag appears as
	// VocabularyFilterMatch equal to True
	VocabularyFilterMethod types.VocabularyFilterMethod

	// The name of the vocabulary filter you've created that is unique to your AWS
	// account. Provide the name in this field to successfully use it in a stream.
	VocabularyFilterName *string

	// The name of the vocabulary to use when processing the transcription job.
	VocabularyName *string
}

type StartStreamTranscriptionOutput struct {

	// Shows whether channel identification has been enabled in the stream.
	EnableChannelIdentification *bool

	// The language code for the input audio stream.
	LanguageCode types.LanguageCode

	// The encoding used for the input audio stream.
	MediaEncoding types.MediaEncoding

	// The sample rate for the input audio stream. Use 8000 Hz for low quality audio
	// and 16000 Hz for high quality audio.
	MediaSampleRateHertz *int32

	// The number of channels identified in the stream.
	NumberOfChannels *int32

	// An identifier for the streaming transcription.
	RequestId *string

	// An identifier for a specific transcription session.
	SessionId *string

	// Shows whether speaker identification was enabled in the stream.
	ShowSpeakerLabel *bool

	// Represents the stream of transcription events from Amazon Transcribe to your
	// application.
	TranscriptResultStream types.TranscriptResultStream

	// The vocabulary filtering method used in the real-time stream.
	VocabularyFilterMethod types.VocabularyFilterMethod

	// The name of the vocabulary filter used in your real-time stream.
	VocabularyFilterName *string

	// The name of the vocabulary used when processing the stream.
	VocabularyName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationStartStreamTranscriptionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpStartStreamTranscription{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpStartStreamTranscription{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	addOpStartStreamTranscriptionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartStreamTranscription(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opStartStreamTranscription(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transcribe",
		OperationName: "StartStreamTranscription",
	}
}
