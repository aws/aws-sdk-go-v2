// Code generated by smithy-go-codegen DO NOT EDIT.

package transcribestreaming

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/transcribestreaming/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Starts a bidirectional HTTP2 stream where audio is streamed to Amazon Transcribe
// and the transcription results are streamed to your application. The following
// are encoded as HTTP2 headers:
//
//     * x-amzn-transcribe-language-code
//
//     *
// x-amzn-transcribe-media-encoding
//
//     * x-amzn-transcribe-sample-rate
//
//     *
// x-amzn-transcribe-session-id
func (c *Client) StartStreamTranscription(ctx context.Context, params *StartStreamTranscriptionInput, optFns ...func(*Options)) (*StartStreamTranscriptionOutput, error) {
	stack := middleware.NewStack("StartStreamTranscription", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpStartStreamTranscriptionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	addOpStartStreamTranscriptionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartStreamTranscription(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartStreamTranscription",
			Err:           err,
		}
	}
	out := result.(*StartStreamTranscriptionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartStreamTranscriptionInput struct {
	// The name of the vocabulary filter you've created that is unique to your AWS
	// accountf. Provide the name in this field to successfully use it in a stream.
	VocabularyFilterName *string
	// The encoding used for the input audio.
	MediaEncoding types.MediaEncoding
	// Indicates the source language used in the input audio stream.
	LanguageCode types.LanguageCode
	// PCM-encoded stream of audio blobs. The audio stream is encoded as an HTTP2 data
	// frame.
	AudioStream types.AudioStream
	// A identifier for the transcription session. Use this parameter when you want to
	// retry a session. If you don't provide a session ID, Amazon Transcribe will
	// generate one for you and return it in the response.
	SessionId *string
	// The name of the vocabulary to use when processing the transcription job.
	VocabularyName *string
	// The manner in which you use your vocabulary filter to filter words in your
	// transcript. Remove removes filtered words from your transcription results. Mask
	// masks those words with a *** in your transcription results. Tag keeps the
	// filtered words in your transcription results and tags them. The tag appears as
	// VocabularyFilterMatch equal to True
	VocabularyFilterMethod types.VocabularyFilterMethod
	// The sample rate, in Hertz, of the input audio. We suggest that you use 8000 Hz
	// for low quality audio and 16000 Hz for high quality audio.
	MediaSampleRateHertz *int32
}

type StartStreamTranscriptionOutput struct {
	// The name of the vocabulary filter used in your real-time stream.
	VocabularyFilterName *string
	// The encoding used for the input audio stream.
	MediaEncoding types.MediaEncoding
	// The name of the vocabulary used when processing the stream.
	VocabularyName *string
	// The vocabulary filtering method used in the real-time stream.
	VocabularyFilterMethod types.VocabularyFilterMethod
	// The language code for the input audio stream.
	LanguageCode types.LanguageCode
	// An identifier for the streaming transcription.
	RequestId *string
	// The sample rate for the input audio stream. Use 8000 Hz for low quality audio
	// and 16000 Hz for high quality audio.
	MediaSampleRateHertz *int32
	// An identifier for a specific transcription session.
	SessionId *string
	// Represents the stream of transcription events from Amazon Transcribe to your
	// application.
	TranscriptResultStream types.TranscriptResultStream

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpStartStreamTranscriptionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpStartStreamTranscription{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpStartStreamTranscription{}, middleware.After)
}

func newServiceMetadataMiddleware_opStartStreamTranscription(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transcribe",
		OperationName: "StartStreamTranscription",
	}
}
