// Code generated by smithy-go-codegen DO NOT EDIT.

package configservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a list of one or more conformance packs.
func (c *Client) DescribeConformancePacks(ctx context.Context, params *DescribeConformancePacksInput, optFns ...func(*Options)) (*DescribeConformancePacksOutput, error) {
	if params == nil {
		params = &DescribeConformancePacksInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeConformancePacks", params, optFns, addOperationDescribeConformancePacksMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeConformancePacksOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeConformancePacksInput struct {

	// Comma-separated list of conformance pack names for which you want details. If
	// you do not specify any names, AWS Config returns details for all your
	// conformance packs.
	ConformancePackNames []*string

	// The maximum number of conformance packs returned on each page.
	Limit *int32

	// The nextToken string returned in a previous request that you use to request the
	// next page of results in a paginated response.
	NextToken *string
}

type DescribeConformancePacksOutput struct {

	// Returns a list of ConformancePackDetail objects.
	ConformancePackDetails []*types.ConformancePackDetail

	// The nextToken string returned in a previous request that you use to request the
	// next page of results in a paginated response.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribeConformancePacksMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeConformancePacks{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeConformancePacks{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeConformancePacks(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDescribeConformancePacks(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "config",
		OperationName: "DescribeConformancePacks",
	}
}
