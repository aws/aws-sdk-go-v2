// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

type PutOrganizationConformancePackInput struct {
	_ struct{} `type:"structure"`

	// A list of ConformancePackInputParameter objects.
	ConformancePackInputParameters []ConformancePackInputParameter `type:"list"`

	// Location of an Amazon S3 bucket where AWS Config can deliver evaluation results.
	// AWS Config stores intermediate files while processing conformance pack template.
	//
	// DeliveryS3Bucket is a required field
	DeliveryS3Bucket *string `min:"3" type:"string" required:"true"`

	// The prefix for the Amazon S3 bucket.
	DeliveryS3KeyPrefix *string `min:"1" type:"string"`

	// A list of AWS accounts to be excluded from an organization conformance pack
	// while deploying a conformance pack.
	ExcludedAccounts []string `type:"list"`

	// Name of the organization conformance pack you want to create.
	//
	// OrganizationConformancePackName is a required field
	OrganizationConformancePackName *string `min:"1" type:"string" required:"true"`

	// A string containing full conformance pack template body. Structure containing
	// the template body with a minimum length of 1 byte and a maximum length of
	// 51,200 bytes.
	TemplateBody *string `min:"1" type:"string"`

	// Location of file containing the template body. The uri must point to the
	// conformance pack template (max size: 300,000 bytes).
	//
	// You must have access to read Amazon S3 bucket.
	TemplateS3Uri *string `min:"1" type:"string"`
}

// String returns the string representation
func (s PutOrganizationConformancePackInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PutOrganizationConformancePackInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PutOrganizationConformancePackInput"}

	if s.DeliveryS3Bucket == nil {
		invalidParams.Add(aws.NewErrParamRequired("DeliveryS3Bucket"))
	}
	if s.DeliveryS3Bucket != nil && len(*s.DeliveryS3Bucket) < 3 {
		invalidParams.Add(aws.NewErrParamMinLen("DeliveryS3Bucket", 3))
	}
	if s.DeliveryS3KeyPrefix != nil && len(*s.DeliveryS3KeyPrefix) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("DeliveryS3KeyPrefix", 1))
	}

	if s.OrganizationConformancePackName == nil {
		invalidParams.Add(aws.NewErrParamRequired("OrganizationConformancePackName"))
	}
	if s.OrganizationConformancePackName != nil && len(*s.OrganizationConformancePackName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("OrganizationConformancePackName", 1))
	}
	if s.TemplateBody != nil && len(*s.TemplateBody) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TemplateBody", 1))
	}
	if s.TemplateS3Uri != nil && len(*s.TemplateS3Uri) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TemplateS3Uri", 1))
	}
	if s.ConformancePackInputParameters != nil {
		for i, v := range s.ConformancePackInputParameters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "ConformancePackInputParameters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type PutOrganizationConformancePackOutput struct {
	_ struct{} `type:"structure"`

	// ARN of the organization conformance pack.
	OrganizationConformancePackArn *string `min:"1" type:"string"`
}

// String returns the string representation
func (s PutOrganizationConformancePackOutput) String() string {
	return awsutil.Prettify(s)
}
