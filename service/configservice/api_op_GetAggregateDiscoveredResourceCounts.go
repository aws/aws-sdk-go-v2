// Code generated by smithy-go-codegen DO NOT EDIT.

package configservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns the resource counts across accounts and regions that are present in your
// AWS Config aggregator. You can request the resource counts by providing filters
// and GroupByKey. For example, if the input contains accountID 12345678910 and
// region us-east-1 in filters, the API returns the count of resources in account
// ID 12345678910 and region us-east-1. If the input contains ACCOUNT_ID as a
// GroupByKey, the API returns resource counts for all source accounts that are
// present in your aggregator.
func (c *Client) GetAggregateDiscoveredResourceCounts(ctx context.Context, params *GetAggregateDiscoveredResourceCountsInput, optFns ...func(*Options)) (*GetAggregateDiscoveredResourceCountsOutput, error) {
	stack := middleware.NewStack("GetAggregateDiscoveredResourceCounts", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetAggregateDiscoveredResourceCountsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetAggregateDiscoveredResourceCountsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetAggregateDiscoveredResourceCounts(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetAggregateDiscoveredResourceCounts",
			Err:           err,
		}
	}
	out := result.(*GetAggregateDiscoveredResourceCountsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetAggregateDiscoveredResourceCountsInput struct {
	// The maximum number of GroupedResourceCount () objects returned on each page. The
	// default is 1000. You cannot specify a number greater than 1000. If you specify
	// 0, AWS Config uses the default.
	Limit *int32
	// The name of the configuration aggregator.
	ConfigurationAggregatorName *string
	// The nextToken string returned on a previous page that you use to get the next
	// page of results in a paginated response.
	NextToken *string
	// Filters the results based on the ResourceCountFilters object.
	Filters *types.ResourceCountFilters
	// The key to group the resource counts.
	GroupByKey types.ResourceCountGroupKey
}

type GetAggregateDiscoveredResourceCountsOutput struct {
	// The nextToken string returned on a previous page that you use to get the next
	// page of results in a paginated response.
	NextToken *string
	// The key passed into the request object. If GroupByKey is not provided, the
	// result will be empty.
	GroupByKey *string
	// The total number of resources that are present in an aggregator with the filters
	// that you provide.
	TotalDiscoveredResources *int64
	// Returns a list of GroupedResourceCount objects.
	GroupedResourceCounts []*types.GroupedResourceCount

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetAggregateDiscoveredResourceCountsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetAggregateDiscoveredResourceCounts{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetAggregateDiscoveredResourceCounts{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetAggregateDiscoveredResourceCounts(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "config",
		OperationName: "GetAggregateDiscoveredResourceCounts",
	}
}
