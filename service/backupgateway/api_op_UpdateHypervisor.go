// Code generated by smithy-go-codegen DO NOT EDIT.

package backupgateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Updates a hypervisor metadata, including its host, username, and password.
// Specify which hypervisor to update using the Amazon Resource Name (ARN) of the
// hypervisor in your request.
func (c *Client) UpdateHypervisor(ctx context.Context, params *UpdateHypervisorInput, optFns ...func(*Options)) (*UpdateHypervisorOutput, error) {
	if params == nil {
		params = &UpdateHypervisorInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdateHypervisor", params, optFns, c.addOperationUpdateHypervisorMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdateHypervisorOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateHypervisorInput struct {

	// The Amazon Resource Name (ARN) of the hypervisor to update.
	//
	// This member is required.
	HypervisorArn *string

	// The updated host of the hypervisor. This can be either an IP address or a
	// fully-qualified domain name (FQDN).
	Host *string

	// The Amazon Resource Name (ARN) of the group of gateways within the requested
	// log.
	LogGroupArn *string

	// The updated name for the hypervisor
	Name *string

	// The updated password for the hypervisor.
	Password *string

	// The updated username for the hypervisor.
	Username *string

	noSmithyDocumentSerde
}

type UpdateHypervisorOutput struct {

	// The Amazon Resource Name (ARN) of the hypervisor you updated.
	HypervisorArn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationUpdateHypervisorMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpUpdateHypervisor{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpUpdateHypervisor{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpUpdateHypervisorValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateHypervisor(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opUpdateHypervisor(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "backup-gateway",
		OperationName: "UpdateHypervisor",
	}
}
