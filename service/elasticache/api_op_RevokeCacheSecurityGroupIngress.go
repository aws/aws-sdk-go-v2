// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticache

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Revokes ingress from a cache security group. Use this operation to disallow
// access from an Amazon EC2 security group that had been previously authorized.
func (c *Client) RevokeCacheSecurityGroupIngress(ctx context.Context, params *RevokeCacheSecurityGroupIngressInput, optFns ...func(*Options)) (*RevokeCacheSecurityGroupIngressOutput, error) {
	stack := middleware.NewStack("RevokeCacheSecurityGroupIngress", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpRevokeCacheSecurityGroupIngressMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRevokeCacheSecurityGroupIngressValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRevokeCacheSecurityGroupIngress(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RevokeCacheSecurityGroupIngress",
			Err:           err,
		}
	}
	out := result.(*RevokeCacheSecurityGroupIngressOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input of a RevokeCacheSecurityGroupIngress operation.
type RevokeCacheSecurityGroupIngressInput struct {
	// The name of the cache security group to revoke ingress from.
	CacheSecurityGroupName *string
	// The name of the Amazon EC2 security group to revoke access from.
	EC2SecurityGroupName *string
	// The AWS account number of the Amazon EC2 security group owner. Note that this is
	// not the same thing as an AWS access key ID - you must provide a valid AWS
	// account number for this parameter.
	EC2SecurityGroupOwnerId *string
}

type RevokeCacheSecurityGroupIngressOutput struct {
	// Represents the output of one of the following operations:
	//
	//     *
	// AuthorizeCacheSecurityGroupIngress
	//
	//     * CreateCacheSecurityGroup
	//
	//     *
	// RevokeCacheSecurityGroupIngress
	CacheSecurityGroup *types.CacheSecurityGroup

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpRevokeCacheSecurityGroupIngressMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpRevokeCacheSecurityGroupIngress{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpRevokeCacheSecurityGroupIngress{}, middleware.After)
}

func newServiceMetadataMiddleware_opRevokeCacheSecurityGroupIngress(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticache",
		OperationName: "RevokeCacheSecurityGroupIngress",
	}
}
