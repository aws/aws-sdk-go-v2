// Code generated by smithy-go-codegen DO NOT EDIT.

package elasticache

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a cluster. All nodes in the cluster run the same protocol-compliant
// cache engine software, either Memcached or Redis. This operation is not
// supported for Redis (cluster mode enabled) clusters.
func (c *Client) CreateCacheCluster(ctx context.Context, params *CreateCacheClusterInput, optFns ...func(*Options)) (*CreateCacheClusterOutput, error) {
	stack := middleware.NewStack("CreateCacheCluster", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateCacheClusterMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateCacheClusterValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateCacheCluster(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateCacheCluster",
			Err:           err,
		}
	}
	out := result.(*CreateCacheClusterOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input of a CreateCacheCluster operation.
type CreateCacheClusterInput struct {
	// The EC2 Availability Zone in which the cluster is created. All nodes belonging
	// to this cluster are placed in the preferred Availability Zone. If you want to
	// create your nodes across multiple Availability Zones, use
	// PreferredAvailabilityZones. Default: System chosen Availability Zone.
	PreferredAvailabilityZone *string
	// The name of the cache engine to be used for this cluster. Valid values for this
	// parameter are: memcached | redis
	Engine *string
	// A list of security group names to associate with this cluster. Use this
	// parameter only when you are creating a cluster outside of an Amazon Virtual
	// Private Cloud (Amazon VPC).
	CacheSecurityGroupNames []*string
	// The port number on which each of the cache nodes accepts connections.
	Port *int32
	// The node group (shard) identifier. This parameter is stored as a lowercase
	// string. Constraints:
	//
	//     * A name must contain from 1 to 50 alphanumeric
	// characters or hyphens.
	//
	//     * The first character must be a letter.
	//
	//     * A
	// name cannot end with a hyphen or contain two consecutive hyphens.
	CacheClusterId *string
	// The name of a Redis snapshot from which to restore data into the new node group
	// (shard). The snapshot status changes to restoring while the new node group
	// (shard) is being created. This parameter is only valid if the Engine parameter
	// is redis.
	SnapshotName *string
	// A list of the Availability Zones in which cache nodes are created. The order of
	// the zones in the list is not important. This option is only supported on
	// Memcached. If you are creating your cluster in an Amazon VPC (recommended) you
	// can only locate nodes in Availability Zones that are associated with the subnets
	// in the selected subnet group. The number of Availability Zones listed must equal
	// the value of NumCacheNodes. If you want all the nodes in the same Availability
	// Zone, use PreferredAvailabilityZone instead, or repeat the Availability Zone
	// multiple times in the list. Default: System chosen Availability Zones.
	PreferredAvailabilityZones []*string
	// Specifies the weekly time range during which maintenance on the cluster is
	// performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H
	// Clock UTC). The minimum maintenance window is a 60 minute period. Valid values
	// for ddd are:  <p>Specifies the weekly time range during which maintenance  on
	// the cluster is performed. It is specified as a range in the format
	// ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60
	// minute period. Valid values for ddd are:
	//
	//     * sun
	//
	//     * mon
	//
	//     * tue
	//
	//     *
	// wed
	//
	//     * thu
	//
	//     * fri
	//
	//     * sat
	//
	// Example: sun:23:00-mon:01:30
	PreferredMaintenanceWindow *string
	// This parameter is currently disabled.
	AutoMinorVersionUpgrade *bool
	// The version number of the cache engine to be used for this cluster. To view the
	// supported cache engine versions, use the DescribeCacheEngineVersions operation.
	// <p> <b>Important:</b> You can upgrade to a newer engine version (see <a
	// href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting
	// a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine
	// version. If you want to use an earlier engine version, you must delete the
	// existing cluster or replication group and create it anew with the earlier engine
	// version. </p>
	EngineVersion *string
	// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS)
	// topic to which notifications are sent. The Amazon SNS topic owner must be the
	// same as the cluster owner.
	NotificationTopicArn *string
	// One or more VPC security groups associated with the cluster. Use this parameter
	// only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon
	// VPC).
	SecurityGroupIds []*string
	// The name of the parameter group to associate with this cluster. If this argument
	// is omitted, the default parameter group for the specified engine is used. You
	// cannot use any parameter group which has cluster-enabled='yes' when creating a
	// cluster.
	CacheParameterGroupName *string
	// The initial number of cache nodes that the cluster has. For clusters running
	// Redis, this value must be 1. For clusters running Memcached, this value must be
	// between 1 and 20. If you need more than 20 nodes for your Memcached cluster,
	// please fill out the ElastiCache Limit Increase Request form at
	// http://aws.amazon.com/contact-us/elasticache-node-limit-request/
	// (http://aws.amazon.com/contact-us/elasticache-node-limit-request/).
	NumCacheNodes *int32
	// The compute and memory capacity of the nodes in the node group (shard). The
	// following node types are supported by ElastiCache. Generally speaking, the
	// current generation types provide more memory and computational power at lower
	// cost when compared to their equivalent previous generation counterparts.
	//
	//     *
	// General purpose:
	//
	//         * Current generation:  <p> <b>M5 node types:</b>
	// <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>,
	// <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>,
	// <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4
	// node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>,
	// <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>,
	// <code>cache.m4.10xlarge</code> </p> <p> <b>T3 node types:</b>
	// <code>cache.t3.micro</code>, <code>cache.t3.small</code>,
	// <code>cache.t3.medium</code> </p> <p> <b>T2 node types:</b>
	// <code>cache.t2.micro</code>, <code>cache.t2.small</code>,
	// <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not
	// recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p>
	// <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>,
	// <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node
	// types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>,
	// <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul>
	// </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not
	// recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p>
	// </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation:
	// </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>,
	// <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>,
	// <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>,
	// <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b>
	// <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>,
	// <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>,
	// <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li>
	// <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b>
	// <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>,
	// <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b>
	// <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>,
	// <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>,
	// <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional
	// node type info</b> </p> <ul> <li> <p>All current generation instance types are
	// created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files
	// (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ
	// with automatic failover is not supported on T1 instances.</p> </li> <li>
	// <p>Redis configuration variables <code>appendonly</code> and
	// <code>appendfsync</code> are not supported on Redis version 2.8.22 and
	// later.</p> </li> </ul>
	CacheNodeType *string
	// The daily time range (in UTC) during which ElastiCache begins taking a daily
	// snapshot of your node group (shard). Example: 05:00-09:00 If you do not specify
	// this parameter, ElastiCache automatically chooses an appropriate time range.
	// This parameter is only valid if the Engine parameter is redis.
	SnapshotWindow *string
	// A list of cost allocation tags to be added to this resource.
	Tags []*types.Tag
	// The ID of the replication group to which this cluster should belong. If this
	// parameter is specified, the cluster is added to the specified replication group
	// as a read replica; otherwise, the cluster is a standalone primary that is not
	// part of any replication group. If the specified replication group is Multi-AZ
	// enabled and the Availability Zone is not specified, the cluster is created in
	// Availability Zones that provide the best spread of read replicas across
	// Availability Zones. This parameter is only valid if the Engine parameter is
	// redis.
	ReplicationGroupId *string
	// The number of days for which ElastiCache retains automatic snapshots before
	// deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot
	// taken today is retained for 5 days before being deleted. This parameter is only
	// valid if the Engine parameter is redis. Default: 0 (i.e., automatic backups are
	// disabled for this cache cluster).
	SnapshotRetentionLimit *int32
	// Reserved parameter. The password used to access a password protected server.
	// Password constraints:
	//
	//     * Must be only printable ASCII characters.
	//
	//     *
	// Must be at least 16 characters and no more than 128 characters in length.
	//
	//     *
	// The only permitted printable special characters are !, &, #, $, ^, <, >, and -.
	// Other printable special characters cannot be used in the AUTH token.
	//
	// For more
	// information, see AUTH password (http://redis.io/commands/AUTH) at
	// http://redis.io/commands/AUTH.
	AuthToken *string
	// The name of the subnet group to be used for the cluster. Use this parameter only
	// when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).
	// If you're going to launch your cluster in an Amazon VPC, you need to create a
	// subnet group before you start creating a cluster. For more information, see
	// Subnets and Subnet Groups
	// (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
	CacheSubnetGroupName *string
	// A single-element string list containing an Amazon Resource Name (ARN) that
	// uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot
	// file is used to populate the node group (shard). The Amazon S3 object name in
	// the ARN cannot contain any commas. This parameter is only valid if the Engine
	// parameter is redis. Example of an Amazon S3 ARN:
	// arn:aws:s3:::my_bucket/snapshot1.rdb
	SnapshotArns []*string
	// Specifies whether the nodes in this Memcached cluster are created in a single
	// Availability Zone or created across multiple Availability Zones in the cluster's
	// region. This parameter is only supported for Memcached clusters. If the AZMode
	// and PreferredAvailabilityZones are not specified, ElastiCache assumes single-az
	// mode.
	AZMode types.AZMode
}

type CreateCacheClusterOutput struct {
	// Contains all of the attributes of a specific cluster.
	CacheCluster *types.CacheCluster

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateCacheClusterMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateCacheCluster{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateCacheCluster{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateCacheCluster(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticache",
		OperationName: "CreateCacheCluster",
	}
}
