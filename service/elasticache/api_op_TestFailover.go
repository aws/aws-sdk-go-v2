// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elasticache

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticache/types"
)

const opTestFailover = "TestFailover"

// TestFailoverRequest returns a request value for making API operation for
// Amazon ElastiCache.
//
// Represents the input of a TestFailover operation which test automatic failover
// on a specified node group (called shard in the console) in a replication
// group (called cluster in the console).
//
// Note the following
//
//    * A customer can use this operation to test automatic failover on up to
//    5 shards (called node groups in the ElastiCache API and AWS CLI) in any
//    rolling 24-hour period.
//
//    * If calling this operation on shards in different clusters (called replication
//    groups in the API and CLI), the calls can be made concurrently.
//
//    * If calling this operation multiple times on different shards in the
//    same Redis (cluster mode enabled) replication group, the first node replacement
//    must complete before a subsequent call can be made.
//
//    * To determine whether the node replacement is complete you can check
//    Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache
//    API. Look for the following automatic failover related events, listed
//    here in order of occurrance: Replication group message: Test Failover
//    API called for node group <node-group-id> Cache cluster message: Failover
//    from master node <primary-node-id> to replica node <node-id> completed
//    Replication group message: Failover from master node <primary-node-id>
//    to replica node <node-id> completed Cache cluster message: Recovering
//    cache nodes <node-id> Cache cluster message: Finished recovery for cache
//    nodes <node-id> For more information see: Viewing ElastiCache Events (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html)
//    in the ElastiCache User Guide DescribeEvents (https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html)
//    in the ElastiCache API Reference
//
// Also see, Testing Multi-AZ with Automatic Failover (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test)
// in the ElastiCache User Guide.
//
//    // Example sending a request using TestFailoverRequest.
//    req := client.TestFailoverRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/elasticache-2015-02-02/TestFailover
func (c *Client) TestFailoverRequest(input *types.TestFailoverInput) TestFailoverRequest {
	op := &aws.Operation{
		Name:       opTestFailover,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.TestFailoverInput{}
	}

	req := c.newRequest(op, input, &types.TestFailoverOutput{})
	return TestFailoverRequest{Request: req, Input: input, Copy: c.TestFailoverRequest}
}

// TestFailoverRequest is the request type for the
// TestFailover API operation.
type TestFailoverRequest struct {
	*aws.Request
	Input *types.TestFailoverInput
	Copy  func(*types.TestFailoverInput) TestFailoverRequest
}

// Send marshals and sends the TestFailover API request.
func (r TestFailoverRequest) Send(ctx context.Context) (*TestFailoverResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &TestFailoverResponse{
		TestFailoverOutput: r.Request.Data.(*types.TestFailoverOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// TestFailoverResponse is the response type for the
// TestFailover API operation.
type TestFailoverResponse struct {
	*types.TestFailoverOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// TestFailover request.
func (r *TestFailoverResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
