// Code generated by smithy-go-codegen DO NOT EDIT.

package wellarchitected

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/wellarchitected/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Create a new workload. The owner of a workload can share the workload with other
// AWS accounts and IAM users in the same AWS Region. Only the owner of a workload
// can delete it. For more information, see Defining a Workload
// (https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html)
// in the AWS Well-Architected Tool User Guide.
func (c *Client) CreateWorkload(ctx context.Context, params *CreateWorkloadInput, optFns ...func(*Options)) (*CreateWorkloadOutput, error) {
	if params == nil {
		params = &CreateWorkloadInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateWorkload", params, optFns, c.addOperationCreateWorkloadMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateWorkloadOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Input for workload creation.
type CreateWorkloadInput struct {

	// A unique case-sensitive string used to ensure that this request is idempotent
	// (executes only once). You should not reuse the same token for other requests. If
	// you retry a request with the same client request token and the same parameters
	// after it has completed successfully, the result of the original request is
	// returned. This token is listed as required, however, if you do not specify it,
	// the AWS SDKs automatically generate one for you. If you are not using the AWS
	// SDK or the AWS CLI, you must provide this token or the request will fail.
	//
	// This member is required.
	ClientRequestToken *string

	// The description for the workload.
	//
	// This member is required.
	Description *string

	// The environment for the workload.
	//
	// This member is required.
	Environment types.WorkloadEnvironment

	// The list of lenses associated with the workload. Each lens is identified by its
	// LensSummary$LensAlias.
	//
	// This member is required.
	Lenses []string

	// The review owner of the workload. The name, email address, or identifier for the
	// primary group or individual that owns the workload review process.
	//
	// This member is required.
	ReviewOwner *string

	// The name of the workload. The name must be unique within an account within a
	// Region. Spaces and capitalization are ignored when checking for uniqueness.
	//
	// This member is required.
	WorkloadName *string

	// The list of AWS account IDs associated with the workload.
	AccountIds []string

	// The URL of the architectural design for the workload.
	ArchitecturalDesign *string

	// The list of AWS Regions associated with the workload, for example, us-east-2, or
	// ca-central-1.
	AwsRegions []string

	// The industry for the workload.
	Industry *string

	// The industry type for the workload. If specified, must be one of the
	// following:
	//
	// * Agriculture
	//
	// * Automobile
	//
	// * Defense
	//
	// * Design and Engineering
	//
	// *
	// Digital Advertising
	//
	// * Education
	//
	// * Environmental Protection
	//
	// * Financial
	// Services
	//
	// * Gaming
	//
	// * General Public Services
	//
	// * Healthcare
	//
	// * Hospitality
	//
	// *
	// InfoTech
	//
	// * Justice and Public Safety
	//
	// * Life Sciences
	//
	// * Manufacturing
	//
	// * Media
	// & Entertainment
	//
	// * Mining & Resources
	//
	// * Oil & Gas
	//
	// * Power & Utilities
	//
	// *
	// Professional Services
	//
	// * Real Estate & Construction
	//
	// * Retail & Wholesale
	//
	// *
	// Social Protection
	//
	// * Telecommunications
	//
	// * Travel, Transportation & Logistics
	//
	// *
	// Other
	IndustryType *string

	// The list of non-AWS Regions associated with the workload.
	NonAwsRegions []string

	// The notes associated with the workload.
	Notes *string

	// The priorities of the pillars, which are used to order items in the improvement
	// plan. Each pillar is represented by its PillarReviewSummary$PillarId.
	PillarPriorities []string

	// The tags to be associated with the workload.
	Tags map[string]string
}

// Output of a create workload call.
type CreateWorkloadOutput struct {

	// The ARN for the workload.
	WorkloadArn *string

	// The ID assigned to the workload. This ID is unique within an AWS Region.
	WorkloadId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func (c *Client) addOperationCreateWorkloadMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateWorkload{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateWorkload{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addIdempotencyToken_opCreateWorkloadMiddleware(stack, options); err != nil {
		return err
	}
	if err = addOpCreateWorkloadValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateWorkload(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

type idempotencyToken_initializeOpCreateWorkload struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpCreateWorkload) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpCreateWorkload) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*CreateWorkloadInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *CreateWorkloadInput ")
	}

	if input.ClientRequestToken == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.ClientRequestToken = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opCreateWorkloadMiddleware(stack *middleware.Stack, cfg Options) error {
	return stack.Initialize.Add(&idempotencyToken_initializeOpCreateWorkload{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opCreateWorkload(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "wellarchitected",
		OperationName: "CreateWorkload",
	}
}
