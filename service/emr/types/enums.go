// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionOnFailure string

// Enum values for ActionOnFailure
const (
	ActionOnFailureTerminate_job_flow ActionOnFailure = "TERMINATE_JOB_FLOW"
	ActionOnFailureTerminate_cluster  ActionOnFailure = "TERMINATE_CLUSTER"
	ActionOnFailureCancel_and_wait    ActionOnFailure = "CANCEL_AND_WAIT"
	ActionOnFailureContinue           ActionOnFailure = "CONTINUE"
)

// Values returns all known values for ActionOnFailure. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ActionOnFailure) Values() []ActionOnFailure {
	return []ActionOnFailure{
		"TERMINATE_JOB_FLOW",
		"TERMINATE_CLUSTER",
		"CANCEL_AND_WAIT",
		"CONTINUE",
	}
}

type AdjustmentType string

// Enum values for AdjustmentType
const (
	AdjustmentTypeChange_in_capacity         AdjustmentType = "CHANGE_IN_CAPACITY"
	AdjustmentTypePercent_change_in_capacity AdjustmentType = "PERCENT_CHANGE_IN_CAPACITY"
	AdjustmentTypeExact_capacity             AdjustmentType = "EXACT_CAPACITY"
)

// Values returns all known values for AdjustmentType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AdjustmentType) Values() []AdjustmentType {
	return []AdjustmentType{
		"CHANGE_IN_CAPACITY",
		"PERCENT_CHANGE_IN_CAPACITY",
		"EXACT_CAPACITY",
	}
}

type AutoScalingPolicyState string

// Enum values for AutoScalingPolicyState
const (
	AutoScalingPolicyStatePending   AutoScalingPolicyState = "PENDING"
	AutoScalingPolicyStateAttaching AutoScalingPolicyState = "ATTACHING"
	AutoScalingPolicyStateAttached  AutoScalingPolicyState = "ATTACHED"
	AutoScalingPolicyStateDetaching AutoScalingPolicyState = "DETACHING"
	AutoScalingPolicyStateDetached  AutoScalingPolicyState = "DETACHED"
	AutoScalingPolicyStateFailed    AutoScalingPolicyState = "FAILED"
)

// Values returns all known values for AutoScalingPolicyState. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AutoScalingPolicyState) Values() []AutoScalingPolicyState {
	return []AutoScalingPolicyState{
		"PENDING",
		"ATTACHING",
		"ATTACHED",
		"DETACHING",
		"DETACHED",
		"FAILED",
	}
}

type AutoScalingPolicyStateChangeReasonCode string

// Enum values for AutoScalingPolicyStateChangeReasonCode
const (
	AutoScalingPolicyStateChangeReasonCodeUser_request      AutoScalingPolicyStateChangeReasonCode = "USER_REQUEST"
	AutoScalingPolicyStateChangeReasonCodeProvision_failure AutoScalingPolicyStateChangeReasonCode = "PROVISION_FAILURE"
	AutoScalingPolicyStateChangeReasonCodeCleanup_failure   AutoScalingPolicyStateChangeReasonCode = "CLEANUP_FAILURE"
)

// Values returns all known values for AutoScalingPolicyStateChangeReasonCode. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (AutoScalingPolicyStateChangeReasonCode) Values() []AutoScalingPolicyStateChangeReasonCode {
	return []AutoScalingPolicyStateChangeReasonCode{
		"USER_REQUEST",
		"PROVISION_FAILURE",
		"CLEANUP_FAILURE",
	}
}

type CancelStepsRequestStatus string

// Enum values for CancelStepsRequestStatus
const (
	CancelStepsRequestStatusSubmitted CancelStepsRequestStatus = "SUBMITTED"
	CancelStepsRequestStatusFailed    CancelStepsRequestStatus = "FAILED"
)

// Values returns all known values for CancelStepsRequestStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CancelStepsRequestStatus) Values() []CancelStepsRequestStatus {
	return []CancelStepsRequestStatus{
		"SUBMITTED",
		"FAILED",
	}
}

type ClusterState string

// Enum values for ClusterState
const (
	ClusterStateStarting               ClusterState = "STARTING"
	ClusterStateBootstrapping          ClusterState = "BOOTSTRAPPING"
	ClusterStateRunning                ClusterState = "RUNNING"
	ClusterStateWaiting                ClusterState = "WAITING"
	ClusterStateTerminating            ClusterState = "TERMINATING"
	ClusterStateTerminated             ClusterState = "TERMINATED"
	ClusterStateTerminated_with_errors ClusterState = "TERMINATED_WITH_ERRORS"
)

// Values returns all known values for ClusterState. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ClusterState) Values() []ClusterState {
	return []ClusterState{
		"STARTING",
		"BOOTSTRAPPING",
		"RUNNING",
		"WAITING",
		"TERMINATING",
		"TERMINATED",
		"TERMINATED_WITH_ERRORS",
	}
}

type ClusterStateChangeReasonCode string

// Enum values for ClusterStateChangeReasonCode
const (
	ClusterStateChangeReasonCodeInternal_error         ClusterStateChangeReasonCode = "INTERNAL_ERROR"
	ClusterStateChangeReasonCodeValidation_error       ClusterStateChangeReasonCode = "VALIDATION_ERROR"
	ClusterStateChangeReasonCodeInstance_failure       ClusterStateChangeReasonCode = "INSTANCE_FAILURE"
	ClusterStateChangeReasonCodeInstance_fleet_timeout ClusterStateChangeReasonCode = "INSTANCE_FLEET_TIMEOUT"
	ClusterStateChangeReasonCodeBootstrap_failure      ClusterStateChangeReasonCode = "BOOTSTRAP_FAILURE"
	ClusterStateChangeReasonCodeUser_request           ClusterStateChangeReasonCode = "USER_REQUEST"
	ClusterStateChangeReasonCodeStep_failure           ClusterStateChangeReasonCode = "STEP_FAILURE"
	ClusterStateChangeReasonCodeAll_steps_completed    ClusterStateChangeReasonCode = "ALL_STEPS_COMPLETED"
)

// Values returns all known values for ClusterStateChangeReasonCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ClusterStateChangeReasonCode) Values() []ClusterStateChangeReasonCode {
	return []ClusterStateChangeReasonCode{
		"INTERNAL_ERROR",
		"VALIDATION_ERROR",
		"INSTANCE_FAILURE",
		"INSTANCE_FLEET_TIMEOUT",
		"BOOTSTRAP_FAILURE",
		"USER_REQUEST",
		"STEP_FAILURE",
		"ALL_STEPS_COMPLETED",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorGreater_than_or_equal ComparisonOperator = "GREATER_THAN_OR_EQUAL"
	ComparisonOperatorGreater_than          ComparisonOperator = "GREATER_THAN"
	ComparisonOperatorLess_than             ComparisonOperator = "LESS_THAN"
	ComparisonOperatorLess_than_or_equal    ComparisonOperator = "LESS_THAN_OR_EQUAL"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"GREATER_THAN_OR_EQUAL",
		"GREATER_THAN",
		"LESS_THAN",
		"LESS_THAN_OR_EQUAL",
	}
}

type ComputeLimitsUnitType string

// Enum values for ComputeLimitsUnitType
const (
	ComputeLimitsUnitTypeInstancefleetunits ComputeLimitsUnitType = "InstanceFleetUnits"
	ComputeLimitsUnitTypeInstances          ComputeLimitsUnitType = "Instances"
	ComputeLimitsUnitTypeVcpu               ComputeLimitsUnitType = "VCPU"
)

// Values returns all known values for ComputeLimitsUnitType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComputeLimitsUnitType) Values() []ComputeLimitsUnitType {
	return []ComputeLimitsUnitType{
		"InstanceFleetUnits",
		"Instances",
		"VCPU",
	}
}

type ExecutionEngineType string

// Enum values for ExecutionEngineType
const (
	ExecutionEngineTypeEmr ExecutionEngineType = "EMR"
)

// Values returns all known values for ExecutionEngineType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ExecutionEngineType) Values() []ExecutionEngineType {
	return []ExecutionEngineType{
		"EMR",
	}
}

type InstanceCollectionType string

// Enum values for InstanceCollectionType
const (
	InstanceCollectionTypeInstance_fleet InstanceCollectionType = "INSTANCE_FLEET"
	InstanceCollectionTypeInstance_group InstanceCollectionType = "INSTANCE_GROUP"
)

// Values returns all known values for InstanceCollectionType. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceCollectionType) Values() []InstanceCollectionType {
	return []InstanceCollectionType{
		"INSTANCE_FLEET",
		"INSTANCE_GROUP",
	}
}

type InstanceFleetState string

// Enum values for InstanceFleetState
const (
	InstanceFleetStateProvisioning  InstanceFleetState = "PROVISIONING"
	InstanceFleetStateBootstrapping InstanceFleetState = "BOOTSTRAPPING"
	InstanceFleetStateRunning       InstanceFleetState = "RUNNING"
	InstanceFleetStateResizing      InstanceFleetState = "RESIZING"
	InstanceFleetStateSuspended     InstanceFleetState = "SUSPENDED"
	InstanceFleetStateTerminating   InstanceFleetState = "TERMINATING"
	InstanceFleetStateTerminated    InstanceFleetState = "TERMINATED"
)

// Values returns all known values for InstanceFleetState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceFleetState) Values() []InstanceFleetState {
	return []InstanceFleetState{
		"PROVISIONING",
		"BOOTSTRAPPING",
		"RUNNING",
		"RESIZING",
		"SUSPENDED",
		"TERMINATING",
		"TERMINATED",
	}
}

type InstanceFleetStateChangeReasonCode string

// Enum values for InstanceFleetStateChangeReasonCode
const (
	InstanceFleetStateChangeReasonCodeInternal_error     InstanceFleetStateChangeReasonCode = "INTERNAL_ERROR"
	InstanceFleetStateChangeReasonCodeValidation_error   InstanceFleetStateChangeReasonCode = "VALIDATION_ERROR"
	InstanceFleetStateChangeReasonCodeInstance_failure   InstanceFleetStateChangeReasonCode = "INSTANCE_FAILURE"
	InstanceFleetStateChangeReasonCodeCluster_terminated InstanceFleetStateChangeReasonCode = "CLUSTER_TERMINATED"
)

// Values returns all known values for InstanceFleetStateChangeReasonCode. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (InstanceFleetStateChangeReasonCode) Values() []InstanceFleetStateChangeReasonCode {
	return []InstanceFleetStateChangeReasonCode{
		"INTERNAL_ERROR",
		"VALIDATION_ERROR",
		"INSTANCE_FAILURE",
		"CLUSTER_TERMINATED",
	}
}

type InstanceFleetType string

// Enum values for InstanceFleetType
const (
	InstanceFleetTypeMaster InstanceFleetType = "MASTER"
	InstanceFleetTypeCore   InstanceFleetType = "CORE"
	InstanceFleetTypeTask   InstanceFleetType = "TASK"
)

// Values returns all known values for InstanceFleetType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceFleetType) Values() []InstanceFleetType {
	return []InstanceFleetType{
		"MASTER",
		"CORE",
		"TASK",
	}
}

type InstanceGroupState string

// Enum values for InstanceGroupState
const (
	InstanceGroupStateProvisioning  InstanceGroupState = "PROVISIONING"
	InstanceGroupStateBootstrapping InstanceGroupState = "BOOTSTRAPPING"
	InstanceGroupStateRunning       InstanceGroupState = "RUNNING"
	InstanceGroupStateReconfiguring InstanceGroupState = "RECONFIGURING"
	InstanceGroupStateResizing      InstanceGroupState = "RESIZING"
	InstanceGroupStateSuspended     InstanceGroupState = "SUSPENDED"
	InstanceGroupStateTerminating   InstanceGroupState = "TERMINATING"
	InstanceGroupStateTerminated    InstanceGroupState = "TERMINATED"
	InstanceGroupStateArrested      InstanceGroupState = "ARRESTED"
	InstanceGroupStateShutting_down InstanceGroupState = "SHUTTING_DOWN"
	InstanceGroupStateEnded         InstanceGroupState = "ENDED"
)

// Values returns all known values for InstanceGroupState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceGroupState) Values() []InstanceGroupState {
	return []InstanceGroupState{
		"PROVISIONING",
		"BOOTSTRAPPING",
		"RUNNING",
		"RECONFIGURING",
		"RESIZING",
		"SUSPENDED",
		"TERMINATING",
		"TERMINATED",
		"ARRESTED",
		"SHUTTING_DOWN",
		"ENDED",
	}
}

type InstanceGroupStateChangeReasonCode string

// Enum values for InstanceGroupStateChangeReasonCode
const (
	InstanceGroupStateChangeReasonCodeInternal_error     InstanceGroupStateChangeReasonCode = "INTERNAL_ERROR"
	InstanceGroupStateChangeReasonCodeValidation_error   InstanceGroupStateChangeReasonCode = "VALIDATION_ERROR"
	InstanceGroupStateChangeReasonCodeInstance_failure   InstanceGroupStateChangeReasonCode = "INSTANCE_FAILURE"
	InstanceGroupStateChangeReasonCodeCluster_terminated InstanceGroupStateChangeReasonCode = "CLUSTER_TERMINATED"
)

// Values returns all known values for InstanceGroupStateChangeReasonCode. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (InstanceGroupStateChangeReasonCode) Values() []InstanceGroupStateChangeReasonCode {
	return []InstanceGroupStateChangeReasonCode{
		"INTERNAL_ERROR",
		"VALIDATION_ERROR",
		"INSTANCE_FAILURE",
		"CLUSTER_TERMINATED",
	}
}

type InstanceGroupType string

// Enum values for InstanceGroupType
const (
	InstanceGroupTypeMaster InstanceGroupType = "MASTER"
	InstanceGroupTypeCore   InstanceGroupType = "CORE"
	InstanceGroupTypeTask   InstanceGroupType = "TASK"
)

// Values returns all known values for InstanceGroupType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceGroupType) Values() []InstanceGroupType {
	return []InstanceGroupType{
		"MASTER",
		"CORE",
		"TASK",
	}
}

type InstanceRoleType string

// Enum values for InstanceRoleType
const (
	InstanceRoleTypeMaster InstanceRoleType = "MASTER"
	InstanceRoleTypeCore   InstanceRoleType = "CORE"
	InstanceRoleTypeTask   InstanceRoleType = "TASK"
)

// Values returns all known values for InstanceRoleType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceRoleType) Values() []InstanceRoleType {
	return []InstanceRoleType{
		"MASTER",
		"CORE",
		"TASK",
	}
}

type InstanceState string

// Enum values for InstanceState
const (
	InstanceStateAwaiting_fulfillment InstanceState = "AWAITING_FULFILLMENT"
	InstanceStateProvisioning         InstanceState = "PROVISIONING"
	InstanceStateBootstrapping        InstanceState = "BOOTSTRAPPING"
	InstanceStateRunning              InstanceState = "RUNNING"
	InstanceStateTerminated           InstanceState = "TERMINATED"
)

// Values returns all known values for InstanceState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (InstanceState) Values() []InstanceState {
	return []InstanceState{
		"AWAITING_FULFILLMENT",
		"PROVISIONING",
		"BOOTSTRAPPING",
		"RUNNING",
		"TERMINATED",
	}
}

type InstanceStateChangeReasonCode string

// Enum values for InstanceStateChangeReasonCode
const (
	InstanceStateChangeReasonCodeInternal_error     InstanceStateChangeReasonCode = "INTERNAL_ERROR"
	InstanceStateChangeReasonCodeValidation_error   InstanceStateChangeReasonCode = "VALIDATION_ERROR"
	InstanceStateChangeReasonCodeInstance_failure   InstanceStateChangeReasonCode = "INSTANCE_FAILURE"
	InstanceStateChangeReasonCodeBootstrap_failure  InstanceStateChangeReasonCode = "BOOTSTRAP_FAILURE"
	InstanceStateChangeReasonCodeCluster_terminated InstanceStateChangeReasonCode = "CLUSTER_TERMINATED"
)

// Values returns all known values for InstanceStateChangeReasonCode. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (InstanceStateChangeReasonCode) Values() []InstanceStateChangeReasonCode {
	return []InstanceStateChangeReasonCode{
		"INTERNAL_ERROR",
		"VALIDATION_ERROR",
		"INSTANCE_FAILURE",
		"BOOTSTRAP_FAILURE",
		"CLUSTER_TERMINATED",
	}
}

type JobFlowExecutionState string

// Enum values for JobFlowExecutionState
const (
	JobFlowExecutionStateStarting      JobFlowExecutionState = "STARTING"
	JobFlowExecutionStateBootstrapping JobFlowExecutionState = "BOOTSTRAPPING"
	JobFlowExecutionStateRunning       JobFlowExecutionState = "RUNNING"
	JobFlowExecutionStateWaiting       JobFlowExecutionState = "WAITING"
	JobFlowExecutionStateShutting_down JobFlowExecutionState = "SHUTTING_DOWN"
	JobFlowExecutionStateTerminated    JobFlowExecutionState = "TERMINATED"
	JobFlowExecutionStateCompleted     JobFlowExecutionState = "COMPLETED"
	JobFlowExecutionStateFailed        JobFlowExecutionState = "FAILED"
)

// Values returns all known values for JobFlowExecutionState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (JobFlowExecutionState) Values() []JobFlowExecutionState {
	return []JobFlowExecutionState{
		"STARTING",
		"BOOTSTRAPPING",
		"RUNNING",
		"WAITING",
		"SHUTTING_DOWN",
		"TERMINATED",
		"COMPLETED",
		"FAILED",
	}
}

type MarketType string

// Enum values for MarketType
const (
	MarketTypeOn_demand MarketType = "ON_DEMAND"
	MarketTypeSpot      MarketType = "SPOT"
)

// Values returns all known values for MarketType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (MarketType) Values() []MarketType {
	return []MarketType{
		"ON_DEMAND",
		"SPOT",
	}
}

type NotebookExecutionStatus string

// Enum values for NotebookExecutionStatus
const (
	NotebookExecutionStatusStart_pending NotebookExecutionStatus = "START_PENDING"
	NotebookExecutionStatusStarting      NotebookExecutionStatus = "STARTING"
	NotebookExecutionStatusRunning       NotebookExecutionStatus = "RUNNING"
	NotebookExecutionStatusFinishing     NotebookExecutionStatus = "FINISHING"
	NotebookExecutionStatusFinished      NotebookExecutionStatus = "FINISHED"
	NotebookExecutionStatusFailing       NotebookExecutionStatus = "FAILING"
	NotebookExecutionStatusFailed        NotebookExecutionStatus = "FAILED"
	NotebookExecutionStatusStop_pending  NotebookExecutionStatus = "STOP_PENDING"
	NotebookExecutionStatusStopping      NotebookExecutionStatus = "STOPPING"
	NotebookExecutionStatusStopped       NotebookExecutionStatus = "STOPPED"
)

// Values returns all known values for NotebookExecutionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NotebookExecutionStatus) Values() []NotebookExecutionStatus {
	return []NotebookExecutionStatus{
		"START_PENDING",
		"STARTING",
		"RUNNING",
		"FINISHING",
		"FINISHED",
		"FAILING",
		"FAILED",
		"STOP_PENDING",
		"STOPPING",
		"STOPPED",
	}
}

type OnDemandProvisioningAllocationStrategy string

// Enum values for OnDemandProvisioningAllocationStrategy
const (
	OnDemandProvisioningAllocationStrategyLowest_price OnDemandProvisioningAllocationStrategy = "lowest-price"
)

// Values returns all known values for OnDemandProvisioningAllocationStrategy. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (OnDemandProvisioningAllocationStrategy) Values() []OnDemandProvisioningAllocationStrategy {
	return []OnDemandProvisioningAllocationStrategy{
		"lowest-price",
	}
}

type PlacementGroupStrategy string

// Enum values for PlacementGroupStrategy
const (
	PlacementGroupStrategySpread    PlacementGroupStrategy = "SPREAD"
	PlacementGroupStrategyPartition PlacementGroupStrategy = "PARTITION"
	PlacementGroupStrategyCluster   PlacementGroupStrategy = "CLUSTER"
	PlacementGroupStrategyNone      PlacementGroupStrategy = "NONE"
)

// Values returns all known values for PlacementGroupStrategy. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PlacementGroupStrategy) Values() []PlacementGroupStrategy {
	return []PlacementGroupStrategy{
		"SPREAD",
		"PARTITION",
		"CLUSTER",
		"NONE",
	}
}

type RepoUpgradeOnBoot string

// Enum values for RepoUpgradeOnBoot
const (
	RepoUpgradeOnBootSecurity RepoUpgradeOnBoot = "SECURITY"
	RepoUpgradeOnBootNone     RepoUpgradeOnBoot = "NONE"
)

// Values returns all known values for RepoUpgradeOnBoot. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RepoUpgradeOnBoot) Values() []RepoUpgradeOnBoot {
	return []RepoUpgradeOnBoot{
		"SECURITY",
		"NONE",
	}
}

type ScaleDownBehavior string

// Enum values for ScaleDownBehavior
const (
	ScaleDownBehaviorTerminate_at_instance_hour   ScaleDownBehavior = "TERMINATE_AT_INSTANCE_HOUR"
	ScaleDownBehaviorTerminate_at_task_completion ScaleDownBehavior = "TERMINATE_AT_TASK_COMPLETION"
)

// Values returns all known values for ScaleDownBehavior. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ScaleDownBehavior) Values() []ScaleDownBehavior {
	return []ScaleDownBehavior{
		"TERMINATE_AT_INSTANCE_HOUR",
		"TERMINATE_AT_TASK_COMPLETION",
	}
}

type SpotProvisioningAllocationStrategy string

// Enum values for SpotProvisioningAllocationStrategy
const (
	SpotProvisioningAllocationStrategyCapacity_optimized SpotProvisioningAllocationStrategy = "capacity-optimized"
)

// Values returns all known values for SpotProvisioningAllocationStrategy. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (SpotProvisioningAllocationStrategy) Values() []SpotProvisioningAllocationStrategy {
	return []SpotProvisioningAllocationStrategy{
		"capacity-optimized",
	}
}

type SpotProvisioningTimeoutAction string

// Enum values for SpotProvisioningTimeoutAction
const (
	SpotProvisioningTimeoutActionSwitch_to_on_demand SpotProvisioningTimeoutAction = "SWITCH_TO_ON_DEMAND"
	SpotProvisioningTimeoutActionTerminate_cluster   SpotProvisioningTimeoutAction = "TERMINATE_CLUSTER"
)

// Values returns all known values for SpotProvisioningTimeoutAction. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (SpotProvisioningTimeoutAction) Values() []SpotProvisioningTimeoutAction {
	return []SpotProvisioningTimeoutAction{
		"SWITCH_TO_ON_DEMAND",
		"TERMINATE_CLUSTER",
	}
}

type Statistic string

// Enum values for Statistic
const (
	StatisticSample_count Statistic = "SAMPLE_COUNT"
	StatisticAverage      Statistic = "AVERAGE"
	StatisticSum          Statistic = "SUM"
	StatisticMinimum      Statistic = "MINIMUM"
	StatisticMaximum      Statistic = "MAXIMUM"
)

// Values returns all known values for Statistic. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Statistic) Values() []Statistic {
	return []Statistic{
		"SAMPLE_COUNT",
		"AVERAGE",
		"SUM",
		"MINIMUM",
		"MAXIMUM",
	}
}

type StepCancellationOption string

// Enum values for StepCancellationOption
const (
	StepCancellationOptionSend_interrupt    StepCancellationOption = "SEND_INTERRUPT"
	StepCancellationOptionTerminate_process StepCancellationOption = "TERMINATE_PROCESS"
)

// Values returns all known values for StepCancellationOption. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StepCancellationOption) Values() []StepCancellationOption {
	return []StepCancellationOption{
		"SEND_INTERRUPT",
		"TERMINATE_PROCESS",
	}
}

type StepExecutionState string

// Enum values for StepExecutionState
const (
	StepExecutionStatePending     StepExecutionState = "PENDING"
	StepExecutionStateRunning     StepExecutionState = "RUNNING"
	StepExecutionStateContinue    StepExecutionState = "CONTINUE"
	StepExecutionStateCompleted   StepExecutionState = "COMPLETED"
	StepExecutionStateCancelled   StepExecutionState = "CANCELLED"
	StepExecutionStateFailed      StepExecutionState = "FAILED"
	StepExecutionStateInterrupted StepExecutionState = "INTERRUPTED"
)

// Values returns all known values for StepExecutionState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StepExecutionState) Values() []StepExecutionState {
	return []StepExecutionState{
		"PENDING",
		"RUNNING",
		"CONTINUE",
		"COMPLETED",
		"CANCELLED",
		"FAILED",
		"INTERRUPTED",
	}
}

type StepState string

// Enum values for StepState
const (
	StepStatePending        StepState = "PENDING"
	StepStateCancel_pending StepState = "CANCEL_PENDING"
	StepStateRunning        StepState = "RUNNING"
	StepStateCompleted      StepState = "COMPLETED"
	StepStateCancelled      StepState = "CANCELLED"
	StepStateFailed         StepState = "FAILED"
	StepStateInterrupted    StepState = "INTERRUPTED"
)

// Values returns all known values for StepState. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (StepState) Values() []StepState {
	return []StepState{
		"PENDING",
		"CANCEL_PENDING",
		"RUNNING",
		"COMPLETED",
		"CANCELLED",
		"FAILED",
		"INTERRUPTED",
	}
}

type StepStateChangeReasonCode string

// Enum values for StepStateChangeReasonCode
const (
	StepStateChangeReasonCodeNone StepStateChangeReasonCode = "NONE"
)

// Values returns all known values for StepStateChangeReasonCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (StepStateChangeReasonCode) Values() []StepStateChangeReasonCode {
	return []StepStateChangeReasonCode{
		"NONE",
	}
}

type Unit string

// Enum values for Unit
const (
	UnitNone                  Unit = "NONE"
	UnitSeconds               Unit = "SECONDS"
	UnitMicro_seconds         Unit = "MICRO_SECONDS"
	UnitMilli_seconds         Unit = "MILLI_SECONDS"
	UnitBytes                 Unit = "BYTES"
	UnitKilo_bytes            Unit = "KILO_BYTES"
	UnitMega_bytes            Unit = "MEGA_BYTES"
	UnitGiga_bytes            Unit = "GIGA_BYTES"
	UnitTera_bytes            Unit = "TERA_BYTES"
	UnitBits                  Unit = "BITS"
	UnitKilo_bits             Unit = "KILO_BITS"
	UnitMega_bits             Unit = "MEGA_BITS"
	UnitGiga_bits             Unit = "GIGA_BITS"
	UnitTera_bits             Unit = "TERA_BITS"
	UnitPercent               Unit = "PERCENT"
	UnitCount                 Unit = "COUNT"
	UnitBytes_per_second      Unit = "BYTES_PER_SECOND"
	UnitKilo_bytes_per_second Unit = "KILO_BYTES_PER_SECOND"
	UnitMega_bytes_per_second Unit = "MEGA_BYTES_PER_SECOND"
	UnitGiga_bytes_per_second Unit = "GIGA_BYTES_PER_SECOND"
	UnitTera_bytes_per_second Unit = "TERA_BYTES_PER_SECOND"
	UnitBits_per_second       Unit = "BITS_PER_SECOND"
	UnitKilo_bits_per_second  Unit = "KILO_BITS_PER_SECOND"
	UnitMega_bits_per_second  Unit = "MEGA_BITS_PER_SECOND"
	UnitGiga_bits_per_second  Unit = "GIGA_BITS_PER_SECOND"
	UnitTera_bits_per_second  Unit = "TERA_BITS_PER_SECOND"
	UnitCount_per_second      Unit = "COUNT_PER_SECOND"
)

// Values returns all known values for Unit. Note that this can be expanded in the
// future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Unit) Values() []Unit {
	return []Unit{
		"NONE",
		"SECONDS",
		"MICRO_SECONDS",
		"MILLI_SECONDS",
		"BYTES",
		"KILO_BYTES",
		"MEGA_BYTES",
		"GIGA_BYTES",
		"TERA_BYTES",
		"BITS",
		"KILO_BITS",
		"MEGA_BITS",
		"GIGA_BITS",
		"TERA_BITS",
		"PERCENT",
		"COUNT",
		"BYTES_PER_SECOND",
		"KILO_BYTES_PER_SECOND",
		"MEGA_BYTES_PER_SECOND",
		"GIGA_BYTES_PER_SECOND",
		"TERA_BYTES_PER_SECOND",
		"BITS_PER_SECOND",
		"KILO_BITS_PER_SECOND",
		"MEGA_BITS_PER_SECOND",
		"GIGA_BITS_PER_SECOND",
		"TERA_BITS_PER_SECOND",
		"COUNT_PER_SECOND",
	}
}
