// Code generated by smithy-go-codegen DO NOT EDIT.

package emr

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/emr/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates or updates an automatic scaling policy for a core instance group or task
// instance group in an Amazon EMR cluster. The automatic scaling policy defines
// how an instance group dynamically adds and terminates EC2 instances in response
// to the value of a CloudWatch metric.
func (c *Client) PutAutoScalingPolicy(ctx context.Context, params *PutAutoScalingPolicyInput, optFns ...func(*Options)) (*PutAutoScalingPolicyOutput, error) {
	if params == nil {
		params = &PutAutoScalingPolicyInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutAutoScalingPolicy", params, optFns, addOperationPutAutoScalingPolicyMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutAutoScalingPolicyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutAutoScalingPolicyInput struct {

	// Specifies the definition of the automatic scaling policy.
	//
	// This member is required.
	AutoScalingPolicy *types.AutoScalingPolicy

	// Specifies the ID of a cluster. The instance group to which the automatic scaling
	// policy is applied is within this cluster.
	//
	// This member is required.
	ClusterId *string

	// Specifies the ID of the instance group to which the automatic scaling policy is
	// applied.
	//
	// This member is required.
	InstanceGroupId *string
}

type PutAutoScalingPolicyOutput struct {

	// The automatic scaling policy definition.
	AutoScalingPolicy *types.AutoScalingPolicyDescription

	// The Amazon Resource Name of the cluster.
	ClusterArn *string

	// Specifies the ID of a cluster. The instance group to which the automatic scaling
	// policy is applied is within this cluster.
	ClusterId *string

	// Specifies the ID of the instance group to which the scaling policy is applied.
	InstanceGroupId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutAutoScalingPolicyMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpPutAutoScalingPolicy{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpPutAutoScalingPolicy{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutAutoScalingPolicyValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutAutoScalingPolicy(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutAutoScalingPolicy(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticmapreduce",
		OperationName: "PutAutoScalingPolicy",
	}
}
