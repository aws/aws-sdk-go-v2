// Code generated by smithy-go-codegen DO NOT EDIT.

package emr

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/emr/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Cancels a pending step or steps in a running cluster. Available only in Amazon
// EMR versions 4.8.0 and later, excluding version 5.0.0. A maximum of 256 steps
// are allowed in each CancelSteps request. CancelSteps is idempotent but
// asynchronous; it does not guarantee a step will be canceled, even if the request
// is successfully submitted. You can only cancel steps that are in a PENDING
// state.
func (c *Client) CancelSteps(ctx context.Context, params *CancelStepsInput, optFns ...func(*Options)) (*CancelStepsOutput, error) {
	stack := middleware.NewStack("CancelSteps", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCancelStepsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCancelStepsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCancelSteps(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CancelSteps",
			Err:           err,
		}
	}
	out := result.(*CancelStepsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The input argument to the CancelSteps () operation.
type CancelStepsInput struct {
	// The ClusterID for which specified steps will be canceled. Use RunJobFlow () and
	// ListClusters () to get ClusterIDs.
	ClusterId *string
	// The list of StepIDs to cancel. Use ListSteps () to get steps and their states
	// for the specified cluster.
	StepIds []*string
	// The option to choose for cancelling RUNNING steps. By default, the value is
	// SEND_INTERRUPT.
	StepCancellationOption types.StepCancellationOption
}

// The output for the CancelSteps () operation.
type CancelStepsOutput struct {
	// A list of CancelStepsInfo (), which shows the status of specified cancel
	// requests for each StepID specified.
	CancelStepsInfoList []*types.CancelStepsInfo

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCancelStepsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCancelSteps{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCancelSteps{}, middleware.After)
}

func newServiceMetadataMiddleware_opCancelSteps(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "elasticmapreduce",
		OperationName: "CancelSteps",
	}
}
