// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emr/types"
)

const opRunJobFlow = "RunJobFlow"

// RunJobFlowRequest returns a request value for making API operation for
// Amazon Elastic MapReduce.
//
// RunJobFlow creates and starts running a new cluster (job flow). The cluster
// runs the steps specified. After the steps complete, the cluster stops and
// the HDFS partition is lost. To prevent loss of data, configure the last step
// of the job flow to store results in Amazon S3. If the JobFlowInstancesConfig
// KeepJobFlowAliveWhenNoSteps parameter is set to TRUE, the cluster transitions
// to the WAITING state rather than shutting down after the steps have completed.
//
// For additional protection, you can set the JobFlowInstancesConfig TerminationProtected
// parameter to TRUE to lock the cluster and prevent it from being terminated
// by API call, user intervention, or in the event of a job flow error.
//
// A maximum of 256 steps are allowed in each job flow.
//
// If your cluster is long-running (such as a Hive data warehouse) or complex,
// you may require more than 256 steps to process your data. You can bypass
// the 256-step limitation in various ways, including using the SSH shell to
// connect to the master node and submitting queries directly to the software
// running on the master node, such as Hive and Hadoop. For more information
// on how to do this, see Add More than 256 Steps to a Cluster (https://docs.aws.amazon.com/emr/latest/ManagementGuide/AddMoreThan256Steps.html)
// in the Amazon EMR Management Guide.
//
// For long running clusters, we recommend that you periodically store your
// results.
//
// The instance fleets configuration is available only in Amazon EMR versions
// 4.8.0 and later, excluding 5.0.x versions. The RunJobFlow request can contain
// InstanceFleets parameters or InstanceGroups parameters, but not both.
//
//    // Example sending a request using RunJobFlowRequest.
//    req := client.RunJobFlowRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/elasticmapreduce-2009-03-31/RunJobFlow
func (c *Client) RunJobFlowRequest(input *types.RunJobFlowInput) RunJobFlowRequest {
	op := &aws.Operation{
		Name:       opRunJobFlow,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RunJobFlowInput{}
	}

	req := c.newRequest(op, input, &types.RunJobFlowOutput{})
	return RunJobFlowRequest{Request: req, Input: input, Copy: c.RunJobFlowRequest}
}

// RunJobFlowRequest is the request type for the
// RunJobFlow API operation.
type RunJobFlowRequest struct {
	*aws.Request
	Input *types.RunJobFlowInput
	Copy  func(*types.RunJobFlowInput) RunJobFlowRequest
}

// Send marshals and sends the RunJobFlow API request.
func (r RunJobFlowRequest) Send(ctx context.Context) (*RunJobFlowResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RunJobFlowResponse{
		RunJobFlowOutput: r.Request.Data.(*types.RunJobFlowOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RunJobFlowResponse is the response type for the
// RunJobFlow API operation.
type RunJobFlowResponse struct {
	*types.RunJobFlowOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RunJobFlow request.
func (r *RunJobFlowResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
