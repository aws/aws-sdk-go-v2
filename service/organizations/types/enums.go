// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AccessDeniedForDependencyExceptionReason string

// Enum values for AccessDeniedForDependencyExceptionReason
const (
	AccessDeniedForDependencyExceptionReasonAccess_denied_during_create_service_linked_role AccessDeniedForDependencyExceptionReason = "ACCESS_DENIED_DURING_CREATE_SERVICE_LINKED_ROLE"
)

// Values returns all known values for AccessDeniedForDependencyExceptionReason.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (AccessDeniedForDependencyExceptionReason) Values() []AccessDeniedForDependencyExceptionReason {
	return []AccessDeniedForDependencyExceptionReason{
		"ACCESS_DENIED_DURING_CREATE_SERVICE_LINKED_ROLE",
	}
}

type AccountJoinedMethod string

// Enum values for AccountJoinedMethod
const (
	AccountJoinedMethodInvited AccountJoinedMethod = "INVITED"
	AccountJoinedMethodCreated AccountJoinedMethod = "CREATED"
)

// Values returns all known values for AccountJoinedMethod. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AccountJoinedMethod) Values() []AccountJoinedMethod {
	return []AccountJoinedMethod{
		"INVITED",
		"CREATED",
	}
}

type AccountStatus string

// Enum values for AccountStatus
const (
	AccountStatusActive    AccountStatus = "ACTIVE"
	AccountStatusSuspended AccountStatus = "SUSPENDED"
)

// Values returns all known values for AccountStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AccountStatus) Values() []AccountStatus {
	return []AccountStatus{
		"ACTIVE",
		"SUSPENDED",
	}
}

type ActionType string

// Enum values for ActionType
const (
	ActionTypeInvite_account_to_organization        ActionType = "INVITE"
	ActionTypeEnable_all_features                   ActionType = "ENABLE_ALL_FEATURES"
	ActionTypeApprove_all_features                  ActionType = "APPROVE_ALL_FEATURES"
	ActionTypeAdd_organizations_service_linked_role ActionType = "ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE"
)

// Values returns all known values for ActionType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ActionType) Values() []ActionType {
	return []ActionType{
		"INVITE",
		"ENABLE_ALL_FEATURES",
		"APPROVE_ALL_FEATURES",
		"ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE",
	}
}

type ChildType string

// Enum values for ChildType
const (
	ChildTypeAccount             ChildType = "ACCOUNT"
	ChildTypeOrganizational_unit ChildType = "ORGANIZATIONAL_UNIT"
)

// Values returns all known values for ChildType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (ChildType) Values() []ChildType {
	return []ChildType{
		"ACCOUNT",
		"ORGANIZATIONAL_UNIT",
	}
}

type ConstraintViolationExceptionReason string

// Enum values for ConstraintViolationExceptionReason
const (
	ConstraintViolationExceptionReasonAccount_number_limit_exceeded                           ConstraintViolationExceptionReason = "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonHandshake_rate_limit_exceeded                           ConstraintViolationExceptionReason = "HANDSHAKE_RATE_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonOu_number_limit_exceeded                                ConstraintViolationExceptionReason = "OU_NUMBER_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonOu_depth_limit_exceeded                                 ConstraintViolationExceptionReason = "OU_DEPTH_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonPolicy_number_limit_exceeded                            ConstraintViolationExceptionReason = "POLICY_NUMBER_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonPolicy_content_limit_exceeded                           ConstraintViolationExceptionReason = "POLICY_CONTENT_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonMax_policy_type_attachment_limit_exceeded               ConstraintViolationExceptionReason = "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonMin_policy_type_attachment_limit_exceeded               ConstraintViolationExceptionReason = "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonAccount_cannot_leave_organization                       ConstraintViolationExceptionReason = "ACCOUNT_CANNOT_LEAVE_ORGANIZATION"
	ConstraintViolationExceptionReasonAccount_cannot_leave_without_eula                       ConstraintViolationExceptionReason = "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA"
	ConstraintViolationExceptionReasonAccount_cannot_leave_without_phone_verification         ConstraintViolationExceptionReason = "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION"
	ConstraintViolationExceptionReasonMaster_account_payment_instrument_required              ConstraintViolationExceptionReason = "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
	ConstraintViolationExceptionReasonMember_account_payment_instrument_required              ConstraintViolationExceptionReason = "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
	ConstraintViolationExceptionReasonAccount_creation_rate_limit_exceeded                    ConstraintViolationExceptionReason = "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonMaster_account_address_does_not_match_marketplace       ConstraintViolationExceptionReason = "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE"
	ConstraintViolationExceptionReasonMaster_account_missing_contact_info                     ConstraintViolationExceptionReason = "MASTER_ACCOUNT_MISSING_CONTACT_INFO"
	ConstraintViolationExceptionReasonMaster_account_not_govcloud_enabled                     ConstraintViolationExceptionReason = "MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED"
	ConstraintViolationExceptionReasonOrganization_not_in_all_features_mode                   ConstraintViolationExceptionReason = "ORGANIZATION_NOT_IN_ALL_FEATURES_MODE"
	ConstraintViolationExceptionReasonCreate_organization_in_billing_mode_unsupported_region  ConstraintViolationExceptionReason = "CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION"
	ConstraintViolationExceptionReasonEmail_verification_code_expired                         ConstraintViolationExceptionReason = "EMAIL_VERIFICATION_CODE_EXPIRED"
	ConstraintViolationExceptionReasonWait_period_active                                      ConstraintViolationExceptionReason = "WAIT_PERIOD_ACTIVE"
	ConstraintViolationExceptionReasonMax_tag_limit_exceeded                                  ConstraintViolationExceptionReason = "MAX_TAG_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonTag_policy_violation                                    ConstraintViolationExceptionReason = "TAG_POLICY_VIOLATION"
	ConstraintViolationExceptionReasonMax_delegated_administrators_for_service_limit_exceeded ConstraintViolationExceptionReason = "MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED"
	ConstraintViolationExceptionReasonCannot_register_master_as_delegated_administrator       ConstraintViolationExceptionReason = "CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR"
	ConstraintViolationExceptionReasonCannot_remove_delegated_administrator_from_org          ConstraintViolationExceptionReason = "CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG"
	ConstraintViolationExceptionReasonDelegated_administrator_exists_for_this_service         ConstraintViolationExceptionReason = "DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE"
	ConstraintViolationExceptionReasonMaster_account_missing_business_license                 ConstraintViolationExceptionReason = "MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE"
)

// Values returns all known values for ConstraintViolationExceptionReason. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (ConstraintViolationExceptionReason) Values() []ConstraintViolationExceptionReason {
	return []ConstraintViolationExceptionReason{
		"ACCOUNT_NUMBER_LIMIT_EXCEEDED",
		"HANDSHAKE_RATE_LIMIT_EXCEEDED",
		"OU_NUMBER_LIMIT_EXCEEDED",
		"OU_DEPTH_LIMIT_EXCEEDED",
		"POLICY_NUMBER_LIMIT_EXCEEDED",
		"POLICY_CONTENT_LIMIT_EXCEEDED",
		"MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
		"MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED",
		"ACCOUNT_CANNOT_LEAVE_ORGANIZATION",
		"ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA",
		"ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION",
		"MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
		"MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED",
		"ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED",
		"MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE",
		"MASTER_ACCOUNT_MISSING_CONTACT_INFO",
		"MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED",
		"ORGANIZATION_NOT_IN_ALL_FEATURES_MODE",
		"CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION",
		"EMAIL_VERIFICATION_CODE_EXPIRED",
		"WAIT_PERIOD_ACTIVE",
		"MAX_TAG_LIMIT_EXCEEDED",
		"TAG_POLICY_VIOLATION",
		"MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED",
		"CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR",
		"CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG",
		"DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE",
		"MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE",
	}
}

type CreateAccountFailureReason string

// Enum values for CreateAccountFailureReason
const (
	CreateAccountFailureReasonAccount_limit_exceeded          CreateAccountFailureReason = "ACCOUNT_LIMIT_EXCEEDED"
	CreateAccountFailureReasonEmail_already_exists            CreateAccountFailureReason = "EMAIL_ALREADY_EXISTS"
	CreateAccountFailureReasonInvalid_address                 CreateAccountFailureReason = "INVALID_ADDRESS"
	CreateAccountFailureReasonInvalid_email                   CreateAccountFailureReason = "INVALID_EMAIL"
	CreateAccountFailureReasonConcurrent_account_modification CreateAccountFailureReason = "CONCURRENT_ACCOUNT_MODIFICATION"
	CreateAccountFailureReasonInternal_failure                CreateAccountFailureReason = "INTERNAL_FAILURE"
	CreateAccountFailureReasonGovcloud_account_already_exists CreateAccountFailureReason = "GOVCLOUD_ACCOUNT_ALREADY_EXISTS"
	CreateAccountFailureReasonMissing_business_validation     CreateAccountFailureReason = "MISSING_BUSINESS_VALIDATION"
	CreateAccountFailureReasonMissing_payment_instrument      CreateAccountFailureReason = "MISSING_PAYMENT_INSTRUMENT"
)

// Values returns all known values for CreateAccountFailureReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (CreateAccountFailureReason) Values() []CreateAccountFailureReason {
	return []CreateAccountFailureReason{
		"ACCOUNT_LIMIT_EXCEEDED",
		"EMAIL_ALREADY_EXISTS",
		"INVALID_ADDRESS",
		"INVALID_EMAIL",
		"CONCURRENT_ACCOUNT_MODIFICATION",
		"INTERNAL_FAILURE",
		"GOVCLOUD_ACCOUNT_ALREADY_EXISTS",
		"MISSING_BUSINESS_VALIDATION",
		"MISSING_PAYMENT_INSTRUMENT",
	}
}

type CreateAccountState string

// Enum values for CreateAccountState
const (
	CreateAccountStateIn_progress CreateAccountState = "IN_PROGRESS"
	CreateAccountStateSucceeded   CreateAccountState = "SUCCEEDED"
	CreateAccountStateFailed      CreateAccountState = "FAILED"
)

// Values returns all known values for CreateAccountState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CreateAccountState) Values() []CreateAccountState {
	return []CreateAccountState{
		"IN_PROGRESS",
		"SUCCEEDED",
		"FAILED",
	}
}

type EffectivePolicyType string

// Enum values for EffectivePolicyType
const (
	EffectivePolicyTypeTag_policy                EffectivePolicyType = "TAG_POLICY"
	EffectivePolicyTypeBackup_policy             EffectivePolicyType = "BACKUP_POLICY"
	EffectivePolicyTypeAiservices_opt_out_policy EffectivePolicyType = "AISERVICES_OPT_OUT_POLICY"
)

// Values returns all known values for EffectivePolicyType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (EffectivePolicyType) Values() []EffectivePolicyType {
	return []EffectivePolicyType{
		"TAG_POLICY",
		"BACKUP_POLICY",
		"AISERVICES_OPT_OUT_POLICY",
	}
}

type HandshakeConstraintViolationExceptionReason string

// Enum values for HandshakeConstraintViolationExceptionReason
const (
	HandshakeConstraintViolationExceptionReasonAccount_number_limit_exceeded                      HandshakeConstraintViolationExceptionReason = "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
	HandshakeConstraintViolationExceptionReasonHandshake_rate_limit_exceeded                      HandshakeConstraintViolationExceptionReason = "HANDSHAKE_RATE_LIMIT_EXCEEDED"
	HandshakeConstraintViolationExceptionReasonAlready_in_an_organization                         HandshakeConstraintViolationExceptionReason = "ALREADY_IN_AN_ORGANIZATION"
	HandshakeConstraintViolationExceptionReasonOrganization_already_has_all_features              HandshakeConstraintViolationExceptionReason = "ORGANIZATION_ALREADY_HAS_ALL_FEATURES"
	HandshakeConstraintViolationExceptionReasonInvite_disabled_during_enable_all_features         HandshakeConstraintViolationExceptionReason = "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES"
	HandshakeConstraintViolationExceptionReasonPayment_instrument_required                        HandshakeConstraintViolationExceptionReason = "PAYMENT_INSTRUMENT_REQUIRED"
	HandshakeConstraintViolationExceptionReasonOrganization_from_different_seller_of_record       HandshakeConstraintViolationExceptionReason = "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD"
	HandshakeConstraintViolationExceptionReasonOrganization_membership_change_rate_limit_exceeded HandshakeConstraintViolationExceptionReason = "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED"
)

// Values returns all known values for HandshakeConstraintViolationExceptionReason.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (HandshakeConstraintViolationExceptionReason) Values() []HandshakeConstraintViolationExceptionReason {
	return []HandshakeConstraintViolationExceptionReason{
		"ACCOUNT_NUMBER_LIMIT_EXCEEDED",
		"HANDSHAKE_RATE_LIMIT_EXCEEDED",
		"ALREADY_IN_AN_ORGANIZATION",
		"ORGANIZATION_ALREADY_HAS_ALL_FEATURES",
		"INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES",
		"PAYMENT_INSTRUMENT_REQUIRED",
		"ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD",
		"ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED",
	}
}

type HandshakePartyType string

// Enum values for HandshakePartyType
const (
	HandshakePartyTypeAccount      HandshakePartyType = "ACCOUNT"
	HandshakePartyTypeOrganization HandshakePartyType = "ORGANIZATION"
	HandshakePartyTypeEmail        HandshakePartyType = "EMAIL"
)

// Values returns all known values for HandshakePartyType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (HandshakePartyType) Values() []HandshakePartyType {
	return []HandshakePartyType{
		"ACCOUNT",
		"ORGANIZATION",
		"EMAIL",
	}
}

type HandshakeResourceType string

// Enum values for HandshakeResourceType
const (
	HandshakeResourceTypeAccount                  HandshakeResourceType = "ACCOUNT"
	HandshakeResourceTypeOrganization             HandshakeResourceType = "ORGANIZATION"
	HandshakeResourceTypeOrganization_feature_set HandshakeResourceType = "ORGANIZATION_FEATURE_SET"
	HandshakeResourceTypeEmail                    HandshakeResourceType = "EMAIL"
	HandshakeResourceTypeMaster_email             HandshakeResourceType = "MASTER_EMAIL"
	HandshakeResourceTypeMaster_name              HandshakeResourceType = "MASTER_NAME"
	HandshakeResourceTypeNotes                    HandshakeResourceType = "NOTES"
	HandshakeResourceTypeParent_handshake         HandshakeResourceType = "PARENT_HANDSHAKE"
)

// Values returns all known values for HandshakeResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (HandshakeResourceType) Values() []HandshakeResourceType {
	return []HandshakeResourceType{
		"ACCOUNT",
		"ORGANIZATION",
		"ORGANIZATION_FEATURE_SET",
		"EMAIL",
		"MASTER_EMAIL",
		"MASTER_NAME",
		"NOTES",
		"PARENT_HANDSHAKE",
	}
}

type HandshakeState string

// Enum values for HandshakeState
const (
	HandshakeStateRequested HandshakeState = "REQUESTED"
	HandshakeStateOpen      HandshakeState = "OPEN"
	HandshakeStateCanceled  HandshakeState = "CANCELED"
	HandshakeStateAccepted  HandshakeState = "ACCEPTED"
	HandshakeStateDeclined  HandshakeState = "DECLINED"
	HandshakeStateExpired   HandshakeState = "EXPIRED"
)

// Values returns all known values for HandshakeState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (HandshakeState) Values() []HandshakeState {
	return []HandshakeState{
		"REQUESTED",
		"OPEN",
		"CANCELED",
		"ACCEPTED",
		"DECLINED",
		"EXPIRED",
	}
}

type IAMUserAccessToBilling string

// Enum values for IAMUserAccessToBilling
const (
	IAMUserAccessToBillingAllow IAMUserAccessToBilling = "ALLOW"
	IAMUserAccessToBillingDeny  IAMUserAccessToBilling = "DENY"
)

// Values returns all known values for IAMUserAccessToBilling. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (IAMUserAccessToBilling) Values() []IAMUserAccessToBilling {
	return []IAMUserAccessToBilling{
		"ALLOW",
		"DENY",
	}
}

type InvalidInputExceptionReason string

// Enum values for InvalidInputExceptionReason
const (
	InvalidInputExceptionReasonInvalid_party_type_target              InvalidInputExceptionReason = "INVALID_PARTY_TYPE_TARGET"
	InvalidInputExceptionReasonInvalid_syntax_organization            InvalidInputExceptionReason = "INVALID_SYNTAX_ORGANIZATION_ARN"
	InvalidInputExceptionReasonInvalid_syntax_policy                  InvalidInputExceptionReason = "INVALID_SYNTAX_POLICY_ID"
	InvalidInputExceptionReasonInvalid_enum                           InvalidInputExceptionReason = "INVALID_ENUM"
	InvalidInputExceptionReasonInvalid_enum_policy_type               InvalidInputExceptionReason = "INVALID_ENUM_POLICY_TYPE"
	InvalidInputExceptionReasonInvalid_list_member                    InvalidInputExceptionReason = "INVALID_LIST_MEMBER"
	InvalidInputExceptionReasonMax_length_exceeded                    InvalidInputExceptionReason = "MAX_LENGTH_EXCEEDED"
	InvalidInputExceptionReasonMax_value_exceeded                     InvalidInputExceptionReason = "MAX_VALUE_EXCEEDED"
	InvalidInputExceptionReasonMin_length_exceeded                    InvalidInputExceptionReason = "MIN_LENGTH_EXCEEDED"
	InvalidInputExceptionReasonMin_value_exceeded                     InvalidInputExceptionReason = "MIN_VALUE_EXCEEDED"
	InvalidInputExceptionReasonImmutable_policy                       InvalidInputExceptionReason = "IMMUTABLE_POLICY"
	InvalidInputExceptionReasonInvalid_pattern                        InvalidInputExceptionReason = "INVALID_PATTERN"
	InvalidInputExceptionReasonInvalid_pattern_target_id              InvalidInputExceptionReason = "INVALID_PATTERN_TARGET_ID"
	InvalidInputExceptionReasonInput_required                         InvalidInputExceptionReason = "INPUT_REQUIRED"
	InvalidInputExceptionReasonInvalid_pagination_token               InvalidInputExceptionReason = "INVALID_NEXT_TOKEN"
	InvalidInputExceptionReasonMax_filter_limit_exceeded              InvalidInputExceptionReason = "MAX_LIMIT_EXCEEDED_FILTER"
	InvalidInputExceptionReasonMoving_account_between_different_roots InvalidInputExceptionReason = "MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS"
	InvalidInputExceptionReasonInvalid_full_name_target               InvalidInputExceptionReason = "INVALID_FULL_NAME_TARGET"
	InvalidInputExceptionReasonUnrecognized_service_principal         InvalidInputExceptionReason = "UNRECOGNIZED_SERVICE_PRINCIPAL"
	InvalidInputExceptionReasonInvalid_role_name                      InvalidInputExceptionReason = "INVALID_ROLE_NAME"
	InvalidInputExceptionReasonInvalid_system_tags_parameter          InvalidInputExceptionReason = "INVALID_SYSTEM_TAGS_PARAMETER"
	InvalidInputExceptionReasonDuplicate_tag_key                      InvalidInputExceptionReason = "DUPLICATE_TAG_KEY"
	InvalidInputExceptionReasonTarget_not_supported                   InvalidInputExceptionReason = "TARGET_NOT_SUPPORTED"
)

// Values returns all known values for InvalidInputExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (InvalidInputExceptionReason) Values() []InvalidInputExceptionReason {
	return []InvalidInputExceptionReason{
		"INVALID_PARTY_TYPE_TARGET",
		"INVALID_SYNTAX_ORGANIZATION_ARN",
		"INVALID_SYNTAX_POLICY_ID",
		"INVALID_ENUM",
		"INVALID_ENUM_POLICY_TYPE",
		"INVALID_LIST_MEMBER",
		"MAX_LENGTH_EXCEEDED",
		"MAX_VALUE_EXCEEDED",
		"MIN_LENGTH_EXCEEDED",
		"MIN_VALUE_EXCEEDED",
		"IMMUTABLE_POLICY",
		"INVALID_PATTERN",
		"INVALID_PATTERN_TARGET_ID",
		"INPUT_REQUIRED",
		"INVALID_NEXT_TOKEN",
		"MAX_LIMIT_EXCEEDED_FILTER",
		"MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS",
		"INVALID_FULL_NAME_TARGET",
		"UNRECOGNIZED_SERVICE_PRINCIPAL",
		"INVALID_ROLE_NAME",
		"INVALID_SYSTEM_TAGS_PARAMETER",
		"DUPLICATE_TAG_KEY",
		"TARGET_NOT_SUPPORTED",
	}
}

type OrganizationFeatureSet string

// Enum values for OrganizationFeatureSet
const (
	OrganizationFeatureSetAll                  OrganizationFeatureSet = "ALL"
	OrganizationFeatureSetConsolidated_billing OrganizationFeatureSet = "CONSOLIDATED_BILLING"
)

// Values returns all known values for OrganizationFeatureSet. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OrganizationFeatureSet) Values() []OrganizationFeatureSet {
	return []OrganizationFeatureSet{
		"ALL",
		"CONSOLIDATED_BILLING",
	}
}

type ParentType string

// Enum values for ParentType
const (
	ParentTypeRoot                ParentType = "ROOT"
	ParentTypeOrganizational_unit ParentType = "ORGANIZATIONAL_UNIT"
)

// Values returns all known values for ParentType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ParentType) Values() []ParentType {
	return []ParentType{
		"ROOT",
		"ORGANIZATIONAL_UNIT",
	}
}

type PolicyType string

// Enum values for PolicyType
const (
	PolicyTypeService_control_policy    PolicyType = "SERVICE_CONTROL_POLICY"
	PolicyTypeTag_policy                PolicyType = "TAG_POLICY"
	PolicyTypeBackup_policy             PolicyType = "BACKUP_POLICY"
	PolicyTypeAiservices_opt_out_policy PolicyType = "AISERVICES_OPT_OUT_POLICY"
)

// Values returns all known values for PolicyType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (PolicyType) Values() []PolicyType {
	return []PolicyType{
		"SERVICE_CONTROL_POLICY",
		"TAG_POLICY",
		"BACKUP_POLICY",
		"AISERVICES_OPT_OUT_POLICY",
	}
}

type PolicyTypeStatus string

// Enum values for PolicyTypeStatus
const (
	PolicyTypeStatusEnabled         PolicyTypeStatus = "ENABLED"
	PolicyTypeStatusPending_enable  PolicyTypeStatus = "PENDING_ENABLE"
	PolicyTypeStatusPending_disable PolicyTypeStatus = "PENDING_DISABLE"
)

// Values returns all known values for PolicyTypeStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (PolicyTypeStatus) Values() []PolicyTypeStatus {
	return []PolicyTypeStatus{
		"ENABLED",
		"PENDING_ENABLE",
		"PENDING_DISABLE",
	}
}

type TargetType string

// Enum values for TargetType
const (
	TargetTypeAccount             TargetType = "ACCOUNT"
	TargetTypeOrganizational_unit TargetType = "ORGANIZATIONAL_UNIT"
	TargetTypeRoot                TargetType = "ROOT"
)

// Values returns all known values for TargetType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (TargetType) Values() []TargetType {
	return []TargetType{
		"ACCOUNT",
		"ORGANIZATIONAL_UNIT",
		"ROOT",
	}
}
