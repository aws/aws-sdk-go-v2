// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// You don't have permissions to perform the requested operation. The user or role
// that is making the request must have at least one IAM permissions policy
// attached that grants the required permissions. For more information, see Access
// Management (https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) in the
// IAM User Guide.
type AccessDeniedException struct {
	Message *string
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// The operation that you attempted requires you to have the
// iam:CreateServiceLinkedRole for organizations.amazonaws.com permission so that
// AWS Organizations can create the required service-linked role. You don't have
// that permission.
type AccessDeniedForDependencyException struct {
	Message *string

	Reason AccessDeniedForDependencyExceptionReason
}

func (e *AccessDeniedForDependencyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedForDependencyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedForDependencyException) ErrorCode() string {
	return "AccessDeniedForDependencyException"
}
func (e *AccessDeniedForDependencyException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *AccessDeniedForDependencyException) GetReason() AccessDeniedForDependencyExceptionReason {
	return e.Reason
}
func (e *AccessDeniedForDependencyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedForDependencyException) HasMessage() bool {
	return e.Message != nil
}

// The specified account is already a delegated administrator for this AWS service.
type AccountAlreadyRegisteredException struct {
	Message *string
}

func (e *AccountAlreadyRegisteredException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountAlreadyRegisteredException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountAlreadyRegisteredException) ErrorCode() string {
	return "AccountAlreadyRegisteredException"
}
func (e *AccountAlreadyRegisteredException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccountAlreadyRegisteredException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccountAlreadyRegisteredException) HasMessage() bool {
	return e.Message != nil
}

// We can't find an AWS account with the AccountId that you specified, or the
// account whose credentials you used to make this request isn't a member of an
// organization.
type AccountNotFoundException struct {
	Message *string
}

func (e *AccountNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountNotFoundException) ErrorCode() string             { return "AccountNotFoundException" }
func (e *AccountNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccountNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccountNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The specified account is not a delegated administrator for this AWS service.
type AccountNotRegisteredException struct {
	Message *string
}

func (e *AccountNotRegisteredException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountNotRegisteredException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountNotRegisteredException) ErrorCode() string             { return "AccountNotRegisteredException" }
func (e *AccountNotRegisteredException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccountNotRegisteredException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccountNotRegisteredException) HasMessage() bool {
	return e.Message != nil
}

// You can't invite an existing account to your organization until you verify that
// you own the email address associated with the master account. For more
// information, see Email Address Verification
// (http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_create.html#about-email-verification)
// in the AWS Organizations User Guide.
type AccountOwnerNotVerifiedException struct {
	Message *string
}

func (e *AccountOwnerNotVerifiedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccountOwnerNotVerifiedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccountOwnerNotVerifiedException) ErrorCode() string {
	return "AccountOwnerNotVerifiedException"
}
func (e *AccountOwnerNotVerifiedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccountOwnerNotVerifiedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccountOwnerNotVerifiedException) HasMessage() bool {
	return e.Message != nil
}

// This account is already a member of an organization. An account can belong to
// only one organization at a time.
type AlreadyInOrganizationException struct {
	Message *string
}

func (e *AlreadyInOrganizationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AlreadyInOrganizationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AlreadyInOrganizationException) ErrorCode() string             { return "AlreadyInOrganizationException" }
func (e *AlreadyInOrganizationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AlreadyInOrganizationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AlreadyInOrganizationException) HasMessage() bool {
	return e.Message != nil
}

// Your account isn't a member of an organization. To make this request, you must
// use the credentials of an account that belongs to an organization.
type AWSOrganizationsNotInUseException struct {
	Message *string
}

func (e *AWSOrganizationsNotInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AWSOrganizationsNotInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AWSOrganizationsNotInUseException) ErrorCode() string {
	return "AWSOrganizationsNotInUseException"
}
func (e *AWSOrganizationsNotInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AWSOrganizationsNotInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AWSOrganizationsNotInUseException) HasMessage() bool {
	return e.Message != nil
}

// We can't find an organizational unit (OU) or AWS account with the ChildId that
// you specified.
type ChildNotFoundException struct {
	Message *string
}

func (e *ChildNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ChildNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ChildNotFoundException) ErrorCode() string             { return "ChildNotFoundException" }
func (e *ChildNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ChildNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ChildNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The target of the operation is currently being modified by a different request.
// Try again later.
type ConcurrentModificationException struct {
	Message *string
}

func (e *ConcurrentModificationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConcurrentModificationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConcurrentModificationException) ErrorCode() string {
	return "ConcurrentModificationException"
}
func (e *ConcurrentModificationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConcurrentModificationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConcurrentModificationException) HasMessage() bool {
	return e.Message != nil
}

// Performing this operation violates a minimum or maximum value limit. For
// example, attempting to remove the last service control policy (SCP) from an OU
// or root, inviting or creating too many accounts to the organization, or
// attaching too many policies to an account, OU, or root. This exception includes
// a reason that contains additional information about the violated limit: Some of
// the reasons in the following list might not be applicable to this specific API
// or operation.
//
//     * ACCOUNT_CANNOT_LEAVE_ORGANIZAION: You attempted to remove
// the master account from the organization. You can't remove the master account.
// Instead, after you remove all member accounts, delete the organization itself.
//
//
// * ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA: You attempted to remove an account from the
// organization that doesn't yet have enough information to exist as a standalone
// account. This account requires you to first agree to the AWS Customer Agreement.
// Follow the steps at Removing a member account from your organization
// (http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#orgs_manage_accounts_remove-from-master)in
// the AWS Organizations User Guide.
//
//     *
// ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION: You attempted to remove an
// account from the organization that doesn't yet have enough information to exist
// as a standalone account. This account requires you to first complete phone
// verification. Follow the steps at Removing a member account from your
// organization
// (http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#orgs_manage_accounts_remove-from-master)
// in the AWS Organizations User Guide.
//
//     *
// ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of
// accounts that you can create in one day.
//
//     * ACCOUNT_NUMBER_LIMIT_EXCEEDED:
// You attempted to exceed the limit on the number of accounts in an organization.
// If you need more accounts, contact AWS Support
// (https://console.aws.amazon.com/support/home#/) to request an increase in your
// limit. Or the number of invitations that you tried to send would cause you to
// exceed the limit of accounts in your organization. Send fewer invitations or
// contact AWS Support to request an increase in the number of accounts. Deleted
// and closed accounts still count toward your limit. If you get this exception
// when running a command immediately after creating the organization, wait one
// hour and try again. After an hour, if the command continues to fail with this
// error, contact AWS Support (https://console.aws.amazon.com/support/home#/).
//
//
// * CANNOT_REGISTER_MASTER_AS_DELEGATED_ADMINISTRATOR: You attempted to register
// the master account of the organization as a delegated administrator for an AWS
// service integrated with Organizations. You can designate only a member account
// as a delegated administrator.
//
//     *
// CANNOT_REMOVE_DELEGATED_ADMINISTRATOR_FROM_ORG: You attempted to remove an
// account that is registered as a delegated administrator for a service integrated
// with your organization. To complete this operation, you must first deregister
// this account as a delegated administrator.
//
//     *
// CREATE_ORGANIZATION_IN_BILLING_MODE_UNSUPPORTED_REGION: To create an
// organization in the specified region, you must enable all features mode.
//
//     *
// DELEGATED_ADMINISTRATOR_EXISTS_FOR_THIS_SERVICE: You attempted to register an
// AWS account as a delegated administrator for an AWS service that already has a
// delegated administrator. To complete this operation, you must first deregister
// any existing delegated administrators for this service.
//
//     *
// EMAIL_VERIFICATION_CODE_EXPIRED: The email verification code is only valid for a
// limited period of time. You must resubmit the request and generate a new
// verfication code.
//
//     * HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed
// the number of handshakes that you can send in one day.
//
//     *
// MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE: To create an account in this
// organization, you first must migrate the organization's master account to the
// marketplace that corresponds to the master account's address. For example,
// accounts with India addresses must be associated with the AISPL marketplace. All
// accounts in an organization must be associated with the same marketplace.
//
//     *
// MASTER_ACCOUNT_MISSING_BUSINESS_LICENSE: Applies only to the AWS Regions in
// China. To create an organization, the master must have an valid business
// license. For more information, contact customer support.
//
//     *
// MASTER_ACCOUNT_MISSING_CONTACT_INFO: To complete this operation, you must first
// provide a valid contact address and phone number for the master account. Then
// try the operation again.
//
//     * MASTER_ACCOUNT_NOT_GOVCLOUD_ENABLED: To complete
// this operation, the master account must have an associated account in the AWS
// GovCloud (US-West) Region. For more information, see AWS Organizations
// (http://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-organizations.html)
// in the AWS GovCloud User Guide.
//
//     *
// MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To create an organization with this
// master account, you first must associate a valid payment instrument, such as a
// credit card, with the account. Follow the steps at To leave an organization when
// all required account information has not yet been provided
// (http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info)
// in the AWS Organizations User Guide.
//
//     *
// MAX_DELEGATED_ADMINISTRATORS_FOR_SERVICE_LIMIT_EXCEEDED: You attempted to
// register more delegated administrators than allowed for the service principal.
//
//
// * MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to exceed the number
// of policies of a certain type that can be attached to an entity at one time.
//
//
// * MAX_TAG_LIMIT_EXCEEDED: You have exceeded the number of tags allowed on this
// resource.
//
//     * MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED: To complete this
// operation with this member account, you first must associate a valid payment
// instrument, such as a credit card, with the account. Follow the steps at To
// leave an organization when all required account information has not yet been
// provided
// (http://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_remove.html#leave-without-all-info)
// in the AWS Organizations User Guide.
//
//     *
// MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED: You attempted to detach a policy from
// an entity that would cause the entity to have fewer than the minimum number of
// policies of a certain type required.
//
//     *
// ORGANIZATION_NOT_IN_ALL_FEATURES_MODE: You attempted to perform an operation
// that requires the organization to be configured to support all features. An
// organization that supports only consolidated billing features can't perform this
// operation.
//
//     * OU_DEPTH_LIMIT_EXCEEDED: You attempted to create an OU tree
// that is too many levels deep.
//
//     * OU_NUMBER_LIMIT_EXCEEDED: You attempted to
// exceed the number of OUs that you can have in an organization.
//
//     *
// POLICY_CONTENT_LIMIT_EXCEEDED: You attempted to create a policy that is larger
// than the maximum size.
//
//     * POLICY_NUMBER_LIMIT_EXCEEDED: You attempted to
// exceed the number of policies that you can have in an organization.
//
//     *
// TAG_POLICY_VIOLATION: You attempted to create or update a resource with tags
// that are not compliant with the tag policy requirements for this account.
type ConstraintViolationException struct {
	Message *string

	Reason ConstraintViolationExceptionReason
}

func (e *ConstraintViolationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConstraintViolationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConstraintViolationException) ErrorCode() string             { return "ConstraintViolationException" }
func (e *ConstraintViolationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConstraintViolationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConstraintViolationException) HasMessage() bool {
	return e.Message != nil
}
func (e *ConstraintViolationException) GetReason() ConstraintViolationExceptionReason {
	return e.Reason
}

// We can't find an create account request with the CreateAccountRequestId that you
// specified.
type CreateAccountStatusNotFoundException struct {
	Message *string
}

func (e *CreateAccountStatusNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CreateAccountStatusNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CreateAccountStatusNotFoundException) ErrorCode() string {
	return "CreateAccountStatusNotFoundException"
}
func (e *CreateAccountStatusNotFoundException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *CreateAccountStatusNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CreateAccountStatusNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// We can't find the destination container (a root or OU) with the ParentId that
// you specified.
type DestinationParentNotFoundException struct {
	Message *string
}

func (e *DestinationParentNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DestinationParentNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DestinationParentNotFoundException) ErrorCode() string {
	return "DestinationParentNotFoundException"
}
func (e *DestinationParentNotFoundException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DestinationParentNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DestinationParentNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// That account is already present in the specified destination.
type DuplicateAccountException struct {
	Message *string
}

func (e *DuplicateAccountException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateAccountException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateAccountException) ErrorCode() string             { return "DuplicateAccountException" }
func (e *DuplicateAccountException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DuplicateAccountException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateAccountException) HasMessage() bool {
	return e.Message != nil
}

// A handshake with the same action and target already exists. For example, if you
// invited an account to join your organization, the invited account might already
// have a pending invitation from this organization. If you intend to resend an
// invitation to an account, ensure that existing handshakes that might be
// considered duplicates are canceled or declined.
type DuplicateHandshakeException struct {
	Message *string
}

func (e *DuplicateHandshakeException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateHandshakeException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateHandshakeException) ErrorCode() string             { return "DuplicateHandshakeException" }
func (e *DuplicateHandshakeException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DuplicateHandshakeException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateHandshakeException) HasMessage() bool {
	return e.Message != nil
}

// An OU with the same name already exists.
type DuplicateOrganizationalUnitException struct {
	Message *string
}

func (e *DuplicateOrganizationalUnitException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateOrganizationalUnitException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateOrganizationalUnitException) ErrorCode() string {
	return "DuplicateOrganizationalUnitException"
}
func (e *DuplicateOrganizationalUnitException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DuplicateOrganizationalUnitException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicateOrganizationalUnitException) HasMessage() bool {
	return e.Message != nil
}

// The selected policy is already attached to the specified target.
type DuplicatePolicyAttachmentException struct {
	Message *string
}

func (e *DuplicatePolicyAttachmentException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicatePolicyAttachmentException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicatePolicyAttachmentException) ErrorCode() string {
	return "DuplicatePolicyAttachmentException"
}
func (e *DuplicatePolicyAttachmentException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DuplicatePolicyAttachmentException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicatePolicyAttachmentException) HasMessage() bool {
	return e.Message != nil
}

// A policy with the same name already exists.
type DuplicatePolicyException struct {
	Message *string
}

func (e *DuplicatePolicyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicatePolicyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicatePolicyException) ErrorCode() string             { return "DuplicatePolicyException" }
func (e *DuplicatePolicyException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DuplicatePolicyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DuplicatePolicyException) HasMessage() bool {
	return e.Message != nil
}

// If you ran this action on the master account, this policy type is not enabled.
// If you ran the action on a member account, the account doesn't have an effective
// policy of this type. Contact the administrator of your organization about
// attaching a policy of this type to the account.
type EffectivePolicyNotFoundException struct {
	Message *string
}

func (e *EffectivePolicyNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *EffectivePolicyNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *EffectivePolicyNotFoundException) ErrorCode() string {
	return "EffectivePolicyNotFoundException"
}
func (e *EffectivePolicyNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *EffectivePolicyNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *EffectivePolicyNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// AWS Organizations couldn't perform the operation because your organization
// hasn't finished initializing. This can take up to an hour. Try again later. If
// after one hour you continue to receive this error, contact AWS Support
// (https://console.aws.amazon.com/support/home#/).
type FinalizingOrganizationException struct {
	Message *string
}

func (e *FinalizingOrganizationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *FinalizingOrganizationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *FinalizingOrganizationException) ErrorCode() string {
	return "FinalizingOrganizationException"
}
func (e *FinalizingOrganizationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *FinalizingOrganizationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *FinalizingOrganizationException) HasMessage() bool {
	return e.Message != nil
}

// The specified handshake is already in the requested state. For example, you
// can't accept a handshake that was already accepted.
type HandshakeAlreadyInStateException struct {
	Message *string
}

func (e *HandshakeAlreadyInStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *HandshakeAlreadyInStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *HandshakeAlreadyInStateException) ErrorCode() string {
	return "HandshakeAlreadyInStateException"
}
func (e *HandshakeAlreadyInStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *HandshakeAlreadyInStateException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *HandshakeAlreadyInStateException) HasMessage() bool {
	return e.Message != nil
}

// The requested operation would violate the constraint identified in the reason
// code. Some of the reasons in the following list might not be applicable to this
// specific API or operation:
//
//     * ACCOUNT_NUMBER_LIMIT_EXCEEDED: You attempted
// to exceed the limit on the number of accounts in an organization. Note that
// deleted and closed accounts still count toward your limit. If you get this
// exception immediately after creating the organization, wait one hour and try
// again. If after an hour it continues to fail with this error, contact AWS
// Support (https://console.aws.amazon.com/support/home#/).
//
//     *
// ALREADY_IN_AN_ORGANIZATION: The handshake request is invalid because the invited
// account is already a member of an organization.
//
//     *
// HANDSHAKE_RATE_LIMIT_EXCEEDED: You attempted to exceed the number of handshakes
// that you can send in one day.
//
//     * INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES:
// You can't issue new invitations to join an organization while it's in the
// process of enabling all features. You can resume inviting accounts after you
// finalize the process when all accounts have agreed to the change.
//
//     *
// ORGANIZATION_ALREADY_HAS_ALL_FEATURES: The handshake request is invalid because
// the organization has already enabled all features.
//
//     *
// ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD: The request failed because the
// account is from a different marketplace than the accounts in the organization.
// For example, accounts with India addresses must be associated with the AISPL
// marketplace. All accounts in an organization must be from the same
// marketplace.
//
//     * ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED: You
// attempted to change the membership of an account too quickly after its previous
// change.
//
//     * PAYMENT_INSTRUMENT_REQUIRED: You can't complete the operation
// with an account that doesn't have a payment instrument, such as a credit card,
// associated with it.
type HandshakeConstraintViolationException struct {
	Message *string

	Reason HandshakeConstraintViolationExceptionReason
}

func (e *HandshakeConstraintViolationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *HandshakeConstraintViolationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *HandshakeConstraintViolationException) ErrorCode() string {
	return "HandshakeConstraintViolationException"
}
func (e *HandshakeConstraintViolationException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *HandshakeConstraintViolationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *HandshakeConstraintViolationException) HasMessage() bool {
	return e.Message != nil
}
func (e *HandshakeConstraintViolationException) GetReason() HandshakeConstraintViolationExceptionReason {
	return e.Reason
}

// We can't find a handshake with the HandshakeId that you specified.
type HandshakeNotFoundException struct {
	Message *string
}

func (e *HandshakeNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *HandshakeNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *HandshakeNotFoundException) ErrorCode() string             { return "HandshakeNotFoundException" }
func (e *HandshakeNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *HandshakeNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *HandshakeNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// You can't perform the operation on the handshake in its current state. For
// example, you can't cancel a handshake that was already accepted or accept a
// handshake that was already declined.
type InvalidHandshakeTransitionException struct {
	Message *string
}

func (e *InvalidHandshakeTransitionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidHandshakeTransitionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidHandshakeTransitionException) ErrorCode() string {
	return "InvalidHandshakeTransitionException"
}
func (e *InvalidHandshakeTransitionException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InvalidHandshakeTransitionException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidHandshakeTransitionException) HasMessage() bool {
	return e.Message != nil
}

// The requested operation failed because you provided invalid values for one or
// more of the request parameters. This exception includes a reason that contains
// additional information about the violated limit: Some of the reasons in the
// following list might not be applicable to this specific API or operation.
//
//     *
// IMMUTABLE_POLICY: You specified a policy that is managed by AWS and can't be
// modified.
//
//     * INPUT_REQUIRED: You must include a value for all required
// parameters.
//
//     * INVALID_ENUM: You specified an invalid value.
//
//     *
// INVALID_FULL_NAME_TARGET: You specified a full name that contains invalid
// characters.
//
//     * INVALID_LIST_MEMBER: You provided a list to a parameter that
// contains at least one invalid value.
//
//     * INVALID_PAGINATION_TOKEN: Get the
// value for the NextToken parameter from the response to a previous call of the
// operation.
//
//     * INVALID_PARTY_TYPE_TARGET: You specified the wrong type of
// entity (account, organization, or email) as a party.
//
//     * INVALID_PATTERN: You
// provided a value that doesn't match the required pattern.
//
//     *
// INVALID_PATTERN_TARGET_ID: You specified a policy target ID that doesn't match
// the required pattern.
//
//     * INVALID_ROLE_NAME: You provided a role name that
// isn't valid. A role name can't begin with the reserved prefix
// AWSServiceRoleFor.
//
//     * INVALID_SYNTAX_ORGANIZATION_ARN: You specified an
// invalid Amazon Resource Name (ARN) for the organization.
//
//     *
// INVALID_SYNTAX_POLICY_ID: You specified an invalid policy ID.
//
//     *
// INVALID_SYSTEM_TAGS_PARAMETER: You specified a tag key that is a system tag. You
// can’t add, edit, or delete system tag keys because they're reserved for AWS use.
// System tags don’t count against your tags per resource limit.
//
//     *
// MAX_FILTER_LIMIT_EXCEEDED: You can specify only one filter parameter for the
// operation.
//
//     * MAX_LENGTH_EXCEEDED: You provided a string parameter that is
// longer than allowed.
//
//     * MAX_VALUE_EXCEEDED: You provided a numeric parameter
// that has a larger value than allowed.
//
//     * MIN_LENGTH_EXCEEDED: You provided a
// string parameter that is shorter than allowed.
//
//     * MIN_VALUE_EXCEEDED: You
// provided a numeric parameter that has a smaller value than allowed.
//
//     *
// MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS: You can move an account only between
// entities in the same root.
type InvalidInputException struct {
	Message *string

	Reason InvalidInputExceptionReason
}

func (e *InvalidInputException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidInputException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidInputException) ErrorCode() string             { return "InvalidInputException" }
func (e *InvalidInputException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidInputException) GetReason() InvalidInputExceptionReason {
	return e.Reason
}
func (e *InvalidInputException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidInputException) HasMessage() bool {
	return e.Message != nil
}

// The provided policy document doesn't meet the requirements of the specified
// policy type. For example, the syntax might be incorrect. For details about
// service control policy syntax, see Service Control Policy Syntax
// (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html)
// in the AWS Organizations User Guide.
type MalformedPolicyDocumentException struct {
	Message *string
}

func (e *MalformedPolicyDocumentException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MalformedPolicyDocumentException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MalformedPolicyDocumentException) ErrorCode() string {
	return "MalformedPolicyDocumentException"
}
func (e *MalformedPolicyDocumentException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *MalformedPolicyDocumentException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *MalformedPolicyDocumentException) HasMessage() bool {
	return e.Message != nil
}

// You can't remove a master account from an organization. If you want the master
// account to become a member account in another organization, you must first
// delete the current organization of the master account.
type MasterCannotLeaveOrganizationException struct {
	Message *string
}

func (e *MasterCannotLeaveOrganizationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MasterCannotLeaveOrganizationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MasterCannotLeaveOrganizationException) ErrorCode() string {
	return "MasterCannotLeaveOrganizationException"
}
func (e *MasterCannotLeaveOrganizationException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *MasterCannotLeaveOrganizationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *MasterCannotLeaveOrganizationException) HasMessage() bool {
	return e.Message != nil
}

// The specified OU is not empty. Move all accounts to another root or to other
// OUs, remove all child OUs, and try the operation again.
type OrganizationalUnitNotEmptyException struct {
	Message *string
}

func (e *OrganizationalUnitNotEmptyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OrganizationalUnitNotEmptyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OrganizationalUnitNotEmptyException) ErrorCode() string {
	return "OrganizationalUnitNotEmptyException"
}
func (e *OrganizationalUnitNotEmptyException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *OrganizationalUnitNotEmptyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OrganizationalUnitNotEmptyException) HasMessage() bool {
	return e.Message != nil
}

// We can't find an OU with the OrganizationalUnitId that you specified.
type OrganizationalUnitNotFoundException struct {
	Message *string
}

func (e *OrganizationalUnitNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OrganizationalUnitNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OrganizationalUnitNotFoundException) ErrorCode() string {
	return "OrganizationalUnitNotFoundException"
}
func (e *OrganizationalUnitNotFoundException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *OrganizationalUnitNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OrganizationalUnitNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The organization isn't empty. To delete an organization, you must first remove
// all accounts except the master account, delete all OUs, and delete all policies.
type OrganizationNotEmptyException struct {
	Message *string
}

func (e *OrganizationNotEmptyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OrganizationNotEmptyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OrganizationNotEmptyException) ErrorCode() string             { return "OrganizationNotEmptyException" }
func (e *OrganizationNotEmptyException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OrganizationNotEmptyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OrganizationNotEmptyException) HasMessage() bool {
	return e.Message != nil
}

// We can't find a root or OU with the ParentId that you specified.
type ParentNotFoundException struct {
	Message *string
}

func (e *ParentNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ParentNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ParentNotFoundException) ErrorCode() string             { return "ParentNotFoundException" }
func (e *ParentNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ParentNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ParentNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// Changes to the effective policy are in progress, and its contents can't be
// returned. Try the operation again later.
type PolicyChangesInProgressException struct {
	Message *string
}

func (e *PolicyChangesInProgressException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyChangesInProgressException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyChangesInProgressException) ErrorCode() string {
	return "PolicyChangesInProgressException"
}
func (e *PolicyChangesInProgressException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyChangesInProgressException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyChangesInProgressException) HasMessage() bool {
	return e.Message != nil
}

// The policy is attached to one or more entities. You must detach it from all
// roots, OUs, and accounts before performing this operation.
type PolicyInUseException struct {
	Message *string
}

func (e *PolicyInUseException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyInUseException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyInUseException) ErrorCode() string             { return "PolicyInUseException" }
func (e *PolicyInUseException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyInUseException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyInUseException) HasMessage() bool {
	return e.Message != nil
}

// The policy isn't attached to the specified target in the specified root.
type PolicyNotAttachedException struct {
	Message *string
}

func (e *PolicyNotAttachedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyNotAttachedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyNotAttachedException) ErrorCode() string             { return "PolicyNotAttachedException" }
func (e *PolicyNotAttachedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyNotAttachedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyNotAttachedException) HasMessage() bool {
	return e.Message != nil
}

// We can't find a policy with the PolicyId that you specified.
type PolicyNotFoundException struct {
	Message *string
}

func (e *PolicyNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyNotFoundException) ErrorCode() string             { return "PolicyNotFoundException" }
func (e *PolicyNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The specified policy type is already enabled in the specified root.
type PolicyTypeAlreadyEnabledException struct {
	Message *string
}

func (e *PolicyTypeAlreadyEnabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyTypeAlreadyEnabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyTypeAlreadyEnabledException) ErrorCode() string {
	return "PolicyTypeAlreadyEnabledException"
}
func (e *PolicyTypeAlreadyEnabledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyTypeAlreadyEnabledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyTypeAlreadyEnabledException) HasMessage() bool {
	return e.Message != nil
}

// You can't use the specified policy type with the feature set currently enabled
// for this organization. For example, you can enable SCPs only after you enable
// all features in the organization. For more information, see Managing AWS
// Organizations Policies
// (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html#enable_policies_on_root)in
// the AWS Organizations User Guide.
type PolicyTypeNotAvailableForOrganizationException struct {
	Message *string
}

func (e *PolicyTypeNotAvailableForOrganizationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyTypeNotAvailableForOrganizationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyTypeNotAvailableForOrganizationException) ErrorCode() string {
	return "PolicyTypeNotAvailableForOrganizationException"
}
func (e *PolicyTypeNotAvailableForOrganizationException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *PolicyTypeNotAvailableForOrganizationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyTypeNotAvailableForOrganizationException) HasMessage() bool {
	return e.Message != nil
}

// The specified policy type isn't currently enabled in this root. You can't attach
// policies of the specified type to entities in a root until you enable that type
// in the root. For more information, see Enabling All Features in Your
// Organization
// (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html)
// in the AWS Organizations User Guide.
type PolicyTypeNotEnabledException struct {
	Message *string
}

func (e *PolicyTypeNotEnabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PolicyTypeNotEnabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PolicyTypeNotEnabledException) ErrorCode() string             { return "PolicyTypeNotEnabledException" }
func (e *PolicyTypeNotEnabledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PolicyTypeNotEnabledException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PolicyTypeNotEnabledException) HasMessage() bool {
	return e.Message != nil
}

// We can't find a root with the RootId that you specified.
type RootNotFoundException struct {
	Message *string
}

func (e *RootNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *RootNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *RootNotFoundException) ErrorCode() string             { return "RootNotFoundException" }
func (e *RootNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *RootNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *RootNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// AWS Organizations can't complete your request because of an internal service
// error. Try again later.
type ServiceException struct {
	Message *string
}

func (e *ServiceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServiceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServiceException) ErrorCode() string             { return "ServiceException" }
func (e *ServiceException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *ServiceException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ServiceException) HasMessage() bool {
	return e.Message != nil
}

// We can't find a source root or OU with the ParentId that you specified.
type SourceParentNotFoundException struct {
	Message *string
}

func (e *SourceParentNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SourceParentNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SourceParentNotFoundException) ErrorCode() string             { return "SourceParentNotFoundException" }
func (e *SourceParentNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SourceParentNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SourceParentNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// We can't find a root, OU, or account with the TargetId that you specified.
type TargetNotFoundException struct {
	Message *string
}

func (e *TargetNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TargetNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TargetNotFoundException) ErrorCode() string             { return "TargetNotFoundException" }
func (e *TargetNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TargetNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TargetNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// You have sent too many requests in too short a period of time. The quota helps
// protect against denial-of-service attacks. Try again later. For information
// about quotas that affect AWS Organizations, see Quotas for AWS Organizations
// (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_limits.html)in
// the AWS Organizations User Guide.
type TooManyRequestsException struct {
	Message *string

	Type *string
}

func (e *TooManyRequestsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyRequestsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyRequestsException) ErrorCode() string             { return "TooManyRequestsException" }
func (e *TooManyRequestsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TooManyRequestsException) GetType() string {
	return ptr.ToString(e.Type)
}
func (e *TooManyRequestsException) HasType() bool {
	return e.Type != nil
}
func (e *TooManyRequestsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TooManyRequestsException) HasMessage() bool {
	return e.Message != nil
}

// This action isn't available in the current AWS Region.
type UnsupportedAPIEndpointException struct {
	Message *string
}

func (e *UnsupportedAPIEndpointException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *UnsupportedAPIEndpointException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *UnsupportedAPIEndpointException) ErrorCode() string {
	return "UnsupportedAPIEndpointException"
}
func (e *UnsupportedAPIEndpointException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *UnsupportedAPIEndpointException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *UnsupportedAPIEndpointException) HasMessage() bool {
	return e.Message != nil
}
