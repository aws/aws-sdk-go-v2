// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package organizations

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations/types"
)

const opInviteAccountToOrganization = "InviteAccountToOrganization"

// InviteAccountToOrganizationRequest returns a request value for making API operation for
// AWS Organizations.
//
// Sends an invitation to another account to join your organization as a member
// account. AWS Organizations sends email on your behalf to the email address
// that is associated with the other account's owner. The invitation is implemented
// as a Handshake whose details are in the response.
//
//    * You can invite AWS accounts only from the same seller as the master
//    account. For example, if your organization's master account was created
//    by Amazon Internet Services Pvt. Ltd (AISPL), an AWS seller in India,
//    you can invite only other AISPL accounts to your organization. You can't
//    combine accounts from AISPL and AWS or from any other AWS seller. For
//    more information, see Consolidated Billing in India (http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilliing-India.html).
//
//    * If you receive an exception that indicates that you exceeded your account
//    limits for the organization or that the operation failed because your
//    organization is still initializing, wait one hour and then try again.
//    If the error persists after an hour, contact AWS Support (https://console.aws.amazon.com/support/home#/).
//
// This operation can be called only from the organization's master account.
//
//    // Example sending a request using InviteAccountToOrganizationRequest.
//    req := client.InviteAccountToOrganizationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/organizations-2016-11-28/InviteAccountToOrganization
func (c *Client) InviteAccountToOrganizationRequest(input *types.InviteAccountToOrganizationInput) InviteAccountToOrganizationRequest {
	op := &aws.Operation{
		Name:       opInviteAccountToOrganization,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.InviteAccountToOrganizationInput{}
	}

	req := c.newRequest(op, input, &types.InviteAccountToOrganizationOutput{})
	return InviteAccountToOrganizationRequest{Request: req, Input: input, Copy: c.InviteAccountToOrganizationRequest}
}

// InviteAccountToOrganizationRequest is the request type for the
// InviteAccountToOrganization API operation.
type InviteAccountToOrganizationRequest struct {
	*aws.Request
	Input *types.InviteAccountToOrganizationInput
	Copy  func(*types.InviteAccountToOrganizationInput) InviteAccountToOrganizationRequest
}

// Send marshals and sends the InviteAccountToOrganization API request.
func (r InviteAccountToOrganizationRequest) Send(ctx context.Context) (*InviteAccountToOrganizationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &InviteAccountToOrganizationResponse{
		InviteAccountToOrganizationOutput: r.Request.Data.(*types.InviteAccountToOrganizationOutput),
		response:                          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// InviteAccountToOrganizationResponse is the response type for the
// InviteAccountToOrganization API operation.
type InviteAccountToOrganizationResponse struct {
	*types.InviteAccountToOrganizationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// InviteAccountToOrganization request.
func (r *InviteAccountToOrganizationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
