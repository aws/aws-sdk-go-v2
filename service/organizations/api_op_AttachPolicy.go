// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package organizations

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/jsonrpc"
	"github.com/aws/aws-sdk-go-v2/service/organizations/types"
)

const opAttachPolicy = "AttachPolicy"

// AttachPolicyRequest returns a request value for making API operation for
// AWS Organizations.
//
// Attaches a policy to a root, an organizational unit (OU), or an individual
// account. How the policy affects accounts depends on the type of policy:
//
//    * Service control policy (SCP) - An SCP specifies what permissions can
//    be delegated to users in affected member accounts. The scope of influence
//    for a policy depends on what you attach the policy to: If you attach an
//    SCP to a root, it affects all accounts in the organization. If you attach
//    an SCP to an OU, it affects all accounts in that OU and in any child OUs.
//    If you attach the policy directly to an account, it affects only that
//    account. SCPs are JSON policies that specify the maximum permissions for
//    an organization or organizational unit (OU). You can attach one SCP to
//    a higher level root or OU, and a different SCP to a child OU or to an
//    account. The child policy can further restrict only the permissions that
//    pass through the parent filter and are available to the child. An SCP
//    that is attached to a child can't grant a permission that the parent hasn't
//    already granted. For example, imagine that the parent SCP allows permissions
//    A, B, C, D, and E. The child SCP allows C, D, E, F, and G. The result
//    is that the accounts affected by the child SCP are allowed to use only
//    C, D, and E. They can't use A or B because the child OU filtered them
//    out. They also can't use F and G because the parent OU filtered them out.
//    They can't be granted back by the child SCP; child SCPs can only filter
//    the permissions they receive from the parent SCP. AWS Organizations attaches
//    a default SCP named "FullAWSAccess to every root, OU, and account. This
//    default SCP allows all services and actions, enabling any new child OU
//    or account to inherit the permissions of the parent root or OU. If you
//    detach the default policy, you must replace it with a policy that specifies
//    the permissions that you want to allow in that OU or account. For more
//    information about how AWS Organizations policies permissions work, see
//    Using Service Control Policies (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
//    in the AWS Organizations User Guide.
//
// This operation can be called only from the organization's master account.
//
//    // Example sending a request using AttachPolicyRequest.
//    req := client.AttachPolicyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/organizations-2016-11-28/AttachPolicy
func (c *Client) AttachPolicyRequest(input *types.AttachPolicyInput) AttachPolicyRequest {
	op := &aws.Operation{
		Name:       opAttachPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AttachPolicyInput{}
	}

	req := c.newRequest(op, input, &types.AttachPolicyOutput{})
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return AttachPolicyRequest{Request: req, Input: input, Copy: c.AttachPolicyRequest}
}

// AttachPolicyRequest is the request type for the
// AttachPolicy API operation.
type AttachPolicyRequest struct {
	*aws.Request
	Input *types.AttachPolicyInput
	Copy  func(*types.AttachPolicyInput) AttachPolicyRequest
}

// Send marshals and sends the AttachPolicy API request.
func (r AttachPolicyRequest) Send(ctx context.Context) (*AttachPolicyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AttachPolicyResponse{
		AttachPolicyOutput: r.Request.Data.(*types.AttachPolicyOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AttachPolicyResponse is the response type for the
// AttachPolicy API operation.
type AttachPolicyResponse struct {
	*types.AttachPolicyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AttachPolicy request.
func (r *AttachPolicyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
