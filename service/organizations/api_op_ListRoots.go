// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package organizations

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations/types"
)

const opListRoots = "ListRoots"

// ListRootsRequest returns a request value for making API operation for
// AWS Organizations.
//
// Lists the roots that are defined in the current organization.
//
// Always check the NextToken response parameter for a null value when calling
// a List* operation. These operations can occasionally return an empty set
// of results even when there are more results available. The NextToken response
// parameter value is null only when there are no more results to display.
//
// This operation can be called only from the organization's master account.
//
// Policy types can be enabled and disabled in roots. This is distinct from
// whether they're available in the organization. When you enable all features,
// you make policy types available for use in that organization. Individual
// policy types can then be enabled and disabled in a root. To see the availability
// of a policy type in an organization, use DescribeOrganization.
//
//    // Example sending a request using ListRootsRequest.
//    req := client.ListRootsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/organizations-2016-11-28/ListRoots
func (c *Client) ListRootsRequest(input *types.ListRootsInput) ListRootsRequest {
	op := &aws.Operation{
		Name:       opListRoots,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListRootsInput{}
	}

	req := c.newRequest(op, input, &types.ListRootsOutput{})
	return ListRootsRequest{Request: req, Input: input, Copy: c.ListRootsRequest}
}

// ListRootsRequest is the request type for the
// ListRoots API operation.
type ListRootsRequest struct {
	*aws.Request
	Input *types.ListRootsInput
	Copy  func(*types.ListRootsInput) ListRootsRequest
}

// Send marshals and sends the ListRoots API request.
func (r ListRootsRequest) Send(ctx context.Context) (*ListRootsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListRootsResponse{
		ListRootsOutput: r.Request.Data.(*types.ListRootsOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListRootsRequestPaginator returns a paginator for ListRoots.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListRootsRequest(input)
//   p := organizations.NewListRootsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListRootsPaginator(req ListRootsRequest) ListRootsPaginator {
	return ListRootsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListRootsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListRootsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListRootsPaginator struct {
	aws.Pager
}

func (p *ListRootsPaginator) CurrentPage() *types.ListRootsOutput {
	return p.Pager.CurrentPage().(*types.ListRootsOutput)
}

// ListRootsResponse is the response type for the
// ListRoots API operation.
type ListRootsResponse struct {
	*types.ListRootsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListRoots request.
func (r *ListRootsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
