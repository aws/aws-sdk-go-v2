// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package organizations

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations/types"
)

const opListHandshakesForAccount = "ListHandshakesForAccount"

// ListHandshakesForAccountRequest returns a request value for making API operation for
// AWS Organizations.
//
// Lists the current handshakes that are associated with the account of the
// requesting user.
//
// Handshakes that are ACCEPTED, DECLINED, or CANCELED appear in the results
// of this API for only 30 days after changing to that state. After that, they're
// deleted and no longer accessible.
//
// Always check the NextToken response parameter for a null value when calling
// a List* operation. These operations can occasionally return an empty set
// of results even when there are more results available. The NextToken response
// parameter value is null only when there are no more results to display.
//
// This operation can be called from any account in the organization.
//
//    // Example sending a request using ListHandshakesForAccountRequest.
//    req := client.ListHandshakesForAccountRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/organizations-2016-11-28/ListHandshakesForAccount
func (c *Client) ListHandshakesForAccountRequest(input *types.ListHandshakesForAccountInput) ListHandshakesForAccountRequest {
	op := &aws.Operation{
		Name:       opListHandshakesForAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListHandshakesForAccountInput{}
	}

	req := c.newRequest(op, input, &types.ListHandshakesForAccountOutput{})
	return ListHandshakesForAccountRequest{Request: req, Input: input, Copy: c.ListHandshakesForAccountRequest}
}

// ListHandshakesForAccountRequest is the request type for the
// ListHandshakesForAccount API operation.
type ListHandshakesForAccountRequest struct {
	*aws.Request
	Input *types.ListHandshakesForAccountInput
	Copy  func(*types.ListHandshakesForAccountInput) ListHandshakesForAccountRequest
}

// Send marshals and sends the ListHandshakesForAccount API request.
func (r ListHandshakesForAccountRequest) Send(ctx context.Context) (*ListHandshakesForAccountResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListHandshakesForAccountResponse{
		ListHandshakesForAccountOutput: r.Request.Data.(*types.ListHandshakesForAccountOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListHandshakesForAccountRequestPaginator returns a paginator for ListHandshakesForAccount.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListHandshakesForAccountRequest(input)
//   p := organizations.NewListHandshakesForAccountRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListHandshakesForAccountPaginator(req ListHandshakesForAccountRequest) ListHandshakesForAccountPaginator {
	return ListHandshakesForAccountPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListHandshakesForAccountInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListHandshakesForAccountPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListHandshakesForAccountPaginator struct {
	aws.Pager
}

func (p *ListHandshakesForAccountPaginator) CurrentPage() *types.ListHandshakesForAccountOutput {
	return p.Pager.CurrentPage().(*types.ListHandshakesForAccountOutput)
}

// ListHandshakesForAccountResponse is the response type for the
// ListHandshakesForAccount API operation.
type ListHandshakesForAccountResponse struct {
	*types.ListHandshakesForAccountOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListHandshakesForAccount request.
func (r *ListHandshakesForAccountResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
