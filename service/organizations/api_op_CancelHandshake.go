// Code generated by smithy-go-codegen DO NOT EDIT.

package organizations

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/organizations/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Cancels a handshake. Canceling a handshake sets the handshake state to CANCELED.
// This operation can be called only from the account that originated the
// handshake. The recipient of the handshake can't cancel it, but can use
// DeclineHandshake () instead. After a handshake is canceled, the recipient can no
// longer respond to that handshake. After you cancel a handshake, it continues to
// appear in the results of relevant APIs for only 30 days. After that, it's
// deleted.
func (c *Client) CancelHandshake(ctx context.Context, params *CancelHandshakeInput, optFns ...func(*Options)) (*CancelHandshakeOutput, error) {
	stack := middleware.NewStack("CancelHandshake", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCancelHandshakeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCancelHandshakeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCancelHandshake(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CancelHandshake",
			Err:           err,
		}
	}
	out := result.(*CancelHandshakeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CancelHandshakeInput struct {
	// The unique identifier (ID) of the handshake that you want to cancel. You can get
	// the ID from the ListHandshakesForOrganization () operation. The regex pattern
	// (http://wikipedia.org/wiki/regex) for handshake ID string requires "h-" followed
	// by from 8 to 32 lowercase letters or digits.
	HandshakeId *string
}

type CancelHandshakeOutput struct {
	// A structure that contains details about the handshake that you canceled.
	Handshake *types.Handshake

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCancelHandshakeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCancelHandshake{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCancelHandshake{}, middleware.After)
}

func newServiceMetadataMiddleware_opCancelHandshake(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "organizations",
		OperationName: "CancelHandshake",
	}
}
