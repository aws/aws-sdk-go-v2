// Code generated by smithy-go-codegen DO NOT EDIT.

package organizations

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Moves an account from its current source parent root or organizational unit (OU)
// to the specified destination parent root or OU. This operation can be called
// only from the organization's management account.
func (c *Client) MoveAccount(ctx context.Context, params *MoveAccountInput, optFns ...func(*Options)) (*MoveAccountOutput, error) {
	if params == nil {
		params = &MoveAccountInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "MoveAccount", params, optFns, addOperationMoveAccountMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*MoveAccountOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type MoveAccountInput struct {

	// The unique identifier (ID) of the account that you want to move. The regex
	// pattern (http://wikipedia.org/wiki/regex) for an account ID string requires
	// exactly 12 digits.
	//
	// This member is required.
	AccountId *string

	// The unique identifier (ID) of the root or organizational unit that you want to
	// move the account to. The regex pattern (http://wikipedia.org/wiki/regex) for a
	// parent ID string requires one of the following:
	//
	// * Root - A string that begins
	// with "r-" followed by from 4 to 32 lowercase letters or digits.
	//
	// *
	// Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to
	// 32 lowercase letters or digits (the ID of the root that the OU is in). This
	// string is followed by a second "-" dash and from 8 to 32 additional lowercase
	// letters or digits.
	//
	// This member is required.
	DestinationParentId *string

	// The unique identifier (ID) of the root or organizational unit that you want to
	// move the account from. The regex pattern (http://wikipedia.org/wiki/regex) for a
	// parent ID string requires one of the following:
	//
	// * Root - A string that begins
	// with "r-" followed by from 4 to 32 lowercase letters or digits.
	//
	// *
	// Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to
	// 32 lowercase letters or digits (the ID of the root that the OU is in). This
	// string is followed by a second "-" dash and from 8 to 32 additional lowercase
	// letters or digits.
	//
	// This member is required.
	SourceParentId *string
}

type MoveAccountOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationMoveAccountMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpMoveAccount{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpMoveAccount{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpMoveAccountValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opMoveAccount(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opMoveAccount(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "organizations",
		OperationName: "MoveAccount",
	}
}
