// Code generated by smithy-go-codegen DO NOT EDIT.

package organizations

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Moves an account from its current source parent root or organizational unit (OU)
// to the specified destination parent root or OU. This operation can be called
// only from the organization's master account.
func (c *Client) MoveAccount(ctx context.Context, params *MoveAccountInput, optFns ...func(*Options)) (*MoveAccountOutput, error) {
	stack := middleware.NewStack("MoveAccount", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpMoveAccountMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpMoveAccountValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opMoveAccount(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "MoveAccount",
			Err:           err,
		}
	}
	out := result.(*MoveAccountOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type MoveAccountInput struct {
	// The unique identifier (ID) of the account that you want to move. The regex
	// pattern (http://wikipedia.org/wiki/regex) for an account ID string requires
	// exactly 12 digits.
	AccountId *string
	// The unique identifier (ID) of the root or organizational unit that you want to
	// move the account to. The regex pattern (http://wikipedia.org/wiki/regex) for a
	// parent ID string requires one of the following:
	//
	//     * Root - A string that
	// begins with "r-" followed by from 4 to 32 lowercase letters or digits.
	//
	//     *
	// Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to
	// 32 lowercase letters or digits (the ID of the root that the OU is in). This
	// string is followed by a second "-" dash and from 8 to 32 additional lowercase
	// letters or digits.
	DestinationParentId *string
	// The unique identifier (ID) of the root or organizational unit that you want to
	// move the account from. The regex pattern (http://wikipedia.org/wiki/regex) for a
	// parent ID string requires one of the following:
	//
	//     * Root - A string that
	// begins with "r-" followed by from 4 to 32 lowercase letters or digits.
	//
	//     *
	// Organizational unit (OU) - A string that begins with "ou-" followed by from 4 to
	// 32 lowercase letters or digits (the ID of the root that the OU is in). This
	// string is followed by a second "-" dash and from 8 to 32 additional lowercase
	// letters or digits.
	SourceParentId *string
}

type MoveAccountOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpMoveAccountMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpMoveAccount{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpMoveAccount{}, middleware.After)
}

func newServiceMetadataMiddleware_opMoveAccount(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "organizations",
		OperationName: "MoveAccount",
	}
}
