// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opListVaults = "ListVaults"

// ListVaultsRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation lists all vaults owned by the calling user's account. The
// list returned in the response is ASCII-sorted by vault name.
//
// By default, this operation returns up to 10 items. If there are more vaults
// to list, the response marker field contains the vault Amazon Resource Name
// (ARN) at which to continue the list with a new List Vaults request; otherwise,
// the marker field is null. To return a list of vaults that begins at a specific
// vault, set the marker request parameter to the vault ARN you obtained from
// a previous List Vaults request. You can also limit the number of vaults returned
// in the response by specifying the limit parameter in the request.
//
// An AWS account has full permission to perform all operations (actions). However,
// AWS Identity and Access Management (IAM) users don't have any permissions
// by default. You must grant them explicit permission to perform specific actions.
// For more information, see Access Control Using AWS Identity and Access Management
// (IAM) (https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).
//
// For conceptual information and underlying REST API, see Retrieving Vault
// Metadata in Amazon S3 Glacier (https://docs.aws.amazon.com/amazonglacier/latest/dev/retrieving-vault-info.html)
// and List Vaults (https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vaults-get.html)
// in the Amazon Glacier Developer Guide.
//
//    // Example sending a request using ListVaultsRequest.
//    req := client.ListVaultsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) ListVaultsRequest(input *types.ListVaultsInput) ListVaultsRequest {
	op := &aws.Operation{
		Name:       opListVaults,
		HTTPMethod: "GET",
		HTTPPath:   "/{accountId}/vaults",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListVaultsInput{}
	}

	req := c.newRequest(op, input, &types.ListVaultsOutput{})
	return ListVaultsRequest{Request: req, Input: input, Copy: c.ListVaultsRequest}
}

// ListVaultsRequest is the request type for the
// ListVaults API operation.
type ListVaultsRequest struct {
	*aws.Request
	Input *types.ListVaultsInput
	Copy  func(*types.ListVaultsInput) ListVaultsRequest
}

// Send marshals and sends the ListVaults API request.
func (r ListVaultsRequest) Send(ctx context.Context) (*ListVaultsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListVaultsResponse{
		ListVaultsOutput: r.Request.Data.(*types.ListVaultsOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListVaultsRequestPaginator returns a paginator for ListVaults.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListVaultsRequest(input)
//   p := glacier.NewListVaultsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListVaultsPaginator(req ListVaultsRequest) ListVaultsPaginator {
	return ListVaultsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListVaultsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListVaultsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListVaultsPaginator struct {
	aws.Pager
}

func (p *ListVaultsPaginator) CurrentPage() *types.ListVaultsOutput {
	return p.Pager.CurrentPage().(*types.ListVaultsOutput)
}

// ListVaultsResponse is the response type for the
// ListVaults API operation.
type ListVaultsResponse struct {
	*types.ListVaultsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListVaults request.
func (r *ListVaultsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
