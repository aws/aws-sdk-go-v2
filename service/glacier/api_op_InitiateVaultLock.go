// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opInitiateVaultLock = "InitiateVaultLock"

// InitiateVaultLockRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation initiates the vault locking process by doing the following:
//
//    * Installing a vault lock policy on the specified vault.
//
//    * Setting the lock state of vault lock to InProgress.
//
//    * Returning a lock ID, which is used to complete the vault locking process.
//
// You can set one vault lock policy for each vault and this policy can be up
// to 20 KB in size. For more information about vault lock policies, see Amazon
// Glacier Access Control with Vault Lock Policies (https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html).
//
// You must complete the vault locking process within 24 hours after the vault
// lock enters the InProgress state. After the 24 hour window ends, the lock
// ID expires, the vault automatically exits the InProgress state, and the vault
// lock policy is removed from the vault. You call CompleteVaultLock to complete
// the vault locking process by setting the state of the vault lock to Locked.
//
// After a vault lock is in the Locked state, you cannot initiate a new vault
// lock for the vault.
//
// You can abort the vault locking process by calling AbortVaultLock. You can
// get the state of the vault lock by calling GetVaultLock. For more information
// about the vault locking process, Amazon Glacier Vault Lock (https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html).
//
// If this operation is called when the vault lock is in the InProgress state,
// the operation returns an AccessDeniedException error. When the vault lock
// is in the InProgress state you must call AbortVaultLock before you can initiate
// a new vault lock policy.
//
//    // Example sending a request using InitiateVaultLockRequest.
//    req := client.InitiateVaultLockRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) InitiateVaultLockRequest(input *types.InitiateVaultLockInput) InitiateVaultLockRequest {
	op := &aws.Operation{
		Name:       opInitiateVaultLock,
		HTTPMethod: "POST",
		HTTPPath:   "/{accountId}/vaults/{vaultName}/lock-policy",
	}

	if input == nil {
		input = &types.InitiateVaultLockInput{}
	}

	req := c.newRequest(op, input, &types.InitiateVaultLockOutput{})
	return InitiateVaultLockRequest{Request: req, Input: input, Copy: c.InitiateVaultLockRequest}
}

// InitiateVaultLockRequest is the request type for the
// InitiateVaultLock API operation.
type InitiateVaultLockRequest struct {
	*aws.Request
	Input *types.InitiateVaultLockInput
	Copy  func(*types.InitiateVaultLockInput) InitiateVaultLockRequest
}

// Send marshals and sends the InitiateVaultLock API request.
func (r InitiateVaultLockRequest) Send(ctx context.Context) (*InitiateVaultLockResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &InitiateVaultLockResponse{
		InitiateVaultLockOutput: r.Request.Data.(*types.InitiateVaultLockOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// InitiateVaultLockResponse is the response type for the
// InitiateVaultLock API operation.
type InitiateVaultLockResponse struct {
	*types.InitiateVaultLockOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// InitiateVaultLock request.
func (r *InitiateVaultLockResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
