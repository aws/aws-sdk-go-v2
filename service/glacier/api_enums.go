// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

type ActionCode string

// Enum values for ActionCode
const (
	ActionCodeArchiveRetrieval   ActionCode = "ArchiveRetrieval"
	ActionCodeInventoryRetrieval ActionCode = "InventoryRetrieval"
	ActionCodeSelect             ActionCode = "Select"
)

func (enum ActionCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ActionCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type CannedACL string

// Enum values for CannedACL
const (
	CannedACLPrivate                CannedACL = "private"
	CannedACLPublicRead             CannedACL = "public-read"
	CannedACLPublicReadWrite        CannedACL = "public-read-write"
	CannedACLAwsExecRead            CannedACL = "aws-exec-read"
	CannedACLAuthenticatedRead      CannedACL = "authenticated-read"
	CannedACLBucketOwnerRead        CannedACL = "bucket-owner-read"
	CannedACLBucketOwnerFullControl CannedACL = "bucket-owner-full-control"
)

func (enum CannedACL) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum CannedACL) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EncryptionType string

// Enum values for EncryptionType
const (
	EncryptionTypeAwsKms EncryptionType = "aws:kms"
	EncryptionTypeAes256 EncryptionType = "AES256"
)

func (enum EncryptionType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EncryptionType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ExpressionType string

// Enum values for ExpressionType
const (
	ExpressionTypeSql ExpressionType = "SQL"
)

func (enum ExpressionType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ExpressionType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FileHeaderInfo string

// Enum values for FileHeaderInfo
const (
	FileHeaderInfoUse    FileHeaderInfo = "USE"
	FileHeaderInfoIgnore FileHeaderInfo = "IGNORE"
	FileHeaderInfoNone   FileHeaderInfo = "NONE"
)

func (enum FileHeaderInfo) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FileHeaderInfo) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type Permission string

// Enum values for Permission
const (
	PermissionFullControl Permission = "FULL_CONTROL"
	PermissionWrite       Permission = "WRITE"
	PermissionWriteAcp    Permission = "WRITE_ACP"
	PermissionRead        Permission = "READ"
	PermissionReadAcp     Permission = "READ_ACP"
)

func (enum Permission) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Permission) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type QuoteFields string

// Enum values for QuoteFields
const (
	QuoteFieldsAlways   QuoteFields = "ALWAYS"
	QuoteFieldsAsneeded QuoteFields = "ASNEEDED"
)

func (enum QuoteFields) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum QuoteFields) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StatusCode string

// Enum values for StatusCode
const (
	StatusCodeInProgress StatusCode = "InProgress"
	StatusCodeSucceeded  StatusCode = "Succeeded"
	StatusCodeFailed     StatusCode = "Failed"
)

func (enum StatusCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StatusCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StorageClass string

// Enum values for StorageClass
const (
	StorageClassStandard          StorageClass = "STANDARD"
	StorageClassReducedRedundancy StorageClass = "REDUCED_REDUNDANCY"
	StorageClassStandardIa        StorageClass = "STANDARD_IA"
)

func (enum StorageClass) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StorageClass) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type Type string

// Enum values for Type
const (
	TypeAmazonCustomerByEmail Type = "AmazonCustomerByEmail"
	TypeCanonicalUser         Type = "CanonicalUser"
	TypeGroup                 Type = "Group"
)

func (enum Type) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Type) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
