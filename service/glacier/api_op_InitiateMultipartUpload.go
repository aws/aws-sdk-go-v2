// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opInitiateMultipartUpload = "InitiateMultipartUpload"

// InitiateMultipartUploadRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation initiates a multipart upload. Amazon S3 Glacier creates a
// multipart upload resource and returns its ID in the response. The multipart
// upload ID is used in subsequent requests to upload parts of an archive (see
// UploadMultipartPart).
//
// When you initiate a multipart upload, you specify the part size in number
// of bytes. The part size must be a megabyte (1024 KB) multiplied by a power
// of 2-for example, 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608
// (8 MB), and so on. The minimum allowable part size is 1 MB, and the maximum
// is 4 GB.
//
// Every part you upload to this resource (see UploadMultipartPart), except
// the last one, must have the same size. The last one can be the same size
// or smaller. For example, suppose you want to upload a 16.2 MB file. If you
// initiate the multipart upload with a part size of 4 MB, you will upload four
// parts of 4 MB each and one part of 0.2 MB.
//
// You don't need to know the size of the archive when you start a multipart
// upload because Amazon S3 Glacier does not require you to specify the overall
// archive size.
//
// After you complete the multipart upload, Amazon S3 Glacier (Glacier) removes
// the multipart upload resource referenced by the ID. Glacier also removes
// the multipart upload resource if you cancel the multipart upload or it may
// be removed if there is no activity for a period of 24 hours.
//
// An AWS account has full permission to perform all operations (actions). However,
// AWS Identity and Access Management (IAM) users don't have any permissions
// by default. You must grant them explicit permission to perform specific actions.
// For more information, see Access Control Using AWS Identity and Access Management
// (IAM) (https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).
//
// For conceptual information and underlying REST API, see Uploading Large Archives
// in Parts (Multipart Upload) (https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html)
// and Initiate Multipart Upload (https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-initiate-upload.html)
// in the Amazon Glacier Developer Guide.
//
//    // Example sending a request using InitiateMultipartUploadRequest.
//    req := client.InitiateMultipartUploadRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) InitiateMultipartUploadRequest(input *types.InitiateMultipartUploadInput) InitiateMultipartUploadRequest {
	op := &aws.Operation{
		Name:       opInitiateMultipartUpload,
		HTTPMethod: "POST",
		HTTPPath:   "/{accountId}/vaults/{vaultName}/multipart-uploads",
	}

	if input == nil {
		input = &types.InitiateMultipartUploadInput{}
	}

	req := c.newRequest(op, input, &types.InitiateMultipartUploadOutput{})
	return InitiateMultipartUploadRequest{Request: req, Input: input, Copy: c.InitiateMultipartUploadRequest}
}

// InitiateMultipartUploadRequest is the request type for the
// InitiateMultipartUpload API operation.
type InitiateMultipartUploadRequest struct {
	*aws.Request
	Input *types.InitiateMultipartUploadInput
	Copy  func(*types.InitiateMultipartUploadInput) InitiateMultipartUploadRequest
}

// Send marshals and sends the InitiateMultipartUpload API request.
func (r InitiateMultipartUploadRequest) Send(ctx context.Context) (*InitiateMultipartUploadResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &InitiateMultipartUploadResponse{
		InitiateMultipartUploadOutput: r.Request.Data.(*types.InitiateMultipartUploadOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// InitiateMultipartUploadResponse is the response type for the
// InitiateMultipartUpload API operation.
type InitiateMultipartUploadResponse struct {
	*types.InitiateMultipartUploadOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// InitiateMultipartUpload request.
func (r *InitiateMultipartUploadResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
