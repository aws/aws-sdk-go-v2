// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opGetVaultNotifications = "GetVaultNotifications"

// GetVaultNotificationsRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation retrieves the notification-configuration subresource of the
// specified vault.
//
// For information about setting a notification configuration on a vault, see
// SetVaultNotifications. If a notification configuration for a vault is not
// set, the operation returns a 404 Not Found error. For more information about
// vault notifications, see Configuring Vault Notifications in Amazon S3 Glacier
// (https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html).
//
// An AWS account has full permission to perform all operations (actions). However,
// AWS Identity and Access Management (IAM) users don't have any permissions
// by default. You must grant them explicit permission to perform specific actions.
// For more information, see Access Control Using AWS Identity and Access Management
// (IAM) (https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).
//
// For conceptual information and underlying REST API, see Configuring Vault
// Notifications in Amazon S3 Glacier (https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html)
// and Get Vault Notification Configuration (https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-get.html)
// in the Amazon Glacier Developer Guide.
//
//    // Example sending a request using GetVaultNotificationsRequest.
//    req := client.GetVaultNotificationsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) GetVaultNotificationsRequest(input *types.GetVaultNotificationsInput) GetVaultNotificationsRequest {
	op := &aws.Operation{
		Name:       opGetVaultNotifications,
		HTTPMethod: "GET",
		HTTPPath:   "/{accountId}/vaults/{vaultName}/notification-configuration",
	}

	if input == nil {
		input = &types.GetVaultNotificationsInput{}
	}

	req := c.newRequest(op, input, &types.GetVaultNotificationsOutput{})
	return GetVaultNotificationsRequest{Request: req, Input: input, Copy: c.GetVaultNotificationsRequest}
}

// GetVaultNotificationsRequest is the request type for the
// GetVaultNotifications API operation.
type GetVaultNotificationsRequest struct {
	*aws.Request
	Input *types.GetVaultNotificationsInput
	Copy  func(*types.GetVaultNotificationsInput) GetVaultNotificationsRequest
}

// Send marshals and sends the GetVaultNotifications API request.
func (r GetVaultNotificationsRequest) Send(ctx context.Context) (*GetVaultNotificationsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetVaultNotificationsResponse{
		GetVaultNotificationsOutput: r.Request.Data.(*types.GetVaultNotificationsOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetVaultNotificationsResponse is the response type for the
// GetVaultNotifications API operation.
type GetVaultNotificationsResponse struct {
	*types.GetVaultNotificationsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetVaultNotifications request.
func (r *GetVaultNotificationsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
