// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opDeleteVaultNotifications = "DeleteVaultNotifications"

// DeleteVaultNotificationsRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation deletes the notification configuration set for a vault. The
// operation is eventually consistent; that is, it might take some time for
// Amazon S3 Glacier to completely disable the notifications and you might still
// receive some notifications for a short time after you send the delete request.
//
// An AWS account has full permission to perform all operations (actions). However,
// AWS Identity and Access Management (IAM) users don't have any permissions
// by default. You must grant them explicit permission to perform specific actions.
// For more information, see Access Control Using AWS Identity and Access Management
// (IAM) (https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).
//
// For conceptual information and underlying REST API, see Configuring Vault
// Notifications in Amazon S3 Glacier (https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html)
// and Delete Vault Notification Configuration (https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-delete.html)
// in the Amazon S3 Glacier Developer Guide.
//
//    // Example sending a request using DeleteVaultNotificationsRequest.
//    req := client.DeleteVaultNotificationsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) DeleteVaultNotificationsRequest(input *types.DeleteVaultNotificationsInput) DeleteVaultNotificationsRequest {
	op := &aws.Operation{
		Name:       opDeleteVaultNotifications,
		HTTPMethod: "DELETE",
		HTTPPath:   "/{accountId}/vaults/{vaultName}/notification-configuration",
	}

	if input == nil {
		input = &types.DeleteVaultNotificationsInput{}
	}

	req := c.newRequest(op, input, &types.DeleteVaultNotificationsOutput{})
	req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return DeleteVaultNotificationsRequest{Request: req, Input: input, Copy: c.DeleteVaultNotificationsRequest}
}

// DeleteVaultNotificationsRequest is the request type for the
// DeleteVaultNotifications API operation.
type DeleteVaultNotificationsRequest struct {
	*aws.Request
	Input *types.DeleteVaultNotificationsInput
	Copy  func(*types.DeleteVaultNotificationsInput) DeleteVaultNotificationsRequest
}

// Send marshals and sends the DeleteVaultNotifications API request.
func (r DeleteVaultNotificationsRequest) Send(ctx context.Context) (*DeleteVaultNotificationsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeleteVaultNotificationsResponse{
		DeleteVaultNotificationsOutput: r.Request.Data.(*types.DeleteVaultNotificationsOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeleteVaultNotificationsResponse is the response type for the
// DeleteVaultNotifications API operation.
type DeleteVaultNotificationsResponse struct {
	*types.DeleteVaultNotificationsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeleteVaultNotifications request.
func (r *DeleteVaultNotificationsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
