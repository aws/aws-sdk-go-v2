// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opDeleteArchive = "DeleteArchive"

// DeleteArchiveRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation deletes an archive from a vault. Subsequent requests to initiate
// a retrieval of this archive will fail. Archive retrievals that are in progress
// for this archive ID may or may not succeed according to the following scenarios:
//
//    * If the archive retrieval job is actively preparing the data for download
//    when Amazon S3 Glacier receives the delete archive request, the archival
//    retrieval operation might fail.
//
//    * If the archive retrieval job has successfully prepared the archive for
//    download when Amazon S3 Glacier receives the delete archive request, you
//    will be able to download the output.
//
// This operation is idempotent. Attempting to delete an already-deleted archive
// does not result in an error.
//
// An AWS account has full permission to perform all operations (actions). However,
// AWS Identity and Access Management (IAM) users don't have any permissions
// by default. You must grant them explicit permission to perform specific actions.
// For more information, see Access Control Using AWS Identity and Access Management
// (IAM) (https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).
//
// For conceptual information and underlying REST API, see Deleting an Archive
// in Amazon Glacier (https://docs.aws.amazon.com/amazonglacier/latest/dev/deleting-an-archive.html)
// and Delete Archive (https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-delete.html)
// in the Amazon Glacier Developer Guide.
//
//    // Example sending a request using DeleteArchiveRequest.
//    req := client.DeleteArchiveRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) DeleteArchiveRequest(input *types.DeleteArchiveInput) DeleteArchiveRequest {
	op := &aws.Operation{
		Name:       opDeleteArchive,
		HTTPMethod: "DELETE",
		HTTPPath:   "/{accountId}/vaults/{vaultName}/archives/{archiveId}",
	}

	if input == nil {
		input = &types.DeleteArchiveInput{}
	}

	req := c.newRequest(op, input, &types.DeleteArchiveOutput{})
	req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return DeleteArchiveRequest{Request: req, Input: input, Copy: c.DeleteArchiveRequest}
}

// DeleteArchiveRequest is the request type for the
// DeleteArchive API operation.
type DeleteArchiveRequest struct {
	*aws.Request
	Input *types.DeleteArchiveInput
	Copy  func(*types.DeleteArchiveInput) DeleteArchiveRequest
}

// Send marshals and sends the DeleteArchive API request.
func (r DeleteArchiveRequest) Send(ctx context.Context) (*DeleteArchiveResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeleteArchiveResponse{
		DeleteArchiveOutput: r.Request.Data.(*types.DeleteArchiveOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeleteArchiveResponse is the response type for the
// DeleteArchive API operation.
type DeleteArchiveResponse struct {
	*types.DeleteArchiveOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeleteArchive request.
func (r *DeleteArchiveResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
