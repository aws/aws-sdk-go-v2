// Code generated by smithy-go-codegen DO NOT EDIT.

package glacier

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"net/http"
	"time"
)

const ServiceID = "Glacier"
const ServiceAPIVersion = "2012-06-01"

// Amazon S3 Glacier (Glacier) is a storage solution for "cold data."  <p>Glacier
// is an extremely low-cost storage service that provides secure, durable, and
// easy-to-use storage for data backup and archival. With Glacier, customers can
// store their data cost effectively for months, years, or decades. Glacier also
// enables customers to offload the administrative burdens of operating and scaling
// storage to AWS, so they don't have to worry about capacity planning, hardware
// provisioning, data replication, hardware failure and recovery, or time-consuming
// hardware migrations.</p> <p>Glacier is a great storage choice when low storage
// cost is paramount and your data is rarely retrieved. If your application
// requires fast or frequent access to your data, consider using Amazon S3. For
// more information, see <a href="http://aws.amazon.com/s3/">Amazon Simple Storage
// Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format.
// There is no maximum limit on the total amount of data you can store in
// Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you
// begin by reading the following sections in the <i>Amazon S3 Glacier Developer
// Guide</i>:</p> <ul> <li> <p> <a
// href="https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html">What
// is Amazon S3 Glacier</a> - This section of the Developer Guide describes the
// underlying data model, the operations it supports, and the AWS SDKs that you can
// use to interact with the service.</p> </li> <li> <p> <a
// href="https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html">Getting
// Started with Amazon S3 Glacier</a> - The Getting Started section walks you
// through the process of creating a vault, uploading archives, creating jobs to
// download archives, retrieving the job output, and deleting archives.</p> </li>
// </ul>
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveHTTPSignerV4(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []func(*middleware.Stack) error

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// Signature Version 4 (SigV4) Signer
	HTTPSignerV4 HTTPSignerV4

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]func(*middleware.Stack) error, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}
func (c *Client) invokeOperation(ctx context.Context, opID string, params interface{}, optFns []func(*Options), stackFns ...func(*middleware.Stack, Options) error) (result interface{}, metadata middleware.Metadata, err error) {
	stack := middleware.NewStack(opID, smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}

	for _, fn := range stackFns {
		if err := fn(stack, options); err != nil {
			return nil, metadata, err
		}
	}

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, metadata, err
		}
	}

	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err = handler.Handle(ctx, params)
	if err != nil {
		err = &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: opID,
			Err:           err,
		}
	}
	return result, metadata, err
}

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
		APIOptions:  cfg.APIOptions,
	}
	resolveAWSEndpointResolver(cfg, &opts)
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func resolveAWSEndpointResolver(cfg aws.Config, o *Options) {
	if cfg.EndpointResolver == nil {
		return
	}
	o.EndpointResolver = WithEndpointResolver(cfg.EndpointResolver, NewDefaultEndpointResolver())
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("glacier")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, o.HTTPSignerV4), middleware.After)
}

type HTTPSignerV4 interface {
	SignHTTP(ctx context.Context, credentials aws.Credentials, r *http.Request, payloadHash string, service string, region string, signingTime time.Time) error
}

func resolveHTTPSignerV4(o *Options) {
	if o.HTTPSignerV4 != nil {
		return
	}
	o.HTTPSignerV4 = v4.NewSigner()
}

func addRetryMiddlewares(stack *middleware.Stack, o Options) error {
	mo := retry.AddRetryMiddlewaresOptions{
		Retryer: o.Retryer,
	}
	return retry.AddRetryMiddlewares(stack, mo)
}

func addRequestIDRetrieverMiddleware(stack *middleware.Stack) {
	awsmiddleware.AddRequestIDRetrieverMiddleware(stack)
}

func addResponseErrorMiddleware(stack *middleware.Stack) {
	awshttp.AddResponseErrorMiddleware(stack)
}

// setDefaultAccountID sets the AccountID to the given value if the current value
// is nil
func setDefaultAccountID(input interface{}, accountID string) interface{} {
	switch i := input.(type) {
	case *GetVaultNotificationsInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *AddTagsToVaultInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *InitiateMultipartUploadInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *DeleteVaultInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *AbortVaultLockInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *InitiateJobInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *DeleteVaultAccessPolicyInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *GetVaultLockInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *InitiateVaultLockInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *ListPartsInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *GetDataRetrievalPolicyInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *CompleteVaultLockInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *SetVaultAccessPolicyInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *DescribeVaultInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *SetDataRetrievalPolicyInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *CreateVaultInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *DeleteVaultNotificationsInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *SetVaultNotificationsInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *ListProvisionedCapacityInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *UploadArchiveInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *UploadMultipartPartInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *AbortMultipartUploadInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *GetJobOutputInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *GetVaultAccessPolicyInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *PurchaseProvisionedCapacityInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *ListTagsForVaultInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *ListJobsInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *DescribeJobInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *ListMultipartUploadsInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *RemoveTagsFromVaultInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *CompleteMultipartUploadInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *ListVaultsInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	case *DeleteArchiveInput:
		if i.AccountId == nil {
			i.AccountId = &accountID
		}
		return i

	default:
		return input
	}
}
