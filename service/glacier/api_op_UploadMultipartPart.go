// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opUploadMultipartPart = "UploadMultipartPart"

// UploadMultipartPartRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation uploads a part of an archive. You can upload archive parts
// in any order. You can also upload them in parallel. You can upload up to
// 10,000 parts for a multipart upload.
//
// Amazon Glacier rejects your upload part request if any of the following conditions
// is true:
//
//    * SHA256 tree hash does not matchTo ensure that part data is not corrupted
//    in transmission, you compute a SHA256 tree hash of the part and include
//    it in your request. Upon receiving the part data, Amazon S3 Glacier also
//    computes a SHA256 tree hash. If these hash values don't match, the operation
//    fails. For information about computing a SHA256 tree hash, see Computing
//    Checksums (https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html).
//
//    * Part size does not matchThe size of each part except the last must match
//    the size specified in the corresponding InitiateMultipartUpload request.
//    The size of the last part must be the same size as, or smaller than, the
//    specified size. If you upload a part whose size is smaller than the part
//    size you specified in your initiate multipart upload request and that
//    part is not the last part, then the upload part request will succeed.
//    However, the subsequent Complete Multipart Upload request will fail.
//
//    * Range does not alignThe byte range value in the request does not align
//    with the part size specified in the corresponding initiate request. For
//    example, if you specify a part size of 4194304 bytes (4 MB), then 0 to
//    4194303 bytes (4 MB - 1) and 4194304 (4 MB) to 8388607 (8 MB - 1) are
//    valid part ranges. However, if you set a range value of 2 MB to 6 MB,
//    the range does not align with the part size and the upload will fail.
//
// This operation is idempotent. If you upload the same part multiple times,
// the data included in the most recent request overwrites the previously uploaded
// data.
//
// An AWS account has full permission to perform all operations (actions). However,
// AWS Identity and Access Management (IAM) users don't have any permissions
// by default. You must grant them explicit permission to perform specific actions.
// For more information, see Access Control Using AWS Identity and Access Management
// (IAM) (https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).
//
// For conceptual information and underlying REST API, see Uploading Large Archives
// in Parts (Multipart Upload) (https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html)
// and Upload Part (https://docs.aws.amazon.com/amazonglacier/latest/dev/api-upload-part.html)
// in the Amazon Glacier Developer Guide.
//
//    // Example sending a request using UploadMultipartPartRequest.
//    req := client.UploadMultipartPartRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) UploadMultipartPartRequest(input *types.UploadMultipartPartInput) UploadMultipartPartRequest {
	op := &aws.Operation{
		Name:       opUploadMultipartPart,
		HTTPMethod: "PUT",
		HTTPPath:   "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
	}

	if input == nil {
		input = &types.UploadMultipartPartInput{}
	}

	req := c.newRequest(op, input, &types.UploadMultipartPartOutput{})
	return UploadMultipartPartRequest{Request: req, Input: input, Copy: c.UploadMultipartPartRequest}
}

// UploadMultipartPartRequest is the request type for the
// UploadMultipartPart API operation.
type UploadMultipartPartRequest struct {
	*aws.Request
	Input *types.UploadMultipartPartInput
	Copy  func(*types.UploadMultipartPartInput) UploadMultipartPartRequest
}

// Send marshals and sends the UploadMultipartPart API request.
func (r UploadMultipartPartRequest) Send(ctx context.Context) (*UploadMultipartPartResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UploadMultipartPartResponse{
		UploadMultipartPartOutput: r.Request.Data.(*types.UploadMultipartPartOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UploadMultipartPartResponse is the response type for the
// UploadMultipartPart API operation.
type UploadMultipartPartResponse struct {
	*types.UploadMultipartPartOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UploadMultipartPart request.
func (r *UploadMultipartPartResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
