// Code generated by smithy-go-codegen DO NOT EDIT.

package glacier

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	glaciercust "github.com/aws/aws-sdk-go-v2/service/glacier/internal/customizations"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// This operation creates a new vault with the specified name. The name of the
// vault must be unique within a region for an AWS account. You can create up to
// 1,000 vaults per account. If you need to create more vaults, contact Amazon S3
// Glacier. You must use the following guidelines when naming a vault.
//
//     * Names
// can be between 1 and 255 characters long.
//
//     * Allowed characters are a-z,
// A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
//
//     <p>This
// operation is idempotent.</p> <p>An AWS account has full permission to perform
// all operations (actions). However, AWS Identity and Access Management (IAM)
// users don't have any permissions by default. You must grant them explicit
// permission to perform specific actions. For more information, see <a
// href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access
// Control Using AWS Identity and Access Management (IAM)</a>.</p> <p> For
// conceptual information and underlying REST API, see <a
// href="https://docs.aws.amazon.com/amazonglacier/latest/dev/creating-vaults.html">Creating
// a Vault in Amazon Glacier</a> and <a
// href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-put.html">Create
// Vault </a> in the <i>Amazon Glacier Developer Guide</i>. </p>
func (c *Client) CreateVault(ctx context.Context, params *CreateVaultInput, optFns ...func(*Options)) (*CreateVaultOutput, error) {
	stack := middleware.NewStack("CreateVault", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateVaultMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateVaultValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateVault(options.Region), middleware.Before)
	glaciercust.AddTreeHashMiddleware(stack)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateVault",
			Err:           err,
		}
	}
	out := result.(*CreateVaultOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Provides options to create a vault.
type CreateVaultInput struct {
	// The AccountId value is the AWS account ID. This value must match the AWS account
	// ID associated with the credentials used to sign the request. You can either
	// specify an AWS account ID or optionally a single '-' (hyphen), in which case
	// Amazon S3 Glacier uses the AWS account ID associated with the credentials used
	// to sign the request. If you specify your account ID, do not include any hyphens
	// ('-') in the ID.
	AccountId *string
	// The name of the vault.
	VaultName *string
}

// Contains the Amazon S3 Glacier response to your request.
type CreateVaultOutput struct {
	// The URI of the vault that was created.
	Location *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateVaultMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateVault{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateVault{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateVault(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "glacier",
		OperationName: "CreateVault",
	}
}
