// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opCreateVault = "CreateVault"

// CreateVaultRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation creates a new vault with the specified name. The name of the
// vault must be unique within a region for an AWS account. You can create up
// to 1,000 vaults per account. If you need to create more vaults, contact Amazon
// S3 Glacier.
//
// You must use the following guidelines when naming a vault.
//
//    * Names can be between 1 and 255 characters long.
//
//    * Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),
//    and '.' (period).
//
// This operation is idempotent.
//
// An AWS account has full permission to perform all operations (actions). However,
// AWS Identity and Access Management (IAM) users don't have any permissions
// by default. You must grant them explicit permission to perform specific actions.
// For more information, see Access Control Using AWS Identity and Access Management
// (IAM) (https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).
//
// For conceptual information and underlying REST API, see Creating a Vault
// in Amazon Glacier (https://docs.aws.amazon.com/amazonglacier/latest/dev/creating-vaults.html)
// and Create Vault (https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-put.html)
// in the Amazon Glacier Developer Guide.
//
//    // Example sending a request using CreateVaultRequest.
//    req := client.CreateVaultRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) CreateVaultRequest(input *types.CreateVaultInput) CreateVaultRequest {
	op := &aws.Operation{
		Name:       opCreateVault,
		HTTPMethod: "PUT",
		HTTPPath:   "/{accountId}/vaults/{vaultName}",
	}

	if input == nil {
		input = &types.CreateVaultInput{}
	}

	req := c.newRequest(op, input, &types.CreateVaultOutput{})
	return CreateVaultRequest{Request: req, Input: input, Copy: c.CreateVaultRequest}
}

// CreateVaultRequest is the request type for the
// CreateVault API operation.
type CreateVaultRequest struct {
	*aws.Request
	Input *types.CreateVaultInput
	Copy  func(*types.CreateVaultInput) CreateVaultRequest
}

// Send marshals and sends the CreateVault API request.
func (r CreateVaultRequest) Send(ctx context.Context) (*CreateVaultResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateVaultResponse{
		CreateVaultOutput: r.Request.Data.(*types.CreateVaultOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateVaultResponse is the response type for the
// CreateVault API operation.
type CreateVaultResponse struct {
	*types.CreateVaultOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateVault request.
func (r *CreateVaultResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
