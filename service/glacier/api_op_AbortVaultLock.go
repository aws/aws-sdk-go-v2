// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glacier

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
)

const opAbortVaultLock = "AbortVaultLock"

// AbortVaultLockRequest returns a request value for making API operation for
// Amazon Glacier.
//
// This operation aborts the vault locking process if the vault lock is not
// in the Locked state. If the vault lock is in the Locked state when this operation
// is requested, the operation returns an AccessDeniedException error. Aborting
// the vault locking process removes the vault lock policy from the specified
// vault.
//
// A vault lock is put into the InProgress state by calling InitiateVaultLock.
// A vault lock is put into the Locked state by calling CompleteVaultLock. You
// can get the state of a vault lock by calling GetVaultLock. For more information
// about the vault locking process, see Amazon Glacier Vault Lock (https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html).
// For more information about vault lock policies, see Amazon Glacier Access
// Control with Vault Lock Policies (https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html).
//
// This operation is idempotent. You can successfully invoke this operation
// multiple times, if the vault lock is in the InProgress state or if there
// is no policy associated with the vault.
//
//    // Example sending a request using AbortVaultLockRequest.
//    req := client.AbortVaultLockRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) AbortVaultLockRequest(input *types.AbortVaultLockInput) AbortVaultLockRequest {
	op := &aws.Operation{
		Name:       opAbortVaultLock,
		HTTPMethod: "DELETE",
		HTTPPath:   "/{accountId}/vaults/{vaultName}/lock-policy",
	}

	if input == nil {
		input = &types.AbortVaultLockInput{}
	}

	req := c.newRequest(op, input, &types.AbortVaultLockOutput{})
	req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return AbortVaultLockRequest{Request: req, Input: input, Copy: c.AbortVaultLockRequest}
}

// AbortVaultLockRequest is the request type for the
// AbortVaultLock API operation.
type AbortVaultLockRequest struct {
	*aws.Request
	Input *types.AbortVaultLockInput
	Copy  func(*types.AbortVaultLockInput) AbortVaultLockRequest
}

// Send marshals and sends the AbortVaultLock API request.
func (r AbortVaultLockRequest) Send(ctx context.Context) (*AbortVaultLockResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AbortVaultLockResponse{
		AbortVaultLockOutput: r.Request.Data.(*types.AbortVaultLockOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AbortVaultLockResponse is the response type for the
// AbortVaultLock API operation.
type AbortVaultLockResponse struct {
	*types.AbortVaultLockOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AbortVaultLock request.
func (r *AbortVaultLockResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
