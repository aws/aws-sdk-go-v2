// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package comprehend

type DocumentClassifierMode string

// Enum values for DocumentClassifierMode
const (
	DocumentClassifierModeMultiClass DocumentClassifierMode = "MULTI_CLASS"
	DocumentClassifierModeMultiLabel DocumentClassifierMode = "MULTI_LABEL"
)

func (enum DocumentClassifierMode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DocumentClassifierMode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EndpointStatus string

// Enum values for EndpointStatus
const (
	EndpointStatusCreating  EndpointStatus = "CREATING"
	EndpointStatusDeleting  EndpointStatus = "DELETING"
	EndpointStatusFailed    EndpointStatus = "FAILED"
	EndpointStatusInService EndpointStatus = "IN_SERVICE"
	EndpointStatusUpdating  EndpointStatus = "UPDATING"
)

func (enum EndpointStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EndpointStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EntityType string

// Enum values for EntityType
const (
	EntityTypePerson         EntityType = "PERSON"
	EntityTypeLocation       EntityType = "LOCATION"
	EntityTypeOrganization   EntityType = "ORGANIZATION"
	EntityTypeCommercialItem EntityType = "COMMERCIAL_ITEM"
	EntityTypeEvent          EntityType = "EVENT"
	EntityTypeDate           EntityType = "DATE"
	EntityTypeQuantity       EntityType = "QUANTITY"
	EntityTypeTitle          EntityType = "TITLE"
	EntityTypeOther          EntityType = "OTHER"
)

func (enum EntityType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EntityType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InputFormat string

// Enum values for InputFormat
const (
	InputFormatOneDocPerFile InputFormat = "ONE_DOC_PER_FILE"
	InputFormatOneDocPerLine InputFormat = "ONE_DOC_PER_LINE"
)

func (enum InputFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InputFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusSubmitted     JobStatus = "SUBMITTED"
	JobStatusInProgress    JobStatus = "IN_PROGRESS"
	JobStatusCompleted     JobStatus = "COMPLETED"
	JobStatusFailed        JobStatus = "FAILED"
	JobStatusStopRequested JobStatus = "STOP_REQUESTED"
	JobStatusStopped       JobStatus = "STOPPED"
)

func (enum JobStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum JobStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeEn   LanguageCode = "en"
	LanguageCodeEs   LanguageCode = "es"
	LanguageCodeFr   LanguageCode = "fr"
	LanguageCodeDe   LanguageCode = "de"
	LanguageCodeIt   LanguageCode = "it"
	LanguageCodePt   LanguageCode = "pt"
	LanguageCodeAr   LanguageCode = "ar"
	LanguageCodeHi   LanguageCode = "hi"
	LanguageCodeJa   LanguageCode = "ja"
	LanguageCodeKo   LanguageCode = "ko"
	LanguageCodeZh   LanguageCode = "zh"
	LanguageCodeZhTw LanguageCode = "zh-TW"
)

func (enum LanguageCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LanguageCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ModelStatus string

// Enum values for ModelStatus
const (
	ModelStatusSubmitted     ModelStatus = "SUBMITTED"
	ModelStatusTraining      ModelStatus = "TRAINING"
	ModelStatusDeleting      ModelStatus = "DELETING"
	ModelStatusStopRequested ModelStatus = "STOP_REQUESTED"
	ModelStatusStopped       ModelStatus = "STOPPED"
	ModelStatusInError       ModelStatus = "IN_ERROR"
	ModelStatusTrained       ModelStatus = "TRAINED"
)

func (enum ModelStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ModelStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type PartOfSpeechTagType string

// Enum values for PartOfSpeechTagType
const (
	PartOfSpeechTagTypeAdj   PartOfSpeechTagType = "ADJ"
	PartOfSpeechTagTypeAdp   PartOfSpeechTagType = "ADP"
	PartOfSpeechTagTypeAdv   PartOfSpeechTagType = "ADV"
	PartOfSpeechTagTypeAux   PartOfSpeechTagType = "AUX"
	PartOfSpeechTagTypeConj  PartOfSpeechTagType = "CONJ"
	PartOfSpeechTagTypeCconj PartOfSpeechTagType = "CCONJ"
	PartOfSpeechTagTypeDet   PartOfSpeechTagType = "DET"
	PartOfSpeechTagTypeIntj  PartOfSpeechTagType = "INTJ"
	PartOfSpeechTagTypeNoun  PartOfSpeechTagType = "NOUN"
	PartOfSpeechTagTypeNum   PartOfSpeechTagType = "NUM"
	PartOfSpeechTagTypeO     PartOfSpeechTagType = "O"
	PartOfSpeechTagTypePart  PartOfSpeechTagType = "PART"
	PartOfSpeechTagTypePron  PartOfSpeechTagType = "PRON"
	PartOfSpeechTagTypePropn PartOfSpeechTagType = "PROPN"
	PartOfSpeechTagTypePunct PartOfSpeechTagType = "PUNCT"
	PartOfSpeechTagTypeSconj PartOfSpeechTagType = "SCONJ"
	PartOfSpeechTagTypeSym   PartOfSpeechTagType = "SYM"
	PartOfSpeechTagTypeVerb  PartOfSpeechTagType = "VERB"
)

func (enum PartOfSpeechTagType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum PartOfSpeechTagType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SentimentType string

// Enum values for SentimentType
const (
	SentimentTypePositive SentimentType = "POSITIVE"
	SentimentTypeNegative SentimentType = "NEGATIVE"
	SentimentTypeNeutral  SentimentType = "NEUTRAL"
	SentimentTypeMixed    SentimentType = "MIXED"
)

func (enum SentimentType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SentimentType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SyntaxLanguageCode string

// Enum values for SyntaxLanguageCode
const (
	SyntaxLanguageCodeEn SyntaxLanguageCode = "en"
	SyntaxLanguageCodeEs SyntaxLanguageCode = "es"
	SyntaxLanguageCodeFr SyntaxLanguageCode = "fr"
	SyntaxLanguageCodeDe SyntaxLanguageCode = "de"
	SyntaxLanguageCodeIt SyntaxLanguageCode = "it"
	SyntaxLanguageCodePt SyntaxLanguageCode = "pt"
)

func (enum SyntaxLanguageCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SyntaxLanguageCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
