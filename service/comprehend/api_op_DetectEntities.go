// Code generated by smithy-go-codegen DO NOT EDIT.

package comprehend

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/comprehend/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Inspects text for named entities, and returns information about them. For more
// information, about named entities, see how-entities ().
func (c *Client) DetectEntities(ctx context.Context, params *DetectEntitiesInput, optFns ...func(*Options)) (*DetectEntitiesOutput, error) {
	stack := middleware.NewStack("DetectEntities", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDetectEntitiesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDetectEntitiesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDetectEntities(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DetectEntities",
			Err:           err,
		}
	}
	out := result.(*DetectEntitiesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DetectEntitiesInput struct {
	// The Amazon Resource Name of an endpoint that is associated with a custom entity
	// recognition model. Provide an endpoint if you want to detect entities by using
	// your own custom model instead of the default model that is used by Amazon
	// Comprehend. If you specify an endpoint, Amazon Comprehend uses the language of
	// your custom model, and it ignores any language code that you provide in your
	// request.
	EndpointArn *string
	// The language of the input documents. You can specify any of the primary
	// languages supported by Amazon Comprehend. All documents must be in the same
	// language. If your request includes the endpoint for a custom entity recognition
	// model, Amazon Comprehend uses the language of your custom model, and it ignores
	// any language code that you specify here.
	LanguageCode types.LanguageCode
	// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8
	// encoded characters.
	Text *string
}

type DetectEntitiesOutput struct {
	// A collection of entities identified in the input text. For each entity, the
	// response provides the entity text, entity type, where the entity text begins and
	// ends, and the level of confidence that Amazon Comprehend has in the detection.
	// If your request uses a custom entity recognition model, Amazon Comprehend
	// detects the entities that the model is trained to recognize. Otherwise, it
	// detects the default entity types. For a list of default entity types, see
	// how-entities ().
	Entities []*types.Entity

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDetectEntitiesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDetectEntities{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDetectEntities{}, middleware.After)
}

func newServiceMetadataMiddleware_opDetectEntities(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "comprehend",
		OperationName: "DetectEntities",
	}
}
