// Code generated by smithy-go-codegen DO NOT EDIT.

package comprehend

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/comprehend/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Stops a key phrases detection job in progress. If the job state is IN_PROGRESS
// the job is marked for termination and put into the STOP_REQUESTED state. If the
// job completes before it can be stopped, it is put into the COMPLETED state;
// otherwise the job is stopped and put into the STOPPED state. If the job is in
// the COMPLETED or FAILED state when you call the StopDominantLanguageDetectionJob
// operation, the operation returns a 400 Internal Request Exception. When a job is
// stopped, any documents already processed are written to the output location.
func (c *Client) StopKeyPhrasesDetectionJob(ctx context.Context, params *StopKeyPhrasesDetectionJobInput, optFns ...func(*Options)) (*StopKeyPhrasesDetectionJobOutput, error) {
	stack := middleware.NewStack("StopKeyPhrasesDetectionJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpStopKeyPhrasesDetectionJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStopKeyPhrasesDetectionJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStopKeyPhrasesDetectionJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StopKeyPhrasesDetectionJob",
			Err:           err,
		}
	}
	out := result.(*StopKeyPhrasesDetectionJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StopKeyPhrasesDetectionJobInput struct {
	// The identifier of the key phrases detection job to stop.
	JobId *string
}

type StopKeyPhrasesDetectionJobOutput struct {
	// The identifier of the key phrases detection job to stop.
	JobId *string
	// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was
	// previously stopped with the StopKeyPhrasesDetectionJob operation.
	JobStatus types.JobStatus

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpStopKeyPhrasesDetectionJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpStopKeyPhrasesDetectionJob{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpStopKeyPhrasesDetectionJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opStopKeyPhrasesDetectionJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "comprehend",
		OperationName: "StopKeyPhrasesDetectionJob",
	}
}
