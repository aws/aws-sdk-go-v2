// Code generated by smithy-go-codegen DO NOT EDIT.

package comprehend

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Stops an entity recognizer training job while in progress. If the training job
// state is TRAINING, the job is marked for termination and put into the
// STOP_REQUESTED state. If the training job completes before it can be stopped, it
// is put into the TRAINED; otherwise the training job is stopped and putted into
// the STOPPED state and the service sends back an HTTP 200 response with an empty
// HTTP body.
func (c *Client) StopTrainingEntityRecognizer(ctx context.Context, params *StopTrainingEntityRecognizerInput, optFns ...func(*Options)) (*StopTrainingEntityRecognizerOutput, error) {
	if params == nil {
		params = &StopTrainingEntityRecognizerInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "StopTrainingEntityRecognizer", params, optFns, addOperationStopTrainingEntityRecognizerMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*StopTrainingEntityRecognizerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StopTrainingEntityRecognizerInput struct {

	// The Amazon Resource Name (ARN) that identifies the entity recognizer currently
	// being trained.
	//
	// This member is required.
	EntityRecognizerArn *string
}

type StopTrainingEntityRecognizerOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationStopTrainingEntityRecognizerMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpStopTrainingEntityRecognizer{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpStopTrainingEntityRecognizer{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStopTrainingEntityRecognizerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStopTrainingEntityRecognizer(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opStopTrainingEntityRecognizer(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "comprehend",
		OperationName: "StopTrainingEntityRecognizer",
	}
}
