// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package mediaconnect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mediaconnect/types"
)

const opStartFlow = "StartFlow"

// StartFlowRequest returns a request value for making API operation for
// AWS MediaConnect.
//
// Starts a flow.
//
//    // Example sending a request using StartFlowRequest.
//    req := client.StartFlowRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/mediaconnect-2018-11-14/StartFlow
func (c *Client) StartFlowRequest(input *types.StartFlowInput) StartFlowRequest {
	op := &aws.Operation{
		Name:       opStartFlow,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/flows/start/{flowArn}",
	}

	if input == nil {
		input = &types.StartFlowInput{}
	}

	req := c.newRequest(op, input, &types.StartFlowOutput{})
	return StartFlowRequest{Request: req, Input: input, Copy: c.StartFlowRequest}
}

// StartFlowRequest is the request type for the
// StartFlow API operation.
type StartFlowRequest struct {
	*aws.Request
	Input *types.StartFlowInput
	Copy  func(*types.StartFlowInput) StartFlowRequest
}

// Send marshals and sends the StartFlow API request.
func (r StartFlowRequest) Send(ctx context.Context) (*StartFlowResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartFlowResponse{
		StartFlowOutput: r.Request.Data.(*types.StartFlowOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartFlowResponse is the response type for the
// StartFlow API operation.
type StartFlowResponse struct {
	*types.StartFlowOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartFlow request.
func (r *StartFlowResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
