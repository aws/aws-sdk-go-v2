// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package mediaconnect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mediaconnect/types"
)

const opDeleteFlow = "DeleteFlow"

// DeleteFlowRequest returns a request value for making API operation for
// AWS MediaConnect.
//
// Deletes a flow. Before you can delete a flow, you must stop the flow.
//
//    // Example sending a request using DeleteFlowRequest.
//    req := client.DeleteFlowRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/mediaconnect-2018-11-14/DeleteFlow
func (c *Client) DeleteFlowRequest(input *types.DeleteFlowInput) DeleteFlowRequest {
	op := &aws.Operation{
		Name:       opDeleteFlow,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/flows/{flowArn}",
	}

	if input == nil {
		input = &types.DeleteFlowInput{}
	}

	req := c.newRequest(op, input, &types.DeleteFlowOutput{})
	return DeleteFlowRequest{Request: req, Input: input, Copy: c.DeleteFlowRequest}
}

// DeleteFlowRequest is the request type for the
// DeleteFlow API operation.
type DeleteFlowRequest struct {
	*aws.Request
	Input *types.DeleteFlowInput
	Copy  func(*types.DeleteFlowInput) DeleteFlowRequest
}

// Send marshals and sends the DeleteFlow API request.
func (r DeleteFlowRequest) Send(ctx context.Context) (*DeleteFlowResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeleteFlowResponse{
		DeleteFlowOutput: r.Request.Data.(*types.DeleteFlowOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeleteFlowResponse is the response type for the
// DeleteFlow API operation.
type DeleteFlowResponse struct {
	*types.DeleteFlowOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeleteFlow request.
func (r *DeleteFlowResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
