// Code generated by smithy-go-codegen DO NOT EDIT.

package swf

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/swf/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Used by workers to get an ActivityTask () from the specified activity taskList.
// This initiates a long poll, where the service holds the HTTP connection open and
// responds as soon as a task becomes available. The maximum time the service holds
// on to the request before responding is 60 seconds. If no task is available
// within 60 seconds, the poll returns an empty result. An empty result, in this
// context, means that an ActivityTask is returned, but that the value of taskToken
// is an empty string. If a task is returned, the worker should use its type to
// identify and process it correctly. Workers should set their client side socket
// timeout to at least 70 seconds (10 seconds higher than the maximum time service
// may hold the poll request). Access Control You can use IAM policies to control
// this action's access to Amazon SWF resources as follows:
//
//     * Use a Resource
// element with the domain name to limit the action to only specified domains.
//
//
// * Use an Action element to allow or deny permission to call this action.
//
//     *
// Constrain the taskList.name parameter by using a Condition element with the
// swf:taskList.name key to allow the action to access only certain task lists.
//
// If
// the caller doesn't have sufficient permissions to invoke the action, or the
// parameter values fall outside the specified constraints, the action fails. The
// associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED.
// For details and example IAM policies, see Using IAM to Manage Access to Amazon
// SWF Workflows
// (https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html)
// in the Amazon SWF Developer Guide.
func (c *Client) PollForActivityTask(ctx context.Context, params *PollForActivityTaskInput, optFns ...func(*Options)) (*PollForActivityTaskOutput, error) {
	stack := middleware.NewStack("PollForActivityTask", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson10_serdeOpPollForActivityTaskMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPollForActivityTaskValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPollForActivityTask(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PollForActivityTask",
			Err:           err,
		}
	}
	out := result.(*PollForActivityTaskOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PollForActivityTaskInput struct {
	// The name of the domain that contains the task lists being polled.
	Domain *string
	// Specifies the task list to poll for activity tasks.  <p>The specified string
	// must not start or end with whitespace. It must not contain a <code>:</code>
	// (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control
	// characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it
	// must not <i>be</i> the literal string <code>arn</code>.</p>
	TaskList *types.TaskList
	// Identity of the worker making the request, recorded in the ActivityTaskStarted
	// event in the workflow history. This enables diagnostic tracing when problems
	// arise. The form of this identity is user defined.
	Identity *string
}

// Unit of work sent to an activity worker.
type PollForActivityTaskOutput struct {
	// The unique ID of the task.
	ActivityId *string
	// The inputs provided when the activity task was scheduled. The form of the input
	// is user defined and should be meaningful to the activity implementation.
	Input *string
	// The workflow execution that started this activity task.
	WorkflowExecution *types.WorkflowExecution
	// The ID of the ActivityTaskStarted event recorded in the history.
	StartedEventId *int64
	// The type of this activity task.
	ActivityType *types.ActivityType
	// The opaque string used as a handle on the task. This token is used by workers to
	// communicate progress and response information back to the system about the task.
	TaskToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpPollForActivityTaskMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpPollForActivityTask{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpPollForActivityTask{}, middleware.After)
}

func newServiceMetadataMiddleware_opPollForActivityTask(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "swf",
		OperationName: "PollForActivityTask",
	}
}
