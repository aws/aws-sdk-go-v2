// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package swf

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/swf/types"
)

const opGetWorkflowExecutionHistory = "GetWorkflowExecutionHistory"

// GetWorkflowExecutionHistoryRequest returns a request value for making API operation for
// Amazon Simple Workflow Service.
//
// Returns the history of the specified workflow execution. The results may
// be split into multiple pages. To retrieve subsequent pages, make the call
// again using the nextPageToken returned by the initial call.
//
// This operation is eventually consistent. The results are best effort and
// may not exactly reflect recent updates and changes.
//
// Access Control
//
// You can use IAM policies to control this action's access to Amazon SWF resources
// as follows:
//
//    * Use a Resource element with the domain name to limit the action to only
//    specified domains.
//
//    * Use an Action element to allow or deny permission to call this action.
//
//    * You cannot use an IAM policy to constrain this action's parameters.
//
// If the caller doesn't have sufficient permissions to invoke the action, or
// the parameter values fall outside the specified constraints, the action fails.
// The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED.
// For details and example IAM policies, see Using IAM to Manage Access to Amazon
// SWF Workflows (https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html)
// in the Amazon SWF Developer Guide.
//
//    // Example sending a request using GetWorkflowExecutionHistoryRequest.
//    req := client.GetWorkflowExecutionHistoryRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) GetWorkflowExecutionHistoryRequest(input *types.GetWorkflowExecutionHistoryInput) GetWorkflowExecutionHistoryRequest {
	op := &aws.Operation{
		Name:       opGetWorkflowExecutionHistory,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextPageToken"},
			OutputTokens:    []string{"nextPageToken"},
			LimitToken:      "maximumPageSize",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetWorkflowExecutionHistoryInput{}
	}

	req := c.newRequest(op, input, &types.GetWorkflowExecutionHistoryOutput{})
	return GetWorkflowExecutionHistoryRequest{Request: req, Input: input, Copy: c.GetWorkflowExecutionHistoryRequest}
}

// GetWorkflowExecutionHistoryRequest is the request type for the
// GetWorkflowExecutionHistory API operation.
type GetWorkflowExecutionHistoryRequest struct {
	*aws.Request
	Input *types.GetWorkflowExecutionHistoryInput
	Copy  func(*types.GetWorkflowExecutionHistoryInput) GetWorkflowExecutionHistoryRequest
}

// Send marshals and sends the GetWorkflowExecutionHistory API request.
func (r GetWorkflowExecutionHistoryRequest) Send(ctx context.Context) (*GetWorkflowExecutionHistoryResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetWorkflowExecutionHistoryResponse{
		GetWorkflowExecutionHistoryOutput: r.Request.Data.(*types.GetWorkflowExecutionHistoryOutput),
		response:                          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetWorkflowExecutionHistoryRequestPaginator returns a paginator for GetWorkflowExecutionHistory.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetWorkflowExecutionHistoryRequest(input)
//   p := swf.NewGetWorkflowExecutionHistoryRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetWorkflowExecutionHistoryPaginator(req GetWorkflowExecutionHistoryRequest) GetWorkflowExecutionHistoryPaginator {
	return GetWorkflowExecutionHistoryPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetWorkflowExecutionHistoryInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetWorkflowExecutionHistoryPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetWorkflowExecutionHistoryPaginator struct {
	aws.Pager
}

func (p *GetWorkflowExecutionHistoryPaginator) CurrentPage() *types.GetWorkflowExecutionHistoryOutput {
	return p.Pager.CurrentPage().(*types.GetWorkflowExecutionHistoryOutput)
}

// GetWorkflowExecutionHistoryResponse is the response type for the
// GetWorkflowExecutionHistory API operation.
type GetWorkflowExecutionHistoryResponse struct {
	*types.GetWorkflowExecutionHistoryOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetWorkflowExecutionHistory request.
func (r *GetWorkflowExecutionHistoryResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
