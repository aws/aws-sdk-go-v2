// Code generated by smithy-go-codegen DO NOT EDIT.

package swf

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Used by workers to tell the service that the ActivityTask () identified by the
// taskToken has failed with reason (if specified). The reason and details appear
// in the ActivityTaskFailed event added to the workflow history.  <p>A task is
// considered open from the time that it is scheduled until it is closed. Therefore
// a task is reported as open while a worker is processing it. A task is closed
// after it has been specified in a call to <a>RespondActivityTaskCompleted</a>,
// <a>RespondActivityTaskCanceled</a>, RespondActivityTaskFailed, or the task has
// <a
// href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed
// out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to
// control this action's access to Amazon SWF resources as follows:</p> <ul> <li>
// <p>Use a <code>Resource</code> element with the domain name to limit the action
// to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element
// to allow or deny permission to call this action.</p> </li> <li> <p>You cannot
// use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If
// the caller doesn't have sufficient permissions to invoke the action, or the
// parameter values fall outside the specified constraints, the action fails. The
// associated event attribute's <code>cause</code> parameter is set to
// <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see
// <a
// href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using
// IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer
// Guide</i>.</p>
func (c *Client) RespondActivityTaskFailed(ctx context.Context, params *RespondActivityTaskFailedInput, optFns ...func(*Options)) (*RespondActivityTaskFailedOutput, error) {
	stack := middleware.NewStack("RespondActivityTaskFailed", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson10_serdeOpRespondActivityTaskFailedMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRespondActivityTaskFailedValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRespondActivityTaskFailed(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RespondActivityTaskFailed",
			Err:           err,
		}
	}
	out := result.(*RespondActivityTaskFailedOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RespondActivityTaskFailedInput struct {
	// Detailed information about the failure.
	Details *string
	// The taskToken of the ActivityTask ().  <important> <p> <code>taskToken</code> is
	// generated by the service and should be treated as an opaque value. If the task
	// is passed to another process, its <code>taskToken</code> must also be passed.
	// This enables it to provide its progress and respond with results.</p>
	// </important>
	TaskToken *string
	// Description of the error that may assist in diagnostics.
	Reason *string
}

type RespondActivityTaskFailedOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpRespondActivityTaskFailedMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpRespondActivityTaskFailed{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpRespondActivityTaskFailed{}, middleware.After)
}

func newServiceMetadataMiddleware_opRespondActivityTaskFailed(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "swf",
		OperationName: "RespondActivityTaskFailed",
	}
}
