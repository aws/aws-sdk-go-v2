// Code generated by smithy-go-codegen DO NOT EDIT.

package swf

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/swf/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a list of open workflow executions in the specified domain that meet the
// filtering criteria. The results may be split into multiple pages. To retrieve
// subsequent pages, make the call again using the nextPageToken returned by the
// initial call. This operation is eventually consistent. The results are best
// effort and may not exactly reflect recent updates and changes. Access Control
// You can use IAM policies to control this action's access to Amazon SWF resources
// as follows:
//
//     * Use a Resource element with the domain name to limit the
// action to only specified domains.
//
//     * Use an Action element to allow or deny
// permission to call this action.
//
//     * Constrain the following parameters by
// using a Condition element with the appropriate keys.
//
//         * tagFilter.tag:
// String constraint. The key is swf:tagFilter.tag.
//
//         * typeFilter.name:
// String constraint. The key is swf:typeFilter.name.
//
//         *
// typeFilter.version: String constraint. The key is swf:typeFilter.version.
//
// If
// the caller doesn't have sufficient permissions to invoke the action, or the
// parameter values fall outside the specified constraints, the action fails. The
// associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED.
// For details and example IAM policies, see Using IAM to Manage Access to Amazon
// SWF Workflows
// (https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html)
// in the Amazon SWF Developer Guide.
func (c *Client) ListOpenWorkflowExecutions(ctx context.Context, params *ListOpenWorkflowExecutionsInput, optFns ...func(*Options)) (*ListOpenWorkflowExecutionsOutput, error) {
	stack := middleware.NewStack("ListOpenWorkflowExecutions", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson10_serdeOpListOpenWorkflowExecutionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListOpenWorkflowExecutionsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListOpenWorkflowExecutions(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListOpenWorkflowExecutions",
			Err:           err,
		}
	}
	out := result.(*ListOpenWorkflowExecutionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListOpenWorkflowExecutionsInput struct {
	// The name of the domain that contains the workflow executions to list.
	Domain *string
	// When set to true, returns the results in reverse order. By default the results
	// are returned in descending order of the start time of the executions.
	ReverseOrder *bool
	// If specified, only executions that have the matching tag are listed.
	// executionFilter, typeFilter and tagFilter are mutually exclusive. You can
	// specify at most one of these in a request.
	TagFilter *types.TagFilter
	// Workflow executions are included in the returned results based on whether their
	// start times are within the range specified by this filter.
	StartTimeFilter *types.ExecutionTimeFilter
	// If specified, only executions of the type specified in the filter are returned.
	// executionFilter, typeFilter and tagFilter are mutually exclusive. You can
	// specify at most one of these in a request.
	TypeFilter *types.WorkflowTypeFilter
	// If specified, only workflow executions matching the workflow ID specified in the
	// filter are returned. executionFilter, typeFilter and tagFilter are mutually
	// exclusive. You can specify at most one of these in a request.
	ExecutionFilter *types.WorkflowExecutionFilter
	// If NextPageToken is returned there are more results available. The value of
	// NextPageToken is a unique pagination token for each page. Make the call again
	// using the returned token to retrieve the next page. Keep all other arguments
	// unchanged. Each pagination token expires after 60 seconds. Using an expired
	// pagination token will return a 400 error: "Specified token has exceeded its
	// maximum lifetime".  <p>The configured <code>maximumPageSize</code> determines
	// how many results can be returned in a single call. </p>
	NextPageToken *string
	// The maximum number of results that are returned per call. Use nextPageToken to
	// obtain further pages of results.
	MaximumPageSize *int32
}

// Contains a paginated list of information about workflow executions.
type ListOpenWorkflowExecutionsOutput struct {
	// The list of workflow information structures.
	ExecutionInfos []*types.WorkflowExecutionInfo
	// If a NextPageToken was returned by a previous call, there are more results
	// available. To retrieve the next page of results, make the call again using the
	// returned token in nextPageToken. Keep all other arguments unchanged. The
	// configured maximumPageSize determines how many results can be returned in a
	// single call.
	NextPageToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpListOpenWorkflowExecutionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpListOpenWorkflowExecutions{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpListOpenWorkflowExecutions{}, middleware.After)
}

func newServiceMetadataMiddleware_opListOpenWorkflowExecutions(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "swf",
		OperationName: "ListOpenWorkflowExecutions",
	}
}
