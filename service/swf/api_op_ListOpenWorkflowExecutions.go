// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package swf

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/swf/types"
)

const opListOpenWorkflowExecutions = "ListOpenWorkflowExecutions"

// ListOpenWorkflowExecutionsRequest returns a request value for making API operation for
// Amazon Simple Workflow Service.
//
// Returns a list of open workflow executions in the specified domain that meet
// the filtering criteria. The results may be split into multiple pages. To
// retrieve subsequent pages, make the call again using the nextPageToken returned
// by the initial call.
//
// This operation is eventually consistent. The results are best effort and
// may not exactly reflect recent updates and changes.
//
// Access Control
//
// You can use IAM policies to control this action's access to Amazon SWF resources
// as follows:
//
//    * Use a Resource element with the domain name to limit the action to only
//    specified domains.
//
//    * Use an Action element to allow or deny permission to call this action.
//
//    * Constrain the following parameters by using a Condition element with
//    the appropriate keys. tagFilter.tag: String constraint. The key is swf:tagFilter.tag.
//    typeFilter.name: String constraint. The key is swf:typeFilter.name. typeFilter.version:
//    String constraint. The key is swf:typeFilter.version.
//
// If the caller doesn't have sufficient permissions to invoke the action, or
// the parameter values fall outside the specified constraints, the action fails.
// The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED.
// For details and example IAM policies, see Using IAM to Manage Access to Amazon
// SWF Workflows (https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html)
// in the Amazon SWF Developer Guide.
//
//    // Example sending a request using ListOpenWorkflowExecutionsRequest.
//    req := client.ListOpenWorkflowExecutionsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) ListOpenWorkflowExecutionsRequest(input *types.ListOpenWorkflowExecutionsInput) ListOpenWorkflowExecutionsRequest {
	op := &aws.Operation{
		Name:       opListOpenWorkflowExecutions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextPageToken"},
			OutputTokens:    []string{"nextPageToken"},
			LimitToken:      "maximumPageSize",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListOpenWorkflowExecutionsInput{}
	}

	req := c.newRequest(op, input, &types.ListOpenWorkflowExecutionsOutput{})
	return ListOpenWorkflowExecutionsRequest{Request: req, Input: input, Copy: c.ListOpenWorkflowExecutionsRequest}
}

// ListOpenWorkflowExecutionsRequest is the request type for the
// ListOpenWorkflowExecutions API operation.
type ListOpenWorkflowExecutionsRequest struct {
	*aws.Request
	Input *types.ListOpenWorkflowExecutionsInput
	Copy  func(*types.ListOpenWorkflowExecutionsInput) ListOpenWorkflowExecutionsRequest
}

// Send marshals and sends the ListOpenWorkflowExecutions API request.
func (r ListOpenWorkflowExecutionsRequest) Send(ctx context.Context) (*ListOpenWorkflowExecutionsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListOpenWorkflowExecutionsResponse{
		ListOpenWorkflowExecutionsOutput: r.Request.Data.(*types.ListOpenWorkflowExecutionsOutput),
		response:                         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListOpenWorkflowExecutionsRequestPaginator returns a paginator for ListOpenWorkflowExecutions.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListOpenWorkflowExecutionsRequest(input)
//   p := swf.NewListOpenWorkflowExecutionsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListOpenWorkflowExecutionsPaginator(req ListOpenWorkflowExecutionsRequest) ListOpenWorkflowExecutionsPaginator {
	return ListOpenWorkflowExecutionsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListOpenWorkflowExecutionsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListOpenWorkflowExecutionsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListOpenWorkflowExecutionsPaginator struct {
	aws.Pager
}

func (p *ListOpenWorkflowExecutionsPaginator) CurrentPage() *types.ListOpenWorkflowExecutionsOutput {
	return p.Pager.CurrentPage().(*types.ListOpenWorkflowExecutionsOutput)
}

// ListOpenWorkflowExecutionsResponse is the response type for the
// ListOpenWorkflowExecutions API operation.
type ListOpenWorkflowExecutionsResponse struct {
	*types.ListOpenWorkflowExecutionsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListOpenWorkflowExecutions request.
func (r *ListOpenWorkflowExecutionsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
