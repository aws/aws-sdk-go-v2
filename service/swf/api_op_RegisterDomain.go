// Code generated by smithy-go-codegen DO NOT EDIT.

package swf

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/swf/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Registers a new domain. Access Control You can use IAM policies to control this
// action's access to Amazon SWF resources as follows:
//
//     * You cannot use an IAM
// policy to control domain access for this action. The name of the domain being
// registered is available as the resource of this action.
//
//     * Use an Action
// element to allow or deny permission to call this action.
//
//     * You cannot use
// an IAM policy to constrain this action's parameters.
//
// If the caller doesn't have
// sufficient permissions to invoke the action, or the parameter values fall
// outside the specified constraints, the action fails. The associated event
// attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and
// example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows
// (https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html)
// in the Amazon SWF Developer Guide.
func (c *Client) RegisterDomain(ctx context.Context, params *RegisterDomainInput, optFns ...func(*Options)) (*RegisterDomainOutput, error) {
	stack := middleware.NewStack("RegisterDomain", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson10_serdeOpRegisterDomainMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRegisterDomainValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRegisterDomain(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RegisterDomain",
			Err:           err,
		}
	}
	out := result.(*RegisterDomainOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RegisterDomainInput struct {
	// The duration (in days) that records and histories of workflow executions on the
	// domain should be kept by the service. After the retention period, the workflow
	// execution isn't available in the results of visibility calls. If you pass the
	// value NONE or 0 (zero), then the workflow execution history isn't retained. As
	// soon as the workflow execution completes, the execution record and its history
	// are deleted. The maximum workflow execution retention period is 90 days. For
	// more information about Amazon SWF service limits, see: Amazon SWF Service Limits
	// (https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-limits.html)
	// in the Amazon SWF Developer Guide.
	WorkflowExecutionRetentionPeriodInDays *string
	// Tags to be added when registering a domain. Tags may only contain unicode
	// letters, digits, whitespace, or these symbols: _ . : / = + - @.
	Tags []*types.ResourceTag
	// A text description of the domain.
	Description *string
	// Name of the domain to register. The name must be unique in the region that the
	// domain is registered in.  <p>The specified string must not start or end with
	// whitespace. It must not contain a <code>:</code> (colon), <code>/</code>
	// (slash), <code>|</code> (vertical bar), or any control characters
	// (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not
	// <i>be</i> the literal string <code>arn</code>.</p>
	Name *string
}

type RegisterDomainOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson10_serdeOpRegisterDomainMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson10_serializeOpRegisterDomain{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson10_deserializeOpRegisterDomain{}, middleware.After)
}

func newServiceMetadataMiddleware_opRegisterDomain(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "swf",
		OperationName: "RegisterDomain",
	}
}
