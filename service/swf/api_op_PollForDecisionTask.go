// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package swf

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/swf/types"
)

const opPollForDecisionTask = "PollForDecisionTask"

// PollForDecisionTaskRequest returns a request value for making API operation for
// Amazon Simple Workflow Service.
//
// Used by deciders to get a DecisionTask from the specified decision taskList.
// A decision task may be returned for any open workflow execution that is using
// the specified task list. The task includes a paginated view of the history
// of the workflow execution. The decider should use the workflow type and the
// history to determine how to properly handle the task.
//
// This action initiates a long poll, where the service holds the HTTP connection
// open and responds as soon a task becomes available. If no decision task is
// available in the specified task list before the timeout of 60 seconds expires,
// an empty result is returned. An empty result, in this context, means that
// a DecisionTask is returned, but that the value of taskToken is an empty string.
//
// Deciders should set their client side socket timeout to at least 70 seconds
// (10 seconds higher than the timeout).
//
// Because the number of workflow history events for a single workflow execution
// might be very large, the result returned might be split up across a number
// of pages. To retrieve subsequent pages, make additional calls to PollForDecisionTask
// using the nextPageToken returned by the initial call. Note that you do not
// call GetWorkflowExecutionHistory with this nextPageToken. Instead, call PollForDecisionTask
// again.
//
// Access Control
//
// You can use IAM policies to control this action's access to Amazon SWF resources
// as follows:
//
//    * Use a Resource element with the domain name to limit the action to only
//    specified domains.
//
//    * Use an Action element to allow or deny permission to call this action.
//
//    * Constrain the taskList.name parameter by using a Condition element with
//    the swf:taskList.name key to allow the action to access only certain task
//    lists.
//
// If the caller doesn't have sufficient permissions to invoke the action, or
// the parameter values fall outside the specified constraints, the action fails.
// The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED.
// For details and example IAM policies, see Using IAM to Manage Access to Amazon
// SWF Workflows (https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html)
// in the Amazon SWF Developer Guide.
//
//    // Example sending a request using PollForDecisionTaskRequest.
//    req := client.PollForDecisionTaskRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) PollForDecisionTaskRequest(input *types.PollForDecisionTaskInput) PollForDecisionTaskRequest {
	op := &aws.Operation{
		Name:       opPollForDecisionTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextPageToken"},
			OutputTokens:    []string{"nextPageToken"},
			LimitToken:      "maximumPageSize",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.PollForDecisionTaskInput{}
	}

	req := c.newRequest(op, input, &types.PollForDecisionTaskOutput{})
	return PollForDecisionTaskRequest{Request: req, Input: input, Copy: c.PollForDecisionTaskRequest}
}

// PollForDecisionTaskRequest is the request type for the
// PollForDecisionTask API operation.
type PollForDecisionTaskRequest struct {
	*aws.Request
	Input *types.PollForDecisionTaskInput
	Copy  func(*types.PollForDecisionTaskInput) PollForDecisionTaskRequest
}

// Send marshals and sends the PollForDecisionTask API request.
func (r PollForDecisionTaskRequest) Send(ctx context.Context) (*PollForDecisionTaskResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PollForDecisionTaskResponse{
		PollForDecisionTaskOutput: r.Request.Data.(*types.PollForDecisionTaskOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewPollForDecisionTaskRequestPaginator returns a paginator for PollForDecisionTask.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.PollForDecisionTaskRequest(input)
//   p := swf.NewPollForDecisionTaskRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewPollForDecisionTaskPaginator(req PollForDecisionTaskRequest) PollForDecisionTaskPaginator {
	return PollForDecisionTaskPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.PollForDecisionTaskInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// PollForDecisionTaskPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type PollForDecisionTaskPaginator struct {
	aws.Pager
}

func (p *PollForDecisionTaskPaginator) CurrentPage() *types.PollForDecisionTaskOutput {
	return p.Pager.CurrentPage().(*types.PollForDecisionTaskOutput)
}

// PollForDecisionTaskResponse is the response type for the
// PollForDecisionTask API operation.
type PollForDecisionTaskResponse struct {
	*types.PollForDecisionTaskOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PollForDecisionTask request.
func (r *PollForDecisionTaskResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
