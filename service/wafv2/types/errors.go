// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// AWS WAF couldn’t perform the operation because your resource is being used by
// another resource or it’s associated with another resource.
type WAFAssociatedItemException struct {
	Message *string
}

func (e *WAFAssociatedItemException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFAssociatedItemException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFAssociatedItemException) ErrorCode() string             { return "WAFAssociatedItemException" }
func (e *WAFAssociatedItemException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFAssociatedItemException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFAssociatedItemException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF couldn’t perform the operation because the resource that you tried to
// save is a duplicate of an existing one.
type WAFDuplicateItemException struct {
	Message *string
}

func (e *WAFDuplicateItemException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFDuplicateItemException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFDuplicateItemException) ErrorCode() string             { return "WAFDuplicateItemException" }
func (e *WAFDuplicateItemException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFDuplicateItemException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFDuplicateItemException) HasMessage() bool {
	return e.Message != nil
}

// Your request is valid, but AWS WAF couldn’t perform the operation because of a
// system problem. Retry your request.
type WAFInternalErrorException struct {
	Message *string
}

func (e *WAFInternalErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFInternalErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFInternalErrorException) ErrorCode() string             { return "WAFInternalErrorException" }
func (e *WAFInternalErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *WAFInternalErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFInternalErrorException) HasMessage() bool {
	return e.Message != nil
}

// The operation isn't valid.
type WAFInvalidOperationException struct {
	Message *string
}

func (e *WAFInvalidOperationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFInvalidOperationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFInvalidOperationException) ErrorCode() string             { return "WAFInvalidOperationException" }
func (e *WAFInvalidOperationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFInvalidOperationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFInvalidOperationException) HasMessage() bool {
	return e.Message != nil
}

// The operation failed because AWS WAF didn't recognize a parameter in the
// request. For example:
//
//     * You specified an invalid parameter name or value.
//
//
// * Your nested statement isn't valid. You might have tried to nest a statement
// that can’t be nested.
//
//     * You tried to update a WebACL with a DefaultAction
// that isn't among the types available at DefaultAction ().
//
//     * Your request
// references an ARN that is malformed, or corresponds to a resource with which a
// Web ACL cannot be associated.
type WAFInvalidParameterException struct {
	Message *string

	Reason    *string
	Field     ParameterExceptionField
	Parameter *string
}

func (e *WAFInvalidParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFInvalidParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFInvalidParameterException) ErrorCode() string             { return "WAFInvalidParameterException" }
func (e *WAFInvalidParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFInvalidParameterException) GetReason() string {
	return ptr.ToString(e.Reason)
}
func (e *WAFInvalidParameterException) HasReason() bool {
	return e.Reason != nil
}
func (e *WAFInvalidParameterException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFInvalidParameterException) HasMessage() bool {
	return e.Message != nil
}
func (e *WAFInvalidParameterException) GetField() ParameterExceptionField {
	return e.Field
}
func (e *WAFInvalidParameterException) GetParameter() string {
	return ptr.ToString(e.Parameter)
}
func (e *WAFInvalidParameterException) HasParameter() bool {
	return e.Parameter != nil
}

// The operation failed because the specified policy isn't in the proper format.
// <p>The policy specifications must conform to the following:</p> <ul> <li> <p>The
// policy must be composed using IAM Policy version 2012-10-17 or version
// 2015-01-01.</p> </li> <li> <p>The policy must include specifications for
// <code>Effect</code>, <code>Action</code>, and <code>Principal</code>.</p> </li>
// <li> <p> <code>Effect</code> must specify <code>Allow</code>.</p> </li> <li> <p>
// <code>Action</code> must specify <code>wafv2:CreateWebACL</code>,
// <code>wafv2:UpdateWebACL</code>, and
// <code>wafv2:PutFirewallManagerRuleGroups</code>. AWS WAF rejects any extra
// actions or wildcard actions in the policy.</p> </li> <li> <p>The policy must not
// include a <code>Resource</code> parameter.</p> </li> </ul> <p>For more
// information, see <a
// href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM
// Policies</a>. </p>
type WAFInvalidPermissionPolicyException struct {
	Message *string
}

func (e *WAFInvalidPermissionPolicyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFInvalidPermissionPolicyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFInvalidPermissionPolicyException) ErrorCode() string {
	return "WAFInvalidPermissionPolicyException"
}
func (e *WAFInvalidPermissionPolicyException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *WAFInvalidPermissionPolicyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFInvalidPermissionPolicyException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF couldn’t perform the operation because the resource that you requested
// isn’t valid. Check the resource, and try again.
type WAFInvalidResourceException struct {
	Message *string
}

func (e *WAFInvalidResourceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFInvalidResourceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFInvalidResourceException) ErrorCode() string             { return "WAFInvalidResourceException" }
func (e *WAFInvalidResourceException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFInvalidResourceException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFInvalidResourceException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF couldn’t perform the operation because you exceeded your resource limit.
// For example, the maximum number of WebACL objects that you can create for an AWS
// account. For more information, see Limits
// (https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the AWS
// WAF Developer Guide.
type WAFLimitsExceededException struct {
	Message *string
}

func (e *WAFLimitsExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFLimitsExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFLimitsExceededException) ErrorCode() string             { return "WAFLimitsExceededException" }
func (e *WAFLimitsExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFLimitsExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFLimitsExceededException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF couldn’t perform the operation because your resource doesn’t exist.
type WAFNonexistentItemException struct {
	Message *string
}

func (e *WAFNonexistentItemException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFNonexistentItemException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFNonexistentItemException) ErrorCode() string             { return "WAFNonexistentItemException" }
func (e *WAFNonexistentItemException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFNonexistentItemException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFNonexistentItemException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF couldn’t save your changes because you tried to update or delete a
// resource that has changed since you last retrieved it. Get the resource again,
// make any changes you need to make to the new copy, and retry your operation.
type WAFOptimisticLockException struct {
	Message *string
}

func (e *WAFOptimisticLockException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFOptimisticLockException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFOptimisticLockException) ErrorCode() string             { return "WAFOptimisticLockException" }
func (e *WAFOptimisticLockException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFOptimisticLockException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFOptimisticLockException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF is not able to access the service linked role. This can be caused by a
// previous PutLoggingConfiguration request, which can lock the service linked role
// for about 20 seconds. Please try your request again. The service linked role can
// also be locked by a previous DeleteServiceLinkedRole request, which can lock the
// role for 15 minutes or more. If you recently made a call to
// DeleteServiceLinkedRole, wait at least 15 minutes and try the request again. If
// you receive this same exception again, you will have to wait additional time
// until the role is unlocked.
type WAFServiceLinkedRoleErrorException struct {
	Message *string
}

func (e *WAFServiceLinkedRoleErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFServiceLinkedRoleErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFServiceLinkedRoleErrorException) ErrorCode() string {
	return "WAFServiceLinkedRoleErrorException"
}
func (e *WAFServiceLinkedRoleErrorException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *WAFServiceLinkedRoleErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFServiceLinkedRoleErrorException) HasMessage() bool {
	return e.Message != nil
}

//
type WAFSubscriptionNotFoundException struct {
	Message *string
}

func (e *WAFSubscriptionNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFSubscriptionNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFSubscriptionNotFoundException) ErrorCode() string {
	return "WAFSubscriptionNotFoundException"
}
func (e *WAFSubscriptionNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFSubscriptionNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFSubscriptionNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// An error occurred during the tagging operation. Retry your request.
type WAFTagOperationException struct {
	Message *string
}

func (e *WAFTagOperationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFTagOperationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFTagOperationException) ErrorCode() string             { return "WAFTagOperationException" }
func (e *WAFTagOperationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFTagOperationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFTagOperationException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF couldn’t perform your tagging operation because of an internal error.
// Retry your request.
type WAFTagOperationInternalErrorException struct {
	Message *string
}

func (e *WAFTagOperationInternalErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFTagOperationInternalErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFTagOperationInternalErrorException) ErrorCode() string {
	return "WAFTagOperationInternalErrorException"
}
func (e *WAFTagOperationInternalErrorException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultServer
}
func (e *WAFTagOperationInternalErrorException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFTagOperationInternalErrorException) HasMessage() bool {
	return e.Message != nil
}

// AWS WAF couldn’t retrieve the resource that you requested. Retry your request.
type WAFUnavailableEntityException struct {
	Message *string
}

func (e *WAFUnavailableEntityException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *WAFUnavailableEntityException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *WAFUnavailableEntityException) ErrorCode() string             { return "WAFUnavailableEntityException" }
func (e *WAFUnavailableEntityException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *WAFUnavailableEntityException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *WAFUnavailableEntityException) HasMessage() bool {
	return e.Message != nil
}
