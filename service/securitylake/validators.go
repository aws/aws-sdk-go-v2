// Code generated by smithy-go-codegen DO NOT EDIT.

package securitylake

import (
	"context"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/service/securitylake/types"
	smithy "github.com/aws/smithy-go"
	"github.com/aws/smithy-go/middleware"
)

type validateOpCreateAwsLogSource struct {
}

func (*validateOpCreateAwsLogSource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAwsLogSource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAwsLogSourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAwsLogSourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateCustomLogSource struct {
}

func (*validateOpCreateCustomLogSource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateCustomLogSource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateCustomLogSourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateCustomLogSourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateDatalakeAutoEnable struct {
}

func (*validateOpCreateDatalakeAutoEnable) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateDatalakeAutoEnable) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateDatalakeAutoEnableInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateDatalakeAutoEnableInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateDatalakeDelegatedAdmin struct {
}

func (*validateOpCreateDatalakeDelegatedAdmin) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateDatalakeDelegatedAdmin) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateDatalakeDelegatedAdminInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateDatalakeDelegatedAdminInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateDatalakeExceptionsSubscription struct {
}

func (*validateOpCreateDatalakeExceptionsSubscription) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateDatalakeExceptionsSubscription) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateDatalakeExceptionsSubscriptionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateDatalakeExceptionsSubscriptionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateSubscriber struct {
}

func (*validateOpCreateSubscriber) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateSubscriber) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateSubscriberInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateSubscriberInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateSubscriptionNotificationConfiguration struct {
}

func (*validateOpCreateSubscriptionNotificationConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateSubscriptionNotificationConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateSubscriptionNotificationConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateSubscriptionNotificationConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAwsLogSource struct {
}

func (*validateOpDeleteAwsLogSource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAwsLogSource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAwsLogSourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAwsLogSourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteCustomLogSource struct {
}

func (*validateOpDeleteCustomLogSource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteCustomLogSource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteCustomLogSourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteCustomLogSourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteDatalakeAutoEnable struct {
}

func (*validateOpDeleteDatalakeAutoEnable) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteDatalakeAutoEnable) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteDatalakeAutoEnableInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteDatalakeAutoEnableInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteDatalakeDelegatedAdmin struct {
}

func (*validateOpDeleteDatalakeDelegatedAdmin) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteDatalakeDelegatedAdmin) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteDatalakeDelegatedAdminInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteDatalakeDelegatedAdminInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteSubscriber struct {
}

func (*validateOpDeleteSubscriber) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteSubscriber) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteSubscriberInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteSubscriberInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteSubscriptionNotificationConfiguration struct {
}

func (*validateOpDeleteSubscriptionNotificationConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteSubscriptionNotificationConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteSubscriptionNotificationConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteSubscriptionNotificationConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetSubscriber struct {
}

func (*validateOpGetSubscriber) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetSubscriber) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetSubscriberInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetSubscriberInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateDatalakeExceptionsExpiry struct {
}

func (*validateOpUpdateDatalakeExceptionsExpiry) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateDatalakeExceptionsExpiry) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateDatalakeExceptionsExpiryInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateDatalakeExceptionsExpiryInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateDatalakeExceptionsSubscription struct {
}

func (*validateOpUpdateDatalakeExceptionsSubscription) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateDatalakeExceptionsSubscription) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateDatalakeExceptionsSubscriptionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateDatalakeExceptionsSubscriptionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateDatalake struct {
}

func (*validateOpUpdateDatalake) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateDatalake) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateDatalakeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateDatalakeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateSubscriber struct {
}

func (*validateOpUpdateSubscriber) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateSubscriber) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateSubscriberInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateSubscriberInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateSubscriptionNotificationConfiguration struct {
}

func (*validateOpUpdateSubscriptionNotificationConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateSubscriptionNotificationConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateSubscriptionNotificationConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateSubscriptionNotificationConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpCreateAwsLogSourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAwsLogSource{}, middleware.After)
}

func addOpCreateCustomLogSourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateCustomLogSource{}, middleware.After)
}

func addOpCreateDatalakeAutoEnableValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateDatalakeAutoEnable{}, middleware.After)
}

func addOpCreateDatalakeDelegatedAdminValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateDatalakeDelegatedAdmin{}, middleware.After)
}

func addOpCreateDatalakeExceptionsSubscriptionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateDatalakeExceptionsSubscription{}, middleware.After)
}

func addOpCreateSubscriberValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateSubscriber{}, middleware.After)
}

func addOpCreateSubscriptionNotificationConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateSubscriptionNotificationConfiguration{}, middleware.After)
}

func addOpDeleteAwsLogSourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAwsLogSource{}, middleware.After)
}

func addOpDeleteCustomLogSourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteCustomLogSource{}, middleware.After)
}

func addOpDeleteDatalakeAutoEnableValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteDatalakeAutoEnable{}, middleware.After)
}

func addOpDeleteDatalakeDelegatedAdminValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteDatalakeDelegatedAdmin{}, middleware.After)
}

func addOpDeleteSubscriberValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteSubscriber{}, middleware.After)
}

func addOpDeleteSubscriptionNotificationConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteSubscriptionNotificationConfiguration{}, middleware.After)
}

func addOpGetSubscriberValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetSubscriber{}, middleware.After)
}

func addOpUpdateDatalakeExceptionsExpiryValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateDatalakeExceptionsExpiry{}, middleware.After)
}

func addOpUpdateDatalakeExceptionsSubscriptionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateDatalakeExceptionsSubscription{}, middleware.After)
}

func addOpUpdateDatalakeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateDatalake{}, middleware.After)
}

func addOpUpdateSubscriberValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateSubscriber{}, middleware.After)
}

func addOpUpdateSubscriptionNotificationConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateSubscriptionNotificationConfiguration{}, middleware.After)
}

func validateAutoEnableNewRegionConfiguration(v *types.AutoEnableNewRegionConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutoEnableNewRegionConfiguration"}
	if len(v.Region) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Region"))
	}
	if v.Sources == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Sources"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAutoEnableNewRegionConfigurationList(v []types.AutoEnableNewRegionConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AutoEnableNewRegionConfigurationList"}
	for i := range v {
		if err := validateAutoEnableNewRegionConfiguration(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAwsLogSourceInput(v *CreateAwsLogSourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAwsLogSourceInput"}
	if v.InputOrder == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputOrder"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateCustomLogSourceInput(v *CreateCustomLogSourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateCustomLogSourceInput"}
	if v.CustomSourceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomSourceName"))
	}
	if len(v.EventClass) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("EventClass"))
	}
	if v.GlueInvocationRoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("GlueInvocationRoleArn"))
	}
	if v.LogProviderAccountId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LogProviderAccountId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateDatalakeAutoEnableInput(v *CreateDatalakeAutoEnableInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateDatalakeAutoEnableInput"}
	if v.ConfigurationForNewAccounts == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ConfigurationForNewAccounts"))
	} else if v.ConfigurationForNewAccounts != nil {
		if err := validateAutoEnableNewRegionConfigurationList(v.ConfigurationForNewAccounts); err != nil {
			invalidParams.AddNested("ConfigurationForNewAccounts", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateDatalakeDelegatedAdminInput(v *CreateDatalakeDelegatedAdminInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateDatalakeDelegatedAdminInput"}
	if v.Account == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Account"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateDatalakeExceptionsSubscriptionInput(v *CreateDatalakeExceptionsSubscriptionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateDatalakeExceptionsSubscriptionInput"}
	if len(v.SubscriptionProtocol) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("SubscriptionProtocol"))
	}
	if v.NotificationEndpoint == nil {
		invalidParams.Add(smithy.NewErrParamRequired("NotificationEndpoint"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateSubscriberInput(v *CreateSubscriberInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateSubscriberInput"}
	if v.SourceTypes == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SourceTypes"))
	}
	if v.AccountId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AccountId"))
	}
	if v.ExternalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ExternalId"))
	}
	if v.SubscriberName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SubscriberName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateSubscriptionNotificationConfigurationInput(v *CreateSubscriptionNotificationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateSubscriptionNotificationConfigurationInput"}
	if v.SubscriptionId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SubscriptionId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAwsLogSourceInput(v *DeleteAwsLogSourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAwsLogSourceInput"}
	if v.InputOrder == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputOrder"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteCustomLogSourceInput(v *DeleteCustomLogSourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteCustomLogSourceInput"}
	if v.CustomSourceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomSourceName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteDatalakeAutoEnableInput(v *DeleteDatalakeAutoEnableInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteDatalakeAutoEnableInput"}
	if v.RemoveFromConfigurationForNewAccounts == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RemoveFromConfigurationForNewAccounts"))
	} else if v.RemoveFromConfigurationForNewAccounts != nil {
		if err := validateAutoEnableNewRegionConfigurationList(v.RemoveFromConfigurationForNewAccounts); err != nil {
			invalidParams.AddNested("RemoveFromConfigurationForNewAccounts", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteDatalakeDelegatedAdminInput(v *DeleteDatalakeDelegatedAdminInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteDatalakeDelegatedAdminInput"}
	if v.Account == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Account"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteSubscriberInput(v *DeleteSubscriberInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteSubscriberInput"}
	if v.Id == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Id"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteSubscriptionNotificationConfigurationInput(v *DeleteSubscriptionNotificationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteSubscriptionNotificationConfigurationInput"}
	if v.SubscriptionId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SubscriptionId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetSubscriberInput(v *GetSubscriberInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetSubscriberInput"}
	if v.Id == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Id"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateDatalakeExceptionsExpiryInput(v *UpdateDatalakeExceptionsExpiryInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateDatalakeExceptionsExpiryInput"}
	if v.ExceptionMessageExpiry == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ExceptionMessageExpiry"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateDatalakeExceptionsSubscriptionInput(v *UpdateDatalakeExceptionsSubscriptionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateDatalakeExceptionsSubscriptionInput"}
	if len(v.SubscriptionProtocol) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("SubscriptionProtocol"))
	}
	if v.NotificationEndpoint == nil {
		invalidParams.Add(smithy.NewErrParamRequired("NotificationEndpoint"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateDatalakeInput(v *UpdateDatalakeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateDatalakeInput"}
	if v.Configurations == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Configurations"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateSubscriberInput(v *UpdateSubscriberInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateSubscriberInput"}
	if v.Id == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Id"))
	}
	if v.SourceTypes == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SourceTypes"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateSubscriptionNotificationConfigurationInput(v *UpdateSubscriptionNotificationConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateSubscriptionNotificationConfigurationInput"}
	if v.SubscriptionId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SubscriptionId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
