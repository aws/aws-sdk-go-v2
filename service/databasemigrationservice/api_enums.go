// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package databasemigrationservice

type AuthMechanismValue string

// Enum values for AuthMechanismValue
const (
	AuthMechanismValueDefault   AuthMechanismValue = "default"
	AuthMechanismValueMongodbCr AuthMechanismValue = "mongodb_cr"
	AuthMechanismValueScramSha1 AuthMechanismValue = "scram_sha_1"
)

func (enum AuthMechanismValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AuthMechanismValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type AuthTypeValue string

// Enum values for AuthTypeValue
const (
	AuthTypeValueNo       AuthTypeValue = "no"
	AuthTypeValuePassword AuthTypeValue = "password"
)

func (enum AuthTypeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AuthTypeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type CompressionTypeValue string

// Enum values for CompressionTypeValue
const (
	CompressionTypeValueNone CompressionTypeValue = "none"
	CompressionTypeValueGzip CompressionTypeValue = "gzip"
)

func (enum CompressionTypeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum CompressionTypeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DataFormatValue string

// Enum values for DataFormatValue
const (
	DataFormatValueCsv     DataFormatValue = "csv"
	DataFormatValueParquet DataFormatValue = "parquet"
)

func (enum DataFormatValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DataFormatValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DmsSslModeValue string

// Enum values for DmsSslModeValue
const (
	DmsSslModeValueNone       DmsSslModeValue = "none"
	DmsSslModeValueRequire    DmsSslModeValue = "require"
	DmsSslModeValueVerifyCa   DmsSslModeValue = "verify-ca"
	DmsSslModeValueVerifyFull DmsSslModeValue = "verify-full"
)

func (enum DmsSslModeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DmsSslModeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EncodingTypeValue string

// Enum values for EncodingTypeValue
const (
	EncodingTypeValuePlain           EncodingTypeValue = "plain"
	EncodingTypeValuePlainDictionary EncodingTypeValue = "plain-dictionary"
	EncodingTypeValueRleDictionary   EncodingTypeValue = "rle-dictionary"
)

func (enum EncodingTypeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EncodingTypeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EncryptionModeValue string

// Enum values for EncryptionModeValue
const (
	EncryptionModeValueSseS3  EncryptionModeValue = "sse-s3"
	EncryptionModeValueSseKms EncryptionModeValue = "sse-kms"
)

func (enum EncryptionModeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EncryptionModeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type MessageFormatValue string

// Enum values for MessageFormatValue
const (
	MessageFormatValueJson MessageFormatValue = "json"
)

func (enum MessageFormatValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum MessageFormatValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type MigrationTypeValue string

// Enum values for MigrationTypeValue
const (
	MigrationTypeValueFullLoad       MigrationTypeValue = "full-load"
	MigrationTypeValueCdc            MigrationTypeValue = "cdc"
	MigrationTypeValueFullLoadAndCdc MigrationTypeValue = "full-load-and-cdc"
)

func (enum MigrationTypeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum MigrationTypeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type NestingLevelValue string

// Enum values for NestingLevelValue
const (
	NestingLevelValueNone NestingLevelValue = "none"
	NestingLevelValueOne  NestingLevelValue = "one"
)

func (enum NestingLevelValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum NestingLevelValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ParquetVersionValue string

// Enum values for ParquetVersionValue
const (
	ParquetVersionValueParquet10 ParquetVersionValue = "parquet-1-0"
	ParquetVersionValueParquet20 ParquetVersionValue = "parquet-2-0"
)

func (enum ParquetVersionValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ParquetVersionValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RefreshSchemasStatusTypeValue string

// Enum values for RefreshSchemasStatusTypeValue
const (
	RefreshSchemasStatusTypeValueSuccessful RefreshSchemasStatusTypeValue = "successful"
	RefreshSchemasStatusTypeValueFailed     RefreshSchemasStatusTypeValue = "failed"
	RefreshSchemasStatusTypeValueRefreshing RefreshSchemasStatusTypeValue = "refreshing"
)

func (enum RefreshSchemasStatusTypeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RefreshSchemasStatusTypeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReleaseStatusValues string

// Enum values for ReleaseStatusValues
const (
	ReleaseStatusValuesBeta ReleaseStatusValues = "beta"
)

func (enum ReleaseStatusValues) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReleaseStatusValues) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReloadOptionValue string

// Enum values for ReloadOptionValue
const (
	ReloadOptionValueDataReload   ReloadOptionValue = "data-reload"
	ReloadOptionValueValidateOnly ReloadOptionValue = "validate-only"
)

func (enum ReloadOptionValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReloadOptionValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReplicationEndpointTypeValue string

// Enum values for ReplicationEndpointTypeValue
const (
	ReplicationEndpointTypeValueSource ReplicationEndpointTypeValue = "source"
	ReplicationEndpointTypeValueTarget ReplicationEndpointTypeValue = "target"
)

func (enum ReplicationEndpointTypeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReplicationEndpointTypeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SourceType string

// Enum values for SourceType
const (
	SourceTypeReplicationInstance SourceType = "replication-instance"
)

func (enum SourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type StartReplicationTaskTypeValue string

// Enum values for StartReplicationTaskTypeValue
const (
	StartReplicationTaskTypeValueStartReplication StartReplicationTaskTypeValue = "start-replication"
	StartReplicationTaskTypeValueResumeProcessing StartReplicationTaskTypeValue = "resume-processing"
	StartReplicationTaskTypeValueReloadTarget     StartReplicationTaskTypeValue = "reload-target"
)

func (enum StartReplicationTaskTypeValue) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum StartReplicationTaskTypeValue) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
