// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package databasemigrationservice

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
)

const opCreateEventSubscription = "CreateEventSubscription"

// CreateEventSubscriptionRequest returns a request value for making API operation for
// AWS Database Migration Service.
//
// Creates an AWS DMS event notification subscription.
//
// You can specify the type of source (SourceType) you want to be notified of,
// provide a list of AWS DMS source IDs (SourceIds) that triggers the events,
// and provide a list of event categories (EventCategories) for events you want
// to be notified of. If you specify both the SourceType and SourceIds, such
// as SourceType = replication-instance and SourceIdentifier = my-replinstance,
// you will be notified of all the replication instance events for the specified
// source. If you specify a SourceType but don't specify a SourceIdentifier,
// you receive notice of the events for that source type for all your AWS DMS
// sources. If you don't specify either SourceType nor SourceIdentifier, you
// will be notified of events generated from all AWS DMS sources belonging to
// your customer account.
//
// For more information about AWS DMS events, see Working with Events and Notifications
// (https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html) in the
// AWS Database Migration Service User Guide.
//
//    // Example sending a request using CreateEventSubscriptionRequest.
//    req := client.CreateEventSubscriptionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/dms-2016-01-01/CreateEventSubscription
func (c *Client) CreateEventSubscriptionRequest(input *types.CreateEventSubscriptionInput) CreateEventSubscriptionRequest {
	op := &aws.Operation{
		Name:       opCreateEventSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateEventSubscriptionInput{}
	}

	req := c.newRequest(op, input, &types.CreateEventSubscriptionOutput{})
	return CreateEventSubscriptionRequest{Request: req, Input: input, Copy: c.CreateEventSubscriptionRequest}
}

// CreateEventSubscriptionRequest is the request type for the
// CreateEventSubscription API operation.
type CreateEventSubscriptionRequest struct {
	*aws.Request
	Input *types.CreateEventSubscriptionInput
	Copy  func(*types.CreateEventSubscriptionInput) CreateEventSubscriptionRequest
}

// Send marshals and sends the CreateEventSubscription API request.
func (r CreateEventSubscriptionRequest) Send(ctx context.Context) (*CreateEventSubscriptionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateEventSubscriptionResponse{
		CreateEventSubscriptionOutput: r.Request.Data.(*types.CreateEventSubscriptionOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateEventSubscriptionResponse is the response type for the
// CreateEventSubscription API operation.
type CreateEventSubscriptionResponse struct {
	*types.CreateEventSubscriptionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateEventSubscription request.
func (r *CreateEventSubscriptionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
