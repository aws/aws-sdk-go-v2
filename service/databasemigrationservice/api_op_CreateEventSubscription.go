// Code generated by smithy-go-codegen DO NOT EDIT.

package databasemigrationservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an AWS DMS event notification subscription. You can specify the type of
// source (SourceType) you want to be notified of, provide a list of AWS DMS source
// IDs (SourceIds) that triggers the events, and provide a list of event categories
// (EventCategories) for events you want to be notified of. If you specify both the
// SourceType and SourceIds, such as SourceType = replication-instance and
// SourceIdentifier = my-replinstance, you will be notified of all the replication
// instance events for the specified source. If you specify a SourceType but don't
// specify a SourceIdentifier, you receive notice of the events for that source
// type for all your AWS DMS sources. If you don't specify either SourceType nor
// SourceIdentifier, you will be notified of events generated from all AWS DMS
// sources belonging to your customer account. For more information about AWS DMS
// events, see Working with Events and Notifications
// (https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html) in the AWS
// Database Migration Service User Guide.
func (c *Client) CreateEventSubscription(ctx context.Context, params *CreateEventSubscriptionInput, optFns ...func(*Options)) (*CreateEventSubscriptionOutput, error) {
	stack := middleware.NewStack("CreateEventSubscription", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateEventSubscriptionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateEventSubscriptionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateEventSubscription(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateEventSubscription",
			Err:           err,
		}
	}
	out := result.(*CreateEventSubscriptionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type CreateEventSubscriptionInput struct {
	// A list of identifiers for which AWS DMS provides notification events. If you
	// don't specify a value, notifications are provided for all sources. If you
	// specify multiple values, they must be of the same type. For example, if you
	// specify a database instance ID, then all of the other values must be database
	// instance IDs.
	SourceIds []*string
	// The name of the AWS DMS event notification subscription. This name must be less
	// than 255 characters.
	SubscriptionName *string
	// A list of event categories for a source type that you want to subscribe to. For
	// more information, see Working with Events and Notifications
	// (https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html) in the AWS
	// Database Migration Service User Guide.
	EventCategories []*string
	// A Boolean value; set to true to activate the subscription, or set to false to
	// create the subscription but not activate it.
	Enabled *bool
	// The type of AWS DMS resource that generates the events. For example, if you want
	// to be notified of events generated by a replication instance, you set this
	// parameter to replication-instance. If this value isn't specified, all events are
	// returned. Valid values: replication-instance | replication-task
	SourceType *string
	// The Amazon Resource Name (ARN) of the Amazon SNS topic created for event
	// notification. The ARN is created by Amazon SNS when you create a topic and
	// subscribe to it.
	SnsTopicArn *string
	// One or more tags to be assigned to the event subscription.
	Tags []*types.Tag
}

//
type CreateEventSubscriptionOutput struct {
	// The event subscription that was created.
	EventSubscription *types.EventSubscription

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateEventSubscriptionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateEventSubscription{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateEventSubscription{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateEventSubscription(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "dms",
		OperationName: "CreateEventSubscription",
	}
}
