// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iotthingsgraph

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iotthingsgraph/types"
)

const opUploadEntityDefinitions = "UploadEntityDefinitions"

// UploadEntityDefinitionsRequest returns a request value for making API operation for
// AWS IoT Things Graph.
//
// Asynchronously uploads one or more entity definitions to the user's namespace.
// The document parameter is required if syncWithPublicNamespace and deleteExistingEntites
// are false. If the syncWithPublicNamespace parameter is set to true, the user's
// namespace will synchronize with the latest version of the public namespace.
// If deprecateExistingEntities is set to true, all entities in the latest version
// will be deleted before the new DefinitionDocument is uploaded.
//
// When a user uploads entity definitions for the first time, the service creates
// a new namespace for the user. The new namespace tracks the public namespace.
// Currently users can have only one namespace. The namespace version increments
// whenever a user uploads entity definitions that are backwards-incompatible
// and whenever a user sets the syncWithPublicNamespace parameter or the deprecateExistingEntities
// parameter to true.
//
// The IDs for all of the entities should be in URN format. Each entity must
// be in the user's namespace. Users can't create entities in the public namespace,
// but entity definitions can refer to entities in the public namespace.
//
// Valid entities are Device, DeviceModel, Service, Capability, State, Action,
// Event, Property, Mapping, Enum.
//
//    // Example sending a request using UploadEntityDefinitionsRequest.
//    req := client.UploadEntityDefinitionsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iotthingsgraph-2018-09-06/UploadEntityDefinitions
func (c *Client) UploadEntityDefinitionsRequest(input *types.UploadEntityDefinitionsInput) UploadEntityDefinitionsRequest {
	op := &aws.Operation{
		Name:       opUploadEntityDefinitions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UploadEntityDefinitionsInput{}
	}

	req := c.newRequest(op, input, &types.UploadEntityDefinitionsOutput{})
	return UploadEntityDefinitionsRequest{Request: req, Input: input, Copy: c.UploadEntityDefinitionsRequest}
}

// UploadEntityDefinitionsRequest is the request type for the
// UploadEntityDefinitions API operation.
type UploadEntityDefinitionsRequest struct {
	*aws.Request
	Input *types.UploadEntityDefinitionsInput
	Copy  func(*types.UploadEntityDefinitionsInput) UploadEntityDefinitionsRequest
}

// Send marshals and sends the UploadEntityDefinitions API request.
func (r UploadEntityDefinitionsRequest) Send(ctx context.Context) (*UploadEntityDefinitionsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UploadEntityDefinitionsResponse{
		UploadEntityDefinitionsOutput: r.Request.Data.(*types.UploadEntityDefinitionsOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UploadEntityDefinitionsResponse is the response type for the
// UploadEntityDefinitions API operation.
type UploadEntityDefinitionsResponse struct {
	*types.UploadEntityDefinitionsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UploadEntityDefinitions request.
func (r *UploadEntityDefinitionsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
