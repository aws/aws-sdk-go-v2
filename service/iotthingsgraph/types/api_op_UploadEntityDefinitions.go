// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

type UploadEntityDefinitionsInput struct {
	_ struct{} `type:"structure"`

	// A Boolean that specifies whether to deprecate all entities in the latest
	// version before uploading the new DefinitionDocument. If set to true, the
	// upload will create a new namespace version.
	DeprecateExistingEntities *bool `locationName:"deprecateExistingEntities" type:"boolean"`

	// The DefinitionDocument that defines the updated entities.
	Document *DefinitionDocument `locationName:"document" type:"structure"`

	// A Boolean that specifies whether to synchronize with the latest version of
	// the public namespace. If set to true, the upload will create a new namespace
	// version.
	SyncWithPublicNamespace *bool `locationName:"syncWithPublicNamespace" type:"boolean"`
}

// String returns the string representation
func (s UploadEntityDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UploadEntityDefinitionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UploadEntityDefinitionsInput"}
	if s.Document != nil {
		if err := s.Document.Validate(); err != nil {
			invalidParams.AddNested("Document", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type UploadEntityDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	// The ID that specifies the upload action. You can use this to track the status
	// of the upload.
	//
	// UploadId is a required field
	UploadId *string `locationName:"uploadId" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s UploadEntityDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}
