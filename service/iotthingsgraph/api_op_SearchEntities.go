// Code generated by smithy-go-codegen DO NOT EDIT.

package iotthingsgraph

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iotthingsgraph/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Searches for entities of the specified type. You can search for entities in your
// namespace and the public namespace that you're tracking.
func (c *Client) SearchEntities(ctx context.Context, params *SearchEntitiesInput, optFns ...func(*Options)) (*SearchEntitiesOutput, error) {
	if params == nil {
		params = &SearchEntitiesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "SearchEntities", params, optFns, addOperationSearchEntitiesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*SearchEntitiesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SearchEntitiesInput struct {

	// The entity types for which to search.
	//
	// This member is required.
	EntityTypes []types.EntityType

	// Optional filter to apply to the search. Valid filters are NAMENAMESPACE,
	// SEMANTIC_TYPE_PATH and REFERENCED_ENTITY_ID. REFERENCED_ENTITY_ID filters on
	// entities that are used by the entity in the result set. For example, you can
	// filter on the ID of a property that is used in a state. Multiple filters
	// function as OR criteria in the query. Multiple values passed inside the filter
	// function as AND criteria.
	Filters []*types.EntityFilter

	// The maximum number of results to return in the response.
	MaxResults *int32

	// The version of the user's namespace. Defaults to the latest version of the
	// user's namespace.
	NamespaceVersion *int64

	// The string that specifies the next page of results. Use this when you're
	// paginating results.
	NextToken *string
}

type SearchEntitiesOutput struct {

	// An array of descriptions for each entity returned in the search result.
	Descriptions []*types.EntityDescription

	// The string to specify as nextToken when you request the next page of results.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationSearchEntitiesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpSearchEntities{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpSearchEntities{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSearchEntitiesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSearchEntities(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opSearchEntities(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iotthingsgraph",
		OperationName: "SearchEntities",
	}
}
