// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iotthingsgraph

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iotthingsgraph/types"
)

const opSearchEntities = "SearchEntities"

// SearchEntitiesRequest returns a request value for making API operation for
// AWS IoT Things Graph.
//
// Searches for entities of the specified type. You can search for entities
// in your namespace and the public namespace that you're tracking.
//
//    // Example sending a request using SearchEntitiesRequest.
//    req := client.SearchEntitiesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iotthingsgraph-2018-09-06/SearchEntities
func (c *Client) SearchEntitiesRequest(input *types.SearchEntitiesInput) SearchEntitiesRequest {
	op := &aws.Operation{
		Name:       opSearchEntities,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.SearchEntitiesInput{}
	}

	req := c.newRequest(op, input, &types.SearchEntitiesOutput{})
	return SearchEntitiesRequest{Request: req, Input: input, Copy: c.SearchEntitiesRequest}
}

// SearchEntitiesRequest is the request type for the
// SearchEntities API operation.
type SearchEntitiesRequest struct {
	*aws.Request
	Input *types.SearchEntitiesInput
	Copy  func(*types.SearchEntitiesInput) SearchEntitiesRequest
}

// Send marshals and sends the SearchEntities API request.
func (r SearchEntitiesRequest) Send(ctx context.Context) (*SearchEntitiesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SearchEntitiesResponse{
		SearchEntitiesOutput: r.Request.Data.(*types.SearchEntitiesOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewSearchEntitiesRequestPaginator returns a paginator for SearchEntities.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.SearchEntitiesRequest(input)
//   p := iotthingsgraph.NewSearchEntitiesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewSearchEntitiesPaginator(req SearchEntitiesRequest) SearchEntitiesPaginator {
	return SearchEntitiesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.SearchEntitiesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// SearchEntitiesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type SearchEntitiesPaginator struct {
	aws.Pager
}

func (p *SearchEntitiesPaginator) CurrentPage() *types.SearchEntitiesOutput {
	return p.Pager.CurrentPage().(*types.SearchEntitiesOutput)
}

// SearchEntitiesResponse is the response type for the
// SearchEntities API operation.
type SearchEntitiesResponse struct {
	*types.SearchEntitiesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SearchEntities request.
func (r *SearchEntitiesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
