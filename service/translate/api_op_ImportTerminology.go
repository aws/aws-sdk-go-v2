// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package translate

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/translate/types"
)

const opImportTerminology = "ImportTerminology"

// ImportTerminologyRequest returns a request value for making API operation for
// Amazon Translate.
//
// Creates or updates a custom terminology, depending on whether or not one
// already exists for the given terminology name. Importing a terminology with
// the same name as an existing one will merge the terminologies based on the
// chosen merge strategy. Currently, the only supported merge strategy is OVERWRITE,
// and so the imported terminology will overwrite an existing terminology of
// the same name.
//
// If you import a terminology that overwrites an existing one, the new terminology
// take up to 10 minutes to fully propagate and be available for use in a translation
// due to cache policies with the DataPlane service that performs the translations.
//
//    // Example sending a request using ImportTerminologyRequest.
//    req := client.ImportTerminologyRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/translate-2017-07-01/ImportTerminology
func (c *Client) ImportTerminologyRequest(input *types.ImportTerminologyInput) ImportTerminologyRequest {
	op := &aws.Operation{
		Name:       opImportTerminology,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ImportTerminologyInput{}
	}

	req := c.newRequest(op, input, &types.ImportTerminologyOutput{})
	return ImportTerminologyRequest{Request: req, Input: input, Copy: c.ImportTerminologyRequest}
}

// ImportTerminologyRequest is the request type for the
// ImportTerminology API operation.
type ImportTerminologyRequest struct {
	*aws.Request
	Input *types.ImportTerminologyInput
	Copy  func(*types.ImportTerminologyInput) ImportTerminologyRequest
}

// Send marshals and sends the ImportTerminology API request.
func (r ImportTerminologyRequest) Send(ctx context.Context) (*ImportTerminologyResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ImportTerminologyResponse{
		ImportTerminologyOutput: r.Request.Data.(*types.ImportTerminologyOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ImportTerminologyResponse is the response type for the
// ImportTerminology API operation.
type ImportTerminologyResponse struct {
	*types.ImportTerminologyOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ImportTerminology request.
func (r *ImportTerminologyResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
