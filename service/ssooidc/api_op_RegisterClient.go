// Code generated by smithy-go-codegen DO NOT EDIT.

package ssooidc

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Registers a client with AWS SSO. This allows clients to initiate device
// authorization. The output should be persisted for reuse through many
// authentication requests.
func (c *Client) RegisterClient(ctx context.Context, params *RegisterClientInput, optFns ...func(*Options)) (*RegisterClientOutput, error) {
	stack := middleware.NewStack("RegisterClient", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpRegisterClientMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	retry.AddRetryMiddlewares(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRegisterClientValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRegisterClient(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RegisterClient",
			Err:           err,
		}
	}
	out := result.(*RegisterClientOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RegisterClientInput struct {
	// The type of client. The service supports only public as a client type. Anything
	// other than public will be rejected by the service.
	ClientType *string
	// The friendly name of the client.
	ClientName *string
	// The list of scopes that are defined by the client. Upon authorization, this list
	// is used to restrict permissions when granting an access token.
	Scopes []*string
}

type RegisterClientOutput struct {
	// The endpoint where the client can request authorization.
	AuthorizationEndpoint *string
	// A secret string generated for the client. The client will use this string to get
	// authenticated by the service in subsequent calls.
	ClientSecret *string
	// The endpoint where the client can get an access token.
	TokenEndpoint *string
	// The unique identifier string for each client. This client uses this identifier
	// to get authenticated by the service in subsequent calls.
	ClientId *string
	// Indicates the time at which the clientId and clientSecret will become invalid.
	ClientSecretExpiresAt *int64
	// Indicates the time at which the clientId and clientSecret were issued.
	ClientIdIssuedAt *int64

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpRegisterClientMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpRegisterClient{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpRegisterClient{}, middleware.After)
}

func newServiceMetadataMiddleware_opRegisterClient(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "awsssooidc",
		OperationName: "RegisterClient",
	}
}
