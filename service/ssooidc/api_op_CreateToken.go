// Code generated by smithy-go-codegen DO NOT EDIT.

package ssooidc

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates and returns an access token for the authorized client. The access token
// issued will be used to fetch short-term credentials for the assigned roles in
// the AWS account.
func (c *Client) CreateToken(ctx context.Context, params *CreateTokenInput, optFns ...func(*Options)) (*CreateTokenOutput, error) {
	stack := middleware.NewStack("CreateToken", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateTokenMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	retry.AddRetryMiddlewares(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateTokenValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateToken(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateToken",
			Err:           err,
		}
	}
	out := result.(*CreateTokenOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateTokenInput struct {
	// The list of scopes that is defined by the client. Upon authorization, this list
	// is used to restrict permissions when granting an access token.
	Scope []*string
	// The unique identifier string for each client. This value should come from the
	// persisted result of the RegisterClient () API.
	ClientId *string
	// The location of the application that will receive the authorization code. Users
	// authorize the service to send the request to this location.
	RedirectUri *string
	// Supports grant types for authorization code, refresh token, and device code
	// request.
	GrantType *string
	// The token used to obtain an access token in the event that the access token is
	// invalid or expired. This token is not issued by the service.
	RefreshToken *string
	// Used only when calling this API for the device code grant type. This short-term
	// code is used to identify this authentication attempt. This should come from an
	// in-memory reference to the result of the StartDeviceAuthorization () API.
	DeviceCode *string
	// The authorization code received from the authorization service. This parameter
	// is required to perform an authorization grant request to get access to a token.
	Code *string
	// A secret string generated for the client. This value should come from the
	// persisted result of the RegisterClient () API.
	ClientSecret *string
}

type CreateTokenOutput struct {
	// Indicates the time in seconds when an access token will expire.
	ExpiresIn *int32
	// A token that, if present, can be used to refresh a previously issued access
	// token that might have expired.
	RefreshToken *string
	// An opaque token to access AWS SSO resources assigned to a user.
	AccessToken *string
	// The identifier of the user that associated with the access token, if present.
	IdToken *string
	// Used to notify the client that the returned token is an access token. The
	// supported type is BearerToken.
	TokenType *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateTokenMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateToken{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateToken{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateToken(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "awsssooidc",
		OperationName: "CreateToken",
	}
}
