// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package health

import (
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opDescribeAffectedEntities = "DescribeAffectedEntities"

// DescribeAffectedEntitiesRequest is a API request type for the DescribeAffectedEntities API operation.
type DescribeAffectedEntitiesRequest struct {
	*aws.Request
	Input *DescribeAffectedEntitiesInput
}

// Send marshals and sends the DescribeAffectedEntities API request.
func (r DescribeAffectedEntitiesRequest) Send() (*DescribeAffectedEntitiesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DescribeAffectedEntitiesOutput), nil
}

// DescribeAffectedEntitiesRequest returns a request value for making API operation for
// AWS Health APIs and Notifications.
//
// Returns a list of entities that have been affected by the specified events,
// based on the specified filter criteria. Entities can refer to individual
// customer resources, groups of customer resources, or any other construct,
// depending on the AWS service. Events that have impact beyond that of the
// affected entities, or where the extent of impact is unknown, include at least
// one entity indicating this.
//
// At least one event ARN is required. Results are sorted by the lastUpdatedTime
// of the entity, starting with the most recent.
//
//    // Example sending a request using the DescribeAffectedEntitiesRequest method.
//    req := client.DescribeAffectedEntitiesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeAffectedEntities
func (c *Health) DescribeAffectedEntitiesRequest(input *DescribeAffectedEntitiesInput) DescribeAffectedEntitiesRequest {
	op := &aws.Operation{
		Name:       opDescribeAffectedEntities,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeAffectedEntitiesInput{}
	}

	output := &DescribeAffectedEntitiesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DescribeAffectedEntitiesRequest{Request: req, Input: input}
}

// DescribeAffectedEntitiesPages iterates over the pages of a DescribeAffectedEntities operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See DescribeAffectedEntities method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeAffectedEntities operation.
//    pageNum := 0
//    err := client.DescribeAffectedEntitiesPages(params,
//        func(page *DescribeAffectedEntitiesOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *Health) DescribeAffectedEntitiesPages(input *DescribeAffectedEntitiesInput, fn func(*DescribeAffectedEntitiesOutput, bool) bool) error {
	return c.DescribeAffectedEntitiesPagesWithContext(aws.BackgroundContext(), input, fn)
}

// DescribeAffectedEntitiesPagesWithContext same as DescribeAffectedEntitiesPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Health) DescribeAffectedEntitiesPagesWithContext(ctx aws.Context, input *DescribeAffectedEntitiesInput, fn func(*DescribeAffectedEntitiesOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *DescribeAffectedEntitiesInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.DescribeAffectedEntitiesRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*DescribeAffectedEntitiesOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opDescribeEntityAggregates = "DescribeEntityAggregates"

// DescribeEntityAggregatesRequest is a API request type for the DescribeEntityAggregates API operation.
type DescribeEntityAggregatesRequest struct {
	*aws.Request
	Input *DescribeEntityAggregatesInput
}

// Send marshals and sends the DescribeEntityAggregates API request.
func (r DescribeEntityAggregatesRequest) Send() (*DescribeEntityAggregatesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DescribeEntityAggregatesOutput), nil
}

// DescribeEntityAggregatesRequest returns a request value for making API operation for
// AWS Health APIs and Notifications.
//
// Returns the number of entities that are affected by each of the specified
// events. If no events are specified, the counts of all affected entities are
// returned.
//
//    // Example sending a request using the DescribeEntityAggregatesRequest method.
//    req := client.DescribeEntityAggregatesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEntityAggregates
func (c *Health) DescribeEntityAggregatesRequest(input *DescribeEntityAggregatesInput) DescribeEntityAggregatesRequest {
	op := &aws.Operation{
		Name:       opDescribeEntityAggregates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEntityAggregatesInput{}
	}

	output := &DescribeEntityAggregatesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DescribeEntityAggregatesRequest{Request: req, Input: input}
}

const opDescribeEventAggregates = "DescribeEventAggregates"

// DescribeEventAggregatesRequest is a API request type for the DescribeEventAggregates API operation.
type DescribeEventAggregatesRequest struct {
	*aws.Request
	Input *DescribeEventAggregatesInput
}

// Send marshals and sends the DescribeEventAggregates API request.
func (r DescribeEventAggregatesRequest) Send() (*DescribeEventAggregatesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DescribeEventAggregatesOutput), nil
}

// DescribeEventAggregatesRequest returns a request value for making API operation for
// AWS Health APIs and Notifications.
//
// Returns the number of events of each event type (issue, scheduled change,
// and account notification). If no filter is specified, the counts of all events
// in each category are returned.
//
//    // Example sending a request using the DescribeEventAggregatesRequest method.
//    req := client.DescribeEventAggregatesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventAggregates
func (c *Health) DescribeEventAggregatesRequest(input *DescribeEventAggregatesInput) DescribeEventAggregatesRequest {
	op := &aws.Operation{
		Name:       opDescribeEventAggregates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeEventAggregatesInput{}
	}

	output := &DescribeEventAggregatesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DescribeEventAggregatesRequest{Request: req, Input: input}
}

// DescribeEventAggregatesPages iterates over the pages of a DescribeEventAggregates operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See DescribeEventAggregates method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeEventAggregates operation.
//    pageNum := 0
//    err := client.DescribeEventAggregatesPages(params,
//        func(page *DescribeEventAggregatesOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *Health) DescribeEventAggregatesPages(input *DescribeEventAggregatesInput, fn func(*DescribeEventAggregatesOutput, bool) bool) error {
	return c.DescribeEventAggregatesPagesWithContext(aws.BackgroundContext(), input, fn)
}

// DescribeEventAggregatesPagesWithContext same as DescribeEventAggregatesPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Health) DescribeEventAggregatesPagesWithContext(ctx aws.Context, input *DescribeEventAggregatesInput, fn func(*DescribeEventAggregatesOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *DescribeEventAggregatesInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.DescribeEventAggregatesRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*DescribeEventAggregatesOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opDescribeEventDetails = "DescribeEventDetails"

// DescribeEventDetailsRequest is a API request type for the DescribeEventDetails API operation.
type DescribeEventDetailsRequest struct {
	*aws.Request
	Input *DescribeEventDetailsInput
}

// Send marshals and sends the DescribeEventDetails API request.
func (r DescribeEventDetailsRequest) Send() (*DescribeEventDetailsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DescribeEventDetailsOutput), nil
}

// DescribeEventDetailsRequest returns a request value for making API operation for
// AWS Health APIs and Notifications.
//
// Returns detailed information about one or more specified events. Information
// includes standard event data (region, service, etc., as returned by DescribeEvents),
// a detailed event description, and possible additional metadata that depends
// upon the nature of the event. Affected entities are not included; to retrieve
// those, use the DescribeAffectedEntities operation.
//
// If a specified event cannot be retrieved, an error message is returned for
// that event.
//
//    // Example sending a request using the DescribeEventDetailsRequest method.
//    req := client.DescribeEventDetailsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventDetails
func (c *Health) DescribeEventDetailsRequest(input *DescribeEventDetailsInput) DescribeEventDetailsRequest {
	op := &aws.Operation{
		Name:       opDescribeEventDetails,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEventDetailsInput{}
	}

	output := &DescribeEventDetailsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DescribeEventDetailsRequest{Request: req, Input: input}
}

const opDescribeEventTypes = "DescribeEventTypes"

// DescribeEventTypesRequest is a API request type for the DescribeEventTypes API operation.
type DescribeEventTypesRequest struct {
	*aws.Request
	Input *DescribeEventTypesInput
}

// Send marshals and sends the DescribeEventTypes API request.
func (r DescribeEventTypesRequest) Send() (*DescribeEventTypesOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DescribeEventTypesOutput), nil
}

// DescribeEventTypesRequest returns a request value for making API operation for
// AWS Health APIs and Notifications.
//
// Returns the event types that meet the specified filter criteria. If no filter
// criteria are specified, all event types are returned, in no particular order.
//
//    // Example sending a request using the DescribeEventTypesRequest method.
//    req := client.DescribeEventTypesRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventTypes
func (c *Health) DescribeEventTypesRequest(input *DescribeEventTypesInput) DescribeEventTypesRequest {
	op := &aws.Operation{
		Name:       opDescribeEventTypes,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeEventTypesInput{}
	}

	output := &DescribeEventTypesOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DescribeEventTypesRequest{Request: req, Input: input}
}

// DescribeEventTypesPages iterates over the pages of a DescribeEventTypes operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See DescribeEventTypes method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeEventTypes operation.
//    pageNum := 0
//    err := client.DescribeEventTypesPages(params,
//        func(page *DescribeEventTypesOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *Health) DescribeEventTypesPages(input *DescribeEventTypesInput, fn func(*DescribeEventTypesOutput, bool) bool) error {
	return c.DescribeEventTypesPagesWithContext(aws.BackgroundContext(), input, fn)
}

// DescribeEventTypesPagesWithContext same as DescribeEventTypesPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Health) DescribeEventTypesPagesWithContext(ctx aws.Context, input *DescribeEventTypesInput, fn func(*DescribeEventTypesOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *DescribeEventTypesInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.DescribeEventTypesRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*DescribeEventTypesOutput), !p.HasNextPage())
	}
	return p.Err()
}

const opDescribeEvents = "DescribeEvents"

// DescribeEventsRequest is a API request type for the DescribeEvents API operation.
type DescribeEventsRequest struct {
	*aws.Request
	Input *DescribeEventsInput
}

// Send marshals and sends the DescribeEvents API request.
func (r DescribeEventsRequest) Send() (*DescribeEventsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DescribeEventsOutput), nil
}

// DescribeEventsRequest returns a request value for making API operation for
// AWS Health APIs and Notifications.
//
// Returns information about events that meet the specified filter criteria.
// Events are returned in a summary form and do not include the detailed description,
// any additional metadata that depends on the event type, or any affected resources.
// To retrieve that information, use the DescribeEventDetails and DescribeAffectedEntities
// operations.
//
// If no filter criteria are specified, all events are returned. Results are
// sorted by lastModifiedTime, starting with the most recent.
//
//    // Example sending a request using the DescribeEventsRequest method.
//    req := client.DescribeEventsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEvents
func (c *Health) DescribeEventsRequest(input *DescribeEventsInput) DescribeEventsRequest {
	op := &aws.Operation{
		Name:       opDescribeEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeEventsInput{}
	}

	output := &DescribeEventsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DescribeEventsRequest{Request: req, Input: input}
}

// DescribeEventsPages iterates over the pages of a DescribeEvents operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See DescribeEvents method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeEvents operation.
//    pageNum := 0
//    err := client.DescribeEventsPages(params,
//        func(page *DescribeEventsOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *Health) DescribeEventsPages(input *DescribeEventsInput, fn func(*DescribeEventsOutput, bool) bool) error {
	return c.DescribeEventsPagesWithContext(aws.BackgroundContext(), input, fn)
}

// DescribeEventsPagesWithContext same as DescribeEventsPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Health) DescribeEventsPagesWithContext(ctx aws.Context, input *DescribeEventsInput, fn func(*DescribeEventsOutput, bool) bool, opts ...aws.Option) error {
	p := aws.Pagination{
		NewRequest: func() (*aws.Request, error) {
			var inCpy *DescribeEventsInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req := c.DescribeEventsRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req.Request, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*DescribeEventsOutput), !p.HasNextPage())
	}
	return p.Err()
}

// Information about an entity that is affected by a Health event.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/AffectedEntity
type AffectedEntity struct {
	_ struct{} `type:"structure"`

	// The 12-digit AWS account number that contains the affected entity.
	AwsAccountId *string `locationName:"awsAccountId" type:"string"`

	// The unique identifier for the entity. Format: arn:aws:health:entity-region:aws-account:entity/entity-id.
	// Example: arn:aws:health:us-east-1:111222333444:entity/AVh5GGT7ul1arKr1sE1K
	EntityArn *string `locationName:"entityArn" type:"string"`

	// The ID of the affected entity.
	EntityValue *string `locationName:"entityValue" type:"string"`

	// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID.
	// Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331
	EventArn *string `locationName:"eventArn" type:"string"`

	// The most recent time that the entity was updated.
	LastUpdatedTime *time.Time `locationName:"lastUpdatedTime" type:"timestamp" timestampFormat:"unix"`

	// The most recent status of the entity affected by the event. The possible
	// values are IMPAIRED, UNIMPAIRED, and UNKNOWN.
	StatusCode EntityStatusCode `locationName:"statusCode" type:"string" enum:"true"`

	// A map of entity tags attached to the affected entity.
	Tags map[string]string `locationName:"tags" type:"map"`
}

// String returns the string representation
func (s AffectedEntity) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AffectedEntity) GoString() string {
	return s.String()
}

// SetAwsAccountId sets the AwsAccountId field's value.
func (s *AffectedEntity) SetAwsAccountId(v string) *AffectedEntity {
	s.AwsAccountId = &v
	return s
}

// SetEntityArn sets the EntityArn field's value.
func (s *AffectedEntity) SetEntityArn(v string) *AffectedEntity {
	s.EntityArn = &v
	return s
}

// SetEntityValue sets the EntityValue field's value.
func (s *AffectedEntity) SetEntityValue(v string) *AffectedEntity {
	s.EntityValue = &v
	return s
}

// SetEventArn sets the EventArn field's value.
func (s *AffectedEntity) SetEventArn(v string) *AffectedEntity {
	s.EventArn = &v
	return s
}

// SetLastUpdatedTime sets the LastUpdatedTime field's value.
func (s *AffectedEntity) SetLastUpdatedTime(v time.Time) *AffectedEntity {
	s.LastUpdatedTime = &v
	return s
}

// SetStatusCode sets the StatusCode field's value.
func (s *AffectedEntity) SetStatusCode(v EntityStatusCode) *AffectedEntity {
	s.StatusCode = v
	return s
}

// SetTags sets the Tags field's value.
func (s *AffectedEntity) SetTags(v map[string]string) *AffectedEntity {
	s.Tags = v
	return s
}

// A range of dates and times that is used by the EventFilter and EntityFilter
// objects. If from is set and to is set: match items where the timestamp (startTime,
// endTime, or lastUpdatedTime) is between from and to inclusive. If from is
// set and to is not set: match items where the timestamp value is equal to
// or after from. If from is not set and to is set: match items where the timestamp
// value is equal to or before to.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DateTimeRange
type DateTimeRange struct {
	_ struct{} `type:"structure"`

	// The starting date and time of a time range.
	From *time.Time `locationName:"from" type:"timestamp" timestampFormat:"unix"`

	// The ending date and time of a time range.
	To *time.Time `locationName:"to" type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s DateTimeRange) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DateTimeRange) GoString() string {
	return s.String()
}

// SetFrom sets the From field's value.
func (s *DateTimeRange) SetFrom(v time.Time) *DateTimeRange {
	s.From = &v
	return s
}

// SetTo sets the To field's value.
func (s *DateTimeRange) SetTo(v time.Time) *DateTimeRange {
	s.To = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeAffectedEntitiesRequest
type DescribeAffectedEntitiesInput struct {
	_ struct{} `type:"structure"`

	// Values to narrow the results returned. At least one event ARN is required.
	//
	// Filter is a required field
	Filter *EntityFilter `locationName:"filter" type:"structure" required:"true"`

	// The locale (language) to return information in. English (en) is the default
	// and the only supported value at this time.
	Locale *string `locationName:"locale" min:"2" type:"string"`

	// The maximum number of items to return in one batch, between 10 and 100, inclusive.
	MaxResults *int64 `locationName:"maxResults" min:"10" type:"integer"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeAffectedEntitiesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAffectedEntitiesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeAffectedEntitiesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeAffectedEntitiesInput"}

	if s.Filter == nil {
		invalidParams.Add(aws.NewErrParamRequired("Filter"))
	}
	if s.Locale != nil && len(*s.Locale) < 2 {
		invalidParams.Add(aws.NewErrParamMinLen("Locale", 2))
	}
	if s.MaxResults != nil && *s.MaxResults < 10 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 10))
	}
	if s.Filter != nil {
		if err := s.Filter.Validate(); err != nil {
			invalidParams.AddNested("Filter", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilter sets the Filter field's value.
func (s *DescribeAffectedEntitiesInput) SetFilter(v *EntityFilter) *DescribeAffectedEntitiesInput {
	s.Filter = v
	return s
}

// SetLocale sets the Locale field's value.
func (s *DescribeAffectedEntitiesInput) SetLocale(v string) *DescribeAffectedEntitiesInput {
	s.Locale = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeAffectedEntitiesInput) SetMaxResults(v int64) *DescribeAffectedEntitiesInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeAffectedEntitiesInput) SetNextToken(v string) *DescribeAffectedEntitiesInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeAffectedEntitiesResponse
type DescribeAffectedEntitiesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The entities that match the filter criteria.
	Entities []AffectedEntity `locationName:"entities" type:"list"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeAffectedEntitiesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAffectedEntitiesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DescribeAffectedEntitiesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetEntities sets the Entities field's value.
func (s *DescribeAffectedEntitiesOutput) SetEntities(v []AffectedEntity) *DescribeAffectedEntitiesOutput {
	s.Entities = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeAffectedEntitiesOutput) SetNextToken(v string) *DescribeAffectedEntitiesOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEntityAggregatesRequest
type DescribeEntityAggregatesInput struct {
	_ struct{} `type:"structure"`

	// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331",
	// "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz"
	EventArns []string `locationName:"eventArns" min:"1" type:"list"`
}

// String returns the string representation
func (s DescribeEntityAggregatesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEntityAggregatesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeEntityAggregatesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeEntityAggregatesInput"}
	if s.EventArns != nil && len(s.EventArns) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventArns", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEventArns sets the EventArns field's value.
func (s *DescribeEntityAggregatesInput) SetEventArns(v []string) *DescribeEntityAggregatesInput {
	s.EventArns = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEntityAggregatesResponse
type DescribeEntityAggregatesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The number of entities that are affected by each of the specified events.
	EntityAggregates []EntityAggregate `locationName:"entityAggregates" type:"list"`
}

// String returns the string representation
func (s DescribeEntityAggregatesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEntityAggregatesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DescribeEntityAggregatesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetEntityAggregates sets the EntityAggregates field's value.
func (s *DescribeEntityAggregatesOutput) SetEntityAggregates(v []EntityAggregate) *DescribeEntityAggregatesOutput {
	s.EntityAggregates = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventAggregatesRequest
type DescribeEventAggregatesInput struct {
	_ struct{} `type:"structure"`

	// The only currently supported value is eventTypeCategory.
	//
	// AggregateField is a required field
	AggregateField EventAggregateField `locationName:"aggregateField" type:"string" required:"true" enum:"true"`

	// Values to narrow the results returned.
	Filter *EventFilter `locationName:"filter" type:"structure"`

	// The maximum number of items to return in one batch, between 10 and 100, inclusive.
	MaxResults *int64 `locationName:"maxResults" min:"10" type:"integer"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeEventAggregatesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventAggregatesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeEventAggregatesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeEventAggregatesInput"}
	if len(s.AggregateField) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("AggregateField"))
	}
	if s.MaxResults != nil && *s.MaxResults < 10 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 10))
	}
	if s.Filter != nil {
		if err := s.Filter.Validate(); err != nil {
			invalidParams.AddNested("Filter", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAggregateField sets the AggregateField field's value.
func (s *DescribeEventAggregatesInput) SetAggregateField(v EventAggregateField) *DescribeEventAggregatesInput {
	s.AggregateField = v
	return s
}

// SetFilter sets the Filter field's value.
func (s *DescribeEventAggregatesInput) SetFilter(v *EventFilter) *DescribeEventAggregatesInput {
	s.Filter = v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeEventAggregatesInput) SetMaxResults(v int64) *DescribeEventAggregatesInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventAggregatesInput) SetNextToken(v string) *DescribeEventAggregatesInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventAggregatesResponse
type DescribeEventAggregatesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The number of events in each category that meet the optional filter criteria.
	EventAggregates []EventAggregate `locationName:"eventAggregates" type:"list"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeEventAggregatesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventAggregatesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DescribeEventAggregatesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetEventAggregates sets the EventAggregates field's value.
func (s *DescribeEventAggregatesOutput) SetEventAggregates(v []EventAggregate) *DescribeEventAggregatesOutput {
	s.EventAggregates = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventAggregatesOutput) SetNextToken(v string) *DescribeEventAggregatesOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventDetailsRequest
type DescribeEventDetailsInput struct {
	_ struct{} `type:"structure"`

	// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331",
	// "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz"
	//
	// EventArns is a required field
	EventArns []string `locationName:"eventArns" min:"1" type:"list" required:"true"`

	// The locale (language) to return information in. English (en) is the default
	// and the only supported value at this time.
	Locale *string `locationName:"locale" min:"2" type:"string"`
}

// String returns the string representation
func (s DescribeEventDetailsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventDetailsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeEventDetailsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeEventDetailsInput"}

	if s.EventArns == nil {
		invalidParams.Add(aws.NewErrParamRequired("EventArns"))
	}
	if s.EventArns != nil && len(s.EventArns) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventArns", 1))
	}
	if s.Locale != nil && len(*s.Locale) < 2 {
		invalidParams.Add(aws.NewErrParamMinLen("Locale", 2))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEventArns sets the EventArns field's value.
func (s *DescribeEventDetailsInput) SetEventArns(v []string) *DescribeEventDetailsInput {
	s.EventArns = v
	return s
}

// SetLocale sets the Locale field's value.
func (s *DescribeEventDetailsInput) SetLocale(v string) *DescribeEventDetailsInput {
	s.Locale = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventDetailsResponse
type DescribeEventDetailsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Error messages for any events that could not be retrieved.
	FailedSet []EventDetailsErrorItem `locationName:"failedSet" type:"list"`

	// Information about the events that could be retrieved.
	SuccessfulSet []EventDetails `locationName:"successfulSet" type:"list"`
}

// String returns the string representation
func (s DescribeEventDetailsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventDetailsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DescribeEventDetailsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetFailedSet sets the FailedSet field's value.
func (s *DescribeEventDetailsOutput) SetFailedSet(v []EventDetailsErrorItem) *DescribeEventDetailsOutput {
	s.FailedSet = v
	return s
}

// SetSuccessfulSet sets the SuccessfulSet field's value.
func (s *DescribeEventDetailsOutput) SetSuccessfulSet(v []EventDetails) *DescribeEventDetailsOutput {
	s.SuccessfulSet = v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventTypesRequest
type DescribeEventTypesInput struct {
	_ struct{} `type:"structure"`

	// Values to narrow the results returned.
	Filter *EventTypeFilter `locationName:"filter" type:"structure"`

	// The locale (language) to return information in. English (en) is the default
	// and the only supported value at this time.
	Locale *string `locationName:"locale" min:"2" type:"string"`

	// The maximum number of items to return in one batch, between 10 and 100, inclusive.
	MaxResults *int64 `locationName:"maxResults" min:"10" type:"integer"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeEventTypesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventTypesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeEventTypesInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeEventTypesInput"}
	if s.Locale != nil && len(*s.Locale) < 2 {
		invalidParams.Add(aws.NewErrParamMinLen("Locale", 2))
	}
	if s.MaxResults != nil && *s.MaxResults < 10 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 10))
	}
	if s.Filter != nil {
		if err := s.Filter.Validate(); err != nil {
			invalidParams.AddNested("Filter", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilter sets the Filter field's value.
func (s *DescribeEventTypesInput) SetFilter(v *EventTypeFilter) *DescribeEventTypesInput {
	s.Filter = v
	return s
}

// SetLocale sets the Locale field's value.
func (s *DescribeEventTypesInput) SetLocale(v string) *DescribeEventTypesInput {
	s.Locale = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeEventTypesInput) SetMaxResults(v int64) *DescribeEventTypesInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventTypesInput) SetNextToken(v string) *DescribeEventTypesInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventTypesResponse
type DescribeEventTypesOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A list of event types that match the filter criteria. Event types have a
	// category (issue, accountNotification, or scheduledChange), a service (for
	// example, EC2, RDS, DATAPIPELINE, BILLING), and a code (in the format AWS_SERVICE_DESCRIPTION;
	// for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT).
	EventTypes []EventType `locationName:"eventTypes" type:"list"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeEventTypesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventTypesOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DescribeEventTypesOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetEventTypes sets the EventTypes field's value.
func (s *DescribeEventTypesOutput) SetEventTypes(v []EventType) *DescribeEventTypesOutput {
	s.EventTypes = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventTypesOutput) SetNextToken(v string) *DescribeEventTypesOutput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventsRequest
type DescribeEventsInput struct {
	_ struct{} `type:"structure"`

	// Values to narrow the results returned.
	Filter *EventFilter `locationName:"filter" type:"structure"`

	// The locale (language) to return information in. English (en) is the default
	// and the only supported value at this time.
	Locale *string `locationName:"locale" min:"2" type:"string"`

	// The maximum number of items to return in one batch, between 10 and 100, inclusive.
	MaxResults *int64 `locationName:"maxResults" min:"10" type:"integer"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeEventsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeEventsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeEventsInput"}
	if s.Locale != nil && len(*s.Locale) < 2 {
		invalidParams.Add(aws.NewErrParamMinLen("Locale", 2))
	}
	if s.MaxResults != nil && *s.MaxResults < 10 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 10))
	}
	if s.Filter != nil {
		if err := s.Filter.Validate(); err != nil {
			invalidParams.AddNested("Filter", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilter sets the Filter field's value.
func (s *DescribeEventsInput) SetFilter(v *EventFilter) *DescribeEventsInput {
	s.Filter = v
	return s
}

// SetLocale sets the Locale field's value.
func (s *DescribeEventsInput) SetLocale(v string) *DescribeEventsInput {
	s.Locale = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeEventsInput) SetMaxResults(v int64) *DescribeEventsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventsInput) SetNextToken(v string) *DescribeEventsInput {
	s.NextToken = &v
	return s
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventsResponse
type DescribeEventsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The events that match the specified filter criteria.
	Events []Event `locationName:"events" type:"list"`

	// If the results of a search are large, only a portion of the results are returned,
	// and a nextToken pagination token is returned in the response. To retrieve
	// the next batch of results, reissue the search request and include the returned
	// token. When all results have been returned, the response does not contain
	// a pagination token value.
	NextToken *string `locationName:"nextToken" type:"string"`
}

// String returns the string representation
func (s DescribeEventsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DescribeEventsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// SetEvents sets the Events field's value.
func (s *DescribeEventsOutput) SetEvents(v []Event) *DescribeEventsOutput {
	s.Events = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeEventsOutput) SetNextToken(v string) *DescribeEventsOutput {
	s.NextToken = &v
	return s
}

// The number of entities that are affected by one or more events. Returned
// by the DescribeEntityAggregates operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EntityAggregate
type EntityAggregate struct {
	_ struct{} `type:"structure"`

	// The number entities that match the criteria for the specified events.
	Count *int64 `locationName:"count" type:"integer"`

	// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID.
	// Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331
	EventArn *string `locationName:"eventArn" type:"string"`
}

// String returns the string representation
func (s EntityAggregate) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EntityAggregate) GoString() string {
	return s.String()
}

// SetCount sets the Count field's value.
func (s *EntityAggregate) SetCount(v int64) *EntityAggregate {
	s.Count = &v
	return s
}

// SetEventArn sets the EventArn field's value.
func (s *EntityAggregate) SetEventArn(v string) *EntityAggregate {
	s.EventArn = &v
	return s
}

// The values to use to filter results from the DescribeAffectedEntities operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EntityFilter
type EntityFilter struct {
	_ struct{} `type:"structure"`

	// A list of entity ARNs (unique identifiers).
	EntityArns []string `locationName:"entityArns" min:"1" type:"list"`

	// A list of IDs for affected entities.
	EntityValues []string `locationName:"entityValues" min:"1" type:"list"`

	// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331",
	// "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz"
	//
	// EventArns is a required field
	EventArns []string `locationName:"eventArns" min:"1" type:"list" required:"true"`

	// A list of the most recent dates and times that the entity was updated.
	LastUpdatedTimes []DateTimeRange `locationName:"lastUpdatedTimes" min:"1" type:"list"`

	// A list of entity status codes (IMPAIRED, UNIMPAIRED, or UNKNOWN).
	StatusCodes []EntityStatusCode `locationName:"statusCodes" min:"1" type:"list"`

	// A map of entity tags attached to the affected entity.
	Tags []map[string]string `locationName:"tags" type:"list"`
}

// String returns the string representation
func (s EntityFilter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EntityFilter) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EntityFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "EntityFilter"}
	if s.EntityArns != nil && len(s.EntityArns) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EntityArns", 1))
	}
	if s.EntityValues != nil && len(s.EntityValues) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EntityValues", 1))
	}

	if s.EventArns == nil {
		invalidParams.Add(aws.NewErrParamRequired("EventArns"))
	}
	if s.EventArns != nil && len(s.EventArns) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventArns", 1))
	}
	if s.LastUpdatedTimes != nil && len(s.LastUpdatedTimes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("LastUpdatedTimes", 1))
	}
	if s.StatusCodes != nil && len(s.StatusCodes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("StatusCodes", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEntityArns sets the EntityArns field's value.
func (s *EntityFilter) SetEntityArns(v []string) *EntityFilter {
	s.EntityArns = v
	return s
}

// SetEntityValues sets the EntityValues field's value.
func (s *EntityFilter) SetEntityValues(v []string) *EntityFilter {
	s.EntityValues = v
	return s
}

// SetEventArns sets the EventArns field's value.
func (s *EntityFilter) SetEventArns(v []string) *EntityFilter {
	s.EventArns = v
	return s
}

// SetLastUpdatedTimes sets the LastUpdatedTimes field's value.
func (s *EntityFilter) SetLastUpdatedTimes(v []DateTimeRange) *EntityFilter {
	s.LastUpdatedTimes = v
	return s
}

// SetStatusCodes sets the StatusCodes field's value.
func (s *EntityFilter) SetStatusCodes(v []EntityStatusCode) *EntityFilter {
	s.StatusCodes = v
	return s
}

// SetTags sets the Tags field's value.
func (s *EntityFilter) SetTags(v []map[string]string) *EntityFilter {
	s.Tags = v
	return s
}

// Summary information about an event, returned by the DescribeEvents operation.
// The DescribeEventDetails operation also returns this information, as well
// as the EventDescription and additional event metadata.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/Event
type Event struct {
	_ struct{} `type:"structure"`

	// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID.
	// Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331
	Arn *string `locationName:"arn" type:"string"`

	// The AWS Availability Zone of the event. For example, us-east-1a.
	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`

	// The date and time that the event ended.
	EndTime *time.Time `locationName:"endTime" type:"timestamp" timestampFormat:"unix"`

	// The
	EventTypeCategory EventTypeCategory `locationName:"eventTypeCategory" min:"3" type:"string" enum:"true"`

	// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION;
	// for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
	EventTypeCode *string `locationName:"eventTypeCode" min:"3" type:"string"`

	// The most recent date and time that the event was updated.
	LastUpdatedTime *time.Time `locationName:"lastUpdatedTime" type:"timestamp" timestampFormat:"unix"`

	// The AWS region name of the event.
	Region *string `locationName:"region" type:"string"`

	// The AWS service that is affected by the event. For example, EC2, RDS.
	Service *string `locationName:"service" min:"2" type:"string"`

	// The date and time that the event began.
	StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"unix"`

	// The most recent status of the event. Possible values are open, closed, and
	// upcoming.
	StatusCode EventStatusCode `locationName:"statusCode" type:"string" enum:"true"`
}

// String returns the string representation
func (s Event) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Event) GoString() string {
	return s.String()
}

// SetArn sets the Arn field's value.
func (s *Event) SetArn(v string) *Event {
	s.Arn = &v
	return s
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *Event) SetAvailabilityZone(v string) *Event {
	s.AvailabilityZone = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *Event) SetEndTime(v time.Time) *Event {
	s.EndTime = &v
	return s
}

// SetEventTypeCategory sets the EventTypeCategory field's value.
func (s *Event) SetEventTypeCategory(v EventTypeCategory) *Event {
	s.EventTypeCategory = v
	return s
}

// SetEventTypeCode sets the EventTypeCode field's value.
func (s *Event) SetEventTypeCode(v string) *Event {
	s.EventTypeCode = &v
	return s
}

// SetLastUpdatedTime sets the LastUpdatedTime field's value.
func (s *Event) SetLastUpdatedTime(v time.Time) *Event {
	s.LastUpdatedTime = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *Event) SetRegion(v string) *Event {
	s.Region = &v
	return s
}

// SetService sets the Service field's value.
func (s *Event) SetService(v string) *Event {
	s.Service = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *Event) SetStartTime(v time.Time) *Event {
	s.StartTime = &v
	return s
}

// SetStatusCode sets the StatusCode field's value.
func (s *Event) SetStatusCode(v EventStatusCode) *Event {
	s.StatusCode = v
	return s
}

// The number of events of each issue type. Returned by the DescribeEventAggregates
// operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EventAggregate
type EventAggregate struct {
	_ struct{} `type:"structure"`

	// The issue type for the associated count.
	AggregateValue *string `locationName:"aggregateValue" type:"string"`

	// The number of events of the associated issue type.
	Count *int64 `locationName:"count" type:"integer"`
}

// String returns the string representation
func (s EventAggregate) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventAggregate) GoString() string {
	return s.String()
}

// SetAggregateValue sets the AggregateValue field's value.
func (s *EventAggregate) SetAggregateValue(v string) *EventAggregate {
	s.AggregateValue = &v
	return s
}

// SetCount sets the Count field's value.
func (s *EventAggregate) SetCount(v int64) *EventAggregate {
	s.Count = &v
	return s
}

// The detailed description of the event. Included in the information returned
// by the DescribeEventDetails operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EventDescription
type EventDescription struct {
	_ struct{} `type:"structure"`

	// The most recent description of the event.
	LatestDescription *string `locationName:"latestDescription" type:"string"`
}

// String returns the string representation
func (s EventDescription) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventDescription) GoString() string {
	return s.String()
}

// SetLatestDescription sets the LatestDescription field's value.
func (s *EventDescription) SetLatestDescription(v string) *EventDescription {
	s.LatestDescription = &v
	return s
}

// Detailed information about an event. A combination of an Event object, an
// EventDescription object, and additional metadata about the event. Returned
// by the DescribeEventDetails operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EventDetails
type EventDetails struct {
	_ struct{} `type:"structure"`

	// Summary information about the event.
	Event *Event `locationName:"event" type:"structure"`

	// The most recent description of the event.
	EventDescription *EventDescription `locationName:"eventDescription" type:"structure"`

	// Additional metadata about the event.
	EventMetadata map[string]string `locationName:"eventMetadata" type:"map"`
}

// String returns the string representation
func (s EventDetails) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventDetails) GoString() string {
	return s.String()
}

// SetEvent sets the Event field's value.
func (s *EventDetails) SetEvent(v *Event) *EventDetails {
	s.Event = v
	return s
}

// SetEventDescription sets the EventDescription field's value.
func (s *EventDetails) SetEventDescription(v *EventDescription) *EventDetails {
	s.EventDescription = v
	return s
}

// SetEventMetadata sets the EventMetadata field's value.
func (s *EventDetails) SetEventMetadata(v map[string]string) *EventDetails {
	s.EventMetadata = v
	return s
}

// Error information returned when a DescribeEventDetails operation cannot find
// a specified event.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EventDetailsErrorItem
type EventDetailsErrorItem struct {
	_ struct{} `type:"structure"`

	// A message that describes the error.
	ErrorMessage *string `locationName:"errorMessage" type:"string"`

	// The name of the error.
	ErrorName *string `locationName:"errorName" type:"string"`

	// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID.
	// Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331
	EventArn *string `locationName:"eventArn" type:"string"`
}

// String returns the string representation
func (s EventDetailsErrorItem) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventDetailsErrorItem) GoString() string {
	return s.String()
}

// SetErrorMessage sets the ErrorMessage field's value.
func (s *EventDetailsErrorItem) SetErrorMessage(v string) *EventDetailsErrorItem {
	s.ErrorMessage = &v
	return s
}

// SetErrorName sets the ErrorName field's value.
func (s *EventDetailsErrorItem) SetErrorName(v string) *EventDetailsErrorItem {
	s.ErrorName = &v
	return s
}

// SetEventArn sets the EventArn field's value.
func (s *EventDetailsErrorItem) SetEventArn(v string) *EventDetailsErrorItem {
	s.EventArn = &v
	return s
}

// The values to use to filter results from the DescribeEvents and DescribeEventAggregates
// operations.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EventFilter
type EventFilter struct {
	_ struct{} `type:"structure"`

	// A list of AWS availability zones.
	AvailabilityZones []string `locationName:"availabilityZones" type:"list"`

	// A list of dates and times that the event ended.
	EndTimes []DateTimeRange `locationName:"endTimes" min:"1" type:"list"`

	// A list of entity ARNs (unique identifiers).
	EntityArns []string `locationName:"entityArns" min:"1" type:"list"`

	// A list of entity identifiers, such as EC2 instance IDs (i-34ab692e) or EBS
	// volumes (vol-426ab23e).
	EntityValues []string `locationName:"entityValues" min:"1" type:"list"`

	// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331",
	// "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz"
	EventArns []string `locationName:"eventArns" min:"1" type:"list"`

	// A list of event status codes.
	EventStatusCodes []EventStatusCode `locationName:"eventStatusCodes" min:"1" type:"list"`

	// A list of event type category codes (issue, scheduledChange, or accountNotification).
	EventTypeCategories []EventTypeCategory `locationName:"eventTypeCategories" min:"1" type:"list"`

	// A list of unique identifiers for event types. For example, "AWS_EC2_SYSTEM_MAINTENANCE_EVENT","AWS_RDS_MAINTENANCE_SCHEDULED"
	EventTypeCodes []string `locationName:"eventTypeCodes" min:"1" type:"list"`

	// A list of dates and times that the event was last updated.
	LastUpdatedTimes []DateTimeRange `locationName:"lastUpdatedTimes" min:"1" type:"list"`

	// A list of AWS regions.
	Regions []string `locationName:"regions" min:"1" type:"list"`

	// The AWS services associated with the event. For example, EC2, RDS.
	Services []string `locationName:"services" min:"1" type:"list"`

	// A list of dates and times that the event began.
	StartTimes []DateTimeRange `locationName:"startTimes" min:"1" type:"list"`

	// A map of entity tags attached to the affected entity.
	Tags []map[string]string `locationName:"tags" type:"list"`
}

// String returns the string representation
func (s EventFilter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventFilter) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EventFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "EventFilter"}
	if s.EndTimes != nil && len(s.EndTimes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EndTimes", 1))
	}
	if s.EntityArns != nil && len(s.EntityArns) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EntityArns", 1))
	}
	if s.EntityValues != nil && len(s.EntityValues) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EntityValues", 1))
	}
	if s.EventArns != nil && len(s.EventArns) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventArns", 1))
	}
	if s.EventStatusCodes != nil && len(s.EventStatusCodes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventStatusCodes", 1))
	}
	if s.EventTypeCategories != nil && len(s.EventTypeCategories) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventTypeCategories", 1))
	}
	if s.EventTypeCodes != nil && len(s.EventTypeCodes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventTypeCodes", 1))
	}
	if s.LastUpdatedTimes != nil && len(s.LastUpdatedTimes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("LastUpdatedTimes", 1))
	}
	if s.Regions != nil && len(s.Regions) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Regions", 1))
	}
	if s.Services != nil && len(s.Services) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Services", 1))
	}
	if s.StartTimes != nil && len(s.StartTimes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("StartTimes", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAvailabilityZones sets the AvailabilityZones field's value.
func (s *EventFilter) SetAvailabilityZones(v []string) *EventFilter {
	s.AvailabilityZones = v
	return s
}

// SetEndTimes sets the EndTimes field's value.
func (s *EventFilter) SetEndTimes(v []DateTimeRange) *EventFilter {
	s.EndTimes = v
	return s
}

// SetEntityArns sets the EntityArns field's value.
func (s *EventFilter) SetEntityArns(v []string) *EventFilter {
	s.EntityArns = v
	return s
}

// SetEntityValues sets the EntityValues field's value.
func (s *EventFilter) SetEntityValues(v []string) *EventFilter {
	s.EntityValues = v
	return s
}

// SetEventArns sets the EventArns field's value.
func (s *EventFilter) SetEventArns(v []string) *EventFilter {
	s.EventArns = v
	return s
}

// SetEventStatusCodes sets the EventStatusCodes field's value.
func (s *EventFilter) SetEventStatusCodes(v []EventStatusCode) *EventFilter {
	s.EventStatusCodes = v
	return s
}

// SetEventTypeCategories sets the EventTypeCategories field's value.
func (s *EventFilter) SetEventTypeCategories(v []EventTypeCategory) *EventFilter {
	s.EventTypeCategories = v
	return s
}

// SetEventTypeCodes sets the EventTypeCodes field's value.
func (s *EventFilter) SetEventTypeCodes(v []string) *EventFilter {
	s.EventTypeCodes = v
	return s
}

// SetLastUpdatedTimes sets the LastUpdatedTimes field's value.
func (s *EventFilter) SetLastUpdatedTimes(v []DateTimeRange) *EventFilter {
	s.LastUpdatedTimes = v
	return s
}

// SetRegions sets the Regions field's value.
func (s *EventFilter) SetRegions(v []string) *EventFilter {
	s.Regions = v
	return s
}

// SetServices sets the Services field's value.
func (s *EventFilter) SetServices(v []string) *EventFilter {
	s.Services = v
	return s
}

// SetStartTimes sets the StartTimes field's value.
func (s *EventFilter) SetStartTimes(v []DateTimeRange) *EventFilter {
	s.StartTimes = v
	return s
}

// SetTags sets the Tags field's value.
func (s *EventFilter) SetTags(v []map[string]string) *EventFilter {
	s.Tags = v
	return s
}

// Metadata about a type of event that is reported by AWS Health. Data consists
// of the category (for example, issue), the service (for example, EC2), and
// the event type code (for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT).
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EventType
type EventType struct {
	_ struct{} `type:"structure"`

	// A list of event type category codes (issue, scheduledChange, or accountNotification).
	Category EventTypeCategory `locationName:"category" min:"3" type:"string" enum:"true"`

	// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION;
	// for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
	Code *string `locationName:"code" min:"3" type:"string"`

	// The AWS service that is affected by the event. For example, EC2, RDS.
	Service *string `locationName:"service" min:"2" type:"string"`
}

// String returns the string representation
func (s EventType) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventType) GoString() string {
	return s.String()
}

// SetCategory sets the Category field's value.
func (s *EventType) SetCategory(v EventTypeCategory) *EventType {
	s.Category = v
	return s
}

// SetCode sets the Code field's value.
func (s *EventType) SetCode(v string) *EventType {
	s.Code = &v
	return s
}

// SetService sets the Service field's value.
func (s *EventType) SetService(v string) *EventType {
	s.Service = &v
	return s
}

// The values to use to filter results from the DescribeEventTypes operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/EventTypeFilter
type EventTypeFilter struct {
	_ struct{} `type:"structure"`

	// A list of event type category codes (issue, scheduledChange, or accountNotification).
	EventTypeCategories []EventTypeCategory `locationName:"eventTypeCategories" min:"1" type:"list"`

	// A list of event type codes.
	EventTypeCodes []string `locationName:"eventTypeCodes" min:"1" type:"list"`

	// The AWS services associated with the event. For example, EC2, RDS.
	Services []string `locationName:"services" min:"1" type:"list"`
}

// String returns the string representation
func (s EventTypeFilter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventTypeFilter) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EventTypeFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "EventTypeFilter"}
	if s.EventTypeCategories != nil && len(s.EventTypeCategories) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventTypeCategories", 1))
	}
	if s.EventTypeCodes != nil && len(s.EventTypeCodes) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("EventTypeCodes", 1))
	}
	if s.Services != nil && len(s.Services) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Services", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEventTypeCategories sets the EventTypeCategories field's value.
func (s *EventTypeFilter) SetEventTypeCategories(v []EventTypeCategory) *EventTypeFilter {
	s.EventTypeCategories = v
	return s
}

// SetEventTypeCodes sets the EventTypeCodes field's value.
func (s *EventTypeFilter) SetEventTypeCodes(v []string) *EventTypeFilter {
	s.EventTypeCodes = v
	return s
}

// SetServices sets the Services field's value.
func (s *EventTypeFilter) SetServices(v []string) *EventTypeFilter {
	s.Services = v
	return s
}

type EntityStatusCode string

// Enum values for EntityStatusCode
const (
	EntityStatusCodeImpaired   EntityStatusCode = "IMPAIRED"
	EntityStatusCodeUnimpaired EntityStatusCode = "UNIMPAIRED"
	EntityStatusCodeUnknown    EntityStatusCode = "UNKNOWN"
)

type EventAggregateField string

// Enum values for EventAggregateField
const (
	EventAggregateFieldEventTypeCategory EventAggregateField = "eventTypeCategory"
)

type EventStatusCode string

// Enum values for EventStatusCode
const (
	EventStatusCodeOpen     EventStatusCode = "open"
	EventStatusCodeClosed   EventStatusCode = "closed"
	EventStatusCodeUpcoming EventStatusCode = "upcoming"
)

type EventTypeCategory string

// Enum values for EventTypeCategory
const (
	EventTypeCategoryIssue               EventTypeCategory = "issue"
	EventTypeCategoryAccountNotification EventTypeCategory = "accountNotification"
	EventTypeCategoryScheduledChange     EventTypeCategory = "scheduledChange"
)
