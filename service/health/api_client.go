// Code generated by smithy-go-codegen DO NOT EDIT.

package health

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"net/http"
	"time"
)

const ServiceID = "Health"
const ServiceAPIVersion = "2016-08-04"

// AWS Health  <p>The AWS Health API provides programmatic access to the AWS Health
// information that is presented in the <a
// href="https://phd.aws.amazon.com/phd/home#/">AWS Personal Health Dashboard</a>.
// You can get information about events that affect your AWS resources:</p> <ul>
// <li> <p> <a>DescribeEvents</a>: Summary information about events.</p> </li> <li>
// <p> <a>DescribeEventDetails</a>: Detailed information about one or more
// events.</p> </li> <li> <p> <a>DescribeAffectedEntities</a>: Information about
// AWS resources that are affected by one or more events.</p> </li> </ul> <p>In
// addition, these operations provide information about event types and summary
// counts of events or affected entities:</p> <ul> <li> <p>
// <a>DescribeEventTypes</a>: Information about the kinds of events that AWS Health
// tracks.</p> </li> <li> <p> <a>DescribeEventAggregates</a>: A count of the number
// of events that meet specified criteria.</p> </li> <li> <p>
// <a>DescribeEntityAggregates</a>: A count of the number of affected entities that
// meet specified criteria.</p> </li> </ul> <p>AWS Health integrates with AWS
// Organizations to provide a centralized view of AWS Health events across all
// accounts in your organization.</p> <ul> <li> <p>
// <a>DescribeEventsForOrganization</a>: Summary information about events across
// the organization.</p> </li> <li> <p>
// <a>DescribeAffectedAccountsForOrganization</a>: List of accounts in your
// organization impacted by an event.</p> </li> <li> <p>
// <a>DescribeEventDetailsForOrganization</a>: Detailed information about events in
// your organization.</p> </li> <li> <p>
// <a>DescribeAffectedEntitiesForOrganization</a>: Information about AWS resources
// in your organization that are affected by events.</p> </li> </ul> <p>You can use
// the following operations to enable or disable AWS Health from working with AWS
// Organizations.</p> <ul> <li> <p>
// <a>EnableHealthServiceAccessForOrganization</a>: Enables AWS Health to work with
// AWS Organizations.</p> </li> <li> <p>
// <a>DisableHealthServiceAccessForOrganization</a>: Disables AWS Health from
// working with AWS Organizations.</p> </li> <li> <p>
// <a>DescribeHealthServiceStatusForOrganization</a>: Status information about
// enabling or disabling AWS Health from working with AWS Organizations.</p> </li>
// </ul> <p>The Health API requires a Business or Enterprise support plan from <a
// href="http://aws.amazon.com/premiumsupport/">AWS Support</a>. Calling the Health
// API from an account that does not have a Business or Enterprise support plan
// causes a <code>SubscriptionRequiredException</code>.</p> <p>For authentication
// of requests, AWS Health uses the <a
// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
// Version 4 Signing Process</a>.</p> <p>See the <a
// href="https://docs.aws.amazon.com/health/latest/ug/what-is-aws-health.html">AWS
// Health User Guide</a> for information about how to use the API.</p> <p>
// <b>Service Endpoint</b> </p> <p>The HTTP endpoint for the AWS Health API is:</p>
// <ul> <li> <p>https://health.us-east-1.amazonaws.com </p> </li> </ul>
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveHTTPSignerV4(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []func(*middleware.Stack) error

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// Signature Version 4 (SigV4) Signer
	HTTPSignerV4 HTTPSignerV4

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]func(*middleware.Stack) error, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}
func (c *Client) invokeOperation(ctx context.Context, opID string, params interface{}, optFns []func(*Options), stackFns ...func(*middleware.Stack, Options) error) (result interface{}, metadata middleware.Metadata, err error) {
	stack := middleware.NewStack(opID, smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}

	for _, fn := range stackFns {
		if err := fn(stack, options); err != nil {
			return nil, metadata, err
		}
	}

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, metadata, err
		}
	}

	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err = handler.Handle(ctx, params)
	if err != nil {
		err = &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: opID,
			Err:           err,
		}
	}
	return result, metadata, err
}

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
		APIOptions:  cfg.APIOptions,
	}
	resolveAWSEndpointResolver(cfg, &opts)
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func resolveAWSEndpointResolver(cfg aws.Config, o *Options) {
	if cfg.EndpointResolver == nil {
		return
	}
	o.EndpointResolver = WithEndpointResolver(cfg.EndpointResolver, NewDefaultEndpointResolver())
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("health")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, o.HTTPSignerV4), middleware.After)
}

type HTTPSignerV4 interface {
	SignHTTP(ctx context.Context, credentials aws.Credentials, r *http.Request, payloadHash string, service string, region string, signingTime time.Time) error
}

func resolveHTTPSignerV4(o *Options) {
	if o.HTTPSignerV4 != nil {
		return
	}
	o.HTTPSignerV4 = v4.NewSigner()
}

func addRetryMiddlewares(stack *middleware.Stack, o Options) error {
	mo := retry.AddRetryMiddlewaresOptions{
		Retryer: o.Retryer,
	}
	return retry.AddRetryMiddlewares(stack, mo)
}

func addRequestIDRetrieverMiddleware(stack *middleware.Stack) {
	awsmiddleware.AddRequestIDRetrieverMiddleware(stack)
}

func addResponseErrorMiddleware(stack *middleware.Stack) {
	awshttp.AddResponseErrorMiddleware(stack)
}
