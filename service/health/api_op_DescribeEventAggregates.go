// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package health

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/health/types"
)

const opDescribeEventAggregates = "DescribeEventAggregates"

// DescribeEventAggregatesRequest returns a request value for making API operation for
// AWS Health APIs and Notifications.
//
// Returns the number of events of each event type (issue, scheduled change,
// and account notification). If no filter is specified, the counts of all events
// in each category are returned.
//
//    // Example sending a request using DescribeEventAggregatesRequest.
//    req := client.DescribeEventAggregatesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/health-2016-08-04/DescribeEventAggregates
func (c *Client) DescribeEventAggregatesRequest(input *types.DescribeEventAggregatesInput) DescribeEventAggregatesRequest {
	op := &aws.Operation{
		Name:       opDescribeEventAggregates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeEventAggregatesInput{}
	}

	req := c.newRequest(op, input, &types.DescribeEventAggregatesOutput{})
	return DescribeEventAggregatesRequest{Request: req, Input: input, Copy: c.DescribeEventAggregatesRequest}
}

// DescribeEventAggregatesRequest is the request type for the
// DescribeEventAggregates API operation.
type DescribeEventAggregatesRequest struct {
	*aws.Request
	Input *types.DescribeEventAggregatesInput
	Copy  func(*types.DescribeEventAggregatesInput) DescribeEventAggregatesRequest
}

// Send marshals and sends the DescribeEventAggregates API request.
func (r DescribeEventAggregatesRequest) Send(ctx context.Context) (*DescribeEventAggregatesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeEventAggregatesResponse{
		DescribeEventAggregatesOutput: r.Request.Data.(*types.DescribeEventAggregatesOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeEventAggregatesRequestPaginator returns a paginator for DescribeEventAggregates.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeEventAggregatesRequest(input)
//   p := health.NewDescribeEventAggregatesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeEventAggregatesPaginator(req DescribeEventAggregatesRequest) DescribeEventAggregatesPaginator {
	return DescribeEventAggregatesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeEventAggregatesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeEventAggregatesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeEventAggregatesPaginator struct {
	aws.Pager
}

func (p *DescribeEventAggregatesPaginator) CurrentPage() *types.DescribeEventAggregatesOutput {
	return p.Pager.CurrentPage().(*types.DescribeEventAggregatesOutput)
}

// DescribeEventAggregatesResponse is the response type for the
// DescribeEventAggregates API operation.
type DescribeEventAggregatesResponse struct {
	*types.DescribeEventAggregatesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeEventAggregates request.
func (r *DescribeEventAggregatesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
