// Code generated by smithy-go-codegen DO NOT EDIT.

package docdb

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/docdb/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new cluster from a snapshot or cluster snapshot. If a snapshot is
// specified, the target cluster is created from the source DB snapshot with a
// default configuration and default security group. If a cluster snapshot is
// specified, the target cluster is created from the source cluster restore point
// with the same configuration as the original source DB cluster, except that the
// new cluster is created with the default security group.
func (c *Client) RestoreDBClusterFromSnapshot(ctx context.Context, params *RestoreDBClusterFromSnapshotInput, optFns ...func(*Options)) (*RestoreDBClusterFromSnapshotOutput, error) {
	stack := middleware.NewStack("RestoreDBClusterFromSnapshot", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpRestoreDBClusterFromSnapshotMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRestoreDBClusterFromSnapshotValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRestoreDBClusterFromSnapshot(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RestoreDBClusterFromSnapshot",
			Err:           err,
		}
	}
	out := result.(*RestoreDBClusterFromSnapshotOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input to RestoreDBClusterFromSnapshot ().
type RestoreDBClusterFromSnapshotInput struct {
	// The tags to be assigned to the restored cluster.
	Tags []*types.Tag
	// A list of virtual private cloud (VPC) security groups that the new cluster will
	// belong to.
	VpcSecurityGroupIds []*string
	// The name of the subnet group to use for the new cluster. Constraints: If
	// provided, must match the name of an existing DBSubnetGroup. Example:
	// mySubnetgroup
	DBSubnetGroupName *string
	// Specifies whether this cluster can be deleted. If DeletionProtection is enabled,
	// the cluster cannot be deleted unless it is modified and DeletionProtection is
	// disabled. DeletionProtection protects clusters from being accidentally deleted.
	DeletionProtection *bool
	// The name of the cluster to create from the snapshot or cluster snapshot. This
	// parameter isn't case sensitive. Constraints:
	//
	//     * Must contain from 1 to 63
	// letters, numbers, or hyphens.
	//
	//     * The first character must be a letter.
	//
	//
	// * Cannot end with a hyphen or contain two consecutive hyphens.
	//
	// Example:
	// my-snapshot-id
	DBClusterIdentifier *string
	// The version of the database engine to use for the new cluster.
	EngineVersion *string
	// The identifier for the snapshot or cluster snapshot to restore from. You can use
	// either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot.
	// However, you can use only the ARN to specify a snapshot. Constraints:
	//
	//     *
	// Must match the identifier of an existing snapshot.
	SnapshotIdentifier *string
	// The port number on which the new cluster accepts connections. Constraints: Must
	// be a value from 1150 to 65535. Default: The same port as the original cluster.
	Port *int32
	// The AWS KMS key identifier to use when restoring an encrypted cluster from a DB
	// snapshot or cluster snapshot. The AWS KMS key identifier is the Amazon Resource
	// Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with
	// the same AWS account that owns the AWS KMS encryption key used to encrypt the
	// new cluster, then you can use the AWS KMS key alias instead of the ARN for the
	// AWS KMS encryption key. If you do not specify a value for the KmsKeyId
	// parameter, then the following occurs:
	//
	//     * If the snapshot or cluster snapshot
	// in SnapshotIdentifier is encrypted, then the restored cluster is encrypted using
	// the AWS KMS key that was used to encrypt the snapshot or the cluster snapshot.
	//
	//
	// * If the snapshot or the cluster snapshot in SnapshotIdentifier is not
	// encrypted, then the restored DB cluster is not encrypted.
	KmsKeyId *string
	// Provides the list of Amazon EC2 Availability Zones that instances in the
	// restored DB cluster can be created in.
	AvailabilityZones []*string
	// The database engine to use for the new cluster. Default: The same as source.
	// Constraint: Must be compatible with the engine of the source.
	Engine *string
	// A list of log types that must be enabled for exporting to Amazon CloudWatch
	// Logs.
	EnableCloudwatchLogsExports []*string
}

type RestoreDBClusterFromSnapshotOutput struct {
	// Detailed information about a cluster.
	DBCluster *types.DBCluster

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpRestoreDBClusterFromSnapshotMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpRestoreDBClusterFromSnapshot{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpRestoreDBClusterFromSnapshot{}, middleware.After)
}

func newServiceMetadataMiddleware_opRestoreDBClusterFromSnapshot(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "RestoreDBClusterFromSnapshot",
	}
}
