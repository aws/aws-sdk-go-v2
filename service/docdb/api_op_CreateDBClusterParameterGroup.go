// Code generated by smithy-go-codegen DO NOT EDIT.

package docdb

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/docdb/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new cluster parameter group. Parameters in a cluster parameter group
// apply to all of the instances in a DB cluster. A cluster parameter group is
// initially created with the default parameters for the database engine used by
// instances in the cluster. To provide custom values for any of the parameters,
// you must modify the group after you create it. After you create a DB cluster
// parameter group, you must associate it with your cluster. For the new DB cluster
// parameter group and associated settings to take effect, you must then reboot the
// instances in the cluster without failover. After you create a cluster parameter
// group, you should wait at least 5 minutes before creating your first cluster
// that uses that cluster parameter group as the default parameter group. This
// allows Amazon DocumentDB to fully complete the create action before the cluster
// parameter group is used as the default for a new cluster. This step is
// especially important for parameters that are critical when creating the default
// database for a cluster, such as the character set for the default database
// defined by the character_set_database parameter.
func (c *Client) CreateDBClusterParameterGroup(ctx context.Context, params *CreateDBClusterParameterGroupInput, optFns ...func(*Options)) (*CreateDBClusterParameterGroupOutput, error) {
	stack := middleware.NewStack("CreateDBClusterParameterGroup", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateDBClusterParameterGroupMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateDBClusterParameterGroupValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateDBClusterParameterGroup(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateDBClusterParameterGroup",
			Err:           err,
		}
	}
	out := result.(*CreateDBClusterParameterGroupOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input of CreateDBClusterParameterGroup ().
type CreateDBClusterParameterGroupInput struct {
	// The description for the cluster parameter group.
	Description *string
	// The tags to be assigned to the cluster parameter group.
	Tags []*types.Tag
	// The name of the cluster parameter group. Constraints:
	//
	//     * Must not match the
	// name of an existing DBClusterParameterGroup.
	//
	// This value is stored as a
	// lowercase string.
	DBClusterParameterGroupName *string
	// The cluster parameter group family name.
	DBParameterGroupFamily *string
}

type CreateDBClusterParameterGroupOutput struct {
	// Detailed information about a cluster parameter group.
	DBClusterParameterGroup *types.DBClusterParameterGroup

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateDBClusterParameterGroupMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateDBClusterParameterGroup{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateDBClusterParameterGroup{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateDBClusterParameterGroup(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "CreateDBClusterParameterGroup",
	}
}
