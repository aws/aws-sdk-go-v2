// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package clouddirectory

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/clouddirectory/types"
)

const opUpgradeAppliedSchema = "UpgradeAppliedSchema"

// UpgradeAppliedSchemaRequest returns a request value for making API operation for
// Amazon CloudDirectory.
//
// Upgrades a single directory in-place using the PublishedSchemaArn with schema
// updates found in MinorVersion. Backwards-compatible minor version upgrades
// are instantaneously available for readers on all objects in the directory.
// Note: This is a synchronous API call and upgrades only one schema on a given
// directory per call. To upgrade multiple directories from one schema, you
// would need to call this API on each directory.
//
//    // Example sending a request using UpgradeAppliedSchemaRequest.
//    req := client.UpgradeAppliedSchemaRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/clouddirectory-2017-01-11/UpgradeAppliedSchema
func (c *Client) UpgradeAppliedSchemaRequest(input *types.UpgradeAppliedSchemaInput) UpgradeAppliedSchemaRequest {
	op := &aws.Operation{
		Name:       opUpgradeAppliedSchema,
		HTTPMethod: "PUT",
		HTTPPath:   "/amazonclouddirectory/2017-01-11/schema/upgradeapplied",
	}

	if input == nil {
		input = &types.UpgradeAppliedSchemaInput{}
	}

	req := c.newRequest(op, input, &types.UpgradeAppliedSchemaOutput{})
	return UpgradeAppliedSchemaRequest{Request: req, Input: input, Copy: c.UpgradeAppliedSchemaRequest}
}

// UpgradeAppliedSchemaRequest is the request type for the
// UpgradeAppliedSchema API operation.
type UpgradeAppliedSchemaRequest struct {
	*aws.Request
	Input *types.UpgradeAppliedSchemaInput
	Copy  func(*types.UpgradeAppliedSchemaInput) UpgradeAppliedSchemaRequest
}

// Send marshals and sends the UpgradeAppliedSchema API request.
func (r UpgradeAppliedSchemaRequest) Send(ctx context.Context) (*UpgradeAppliedSchemaResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpgradeAppliedSchemaResponse{
		UpgradeAppliedSchemaOutput: r.Request.Data.(*types.UpgradeAppliedSchemaOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpgradeAppliedSchemaResponse is the response type for the
// UpgradeAppliedSchema API operation.
type UpgradeAppliedSchemaResponse struct {
	*types.UpgradeAppliedSchemaOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpgradeAppliedSchema request.
func (r *UpgradeAppliedSchemaResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
