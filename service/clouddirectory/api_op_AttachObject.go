// Code generated by smithy-go-codegen DO NOT EDIT.

package clouddirectory

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/clouddirectory/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Attaches an existing object to another object. An object can be accessed in two
// ways:
//
//     * Using the path
//
//     * Using ObjectIdentifier
func (c *Client) AttachObject(ctx context.Context, params *AttachObjectInput, optFns ...func(*Options)) (*AttachObjectOutput, error) {
	if params == nil {
		params = &AttachObjectInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "AttachObject", params, optFns, addOperationAttachObjectMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*AttachObjectOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AttachObjectInput struct {

	// The child object reference to be attached to the object.
	//
	// This member is required.
	ChildReference *types.ObjectReference

	// Amazon Resource Name (ARN) that is associated with the Directory () where both
	// objects reside. For more information, see arns ().
	//
	// This member is required.
	DirectoryArn *string

	// The link name with which the child object is attached to the parent.
	//
	// This member is required.
	LinkName *string

	// The parent object reference.
	//
	// This member is required.
	ParentReference *types.ObjectReference
}

type AttachObjectOutput struct {

	// The attached ObjectIdentifier, which is the child ObjectIdentifier.
	AttachedObjectIdentifier *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationAttachObjectMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpAttachObject{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpAttachObject{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAttachObjectValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAttachObject(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opAttachObject(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "clouddirectory",
		OperationName: "AttachObject",
	}
}
