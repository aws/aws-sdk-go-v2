// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package clouddirectory

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/clouddirectory/types"
)

const opBatchRead = "BatchRead"

// BatchReadRequest returns a request value for making API operation for
// Amazon CloudDirectory.
//
// Performs all the read operations in a batch.
//
//    // Example sending a request using BatchReadRequest.
//    req := client.BatchReadRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/clouddirectory-2017-01-11/BatchRead
func (c *Client) BatchReadRequest(input *types.BatchReadInput) BatchReadRequest {
	op := &aws.Operation{
		Name:       opBatchRead,
		HTTPMethod: "POST",
		HTTPPath:   "/amazonclouddirectory/2017-01-11/batchread",
	}

	if input == nil {
		input = &types.BatchReadInput{}
	}

	req := c.newRequest(op, input, &types.BatchReadOutput{})
	return BatchReadRequest{Request: req, Input: input, Copy: c.BatchReadRequest}
}

// BatchReadRequest is the request type for the
// BatchRead API operation.
type BatchReadRequest struct {
	*aws.Request
	Input *types.BatchReadInput
	Copy  func(*types.BatchReadInput) BatchReadRequest
}

// Send marshals and sends the BatchRead API request.
func (r BatchReadRequest) Send(ctx context.Context) (*BatchReadResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &BatchReadResponse{
		BatchReadOutput: r.Request.Data.(*types.BatchReadOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// BatchReadResponse is the response type for the
// BatchRead API operation.
type BatchReadResponse struct {
	*types.BatchReadOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// BatchRead request.
func (r *BatchReadResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
