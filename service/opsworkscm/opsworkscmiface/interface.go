// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package opsworkscmiface provides an interface to enable mocking the AWS OpsWorks CM service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package opsworkscmiface

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opsworkscm"
	"github.com/aws/aws-sdk-go-v2/service/opsworkscm/types"
)

// ClientAPI provides an interface to enable mocking the
// opsworkscm.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // OpsWorksCM.
//    func myFunc(svc opsworkscmiface.ClientAPI) bool {
//        // Make svc.AssociateNode request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := opsworkscm.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        opsworkscmiface.ClientPI
//    }
//    func (m *mockClientClient) AssociateNode(input *types.AssociateNodeInput) (*types.AssociateNodeOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	AssociateNodeRequest(*types.AssociateNodeInput) opsworkscm.AssociateNodeRequest

	CreateBackupRequest(*types.CreateBackupInput) opsworkscm.CreateBackupRequest

	CreateServerRequest(*types.CreateServerInput) opsworkscm.CreateServerRequest

	DeleteBackupRequest(*types.DeleteBackupInput) opsworkscm.DeleteBackupRequest

	DeleteServerRequest(*types.DeleteServerInput) opsworkscm.DeleteServerRequest

	DescribeAccountAttributesRequest(*types.DescribeAccountAttributesInput) opsworkscm.DescribeAccountAttributesRequest

	DescribeBackupsRequest(*types.DescribeBackupsInput) opsworkscm.DescribeBackupsRequest

	DescribeEventsRequest(*types.DescribeEventsInput) opsworkscm.DescribeEventsRequest

	DescribeNodeAssociationStatusRequest(*types.DescribeNodeAssociationStatusInput) opsworkscm.DescribeNodeAssociationStatusRequest

	DescribeServersRequest(*types.DescribeServersInput) opsworkscm.DescribeServersRequest

	DisassociateNodeRequest(*types.DisassociateNodeInput) opsworkscm.DisassociateNodeRequest

	ExportServerEngineAttributeRequest(*types.ExportServerEngineAttributeInput) opsworkscm.ExportServerEngineAttributeRequest

	RestoreServerRequest(*types.RestoreServerInput) opsworkscm.RestoreServerRequest

	StartMaintenanceRequest(*types.StartMaintenanceInput) opsworkscm.StartMaintenanceRequest

	UpdateServerRequest(*types.UpdateServerInput) opsworkscm.UpdateServerRequest

	UpdateServerEngineAttributesRequest(*types.UpdateServerEngineAttributesInput) opsworkscm.UpdateServerEngineAttributesRequest

	WaitUntilNodeAssociated(context.Context, *types.DescribeNodeAssociationStatusInput, ...aws.WaiterOption) error
}

var _ ClientAPI = (*opsworkscm.Client)(nil)
