// Code generated by smithy-go-codegen DO NOT EDIT.

package opsworkscm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/opsworkscm/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Exports a specified server engine attribute as a base64-encoded string. For
// example, you can export user data that you can use in EC2 to associate nodes
// with a server. This operation is synchronous. A ValidationException is raised
// when parameters of the request are not valid. A ResourceNotFoundException is
// thrown when the server does not exist. An InvalidStateException is thrown when
// the server is in any of the following states: CREATING, TERMINATED, FAILED or
// DELETING.
func (c *Client) ExportServerEngineAttribute(ctx context.Context, params *ExportServerEngineAttributeInput, optFns ...func(*Options)) (*ExportServerEngineAttributeOutput, error) {
	stack := middleware.NewStack("ExportServerEngineAttribute", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpExportServerEngineAttributeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpExportServerEngineAttributeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opExportServerEngineAttribute(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ExportServerEngineAttribute",
			Err:           err,
		}
	}
	out := result.(*ExportServerEngineAttributeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ExportServerEngineAttributeInput struct {
	// The name of the export attribute. Currently, the supported export attribute is
	// Userdata. This exports a user data script that includes parameters and values
	// provided in the InputAttributes list.
	ExportAttributeName *string
	// The name of the server from which you are exporting the attribute.
	ServerName *string
	// The list of engine attributes. The list type is EngineAttribute. An
	// EngineAttribute list item is a pair that includes an attribute name and its
	// value. For the Userdata ExportAttributeName, the following are supported engine
	// attribute names.
	//
	//     * RunList In Chef, a list of roles or recipes that are run
	// in the specified order. In Puppet, this parameter is ignored.
	//
	//     *
	// OrganizationName In Chef, an organization name. AWS OpsWorks for Chef Automate
	// always creates the organization default. In Puppet, this parameter is ignored.
	//
	//
	// * NodeEnvironment In Chef, a node environment (for example, development,
	// staging, or one-box). In Puppet, this parameter is ignored.
	//
	//     *
	// NodeClientVersion In Chef, the version of the Chef engine (three numbers
	// separated by dots, such as 13.8.5). If this attribute is empty, OpsWorks for
	// Chef Automate uses the most current version. In Puppet, this parameter is
	// ignored.
	InputAttributes []*types.EngineAttribute
}

type ExportServerEngineAttributeOutput struct {
	// The requested engine attribute pair with attribute name and value.
	EngineAttribute *types.EngineAttribute
	// The server name used in the request.
	ServerName *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpExportServerEngineAttributeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpExportServerEngineAttribute{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpExportServerEngineAttribute{}, middleware.After)
}

func newServiceMetadataMiddleware_opExportServerEngineAttribute(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "opsworks-cm",
		OperationName: "ExportServerEngineAttribute",
	}
}
