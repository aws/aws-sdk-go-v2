// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

// The request parameters represent the input of a request to run one or more
// SQL statements.
type ExecuteSqlInput struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) of the secret that enables access to the DB
	// cluster.
	//
	// AwsSecretStoreArn is a required field
	AwsSecretStoreArn *string `locationName:"awsSecretStoreArn" min:"11" type:"string" required:"true"`

	// The name of the database.
	Database *string `locationName:"database" type:"string"`

	// The ARN of the Aurora Serverless DB cluster.
	//
	// DbClusterOrInstanceArn is a required field
	DbClusterOrInstanceArn *string `locationName:"dbClusterOrInstanceArn" min:"11" type:"string" required:"true"`

	// The name of the database schema.
	Schema *string `locationName:"schema" type:"string"`

	// One or more SQL statements to run on the DB cluster.
	//
	// You can separate SQL statements from each other with a semicolon (;). Any
	// valid SQL statement is permitted, including data definition, data manipulation,
	// and commit statements.
	//
	// SqlStatements is a required field
	SqlStatements *string `locationName:"sqlStatements" type:"string" required:"true"`
}

// String returns the string representation
func (s ExecuteSqlInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ExecuteSqlInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ExecuteSqlInput"}

	if s.AwsSecretStoreArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("AwsSecretStoreArn"))
	}
	if s.AwsSecretStoreArn != nil && len(*s.AwsSecretStoreArn) < 11 {
		invalidParams.Add(aws.NewErrParamMinLen("AwsSecretStoreArn", 11))
	}

	if s.DbClusterOrInstanceArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("DbClusterOrInstanceArn"))
	}
	if s.DbClusterOrInstanceArn != nil && len(*s.DbClusterOrInstanceArn) < 11 {
		invalidParams.Add(aws.NewErrParamMinLen("DbClusterOrInstanceArn", 11))
	}

	if s.SqlStatements == nil {
		invalidParams.Add(aws.NewErrParamRequired("SqlStatements"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The response elements represent the output of a request to run one or more
// SQL statements.
type ExecuteSqlOutput struct {
	_ struct{} `type:"structure"`

	// The results of the SQL statement or statements.
	SqlStatementResults []SqlStatementResult `locationName:"sqlStatementResults" type:"list"`
}

// String returns the string representation
func (s ExecuteSqlOutput) String() string {
	return awsutil.Prettify(s)
}
