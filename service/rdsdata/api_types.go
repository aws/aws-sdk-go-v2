// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsdata

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

var _ aws.Config
var _ = awsutil.Prettify

// Contains the metadata for a column.
type ColumnMetadata struct {
	_ struct{} `type:"structure"`

	ArrayBaseColumnType *int64 `locationName:"arrayBaseColumnType" type:"integer"`

	IsAutoIncrement *bool `locationName:"isAutoIncrement" type:"boolean"`

	IsCaseSensitive *bool `locationName:"isCaseSensitive" type:"boolean"`

	IsCurrency *bool `locationName:"isCurrency" type:"boolean"`

	IsSigned *bool `locationName:"isSigned" type:"boolean"`

	Label *string `locationName:"label" type:"string"`

	Name *string `locationName:"name" type:"string"`

	Nullable *int64 `locationName:"nullable" type:"integer"`

	Precision *int64 `locationName:"precision" type:"integer"`

	Scale *int64 `locationName:"scale" type:"integer"`

	SchemaName *string `locationName:"schemaName" type:"string"`

	TableName *string `locationName:"tableName" type:"string"`

	Type *int64 `locationName:"type" type:"integer"`

	TypeName *string `locationName:"typeName" type:"string"`
}

// String returns the string representation
func (s ColumnMetadata) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ColumnMetadata) MarshalFields(e protocol.FieldEncoder) error {
	if s.ArrayBaseColumnType != nil {
		v := *s.ArrayBaseColumnType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "arrayBaseColumnType", protocol.Int64Value(v), metadata)
	}
	if s.IsAutoIncrement != nil {
		v := *s.IsAutoIncrement

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "isAutoIncrement", protocol.BoolValue(v), metadata)
	}
	if s.IsCaseSensitive != nil {
		v := *s.IsCaseSensitive

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "isCaseSensitive", protocol.BoolValue(v), metadata)
	}
	if s.IsCurrency != nil {
		v := *s.IsCurrency

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "isCurrency", protocol.BoolValue(v), metadata)
	}
	if s.IsSigned != nil {
		v := *s.IsSigned

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "isSigned", protocol.BoolValue(v), metadata)
	}
	if s.Label != nil {
		v := *s.Label

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "label", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Nullable != nil {
		v := *s.Nullable

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nullable", protocol.Int64Value(v), metadata)
	}
	if s.Precision != nil {
		v := *s.Precision

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "precision", protocol.Int64Value(v), metadata)
	}
	if s.Scale != nil {
		v := *s.Scale

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "scale", protocol.Int64Value(v), metadata)
	}
	if s.SchemaName != nil {
		v := *s.SchemaName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "schemaName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.TableName != nil {
		v := *s.TableName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "tableName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Type != nil {
		v := *s.Type

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "type", protocol.Int64Value(v), metadata)
	}
	if s.TypeName != nil {
		v := *s.TypeName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "typeName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Contains a value.
type Field struct {
	_ struct{} `type:"structure"`

	// BlobValue is automatically base64 encoded/decoded by the SDK.
	BlobValue []byte `locationName:"blobValue" type:"blob"`

	BooleanValue *bool `locationName:"booleanValue" type:"boolean"`

	DoubleValue *float64 `locationName:"doubleValue" type:"double"`

	IsNull *bool `locationName:"isNull" type:"boolean"`

	LongValue *int64 `locationName:"longValue" type:"long"`

	StringValue *string `locationName:"stringValue" type:"string"`
}

// String returns the string representation
func (s Field) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Field) MarshalFields(e protocol.FieldEncoder) error {
	if s.BlobValue != nil {
		v := s.BlobValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "blobValue", protocol.QuotedValue{ValueMarshaler: protocol.BytesValue(v)}, metadata)
	}
	if s.BooleanValue != nil {
		v := *s.BooleanValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "booleanValue", protocol.BoolValue(v), metadata)
	}
	if s.DoubleValue != nil {
		v := *s.DoubleValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "doubleValue", protocol.Float64Value(v), metadata)
	}
	if s.IsNull != nil {
		v := *s.IsNull

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "isNull", protocol.BoolValue(v), metadata)
	}
	if s.LongValue != nil {
		v := *s.LongValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "longValue", protocol.Int64Value(v), metadata)
	}
	if s.StringValue != nil {
		v := *s.StringValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "stringValue", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// A record returned by a call.
type Record struct {
	_ struct{} `type:"structure"`

	Values []Value `locationName:"values" type:"list"`
}

// String returns the string representation
func (s Record) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Record) MarshalFields(e protocol.FieldEncoder) error {
	if s.Values != nil {
		v := s.Values

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "values", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// The result set returned by a SQL statement.
type ResultFrame struct {
	_ struct{} `type:"structure"`

	Records []Record `locationName:"records" type:"list"`

	// The metadata of the result set returned by a SQL statement.
	ResultSetMetadata *ResultSetMetadata `locationName:"resultSetMetadata" type:"structure"`
}

// String returns the string representation
func (s ResultFrame) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ResultFrame) MarshalFields(e protocol.FieldEncoder) error {
	if s.Records != nil {
		v := s.Records

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "records", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.ResultSetMetadata != nil {
		v := s.ResultSetMetadata

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "resultSetMetadata", v, metadata)
	}
	return nil
}

// The metadata of the result set returned by a SQL statement.
type ResultSetMetadata struct {
	_ struct{} `type:"structure"`

	ColumnCount *int64 `locationName:"columnCount" type:"long"`

	ColumnMetadata []ColumnMetadata `locationName:"columnMetadata" type:"list"`
}

// String returns the string representation
func (s ResultSetMetadata) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ResultSetMetadata) MarshalFields(e protocol.FieldEncoder) error {
	if s.ColumnCount != nil {
		v := *s.ColumnCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "columnCount", protocol.Int64Value(v), metadata)
	}
	if s.ColumnMetadata != nil {
		v := s.ColumnMetadata

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "columnMetadata", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// A parameter used in a SQL statement.
type SqlParameter struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"name" type:"string"`

	// Contains a value.
	Value *Field `locationName:"value" type:"structure"`
}

// String returns the string representation
func (s SqlParameter) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SqlParameter) MarshalFields(e protocol.FieldEncoder) error {
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Value != nil {
		v := s.Value

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "value", v, metadata)
	}
	return nil
}

// The result of a SQL statement.
type SqlStatementResult struct {
	_ struct{} `type:"structure"`

	NumberOfRecordsUpdated *int64 `locationName:"numberOfRecordsUpdated" type:"long"`

	// The result set returned by a SQL statement.
	ResultFrame *ResultFrame `locationName:"resultFrame" type:"structure"`
}

// String returns the string representation
func (s SqlStatementResult) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SqlStatementResult) MarshalFields(e protocol.FieldEncoder) error {
	if s.NumberOfRecordsUpdated != nil {
		v := *s.NumberOfRecordsUpdated

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "numberOfRecordsUpdated", protocol.Int64Value(v), metadata)
	}
	if s.ResultFrame != nil {
		v := s.ResultFrame

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "resultFrame", v, metadata)
	}
	return nil
}

// A structure value returned by a call.
type StructValue struct {
	_ struct{} `type:"structure"`

	Attributes []Value `locationName:"attributes" type:"list"`
}

// String returns the string representation
func (s StructValue) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s StructValue) MarshalFields(e protocol.FieldEncoder) error {
	if s.Attributes != nil {
		v := s.Attributes

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "attributes", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// The response elements represent the results of an update.
type UpdateResult struct {
	_ struct{} `type:"structure"`

	GeneratedFields []Field `locationName:"generatedFields" type:"list"`
}

// String returns the string representation
func (s UpdateResult) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateResult) MarshalFields(e protocol.FieldEncoder) error {
	if s.GeneratedFields != nil {
		v := s.GeneratedFields

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "generatedFields", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// Contains the value of a column.
type Value struct {
	_ struct{} `type:"structure"`

	ArrayValues []Value `locationName:"arrayValues" type:"list"`

	BigIntValue *int64 `locationName:"bigIntValue" type:"long"`

	BitValue *bool `locationName:"bitValue" type:"boolean"`

	// BlobValue is automatically base64 encoded/decoded by the SDK.
	BlobValue []byte `locationName:"blobValue" type:"blob"`

	DoubleValue *float64 `locationName:"doubleValue" type:"double"`

	IntValue *int64 `locationName:"intValue" type:"integer"`

	IsNull *bool `locationName:"isNull" type:"boolean"`

	RealValue *float64 `locationName:"realValue" type:"float"`

	StringValue *string `locationName:"stringValue" type:"string"`

	// A structure value returned by a call.
	StructValue *StructValue `locationName:"structValue" type:"structure"`
}

// String returns the string representation
func (s Value) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Value) MarshalFields(e protocol.FieldEncoder) error {
	if s.ArrayValues != nil {
		v := s.ArrayValues

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "arrayValues", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.BigIntValue != nil {
		v := *s.BigIntValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "bigIntValue", protocol.Int64Value(v), metadata)
	}
	if s.BitValue != nil {
		v := *s.BitValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "bitValue", protocol.BoolValue(v), metadata)
	}
	if s.BlobValue != nil {
		v := s.BlobValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "blobValue", protocol.QuotedValue{ValueMarshaler: protocol.BytesValue(v)}, metadata)
	}
	if s.DoubleValue != nil {
		v := *s.DoubleValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "doubleValue", protocol.Float64Value(v), metadata)
	}
	if s.IntValue != nil {
		v := *s.IntValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "intValue", protocol.Int64Value(v), metadata)
	}
	if s.IsNull != nil {
		v := *s.IsNull

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "isNull", protocol.BoolValue(v), metadata)
	}
	if s.RealValue != nil {
		v := *s.RealValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "realValue", protocol.Float64Value(v), metadata)
	}
	if s.StringValue != nil {
		v := *s.StringValue

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "stringValue", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.StructValue != nil {
		v := s.StructValue

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "structValue", v, metadata)
	}
	return nil
}
