// Code generated by smithy-go-codegen DO NOT EDIT.

package rdsdata

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rdsdata/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Runs a SQL statement against a database. If a call isn't part of a transaction
// because it doesn't include the transactionID parameter, changes that result from
// the call are committed automatically. The response size limit is 1 MB. If the
// call returns more than 1 MB of response data, the call is terminated.
func (c *Client) ExecuteStatement(ctx context.Context, params *ExecuteStatementInput, optFns ...func(*Options)) (*ExecuteStatementOutput, error) {
	stack := middleware.NewStack("ExecuteStatement", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpExecuteStatementMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpExecuteStatementValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opExecuteStatement(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ExecuteStatement",
			Err:           err,
		}
	}
	out := result.(*ExecuteStatementOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The request parameters represent the input of a request to run a SQL statement
// against a database.
type ExecuteStatementInput struct {
	// A value that indicates whether to continue running the statement after the call
	// times out. By default, the statement stops running when the call times out. For
	// DDL statements, we recommend continuing to run the statement after the call
	// times out. When a DDL statement terminates before it is finished running, it can
	// result in errors and possibly corrupted data structures.
	ContinueAfterTimeout *bool
	// The name of the database.
	Database *string
	// A value that indicates whether to include metadata in the results.
	IncludeResultMetadata *bool
	// The parameters for the SQL statement. Array parameters are not supported.
	Parameters []*types.SqlParameter
	// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
	ResourceArn *string
	// Options that control how the result set is returned.
	ResultSetOptions *types.ResultSetOptions
	// The name of the database schema. Currently, the schema parameter isn't
	// supported.
	Schema *string
	// The name or ARN of the secret that enables access to the DB cluster.
	SecretArn *string
	// The SQL statement to run.
	Sql *string
	// The identifier of a transaction that was started by using the BeginTransaction
	// operation. Specify the transaction ID of the transaction that you want to
	// include the SQL statement in. If the SQL statement is not part of a transaction,
	// don't set this parameter.
	TransactionId *string
}

// The response elements represent the output of a request to run a SQL statement
// against a database.
type ExecuteStatementOutput struct {
	// Metadata for the columns included in the results.
	ColumnMetadata []*types.ColumnMetadata
	// Values for fields generated during the request.  <note> <p>The
	// <code>generatedFields</code> data isn't supported by Aurora PostgreSQL. To get
	// the values of generated fields, use the <code>RETURNING</code> clause. For more
	// information, see <a
	// href="https://www.postgresql.org/docs/10/dml-returning.html">Returning Data From
	// Modified Rows</a> in the PostgreSQL documentation.</p> </note>
	GeneratedFields []types.Field
	// The number of records updated by the request.
	NumberOfRecordsUpdated *int64
	// The records returned by the SQL statement.
	Records [][]types.Field

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpExecuteStatementMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpExecuteStatement{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpExecuteStatement{}, middleware.After)
}

func newServiceMetadataMiddleware_opExecuteStatement(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "",
		OperationName: "ExecuteStatement",
	}
}
