// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsdata

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rdsdata/types"
)

const opBatchExecuteStatement = "BatchExecuteStatement"

// BatchExecuteStatementRequest returns a request value for making API operation for
// AWS RDS DataService.
//
// Runs a batch SQL statement over an array of data.
//
// You can run bulk update and insert operations for multiple records using
// a DML statement with different parameter sets. Bulk operations can provide
// a significant performance improvement over individual insert and update operations.
//
// If a call isn't part of a transaction because it doesn't include the transactionID
// parameter, changes that result from the call are committed automatically.
//
//    // Example sending a request using BatchExecuteStatementRequest.
//    req := client.BatchExecuteStatementRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/rds-data-2018-08-01/BatchExecuteStatement
func (c *Client) BatchExecuteStatementRequest(input *types.BatchExecuteStatementInput) BatchExecuteStatementRequest {
	op := &aws.Operation{
		Name:       opBatchExecuteStatement,
		HTTPMethod: "POST",
		HTTPPath:   "/BatchExecute",
	}

	if input == nil {
		input = &types.BatchExecuteStatementInput{}
	}

	req := c.newRequest(op, input, &types.BatchExecuteStatementOutput{})
	return BatchExecuteStatementRequest{Request: req, Input: input, Copy: c.BatchExecuteStatementRequest}
}

// BatchExecuteStatementRequest is the request type for the
// BatchExecuteStatement API operation.
type BatchExecuteStatementRequest struct {
	*aws.Request
	Input *types.BatchExecuteStatementInput
	Copy  func(*types.BatchExecuteStatementInput) BatchExecuteStatementRequest
}

// Send marshals and sends the BatchExecuteStatement API request.
func (r BatchExecuteStatementRequest) Send(ctx context.Context) (*BatchExecuteStatementResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &BatchExecuteStatementResponse{
		BatchExecuteStatementOutput: r.Request.Data.(*types.BatchExecuteStatementOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// BatchExecuteStatementResponse is the response type for the
// BatchExecuteStatement API operation.
type BatchExecuteStatementResponse struct {
	*types.BatchExecuteStatementOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// BatchExecuteStatement request.
func (r *BatchExecuteStatementResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
