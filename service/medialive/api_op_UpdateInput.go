// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates an input.
func (c *Client) UpdateInput(ctx context.Context, params *UpdateInputInput, optFns ...func(*Options)) (*UpdateInputOutput, error) {
	stack := middleware.NewStack("UpdateInput", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpUpdateInputMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateInputValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateInput(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateInput",
			Err:           err,
		}
	}
	out := result.(*UpdateInputOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to update an input.
type UpdateInputInput struct {
	// Settings for the devices.
	InputDevices []*types.InputDeviceRequest
	// The source URLs for a PULL-type input. Every PULL type input needs exactly two
	// source URLs for redundancy. Only specify sources for PULL type Inputs. Leave
	// Destinations empty.
	Sources []*types.InputSourceRequest
	// Destination settings for PUSH type inputs.
	Destinations []*types.InputDestinationRequest
	// Unique ID of the input.
	InputId *string
	// A list of security groups referenced by IDs to attach to the input.
	InputSecurityGroups []*string
	// Name of the input.
	Name *string
	// The Amazon Resource Name (ARN) of the role this input assumes during and after
	// creation.
	RoleArn *string
	// A list of the MediaConnect Flow ARNs that you want to use as the source of the
	// input. You can specify as few as one Flow and presently, as many as two. The
	// only requirement is when you have more than one is that each Flow is in a
	// separate Availability Zone as this ensures your EML input is redundant to AZ
	// issues.
	MediaConnectFlows []*types.MediaConnectFlowRequest
}

// Placeholder documentation for UpdateInputResponse
type UpdateInputOutput struct {
	// Placeholder documentation for Input
	Input *types.Input

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpUpdateInputMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpUpdateInput{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateInput{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateInput(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "UpdateInput",
	}
}
