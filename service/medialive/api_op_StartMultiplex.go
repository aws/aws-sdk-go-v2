// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Start (run) the multiplex. Starting the multiplex does not start the channels.
// You must explicitly start each channel.
func (c *Client) StartMultiplex(ctx context.Context, params *StartMultiplexInput, optFns ...func(*Options)) (*StartMultiplexOutput, error) {
	stack := middleware.NewStack("StartMultiplex", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpStartMultiplexMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStartMultiplexValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartMultiplex(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartMultiplex",
			Err:           err,
		}
	}
	out := result.(*StartMultiplexOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Placeholder documentation for StartMultiplexRequest
type StartMultiplexInput struct {
	// The ID of the multiplex.
	MultiplexId *string
}

// Placeholder documentation for StartMultiplexResponse
type StartMultiplexOutput struct {
	// Configuration for a multiplex event.
	MultiplexSettings *types.MultiplexSettings
	// The unique id of the multiplex.
	Id *string
	// The current state of the multiplex.
	State types.MultiplexState
	// A list of availability zones for the multiplex.
	AvailabilityZones []*string
	// The number of currently healthy pipelines.
	PipelinesRunningCount *int32
	// The name of the multiplex.
	Name *string
	// A list of the multiplex output destinations.
	Destinations []*types.MultiplexOutputDestination
	// A collection of key-value pairs.
	Tags map[string]*string
	// The unique arn of the multiplex.
	Arn *string
	// The number of programs in the multiplex.
	ProgramCount *int32

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpStartMultiplexMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpStartMultiplex{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpStartMultiplex{}, middleware.After)
}

func newServiceMetadataMiddleware_opStartMultiplex(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "StartMultiplex",
	}
}
