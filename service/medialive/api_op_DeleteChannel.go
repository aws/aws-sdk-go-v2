// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Starts deletion of channel. The associated outputs are also deleted.
func (c *Client) DeleteChannel(ctx context.Context, params *DeleteChannelInput, optFns ...func(*Options)) (*DeleteChannelOutput, error) {
	stack := middleware.NewStack("DeleteChannel", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDeleteChannelMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDeleteChannelValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDeleteChannel(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DeleteChannel",
			Err:           err,
		}
	}
	out := result.(*DeleteChannelOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Placeholder documentation for DeleteChannelRequest
type DeleteChannelInput struct {
	// Unique ID of the channel.
	ChannelId *string
}

// Placeholder documentation for DeleteChannelResponse
type DeleteChannelOutput struct {
	// A list of destinations of the channel. For UDP outputs, there is one destination
	// per output. For other types (HLS, for example), there is one destination per
	// packager.
	Destinations []*types.OutputDestination
	// The unique id of the channel.
	Id *string
	// Encoder Settings
	EncoderSettings *types.EncoderSettings
	// The class for this channel. STANDARD for a channel with two pipelines or
	// SINGLE_PIPELINE for a channel with one pipeline.
	ChannelClass types.ChannelClass
	// Runtime details for the pipelines of a running channel.
	PipelineDetails []*types.PipelineDetail
	// The unique arn of the channel.
	Arn *string
	// A collection of key-value pairs.
	Tags map[string]*string
	// The endpoints where outgoing connections initiate from
	EgressEndpoints []*types.ChannelEgressEndpoint
	// The number of currently healthy pipelines.
	PipelinesRunningCount *int32
	// Placeholder documentation for ChannelState
	State types.ChannelState
	// List of input attachments for channel.
	InputAttachments []*types.InputAttachment
	// Placeholder documentation for InputSpecification
	InputSpecification *types.InputSpecification
	// The log level being written to CloudWatch Logs.
	LogLevel types.LogLevel
	// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
	RoleArn *string
	// The name of the channel. (user-mutable)
	Name *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDeleteChannelMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDeleteChannel{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDeleteChannel{}, middleware.After)
}

func newServiceMetadataMiddleware_opDeleteChannel(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "DeleteChannel",
	}
}
