// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Update a channel schedule
func (c *Client) BatchUpdateSchedule(ctx context.Context, params *BatchUpdateScheduleInput, optFns ...func(*Options)) (*BatchUpdateScheduleOutput, error) {
	if params == nil {
		params = &BatchUpdateScheduleInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "BatchUpdateSchedule", params, optFns, addOperationBatchUpdateScheduleMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*BatchUpdateScheduleOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// List of actions to create and list of actions to delete.
type BatchUpdateScheduleInput struct {

	// Id of the channel whose schedule is being updated.
	//
	// This member is required.
	ChannelId *string

	// Schedule actions to create in the schedule.
	Creates *types.BatchScheduleActionCreateRequest

	// Schedule actions to delete from the schedule.
	Deletes *types.BatchScheduleActionDeleteRequest
}

// Placeholder documentation for BatchUpdateScheduleResponse
type BatchUpdateScheduleOutput struct {

	// Schedule actions created in the schedule.
	Creates *types.BatchScheduleActionCreateResult

	// Schedule actions deleted from the schedule.
	Deletes *types.BatchScheduleActionDeleteResult

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationBatchUpdateScheduleMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpBatchUpdateSchedule{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpBatchUpdateSchedule{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpBatchUpdateScheduleValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opBatchUpdateSchedule(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opBatchUpdateSchedule(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "BatchUpdateSchedule",
	}
}
