// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Create an input
func (c *Client) CreateInput(ctx context.Context, params *CreateInputInput, optFns ...func(*Options)) (*CreateInputOutput, error) {
	stack := middleware.NewStack("CreateInput", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateInputMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addIdempotencyToken_opCreateInputMiddleware(stack, options)
	addOpCreateInputValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateInput(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateInput",
			Err:           err,
		}
	}
	out := result.(*CreateInputOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The name of the input
type CreateInputInput struct {
	// A collection of key-value pairs.
	Tags map[string]*string
	// Placeholder documentation for InputType
	Type types.InputType
	// Settings for the devices.
	InputDevices []*types.InputDeviceSettings
	// A list of security groups referenced by IDs to attach to the input.
	InputSecurityGroups []*string
	// The Amazon Resource Name (ARN) of the role this input assumes during and after
	// creation.
	RoleArn *string
	// Name of the input.
	Name *string
	// The source URLs for a PULL-type input. Every PULL type input needs exactly two
	// source URLs for redundancy. Only specify sources for PULL type Inputs. Leave
	// Destinations empty.
	Sources []*types.InputSourceRequest
	// A list of the MediaConnect Flows that you want to use in this input. You can
	// specify as few as one Flow and presently, as many as two. The only requirement
	// is when you have more than one is that each Flow is in a separate Availability
	// Zone as this ensures your EML input is redundant to AZ issues.
	MediaConnectFlows []*types.MediaConnectFlowRequest
	// Settings for a private VPC Input. When this property is specified, the input
	// destination addresses will be created in a VPC rather than with public Internet
	// addresses. This property requires setting the roleArn property on Input
	// creation. Not compatible with the inputSecurityGroups property.
	Vpc *types.InputVpcRequest
	// Destination settings for PUSH type inputs.
	Destinations []*types.InputDestinationRequest
	// Unique identifier of the request to ensure the request is handled exactly once
	// in case of retries.
	RequestId *string
}

// Placeholder documentation for CreateInputResponse
type CreateInputOutput struct {
	// Placeholder documentation for Input
	Input *types.Input

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateInputMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateInput{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateInput{}, middleware.After)
}

type idempotencyToken_initializeOpCreateInput struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpCreateInput) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpCreateInput) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*CreateInputInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *CreateInputInput ")
	}

	if input.RequestId == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.RequestId = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opCreateInputMiddleware(stack *middleware.Stack, cfg Options) {
	stack.Initialize.Add(&idempotencyToken_initializeOpCreateInput{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opCreateInput(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "CreateInput",
	}
}
