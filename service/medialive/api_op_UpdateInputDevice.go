// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates the parameters for the input device.
func (c *Client) UpdateInputDevice(ctx context.Context, params *UpdateInputDeviceInput, optFns ...func(*Options)) (*UpdateInputDeviceOutput, error) {
	stack := middleware.NewStack("UpdateInputDevice", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpUpdateInputDeviceMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateInputDeviceValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateInputDevice(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateInputDevice",
			Err:           err,
		}
	}
	out := result.(*UpdateInputDeviceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to update an input device.
type UpdateInputDeviceInput struct {
	// The settings that you want to apply to the input device.
	HdDeviceSettings *types.InputDeviceConfigurableSettings
	// The unique ID of the input device. For example, hd-123456789abcdef.
	InputDeviceId *string
	// The name that you assigned to this input device (not the unique ID).
	Name *string
}

// Placeholder documentation for UpdateInputDeviceResponse
type UpdateInputDeviceOutput struct {
	// The unique ARN of the input device.
	Arn *string
	// The network MAC address of the input device.
	MacAddress *string
	// Settings that describe an input device that is type HD.
	HdDeviceSettings *types.InputDeviceHdSettings
	// The type of the input device.
	Type types.InputDeviceType
	// The status of the action to synchronize the device configuration. If you change
	// the configuration of the input device (for example, the maximum bitrate),
	// MediaLive sends the new data to the device. The device might not update itself
	// immediately. SYNCED means the device has updated its configuration. SYNCING
	// means that it has not updated its configuration.
	DeviceSettingsSyncState types.DeviceSettingsSyncState
	// The network settings for the input device.
	NetworkSettings *types.InputDeviceNetworkSettings
	// The unique serial number of the input device.
	SerialNumber *string
	// A name that you specify for the input device.
	Name *string
	// The unique ID of the input device.
	Id *string
	// The state of the connection between the input device and AWS.
	ConnectionState types.InputDeviceConnectionState

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpUpdateInputDeviceMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpUpdateInputDevice{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateInputDevice{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateInputDevice(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "UpdateInputDevice",
	}
}
