// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package medialiveiface provides an interface to enable mocking the AWS Elemental MediaLive service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package medialiveiface

import (
	"github.com/aws/aws-sdk-go-v2/service/medialive"
)

// MediaLiveAPI provides an interface to enable mocking the
// medialive.MediaLive service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // AWS Elemental MediaLive.
//    func myFunc(svc medialiveiface.MediaLiveAPI) bool {
//        // Make svc.CreateChannel request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := medialive.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockMediaLiveClient struct {
//        medialiveiface.MediaLiveAPI
//    }
//    func (m *mockMediaLiveClient) CreateChannel(input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockMediaLiveClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type MediaLiveAPI interface {
	CreateChannelRequest(*medialive.CreateChannelInput) medialive.CreateChannelRequest

	CreateInputRequest(*medialive.CreateInputInput) medialive.CreateInputRequest

	CreateInputSecurityGroupRequest(*medialive.CreateInputSecurityGroupInput) medialive.CreateInputSecurityGroupRequest

	DeleteChannelRequest(*medialive.DeleteChannelInput) medialive.DeleteChannelRequest

	DeleteInputRequest(*medialive.DeleteInputInput) medialive.DeleteInputRequest

	DeleteInputSecurityGroupRequest(*medialive.DeleteInputSecurityGroupInput) medialive.DeleteInputSecurityGroupRequest

	DescribeChannelRequest(*medialive.DescribeChannelInput) medialive.DescribeChannelRequest

	DescribeInputRequest(*medialive.DescribeInputInput) medialive.DescribeInputRequest

	DescribeInputSecurityGroupRequest(*medialive.DescribeInputSecurityGroupInput) medialive.DescribeInputSecurityGroupRequest

	ListChannelsRequest(*medialive.ListChannelsInput) medialive.ListChannelsRequest

	ListInputSecurityGroupsRequest(*medialive.ListInputSecurityGroupsInput) medialive.ListInputSecurityGroupsRequest

	ListInputsRequest(*medialive.ListInputsInput) medialive.ListInputsRequest

	StartChannelRequest(*medialive.StartChannelInput) medialive.StartChannelRequest

	StopChannelRequest(*medialive.StopChannelInput) medialive.StopChannelRequest

	UpdateChannelRequest(*medialive.UpdateChannelInput) medialive.UpdateChannelRequest

	UpdateInputRequest(*medialive.UpdateInputInput) medialive.UpdateInputRequest

	UpdateInputSecurityGroupRequest(*medialive.UpdateInputSecurityGroupInput) medialive.UpdateInputSecurityGroupRequest
}

var _ MediaLiveAPI = (*medialive.MediaLive)(nil)
