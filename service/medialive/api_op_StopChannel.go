// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package medialive

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
)

const opStopChannel = "StopChannel"

// StopChannelRequest returns a request value for making API operation for
// AWS Elemental MediaLive.
//
// Stops a running channel
//
//    // Example sending a request using StopChannelRequest.
//    req := client.StopChannelRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/StopChannel
func (c *Client) StopChannelRequest(input *types.StopChannelInput) StopChannelRequest {
	op := &aws.Operation{
		Name:       opStopChannel,
		HTTPMethod: "POST",
		HTTPPath:   "/prod/channels/{channelId}/stop",
	}

	if input == nil {
		input = &types.StopChannelInput{}
	}

	req := c.newRequest(op, input, &types.StopChannelOutput{})
	return StopChannelRequest{Request: req, Input: input, Copy: c.StopChannelRequest}
}

// StopChannelRequest is the request type for the
// StopChannel API operation.
type StopChannelRequest struct {
	*aws.Request
	Input *types.StopChannelInput
	Copy  func(*types.StopChannelInput) StopChannelRequest
}

// Send marshals and sends the StopChannel API request.
func (r StopChannelRequest) Send(ctx context.Context) (*StopChannelResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StopChannelResponse{
		StopChannelOutput: r.Request.Data.(*types.StopChannelOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StopChannelResponse is the response type for the
// StopChannel API operation.
type StopChannelResponse struct {
	*types.StopChannelOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StopChannel request.
func (r *StopChannelResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
