// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// List input devices that are currently being transferred. List input devices that
// you are transferring from your AWS account or input devices that another AWS
// account is transferring to you.
func (c *Client) ListInputDeviceTransfers(ctx context.Context, params *ListInputDeviceTransfersInput, optFns ...func(*Options)) (*ListInputDeviceTransfersOutput, error) {
	if params == nil {
		params = &ListInputDeviceTransfersInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListInputDeviceTransfers", params, optFns, addOperationListInputDeviceTransfersMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListInputDeviceTransfersOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Placeholder documentation for ListInputDeviceTransfersRequest
type ListInputDeviceTransfersInput struct {

	// Placeholder documentation for __string
	//
	// This member is required.
	TransferType *string

	// Placeholder documentation for MaxResults
	MaxResults *int32

	// Placeholder documentation for __string
	NextToken *string
}

// Placeholder documentation for ListInputDeviceTransfersResponse
type ListInputDeviceTransfersOutput struct {

	// The list of devices that you are transferring or are being transferred to you.
	InputDeviceTransfers []*types.TransferringInputDeviceSummary

	// A token to get additional list results.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListInputDeviceTransfersMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpListInputDeviceTransfers{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpListInputDeviceTransfers{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListInputDeviceTransfersValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListInputDeviceTransfers(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opListInputDeviceTransfers(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "ListInputDeviceTransfers",
	}
}
