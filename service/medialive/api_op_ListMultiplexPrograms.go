// Code generated by smithy-go-codegen DO NOT EDIT.

package medialive

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// List the programs that currently exist for a specific multiplex.
func (c *Client) ListMultiplexPrograms(ctx context.Context, params *ListMultiplexProgramsInput, optFns ...func(*Options)) (*ListMultiplexProgramsOutput, error) {
	if params == nil {
		params = &ListMultiplexProgramsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListMultiplexPrograms", params, optFns, addOperationListMultiplexProgramsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListMultiplexProgramsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Placeholder documentation for ListMultiplexProgramsRequest
type ListMultiplexProgramsInput struct {

	// The ID of the multiplex that the programs belong to.
	//
	// This member is required.
	MultiplexId *string

	// The maximum number of items to return.
	MaxResults *int32

	// The token to retrieve the next page of results.
	NextToken *string
}

// Placeholder documentation for ListMultiplexProgramsResponse
type ListMultiplexProgramsOutput struct {

	// List of multiplex programs.
	MultiplexPrograms []*types.MultiplexProgramSummary

	// Token for the next ListMultiplexProgram request.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListMultiplexProgramsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpListMultiplexPrograms{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpListMultiplexPrograms{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListMultiplexProgramsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListMultiplexPrograms(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opListMultiplexPrograms(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "medialive",
		OperationName: "ListMultiplexPrograms",
	}
}
