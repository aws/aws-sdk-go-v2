// Code generated by smithy-go-codegen DO NOT EDIT.

package machinelearning

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/machinelearning/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns a DataSource that includes metadata and data file information, as well
// as the current status of the DataSource. GetDataSource provides results in
// normal or verbose format. The verbose format adds the schema description and the
// list of files pointed to by the DataSource to the normal format.
func (c *Client) GetDataSource(ctx context.Context, params *GetDataSourceInput, optFns ...func(*Options)) (*GetDataSourceOutput, error) {
	stack := middleware.NewStack("GetDataSource", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetDataSourceMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetDataSourceValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetDataSource(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetDataSource",
			Err:           err,
		}
	}
	out := result.(*GetDataSourceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetDataSourceInput struct {
	// The ID assigned to the DataSource at creation.
	DataSourceId *string
	// Specifies whether the GetDataSource operation should return DataSourceSchema. If
	// true, DataSourceSchema is returned. If false, DataSourceSchema is not returned.
	Verbose *bool
}

// Represents the output of a GetDataSource operation and describes a DataSource.
type GetDataSourceOutput struct {
	// The epoch time when Amazon Machine Learning marked the DataSource as INPROGRESS.
	// StartedAt isn't available if the DataSource is in the PENDING state.
	StartedAt *time.Time
	// The schema used by all of the data files of this DataSource. Note: This
	// parameter is provided as part of the verbose format.
	DataSourceSchema *string
	// The approximate CPU time in milliseconds that Amazon Machine Learning spent
	// processing the DataSource, normalized and scaled on computation resources.
	// ComputeTime is only available if the DataSource is in the COMPLETED state and
	// the ComputeStatistics is set to true.
	ComputeTime *int64
	// A user-supplied name or description of the DataSource.
	Name *string
	// The ID assigned to the DataSource at creation. This value should be identical to
	// the value of the DataSourceId in the request.
	DataSourceId *string
	// The AWS user account from which the DataSource was created. The account type can
	// be either an AWS root account or an AWS Identity and Access Management (IAM)
	// user account.
	CreatedByIamUser *string
	// The user-supplied description of the most recent details about creating the
	// DataSource.
	Message *string
	// The total size of observations in the data files.
	DataSizeInBytes *int64
	// The parameter is true if statistics need to be generated from the observation
	// data.
	ComputeStatistics *bool
	// The epoch time when Amazon Machine Learning marked the DataSource as COMPLETED
	// or FAILED. FinishedAt is only available when the DataSource is in the COMPLETED
	// or FAILED state.
	FinishedAt *time.Time
	// A link to the file containing logs of CreateDataSourceFrom* operations.
	LogUri *string
	// The current status of the DataSource. This element can have one of the following
	// values:
	//
	//     * PENDING - Amazon ML submitted a request to create a DataSource.
	//
	//
	// * INPROGRESS - The creation process is underway.
	//
	//     * FAILED - The request to
	// create a DataSource did not run to completion. It is not usable.
	//
	//     *
	// COMPLETED - The creation process completed successfully.
	//
	//     * DELETED - The
	// DataSource is marked as deleted. It is not usable.
	Status types.EntityStatus
	// The datasource details that are specific to Amazon RDS.
	RDSMetadata *types.RDSMetadata
	// The location of the data file or directory in Amazon Simple Storage Service
	// (Amazon S3).
	DataLocationS3 *string
	// Describes the DataSource details specific to Amazon Redshift.
	RedshiftMetadata *types.RedshiftMetadata
	// The number of data files referenced by the DataSource.
	NumberOfFiles *int64
	// The Amazon Resource Name (ARN) of an AWS IAM Role
	// (https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts),
	// such as the following: arn:aws:iam::account:role/rolename.
	RoleARN *string
	// The time that the DataSource was created. The time is expressed in epoch time.
	CreatedAt *time.Time
	// A JSON string that represents the splitting and rearrangement requirement used
	// when this DataSource was created.
	DataRearrangement *string
	// The time of the most recent edit to the DataSource. The time is expressed in
	// epoch time.
	LastUpdatedAt *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetDataSourceMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetDataSource{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetDataSource{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetDataSource(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "machinelearning",
		OperationName: "GetDataSource",
	}
}
