// Code generated by smithy-go-codegen DO NOT EDIT.

package machinelearning

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/machinelearning/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a list of MLModel that match the search criteria in the request.
func (c *Client) DescribeMLModels(ctx context.Context, params *DescribeMLModelsInput, optFns ...func(*Options)) (*DescribeMLModelsOutput, error) {
	stack := middleware.NewStack("DescribeMLModels", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeMLModelsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeMLModels(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeMLModels",
			Err:           err,
		}
	}
	out := result.(*DescribeMLModelsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeMLModelsInput struct {
	// The not equal to operator. The MLModel results will have FilterVariable values
	// not equal to the value specified with NE.
	NE *string
	// The less than operator. The MLModel results will have FilterVariable values that
	// are less than the value specified with LT.
	LT *string
	// A string that is found at the beginning of a variable, such as Name or Id. For
	// example, an MLModel could have the Name2014-09-09-HolidayGiftMailer. To search
	// for this MLModel, select Name for the FilterVariable and any of the following
	// strings for the Prefix:  <ul> <li> <p>2014-09</p> </li> <li> <p>2014-09-09</p>
	// </li> <li> <p>2014-09-09-Holiday</p> </li> </ul>
	Prefix *string
	// The less than or equal to operator. The MLModel results will have FilterVariable
	// values that are less than or equal to the value specified with LE.
	LE *string
	// A two-value parameter that determines the sequence of the resulting list of
	// MLModel.
	//
	//     * asc - Arranges the list in ascending order (A-Z, 0-9).
	//
	//     *
	// dsc - Arranges the list in descending order (Z-A, 9-0).
	//
	// Results are sorted by
	// FilterVariable.
	SortOrder types.SortOrder
	// The ID of the page in the paginated results.
	NextToken *string
	// The number of pages of information to include in the result. The range of
	// acceptable values is 1 through 100. The default value is 100.
	Limit *int32
	// The equal to operator. The MLModel results will have FilterVariable values that
	// exactly match the value specified with EQ.
	EQ *string
	// Use one of the following variables to filter a list of MLModel:
	//
	//     * CreatedAt
	// - Sets the search criteria to MLModel creation date.
	//
	//     * Status - Sets the
	// search criteria to MLModel status.
	//
	//     * Name - Sets the search criteria to the
	// contents of MLModelName.
	//
	//     * IAMUser - Sets the search criteria to the user
	// account that invoked the MLModel creation.
	//
	//     * TrainingDataSourceId - Sets
	// the search criteria to the DataSource used to train one or more MLModel.
	//
	//     *
	// RealtimeEndpointStatus - Sets the search criteria to the MLModel real-time
	// endpoint status.
	//
	//     * MLModelType - Sets the search criteria to MLModel type:
	// binary, regression, or multi-class.
	//
	//     * Algorithm - Sets the search criteria
	// to the algorithm that the MLModel uses.
	//
	//     * TrainingDataURI - Sets the search
	// criteria to the data file(s) used in training a MLModel. The URL can identify
	// either a file or an Amazon Simple Storage Service (Amazon S3) bucket or
	// directory.
	FilterVariable types.MLModelFilterVariable
	// The greater than operator. The MLModel results will have FilterVariable values
	// that are greater than the value specified with GT.
	GT *string
	// The greater than or equal to operator. The MLModel results will have
	// FilterVariable values that are greater than or equal to the value specified with
	// GE.
	GE *string
}

// Represents the output of a DescribeMLModels operation. The content is
// essentially a list of MLModel.
type DescribeMLModelsOutput struct {
	// A list of MLModel that meet the search criteria.
	Results []*types.MLModel
	// The ID of the next page in the paginated results that indicates at least one
	// more page follows.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeMLModelsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeMLModels{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeMLModels{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeMLModels(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "machinelearning",
		OperationName: "DescribeMLModels",
	}
}
