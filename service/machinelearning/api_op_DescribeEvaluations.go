// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package machinelearning

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/machinelearning/types"
)

const opDescribeEvaluations = "DescribeEvaluations"

// DescribeEvaluationsRequest returns a request value for making API operation for
// Amazon Machine Learning.
//
// Returns a list of DescribeEvaluations that match the search criteria in the
// request.
//
//    // Example sending a request using DescribeEvaluationsRequest.
//    req := client.DescribeEvaluationsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) DescribeEvaluationsRequest(input *types.DescribeEvaluationsInput) DescribeEvaluationsRequest {
	op := &aws.Operation{
		Name:       opDescribeEvaluations,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "Limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeEvaluationsInput{}
	}

	req := c.newRequest(op, input, &types.DescribeEvaluationsOutput{})
	return DescribeEvaluationsRequest{Request: req, Input: input, Copy: c.DescribeEvaluationsRequest}
}

// DescribeEvaluationsRequest is the request type for the
// DescribeEvaluations API operation.
type DescribeEvaluationsRequest struct {
	*aws.Request
	Input *types.DescribeEvaluationsInput
	Copy  func(*types.DescribeEvaluationsInput) DescribeEvaluationsRequest
}

// Send marshals and sends the DescribeEvaluations API request.
func (r DescribeEvaluationsRequest) Send(ctx context.Context) (*DescribeEvaluationsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeEvaluationsResponse{
		DescribeEvaluationsOutput: r.Request.Data.(*types.DescribeEvaluationsOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeEvaluationsRequestPaginator returns a paginator for DescribeEvaluations.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeEvaluationsRequest(input)
//   p := machinelearning.NewDescribeEvaluationsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeEvaluationsPaginator(req DescribeEvaluationsRequest) DescribeEvaluationsPaginator {
	return DescribeEvaluationsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeEvaluationsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeEvaluationsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeEvaluationsPaginator struct {
	aws.Pager
}

func (p *DescribeEvaluationsPaginator) CurrentPage() *types.DescribeEvaluationsOutput {
	return p.Pager.CurrentPage().(*types.DescribeEvaluationsOutput)
}

// DescribeEvaluationsResponse is the response type for the
// DescribeEvaluations API operation.
type DescribeEvaluationsResponse struct {
	*types.DescribeEvaluationsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeEvaluations request.
func (r *DescribeEvaluationsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
