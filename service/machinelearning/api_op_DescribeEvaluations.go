// Code generated by smithy-go-codegen DO NOT EDIT.

package machinelearning

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/machinelearning/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a list of DescribeEvaluations that match the search criteria in the
// request.
func (c *Client) DescribeEvaluations(ctx context.Context, params *DescribeEvaluationsInput, optFns ...func(*Options)) (*DescribeEvaluationsOutput, error) {
	if params == nil {
		params = &DescribeEvaluationsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeEvaluations", params, optFns, addOperationDescribeEvaluationsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeEvaluationsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeEvaluationsInput struct {

	// The equal to operator. The Evaluation results will have FilterVariable values
	// that exactly match the value specified with EQ.
	EQ *string

	// Use one of the following variable to filter a list of Evaluation objects:
	//
	// *
	// CreatedAt - Sets the search criteria to the Evaluation creation date.
	//
	// * Status
	// - Sets the search criteria to the Evaluation status.
	//
	// * Name - Sets the search
	// criteria to the contents of EvaluationName.
	//
	// * IAMUser - Sets the search
	// criteria to the user account that invoked an Evaluation.
	//
	// * MLModelId - Sets the
	// search criteria to the MLModel that was evaluated.
	//
	// * DataSourceId - Sets the
	// search criteria to the DataSource used in Evaluation.
	//
	// * DataUri - Sets the
	// search criteria to the data file(s) used in Evaluation. The URL can identify
	// either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or
	// directory.
	FilterVariable types.EvaluationFilterVariable

	// The greater than or equal to operator. The Evaluation results will have
	// FilterVariable values that are greater than or equal to the value specified with
	// GE.
	GE *string

	// The greater than operator. The Evaluation results will have FilterVariable
	// values that are greater than the value specified with GT.
	GT *string

	// The less than or equal to operator. The Evaluation results will have
	// FilterVariable values that are less than or equal to the value specified with
	// LE.
	LE *string

	// The less than operator. The Evaluation results will have FilterVariable values
	// that are less than the value specified with LT.
	LT *string

	// The maximum number of Evaluation to include in the result.
	Limit *int32

	// The not equal to operator. The Evaluation results will have FilterVariable
	// values not equal to the value specified with NE.
	NE *string

	// The ID of the page in the paginated results.
	NextToken *string

	// A string that is found at the beginning of a variable, such as Name or Id. For
	// example, an Evaluation could have the Name2014-09-09-HolidayGiftMailer. To
	// search for this Evaluation, select Name for the FilterVariable and any of the
	// following strings for the Prefix:
	//
	// * 2014-09
	//
	// * 2014-09-09
	//
	// * 2014-09-09-Holiday
	Prefix *string

	// A two-value parameter that determines the sequence of the resulting list of
	// Evaluation.
	//
	// * asc - Arranges the list in ascending order (A-Z, 0-9).
	//
	// * dsc -
	// Arranges the list in descending order (Z-A, 9-0).
	//
	// Results are sorted by
	// FilterVariable.
	SortOrder types.SortOrder
}

// Represents the query results from a DescribeEvaluations operation. The content
// is essentially a list of Evaluation.
type DescribeEvaluationsOutput struct {

	// The ID of the next page in the paginated results that indicates at least one
	// more page follows.
	NextToken *string

	// A list of Evaluation that meet the search criteria.
	Results []types.Evaluation

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribeEvaluationsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeEvaluations{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeEvaluations{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeEvaluations(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

// DescribeEvaluationsAPIClient is a client that implements the DescribeEvaluations
// operation.
type DescribeEvaluationsAPIClient interface {
	DescribeEvaluations(context.Context, *DescribeEvaluationsInput, ...func(*Options)) (*DescribeEvaluationsOutput, error)
}

var _ DescribeEvaluationsAPIClient = (*Client)(nil)

// DescribeEvaluationsPaginatorOptions is the paginator options for
// DescribeEvaluations
type DescribeEvaluationsPaginatorOptions struct {
	// The maximum number of Evaluation to include in the result.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// DescribeEvaluationsPaginator is a paginator for DescribeEvaluations
type DescribeEvaluationsPaginator struct {
	options   DescribeEvaluationsPaginatorOptions
	client    DescribeEvaluationsAPIClient
	params    *DescribeEvaluationsInput
	nextToken *string
	firstPage bool
}

// NewDescribeEvaluationsPaginator returns a new DescribeEvaluationsPaginator
func NewDescribeEvaluationsPaginator(client DescribeEvaluationsAPIClient, params *DescribeEvaluationsInput, optFns ...func(*DescribeEvaluationsPaginatorOptions)) *DescribeEvaluationsPaginator {
	options := DescribeEvaluationsPaginatorOptions{}
	if params.Limit != nil {
		options.Limit = *params.Limit
	}

	for _, fn := range optFns {
		fn(&options)
	}

	if params == nil {
		params = &DescribeEvaluationsInput{}
	}

	return &DescribeEvaluationsPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *DescribeEvaluationsPaginator) HasMorePages() bool {
	return p.firstPage || p.nextToken != nil
}

// NextPage retrieves the next DescribeEvaluations page.
func (p *DescribeEvaluationsPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*DescribeEvaluationsOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.Limit = limit

	result, err := p.client.DescribeEvaluations(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken && prevToken != nil && p.nextToken != nil && *prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

func newServiceMetadataMiddleware_opDescribeEvaluations(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "machinelearning",
		OperationName: "DescribeEvaluations",
	}
}
