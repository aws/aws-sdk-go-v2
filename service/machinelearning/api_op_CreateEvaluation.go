// Code generated by smithy-go-codegen DO NOT EDIT.

package machinelearning

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new Evaluation of an MLModel. An MLModel is evaluated on a set of
// observations associated to a DataSource. Like a DataSource for an MLModel, the
// DataSource for an Evaluation contains values for the Target Variable. The
// Evaluation compares the predicted result for each observation to the actual
// outcome and provides a summary so that you know how effective the MLModel
// functions on the test data. Evaluation generates a relevant performance metric,
// such as BinaryAUC, RegressionRMSE or MulticlassAvgFScore based on the
// corresponding MLModelType: BINARY, REGRESSION or MULTICLASS.  </p> <p>
// <code>CreateEvaluation</code> is an asynchronous operation. In response to
// <code>CreateEvaluation</code>, Amazon Machine Learning (Amazon ML) immediately
// returns and sets the evaluation status to <code>PENDING</code>. After the
// <code>Evaluation</code> is created and ready for use, Amazon ML sets the status
// to <code>COMPLETED</code>. </p> <p>You can use the <code>GetEvaluation</code>
// operation to check progress of the evaluation during the creation operation.</p>
func (c *Client) CreateEvaluation(ctx context.Context, params *CreateEvaluationInput, optFns ...func(*Options)) (*CreateEvaluationOutput, error) {
	if params == nil {
		params = &CreateEvaluationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateEvaluation", params, optFns, addOperationCreateEvaluationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateEvaluationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateEvaluationInput struct {

	// The ID of the DataSource for the evaluation. The schema of the DataSource must
	// match the schema used to create the MLModel.
	//
	// This member is required.
	EvaluationDataSourceId *string

	// A user-supplied ID that uniquely identifies the Evaluation.
	//
	// This member is required.
	EvaluationId *string

	// The ID of the MLModel to evaluate. The schema used in creating the MLModel must
	// match the schema of the DataSource used in the Evaluation.
	//
	// This member is required.
	MLModelId *string

	// A user-supplied name or description of the Evaluation.
	EvaluationName *string
}

// Represents the output of a CreateEvaluation operation, and is an acknowledgement
// that Amazon ML received the request. CreateEvaluation operation is asynchronous.
// You can poll for status updates by using the GetEvcaluation operation and
// checking the Status parameter.
type CreateEvaluationOutput struct {

	// The user-supplied ID that uniquely identifies the Evaluation. This value should
	// be identical to the value of the EvaluationId in the request.
	EvaluationId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationCreateEvaluationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateEvaluation{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateEvaluation{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateEvaluationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateEvaluation(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opCreateEvaluation(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "machinelearning",
		OperationName: "CreateEvaluation",
	}
}
