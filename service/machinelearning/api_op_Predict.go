// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package machinelearning

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/machinelearning/types"
)

const opPredict = "Predict"

// PredictRequest returns a request value for making API operation for
// Amazon Machine Learning.
//
// Generates a prediction for the observation using the specified ML Model.
//  Note
// Not all response parameters will be populated. Whether a response parameter
// is populated depends on the type of model requested.
//
//    // Example sending a request using PredictRequest.
//    req := client.PredictRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) PredictRequest(input *types.PredictInput) PredictRequest {
	op := &aws.Operation{
		Name:       opPredict,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PredictInput{}
	}

	req := c.newRequest(op, input, &types.PredictOutput{})
	return PredictRequest{Request: req, Input: input, Copy: c.PredictRequest}
}

// PredictRequest is the request type for the
// Predict API operation.
type PredictRequest struct {
	*aws.Request
	Input *types.PredictInput
	Copy  func(*types.PredictInput) PredictRequest
}

// Send marshals and sends the Predict API request.
func (r PredictRequest) Send(ctx context.Context) (*PredictResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PredictResponse{
		PredictOutput: r.Request.Data.(*types.PredictOutput),
		response:      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PredictResponse is the response type for the
// Predict API operation.
type PredictResponse struct {
	*types.PredictOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// Predict request.
func (r *PredictResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
