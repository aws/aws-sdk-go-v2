// Code generated by smithy-go-codegen DO NOT EDIT.

package machinelearning

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/machinelearning/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a DataSource object from an  Amazon Relational Database Service
// (http://aws.amazon.com/rds/) (Amazon RDS). A DataSource references data that can
// be used to perform CreateMLModel, CreateEvaluation, or CreateBatchPrediction
// operations.  <p> <code>CreateDataSourceFromRDS</code> is an asynchronous
// operation. In response to <code>CreateDataSourceFromRDS</code>, Amazon Machine
// Learning (Amazon ML) immediately returns and sets the <code>DataSource</code>
// status to <code>PENDING</code>. After the <code>DataSource</code> is created and
// ready for use, Amazon ML sets the <code>Status</code> parameter to
// <code>COMPLETED</code>. <code>DataSource</code> in the <code>COMPLETED</code> or
// <code>PENDING</code> state can be used only to perform
// <code>>CreateMLModel</code>>, <code>CreateEvaluation</code>, or
// <code>CreateBatchPrediction</code> operations. </p> <p> If Amazon ML cannot
// accept the input source, it sets the <code>Status</code> parameter to
// <code>FAILED</code> and includes an error message in the <code>Message</code>
// attribute of the <code>GetDataSource</code> operation response. </p>
func (c *Client) CreateDataSourceFromRDS(ctx context.Context, params *CreateDataSourceFromRDSInput, optFns ...func(*Options)) (*CreateDataSourceFromRDSOutput, error) {
	stack := middleware.NewStack("CreateDataSourceFromRDS", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateDataSourceFromRDSMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateDataSourceFromRDSValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateDataSourceFromRDS(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateDataSourceFromRDS",
			Err:           err,
		}
	}
	out := result.(*CreateDataSourceFromRDSOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateDataSourceFromRDSInput struct {
	// A user-supplied ID that uniquely identifies the DataSource. Typically, an Amazon
	// Resource Number (ARN) becomes the ID for a DataSource.
	DataSourceId *string
	// The compute statistics for a DataSource. The statistics are generated from the
	// observation data referenced by a DataSource. Amazon ML uses the statistics
	// internally during MLModel training. This parameter must be set to true if the
	// DataSource needs to be used for MLModel training.
	ComputeStatistics *bool
	// The role that Amazon ML assumes on behalf of the user to create and activate a
	// data pipeline in the user's account and copy data using the SelectSqlQuery query
	// from Amazon RDS to Amazon S3.
	RoleARN *string
	// The data specification of an Amazon RDS DataSource:
	//
	//     * DatabaseInformation
	// -
	//
	//         * DatabaseName - The name of the Amazon RDS database.
	//
	//         *
	// InstanceIdentifier  - A unique identifier for the Amazon RDS database
	// instance.
	//
	//     * DatabaseCredentials - AWS Identity and Access Management (IAM)
	// credentials that are used to connect to the Amazon RDS database.
	//
	//     *
	// ResourceRole - A role (DataPipelineDefaultResourceRole) assumed by an EC2
	// instance to carry out the copy task from Amazon RDS to Amazon Simple Storage
	// Service (Amazon S3). For more information, see Role templates
	// (https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html)
	// for data pipelines.
	//
	//     * ServiceRole - A role (DataPipelineDefaultRole)
	// assumed by the AWS Data Pipeline service to monitor the progress of the copy
	// task from Amazon RDS to Amazon S3. For more information, see Role templates
	// (https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html)
	// for data pipelines.
	//
	//     * SecurityInfo - The security information to use to
	// access an RDS DB instance. You need to set up appropriate ingress rules for the
	// security entity IDs provided to allow access to the Amazon RDS instance. Specify
	// a [SubnetId, SecurityGroupIds] pair for a VPC-based RDS DB instance.
	//
	//     *
	// SelectSqlQuery - A query that is used to retrieve the observation data for the
	// Datasource.
	//
	//     * S3StagingLocation - The Amazon S3 location for staging Amazon
	// RDS data. The data retrieved from Amazon RDS using SelectSqlQuery is stored in
	// this location.
	//
	//     * DataSchemaUri - The Amazon S3 location of the
	// DataSchema.
	//
	//     * DataSchema - A JSON string representing the schema. This is
	// not required if DataSchemaUri is specified.
	//
	//     * DataRearrangement - A JSON
	// string that represents the splitting and rearrangement requirements for the
	// Datasource. Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"
	RDSData *types.RDSDataSpec
	// A user-supplied name or description of the DataSource.
	DataSourceName *string
}

// Represents the output of a CreateDataSourceFromRDS operation, and is an
// acknowledgement that Amazon ML received the request. The
// CreateDataSourceFromRDS> operation is asynchronous. You can poll for updates by
// using the GetBatchPrediction operation and checking the Status parameter. You
// can inspect the Message when Status shows up as FAILED. You can also check the
// progress of the copy operation by going to the DataPipeline console and looking
// up the pipeline using the pipelineId  from the describe call.
type CreateDataSourceFromRDSOutput struct {
	// A user-supplied ID that uniquely identifies the datasource. This value should be
	// identical to the value of the DataSourceID in the request.
	DataSourceId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateDataSourceFromRDSMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateDataSourceFromRDS{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateDataSourceFromRDS{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateDataSourceFromRDS(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "machinelearning",
		OperationName: "CreateDataSourceFromRDS",
	}
}
