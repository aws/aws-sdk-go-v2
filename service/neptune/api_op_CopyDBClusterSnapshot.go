// Code generated by smithy-go-codegen DO NOT EDIT.

package neptune

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/neptune/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Copies a snapshot of a DB cluster. To copy a DB cluster snapshot from a shared
// manual DB cluster snapshot, SourceDBClusterSnapshotIdentifier must be the Amazon
// Resource Name (ARN) of the shared DB cluster snapshot.
func (c *Client) CopyDBClusterSnapshot(ctx context.Context, params *CopyDBClusterSnapshotInput, optFns ...func(*Options)) (*CopyDBClusterSnapshotOutput, error) {
	stack := middleware.NewStack("CopyDBClusterSnapshot", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCopyDBClusterSnapshotMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCopyDBClusterSnapshotValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCopyDBClusterSnapshot(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CopyDBClusterSnapshot",
			Err:           err,
		}
	}
	out := result.(*CopyDBClusterSnapshotOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CopyDBClusterSnapshotInput struct {
	// The tags to assign to the new DB cluster snapshot copy.
	Tags []*types.Tag
	// True to copy all tags from the source DB cluster snapshot to the target DB
	// cluster snapshot, and otherwise false. The default is false.
	CopyTags *bool
	// The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is
	// the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the
	// KMS encryption key.  <p>If you copy an encrypted DB cluster snapshot from your
	// AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the
	// copy with a new KMS encryption key. If you don't specify a value for
	// <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted
	// with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an
	// encrypted DB cluster snapshot that is shared from another AWS account, then you
	// must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are
	// specific to the AWS Region that they are created in, and you can't use
	// encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot
	// encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy
	// an unencrypted DB cluster snapshot and specify a value for the KmsKeyId
	// parameter, an error is returned.</p>
	KmsKeyId *string
	// The identifier of the DB cluster snapshot to copy. This parameter is not
	// case-sensitive. You can't copy from one AWS Region to another. Constraints:
	//
	//
	// * Must specify a valid system snapshot in the "available" state.
	//
	//     * Specify
	// a valid DB snapshot identifier.
	//
	// Example: my-cluster-snapshot1
	SourceDBClusterSnapshotIdentifier *string
	// Not currently supported.
	PreSignedUrl *string
	// The identifier of the new DB cluster snapshot to create from the source DB
	// cluster snapshot. This parameter is not case-sensitive. Constraints:
	//
	//     * Must
	// contain from 1 to 63 letters, numbers, or hyphens.
	//
	//     * First character must
	// be a letter.
	//
	//     * Cannot end with a hyphen or contain two consecutive
	// hyphens.
	//
	// Example: my-cluster-snapshot2
	TargetDBClusterSnapshotIdentifier *string
}

type CopyDBClusterSnapshotOutput struct {
	// Contains the details for an Amazon Neptune DB cluster snapshot This data type is
	// used as a response element in the DescribeDBClusterSnapshots () action.
	DBClusterSnapshot *types.DBClusterSnapshot

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCopyDBClusterSnapshotMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCopyDBClusterSnapshot{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCopyDBClusterSnapshot{}, middleware.After)
}

func newServiceMetadataMiddleware_opCopyDBClusterSnapshot(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "CopyDBClusterSnapshot",
	}
}
