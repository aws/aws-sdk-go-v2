// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package codestariface provides an interface to enable mocking the AWS CodeStar service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package codestariface

import (
	"github.com/aws/aws-sdk-go-v2/service/codestar"
	"github.com/aws/aws-sdk-go-v2/service/codestar/types"
)

// ClientAPI provides an interface to enable mocking the
// codestar.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // CodeStar.
//    func myFunc(svc codestariface.ClientAPI) bool {
//        // Make svc.AssociateTeamMember request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := codestar.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        codestariface.ClientPI
//    }
//    func (m *mockClientClient) AssociateTeamMember(input *types.AssociateTeamMemberInput) (*types.AssociateTeamMemberOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	AssociateTeamMemberRequest(*types.AssociateTeamMemberInput) codestar.AssociateTeamMemberRequest

	CreateProjectRequest(*types.CreateProjectInput) codestar.CreateProjectRequest

	CreateUserProfileRequest(*types.CreateUserProfileInput) codestar.CreateUserProfileRequest

	DeleteProjectRequest(*types.DeleteProjectInput) codestar.DeleteProjectRequest

	DeleteUserProfileRequest(*types.DeleteUserProfileInput) codestar.DeleteUserProfileRequest

	DescribeProjectRequest(*types.DescribeProjectInput) codestar.DescribeProjectRequest

	DescribeUserProfileRequest(*types.DescribeUserProfileInput) codestar.DescribeUserProfileRequest

	DisassociateTeamMemberRequest(*types.DisassociateTeamMemberInput) codestar.DisassociateTeamMemberRequest

	ListProjectsRequest(*types.ListProjectsInput) codestar.ListProjectsRequest

	ListResourcesRequest(*types.ListResourcesInput) codestar.ListResourcesRequest

	ListTagsForProjectRequest(*types.ListTagsForProjectInput) codestar.ListTagsForProjectRequest

	ListTeamMembersRequest(*types.ListTeamMembersInput) codestar.ListTeamMembersRequest

	ListUserProfilesRequest(*types.ListUserProfilesInput) codestar.ListUserProfilesRequest

	TagProjectRequest(*types.TagProjectInput) codestar.TagProjectRequest

	UntagProjectRequest(*types.UntagProjectInput) codestar.UntagProjectRequest

	UpdateProjectRequest(*types.UpdateProjectInput) codestar.UpdateProjectRequest

	UpdateTeamMemberRequest(*types.UpdateTeamMemberInput) codestar.UpdateTeamMemberRequest

	UpdateUserProfileRequest(*types.UpdateUserProfileInput) codestar.UpdateUserProfileRequest
}

var _ ClientAPI = (*codestar.Client)(nil)
