// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// Another modification is being made. That modification must complete before you
// can make your change.
type ConcurrentModificationException struct {
	Message *string
}

func (e *ConcurrentModificationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConcurrentModificationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConcurrentModificationException) ErrorCode() string {
	return "ConcurrentModificationException"
}
func (e *ConcurrentModificationException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *ConcurrentModificationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConcurrentModificationException) HasMessage() bool {
	return e.Message != nil
}

// The next token is not valid.
type InvalidNextTokenException struct {
	Message *string
}

func (e *InvalidNextTokenException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidNextTokenException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidNextTokenException) ErrorCode() string             { return "InvalidNextTokenException" }
func (e *InvalidNextTokenException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidNextTokenException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidNextTokenException) HasMessage() bool {
	return e.Message != nil
}

// The service role is not valid.
type InvalidServiceRoleException struct {
	Message *string
}

func (e *InvalidServiceRoleException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidServiceRoleException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidServiceRoleException) ErrorCode() string             { return "InvalidServiceRoleException" }
func (e *InvalidServiceRoleException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidServiceRoleException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidServiceRoleException) HasMessage() bool {
	return e.Message != nil
}

// A resource limit has been exceeded.
type LimitExceededException struct {
	Message *string
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string             { return "LimitExceededException" }
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *LimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *LimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// An AWS CodeStar project with the same ID already exists in this region for the
// AWS account. AWS CodeStar project IDs must be unique within a region for the AWS
// account.
type ProjectAlreadyExistsException struct {
	Message *string
}

func (e *ProjectAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ProjectAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ProjectAlreadyExistsException) ErrorCode() string             { return "ProjectAlreadyExistsException" }
func (e *ProjectAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ProjectAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ProjectAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// Project configuration information is required but not specified.
type ProjectConfigurationException struct {
	Message *string
}

func (e *ProjectConfigurationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ProjectConfigurationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ProjectConfigurationException) ErrorCode() string             { return "ProjectConfigurationException" }
func (e *ProjectConfigurationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ProjectConfigurationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ProjectConfigurationException) HasMessage() bool {
	return e.Message != nil
}

// The project creation request was valid, but a nonspecific exception or error
// occurred during project creation. The project could not be created in AWS
// CodeStar.
type ProjectCreationFailedException struct {
	Message *string
}

func (e *ProjectCreationFailedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ProjectCreationFailedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ProjectCreationFailedException) ErrorCode() string             { return "ProjectCreationFailedException" }
func (e *ProjectCreationFailedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ProjectCreationFailedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ProjectCreationFailedException) HasMessage() bool {
	return e.Message != nil
}

// The specified AWS CodeStar project was not found.
type ProjectNotFoundException struct {
	Message *string
}

func (e *ProjectNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ProjectNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ProjectNotFoundException) ErrorCode() string             { return "ProjectNotFoundException" }
func (e *ProjectNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ProjectNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ProjectNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The team member is already associated with a role in this project.
type TeamMemberAlreadyAssociatedException struct {
	Message *string
}

func (e *TeamMemberAlreadyAssociatedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TeamMemberAlreadyAssociatedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TeamMemberAlreadyAssociatedException) ErrorCode() string {
	return "TeamMemberAlreadyAssociatedException"
}
func (e *TeamMemberAlreadyAssociatedException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *TeamMemberAlreadyAssociatedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TeamMemberAlreadyAssociatedException) HasMessage() bool {
	return e.Message != nil
}

// The specified team member was not found.
type TeamMemberNotFoundException struct {
	Message *string
}

func (e *TeamMemberNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TeamMemberNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TeamMemberNotFoundException) ErrorCode() string             { return "TeamMemberNotFoundException" }
func (e *TeamMemberNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *TeamMemberNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *TeamMemberNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// A user profile with that name already exists in this region for the AWS account.
// AWS CodeStar user profile names must be unique within a region for the AWS
// account.
type UserProfileAlreadyExistsException struct {
	Message *string
}

func (e *UserProfileAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *UserProfileAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *UserProfileAlreadyExistsException) ErrorCode() string {
	return "UserProfileAlreadyExistsException"
}
func (e *UserProfileAlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *UserProfileAlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *UserProfileAlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// The user profile was not found.
type UserProfileNotFoundException struct {
	Message *string
}

func (e *UserProfileNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *UserProfileNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *UserProfileNotFoundException) ErrorCode() string             { return "UserProfileNotFoundException" }
func (e *UserProfileNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *UserProfileNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *UserProfileNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The specified input is either not valid, or it could not be validated.
type ValidationException struct {
	Message *string
}

func (e *ValidationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ValidationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ValidationException) ErrorCode() string             { return "ValidationException" }
func (e *ValidationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ValidationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ValidationException) HasMessage() bool {
	return e.Message != nil
}
