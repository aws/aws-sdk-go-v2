// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cognitoidentity

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity/types"
)

const opMergeDeveloperIdentities = "MergeDeveloperIdentities"

// MergeDeveloperIdentitiesRequest returns a request value for making API operation for
// Amazon Cognito Identity.
//
// Merges two users having different IdentityIds, existing in the same identity
// pool, and identified by the same developer provider. You can use this action
// to request that discrete users be merged and identified as a single user
// in the Cognito environment. Cognito associates the given source user (SourceUserIdentifier)
// with the IdentityId of the DestinationUserIdentifier. Only developer-authenticated
// users can be merged. If the users to be merged are associated with the same
// public provider, but as two different users, an exception will be thrown.
//
// The number of linked logins is limited to 20. So, the number of linked logins
// for the source user, SourceUserIdentifier, and the destination user, DestinationUserIdentifier,
// together should not be larger than 20. Otherwise, an exception will be thrown.
//
// You must use AWS Developer credentials to call this API.
//
//    // Example sending a request using MergeDeveloperIdentitiesRequest.
//    req := client.MergeDeveloperIdentitiesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cognito-identity-2014-06-30/MergeDeveloperIdentities
func (c *Client) MergeDeveloperIdentitiesRequest(input *types.MergeDeveloperIdentitiesInput) MergeDeveloperIdentitiesRequest {
	op := &aws.Operation{
		Name:       opMergeDeveloperIdentities,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.MergeDeveloperIdentitiesInput{}
	}

	req := c.newRequest(op, input, &types.MergeDeveloperIdentitiesOutput{})
	return MergeDeveloperIdentitiesRequest{Request: req, Input: input, Copy: c.MergeDeveloperIdentitiesRequest}
}

// MergeDeveloperIdentitiesRequest is the request type for the
// MergeDeveloperIdentities API operation.
type MergeDeveloperIdentitiesRequest struct {
	*aws.Request
	Input *types.MergeDeveloperIdentitiesInput
	Copy  func(*types.MergeDeveloperIdentitiesInput) MergeDeveloperIdentitiesRequest
}

// Send marshals and sends the MergeDeveloperIdentities API request.
func (r MergeDeveloperIdentitiesRequest) Send(ctx context.Context) (*MergeDeveloperIdentitiesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &MergeDeveloperIdentitiesResponse{
		MergeDeveloperIdentitiesOutput: r.Request.Data.(*types.MergeDeveloperIdentitiesOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// MergeDeveloperIdentitiesResponse is the response type for the
// MergeDeveloperIdentities API operation.
type MergeDeveloperIdentitiesResponse struct {
	*types.MergeDeveloperIdentitiesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// MergeDeveloperIdentities request.
func (r *MergeDeveloperIdentitiesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
