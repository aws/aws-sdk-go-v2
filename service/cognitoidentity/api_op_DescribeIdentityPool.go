// Code generated by smithy-go-codegen DO NOT EDIT.

package cognitoidentity

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets details about a particular identity pool, including the pool name, ID
// description, creation date, and current number of users. You must use AWS
// Developer credentials to call this API.
func (c *Client) DescribeIdentityPool(ctx context.Context, params *DescribeIdentityPoolInput, optFns ...func(*Options)) (*DescribeIdentityPoolOutput, error) {
	stack := middleware.NewStack("DescribeIdentityPool", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeIdentityPoolMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeIdentityPoolValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeIdentityPool(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeIdentityPool",
			Err:           err,
		}
	}
	out := result.(*DescribeIdentityPoolOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Input to the DescribeIdentityPool action.
type DescribeIdentityPoolInput struct {
	// An identity pool ID in the format REGION:GUID.
	IdentityPoolId *string
}

// An object representing an Amazon Cognito identity pool.
type DescribeIdentityPoolOutput struct {
	// Enables or disables the Basic (Classic) authentication flow. For more
	// information, see Identity Pools (Federated Identities) Authentication Flow
	// (https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html)
	// in the Amazon Cognito Developer Guide.
	AllowClassicFlow *bool
	// A list representing an Amazon Cognito user pool and its client ID.
	CognitoIdentityProviders []*types.CognitoIdentityProvider
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
	// pool.
	SamlProviderARNs []*string
	// A list of OpendID Connect provider ARNs.
	OpenIdConnectProviderARNs []*string
	// The tags that are assigned to the identity pool. A tag is a label that you can
	// apply to identity pools to categorize and manage them in different ways, such as
	// by purpose, owner, environment, or other criteria.
	IdentityPoolTags map[string]*string
	// An identity pool ID in the format REGION:GUID.
	IdentityPoolId *string
	// The "domain" by which Cognito will refer to your users.
	DeveloperProviderName *string
	// A string that you provide.
	IdentityPoolName *string
	// Optional key:value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders map[string]*string
	// TRUE if the identity pool supports unauthenticated logins.
	AllowUnauthenticatedIdentities *bool

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeIdentityPoolMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeIdentityPool{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeIdentityPool{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeIdentityPool(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cognito-identity",
		OperationName: "DescribeIdentityPool",
	}
}
