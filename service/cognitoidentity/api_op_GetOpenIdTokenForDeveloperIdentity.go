// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cognitoidentity

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity/types"
)

const opGetOpenIdTokenForDeveloperIdentity = "GetOpenIdTokenForDeveloperIdentity"

// GetOpenIdTokenForDeveloperIdentityRequest returns a request value for making API operation for
// Amazon Cognito Identity.
//
// Registers (or retrieves) a Cognito IdentityId and an OpenID Connect token
// for a user authenticated by your backend authentication process. Supplying
// multiple logins will create an implicit linked account. You can only specify
// one developer provider as part of the Logins map, which is linked to the
// identity pool. The developer provider is the "domain" by which Cognito will
// refer to your users.
//
// You can use GetOpenIdTokenForDeveloperIdentity to create a new identity and
// to link new logins (that is, user credentials issued by a public provider
// or developer provider) to an existing identity. When you want to create a
// new identity, the IdentityId should be null. When you want to associate a
// new login with an existing authenticated/unauthenticated identity, you can
// do so by providing the existing IdentityId. This API will create the identity
// in the specified IdentityPoolId.
//
// You must use AWS Developer credentials to call this API.
//
//    // Example sending a request using GetOpenIdTokenForDeveloperIdentityRequest.
//    req := client.GetOpenIdTokenForDeveloperIdentityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cognito-identity-2014-06-30/GetOpenIdTokenForDeveloperIdentity
func (c *Client) GetOpenIdTokenForDeveloperIdentityRequest(input *types.GetOpenIdTokenForDeveloperIdentityInput) GetOpenIdTokenForDeveloperIdentityRequest {
	op := &aws.Operation{
		Name:       opGetOpenIdTokenForDeveloperIdentity,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.GetOpenIdTokenForDeveloperIdentityInput{}
	}

	req := c.newRequest(op, input, &types.GetOpenIdTokenForDeveloperIdentityOutput{})
	return GetOpenIdTokenForDeveloperIdentityRequest{Request: req, Input: input, Copy: c.GetOpenIdTokenForDeveloperIdentityRequest}
}

// GetOpenIdTokenForDeveloperIdentityRequest is the request type for the
// GetOpenIdTokenForDeveloperIdentity API operation.
type GetOpenIdTokenForDeveloperIdentityRequest struct {
	*aws.Request
	Input *types.GetOpenIdTokenForDeveloperIdentityInput
	Copy  func(*types.GetOpenIdTokenForDeveloperIdentityInput) GetOpenIdTokenForDeveloperIdentityRequest
}

// Send marshals and sends the GetOpenIdTokenForDeveloperIdentity API request.
func (r GetOpenIdTokenForDeveloperIdentityRequest) Send(ctx context.Context) (*GetOpenIdTokenForDeveloperIdentityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetOpenIdTokenForDeveloperIdentityResponse{
		GetOpenIdTokenForDeveloperIdentityOutput: r.Request.Data.(*types.GetOpenIdTokenForDeveloperIdentityOutput),
		response:                                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetOpenIdTokenForDeveloperIdentityResponse is the response type for the
// GetOpenIdTokenForDeveloperIdentity API operation.
type GetOpenIdTokenForDeveloperIdentityResponse struct {
	*types.GetOpenIdTokenForDeveloperIdentityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetOpenIdTokenForDeveloperIdentity request.
func (r *GetOpenIdTokenForDeveloperIdentityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
