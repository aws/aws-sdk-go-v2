// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cognitoidentity

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity/types"
)

const opLookupDeveloperIdentity = "LookupDeveloperIdentity"

// LookupDeveloperIdentityRequest returns a request value for making API operation for
// Amazon Cognito Identity.
//
// Retrieves the IdentityID associated with a DeveloperUserIdentifier or the
// list of DeveloperUserIdentifier values associated with an IdentityId for
// an existing identity. Either IdentityID or DeveloperUserIdentifier must not
// be null. If you supply only one of these values, the other value will be
// searched in the database and returned as a part of the response. If you supply
// both, DeveloperUserIdentifier will be matched against IdentityID. If the
// values are verified against the database, the response returns both values
// and is the same as the request. Otherwise a ResourceConflictException is
// thrown.
//
// LookupDeveloperIdentity is intended for low-throughput control plane operations:
// for example, to enable customer service to locate an identity ID by username.
// If you are using it for higher-volume operations such as user authentication,
// your requests are likely to be throttled. GetOpenIdTokenForDeveloperIdentity
// is a better option for higher-volume operations for user authentication.
//
// You must use AWS Developer credentials to call this API.
//
//    // Example sending a request using LookupDeveloperIdentityRequest.
//    req := client.LookupDeveloperIdentityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cognito-identity-2014-06-30/LookupDeveloperIdentity
func (c *Client) LookupDeveloperIdentityRequest(input *types.LookupDeveloperIdentityInput) LookupDeveloperIdentityRequest {
	op := &aws.Operation{
		Name:       opLookupDeveloperIdentity,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.LookupDeveloperIdentityInput{}
	}

	req := c.newRequest(op, input, &types.LookupDeveloperIdentityOutput{})
	return LookupDeveloperIdentityRequest{Request: req, Input: input, Copy: c.LookupDeveloperIdentityRequest}
}

// LookupDeveloperIdentityRequest is the request type for the
// LookupDeveloperIdentity API operation.
type LookupDeveloperIdentityRequest struct {
	*aws.Request
	Input *types.LookupDeveloperIdentityInput
	Copy  func(*types.LookupDeveloperIdentityInput) LookupDeveloperIdentityRequest
}

// Send marshals and sends the LookupDeveloperIdentity API request.
func (r LookupDeveloperIdentityRequest) Send(ctx context.Context) (*LookupDeveloperIdentityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &LookupDeveloperIdentityResponse{
		LookupDeveloperIdentityOutput: r.Request.Data.(*types.LookupDeveloperIdentityOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// LookupDeveloperIdentityResponse is the response type for the
// LookupDeveloperIdentity API operation.
type LookupDeveloperIdentityResponse struct {
	*types.LookupDeveloperIdentityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// LookupDeveloperIdentity request.
func (r *LookupDeveloperIdentityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
