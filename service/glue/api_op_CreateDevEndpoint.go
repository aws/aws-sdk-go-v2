// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Creates a new development endpoint.
func (c *Client) CreateDevEndpoint(ctx context.Context, params *CreateDevEndpointInput, optFns ...func(*Options)) (*CreateDevEndpointOutput, error) {
	stack := middleware.NewStack("CreateDevEndpoint", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateDevEndpointMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateDevEndpointValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateDevEndpoint(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateDevEndpoint",
			Err:           err,
		}
	}
	out := result.(*CreateDevEndpointOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateDevEndpointInput struct {
	// The subnet ID for the new DevEndpoint to use.
	SubnetId *string
	// The name of the SecurityConfiguration structure to be used with this
	// DevEndpoint.
	SecurityConfiguration *string
	// The public key to be used by this DevEndpoint for authentication. This attribute
	// is provided for backward compatibility because the recommended attribute to use
	// is public keys.
	PublicKey *string
	// The name to be assigned to the new DevEndpoint.
	EndpointName *string
	// A list of public keys to be used by the development endpoints for
	// authentication. The use of this attribute is preferred over a single public key
	// because the public keys allow you to have a different private key per client.
	// <note> <p>If you previously created an endpoint with a public key, you must
	// remove that key to be able to set a list of public keys. Call the
	// <code>UpdateDevEndpoint</code> API with the public key content in the
	// <code>deletePublicKeys</code> attribute, and the list of new keys in the
	// <code>addPublicKeys</code> attribute.</p> </note>
	PublicKeys []*string
	// The IAM role for the DevEndpoint.
	RoleArn *string
	// The number of AWS Glue Data Processing Units (DPUs) to allocate to this
	// DevEndpoint.
	NumberOfNodes *int32
	// Security group IDs for the security groups to be used by the new DevEndpoint.
	SecurityGroupIds []*string
	// The tags to use with this DevEndpoint. You may use tags to limit access to the
	// DevEndpoint. For more information about tags in AWS Glue, see AWS Tags in AWS
	// Glue (https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the
	// developer guide.
	Tags map[string]*string
	// A map of arguments used to configure the DevEndpoint.
	Arguments map[string]*string
	// Glue version determines the versions of Apache Spark and Python that AWS Glue
	// supports. The Python version indicates the version supported for running your
	// ETL scripts on development endpoints.  <p>For more information about the
	// available AWS Glue versions and corresponding Spark and Python versions, see <a
	// href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a>
	// in the developer guide.</p> <p>Development endpoints that are created without
	// specifying a Glue version default to Glue 0.9.</p> <p>You can specify a version
	// of Python support for development endpoints by using the <code>Arguments</code>
	// parameter in the <code>CreateDevEndpoint</code> or
	// <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version
	// defaults to Python 2.</p>
	GlueVersion *string
	// The paths to one or more Python libraries in an Amazon S3 bucket that should be
	// loaded in your DevEndpoint. Multiple values must be complete paths separated by
	// a comma. You can only use pure Python libraries with a DevEndpoint. Libraries
	// that rely on C extensions, such as the pandas (http://pandas.pydata.org/) Python
	// data analysis library, are not yet supported.
	ExtraPythonLibsS3Path *string
	// The type of predefined worker that is allocated to the development endpoint.
	// Accepts a value of Standard, G.1X, or G.2X.
	//
	//     * For the Standard worker type,
	// each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors
	// per worker.
	//
	//     * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU,
	// 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend
	// this worker type for memory-intensive jobs.
	//
	//     * For the G.2X worker type,
	// each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1
	// executor per worker. We recommend this worker type for memory-intensive
	// jobs.
	//
	// Known issue: when a development endpoint is created with the
	// G.2XWorkerType configuration, the Spark drivers for the development endpoint
	// will run on 4 vCPU, 16 GB of memory, and a 64 GB disk.
	WorkerType types.WorkerType
	// The path to one or more Java .jar files in an S3 bucket that should be loaded in
	// your DevEndpoint.
	ExtraJarsS3Path *string
	// The number of workers of a defined workerType that are allocated to the
	// development endpoint.  <p>The maximum number of workers you can define are 299
	// for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>
	NumberOfWorkers *int32
}

type CreateDevEndpointOutput struct {
	// The AWS Availability Zone where this DevEndpoint is located.
	AvailabilityZone *string
	// The number of AWS Glue Data Processing Units (DPUs) allocated to this
	// DevEndpoint.
	NumberOfNodes *int32
	// The Apache Zeppelin port for the remote Apache Spark interpreter.
	ZeppelinRemoteSparkInterpreterPort *int32
	// The reason for a current failure in this DevEndpoint.
	FailureReason *string
	// The paths to one or more Python libraries in an S3 bucket that will be loaded in
	// your DevEndpoint.
	ExtraPythonLibsS3Path *string
	// The current status of the new DevEndpoint.
	Status *string
	// The map of arguments used to configure this DevEndpoint.  <p>Valid arguments
	// are:</p> <ul> <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
	// <li> <p> <code>"GLUE_PYTHON_VERSION": "3"</code> </p> </li> <li> <p>
	// <code>"GLUE_PYTHON_VERSION": "2"</code> </p> </li> </ul> <p>You can specify a
	// version of Python support for development endpoints by using the
	// <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or
	// <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version
	// defaults to Python 2.</p>
	Arguments map[string]*string
	// The ID of the virtual private cloud (VPC) used by this DevEndpoint.
	VpcId *string
	// The point in time at which this DevEndpoint was created.
	CreatedTimestamp *time.Time
	// Glue version determines the versions of Apache Spark and Python that AWS Glue
	// supports. The Python version indicates the version supported for running your
	// ETL scripts on development endpoints.
	GlueVersion *string
	// The number of workers of a defined workerType that are allocated to the
	// development endpoint.
	NumberOfWorkers *int32
	// Path to one or more Java .jar files in an S3 bucket that will be loaded in your
	// DevEndpoint.
	ExtraJarsS3Path *string
	// The name of the SecurityConfiguration structure being used with this
	// DevEndpoint.
	SecurityConfiguration *string
	// The address of the YARN endpoint used by this DevEndpoint.
	YarnEndpointAddress *string
	// The type of predefined worker that is allocated to the development endpoint. May
	// be a value of Standard, G.1X, or G.2X.
	WorkerType types.WorkerType
	// The name assigned to the new DevEndpoint.
	EndpointName *string
	// The Amazon Resource Name (ARN) of the role assigned to the new DevEndpoint.
	RoleArn *string
	// The subnet ID assigned to the new DevEndpoint.
	SubnetId *string
	// The security groups assigned to the new DevEndpoint.
	SecurityGroupIds []*string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateDevEndpointMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateDevEndpoint{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateDevEndpoint{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateDevEndpoint(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "glue",
		OperationName: "CreateDevEndpoint",
	}
}
