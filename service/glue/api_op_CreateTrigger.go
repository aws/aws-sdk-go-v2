// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glue

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
)

const opCreateTrigger = "CreateTrigger"

// CreateTriggerRequest returns a request value for making API operation for
// AWS Glue.
//
// Creates a new trigger.
//
//    // Example sending a request using CreateTriggerRequest.
//    req := client.CreateTriggerRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/glue-2017-03-31/CreateTrigger
func (c *Client) CreateTriggerRequest(input *types.CreateTriggerInput) CreateTriggerRequest {
	op := &aws.Operation{
		Name:       opCreateTrigger,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateTriggerInput{}
	}

	req := c.newRequest(op, input, &types.CreateTriggerOutput{})
	return CreateTriggerRequest{Request: req, Input: input, Copy: c.CreateTriggerRequest}
}

// CreateTriggerRequest is the request type for the
// CreateTrigger API operation.
type CreateTriggerRequest struct {
	*aws.Request
	Input *types.CreateTriggerInput
	Copy  func(*types.CreateTriggerInput) CreateTriggerRequest
}

// Send marshals and sends the CreateTrigger API request.
func (r CreateTriggerRequest) Send(ctx context.Context) (*CreateTriggerResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateTriggerResponse{
		CreateTriggerOutput: r.Request.Data.(*types.CreateTriggerOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateTriggerResponse is the response type for the
// CreateTrigger API operation.
type CreateTriggerResponse struct {
	*types.CreateTriggerOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateTrigger request.
func (r *CreateTriggerResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
