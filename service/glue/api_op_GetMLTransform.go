// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Gets an AWS Glue machine learning transform artifact and all its corresponding
// metadata. Machine learning transforms are a special type of transform that use
// machine learning to learn the details of the transformation to be performed by
// learning from examples provided by humans. These transformations are then saved
// by AWS Glue. You can retrieve their metadata by calling GetMLTransform.
func (c *Client) GetMLTransform(ctx context.Context, params *GetMLTransformInput, optFns ...func(*Options)) (*GetMLTransformOutput, error) {
	stack := middleware.NewStack("GetMLTransform", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetMLTransformMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetMLTransformValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetMLTransform(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetMLTransform",
			Err:           err,
		}
	}
	out := result.(*GetMLTransformOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetMLTransformInput struct {
	// The unique identifier of the transform, generated at the time that the transform
	// was created.
	TransformId *string
}

type GetMLTransformOutput struct {
	// The unique name given to the transform when it was created.
	Name *string
	// The date and time when the transform was last modified.
	LastModifiedOn *time.Time
	// The number of labels available for this transform.
	LabelCount *int32
	// The date and time when the transform was created.
	CreatedOn *time.Time
	// The configuration parameters that are specific to the algorithm used.
	Parameters *types.TransformParameters
	// The maximum number of times to retry a task for this transform after a task run
	// fails.
	MaxRetries *int32
	// The last known status of the transform (to indicate whether it can be used or
	// not). One of "NOT_READY", "READY", or "DELETING".
	Status types.TransformStatusType
	// The type of predefined worker that is allocated when this task runs. Accepts a
	// value of Standard, G.1X, or G.2X.
	//
	//     * For the Standard worker type, each
	// worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per
	// worker.
	//
	//     * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of
	// memory and a 64GB disk, and 1 executor per worker.
	//
	//     * For the G.2X worker
	// type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1
	// executor per worker.
	WorkerType types.WorkerType
	// This value determines which version of AWS Glue this machine learning transform
	// is compatible with. Glue 1.0 is recommended for most customers. If the value is
	// not set, the Glue compatibility defaults to Glue 0.9. For more information, see
	// AWS Glue Versions
	// (https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions)
	// in the developer guide.
	GlueVersion *string
	// The number of AWS Glue data processing units (DPUs) that are allocated to task
	// runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10.
	// A DPU is a relative measure of processing power that consists of 4 vCPUs of
	// compute capacity and 16 GB of memory. For more information, see the AWS Glue
	// pricing page (https://aws.amazon.com/glue/pricing/).  <p>When the
	// <code>WorkerType</code> field is set to a value other than
	// <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically
	// and becomes read-only.</p>
	MaxCapacity *float64
	// A description of the transform.
	Description *string
	// The unique identifier of the transform, generated at the time that the transform
	// was created.
	TransformId *string
	// A list of AWS Glue table definitions used by the transform.
	InputRecordTables []*types.GlueTable
	// The number of workers of a defined workerType that are allocated when this task
	// runs.
	NumberOfWorkers *int32
	// The name or Amazon Resource Name (ARN) of the IAM role with the required
	// permissions.
	Role *string
	// The timeout for a task run for this transform in minutes. This is the maximum
	// time that a task run for this transform can consume resources before it is
	// terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
	Timeout *int32
	// The Map object that represents the schema that this transform accepts. Has an
	// upper bound of 100 columns.
	Schema []*types.SchemaColumn
	// The latest evaluation metrics.
	EvaluationMetrics *types.EvaluationMetrics

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetMLTransformMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetMLTransform{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetMLTransform{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetMLTransform(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "glue",
		OperationName: "GetMLTransform",
	}
}
