// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// Access to a resource was denied.
type AccessDeniedException struct {
	Message *string
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// A resource to be created or added already exists.
type AlreadyExistsException struct {
	Message *string
}

func (e *AlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AlreadyExistsException) ErrorCode() string             { return "AlreadyExistsException" }
func (e *AlreadyExistsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AlreadyExistsException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AlreadyExistsException) HasMessage() bool {
	return e.Message != nil
}

// Two processes are trying to modify a resource simultaneously.
type ConcurrentModificationException struct {
	Message *string
}

func (e *ConcurrentModificationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConcurrentModificationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConcurrentModificationException) ErrorCode() string {
	return "ConcurrentModificationException"
}
func (e *ConcurrentModificationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConcurrentModificationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConcurrentModificationException) HasMessage() bool {
	return e.Message != nil
}

// Too many jobs are being run concurrently.
type ConcurrentRunsExceededException struct {
	Message *string
}

func (e *ConcurrentRunsExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConcurrentRunsExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConcurrentRunsExceededException) ErrorCode() string {
	return "ConcurrentRunsExceededException"
}
func (e *ConcurrentRunsExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConcurrentRunsExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConcurrentRunsExceededException) HasMessage() bool {
	return e.Message != nil
}

// A specified condition was not satisfied.
type ConditionCheckFailureException struct {
	Message *string
}

func (e *ConditionCheckFailureException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConditionCheckFailureException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConditionCheckFailureException) ErrorCode() string             { return "ConditionCheckFailureException" }
func (e *ConditionCheckFailureException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConditionCheckFailureException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConditionCheckFailureException) HasMessage() bool {
	return e.Message != nil
}

// The specified crawler is not running.
type CrawlerNotRunningException struct {
	Message *string
}

func (e *CrawlerNotRunningException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CrawlerNotRunningException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CrawlerNotRunningException) ErrorCode() string             { return "CrawlerNotRunningException" }
func (e *CrawlerNotRunningException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *CrawlerNotRunningException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CrawlerNotRunningException) HasMessage() bool {
	return e.Message != nil
}

// The operation cannot be performed because the crawler is already running.
type CrawlerRunningException struct {
	Message *string
}

func (e *CrawlerRunningException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CrawlerRunningException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CrawlerRunningException) ErrorCode() string             { return "CrawlerRunningException" }
func (e *CrawlerRunningException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *CrawlerRunningException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CrawlerRunningException) HasMessage() bool {
	return e.Message != nil
}

// The specified crawler is stopping.
type CrawlerStoppingException struct {
	Message *string
}

func (e *CrawlerStoppingException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CrawlerStoppingException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CrawlerStoppingException) ErrorCode() string             { return "CrawlerStoppingException" }
func (e *CrawlerStoppingException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *CrawlerStoppingException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CrawlerStoppingException) HasMessage() bool {
	return e.Message != nil
}

// A specified entity does not exist
type EntityNotFoundException struct {
	Message *string
}

func (e *EntityNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *EntityNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *EntityNotFoundException) ErrorCode() string             { return "EntityNotFoundException" }
func (e *EntityNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *EntityNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *EntityNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// An encryption operation failed.
type GlueEncryptionException struct {
	Message *string
}

func (e *GlueEncryptionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *GlueEncryptionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *GlueEncryptionException) ErrorCode() string             { return "GlueEncryptionException" }
func (e *GlueEncryptionException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *GlueEncryptionException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *GlueEncryptionException) HasMessage() bool {
	return e.Message != nil
}

// The same unique identifier was associated with two different records.
type IdempotentParameterMismatchException struct {
	Message *string
}

func (e *IdempotentParameterMismatchException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IdempotentParameterMismatchException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IdempotentParameterMismatchException) ErrorCode() string {
	return "IdempotentParameterMismatchException"
}
func (e *IdempotentParameterMismatchException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *IdempotentParameterMismatchException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IdempotentParameterMismatchException) HasMessage() bool {
	return e.Message != nil
}

// The workflow is in an invalid state to perform a requested operation.
type IllegalWorkflowStateException struct {
	Message *string
}

func (e *IllegalWorkflowStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IllegalWorkflowStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IllegalWorkflowStateException) ErrorCode() string             { return "IllegalWorkflowStateException" }
func (e *IllegalWorkflowStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IllegalWorkflowStateException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IllegalWorkflowStateException) HasMessage() bool {
	return e.Message != nil
}

// An internal service error occurred.
type InternalServiceException struct {
	Message *string
}

func (e *InternalServiceException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServiceException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServiceException) ErrorCode() string             { return "InternalServiceException" }
func (e *InternalServiceException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalServiceException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalServiceException) HasMessage() bool {
	return e.Message != nil
}

// The input provided was not valid.
type InvalidInputException struct {
	Message *string
}

func (e *InvalidInputException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidInputException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidInputException) ErrorCode() string             { return "InvalidInputException" }
func (e *InvalidInputException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidInputException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidInputException) HasMessage() bool {
	return e.Message != nil
}

// The machine learning transform is not ready to run.
type MLTransformNotReadyException struct {
	Message *string
}

func (e *MLTransformNotReadyException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *MLTransformNotReadyException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *MLTransformNotReadyException) ErrorCode() string             { return "MLTransformNotReadyException" }
func (e *MLTransformNotReadyException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *MLTransformNotReadyException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *MLTransformNotReadyException) HasMessage() bool {
	return e.Message != nil
}

// There is no applicable schedule.
type NoScheduleException struct {
	Message *string
}

func (e *NoScheduleException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NoScheduleException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NoScheduleException) ErrorCode() string             { return "NoScheduleException" }
func (e *NoScheduleException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *NoScheduleException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *NoScheduleException) HasMessage() bool {
	return e.Message != nil
}

// The operation timed out.
type OperationTimeoutException struct {
	Message *string
}

func (e *OperationTimeoutException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OperationTimeoutException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OperationTimeoutException) ErrorCode() string             { return "OperationTimeoutException" }
func (e *OperationTimeoutException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OperationTimeoutException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OperationTimeoutException) HasMessage() bool {
	return e.Message != nil
}

// A resource numerical limit was exceeded.
type ResourceNumberLimitExceededException struct {
	Message *string
}

func (e *ResourceNumberLimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNumberLimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNumberLimitExceededException) ErrorCode() string {
	return "ResourceNumberLimitExceededException"
}
func (e *ResourceNumberLimitExceededException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ResourceNumberLimitExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNumberLimitExceededException) HasMessage() bool {
	return e.Message != nil
}

// The specified scheduler is not running.
type SchedulerNotRunningException struct {
	Message *string
}

func (e *SchedulerNotRunningException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SchedulerNotRunningException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SchedulerNotRunningException) ErrorCode() string             { return "SchedulerNotRunningException" }
func (e *SchedulerNotRunningException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SchedulerNotRunningException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SchedulerNotRunningException) HasMessage() bool {
	return e.Message != nil
}

// The specified scheduler is already running.
type SchedulerRunningException struct {
	Message *string
}

func (e *SchedulerRunningException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SchedulerRunningException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SchedulerRunningException) ErrorCode() string             { return "SchedulerRunningException" }
func (e *SchedulerRunningException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SchedulerRunningException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SchedulerRunningException) HasMessage() bool {
	return e.Message != nil
}

// The specified scheduler is transitioning.
type SchedulerTransitioningException struct {
	Message *string
}

func (e *SchedulerTransitioningException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SchedulerTransitioningException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SchedulerTransitioningException) ErrorCode() string {
	return "SchedulerTransitioningException"
}
func (e *SchedulerTransitioningException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SchedulerTransitioningException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SchedulerTransitioningException) HasMessage() bool {
	return e.Message != nil
}

// A value could not be validated.
type ValidationException struct {
	Message *string
}

func (e *ValidationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ValidationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ValidationException) ErrorCode() string             { return "ValidationException" }
func (e *ValidationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ValidationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ValidationException) HasMessage() bool {
	return e.Message != nil
}

// There was a version conflict.
type VersionMismatchException struct {
	Message *string
}

func (e *VersionMismatchException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *VersionMismatchException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *VersionMismatchException) ErrorCode() string             { return "VersionMismatchException" }
func (e *VersionMismatchException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *VersionMismatchException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *VersionMismatchException) HasMessage() bool {
	return e.Message != nil
}
