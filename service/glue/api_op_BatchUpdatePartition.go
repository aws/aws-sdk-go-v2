// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates one or more partitions in a batch operation.
func (c *Client) BatchUpdatePartition(ctx context.Context, params *BatchUpdatePartitionInput, optFns ...func(*Options)) (*BatchUpdatePartitionOutput, error) {
	if params == nil {
		params = &BatchUpdatePartitionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "BatchUpdatePartition", params, optFns, addOperationBatchUpdatePartitionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*BatchUpdatePartitionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type BatchUpdatePartitionInput struct {

	// The name of the metadata database in which the partition is to be updated.
	//
	// This member is required.
	DatabaseName *string

	// A list of up to 100 BatchUpdatePartitionRequestEntry objects to update.
	//
	// This member is required.
	Entries []*types.BatchUpdatePartitionRequestEntry

	// The name of the metadata table in which the partition is to be updated.
	//
	// This member is required.
	TableName *string

	// The ID of the catalog in which the partition is to be updated. Currently, this
	// should be the AWS account ID.
	CatalogId *string
}

type BatchUpdatePartitionOutput struct {

	// The errors encountered when trying to update the requested partitions. A list of
	// BatchUpdatePartitionFailureEntry objects.
	Errors []*types.BatchUpdatePartitionFailureEntry

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationBatchUpdatePartitionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpBatchUpdatePartition{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpBatchUpdatePartition{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpBatchUpdatePartitionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opBatchUpdatePartition(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opBatchUpdatePartition(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "glue",
		OperationName: "BatchUpdatePartition",
	}
}
