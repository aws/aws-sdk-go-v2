// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new job definition.
func (c *Client) CreateJob(ctx context.Context, params *CreateJobInput, optFns ...func(*Options)) (*CreateJobOutput, error) {
	stack := middleware.NewStack("CreateJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateJob",
			Err:           err,
		}
	}
	out := result.(*CreateJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateJobInput struct {
	// The tags to use with this job. You may use tags to limit access to the job. For
	// more information about tags in AWS Glue, see AWS Tags in AWS Glue
	// (https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer
	// guide.
	Tags map[string]*string
	// Glue version determines the versions of Apache Spark and Python that AWS Glue
	// supports. The Python version indicates the version supported for jobs of type
	// Spark.  <p>For more information about the available AWS Glue versions and
	// corresponding Spark and Python versions, see <a
	// href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a>
	// in the developer guide.</p> <p>Jobs that are created without specifying a Glue
	// version default to Glue 0.9.</p>
	GlueVersion *string
	// The number of workers of a defined workerType that are allocated when a job
	// runs.  <p>The maximum number of workers you can define are 299 for
	// <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>
	NumberOfWorkers *int32
	// The JobCommand that executes this job.
	Command *types.JobCommand
	// The default arguments for this job. You can specify arguments here that your own
	// job-execution script consumes, as well as arguments that AWS Glue itself
	// consumes. For information about how to specify and consume your own Job
	// arguments, see the Calling AWS Glue APIs in Python
	// (https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html)
	// topic in the developer guide. For information about the key-value pairs that AWS
	// Glue consumes to set up your job, see the Special Parameters Used by AWS Glue
	// (https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html)
	// topic in the developer guide.
	DefaultArguments map[string]*string
	// The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
	Role *string
	// The job timeout in minutes. This is the maximum time that a job run can consume
	// resources before it is terminated and enters TIMEOUT status. The default is
	// 2,880 minutes (48 hours).
	Timeout *int32
	// An ExecutionProperty specifying the maximum number of concurrent runs allowed
	// for this job.
	ExecutionProperty *types.ExecutionProperty
	// This parameter is deprecated. Use MaxCapacity instead.  <p>The number of AWS
	// Glue data processing units (DPUs) to allocate to this Job. You can allocate from
	// 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing
	// power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
	// information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue
	// pricing page</a>.</p>
	AllocatedCapacity *int32
	// The type of predefined worker that is allocated when a job runs. Accepts a value
	// of Standard, G.1X, or G.2X.
	//
	//     * For the Standard worker type, each worker
	// provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
	//
	//
	// * For the G.1X worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory,
	// 64 GB disk), and provides 1 executor per worker. We recommend this worker type
	// for memory-intensive jobs.
	//
	//     * For the G.2X worker type, each worker maps to
	// 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per
	// worker. We recommend this worker type for memory-intensive jobs.
	WorkerType types.WorkerType
	// The maximum number of times to retry this job if it fails.
	MaxRetries *int32
	// This field is reserved for future use.
	LogUri *string
	// The name of the SecurityConfiguration structure to be used with this job.
	SecurityConfiguration *string
	// The connections used for this job.
	Connections *types.ConnectionsList
	// Non-overridable arguments for this job, specified as name-value pairs.
	NonOverridableArguments map[string]*string
	// The number of AWS Glue data processing units (DPUs) that can be allocated when
	// this job runs. A DPU is a relative measure of processing power that consists of
	// 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the
	// AWS Glue pricing page (https://aws.amazon.com/glue/pricing/).  <p>Do not set
	// <code>Max Capacity</code> if using <code>WorkerType</code> and
	// <code>NumberOfWorkers</code>.</p> <p>The value that can be allocated for
	// <code>MaxCapacity</code> depends on whether you are running a Python shell job
	// or an Apache Spark ETL job:</p> <ul> <li> <p>When you specify a Python shell job
	// (<code>JobCommand.Name</code>="pythonshell"), you can allocate either 0.0625 or
	// 1 DPU. The default is 0.0625 DPU.</p> </li> <li> <p>When you specify an Apache
	// Spark ETL job (<code>JobCommand.Name</code>="glueetl") or Apache Spark streaming
	// ETL job (<code>JobCommand.Name</code>="gluestreaming"), you can allocate from 2
	// to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU
	// allocation.</p> </li> </ul>
	MaxCapacity *float64
	// Description of the job being defined.
	Description *string
	// The name you assign to this job definition. It must be unique in your account.
	Name *string
	// Specifies configuration properties of a job notification.
	NotificationProperty *types.NotificationProperty
}

type CreateJobOutput struct {
	// The unique name that was provided for this job definition.
	Name *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateJob{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "glue",
		OperationName: "CreateJob",
	}
}
