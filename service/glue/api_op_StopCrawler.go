// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glue

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
)

const opStopCrawler = "StopCrawler"

// StopCrawlerRequest returns a request value for making API operation for
// AWS Glue.
//
// If the specified crawler is running, stops the crawl.
//
//    // Example sending a request using StopCrawlerRequest.
//    req := client.StopCrawlerRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/glue-2017-03-31/StopCrawler
func (c *Client) StopCrawlerRequest(input *types.StopCrawlerInput) StopCrawlerRequest {
	op := &aws.Operation{
		Name:       opStopCrawler,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StopCrawlerInput{}
	}

	req := c.newRequest(op, input, &types.StopCrawlerOutput{})
	return StopCrawlerRequest{Request: req, Input: input, Copy: c.StopCrawlerRequest}
}

// StopCrawlerRequest is the request type for the
// StopCrawler API operation.
type StopCrawlerRequest struct {
	*aws.Request
	Input *types.StopCrawlerInput
	Copy  func(*types.StopCrawlerInput) StopCrawlerRequest
}

// Send marshals and sends the StopCrawler API request.
func (r StopCrawlerRequest) Send(ctx context.Context) (*StopCrawlerResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StopCrawlerResponse{
		StopCrawlerOutput: r.Request.Data.(*types.StopCrawlerOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StopCrawlerResponse is the response type for the
// StopCrawler API operation.
type StopCrawlerResponse struct {
	*types.StopCrawlerOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StopCrawler request.
func (r *StopCrawlerResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
