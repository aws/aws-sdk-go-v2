// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Starts the active learning workflow for your machine learning transform to
// improve the transform's quality by generating label sets and adding labels.
// <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, AWS Glue
// will have generated a "labeling set" or a set of questions for humans to
// answer.</p> <p>In the case of the <code>FindMatches</code> transform, these
// questions are of the form, “What is the correct way to group these rows together
// into groups composed entirely of matching records?” </p> <p>After the labeling
// process is finished, you can upload your labels with a call to
// <code>StartImportLabelsTaskRun</code>. After
// <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine
// learning transform will use the new and improved labels and perform a
// higher-quality transformation.</p>
func (c *Client) StartMLLabelingSetGenerationTaskRun(ctx context.Context, params *StartMLLabelingSetGenerationTaskRunInput, optFns ...func(*Options)) (*StartMLLabelingSetGenerationTaskRunOutput, error) {
	stack := middleware.NewStack("StartMLLabelingSetGenerationTaskRun", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpStartMLLabelingSetGenerationTaskRunMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStartMLLabelingSetGenerationTaskRunValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartMLLabelingSetGenerationTaskRun(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartMLLabelingSetGenerationTaskRun",
			Err:           err,
		}
	}
	out := result.(*StartMLLabelingSetGenerationTaskRunOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartMLLabelingSetGenerationTaskRunInput struct {
	// The unique identifier of the machine learning transform.
	TransformId *string
	// The Amazon Simple Storage Service (Amazon S3) path where you generate the
	// labeling set.
	OutputS3Path *string
}

type StartMLLabelingSetGenerationTaskRunOutput struct {
	// The unique run identifier that is associated with this task run.
	TaskRunId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpStartMLLabelingSetGenerationTaskRunMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpStartMLLabelingSetGenerationTaskRun{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpStartMLLabelingSetGenerationTaskRun{}, middleware.After)
}

func newServiceMetadataMiddleware_opStartMLLabelingSetGenerationTaskRun(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "glue",
		OperationName: "StartMLLabelingSetGenerationTaskRun",
	}
}
