// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Searches a set of tables based on properties in the table metadata as well as on
// the parent database. You can search against text or filter conditions. You can
// only get tables that you have access to based on the security policies defined
// in Lake Formation. You need at least a read-only access to the table for it to
// be returned. If you do not have access to all the columns in the table, these
// columns will not be searched against when returning the list of tables back to
// you. If you have access to the columns but not the data in the columns, those
// columns and the associated metadata for those columns will be included in the
// search.
func (c *Client) SearchTables(ctx context.Context, params *SearchTablesInput, optFns ...func(*Options)) (*SearchTablesOutput, error) {
	if params == nil {
		params = &SearchTablesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "SearchTables", params, optFns, addOperationSearchTablesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*SearchTablesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SearchTablesInput struct {

	// A unique identifier, consisting of  account_id .
	CatalogId *string

	// A list of key-value pairs, and a comparator used to filter the search results.
	// Returns all entities matching the predicate. The Comparator member of the
	// PropertyPredicate struct is used only for time fields, and can be omitted for
	// other field types. Also, when comparing string values, such as when Key=Name, a
	// fuzzy match algorithm is used. The Key field (for example, the value of the Name
	// field) is split on certain punctuation characters, for example, -, :, #, etc.
	// into tokens. Then each token is exact-match compared with the Value member of
	// PropertyPredicate. For example, if Key=Name and Value=link, tables named
	// customer-link and xx-link-yy are returned, but xxlinkyy is not returned.
	Filters []*types.PropertyPredicate

	// The maximum number of tables to return in a single response.
	MaxResults *int32

	// A continuation token, included if this is a continuation call.
	NextToken *string

	// Allows you to specify that you want to search the tables shared with your
	// account. The allowable values are FOREIGN or ALL.
	//
	//     * If set to FOREIGN, will
	// search the tables shared with your account.
	//
	//     * If set to ALL, will search
	// the tables shared with your account, as well as the tables in yor local account.
	ResourceShareType types.ResourceShareType

	// A string used for a text search. Specifying a value in quotes filters based on
	// an exact match to the value.
	SearchText *string

	// A list of criteria for sorting the results by a field name, in an ascending or
	// descending order.
	SortCriteria []*types.SortCriterion
}

type SearchTablesOutput struct {

	// A continuation token, present if the current list segment is not the last.
	NextToken *string

	// A list of the requested Table objects. The SearchTables response returns only
	// the tables that you have access to.
	TableList []*types.Table

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationSearchTablesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpSearchTables{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpSearchTables{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSearchTables(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opSearchTables(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "glue",
		OperationName: "SearchTables",
	}
}
