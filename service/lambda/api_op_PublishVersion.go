// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lambda

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda/types"
)

const opPublishVersion = "PublishVersion"

// PublishVersionRequest returns a request value for making API operation for
// AWS Lambda.
//
// Creates a version (https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html)
// from the current code and configuration of a function. Use versions to create
// a snapshot of your function code and configuration that doesn't change.
//
// AWS Lambda doesn't publish a version if the function's configuration and
// code haven't changed since the last version. Use UpdateFunctionCode or UpdateFunctionConfiguration
// to update the function before publishing a version.
//
// Clients can invoke versions directly or with an alias. To create an alias,
// use CreateAlias.
//
//    // Example sending a request using PublishVersionRequest.
//    req := client.PublishVersionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lambda-2015-03-31/PublishVersion
func (c *Client) PublishVersionRequest(input *types.PublishVersionInput) PublishVersionRequest {
	op := &aws.Operation{
		Name:       opPublishVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/2015-03-31/functions/{FunctionName}/versions",
	}

	if input == nil {
		input = &types.PublishVersionInput{}
	}

	req := c.newRequest(op, input, &types.PublishVersionOutput{})
	return PublishVersionRequest{Request: req, Input: input, Copy: c.PublishVersionRequest}
}

// PublishVersionRequest is the request type for the
// PublishVersion API operation.
type PublishVersionRequest struct {
	*aws.Request
	Input *types.PublishVersionInput
	Copy  func(*types.PublishVersionInput) PublishVersionRequest
}

// Send marshals and sends the PublishVersion API request.
func (r PublishVersionRequest) Send(ctx context.Context) (*PublishVersionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PublishVersionResponse{
		PublishVersionOutput: r.Request.Data.(*types.PublishVersionOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PublishVersionResponse is the response type for the
// PublishVersion API operation.
type PublishVersionResponse struct {
	*types.PublishVersionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PublishVersion request.
func (r *PublishVersionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
