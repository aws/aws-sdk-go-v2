// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lambda

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda/types"
)

const opListLayerVersions = "ListLayerVersions"

// ListLayerVersionsRequest returns a request value for making API operation for
// AWS Lambda.
//
// Lists the versions of an AWS Lambda layer (https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
// Versions that have been deleted aren't listed. Specify a runtime identifier
// (https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) to list
// only versions that indicate that they're compatible with that runtime.
//
//    // Example sending a request using ListLayerVersionsRequest.
//    req := client.ListLayerVersionsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lambda-2015-03-31/ListLayerVersions
func (c *Client) ListLayerVersionsRequest(input *types.ListLayerVersionsInput) ListLayerVersionsRequest {
	op := &aws.Operation{
		Name:       opListLayerVersions,
		HTTPMethod: "GET",
		HTTPPath:   "/2018-10-31/layers/{LayerName}/versions",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextMarker"},
			LimitToken:      "MaxItems",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListLayerVersionsInput{}
	}

	req := c.newRequest(op, input, &types.ListLayerVersionsOutput{})
	return ListLayerVersionsRequest{Request: req, Input: input, Copy: c.ListLayerVersionsRequest}
}

// ListLayerVersionsRequest is the request type for the
// ListLayerVersions API operation.
type ListLayerVersionsRequest struct {
	*aws.Request
	Input *types.ListLayerVersionsInput
	Copy  func(*types.ListLayerVersionsInput) ListLayerVersionsRequest
}

// Send marshals and sends the ListLayerVersions API request.
func (r ListLayerVersionsRequest) Send(ctx context.Context) (*ListLayerVersionsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListLayerVersionsResponse{
		ListLayerVersionsOutput: r.Request.Data.(*types.ListLayerVersionsOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListLayerVersionsRequestPaginator returns a paginator for ListLayerVersions.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListLayerVersionsRequest(input)
//   p := lambda.NewListLayerVersionsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListLayerVersionsPaginator(req ListLayerVersionsRequest) ListLayerVersionsPaginator {
	return ListLayerVersionsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListLayerVersionsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListLayerVersionsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListLayerVersionsPaginator struct {
	aws.Pager
}

func (p *ListLayerVersionsPaginator) CurrentPage() *types.ListLayerVersionsOutput {
	return p.Pager.CurrentPage().(*types.ListLayerVersionsOutput)
}

// ListLayerVersionsResponse is the response type for the
// ListLayerVersions API operation.
type ListLayerVersionsResponse struct {
	*types.ListLayerVersionsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListLayerVersions request.
func (r *ListLayerVersionsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
