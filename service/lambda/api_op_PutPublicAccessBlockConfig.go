// Code generated by smithy-go-codegen DO NOT EDIT.

package lambda

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// The option to configure public-access settings, and to use the
// PutPublicAccessBlock and GetPublicAccessBlock APIs, won't be available in all
// Amazon Web Services Regions until September 30, 2024.
//
// Configure your function's public-access settings.
//
// To control public access to a Lambda function, you can choose whether to allow
// the creation of [resource-based policies]that allow public access to that function. You can also block
// public access to a function, even if it has an existing resource-based policy
// that allows it.
//
// [resource-based policies]: https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html
func (c *Client) PutPublicAccessBlockConfig(ctx context.Context, params *PutPublicAccessBlockConfigInput, optFns ...func(*Options)) (*PutPublicAccessBlockConfigOutput, error) {
	if params == nil {
		params = &PutPublicAccessBlockConfigInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutPublicAccessBlockConfig", params, optFns, c.addOperationPutPublicAccessBlockConfigMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutPublicAccessBlockConfigOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutPublicAccessBlockConfigInput struct {

	// An object defining the public-access settings you want to apply.
	//
	// To block the creation of resource-based policies that would grant public access
	// to your function, set BlockPublicPolicy to true . To allow the creation of
	// resource-based policies that would grant public access to your function, set
	// BlockPublicPolicy to false .
	//
	// To block public access to your function, even if its resource-based policy
	// allows it, set RestrictPublicResource to true . To allow public access to a
	// function with a resource-based policy that permits it, set
	// RestrictPublicResource to false .
	//
	// The default setting for both BlockPublicPolicy and RestrictPublicResource is
	// true .
	//
	// This member is required.
	PublicAccessBlockConfig *types.PublicAccessBlockConfig

	// The Amazon Resource Name (ARN) of the function you want to configure
	// public-access settings for. Public-access settings are applied at the function
	// level, so you can't apply different settings to function versions or aliases.
	//
	// This member is required.
	ResourceArn *string

	noSmithyDocumentSerde
}

type PutPublicAccessBlockConfigOutput struct {

	// The public-access settings Lambda applied to your function.
	PublicAccessBlockConfig *types.PublicAccessBlockConfig

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationPutPublicAccessBlockConfigMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpPutPublicAccessBlockConfig{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpPutPublicAccessBlockConfig{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "PutPublicAccessBlockConfig"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addOpPutPublicAccessBlockConfigValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opPutPublicAccessBlockConfig(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opPutPublicAccessBlockConfig(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "PutPublicAccessBlockConfig",
	}
}
