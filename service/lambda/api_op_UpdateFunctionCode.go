// Code generated by smithy-go-codegen DO NOT EDIT.

package lambda

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lambda/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates a Lambda function's code.  <p>The function's code is locked when you
// publish a version. You can't modify the code of a published version, only the
// unpublished version.</p>
func (c *Client) UpdateFunctionCode(ctx context.Context, params *UpdateFunctionCodeInput, optFns ...func(*Options)) (*UpdateFunctionCodeOutput, error) {
	stack := middleware.NewStack("UpdateFunctionCode", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpUpdateFunctionCodeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateFunctionCodeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateFunctionCode(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateFunctionCode",
			Err:           err,
		}
	}
	out := result.(*UpdateFunctionCodeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateFunctionCodeInput struct {
	// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be
	// in a different AWS account.
	S3Bucket *string
	// The Amazon S3 key of the deployment package.
	S3Key *string
	// For versioned objects, the version of the deployment package object to use.
	S3ObjectVersion *string
	// The base64-encoded contents of the deployment package. AWS SDK and AWS CLI
	// clients handle the encoding for you.
	ZipFile []byte
	// Set to true to validate the request parameters and access permissions without
	// modifying the function code.
	DryRun *bool
	// The name of the Lambda function. Name formats
	//
	//     * Function name -
	// my-function.
	//
	//     * Function ARN -
	// arn:aws:lambda:us-west-2:123456789012:function:my-function.
	//
	//     * Partial ARN -
	// 123456789012:function:my-function.
	//
	// The length constraint applies only to the
	// full ARN. If you specify only the function name, it is limited to 64 characters
	// in length.
	FunctionName *string
	// Only update the function if the revision ID matches the ID that's specified. Use
	// this option to avoid modifying a function that has changed since you last read
	// it.
	RevisionId *string
	// Set to true to publish a new version of the function after updating the code.
	// This has the same effect as calling PublishVersion () separately.
	Publish *bool
}

// Details about a function's configuration.
type UpdateFunctionCodeOutput struct {
	// The name of the function.
	FunctionName *string
	// The latest updated revision of the function or alias.
	RevisionId *string
	// For Lambda@Edge functions, the ARN of the master function.
	MasterArn *string
	// The status of the last update that was performed on the function. This is first
	// set to Successful after function creation completes.
	LastUpdateStatus types.LastUpdateStatus
	// The function's  layers
	// (https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
	Layers []*types.Layer
	// Connection settings for an Amazon EFS file system.
	FileSystemConfigs []*types.FileSystemConfig
	// The function's networking configuration.
	VpcConfig *types.VpcConfigResponse
	// The runtime environment for the Lambda function.
	Runtime types.Runtime
	// The SHA256 hash of the function's deployment package.
	CodeSha256 *string
	// The date and time that the function was last updated, in ISO-8601 format
	// (https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
	LastModified *string
	// The memory that's allocated to the function.
	MemorySize *int32
	// The version of the Lambda function.
	Version *string
	// The amount of time in seconds that Lambda allows a function to run before
	// stopping it.
	Timeout *int32
	// The size of the function's deployment package, in bytes.
	CodeSize *int64
	// The function's Amazon Resource Name (ARN).
	FunctionArn *string
	// The function's environment variables.
	Environment *types.EnvironmentResponse
	// The reason for the last update that was performed on the function.
	LastUpdateStatusReason *string
	// The function that Lambda calls to begin executing your function.
	Handler *string
	// The function's AWS X-Ray tracing configuration.
	TracingConfig *types.TracingConfigResponse
	// The reason code for the function's current state. When the code is Creating, you
	// can't invoke or modify the function.
	StateReasonCode types.StateReasonCode
	// The reason code for the last update that was performed on the function.
	LastUpdateStatusReasonCode types.LastUpdateStatusReasonCode
	// The function's description.
	Description *string
	// The function's execution role.
	Role *string
	// The KMS key that's used to encrypt the function's environment variables. This
	// key is only returned if you've configured a customer managed CMK.
	KMSKeyArn *string
	// The function's dead letter queue.
	DeadLetterConfig *types.DeadLetterConfig
	// The reason for the function's current state.
	StateReason *string
	// The current state of the function. When the state is Inactive, you can
	// reactivate the function by invoking it.
	State types.State

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpUpdateFunctionCodeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpUpdateFunctionCode{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateFunctionCode{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateFunctionCode(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lambda",
		OperationName: "UpdateFunctionCode",
	}
}
