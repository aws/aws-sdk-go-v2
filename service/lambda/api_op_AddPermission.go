// Code generated by smithy-go-codegen DO NOT EDIT.

package lambda

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Grants an AWS service or another account permission to use a function. You can
// apply the policy at the function level, or specify a qualifier to restrict
// access to a single version or alias. If you use a qualifier, the invoker must
// use the full Amazon Resource Name (ARN) of that version or alias to invoke the
// function.  <p>To grant permission to another account, specify the account ID as
// the <code>Principal</code>. For AWS services, the principal is a domain-style
// identifier defined by the service, like <code>s3.amazonaws.com</code> or
// <code>sns.amazonaws.com</code>. For AWS services, you can also specify the ARN
// of the associated resource as the <code>SourceArn</code>. If you grant
// permission to a service principal without specifying the source, other accounts
// could potentially configure resources in their account to invoke your Lambda
// function.</p> <p>This action adds a statement to a resource-based permissions
// policy for the function. For more information about function policies, see <a
// href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">Lambda
// Function Policies</a>. </p>
func (c *Client) AddPermission(ctx context.Context, params *AddPermissionInput, optFns ...func(*Options)) (*AddPermissionOutput, error) {
	stack := middleware.NewStack("AddPermission", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpAddPermissionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAddPermissionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAddPermission(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "AddPermission",
			Err:           err,
		}
	}
	out := result.(*AddPermissionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AddPermissionInput struct {
	// The action that the principal can use on the function. For example,
	// lambda:InvokeFunction or lambda:GetFunction.
	Action *string
	// For AWS services, the ARN of the AWS resource that invokes the function. For
	// example, an Amazon S3 bucket or Amazon SNS topic.
	SourceArn *string
	// For Amazon S3, the ID of the account that owns the resource. Use this together
	// with SourceArn to ensure that the resource is owned by the specified account. It
	// is possible for an Amazon S3 bucket to be deleted by its owner and recreated by
	// another account.
	SourceAccount *string
	// A statement identifier that differentiates the statement from others in the same
	// policy.
	StatementId *string
	// The name of the Lambda function, version, or alias. Name formats
	//
	//     * Function
	// name - my-function (name-only), my-function:v1 (with alias).
	//
	//     * Function ARN
	// - arn:aws:lambda:us-west-2:123456789012:function:my-function.
	//
	//     * Partial ARN
	// - 123456789012:function:my-function.
	//
	// You can append a version number or alias
	// to any of the formats. The length constraint applies only to the full ARN. If
	// you specify only the function name, it is limited to 64 characters in length.
	FunctionName *string
	// For Alexa Smart Home functions, a token that must be supplied by the invoker.
	EventSourceToken *string
	// Specify a version or alias to add permissions to a published version of the
	// function.
	Qualifier *string
	// The AWS service or account that invokes the function. If you specify a service,
	// use SourceArn or SourceAccount to limit who can invoke the function through that
	// service.
	Principal *string
	// Only update the policy if the revision ID matches the ID that's specified. Use
	// this option to avoid modifying a policy that has changed since you last read it.
	RevisionId *string
}

type AddPermissionOutput struct {
	// The permission statement that's added to the function policy.
	Statement *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpAddPermissionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpAddPermission{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpAddPermission{}, middleware.After)
}

func newServiceMetadataMiddleware_opAddPermission(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lambda",
		OperationName: "AddPermission",
	}
}
