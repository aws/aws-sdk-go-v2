// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lambda

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda/types"
)

const opCreateEventSourceMapping = "CreateEventSourceMapping"

// CreateEventSourceMappingRequest returns a request value for making API operation for
// AWS Lambda.
//
// Creates a mapping between an event source and an AWS Lambda function. Lambda
// reads items from the event source and triggers the function.
//
// For details about each event source type, see the following topics.
//
//    * Using AWS Lambda with Amazon Kinesis (https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html)
//
//    * Using AWS Lambda with Amazon SQS (https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html)
//
//    * Using AWS Lambda with Amazon DynamoDB (https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html)
//
//    // Example sending a request using CreateEventSourceMappingRequest.
//    req := client.CreateEventSourceMappingRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lambda-2015-03-31/CreateEventSourceMapping
func (c *Client) CreateEventSourceMappingRequest(input *types.CreateEventSourceMappingInput) CreateEventSourceMappingRequest {
	op := &aws.Operation{
		Name:       opCreateEventSourceMapping,
		HTTPMethod: "POST",
		HTTPPath:   "/2015-03-31/event-source-mappings/",
	}

	if input == nil {
		input = &types.CreateEventSourceMappingInput{}
	}

	req := c.newRequest(op, input, &types.CreateEventSourceMappingOutput{})
	return CreateEventSourceMappingRequest{Request: req, Input: input, Copy: c.CreateEventSourceMappingRequest}
}

// CreateEventSourceMappingRequest is the request type for the
// CreateEventSourceMapping API operation.
type CreateEventSourceMappingRequest struct {
	*aws.Request
	Input *types.CreateEventSourceMappingInput
	Copy  func(*types.CreateEventSourceMappingInput) CreateEventSourceMappingRequest
}

// Send marshals and sends the CreateEventSourceMapping API request.
func (r CreateEventSourceMappingRequest) Send(ctx context.Context) (*CreateEventSourceMappingResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateEventSourceMappingResponse{
		CreateEventSourceMappingOutput: r.Request.Data.(*types.CreateEventSourceMappingOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateEventSourceMappingResponse is the response type for the
// CreateEventSourceMapping API operation.
type CreateEventSourceMappingResponse struct {
	*types.CreateEventSourceMappingOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateEventSourceMapping request.
func (r *CreateEventSourceMappingResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
