// Code generated by smithy-go-codegen DO NOT EDIT.

package codestarconnections

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	"net/http"
)

const ServiceID = "CodeStar connections"

// AWS CodeStar Connections The CodeStar Connections feature is in preview release
// and is subject to change. This AWS CodeStar Connections API Reference provides
// descriptions and usage examples of the operations and data types for the AWS
// CodeStar Connections API. You can use the connections API to work with
// connections and installations. Connections are configurations that you use to
// connect AWS resources to external code repositories. Each connection is a
// resource that can be given to services such as CodePipeline to connect to a
// third-party repository such as Bitbucket. For example, you can add the
// connection in CodePipeline so that it triggers your pipeline when a code change
// is made to your third-party code repository. Each connection is named and
// associated with a unique ARN that is used to reference the connection. When you
// create a connection, the console initiates a third-party connection handshake.
// Installations are the apps that are used to conduct this handshake. For example,
// the installation for the Bitbucket provider type is the Bitbucket Cloud app.
// When you create a connection, you can choose an existing installation or create
// one. When you want to create a connection to an installed provider type such as
// GitHub Enterprise Server, you create a host for your connections. You can work
// with connections by calling:
//
//     * CreateConnection (), which creates a
// uniquely named connection that can be referenced by services such as
// CodePipeline.
//
//     * DeleteConnection (), which deletes the specified
// connection.
//
//     * GetConnection (), which returns information about the
// connection, including the connection status.
//
//     * ListConnections (), which
// lists the connections associated with your account.
//
// You can work with hosts by
// calling:
//
//     * CreateHost (), which creates a host that represents the
// infrastructure where your provider is installed.
//
//     * DeleteHost (), which
// deletes the specified host.
//
//     * GetHost (), which returns information about
// the host, including the setup status.
//
//     * ListHosts (), which lists the hosts
// associated with your account.
//
// You can work with tags in AWS CodeStar
// Connections by calling the following:
//
//     * ListTagsForResource (), which gets
// information about AWS tags for a specified Amazon Resource Name (ARN) in AWS
// CodeStar Connections.
//
//     * TagResource (), which adds or updates tags for a
// resource in AWS CodeStar Connections.
//
//     * UntagResource (), which removes
// tags for a resource in AWS CodeStar Connections.
//
// For information about how to
// use AWS CodeStar Connections, see the Developer Tools User Guide
// (https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html).
type Client struct {
	options Options
}

// New returns an initialized Client based on the functional options. Provide
// additional functional options to further configure the behavior of the client,
// such as changing the client's endpoint or adding custom middleware behavior.
func New(options Options, optFns ...func(*Options)) *Client {
	options = options.Copy()

	resolveRetryer(&options)

	resolveHTTPClient(&options)

	resolveDefaultEndpointConfiguration(&options)

	for _, fn := range optFns {
		fn(&options)
	}

	client := &Client{
		options: options,
	}

	return client
}

type Options struct {
	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	APIOptions []APIOptionFunc

	// The credentials object to use when signing requests.
	Credentials aws.CredentialsProvider

	// The endpoint options to be used when attempting to resolve an endpoint.
	EndpointOptions ResolverOptions

	// The service endpoint resolver.
	EndpointResolver EndpointResolver

	// An integer value representing the logging level.
	LogLevel aws.LogLevel

	// The logger writer interface to write logging messages to.
	Logger aws.Logger

	// The region to send requests to. (Required)
	Region string

	// Retryer guides how HTTP requests should be retried in case of recoverable
	// failures. When nil the API client will use a default retryer.
	Retryer retry.Retryer

	// The HTTP client to invoke API calls with. Defaults to client's default HTTP
	// implementation if nil.
	HTTPClient HTTPClient
}

func (o Options) GetCredentials() aws.CredentialsProvider {
	return o.Credentials
}

func (o Options) GetEndpointOptions() ResolverOptions {
	return o.EndpointOptions
}

func (o Options) GetEndpointResolver() EndpointResolver {
	return o.EndpointResolver
}

func (o Options) GetLogLevel() aws.LogLevel {
	return o.LogLevel
}

func (o Options) GetLogger() aws.Logger {
	return o.Logger
}

func (o Options) GetRegion() string {
	return o.Region
}

func (o Options) GetRetryer() retry.Retryer {
	return o.Retryer
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// Copy creates a clone where the APIOptions list is deep copied.
func (o Options) Copy() Options {
	to := o
	to.APIOptions = make([]APIOptionFunc, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)
	return to
}

type APIOptionFunc func(*middleware.Stack) error

// NewFromConfig returns a new client from the provided config.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	opts := Options{
		Region:      cfg.Region,
		Retryer:     cfg.Retryer,
		LogLevel:    cfg.LogLevel,
		Logger:      cfg.Logger,
		HTTPClient:  cfg.HTTPClient,
		Credentials: cfg.Credentials,
	}
	return New(opts, optFns...)
}

func resolveHTTPClient(o *Options) {
	if o.HTTPClient != nil {
		return
	}
	o.HTTPClient = aws.NewBuildableHTTPClient()
}

func resolveRetryer(o *Options) {
	if o.Retryer != nil {
		return
	}
	o.Retryer = retry.NewStandard()
}

func addClientUserAgent(stack *middleware.Stack) {
	awsmiddleware.AddUserAgentKey("codestarconnections")(stack)
}

func addHTTPSignerV4Middleware(stack *middleware.Stack, o Options) {
	signer := v4.Signer{}
	stack.Finalize.Add(v4.NewSignHTTPRequestMiddleware(o.Credentials, signer), middleware.After)
}
