// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudtrail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudtrail/types"
)

const opPutEventSelectors = "PutEventSelectors"

// PutEventSelectorsRequest returns a request value for making API operation for
// AWS CloudTrail.
//
// Configures an event selector for your trail. Use event selectors to further
// specify the management and data event settings for your trail. By default,
// trails created without specific event selectors will be configured to log
// all read and write management events, and no data events.
//
// When an event occurs in your account, CloudTrail evaluates the event selectors
// in all trails. For each trail, if the event matches any event selector, the
// trail processes and logs the event. If the event doesn't match any event
// selector, the trail doesn't log the event.
//
// Example
//
// You create an event selector for a trail and specify that you want write-only
// events.
//
// The EC2 GetConsoleOutput and RunInstances API operations occur in your account.
//
// CloudTrail evaluates whether the events match your event selectors.
//
// The RunInstances is a write-only event and it matches your event selector.
// The trail logs the event.
//
// The GetConsoleOutput is a read-only event but it doesn't match your event
// selector. The trail doesn't log the event.
//
// The PutEventSelectors operation must be called from the region in which the
// trail was created; otherwise, an InvalidHomeRegionException is thrown.
//
// You can configure up to five event selectors for each trail. For more information,
// see Logging Data and Management Events for Trails (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html)
// and Limits in AWS CloudTrail (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html)
// in the AWS CloudTrail User Guide.
//
//    // Example sending a request using PutEventSelectorsRequest.
//    req := client.PutEventSelectorsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cloudtrail-2013-11-01/PutEventSelectors
func (c *Client) PutEventSelectorsRequest(input *types.PutEventSelectorsInput) PutEventSelectorsRequest {
	op := &aws.Operation{
		Name:       opPutEventSelectors,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.PutEventSelectorsInput{}
	}

	req := c.newRequest(op, input, &types.PutEventSelectorsOutput{})
	return PutEventSelectorsRequest{Request: req, Input: input, Copy: c.PutEventSelectorsRequest}
}

// PutEventSelectorsRequest is the request type for the
// PutEventSelectors API operation.
type PutEventSelectorsRequest struct {
	*aws.Request
	Input *types.PutEventSelectorsInput
	Copy  func(*types.PutEventSelectorsInput) PutEventSelectorsRequest
}

// Send marshals and sends the PutEventSelectors API request.
func (r PutEventSelectorsRequest) Send(ctx context.Context) (*PutEventSelectorsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutEventSelectorsResponse{
		PutEventSelectorsOutput: r.Request.Data.(*types.PutEventSelectorsOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutEventSelectorsResponse is the response type for the
// PutEventSelectors API operation.
type PutEventSelectorsResponse struct {
	*types.PutEventSelectorsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutEventSelectors request.
func (r *PutEventSelectorsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
