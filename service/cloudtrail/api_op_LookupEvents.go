// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudtrail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudtrail/types"
)

const opLookupEvents = "LookupEvents"

// LookupEventsRequest returns a request value for making API operation for
// AWS CloudTrail.
//
// Looks up management events (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events)
// or CloudTrail Insights events (https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-insights-events)
// that are captured by CloudTrail. You can look up events that occurred in
// a region within the last 90 days. Lookup supports the following attributes
// for management events:
//
//    * AWS access key
//
//    * Event ID
//
//    * Event name
//
//    * Event source
//
//    * Read only
//
//    * Resource name
//
//    * Resource type
//
//    * User name
//
// Lookup supports the following attributes for Insights events:
//
//    * Event ID
//
//    * Event name
//
//    * Event source
//
// All attributes are optional. The default number of results returned is 50,
// with a maximum of 50 possible. The response includes a token that you can
// use to get the next page of results.
//
// The rate of lookup requests is limited to two per second per account. If
// this limit is exceeded, a throttling error occurs.
//
//    // Example sending a request using LookupEventsRequest.
//    req := client.LookupEventsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cloudtrail-2013-11-01/LookupEvents
func (c *Client) LookupEventsRequest(input *types.LookupEventsInput) LookupEventsRequest {
	op := &aws.Operation{
		Name:       opLookupEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.LookupEventsInput{}
	}

	req := c.newRequest(op, input, &types.LookupEventsOutput{})
	return LookupEventsRequest{Request: req, Input: input, Copy: c.LookupEventsRequest}
}

// LookupEventsRequest is the request type for the
// LookupEvents API operation.
type LookupEventsRequest struct {
	*aws.Request
	Input *types.LookupEventsInput
	Copy  func(*types.LookupEventsInput) LookupEventsRequest
}

// Send marshals and sends the LookupEvents API request.
func (r LookupEventsRequest) Send(ctx context.Context) (*LookupEventsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &LookupEventsResponse{
		LookupEventsOutput: r.Request.Data.(*types.LookupEventsOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewLookupEventsRequestPaginator returns a paginator for LookupEvents.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.LookupEventsRequest(input)
//   p := cloudtrail.NewLookupEventsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewLookupEventsPaginator(req LookupEventsRequest) LookupEventsPaginator {
	return LookupEventsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.LookupEventsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// LookupEventsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type LookupEventsPaginator struct {
	aws.Pager
}

func (p *LookupEventsPaginator) CurrentPage() *types.LookupEventsOutput {
	return p.Pager.CurrentPage().(*types.LookupEventsOutput)
}

// LookupEventsResponse is the response type for the
// LookupEvents API operation.
type LookupEventsResponse struct {
	*types.LookupEventsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// LookupEvents request.
func (r *LookupEventsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
