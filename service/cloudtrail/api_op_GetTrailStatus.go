// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudtrail

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns a JSON-formatted list of information about the specified trail. Fields
// include information on delivery errors, Amazon SNS and Amazon S3 errors, and
// start and stop logging times for each trail. This operation returns trail status
// from a single region. To return trail status from all regions, you must call the
// operation on each region.
func (c *Client) GetTrailStatus(ctx context.Context, params *GetTrailStatusInput, optFns ...func(*Options)) (*GetTrailStatusOutput, error) {
	stack := middleware.NewStack("GetTrailStatus", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpGetTrailStatusMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetTrailStatusValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetTrailStatus(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetTrailStatus",
			Err:           err,
		}
	}
	out := result.(*GetTrailStatusOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The name of a trail about which you want the current status.
type GetTrailStatusInput struct {
	// Specifies the name or the CloudTrail ARN of the trail for which you are
	// requesting status. To get the status of a shadow trail (a replication of the
	// trail in another region), you must specify its ARN. The format of a trail ARN
	// is: arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
	Name *string
}

// Returns the objects or data listed below if successful. Otherwise, returns an
// error.
type GetTrailStatusOutput struct {
	// Displays any CloudWatch Logs error that CloudTrail encountered when attempting
	// to deliver logs to CloudWatch Logs.
	LatestCloudWatchLogsDeliveryError *string
	// This field is no longer in use.
	TimeLoggingStopped *string
	// This field is no longer in use.
	TimeLoggingStarted *string
	// This field is no longer in use.
	LatestNotificationAttemptTime *string
	// This field is no longer in use.
	LatestNotificationAttemptSucceeded *string
	// This field is no longer in use.
	LatestDeliveryAttemptSucceeded *string
	// This field is no longer in use.
	LatestDeliveryAttemptTime *string
	// Specifies the most recent date and time when CloudTrail started recording API
	// calls for an AWS account.
	StartLoggingTime *time.Time
	// Specifies the date and time that CloudTrail last delivered log files to an
	// account's Amazon S3 bucket.
	LatestDeliveryTime *time.Time
	// Displays any Amazon SNS error that CloudTrail encountered when attempting to
	// send a notification. For more information about Amazon SNS errors, see the
	// Amazon SNS Developer Guide
	// (https://docs.aws.amazon.com/sns/latest/dg/welcome.html).
	LatestNotificationError *string
	// Displays the most recent date and time when CloudTrail delivered logs to
	// CloudWatch Logs.
	LatestCloudWatchLogsDeliveryTime *time.Time
	// Displays any Amazon S3 error that CloudTrail encountered when attempting to
	// deliver a digest file to the designated bucket. For more information see the
	// topic Error Responses
	// (https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html) in the
	// Amazon S3 API Reference. This error occurs only when there is a problem with the
	// destination S3 bucket and will not occur for timeouts. To resolve the issue,
	// create a new bucket and call UpdateTrail to specify the new bucket, or fix the
	// existing objects so that CloudTrail can again write to the bucket.
	LatestDigestDeliveryError *string
	// Specifies the most recent date and time when CloudTrail stopped recording API
	// calls for an AWS account.
	StopLoggingTime *time.Time
	// Whether the CloudTrail is currently logging AWS API calls.
	IsLogging *bool
	// Displays any Amazon S3 error that CloudTrail encountered when attempting to
	// deliver log files to the designated bucket. For more information see the topic
	// Error Responses
	// (https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html) in the
	// Amazon S3 API Reference. This error occurs only when there is a problem with the
	// destination S3 bucket and will not occur for timeouts. To resolve the issue,
	// create a new bucket and call UpdateTrail to specify the new bucket, or fix the
	// existing objects so that CloudTrail can again write to the bucket.
	LatestDeliveryError *string
	// Specifies the date and time of the most recent Amazon SNS notification that
	// CloudTrail has written a new log file to an account's Amazon S3 bucket.
	LatestNotificationTime *time.Time
	// Specifies the date and time that CloudTrail last delivered a digest file to an
	// account's Amazon S3 bucket.
	LatestDigestDeliveryTime *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpGetTrailStatusMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpGetTrailStatus{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetTrailStatus{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetTrailStatus(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudtrail",
		OperationName: "GetTrailStatus",
	}
}
