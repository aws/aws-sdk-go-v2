// Code generated by smithy-go-codegen DO NOT EDIT.

package qldb

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/qldb/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns a revision data object for a specified document ID and block address.
// Also returns a proof of the specified revision for verification if
// DigestTipAddress is provided.
func (c *Client) GetRevision(ctx context.Context, params *GetRevisionInput, optFns ...func(*Options)) (*GetRevisionOutput, error) {
	stack := middleware.NewStack("GetRevision", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetRevisionMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetRevisionValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetRevision(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetRevision",
			Err:           err,
		}
	}
	out := result.(*GetRevisionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetRevisionInput struct {
	// The unique ID of the document to be verified.
	DocumentId *string
	// The name of the ledger.
	Name *string
	// The latest block location covered by the digest for which to request a proof. An
	// address is an Amazon Ion structure that has two fields: strandId and sequenceNo.
	// For example: {strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:49}
	DigestTipAddress *types.ValueHolder
	// The block location of the document revision to be verified. An address is an
	// Amazon Ion structure that has two fields: strandId and sequenceNo. For example:
	// {strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:14}
	BlockAddress *types.ValueHolder
}

type GetRevisionOutput struct {
	// The proof object in Amazon Ion format returned by a GetRevision request. A proof
	// contains the list of hash values that are required to recalculate the specified
	// digest using a Merkle tree, starting with the specified document revision.
	Proof *types.ValueHolder
	// The document revision data object in Amazon Ion format.
	Revision *types.ValueHolder

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetRevisionMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetRevision{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetRevision{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetRevision(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "qldb",
		OperationName: "GetRevision",
	}
}
