// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package qldb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/qldb/types"
)

const opListJournalS3Exports = "ListJournalS3Exports"

// ListJournalS3ExportsRequest returns a request value for making API operation for
// Amazon QLDB.
//
// Returns an array of journal export job descriptions for all ledgers that
// are associated with the current AWS account and Region.
//
// This action returns a maximum of MaxResults items, and is paginated so that
// you can retrieve all the items by calling ListJournalS3Exports multiple times.
//
//    // Example sending a request using ListJournalS3ExportsRequest.
//    req := client.ListJournalS3ExportsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/qldb-2019-01-02/ListJournalS3Exports
func (c *Client) ListJournalS3ExportsRequest(input *types.ListJournalS3ExportsInput) ListJournalS3ExportsRequest {
	op := &aws.Operation{
		Name:       opListJournalS3Exports,
		HTTPMethod: "GET",
		HTTPPath:   "/journal-s3-exports",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListJournalS3ExportsInput{}
	}

	req := c.newRequest(op, input, &types.ListJournalS3ExportsOutput{})
	return ListJournalS3ExportsRequest{Request: req, Input: input, Copy: c.ListJournalS3ExportsRequest}
}

// ListJournalS3ExportsRequest is the request type for the
// ListJournalS3Exports API operation.
type ListJournalS3ExportsRequest struct {
	*aws.Request
	Input *types.ListJournalS3ExportsInput
	Copy  func(*types.ListJournalS3ExportsInput) ListJournalS3ExportsRequest
}

// Send marshals and sends the ListJournalS3Exports API request.
func (r ListJournalS3ExportsRequest) Send(ctx context.Context) (*ListJournalS3ExportsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListJournalS3ExportsResponse{
		ListJournalS3ExportsOutput: r.Request.Data.(*types.ListJournalS3ExportsOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListJournalS3ExportsRequestPaginator returns a paginator for ListJournalS3Exports.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListJournalS3ExportsRequest(input)
//   p := qldb.NewListJournalS3ExportsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListJournalS3ExportsPaginator(req ListJournalS3ExportsRequest) ListJournalS3ExportsPaginator {
	return ListJournalS3ExportsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListJournalS3ExportsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListJournalS3ExportsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListJournalS3ExportsPaginator struct {
	aws.Pager
}

func (p *ListJournalS3ExportsPaginator) CurrentPage() *types.ListJournalS3ExportsOutput {
	return p.Pager.CurrentPage().(*types.ListJournalS3ExportsOutput)
}

// ListJournalS3ExportsResponse is the response type for the
// ListJournalS3Exports API operation.
type ListJournalS3ExportsResponse struct {
	*types.ListJournalS3ExportsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListJournalS3Exports request.
func (r *ListJournalS3ExportsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
