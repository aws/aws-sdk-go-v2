// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package qldb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/qldb/types"
)

const opExportJournalToS3 = "ExportJournalToS3"

// ExportJournalToS3Request returns a request value for making API operation for
// Amazon QLDB.
//
// Exports journal contents within a date and time range from a ledger into
// a specified Amazon Simple Storage Service (Amazon S3) bucket. The data is
// written as files in Amazon Ion format.
//
// If the ledger with the given Name doesn't exist, then throws ResourceNotFoundException.
//
// If the ledger with the given Name is in CREATING status, then throws ResourcePreconditionNotMetException.
//
// You can initiate up to two concurrent journal export requests for each ledger.
// Beyond this limit, journal export requests throw LimitExceededException.
//
//    // Example sending a request using ExportJournalToS3Request.
//    req := client.ExportJournalToS3Request(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/qldb-2019-01-02/ExportJournalToS3
func (c *Client) ExportJournalToS3Request(input *types.ExportJournalToS3Input) ExportJournalToS3Request {
	op := &aws.Operation{
		Name:       opExportJournalToS3,
		HTTPMethod: "POST",
		HTTPPath:   "/ledgers/{name}/journal-s3-exports",
	}

	if input == nil {
		input = &types.ExportJournalToS3Input{}
	}

	req := c.newRequest(op, input, &types.ExportJournalToS3Output{})
	return ExportJournalToS3Request{Request: req, Input: input, Copy: c.ExportJournalToS3Request}
}

// ExportJournalToS3Request is the request type for the
// ExportJournalToS3 API operation.
type ExportJournalToS3Request struct {
	*aws.Request
	Input *types.ExportJournalToS3Input
	Copy  func(*types.ExportJournalToS3Input) ExportJournalToS3Request
}

// Send marshals and sends the ExportJournalToS3 API request.
func (r ExportJournalToS3Request) Send(ctx context.Context) (*ExportJournalToS3Response, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ExportJournalToS3Response{
		ExportJournalToS3Output: r.Request.Data.(*types.ExportJournalToS3Output),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ExportJournalToS3Response is the response type for the
// ExportJournalToS3 API operation.
type ExportJournalToS3Response struct {
	*types.ExportJournalToS3Output

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ExportJournalToS3 request.
func (r *ExportJournalToS3Response) SDKResponseMetdata() *aws.Response {
	return r.response
}
