// Code generated by smithy-go-codegen DO NOT EDIT.

package transfer

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Lists the details for all the accesses you have on your server.
func (c *Client) ListAccesses(ctx context.Context, params *ListAccessesInput, optFns ...func(*Options)) (*ListAccessesOutput, error) {
	if params == nil {
		params = &ListAccessesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListAccesses", params, optFns, c.addOperationListAccessesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListAccessesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListAccessesInput struct {

	// A system-assigned unique identifier for a server that has users assigned to it.
	//
	// This member is required.
	ServerId *string

	// Specifies the maximum number of access SIDs to return.
	MaxResults *int32

	// When you can get additional results from the ListAccesses call, a NextToken
	// parameter is returned in the output. You can then pass in a subsequent command
	// to the NextToken parameter to continue listing additional accesses.
	NextToken *string

	noSmithyDocumentSerde
}

type ListAccessesOutput struct {

	// Returns the accesses and their properties for the ServerId value that you
	// specify.
	//
	// This member is required.
	Accesses []types.ListedAccess

	// A system-assigned unique identifier for a server that has users assigned to it.
	//
	// This member is required.
	ServerId *string

	// When you can get additional results from the ListAccesses call, a NextToken
	// parameter is returned in the output. You can then pass in a subsequent command
	// to the NextToken parameter to continue listing additional accesses.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationListAccessesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpListAccesses{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpListAccesses{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpListAccessesValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opListAccesses(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

// ListAccessesAPIClient is a client that implements the ListAccesses operation.
type ListAccessesAPIClient interface {
	ListAccesses(context.Context, *ListAccessesInput, ...func(*Options)) (*ListAccessesOutput, error)
}

var _ ListAccessesAPIClient = (*Client)(nil)

// ListAccessesPaginatorOptions is the paginator options for ListAccesses
type ListAccessesPaginatorOptions struct {
	// Specifies the maximum number of access SIDs to return.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// ListAccessesPaginator is a paginator for ListAccesses
type ListAccessesPaginator struct {
	options   ListAccessesPaginatorOptions
	client    ListAccessesAPIClient
	params    *ListAccessesInput
	nextToken *string
	firstPage bool
}

// NewListAccessesPaginator returns a new ListAccessesPaginator
func NewListAccessesPaginator(client ListAccessesAPIClient, params *ListAccessesInput, optFns ...func(*ListAccessesPaginatorOptions)) *ListAccessesPaginator {
	if params == nil {
		params = &ListAccessesInput{}
	}

	options := ListAccessesPaginatorOptions{}
	if params.MaxResults != nil {
		options.Limit = *params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	return &ListAccessesPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *ListAccessesPaginator) HasMorePages() bool {
	return p.firstPage || p.nextToken != nil
}

// NextPage retrieves the next ListAccesses page.
func (p *ListAccessesPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*ListAccessesOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxResults = limit

	result, err := p.client.ListAccesses(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken && prevToken != nil && p.nextToken != nil && *prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

func newServiceMetadataMiddleware_opListAccesses(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transfer",
		OperationName: "ListAccesses",
	}
}
