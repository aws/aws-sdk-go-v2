// Code generated by smithy-go-codegen DO NOT EDIT.

package transfer

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Changes the state of a file transfer protocol-enabled server from ONLINE to
// OFFLINE. An OFFLINE server cannot accept and process file transfer jobs.
// Information tied to your server, such as server and user properties, are not
// affected by stopping your server. Stopping the server will not reduce or impact
// your file transfer protocol endpoint billing.  <p>The state of
// <code>STOPPING</code> indicates that the server is in an intermediate state,
// either not fully able to respond, or not fully offline. The values of
// <code>STOP_FAILED</code> can indicate an error condition.</p> <p>No response is
// returned from this call.</p>
func (c *Client) StopServer(ctx context.Context, params *StopServerInput, optFns ...func(*Options)) (*StopServerOutput, error) {
	if params == nil {
		params = &StopServerInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "StopServer", params, optFns, addOperationStopServerMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*StopServerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StopServerInput struct {

	// A system-assigned unique identifier for a file transfer protocol-enabled server
	// that you stopped.
	//
	// This member is required.
	ServerId *string
}

type StopServerOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationStopServerMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpStopServer{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpStopServer{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStopServerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStopServer(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opStopServer(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "transfer",
		OperationName: "StopServer",
	}
}
