// Code generated by smithy-go-codegen DO NOT EDIT.

package polly

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/polly/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns the list of voices that are available for use when requesting speech
// synthesis. Each voice speaks a specified language, is either male or female, and
// is identified by an ID, which is the ASCII version of the voice name.  <p>When
// synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID
// for the voice you want from the list of voices returned by
// <code>DescribeVoices</code>.</p> <p>For example, you want your news reader
// application to read news in a specific language, but giving a user the option to
// choose the voice. Using the <code>DescribeVoices</code> operation you can
// provide the user with a list of available voices to select from.</p> <p> You can
// optionally specify a language code to filter the available voices. For example,
// if you specify <code>en-US</code>, the operation returns a list of all available
// US English voices. </p> <p>This operation requires permissions to perform the
// <code>polly:DescribeVoices</code> action.</p>
func (c *Client) DescribeVoices(ctx context.Context, params *DescribeVoicesInput, optFns ...func(*Options)) (*DescribeVoicesOutput, error) {
	stack := middleware.NewStack("DescribeVoices", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDescribeVoicesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeVoices(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeVoices",
			Err:           err,
		}
	}
	out := result.(*DescribeVoicesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeVoicesInput struct {
	// The language identification tag (ISO 639 code for the language name-ISO 3166
	// country code) for filtering the list of voices returned. If you don't specify
	// this optional parameter, all available voices are returned. </p>
	LanguageCode types.LanguageCode
	// An opaque pagination token returned from the previous DescribeVoices operation.
	// If present, this indicates where to continue the listing.
	NextToken *string
	// Boolean value indicating whether to return any bilingual voices that use the
	// specified language as an additional language. For instance, if you request all
	// languages that use US English (es-US), and there is an Italian voice that speaks
	// both Italian (it-IT) and US English, that voice will be included if you specify
	// yes but not if you specify no.
	IncludeAdditionalLanguageCodes *bool
	// Specifies the engine (standard or neural) used by Amazon Polly when processing
	// input text for speech synthesis.
	Engine types.Engine
}

type DescribeVoicesOutput struct {
	// The pagination token to use in the next request to continue the listing of
	// voices. NextToken is returned only if the response is truncated.
	NextToken *string
	// A list of voices with their properties.
	Voices []*types.Voice

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDescribeVoicesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDescribeVoices{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeVoices{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeVoices(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "polly",
		OperationName: "DescribeVoices",
	}
}
