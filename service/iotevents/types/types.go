// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// An action to be performed when the condition is TRUE.
type Action struct {

	// Information needed to clear the timer.
	ClearTimer *ClearTimerAction

	// Writes to the DynamoDB table that you created. The default action payload
	// contains all attribute-value pairs that have the information about the detector
	// model instance and the event that triggered the action. You can also customize
	// the payload
	// (https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html).
	// One column of the DynamoDB table receives all attribute-value pairs in the
	// payload that you specify. For more information, see Actions
	// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html)
	// in AWS IoT Events Developer Guide.
	DynamoDB *DynamoDBAction

	// Writes to the DynamoDB table that you created. The default action payload
	// contains all attribute-value pairs that have the information about the detector
	// model instance and the event that triggered the action. You can also customize
	// the payload
	// (https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A
	// separate column of the DynamoDB table receives one attribute-value pair in the
	// payload that you specify. For more information, see Actions
	// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html)
	// in AWS IoT Events Developer Guide.
	DynamoDBv2 *DynamoDBv2Action

	// Sends information about the detector model instance and the event that triggered
	// the action to an Amazon Kinesis Data Firehose delivery stream.
	Firehose *FirehoseAction

	// Sends AWS IoT Events input, which passes information about the detector model
	// instance and the event that triggered the action.
	IotEvents *IotEventsAction

	// Sends information about the detector model instance and the event that triggered
	// the action to an asset property in AWS IoT SiteWise .
	IotSiteWise *IotSiteWiseAction

	// Publishes an MQTT message with the given topic to the AWS IoT message broker.
	IotTopicPublish *IotTopicPublishAction

	// Calls a Lambda function, passing in information about the detector model
	// instance and the event that triggered the action.
	Lambda *LambdaAction

	// Information needed to reset the timer.
	ResetTimer *ResetTimerAction

	// Information needed to set the timer.
	SetTimer *SetTimerAction

	// Sets a variable to a specified value.
	SetVariable *SetVariableAction

	// Sends an Amazon SNS message.
	Sns *SNSTopicPublishAction

	// Sends information about the detector model instance and the event that triggered
	// the action to an Amazon SQS queue.
	Sqs *SqsAction
}

// A structure that contains timestamp information. For more information, see
// TimeInNanos
// (https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html)
// in the AWS IoT SiteWise API Reference. For parameters that are string data type,
// you can specify the following options:
//
// * Use a string. For example, the
// timeInSeconds value can be '1586400675'.
//
// * Use an expression. For example, the
// timeInSeconds value can be
// '${$input.TemperatureInput.sensorData.timestamp/1000}'. For more information,
// see Expressions
// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)
// in the AWS IoT Events Developer Guide.
type AssetPropertyTimestamp struct {

	// The timestamp, in seconds, in the Unix epoch format. The valid range is between
	// 1-31556889864403199. You can also specify an expression.
	//
	// This member is required.
	TimeInSeconds *string

	// The nanosecond offset converted from timeInSeconds. The valid range is between
	// 0-999999999. You can also specify an expression.
	OffsetInNanos *string
}

// A structure that contains value information. For more information, see
// AssetPropertyValue
// (https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html)
// in the AWS IoT SiteWise API Reference. For parameters that are string data type,
// you can specify the following options:
//
// * Use a string. For example, the quality
// value can be 'GOOD'.
//
// * Use an expression. For example, the quality value can be
// $input.TemperatureInput.sensorData.quality . For more information, see
// Expressions
// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)
// in the AWS IoT Events Developer Guide.
type AssetPropertyValue struct {

	// The value to send to an asset property.
	//
	// This member is required.
	Value *AssetPropertyVariant

	// The quality of the asset property value. The value must be GOOD, BAD, or
	// UNCERTAIN. You can also specify an expression.
	Quality *string

	// The timestamp associated with the asset property value. The default is the
	// current event time.
	Timestamp *AssetPropertyTimestamp
}

// A structure that contains an asset property value. For more information, see
// Variant
// (https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html)
// in the AWS IoT SiteWise API Reference. You must specify one of the following
// value types, depending on the dataType of the specified asset property. For more
// information, see AssetProperty
// (https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html)
// in the AWS IoT SiteWise API Reference. For parameters that are string data type,
// you can specify the following options:
//
// * Use a string. For example, the
// doubleValue value can be '47.9'.
//
// * Use an expression. For example, the
// doubleValue value can be $input.TemperatureInput.sensorData.temperature. For
// more information, see Expressions
// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)
// in the AWS IoT Events Developer Guide.
type AssetPropertyVariant struct {

	// The asset property value is a Boolean value that must be TRUE or FALSE. You can
	// also specify an expression. If you use an expression, the evaluated result
	// should be a Boolean value.
	BooleanValue *string

	// The asset property value is a double. You can also specify an expression. If you
	// use an expression, the evaluated result should be a double.
	DoubleValue *string

	// The asset property value is an integer. You can also specify an expression. If
	// you use an expression, the evaluated result should be an integer.
	IntegerValue *string

	// The asset property value is a string. You can also specify an expression. If you
	// use an expression, the evaluated result should be a string.
	StringValue *string
}

// The attributes from the JSON payload that are made available by the input.
// Inputs are derived from messages sent to the AWS IoT Events system using
// BatchPutMessage. Each such message contains a JSON payload. Those attributes
// (and their paired values) specified here are available for use in the condition
// expressions used by detectors.
type Attribute struct {

	// An expression that specifies an attribute-value pair in a JSON structure. Use
	// this to specify an attribute from the JSON payload that is made available by the
	// input. Inputs are derived from messages sent to AWS IoT Events
	// (BatchPutMessage). Each such message contains a JSON payload. The attribute (and
	// its paired value) specified here are available for use in the condition
	// expressions used by detectors. Syntax: ....
	//
	// This member is required.
	JsonPath *string
}

// Information needed to clear the timer.
type ClearTimerAction struct {

	// The name of the timer to clear.
	//
	// This member is required.
	TimerName *string
}

// The detector model and the specific detectors (instances) for which the logging
// level is given.
type DetectorDebugOption struct {

	// The name of the detector model.
	//
	// This member is required.
	DetectorModelName *string

	// The value of the input attribute key used to create the detector (the instance
	// of the detector model).
	KeyValue *string
}

// Information about the detector model.
type DetectorModel struct {

	// Information about how the detector is configured.
	DetectorModelConfiguration *DetectorModelConfiguration

	// Information that defines how a detector operates.
	DetectorModelDefinition *DetectorModelDefinition
}

// Information about how the detector model is configured.
type DetectorModelConfiguration struct {

	// The time the detector model was created.
	CreationTime *time.Time

	// The ARN of the detector model.
	DetectorModelArn *string

	// A brief description of the detector model.
	DetectorModelDescription *string

	// The name of the detector model.
	DetectorModelName *string

	// The version of the detector model.
	DetectorModelVersion *string

	// Information about the order in which events are evaluated and how actions are
	// executed.
	EvaluationMethod EvaluationMethod

	// The value used to identify a detector instance. When a device or system sends
	// input, a new detector instance with a unique key value is created. AWS IoT
	// Events can continue to route input to its corresponding detector instance based
	// on this identifying information. This parameter uses a JSON-path expression to
	// select the attribute-value pair in the message payload that is used for
	// identification. To route the message to the correct detector instance, the
	// device must send a message payload that contains the same attribute-value.
	Key *string

	// The time the detector model was last updated.
	LastUpdateTime *time.Time

	// The ARN of the role that grants permission to AWS IoT Events to perform its
	// operations.
	RoleArn *string

	// The status of the detector model.
	Status DetectorModelVersionStatus
}

// Information that defines how a detector operates.
type DetectorModelDefinition struct {

	// The state that is entered at the creation of each detector (instance).
	//
	// This member is required.
	InitialStateName *string

	// Information about the states of the detector.
	//
	// This member is required.
	States []State
}

// Information about the detector model.
type DetectorModelSummary struct {

	// The time the detector model was created.
	CreationTime *time.Time

	// A brief description of the detector model.
	DetectorModelDescription *string

	// The name of the detector model.
	DetectorModelName *string
}

// Information about the detector model version.
type DetectorModelVersionSummary struct {

	// The time the detector model version was created.
	CreationTime *time.Time

	// The ARN of the detector model version.
	DetectorModelArn *string

	// The name of the detector model.
	DetectorModelName *string

	// The ID of the detector model version.
	DetectorModelVersion *string

	// Information about the order in which events are evaluated and how actions are
	// executed.
	EvaluationMethod EvaluationMethod

	// The last time the detector model version was updated.
	LastUpdateTime *time.Time

	// The ARN of the role that grants the detector model permission to perform its
	// tasks.
	RoleArn *string

	// The status of the detector model version.
	Status DetectorModelVersionStatus
}

// Defines an action to write to the Amazon DynamoDB table that you created. The
// standard action payload contains all attribute-value pairs that have the
// information about the detector model instance and the event that triggered the
// action. You can also customize the payload
// (https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html).
// One column of the DynamoDB table receives all attribute-value pairs in the
// payload that you specify. The tableName and hashKeyField values must match the
// table name and the partition key of the DynamoDB table. If the DynamoDB table
// also has a sort key, you must specify rangeKeyField. The rangeKeyField value
// must match the sort key. The hashKeyValue and rangeKeyValue use substitution
// templates. These templates provide data at runtime. The syntax is
// ${sql-expression}. You can use expressions for parameters that are string data
// type. For more information, see Expressions
// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)
// in the AWS IoT Events Developer Guide. If the defined payload type is a string,
// DynamoDBAction writes non-JSON data to the DynamoDB table as binary data. The
// DynamoDB console displays the data as Base64-encoded text. The payloadField is
// _raw.
type DynamoDBAction struct {

	// The name of the hash key (also called the partition key).
	//
	// This member is required.
	HashKeyField *string

	// The value of the hash key (also called the partition key).
	//
	// This member is required.
	HashKeyValue *string

	// The name of the DynamoDB table.
	//
	// This member is required.
	TableName *string

	// The data type for the hash key (also called the partition key). You can specify
	// the following values:
	//
	// * STRING - The hash key is a string.
	//
	// * NUMBER - The hash
	// key is a number.
	//
	// If you don't specify hashKeyType, the default value is STRING.
	HashKeyType *string

	// The type of operation to perform. You can specify the following values:
	//
	// *
	// INSERT - Insert data as a new item into the DynamoDB table. This item uses the
	// specified hash key as a partition key. If you specified a range key, the item
	// uses the range key as a sort key.
	//
	// * UPDATE - Update an existing item of the
	// DynamoDB table with new data. This item's partition key must match the specified
	// hash key. If you specified a range key, the range key must match the item's sort
	// key.
	//
	// * DELETE - Delete an existing item of the DynamoDB table. This item's
	// partition key must match the specified hash key. If you specified a range key,
	// the range key must match the item's sort key.
	//
	// If you don't specify this
	// parameter, AWS IoT Events triggers the INSERT operation.
	Operation *string

	// Information needed to configure the payload. By default, AWS IoT Events
	// generates a standard payload in JSON for any action. This action payload
	// contains all attribute-value pairs that have the information about the detector
	// model instance and the event triggered the action. To configure the action
	// payload, you can use contentExpression.
	Payload *Payload

	// The name of the DynamoDB column that receives the action payload. If you don't
	// specify this parameter, the name of the DynamoDB column is payload.
	PayloadField *string

	// The name of the range key (also called the sort key).
	RangeKeyField *string

	// The data type for the range key (also called the sort key), You can specify the
	// following values:
	//
	// * STRING - The range key is a string.
	//
	// * NUMBER - The range
	// key is number.
	//
	// If you don't specify rangeKeyField, the default value is STRING.
	RangeKeyType *string

	// The value of the range key (also called the sort key).
	RangeKeyValue *string
}

// Defines an action to write to the Amazon DynamoDB table that you created. The
// default action payload contains all attribute-value pairs that have the
// information about the detector model instance and the event that triggered the
// action. You can also customize the payload
// (https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A
// separate column of the DynamoDB table receives one attribute-value pair in the
// payload that you specify. The type value for Payload must be JSON. You can use
// expressions for parameters that are strings. For more information, see
// Expressions
// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)
// in the AWS IoT Events Developer Guide.
type DynamoDBv2Action struct {

	// The name of the DynamoDB table.
	//
	// This member is required.
	TableName *string

	// Information needed to configure the payload. By default, AWS IoT Events
	// generates a standard payload in JSON for any action. This action payload
	// contains all attribute-value pairs that have the information about the detector
	// model instance and the event triggered the action. To configure the action
	// payload, you can use contentExpression.
	Payload *Payload
}

// Specifies the actions to be performed when the condition evaluates to TRUE.
type Event struct {

	// The name of the event.
	//
	// This member is required.
	EventName *string

	// The actions to be performed.
	Actions []Action

	// Optional. The Boolean expression that, when TRUE, causes the actions to be
	// performed. If not present, the actions are performed (=TRUE). If the expression
	// result is not a Boolean value, the actions are not performed (=FALSE).
	Condition *string
}

// Sends information about the detector model instance and the event that triggered
// the action to an Amazon Kinesis Data Firehose delivery stream.
type FirehoseAction struct {

	// The name of the Kinesis Data Firehose delivery stream where the data is written.
	//
	// This member is required.
	DeliveryStreamName *string

	// You can configure the action payload when you send a message to an Amazon
	// Kinesis Data Firehose delivery stream.
	Payload *Payload

	// A character separator that is used to separate records written to the Kinesis
	// Data Firehose delivery stream. Valid values are: '\n' (newline), '\t' (tab),
	// '\r\n' (Windows newline), ',' (comma).
	Separator *string
}

// Information about the input.
type Input struct {

	// Information about the configuration of an input.
	InputConfiguration *InputConfiguration

	// The definition of the input.
	InputDefinition *InputDefinition
}

// Information about the configuration of an input.
type InputConfiguration struct {

	// The time the input was created.
	//
	// This member is required.
	CreationTime *time.Time

	// The ARN of the input.
	//
	// This member is required.
	InputArn *string

	// The name of the input.
	//
	// This member is required.
	InputName *string

	// The last time the input was updated.
	//
	// This member is required.
	LastUpdateTime *time.Time

	// The status of the input.
	//
	// This member is required.
	Status InputStatus

	// A brief description of the input.
	InputDescription *string
}

// The definition of the input.
type InputDefinition struct {

	// The attributes from the JSON payload that are made available by the input.
	// Inputs are derived from messages sent to the AWS IoT Events system using
	// BatchPutMessage. Each such message contains a JSON payload, and those attributes
	// (and their paired values) specified here are available for use in the condition
	// expressions used by detectors that monitor this input.
	//
	// This member is required.
	Attributes []Attribute
}

// Information about the input.
type InputSummary struct {

	// The time the input was created.
	CreationTime *time.Time

	// The ARN of the input.
	InputArn *string

	// A brief description of the input.
	InputDescription *string

	// The name of the input.
	InputName *string

	// The last time the input was updated.
	LastUpdateTime *time.Time

	// The status of the input.
	Status InputStatus
}

// Sends an AWS IoT Events input, passing in information about the detector model
// instance and the event that triggered the action.
type IotEventsAction struct {

	// The name of the AWS IoT Events input where the data is sent.
	//
	// This member is required.
	InputName *string

	// You can configure the action payload when you send a message to an AWS IoT
	// Events input.
	Payload *Payload
}

// Sends information about the detector model instance and the event that triggered
// the action to a specified asset property in AWS IoT SiteWise. You must specify
// either propertyAlias or both assetId and propertyId to identify the target asset
// property in AWS IoT SiteWise. For parameters that are string data type, you can
// specify the following options:
//
// * Use a string. For example, the propertyAlias
// value can be '/company/windfarm/3/turbine/7/temperature'.
//
// * Use an expression.
// For example, the propertyAlias value can be
// 'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/${$input.TemperatureInput.sensorData.turbineID}/temperature'.
// For more information, see Expressions
// (https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)
// in the AWS IoT Events Developer Guide.
type IotSiteWiseAction struct {

	// The value to send to the asset property. This value contains timestamp, quality,
	// and value (TQV) information.
	//
	// This member is required.
	PropertyValue *AssetPropertyValue

	// The ID of the asset that has the specified property. You can specify an
	// expression.
	AssetId *string

	// A unique identifier for this entry. You can use the entry ID to track which data
	// entry causes an error in case of failure. The default is a new unique
	// identifier. You can also specify an expression.
	EntryId *string

	// The alias of the asset property. You can also specify an expression.
	PropertyAlias *string

	// The ID of the asset property. You can specify an expression.
	PropertyId *string
}

// Information required to publish the MQTT message through the AWS IoT message
// broker.
type IotTopicPublishAction struct {

	// The MQTT topic of the message. You can use a string expression that includes
	// variables ($variable.) and input values ($input..) as the topic string.
	//
	// This member is required.
	MqttTopic *string

	// You can configure the action payload when you publish a message to an AWS IoT
	// Core topic.
	Payload *Payload
}

// Calls a Lambda function, passing in information about the detector model
// instance and the event that triggered the action.
type LambdaAction struct {

	// The ARN of the Lambda function that is executed.
	//
	// This member is required.
	FunctionArn *string

	// You can configure the action payload when you send a message to a Lambda
	// function.
	Payload *Payload
}

// The values of the AWS IoT Events logging options.
type LoggingOptions struct {

	// If TRUE, logging is enabled for AWS IoT Events.
	//
	// This member is required.
	Enabled bool

	// The logging level.
	//
	// This member is required.
	Level LoggingLevel

	// The ARN of the role that grants permission to AWS IoT Events to perform logging.
	//
	// This member is required.
	RoleArn *string

	// Information that identifies those detector models and their detectors
	// (instances) for which the logging level is given.
	DetectorDebugOptions []DetectorDebugOption
}

// When entering this state, perform these actions if the condition is TRUE.
type OnEnterLifecycle struct {

	// Specifies the actions that are performed when the state is entered and the
	// condition is TRUE.
	Events []Event
}

// When exiting this state, perform these actions if the specified condition is
// TRUE.
type OnExitLifecycle struct {

	// Specifies the actions that are performed when the state is exited and the
	// condition is TRUE.
	Events []Event
}

// Specifies the actions performed when the condition evaluates to TRUE.
type OnInputLifecycle struct {

	// Specifies the actions performed when the condition evaluates to TRUE.
	Events []Event

	// Specifies the actions performed, and the next state entered, when a condition
	// evaluates to TRUE.
	TransitionEvents []TransitionEvent
}

// Information needed to configure the payload. By default, AWS IoT Events
// generates a standard payload in JSON for any action. This action payload
// contains all attribute-value pairs that have the information about the detector
// model instance and the event triggered the action. To configure the action
// payload, you can use contentExpression.
type Payload struct {

	// The content of the payload. You can use a string expression that includes quoted
	// strings (''), variables ($variable.), input values ($input..), string
	// concatenations, and quoted strings that contain ${} as the content. The
	// recommended maximum size of a content expression is 1 KB.
	//
	// This member is required.
	ContentExpression *string

	// The value of the payload type can be either STRING or JSON.
	//
	// This member is required.
	Type PayloadType
}

// Information required to reset the timer. The timer is reset to the previously
// evaluated result of the duration. The duration expression isn't reevaluated when
// you reset the timer.
type ResetTimerAction struct {

	// The name of the timer to reset.
	//
	// This member is required.
	TimerName *string
}

// Information needed to set the timer.
type SetTimerAction struct {

	// The name of the timer.
	//
	// This member is required.
	TimerName *string

	// The duration of the timer, in seconds. You can use a string expression that
	// includes numbers, variables ($variable.), and input values ($input..) as the
	// duration. The range of the duration is 1-31622400 seconds. To ensure accuracy,
	// the minimum duration is 60 seconds. The evaluated result of the duration is
	// rounded down to the nearest whole number.
	DurationExpression *string

	// The number of seconds until the timer expires. The minimum value is 60 seconds
	// to ensure accuracy. The maximum value is 31622400 seconds.
	//
	// Deprecated: seconds is deprecated. You can use durationExpression for
	// SetTimerAction. The value of seconds can be used as a string expression for
	// durationExpression.
	Seconds *int32
}

// Information about the variable and its new value.
type SetVariableAction struct {

	// The new value of the variable.
	//
	// This member is required.
	Value *string

	// The name of the variable.
	//
	// This member is required.
	VariableName *string
}

// Information required to publish the Amazon SNS message.
type SNSTopicPublishAction struct {

	// The ARN of the Amazon SNS target where the message is sent.
	//
	// This member is required.
	TargetArn *string

	// You can configure the action payload when you send a message as an Amazon SNS
	// push notification.
	Payload *Payload
}

// Sends information about the detector model instance and the event that triggered
// the action to an Amazon SQS queue.
type SqsAction struct {

	// The URL of the SQS queue where the data is written.
	//
	// This member is required.
	QueueUrl *string

	// You can configure the action payload when you send a message to an Amazon SQS
	// queue.
	Payload *Payload

	// Set this to TRUE if you want the data to be base-64 encoded before it is written
	// to the queue. Otherwise, set this to FALSE.
	UseBase64 *bool
}

// Information that defines a state of a detector.
type State struct {

	// The name of the state.
	//
	// This member is required.
	StateName *string

	// When entering this state, perform these actions if the condition is TRUE.
	OnEnter *OnEnterLifecycle

	// When exiting this state, perform these actions if the specified condition is
	// TRUE.
	OnExit *OnExitLifecycle

	// When an input is received and the condition is TRUE, perform the specified
	// actions.
	OnInput *OnInputLifecycle
}

// Metadata that can be used to manage the resource.
type Tag struct {

	// The tag's key.
	//
	// This member is required.
	Key *string

	// The tag's value.
	//
	// This member is required.
	Value *string
}

// Specifies the actions performed and the next state entered when a condition
// evaluates to TRUE.
type TransitionEvent struct {

	// Required. A Boolean expression that when TRUE causes the actions to be performed
	// and the nextState to be entered.
	//
	// This member is required.
	Condition *string

	// The name of the transition event.
	//
	// This member is required.
	EventName *string

	// The next state to enter.
	//
	// This member is required.
	NextState *string

	// The actions to be performed.
	Actions []Action
}
