// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iotevents

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

type VerifyResourcesExistForTagrisInput struct {
	_ struct{} `type:"structure"`

	// TagrisSweepList is a required field
	TagrisSweepList []TagrisSweepListItem `type:"list" required:"true"`
}

// String returns the string representation
func (s VerifyResourcesExistForTagrisInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *VerifyResourcesExistForTagrisInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "VerifyResourcesExistForTagrisInput"}

	if s.TagrisSweepList == nil {
		invalidParams.Add(aws.NewErrParamRequired("TagrisSweepList"))
	}
	if s.TagrisSweepList != nil {
		for i, v := range s.TagrisSweepList {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "TagrisSweepList", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s VerifyResourcesExistForTagrisInput) MarshalFields(e protocol.FieldEncoder) error {
	e.SetValue(protocol.HeaderTarget, "Content-Type", protocol.StringValue("application/json"), protocol.Metadata{})

	if s.TagrisSweepList != nil {
		v := s.TagrisSweepList

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "TagrisSweepList", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

type VerifyResourcesExistForTagrisOutput struct {
	_ struct{} `type:"structure"`

	// TagrisSweepListResult is a required field
	TagrisSweepListResult map[string]TagrisStatus `type:"map" required:"true"`
}

// String returns the string representation
func (s VerifyResourcesExistForTagrisOutput) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s VerifyResourcesExistForTagrisOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.TagrisSweepListResult != nil {
		v := s.TagrisSweepListResult

		metadata := protocol.Metadata{}
		ms0 := e.Map(protocol.BodyTarget, "TagrisSweepListResult", metadata)
		ms0.Start()
		for k1, v1 := range v {
			ms0.MapSetValue(k1, protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ms0.End()

	}
	return nil
}

const opVerifyResourcesExistForTagris = "VerifyResourcesExistForTagris"

// VerifyResourcesExistForTagrisRequest returns a request value for making API operation for
// AWS IoT Events.
//
//    // Example sending a request using VerifyResourcesExistForTagrisRequest.
//    req := client.VerifyResourcesExistForTagrisRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/iotevents-2018-07-27/VerifyResourcesExistForTagris
func (c *Client) VerifyResourcesExistForTagrisRequest(input *VerifyResourcesExistForTagrisInput) VerifyResourcesExistForTagrisRequest {
	op := &aws.Operation{
		Name:       opVerifyResourcesExistForTagris,
		HTTPMethod: "GET",
		HTTPPath:   "/internal/tags/resource-status",
	}

	if input == nil {
		input = &VerifyResourcesExistForTagrisInput{}
	}

	req := c.newRequest(op, input, &VerifyResourcesExistForTagrisOutput{})
	return VerifyResourcesExistForTagrisRequest{Request: req, Input: input, Copy: c.VerifyResourcesExistForTagrisRequest}
}

// VerifyResourcesExistForTagrisRequest is the request type for the
// VerifyResourcesExistForTagris API operation.
type VerifyResourcesExistForTagrisRequest struct {
	*aws.Request
	Input *VerifyResourcesExistForTagrisInput
	Copy  func(*VerifyResourcesExistForTagrisInput) VerifyResourcesExistForTagrisRequest
}

// Send marshals and sends the VerifyResourcesExistForTagris API request.
func (r VerifyResourcesExistForTagrisRequest) Send(ctx context.Context) (*VerifyResourcesExistForTagrisResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &VerifyResourcesExistForTagrisResponse{
		VerifyResourcesExistForTagrisOutput: r.Request.Data.(*VerifyResourcesExistForTagrisOutput),
		response:                            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// VerifyResourcesExistForTagrisResponse is the response type for the
// VerifyResourcesExistForTagris API operation.
type VerifyResourcesExistForTagrisResponse struct {
	*VerifyResourcesExistForTagrisOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// VerifyResourcesExistForTagris request.
func (r *VerifyResourcesExistForTagrisResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
