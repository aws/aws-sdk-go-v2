// Code generated by smithy-go-codegen DO NOT EDIT.

package iotsecuretunneling

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/iotsecuretunneling/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new tunnel, and returns two client access tokens for clients to use to
// connect to the AWS IoT Secure Tunneling proxy server. .
func (c *Client) OpenTunnel(ctx context.Context, params *OpenTunnelInput, optFns ...func(*Options)) (*OpenTunnelOutput, error) {
	stack := middleware.NewStack("OpenTunnel", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpOpenTunnelMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpOpenTunnelValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opOpenTunnel(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "OpenTunnel",
			Err:           err,
		}
	}
	out := result.(*OpenTunnelOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type OpenTunnelInput struct {
	// A collection of tag metadata.
	Tags []*types.Tag
	// Timeout configuration for a tunnel.
	TimeoutConfig *types.TimeoutConfig
	// The destination configuration for the OpenTunnel request.
	DestinationConfig *types.DestinationConfig
	// A short text description of the tunnel.
	Description *string
}

type OpenTunnelOutput struct {
	// The Amazon Resource Name for the tunnel. The tunnel ARN format is
	// arn:aws:tunnel:::tunnel/
	TunnelArn *string
	// The access token the destination local proxy uses to connect to AWS IoT Secure
	// Tunneling.
	DestinationAccessToken *string
	// The access token the source local proxy uses to connect to AWS IoT Secure
	// Tunneling.
	SourceAccessToken *string
	// A unique alpha-numeric tunnel ID.
	TunnelId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpOpenTunnelMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpOpenTunnel{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpOpenTunnel{}, middleware.After)
}

func newServiceMetadataMiddleware_opOpenTunnel(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "iotsecuredtunneling",
		OperationName: "OpenTunnel",
	}
}
