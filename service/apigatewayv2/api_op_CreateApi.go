// Code generated by smithy-go-codegen DO NOT EDIT.

package apigatewayv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Creates an Api resource.
func (c *Client) CreateApi(ctx context.Context, params *CreateApiInput, optFns ...func(*Options)) (*CreateApiOutput, error) {
	stack := middleware.NewStack("CreateApi", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateApiMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateApiValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateApi(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateApi",
			Err:           err,
		}
	}
	out := result.(*CreateApiOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Creates a new Api resource to represent an API.
type CreateApiInput struct {
	// A CORS configuration. Supported only for HTTP APIs. See Configuring CORS
	// (https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html)
	// for more information.
	CorsConfiguration *types.Cors
	// This property is part of quick create. It specifies the credentials required for
	// the integration, if any. For a Lambda integration, three options are available.
	// To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource
	// Name (ARN). To require that the caller's identity be passed through from the
	// request, specify arn:aws:iam::*:user/*. To use resource-based permissions on
	// supported AWS services, specify null. Currently, this property is not used for
	// HTTP integrations. Supported only for HTTP APIs.
	CredentialsArn *string
	// A version identifier for the API.
	Version *string
	// The description of the API.
	Description *string
	// This property is part of quick create. If you don't specify a routeKey, a
	// default route of $default is created. The $default route acts as a catch-all for
	// any request made to your API, for a particular stage. The $default route key
	// can't be modified. You can add routes after creating the API, and you can update
	// the route keys of additional routes. Supported only for HTTP APIs.
	RouteKey *string
	// This property is part of quick create. Quick create produces an API with an
	// integration, a default catch-all route, and a default stage which is configured
	// to automatically deploy changes. For HTTP integrations, specify a fully
	// qualified URL. For Lambda integrations, specify a function ARN. The type of the
	// integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for
	// HTTP APIs.
	Target *string
	// Avoid validating models when creating a deployment. Supported only for WebSocket
	// APIs.
	DisableSchemaValidation *bool
	// The collection of tags. Each tag element is associated with a given resource.
	Tags map[string]*string
	// The name of the API.
	Name *string
	// An API key selection expression. Supported only for WebSocket APIs. See API Key
	// Selection Expressions
	// (https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
	ApiKeySelectionExpression *string
	// The route selection expression for the API. For HTTP APIs, the
	// routeSelectionExpression must be ${request.method} ${request.path}. If not
	// provided, this will be the default for HTTP APIs. This property is required for
	// WebSocket APIs.
	RouteSelectionExpression *string
	// The API protocol.
	ProtocolType types.ProtocolType
}

type CreateApiOutput struct {
	// The name of the API.
	Name *string
	// The API protocol.
	ProtocolType types.ProtocolType
	// The route selection expression for the API. For HTTP APIs, the
	// routeSelectionExpression must be ${request.method} ${request.path}. If not
	// provided, this will be the default for HTTP APIs. This property is required for
	// WebSocket APIs.
	RouteSelectionExpression *string
	// The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The
	// stage name is typically appended to this URI to form a complete path to a
	// deployed API stage.
	ApiEndpoint *string
	// Avoid validating models when creating a deployment. Supported only for WebSocket
	// APIs.
	DisableSchemaValidation *bool
	// The validation information during API import. This may include particular
	// properties of your OpenAPI definition which are ignored during import. Supported
	// only for HTTP APIs.
	ImportInfo []*string
	// The description of the API.
	Description *string
	// The warning messages reported when failonwarnings is turned on during API
	// import.
	Warnings []*string
	// The API ID.
	ApiId *string
	// An API key selection expression. Supported only for WebSocket APIs. See API Key
	// Selection Expressions
	// (https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
	ApiKeySelectionExpression *string
	// A version identifier for the API.
	Version *string
	// A CORS configuration. Supported only for HTTP APIs.
	CorsConfiguration *types.Cors
	// A collection of tags associated with the API.
	Tags map[string]*string
	// The timestamp when the API was created.
	CreatedDate *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateApiMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateApi{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateApi{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateApi(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "apigateway",
		OperationName: "CreateApi",
	}
}
