// Code generated by smithy-go-codegen DO NOT EDIT.

package apigatewayv2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

func (c *Client) ExportApi(ctx context.Context, params *ExportApiInput, optFns ...func(*Options)) (*ExportApiOutput, error) {
	stack := middleware.NewStack("ExportApi", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpExportApiMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpExportApiValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opExportApi(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ExportApi",
			Err:           err,
		}
	}
	out := result.(*ExportApiOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ExportApiInput struct {
	// The version of the API Gateway export algorithm. API Gateway uses the latest
	// version by default. Currently, the only supported version is 1.0.
	ExportVersion *string
	// The output type of the exported definition file. Valid values are JSON and YAML.
	OutputType *string
	// The name of the API stage to export. If you don't specify this property, a
	// representation of the latest API configuration is exported.
	StageName *string
	// The API identifier.
	ApiId *string
	// Specifies whether to include API Gateway extensions
	// (https://docs.aws.amazon.com//apigateway/latest/developerguide/api-gateway-swagger-extensions.html)
	// in the exported API definition. API Gateway extensions are included by default.
	IncludeExtensions *bool
	// The version of the API specification to use. OAS30, for OpenAPI 3.0, is the only
	// supported value.
	Specification *string
}

type ExportApiOutput struct {
	// Represents an exported definition of an API in a particular output format, for
	// example, YAML. The API is serialized to the requested specification, for
	// example, OpenAPI 3.0.
	Body []byte

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpExportApiMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpExportApi{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpExportApi{}, middleware.After)
}

func newServiceMetadataMiddleware_opExportApi(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "apigateway",
		OperationName: "ExportApi",
	}
}
