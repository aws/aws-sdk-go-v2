// Code generated by smithy-go-codegen DO NOT EDIT.

package macie

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/macie/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Associates specified S3 resources with Amazon Macie Classic for monitoring and
// data classification. If memberAccountId isn't specified, the action associates
// specified S3 resources with Macie Classic for the current master account. If
// memberAccountId is specified, the action associates specified S3 resources with
// Macie Classic for the specified member account.
func (c *Client) AssociateS3Resources(ctx context.Context, params *AssociateS3ResourcesInput, optFns ...func(*Options)) (*AssociateS3ResourcesOutput, error) {
	stack := middleware.NewStack("AssociateS3Resources", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpAssociateS3ResourcesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpAssociateS3ResourcesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAssociateS3Resources(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "AssociateS3Resources",
			Err:           err,
		}
	}
	out := result.(*AssociateS3ResourcesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AssociateS3ResourcesInput struct {
	// The S3 resources that you want to associate with Amazon Macie Classic for
	// monitoring and data classification.
	S3Resources []*types.S3ResourceClassification
	// The ID of the Amazon Macie Classic member account whose resources you want to
	// associate with Macie Classic.
	MemberAccountId *string
}

type AssociateS3ResourcesOutput struct {
	// S3 resources that couldn't be associated with Amazon Macie Classic. An error
	// code and an error message are provided for each failed item.
	FailedS3Resources []*types.FailedS3Resource

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpAssociateS3ResourcesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpAssociateS3Resources{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpAssociateS3Resources{}, middleware.After)
}

func newServiceMetadataMiddleware_opAssociateS3Resources(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "macie",
		OperationName: "AssociateS3Resources",
	}
}
