// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/internal/aws_restjson"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
)

const opDeleteAuthorizer = "DeleteAuthorizer"

// DeleteAuthorizerRequest returns a request value for making API operation for
// Amazon API Gateway.
//
// Deletes an existing Authorizer resource.
//
// AWS CLI (https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html)
//
//    // Example sending a request using DeleteAuthorizerRequest.
//    req := client.DeleteAuthorizerRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) DeleteAuthorizerRequest(input *types.DeleteAuthorizerInput) DeleteAuthorizerRequest {
	op := &aws.Operation{
		Name:       opDeleteAuthorizer,
		HTTPMethod: "DELETE",
		HTTPPath:   "/restapis/{restapi_id}/authorizers/{authorizer_id}",
	}

	if input == nil {
		input = &types.DeleteAuthorizerInput{}
	}

	req := c.newRequest(op, input, &types.DeleteAuthorizerOutput{})

	// swap existing build handler on svc, with a new named build handler
	req.Handlers.Build.Swap(restjson.BuildHandler.Name, aws_restjson.DeleteAuthorizerMarshaler{Input: input}.GetNamedBuildHandler())

	req.Handlers.Unmarshal.Remove(restjson.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return DeleteAuthorizerRequest{Request: req, Input: input, Copy: c.DeleteAuthorizerRequest}
}

// DeleteAuthorizerRequest is the request type for the
// DeleteAuthorizer API operation.
type DeleteAuthorizerRequest struct {
	*aws.Request
	Input *types.DeleteAuthorizerInput
	Copy  func(*types.DeleteAuthorizerInput) DeleteAuthorizerRequest
}

// Send marshals and sends the DeleteAuthorizer API request.
func (r DeleteAuthorizerRequest) Send(ctx context.Context) (*DeleteAuthorizerResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeleteAuthorizerResponse{
		DeleteAuthorizerOutput: r.Request.Data.(*types.DeleteAuthorizerOutput),
		response:               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeleteAuthorizerResponse is the response type for the
// DeleteAuthorizer API operation.
type DeleteAuthorizerResponse struct {
	*types.DeleteAuthorizerOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeleteAuthorizer request.
func (r *DeleteAuthorizerResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
