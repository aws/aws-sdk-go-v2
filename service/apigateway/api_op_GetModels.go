// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/internal/aws_restjson"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
)

const opGetModels = "GetModels"

// GetModelsRequest returns a request value for making API operation for
// Amazon API Gateway.
//
// Describes existing Models defined for a RestApi resource.
//
//    // Example sending a request using GetModelsRequest.
//    req := client.GetModelsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) GetModelsRequest(input *types.GetModelsInput) GetModelsRequest {
	op := &aws.Operation{
		Name:       opGetModels,
		HTTPMethod: "GET",
		HTTPPath:   "/restapis/{restapi_id}/models",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"position"},
			OutputTokens:    []string{"position"},
			LimitToken:      "limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetModelsInput{}
	}

	req := c.newRequest(op, input, &types.GetModelsOutput{})

	// swap existing build handler on svc, with a new named build handler
	req.Handlers.Build.Swap(restjson.BuildHandler.Name, aws_restjson.GetModelsMarshaler{Input: input}.GetNamedBuildHandler())

	return GetModelsRequest{Request: req, Input: input, Copy: c.GetModelsRequest}
}

// GetModelsRequest is the request type for the
// GetModels API operation.
type GetModelsRequest struct {
	*aws.Request
	Input *types.GetModelsInput
	Copy  func(*types.GetModelsInput) GetModelsRequest
}

// Send marshals and sends the GetModels API request.
func (r GetModelsRequest) Send(ctx context.Context) (*GetModelsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetModelsResponse{
		GetModelsOutput: r.Request.Data.(*types.GetModelsOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetModelsRequestPaginator returns a paginator for GetModels.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetModelsRequest(input)
//   p := apigateway.NewGetModelsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetModelsPaginator(req GetModelsRequest) GetModelsPaginator {
	return GetModelsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetModelsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetModelsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetModelsPaginator struct {
	aws.Pager
}

func (p *GetModelsPaginator) CurrentPage() *types.GetModelsOutput {
	return p.Pager.CurrentPage().(*types.GetModelsOutput)
}

// GetModelsResponse is the response type for the
// GetModels API operation.
type GetModelsResponse struct {
	*types.GetModelsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetModels request.
func (r *GetModelsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
