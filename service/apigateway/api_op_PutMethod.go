// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
)

const opPutMethod = "PutMethod"

// PutMethodRequest returns a request value for making API operation for
// Amazon API Gateway.
//
// Add a method to an existing Resource resource.
//
//    // Example sending a request using PutMethodRequest.
//    req := client.PutMethodRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) PutMethodRequest(input *types.PutMethodInput) PutMethodRequest {
	op := &aws.Operation{
		Name:       opPutMethod,
		HTTPMethod: "PUT",
		HTTPPath:   "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
	}

	if input == nil {
		input = &types.PutMethodInput{}
	}

	req := c.newRequest(op, input, &types.PutMethodOutput{})
	return PutMethodRequest{Request: req, Input: input, Copy: c.PutMethodRequest}
}

// PutMethodRequest is the request type for the
// PutMethod API operation.
type PutMethodRequest struct {
	*aws.Request
	Input *types.PutMethodInput
	Copy  func(*types.PutMethodInput) PutMethodRequest
}

// Send marshals and sends the PutMethod API request.
func (r PutMethodRequest) Send(ctx context.Context) (*PutMethodResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutMethodResponse{
		PutMethodOutput: r.Request.Data.(*types.PutMethodOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutMethodResponse is the response type for the
// PutMethod API operation.
type PutMethodResponse struct {
	*types.PutMethodOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutMethod request.
func (r *PutMethodResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
