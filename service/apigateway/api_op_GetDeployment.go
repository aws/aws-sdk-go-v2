// Code generated by smithy-go-codegen DO NOT EDIT.

package apigateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Gets information about a Deployment () resource.
func (c *Client) GetDeployment(ctx context.Context, params *GetDeploymentInput, optFns ...func(*Options)) (*GetDeploymentOutput, error) {
	stack := middleware.NewStack("GetDeployment", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetDeploymentMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetDeploymentValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetDeployment(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetDeployment",
			Err:           err,
		}
	}
	out := result.(*GetDeploymentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Requests API Gateway to get information about a Deployment () resource.
type GetDeploymentInput struct {
	TemplateSkipList []*string
	Title            *string
	Name             *string
	// A query parameter to retrieve the specified embedded resources of the returned
	// Deployment () resource in the response. In a REST API call, this embed parameter
	// value is a list of comma-separated strings, as in GET
	// /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2. The SDK and
	// other platform-dependent libraries might use a different format for the list.
	// Currently, this request supports only retrieval of the embedded API summary this
	// way. Hence, the parameter value must be a single-valued list containing only the
	// "apisummary" string. For example, GET
	// /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary.
	Embed []*string
	// [Required] The string identifier of the associated RestApi ().
	RestApiId *string
	// [Required] The identifier of the Deployment () resource to get information
	// about.
	DeploymentId *string
	Template     *bool
}

// An immutable representation of a RestApi () resource that can be called by users
// using Stages (). A deployment must be associated with a Stage () for it to be
// callable over the Internet. To create a deployment, call POST on the Deployments
// () resource of a RestApi (). To view, update, or delete a deployment, call GET,
// PATCH, or DELETE on the specified deployment resource
// (/restapis/{restapi_id}/deployments/{deployment_id}). RestApi (), Deployments
// (), Stage (), AWS CLI
// (https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-deployment.html),
// AWS SDKs (https://aws.amazon.com/tools/)
type GetDeploymentOutput struct {
	// The date and time that the deployment resource was created.
	CreatedDate *time.Time
	// A summary of the RestApi () at the date and time that the deployment resource
	// was created.
	ApiSummary map[string]map[string]*types.MethodSnapshot
	// The identifier for the deployment resource.
	Id *string
	// The description for the deployment resource.
	Description *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetDeploymentMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetDeployment{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetDeployment{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetDeployment(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "apigateway",
		OperationName: "GetDeployment",
	}
}
