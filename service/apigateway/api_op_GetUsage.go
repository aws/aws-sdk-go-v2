// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package apigateway

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/internal/aws_restjson"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
)

const opGetUsage = "GetUsage"

// GetUsageRequest returns a request value for making API operation for
// Amazon API Gateway.
//
// Gets the usage data of a usage plan in a specified time interval.
//
//    // Example sending a request using GetUsageRequest.
//    req := client.GetUsageRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) GetUsageRequest(input *types.GetUsageInput) GetUsageRequest {
	op := &aws.Operation{
		Name:       opGetUsage,
		HTTPMethod: "GET",
		HTTPPath:   "/usageplans/{usageplanId}/usage",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"position"},
			OutputTokens:    []string{"position"},
			LimitToken:      "limit",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetUsageInput{}
	}

	req := c.newRequest(op, input, &types.GetUsageOutput{})

	// swap existing build handler on svc, with a new named build handler
	req.Handlers.Build.Swap(restjson.BuildHandler.Name, aws_restjson.GetUsageMarshaler{Input: input}.GetNamedBuildHandler())

	return GetUsageRequest{Request: req, Input: input, Copy: c.GetUsageRequest}
}

// GetUsageRequest is the request type for the
// GetUsage API operation.
type GetUsageRequest struct {
	*aws.Request
	Input *types.GetUsageInput
	Copy  func(*types.GetUsageInput) GetUsageRequest
}

// Send marshals and sends the GetUsage API request.
func (r GetUsageRequest) Send(ctx context.Context) (*GetUsageResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetUsageResponse{
		GetUsageOutput: r.Request.Data.(*types.GetUsageOutput),
		response:       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetUsageRequestPaginator returns a paginator for GetUsage.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetUsageRequest(input)
//   p := apigateway.NewGetUsageRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetUsagePaginator(req GetUsageRequest) GetUsagePaginator {
	return GetUsagePaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetUsageInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetUsagePaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetUsagePaginator struct {
	aws.Pager
}

func (p *GetUsagePaginator) CurrentPage() *types.GetUsageOutput {
	return p.Pager.CurrentPage().(*types.GetUsageOutput)
}

// GetUsageResponse is the response type for the
// GetUsage API operation.
type GetUsageResponse struct {
	*types.GetUsageOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetUsage request.
func (r *GetUsageResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
