// Code generated by smithy-go-codegen DO NOT EDIT.

package apigateway

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Create an ApiKey () resource. AWS CLI
// (https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html)
func (c *Client) CreateApiKey(ctx context.Context, params *CreateApiKeyInput, optFns ...func(*Options)) (*CreateApiKeyOutput, error) {
	stack := middleware.NewStack("CreateApiKey", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpCreateApiKeyMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateApiKey(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateApiKey",
			Err:           err,
		}
	}
	out := result.(*CreateApiKeyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Request to create an ApiKey () resource.
type CreateApiKeyInput struct {
	TemplateSkipList []*string
	Template         *bool
	Title            *string
	// The name of the ApiKey ().
	Name *string
	// DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
	StageKeys []*types.StageKey
	// The description of the ApiKey ().
	Description *string
	// An AWS Marketplace customer identifier , when integrating with the AWS SaaS
	// Marketplace.
	CustomerId *string
	// Specifies whether (true) or not (false) the key identifier is distinct from the
	// created API key value. This parameter is deprecated and should not be used.
	GenerateDistinctId *bool
	// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The
	// tag key can be up to 128 characters and must not start with aws:. The tag value
	// can be up to 256 characters.
	Tags map[string]*string
	// Specifies a value of the API key.
	Value *string
	// Specifies whether the ApiKey () can be used by callers.
	Enabled *bool
}

// A resource that can be distributed to callers for executing Method () resources
// that require an API key. API keys can be mapped to any Stage () on any RestApi
// (), which indicates that the callers with the API key can make requests to that
// stage. Use API Keys
// (https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html)
type CreateApiKeyOutput struct {
	// The name of the API Key.
	Name *string
	// A list of Stage () resources that are associated with the ApiKey () resource.
	StageKeys []*string
	// The timestamp when the API Key was created.
	CreatedDate *time.Time
	// The identifier of the API Key.
	Id *string
	// An AWS Marketplace customer identifier , when integrating with the AWS SaaS
	// Marketplace.
	CustomerId *string
	// The timestamp when the API Key was last updated.
	LastUpdatedDate *time.Time
	// Specifies whether the API Key can be used by callers.
	Enabled *bool
	// The collection of tags. Each tag element is associated with a given resource.
	Tags map[string]*string
	// The description of the API Key.
	Description *string
	// The value of the API Key.
	Value *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpCreateApiKeyMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpCreateApiKey{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateApiKey{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateApiKey(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "apigateway",
		OperationName: "CreateApiKey",
	}
}
