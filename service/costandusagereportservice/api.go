// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package costandusagereportservice

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opDeleteReportDefinition = "DeleteReportDefinition"

// DeleteReportDefinitionRequest is a API request type for the DeleteReportDefinition API operation.
type DeleteReportDefinitionRequest struct {
	*aws.Request
	Input *DeleteReportDefinitionInput
	Copy  func(*DeleteReportDefinitionInput) DeleteReportDefinitionRequest
}

// Send marshals and sends the DeleteReportDefinition API request.
func (r DeleteReportDefinitionRequest) Send() (*DeleteReportDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteReportDefinitionOutput), nil
}

// DeleteReportDefinitionRequest returns a request value for making API operation for
// AWS Cost and Usage Report Service.
//
// Delete a specified report definition
//
//    // Example sending a request using the DeleteReportDefinitionRequest method.
//    req := client.DeleteReportDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/DeleteReportDefinition
func (c *CostAndUsageReportService) DeleteReportDefinitionRequest(input *DeleteReportDefinitionInput) DeleteReportDefinitionRequest {
	op := &aws.Operation{
		Name:       opDeleteReportDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteReportDefinitionInput{}
	}

	output := &DeleteReportDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteReportDefinitionRequest{Request: req, Input: input, Copy: c.DeleteReportDefinitionRequest}
}

const opDescribeReportDefinitions = "DescribeReportDefinitions"

// DescribeReportDefinitionsRequest is a API request type for the DescribeReportDefinitions API operation.
type DescribeReportDefinitionsRequest struct {
	*aws.Request
	Input *DescribeReportDefinitionsInput
	Copy  func(*DescribeReportDefinitionsInput) DescribeReportDefinitionsRequest
}

// Send marshals and sends the DescribeReportDefinitions API request.
func (r DescribeReportDefinitionsRequest) Send() (*DescribeReportDefinitionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DescribeReportDefinitionsOutput), nil
}

// DescribeReportDefinitionsRequest returns a request value for making API operation for
// AWS Cost and Usage Report Service.
//
// Describe a list of report definitions owned by the account
//
//    // Example sending a request using the DescribeReportDefinitionsRequest method.
//    req := client.DescribeReportDefinitionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/DescribeReportDefinitions
func (c *CostAndUsageReportService) DescribeReportDefinitionsRequest(input *DescribeReportDefinitionsInput) DescribeReportDefinitionsRequest {
	op := &aws.Operation{
		Name:       opDescribeReportDefinitions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &DescribeReportDefinitionsInput{}
	}

	output := &DescribeReportDefinitionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DescribeReportDefinitionsRequest{Request: req, Input: input, Copy: c.DescribeReportDefinitionsRequest}
}

// Paginate pages iterates over the pages of a DescribeReportDefinitionsRequest operation,
// calling the Next method for each page. Using the paginators Next
// method will depict whether or not there are more pages.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a DescribeReportDefinitions operation.
//		req := client.DescribeReportDefinitionsRequest(input)
//		p := req.Paginate()
//		for p.Next() {
//			page := p.CurrentPage()
//		}
//
//		if err := p.Err(); err != nil {
//			return err
//		}
//
func (p *DescribeReportDefinitionsRequest) Paginate(opts ...aws.Option) DescribeReportDefinitionsPager {
	return DescribeReportDefinitionsPager{
		Pager: aws.Pager{
			NewRequest: func() (*aws.Request, error) {
				var inCpy *DescribeReportDefinitionsInput
				if p.Input != nil {
					tmp := *p.Input
					inCpy = &tmp
				}

				req := p.Copy(inCpy)
				req.ApplyOptions(opts...)

				return req.Request, nil
			},
		},
	}
}

// DescribeReportDefinitionsPager is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeReportDefinitionsPager struct {
	aws.Pager
}

func (p *DescribeReportDefinitionsPager) CurrentPage() *DescribeReportDefinitionsOutput {
	return p.Pager.CurrentPage().(*DescribeReportDefinitionsOutput)
}

const opPutReportDefinition = "PutReportDefinition"

// PutReportDefinitionRequest is a API request type for the PutReportDefinition API operation.
type PutReportDefinitionRequest struct {
	*aws.Request
	Input *PutReportDefinitionInput
	Copy  func(*PutReportDefinitionInput) PutReportDefinitionRequest
}

// Send marshals and sends the PutReportDefinition API request.
func (r PutReportDefinitionRequest) Send() (*PutReportDefinitionOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*PutReportDefinitionOutput), nil
}

// PutReportDefinitionRequest returns a request value for making API operation for
// AWS Cost and Usage Report Service.
//
// Create a new report definition
//
//    // Example sending a request using the PutReportDefinitionRequest method.
//    req := client.PutReportDefinitionRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/PutReportDefinition
func (c *CostAndUsageReportService) PutReportDefinitionRequest(input *PutReportDefinitionInput) PutReportDefinitionRequest {
	op := &aws.Operation{
		Name:       opPutReportDefinition,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PutReportDefinitionInput{}
	}

	output := &PutReportDefinitionOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return PutReportDefinitionRequest{Request: req, Input: input, Copy: c.PutReportDefinitionRequest}
}

// Request of DeleteReportDefinition
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/DeleteReportDefinitionRequest
type DeleteReportDefinitionInput struct {
	_ struct{} `type:"structure"`

	// Preferred name for a report, it has to be unique. Must starts with a number/letter,
	// case sensitive. Limited to 256 characters.
	ReportName *string `type:"string"`
}

// String returns the string representation
func (s DeleteReportDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteReportDefinitionInput) GoString() string {
	return s.String()
}

// Response of DeleteReportDefinition
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/DeleteReportDefinitionResponse
type DeleteReportDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A message indicates if the deletion is successful.
	ResponseMessage *string `type:"string"`
}

// String returns the string representation
func (s DeleteReportDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteReportDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteReportDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Request of DescribeReportDefinitions
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/DescribeReportDefinitionsRequest
type DescribeReportDefinitionsInput struct {
	_ struct{} `type:"structure"`

	// The max number of results returned by the operation.
	MaxResults *int64 `min:"5" type:"integer"`

	// A generic string.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeReportDefinitionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeReportDefinitionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeReportDefinitionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DescribeReportDefinitionsInput"}
	if s.MaxResults != nil && *s.MaxResults < 5 {
		invalidParams.Add(aws.NewErrParamMinValue("MaxResults", 5))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Response of DescribeReportDefinitions
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/DescribeReportDefinitionsResponse
type DescribeReportDefinitionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A generic string.
	NextToken *string `type:"string"`

	// A list of report definitions.
	ReportDefinitions []ReportDefinition `type:"list"`
}

// String returns the string representation
func (s DescribeReportDefinitionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeReportDefinitionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DescribeReportDefinitionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Request of PutReportDefinition
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/PutReportDefinitionRequest
type PutReportDefinitionInput struct {
	_ struct{} `type:"structure"`

	// The definition of AWS Cost and Usage Report. Customer can specify the report
	// name, time unit, report format, compression format, S3 bucket and additional
	// artifacts and schema elements in the definition.
	//
	// ReportDefinition is a required field
	ReportDefinition *ReportDefinition `type:"structure" required:"true"`
}

// String returns the string representation
func (s PutReportDefinitionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutReportDefinitionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PutReportDefinitionInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PutReportDefinitionInput"}

	if s.ReportDefinition == nil {
		invalidParams.Add(aws.NewErrParamRequired("ReportDefinition"))
	}
	if s.ReportDefinition != nil {
		if err := s.ReportDefinition.Validate(); err != nil {
			invalidParams.AddNested("ReportDefinition", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Response of PutReportDefinition
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/PutReportDefinitionResponse
type PutReportDefinitionOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s PutReportDefinitionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutReportDefinitionOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s PutReportDefinitionOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The definition of AWS Cost and Usage Report. Customer can specify the report
// name, time unit, report format, compression format, S3 bucket and additional
// artifacts and schema elements in the definition.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cur-2017-01-06/ReportDefinition
type ReportDefinition struct {
	_ struct{} `type:"structure"`

	// A list of additional artifacts.
	AdditionalArtifacts []AdditionalArtifact `type:"list"`

	// A list of schema elements.
	//
	// AdditionalSchemaElements is a required field
	AdditionalSchemaElements []SchemaElement `type:"list" required:"true"`

	// Preferred compression format for report.
	//
	// Compression is a required field
	Compression CompressionFormat `type:"string" required:"true" enum:"true"`

	// Preferred format for report.
	//
	// Format is a required field
	Format ReportFormat `type:"string" required:"true" enum:"true"`

	// Preferred name for a report, it has to be unique. Must starts with a number/letter,
	// case sensitive. Limited to 256 characters.
	//
	// ReportName is a required field
	ReportName *string `type:"string" required:"true"`

	// Name of customer S3 bucket.
	//
	// S3Bucket is a required field
	S3Bucket *string `type:"string" required:"true"`

	// Preferred report path prefix. Limited to 256 characters.
	//
	// S3Prefix is a required field
	S3Prefix *string `type:"string" required:"true"`

	// Region of customer S3 bucket.
	//
	// S3Region is a required field
	S3Region AWSRegion `type:"string" required:"true" enum:"true"`

	// The frequency on which report data are measured and displayed.
	//
	// TimeUnit is a required field
	TimeUnit TimeUnit `type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s ReportDefinition) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ReportDefinition) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ReportDefinition) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ReportDefinition"}

	if s.AdditionalSchemaElements == nil {
		invalidParams.Add(aws.NewErrParamRequired("AdditionalSchemaElements"))
	}
	if len(s.Compression) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Compression"))
	}
	if len(s.Format) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Format"))
	}

	if s.ReportName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ReportName"))
	}

	if s.S3Bucket == nil {
		invalidParams.Add(aws.NewErrParamRequired("S3Bucket"))
	}

	if s.S3Prefix == nil {
		invalidParams.Add(aws.NewErrParamRequired("S3Prefix"))
	}
	if len(s.S3Region) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("S3Region"))
	}
	if len(s.TimeUnit) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("TimeUnit"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Region of customer S3 bucket.
type AWSRegion string

// Enum values for AWSRegion
const (
	AWSRegionUsEast1      AWSRegion = "us-east-1"
	AWSRegionUsWest1      AWSRegion = "us-west-1"
	AWSRegionUsWest2      AWSRegion = "us-west-2"
	AWSRegionEuCentral1   AWSRegion = "eu-central-1"
	AWSRegionEuWest1      AWSRegion = "eu-west-1"
	AWSRegionApSoutheast1 AWSRegion = "ap-southeast-1"
	AWSRegionApSoutheast2 AWSRegion = "ap-southeast-2"
	AWSRegionApNortheast1 AWSRegion = "ap-northeast-1"
)

func (enum AWSRegion) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AWSRegion) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// Enable support for Redshift and/or QuickSight.
type AdditionalArtifact string

// Enum values for AdditionalArtifact
const (
	AdditionalArtifactRedshift   AdditionalArtifact = "REDSHIFT"
	AdditionalArtifactQuicksight AdditionalArtifact = "QUICKSIGHT"
)

func (enum AdditionalArtifact) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AdditionalArtifact) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// Preferred compression format for report.
type CompressionFormat string

// Enum values for CompressionFormat
const (
	CompressionFormatZip  CompressionFormat = "ZIP"
	CompressionFormatGzip CompressionFormat = "GZIP"
)

func (enum CompressionFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum CompressionFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// Preferred format for report.
type ReportFormat string

// Enum values for ReportFormat
const (
	ReportFormatTextOrcsv ReportFormat = "textORcsv"
)

func (enum ReportFormat) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReportFormat) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// Preference of including Resource IDs. You can include additional details
// about individual resource IDs in your report.
type SchemaElement string

// Enum values for SchemaElement
const (
	SchemaElementResources SchemaElement = "RESOURCES"
)

func (enum SchemaElement) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SchemaElement) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// The frequency on which report data are measured and displayed.
type TimeUnit string

// Enum values for TimeUnit
const (
	TimeUnitHourly TimeUnit = "HOURLY"
	TimeUnitDaily  TimeUnit = "DAILY"
)

func (enum TimeUnit) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum TimeUnit) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
