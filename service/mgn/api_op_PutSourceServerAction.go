// Code generated by smithy-go-codegen DO NOT EDIT.

package mgn

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/mgn/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Put source server post migration custom action.
func (c *Client) PutSourceServerAction(ctx context.Context, params *PutSourceServerActionInput, optFns ...func(*Options)) (*PutSourceServerActionOutput, error) {
	if params == nil {
		params = &PutSourceServerActionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutSourceServerAction", params, optFns, c.addOperationPutSourceServerActionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutSourceServerActionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutSourceServerActionInput struct {

	// Source server post migration custom action ID.
	//
	// This member is required.
	ActionID *string

	// Source server post migration custom action name.
	//
	// This member is required.
	ActionName *string

	// Source server post migration custom action document identifier.
	//
	// This member is required.
	DocumentIdentifier *string

	// Source server post migration custom action order.
	//
	// This member is required.
	Order int32

	// Source server ID.
	//
	// This member is required.
	SourceServerID *string

	// Source server post migration custom action active status.
	Active *bool

	// Source server post migration custom action document version.
	DocumentVersion *string

	// Source server post migration custom action must succeed for cutover.
	MustSucceedForCutover *bool

	// Source server post migration custom action parameters.
	Parameters map[string][]types.SsmParameterStoreParameter

	// Source server post migration custom action timeout in seconds.
	TimeoutSeconds int32

	noSmithyDocumentSerde
}

type PutSourceServerActionOutput struct {

	// Source server post migration custom action ID.
	ActionID *string

	// Source server post migration custom action name.
	ActionName *string

	// Source server post migration custom action active status.
	Active *bool

	// Source server post migration custom action document identifier.
	DocumentIdentifier *string

	// Source server post migration custom action document version.
	DocumentVersion *string

	// Source server post migration custom action must succeed for cutover.
	MustSucceedForCutover *bool

	// Source server post migration custom action order.
	Order int32

	// Source server post migration custom action parameters.
	Parameters map[string][]types.SsmParameterStoreParameter

	// Source server post migration custom action timeout in seconds.
	TimeoutSeconds int32

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationPutSourceServerActionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpPutSourceServerAction{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpPutSourceServerAction{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpPutSourceServerActionValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opPutSourceServerAction(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opPutSourceServerAction(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mgn",
		OperationName: "PutSourceServerAction",
	}
}
