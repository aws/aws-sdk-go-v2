// Code generated by smithy-go-codegen DO NOT EDIT.

package auditmanager

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/auditmanager/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Returns a list of changelogs from AWS Audit Manager.
func (c *Client) GetChangeLogs(ctx context.Context, params *GetChangeLogsInput, optFns ...func(*Options)) (*GetChangeLogsOutput, error) {
	if params == nil {
		params = &GetChangeLogsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GetChangeLogs", params, optFns, addOperationGetChangeLogsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GetChangeLogsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetChangeLogsInput struct {

	// The identifier for the specified assessment.
	//
	// This member is required.
	AssessmentId *string

	// The identifier for the specified control.
	ControlId *string

	// The identifier for the specified control set.
	ControlSetId *string

	// Represents the maximum number of results per page, or per API request call.
	MaxResults *int32

	// The pagination token used to fetch the next set of results.
	NextToken *string
}

type GetChangeLogsOutput struct {

	// The list of user activity for the control.
	ChangeLogs []types.ChangeLog

	// The pagination token used to fetch the next set of results.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationGetChangeLogsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpGetChangeLogs{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpGetChangeLogs{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpGetChangeLogsValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opGetChangeLogs(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

// GetChangeLogsAPIClient is a client that implements the GetChangeLogs operation.
type GetChangeLogsAPIClient interface {
	GetChangeLogs(context.Context, *GetChangeLogsInput, ...func(*Options)) (*GetChangeLogsOutput, error)
}

var _ GetChangeLogsAPIClient = (*Client)(nil)

// GetChangeLogsPaginatorOptions is the paginator options for GetChangeLogs
type GetChangeLogsPaginatorOptions struct {
	// Represents the maximum number of results per page, or per API request call.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// GetChangeLogsPaginator is a paginator for GetChangeLogs
type GetChangeLogsPaginator struct {
	options   GetChangeLogsPaginatorOptions
	client    GetChangeLogsAPIClient
	params    *GetChangeLogsInput
	nextToken *string
	firstPage bool
}

// NewGetChangeLogsPaginator returns a new GetChangeLogsPaginator
func NewGetChangeLogsPaginator(client GetChangeLogsAPIClient, params *GetChangeLogsInput, optFns ...func(*GetChangeLogsPaginatorOptions)) *GetChangeLogsPaginator {
	options := GetChangeLogsPaginatorOptions{}
	if params.MaxResults != nil {
		options.Limit = *params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	if params == nil {
		params = &GetChangeLogsInput{}
	}

	return &GetChangeLogsPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *GetChangeLogsPaginator) HasMorePages() bool {
	return p.firstPage || p.nextToken != nil
}

// NextPage retrieves the next GetChangeLogs page.
func (p *GetChangeLogsPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*GetChangeLogsOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxResults = limit

	result, err := p.client.GetChangeLogs(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken && prevToken != nil && p.nextToken != nil && *prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

func newServiceMetadataMiddleware_opGetChangeLogs(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "auditmanager",
		OperationName: "GetChangeLogs",
	}
}
