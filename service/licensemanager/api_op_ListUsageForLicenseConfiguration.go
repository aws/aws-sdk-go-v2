// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package licensemanager

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/licensemanager/types"
)

const opListUsageForLicenseConfiguration = "ListUsageForLicenseConfiguration"

// ListUsageForLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Lists all license usage records for a license configuration, displaying license
// consumption details by resource at a selected point in time. Use this action
// to audit the current license consumption for any license inventory and configuration.
//
//    // Example sending a request using ListUsageForLicenseConfigurationRequest.
//    req := client.ListUsageForLicenseConfigurationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListUsageForLicenseConfiguration
func (c *Client) ListUsageForLicenseConfigurationRequest(input *types.ListUsageForLicenseConfigurationInput) ListUsageForLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opListUsageForLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ListUsageForLicenseConfigurationInput{}
	}

	req := c.newRequest(op, input, &types.ListUsageForLicenseConfigurationOutput{})
	return ListUsageForLicenseConfigurationRequest{Request: req, Input: input, Copy: c.ListUsageForLicenseConfigurationRequest}
}

// ListUsageForLicenseConfigurationRequest is the request type for the
// ListUsageForLicenseConfiguration API operation.
type ListUsageForLicenseConfigurationRequest struct {
	*aws.Request
	Input *types.ListUsageForLicenseConfigurationInput
	Copy  func(*types.ListUsageForLicenseConfigurationInput) ListUsageForLicenseConfigurationRequest
}

// Send marshals and sends the ListUsageForLicenseConfiguration API request.
func (r ListUsageForLicenseConfigurationRequest) Send(ctx context.Context) (*ListUsageForLicenseConfigurationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListUsageForLicenseConfigurationResponse{
		ListUsageForLicenseConfigurationOutput: r.Request.Data.(*types.ListUsageForLicenseConfigurationOutput),
		response:                               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ListUsageForLicenseConfigurationResponse is the response type for the
// ListUsageForLicenseConfiguration API operation.
type ListUsageForLicenseConfigurationResponse struct {
	*types.ListUsageForLicenseConfigurationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListUsageForLicenseConfiguration request.
func (r *ListUsageForLicenseConfigurationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
