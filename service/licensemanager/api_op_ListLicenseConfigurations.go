// Code generated by smithy-go-codegen DO NOT EDIT.

package licensemanager

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/licensemanager/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Lists the license configurations for your account.
func (c *Client) ListLicenseConfigurations(ctx context.Context, params *ListLicenseConfigurationsInput, optFns ...func(*Options)) (*ListLicenseConfigurationsOutput, error) {
	if params == nil {
		params = &ListLicenseConfigurationsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ListLicenseConfigurations", params, optFns, addOperationListLicenseConfigurationsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ListLicenseConfigurationsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ListLicenseConfigurationsInput struct {

	// Filters to scope the results. The following filters and logical operators are
	// supported:
	//
	//     * licenseCountingType - The dimension on which licenses are
	// counted. Possible values are vCPU | Instance | Core | Socket. Logical operators
	// are EQUALS | NOT_EQUALS.
	//
	//     * enforceLicenseCount - A Boolean value that
	// indicates whether hard license enforcement is used. Logical operators are EQUALS
	// | NOT_EQUALS.
	//
	//     * usagelimitExceeded - A Boolean value that indicates whether
	// the available licenses have been exceeded. Logical operators are EQUALS |
	// NOT_EQUALS.
	Filters []*types.Filter

	// Amazon Resource Names (ARN) of the license configurations.
	LicenseConfigurationArns []*string

	// Maximum number of results to return in a single call.
	MaxResults *int32

	// Token for the next set of results.
	NextToken *string
}

type ListLicenseConfigurationsOutput struct {

	// Information about the license configurations.
	LicenseConfigurations []*types.LicenseConfiguration

	// Token for the next set of results.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationListLicenseConfigurationsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpListLicenseConfigurations{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpListLicenseConfigurations{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListLicenseConfigurations(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opListLicenseConfigurations(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "license-manager",
		OperationName: "ListLicenseConfigurations",
	}
}
