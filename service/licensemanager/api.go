// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package licensemanager

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opCreateLicenseConfiguration = "CreateLicenseConfiguration"

// CreateLicenseConfigurationRequest is a API request type for the CreateLicenseConfiguration API operation.
type CreateLicenseConfigurationRequest struct {
	*aws.Request
	Input *CreateLicenseConfigurationInput
	Copy  func(*CreateLicenseConfigurationInput) CreateLicenseConfigurationRequest
}

// Send marshals and sends the CreateLicenseConfiguration API request.
func (r CreateLicenseConfigurationRequest) Send() (*CreateLicenseConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateLicenseConfigurationOutput), nil
}

// CreateLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Creates a new license configuration object. A license configuration is an
// abstraction of a customer license agreement that can be consumed and enforced
// by License Manager. Components include specifications for the license type
// (licensing by instance, socket, CPU, or VCPU), tenancy (shared tenancy, Amazon
// EC2 Dedicated Instance, Amazon EC2 Dedicated Host, or any of these), host
// affinity (how long a VM must be associated with a host), the number of licenses
// purchased and used.
//
//    // Example sending a request using the CreateLicenseConfigurationRequest method.
//    req := client.CreateLicenseConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicenseConfiguration
func (c *LicenseManager) CreateLicenseConfigurationRequest(input *CreateLicenseConfigurationInput) CreateLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opCreateLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateLicenseConfigurationInput{}
	}

	output := &CreateLicenseConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateLicenseConfigurationRequest{Request: req, Input: input, Copy: c.CreateLicenseConfigurationRequest}
}

const opDeleteLicenseConfiguration = "DeleteLicenseConfiguration"

// DeleteLicenseConfigurationRequest is a API request type for the DeleteLicenseConfiguration API operation.
type DeleteLicenseConfigurationRequest struct {
	*aws.Request
	Input *DeleteLicenseConfigurationInput
	Copy  func(*DeleteLicenseConfigurationInput) DeleteLicenseConfigurationRequest
}

// Send marshals and sends the DeleteLicenseConfiguration API request.
func (r DeleteLicenseConfigurationRequest) Send() (*DeleteLicenseConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteLicenseConfigurationOutput), nil
}

// DeleteLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Deletes an existing license configuration. This action fails if the configuration
// is in use.
//
//    // Example sending a request using the DeleteLicenseConfigurationRequest method.
//    req := client.DeleteLicenseConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteLicenseConfiguration
func (c *LicenseManager) DeleteLicenseConfigurationRequest(input *DeleteLicenseConfigurationInput) DeleteLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opDeleteLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteLicenseConfigurationInput{}
	}

	output := &DeleteLicenseConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteLicenseConfigurationRequest{Request: req, Input: input, Copy: c.DeleteLicenseConfigurationRequest}
}

const opGetLicenseConfiguration = "GetLicenseConfiguration"

// GetLicenseConfigurationRequest is a API request type for the GetLicenseConfiguration API operation.
type GetLicenseConfigurationRequest struct {
	*aws.Request
	Input *GetLicenseConfigurationInput
	Copy  func(*GetLicenseConfigurationInput) GetLicenseConfigurationRequest
}

// Send marshals and sends the GetLicenseConfiguration API request.
func (r GetLicenseConfigurationRequest) Send() (*GetLicenseConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetLicenseConfigurationOutput), nil
}

// GetLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Returns a detailed description of a license configuration.
//
//    // Example sending a request using the GetLicenseConfigurationRequest method.
//    req := client.GetLicenseConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetLicenseConfiguration
func (c *LicenseManager) GetLicenseConfigurationRequest(input *GetLicenseConfigurationInput) GetLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opGetLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetLicenseConfigurationInput{}
	}

	output := &GetLicenseConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetLicenseConfigurationRequest{Request: req, Input: input, Copy: c.GetLicenseConfigurationRequest}
}

const opGetServiceSettings = "GetServiceSettings"

// GetServiceSettingsRequest is a API request type for the GetServiceSettings API operation.
type GetServiceSettingsRequest struct {
	*aws.Request
	Input *GetServiceSettingsInput
	Copy  func(*GetServiceSettingsInput) GetServiceSettingsRequest
}

// Send marshals and sends the GetServiceSettings API request.
func (r GetServiceSettingsRequest) Send() (*GetServiceSettingsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetServiceSettingsOutput), nil
}

// GetServiceSettingsRequest returns a request value for making API operation for
// AWS License Manager.
//
// Gets License Manager settings for a region. Exposes the configured S3 bucket,
// SNS topic, etc., for inspection.
//
//    // Example sending a request using the GetServiceSettingsRequest method.
//    req := client.GetServiceSettingsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetServiceSettings
func (c *LicenseManager) GetServiceSettingsRequest(input *GetServiceSettingsInput) GetServiceSettingsRequest {
	op := &aws.Operation{
		Name:       opGetServiceSettings,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetServiceSettingsInput{}
	}

	output := &GetServiceSettingsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetServiceSettingsRequest{Request: req, Input: input, Copy: c.GetServiceSettingsRequest}
}

const opListAssociationsForLicenseConfiguration = "ListAssociationsForLicenseConfiguration"

// ListAssociationsForLicenseConfigurationRequest is a API request type for the ListAssociationsForLicenseConfiguration API operation.
type ListAssociationsForLicenseConfigurationRequest struct {
	*aws.Request
	Input *ListAssociationsForLicenseConfigurationInput
	Copy  func(*ListAssociationsForLicenseConfigurationInput) ListAssociationsForLicenseConfigurationRequest
}

// Send marshals and sends the ListAssociationsForLicenseConfiguration API request.
func (r ListAssociationsForLicenseConfigurationRequest) Send() (*ListAssociationsForLicenseConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListAssociationsForLicenseConfigurationOutput), nil
}

// ListAssociationsForLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Lists the resource associations for a license configuration. Resource associations
// need not consume licenses from a license configuration. For example, an AMI
// or a stopped instance may not consume a license (depending on the license
// rules). Use this operation to find all resources associated with a license
// configuration.
//
//    // Example sending a request using the ListAssociationsForLicenseConfigurationRequest method.
//    req := client.ListAssociationsForLicenseConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListAssociationsForLicenseConfiguration
func (c *LicenseManager) ListAssociationsForLicenseConfigurationRequest(input *ListAssociationsForLicenseConfigurationInput) ListAssociationsForLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opListAssociationsForLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAssociationsForLicenseConfigurationInput{}
	}

	output := &ListAssociationsForLicenseConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListAssociationsForLicenseConfigurationRequest{Request: req, Input: input, Copy: c.ListAssociationsForLicenseConfigurationRequest}
}

const opListLicenseConfigurations = "ListLicenseConfigurations"

// ListLicenseConfigurationsRequest is a API request type for the ListLicenseConfigurations API operation.
type ListLicenseConfigurationsRequest struct {
	*aws.Request
	Input *ListLicenseConfigurationsInput
	Copy  func(*ListLicenseConfigurationsInput) ListLicenseConfigurationsRequest
}

// Send marshals and sends the ListLicenseConfigurations API request.
func (r ListLicenseConfigurationsRequest) Send() (*ListLicenseConfigurationsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListLicenseConfigurationsOutput), nil
}

// ListLicenseConfigurationsRequest returns a request value for making API operation for
// AWS License Manager.
//
// Lists license configuration objects for an account, each containing the name,
// description, license type, and other license terms modeled from a license
// agreement.
//
//    // Example sending a request using the ListLicenseConfigurationsRequest method.
//    req := client.ListLicenseConfigurationsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseConfigurations
func (c *LicenseManager) ListLicenseConfigurationsRequest(input *ListLicenseConfigurationsInput) ListLicenseConfigurationsRequest {
	op := &aws.Operation{
		Name:       opListLicenseConfigurations,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListLicenseConfigurationsInput{}
	}

	output := &ListLicenseConfigurationsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListLicenseConfigurationsRequest{Request: req, Input: input, Copy: c.ListLicenseConfigurationsRequest}
}

const opListLicenseSpecificationsForResource = "ListLicenseSpecificationsForResource"

// ListLicenseSpecificationsForResourceRequest is a API request type for the ListLicenseSpecificationsForResource API operation.
type ListLicenseSpecificationsForResourceRequest struct {
	*aws.Request
	Input *ListLicenseSpecificationsForResourceInput
	Copy  func(*ListLicenseSpecificationsForResourceInput) ListLicenseSpecificationsForResourceRequest
}

// Send marshals and sends the ListLicenseSpecificationsForResource API request.
func (r ListLicenseSpecificationsForResourceRequest) Send() (*ListLicenseSpecificationsForResourceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListLicenseSpecificationsForResourceOutput), nil
}

// ListLicenseSpecificationsForResourceRequest returns a request value for making API operation for
// AWS License Manager.
//
// Returns the license configuration for a resource.
//
//    // Example sending a request using the ListLicenseSpecificationsForResourceRequest method.
//    req := client.ListLicenseSpecificationsForResourceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseSpecificationsForResource
func (c *LicenseManager) ListLicenseSpecificationsForResourceRequest(input *ListLicenseSpecificationsForResourceInput) ListLicenseSpecificationsForResourceRequest {
	op := &aws.Operation{
		Name:       opListLicenseSpecificationsForResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListLicenseSpecificationsForResourceInput{}
	}

	output := &ListLicenseSpecificationsForResourceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListLicenseSpecificationsForResourceRequest{Request: req, Input: input, Copy: c.ListLicenseSpecificationsForResourceRequest}
}

const opListResourceInventory = "ListResourceInventory"

// ListResourceInventoryRequest is a API request type for the ListResourceInventory API operation.
type ListResourceInventoryRequest struct {
	*aws.Request
	Input *ListResourceInventoryInput
	Copy  func(*ListResourceInventoryInput) ListResourceInventoryRequest
}

// Send marshals and sends the ListResourceInventory API request.
func (r ListResourceInventoryRequest) Send() (*ListResourceInventoryOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListResourceInventoryOutput), nil
}

// ListResourceInventoryRequest returns a request value for making API operation for
// AWS License Manager.
//
// Returns a detailed list of resources.
//
//    // Example sending a request using the ListResourceInventoryRequest method.
//    req := client.ListResourceInventoryRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListResourceInventory
func (c *LicenseManager) ListResourceInventoryRequest(input *ListResourceInventoryInput) ListResourceInventoryRequest {
	op := &aws.Operation{
		Name:       opListResourceInventory,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListResourceInventoryInput{}
	}

	output := &ListResourceInventoryOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListResourceInventoryRequest{Request: req, Input: input, Copy: c.ListResourceInventoryRequest}
}

const opListTagsForResource = "ListTagsForResource"

// ListTagsForResourceRequest is a API request type for the ListTagsForResource API operation.
type ListTagsForResourceRequest struct {
	*aws.Request
	Input *ListTagsForResourceInput
	Copy  func(*ListTagsForResourceInput) ListTagsForResourceRequest
}

// Send marshals and sends the ListTagsForResource API request.
func (r ListTagsForResourceRequest) Send() (*ListTagsForResourceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListTagsForResourceOutput), nil
}

// ListTagsForResourceRequest returns a request value for making API operation for
// AWS License Manager.
//
// Lists tags attached to a resource.
//
//    // Example sending a request using the ListTagsForResourceRequest method.
//    req := client.ListTagsForResourceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListTagsForResource
func (c *LicenseManager) ListTagsForResourceRequest(input *ListTagsForResourceInput) ListTagsForResourceRequest {
	op := &aws.Operation{
		Name:       opListTagsForResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListTagsForResourceInput{}
	}

	output := &ListTagsForResourceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListTagsForResourceRequest{Request: req, Input: input, Copy: c.ListTagsForResourceRequest}
}

const opListUsageForLicenseConfiguration = "ListUsageForLicenseConfiguration"

// ListUsageForLicenseConfigurationRequest is a API request type for the ListUsageForLicenseConfiguration API operation.
type ListUsageForLicenseConfigurationRequest struct {
	*aws.Request
	Input *ListUsageForLicenseConfigurationInput
	Copy  func(*ListUsageForLicenseConfigurationInput) ListUsageForLicenseConfigurationRequest
}

// Send marshals and sends the ListUsageForLicenseConfiguration API request.
func (r ListUsageForLicenseConfigurationRequest) Send() (*ListUsageForLicenseConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListUsageForLicenseConfigurationOutput), nil
}

// ListUsageForLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Lists all license usage records for a license configuration, displaying license
// consumption details by resource at a selected point in time. Use this action
// to audit the current license consumption for any license inventory and configuration.
//
//    // Example sending a request using the ListUsageForLicenseConfigurationRequest method.
//    req := client.ListUsageForLicenseConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListUsageForLicenseConfiguration
func (c *LicenseManager) ListUsageForLicenseConfigurationRequest(input *ListUsageForLicenseConfigurationInput) ListUsageForLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opListUsageForLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListUsageForLicenseConfigurationInput{}
	}

	output := &ListUsageForLicenseConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListUsageForLicenseConfigurationRequest{Request: req, Input: input, Copy: c.ListUsageForLicenseConfigurationRequest}
}

const opTagResource = "TagResource"

// TagResourceRequest is a API request type for the TagResource API operation.
type TagResourceRequest struct {
	*aws.Request
	Input *TagResourceInput
	Copy  func(*TagResourceInput) TagResourceRequest
}

// Send marshals and sends the TagResource API request.
func (r TagResourceRequest) Send() (*TagResourceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*TagResourceOutput), nil
}

// TagResourceRequest returns a request value for making API operation for
// AWS License Manager.
//
// Attach one of more tags to any resource.
//
//    // Example sending a request using the TagResourceRequest method.
//    req := client.TagResourceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/TagResource
func (c *LicenseManager) TagResourceRequest(input *TagResourceInput) TagResourceRequest {
	op := &aws.Operation{
		Name:       opTagResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TagResourceInput{}
	}

	output := &TagResourceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return TagResourceRequest{Request: req, Input: input, Copy: c.TagResourceRequest}
}

const opUntagResource = "UntagResource"

// UntagResourceRequest is a API request type for the UntagResource API operation.
type UntagResourceRequest struct {
	*aws.Request
	Input *UntagResourceInput
	Copy  func(*UntagResourceInput) UntagResourceRequest
}

// Send marshals and sends the UntagResource API request.
func (r UntagResourceRequest) Send() (*UntagResourceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UntagResourceOutput), nil
}

// UntagResourceRequest returns a request value for making API operation for
// AWS License Manager.
//
// Remove tags from a resource.
//
//    // Example sending a request using the UntagResourceRequest method.
//    req := client.UntagResourceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UntagResource
func (c *LicenseManager) UntagResourceRequest(input *UntagResourceInput) UntagResourceRequest {
	op := &aws.Operation{
		Name:       opUntagResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UntagResourceInput{}
	}

	output := &UntagResourceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UntagResourceRequest{Request: req, Input: input, Copy: c.UntagResourceRequest}
}

const opUpdateLicenseConfiguration = "UpdateLicenseConfiguration"

// UpdateLicenseConfigurationRequest is a API request type for the UpdateLicenseConfiguration API operation.
type UpdateLicenseConfigurationRequest struct {
	*aws.Request
	Input *UpdateLicenseConfigurationInput
	Copy  func(*UpdateLicenseConfigurationInput) UpdateLicenseConfigurationRequest
}

// Send marshals and sends the UpdateLicenseConfiguration API request.
func (r UpdateLicenseConfigurationRequest) Send() (*UpdateLicenseConfigurationOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateLicenseConfigurationOutput), nil
}

// UpdateLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Modifies the attributes of an existing license configuration object. A license
// configuration is an abstraction of a customer license agreement that can
// be consumed and enforced by License Manager. Components include specifications
// for the license type (Instances, cores, sockets, VCPUs), tenancy (shared
// or Dedicated Host), host affinity (how long a VM is associated with a host),
// the number of licenses purchased and used.
//
//    // Example sending a request using the UpdateLicenseConfigurationRequest method.
//    req := client.UpdateLicenseConfigurationRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseConfiguration
func (c *LicenseManager) UpdateLicenseConfigurationRequest(input *UpdateLicenseConfigurationInput) UpdateLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opUpdateLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateLicenseConfigurationInput{}
	}

	output := &UpdateLicenseConfigurationOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateLicenseConfigurationRequest{Request: req, Input: input, Copy: c.UpdateLicenseConfigurationRequest}
}

const opUpdateLicenseSpecificationsForResource = "UpdateLicenseSpecificationsForResource"

// UpdateLicenseSpecificationsForResourceRequest is a API request type for the UpdateLicenseSpecificationsForResource API operation.
type UpdateLicenseSpecificationsForResourceRequest struct {
	*aws.Request
	Input *UpdateLicenseSpecificationsForResourceInput
	Copy  func(*UpdateLicenseSpecificationsForResourceInput) UpdateLicenseSpecificationsForResourceRequest
}

// Send marshals and sends the UpdateLicenseSpecificationsForResource API request.
func (r UpdateLicenseSpecificationsForResourceRequest) Send() (*UpdateLicenseSpecificationsForResourceOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateLicenseSpecificationsForResourceOutput), nil
}

// UpdateLicenseSpecificationsForResourceRequest returns a request value for making API operation for
// AWS License Manager.
//
// Adds or removes license configurations for a specified AWS resource. This
// operation currently supports updating the license specifications of AMIs,
// instances, and hosts. Launch templates and AWS CloudFormation templates are
// not managed from this operation as those resources send the license configurations
// directly to a resource creation operation, such as RunInstances.
//
//    // Example sending a request using the UpdateLicenseSpecificationsForResourceRequest method.
//    req := client.UpdateLicenseSpecificationsForResourceRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseSpecificationsForResource
func (c *LicenseManager) UpdateLicenseSpecificationsForResourceRequest(input *UpdateLicenseSpecificationsForResourceInput) UpdateLicenseSpecificationsForResourceRequest {
	op := &aws.Operation{
		Name:       opUpdateLicenseSpecificationsForResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateLicenseSpecificationsForResourceInput{}
	}

	output := &UpdateLicenseSpecificationsForResourceOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateLicenseSpecificationsForResourceRequest{Request: req, Input: input, Copy: c.UpdateLicenseSpecificationsForResourceRequest}
}

const opUpdateServiceSettings = "UpdateServiceSettings"

// UpdateServiceSettingsRequest is a API request type for the UpdateServiceSettings API operation.
type UpdateServiceSettingsRequest struct {
	*aws.Request
	Input *UpdateServiceSettingsInput
	Copy  func(*UpdateServiceSettingsInput) UpdateServiceSettingsRequest
}

// Send marshals and sends the UpdateServiceSettings API request.
func (r UpdateServiceSettingsRequest) Send() (*UpdateServiceSettingsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateServiceSettingsOutput), nil
}

// UpdateServiceSettingsRequest returns a request value for making API operation for
// AWS License Manager.
//
// Updates License Manager service settings.
//
//    // Example sending a request using the UpdateServiceSettingsRequest method.
//    req := client.UpdateServiceSettingsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateServiceSettings
func (c *LicenseManager) UpdateServiceSettingsRequest(input *UpdateServiceSettingsInput) UpdateServiceSettingsRequest {
	op := &aws.Operation{
		Name:       opUpdateServiceSettings,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateServiceSettingsInput{}
	}

	output := &UpdateServiceSettingsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateServiceSettingsRequest{Request: req, Input: input, Copy: c.UpdateServiceSettingsRequest}
}

// Details about license consumption.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ConsumedLicenseSummary
type ConsumedLicenseSummary struct {
	_ struct{} `type:"structure"`

	// Number of licenses consumed by a resource.
	ConsumedLicenses *int64 `type:"long"`

	// Resource type of the resource consuming a license (instance, host, or AMI).
	ResourceType ResourceType `type:"string" enum:"true"`
}

// String returns the string representation
func (s ConsumedLicenseSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ConsumedLicenseSummary) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicenseConfigurationRequest
type CreateLicenseConfigurationInput struct {
	_ struct{} `type:"structure"`

	// Human-friendly description of the license configuration.
	Description *string `type:"string"`

	// Number of licenses managed by the license configuration.
	LicenseCount *int64 `type:"long"`

	// Flag indicating whether hard or soft license enforcement is used. Exceeding
	// a hard limit results in the blocked deployment of new instances.
	LicenseCountHardLimit *bool `type:"boolean"`

	// Dimension to use to track the license inventory.
	//
	// LicenseCountingType is a required field
	LicenseCountingType LicenseCountingType `type:"string" required:"true" enum:"true"`

	// Array of configured License Manager rules.
	LicenseRules []string `type:"list"`

	// Name of the license configuration.
	//
	// Name is a required field
	Name *string `type:"string" required:"true"`

	// The tags to apply to the resources during launch. You can only tag instances
	// and volumes on launch. The specified tags are applied to all instances or
	// volumes that are created during launch. To tag a resource after it has been
	// created, see CreateTags .
	Tags []Tag `type:"list"`
}

// String returns the string representation
func (s CreateLicenseConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLicenseConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateLicenseConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateLicenseConfigurationInput"}
	if len(s.LicenseCountingType) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("LicenseCountingType"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicenseConfigurationResponse
type CreateLicenseConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// ARN of the license configuration object after its creation.
	LicenseConfigurationArn *string `type:"string"`
}

// String returns the string representation
func (s CreateLicenseConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLicenseConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateLicenseConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteLicenseConfigurationRequest
type DeleteLicenseConfigurationInput struct {
	_ struct{} `type:"structure"`

	// Unique ID of the configuration object to delete.
	//
	// LicenseConfigurationArn is a required field
	LicenseConfigurationArn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteLicenseConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLicenseConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteLicenseConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteLicenseConfigurationInput"}

	if s.LicenseConfigurationArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("LicenseConfigurationArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteLicenseConfigurationResponse
type DeleteLicenseConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteLicenseConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLicenseConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteLicenseConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// A filter name and value pair that is used to return a more specific list
// of results from a describe operation. Filters can be used to match a set
// of resources by specific criteria, such as tags, attributes, or IDs. The
// filters supported by a Describe operation are documented with the Describe
// operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/Filter
type Filter struct {
	_ struct{} `type:"structure"`

	// Name of the filter. Filter names are case-sensitive.
	Name *string `type:"string"`

	// One or more filter values. Filter values are case-sensitive.
	Values []string `type:"list"`
}

// String returns the string representation
func (s Filter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Filter) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetLicenseConfigurationRequest
type GetLicenseConfigurationInput struct {
	_ struct{} `type:"structure"`

	// ARN of the license configuration being requested.
	//
	// LicenseConfigurationArn is a required field
	LicenseConfigurationArn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetLicenseConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLicenseConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetLicenseConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetLicenseConfigurationInput"}

	if s.LicenseConfigurationArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("LicenseConfigurationArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetLicenseConfigurationResponse
type GetLicenseConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// List of summaries for consumed licenses used by various resources.
	ConsumedLicenseSummaryList []ConsumedLicenseSummary `type:"list"`

	// Number of licenses assigned to resources.
	ConsumedLicenses *int64 `type:"long"`

	// Description of the license configuration.
	Description *string `type:"string"`

	// ARN of the license configuration requested.
	LicenseConfigurationArn *string `type:"string"`

	// Unique ID for the license configuration.
	LicenseConfigurationId *string `type:"string"`

	// Number of available licenses.
	LicenseCount *int64 `type:"long"`

	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit *bool `type:"boolean"`

	// Dimension on which the licenses are counted (for example, instances, cores,
	// sockets, or VCPUs).
	LicenseCountingType LicenseCountingType `type:"string" enum:"true"`

	// List of flexible text strings designating license rules.
	LicenseRules []string `type:"list"`

	// List of summaries of managed resources.
	ManagedResourceSummaryList []ManagedResourceSummary `type:"list"`

	// Name of the license configuration.
	Name *string `type:"string"`

	// Owner account ID for the license configuration.
	OwnerAccountId *string `type:"string"`

	// License configuration status (active, etc.).
	Status *string `type:"string"`

	// List of tags attached to the license configuration.
	Tags []Tag `type:"list"`
}

// String returns the string representation
func (s GetLicenseConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetLicenseConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetLicenseConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetServiceSettingsRequest
type GetServiceSettingsInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s GetServiceSettingsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceSettingsInput) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetServiceSettingsResponse
type GetServiceSettingsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Indicates whether cross-account discovery has been enabled.
	EnableCrossAccountsDiscovery *bool `type:"boolean"`

	// Indicates whether AWS Organizations has been integrated with License Manager
	// for cross-account discovery.
	OrganizationConfiguration *OrganizationConfiguration `type:"structure"`

	// Regional S3 bucket path for storing reports, license trail event data, discovery
	// data, etc.
	S3BucketArn *string `type:"string"`

	// SNS topic configured to receive notifications from License Manager.
	SnsTopicArn *string `type:"string"`
}

// String returns the string representation
func (s GetServiceSettingsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceSettingsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetServiceSettingsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// An inventory filter object.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/InventoryFilter
type InventoryFilter struct {
	_ struct{} `type:"structure"`

	// The condition of the filter.
	//
	// Condition is a required field
	Condition InventoryFilterCondition `type:"string" required:"true" enum:"true"`

	// The name of the filter.
	//
	// Name is a required field
	Name *string `type:"string" required:"true"`

	// Value of the filter.
	Value *string `type:"string"`
}

// String returns the string representation
func (s InventoryFilter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s InventoryFilter) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InventoryFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InventoryFilter"}
	if len(s.Condition) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Condition"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A license configuration is an abstraction of a customer license agreement
// that can be consumed and enforced by License Manager. Components include
// specifications for the license type (licensing by instance, socket, CPU,
// or VCPU), tenancy (shared tenancy, Amazon EC2 Dedicated Instance, Amazon
// EC2 Dedicated Host, or any of these), host affinity (how long a VM must be
// associated with a host), the number of licenses purchased and used.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/LicenseConfiguration
type LicenseConfiguration struct {
	_ struct{} `type:"structure"`

	// List of summaries for licenses consumed by various resources.
	ConsumedLicenseSummaryList []ConsumedLicenseSummary `type:"list"`

	// Number of licenses consumed.
	ConsumedLicenses *int64 `type:"long"`

	// Description of the license configuration.
	Description *string `type:"string"`

	// ARN of the LicenseConfiguration object.
	LicenseConfigurationArn *string `type:"string"`

	// Unique ID of the LicenseConfiguration object.
	LicenseConfigurationId *string `type:"string"`

	// Number of licenses managed by the license configuration.
	LicenseCount *int64 `type:"long"`

	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit *bool `type:"boolean"`

	// Dimension to use to track license inventory.
	LicenseCountingType LicenseCountingType `type:"string" enum:"true"`

	// Array of configured License Manager rules.
	LicenseRules []string `type:"list"`

	// List of summaries for managed resources.
	ManagedResourceSummaryList []ManagedResourceSummary `type:"list"`

	// Name of the license configuration.
	Name *string `type:"string"`

	// Account ID of the license configuration's owner.
	OwnerAccountId *string `type:"string"`

	// Status of the license configuration.
	Status *string `type:"string"`
}

// String returns the string representation
func (s LicenseConfiguration) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LicenseConfiguration) GoString() string {
	return s.String()
}

// Describes a server resource that is associated with a license configuration.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/LicenseConfigurationAssociation
type LicenseConfigurationAssociation struct {
	_ struct{} `type:"structure"`

	// Time when the license configuration was associated with the resource.
	AssociationTime *time.Time `type:"timestamp" timestampFormat:"unix"`

	// ARN of the resource associated with the license configuration.
	ResourceArn *string `type:"string"`

	// ID of the AWS account that owns the resource consuming licenses.
	ResourceOwnerId *string `type:"string"`

	// Type of server resource.
	ResourceType ResourceType `type:"string" enum:"true"`
}

// String returns the string representation
func (s LicenseConfigurationAssociation) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LicenseConfigurationAssociation) GoString() string {
	return s.String()
}

// Contains details of the usage of each resource from the license pool.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/LicenseConfigurationUsage
type LicenseConfigurationUsage struct {
	_ struct{} `type:"structure"`

	// Time when the license configuration was initially associated with a resource.
	AssociationTime *time.Time `type:"timestamp" timestampFormat:"unix"`

	// Number of licenses consumed out of the total provisioned in the license configuration.
	ConsumedLicenses *int64 `type:"long"`

	// ARN of the resource associated with a license configuration.
	ResourceArn *string `type:"string"`

	// ID of the account that owns a resource that is associated with the license
	// configuration.
	ResourceOwnerId *string `type:"string"`

	// Status of a resource associated with the license configuration.
	ResourceStatus *string `type:"string"`

	// Type of resource associated with athe license configuration.
	ResourceType ResourceType `type:"string" enum:"true"`
}

// String returns the string representation
func (s LicenseConfigurationUsage) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LicenseConfigurationUsage) GoString() string {
	return s.String()
}

// Object used for associating a license configuration with a resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/LicenseSpecification
type LicenseSpecification struct {
	_ struct{} `type:"structure"`

	// ARN of the LicenseConfiguration object.
	//
	// LicenseConfigurationArn is a required field
	LicenseConfigurationArn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s LicenseSpecification) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s LicenseSpecification) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *LicenseSpecification) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "LicenseSpecification"}

	if s.LicenseConfigurationArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("LicenseConfigurationArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListAssociationsForLicenseConfigurationRequest
type ListAssociationsForLicenseConfigurationInput struct {
	_ struct{} `type:"structure"`

	// ARN of a LicenseConfiguration object.
	//
	// LicenseConfigurationArn is a required field
	LicenseConfigurationArn *string `type:"string" required:"true"`

	// Maximum number of results to return in a single call. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults *int64 `type:"integer"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListAssociationsForLicenseConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAssociationsForLicenseConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListAssociationsForLicenseConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListAssociationsForLicenseConfigurationInput"}

	if s.LicenseConfigurationArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("LicenseConfigurationArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListAssociationsForLicenseConfigurationResponse
type ListAssociationsForLicenseConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Lists association objects for the license configuration, each containing
	// the association time, number of consumed licenses, resource ARN, resource
	// ID, account ID that owns the resource, resource size, and resource type.
	LicenseConfigurationAssociations []LicenseConfigurationAssociation `type:"list"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListAssociationsForLicenseConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAssociationsForLicenseConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListAssociationsForLicenseConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseConfigurationsRequest
type ListLicenseConfigurationsInput struct {
	_ struct{} `type:"structure"`

	// One or more filters.
	Filters []Filter `type:"list"`

	// An array of ARNs for the calling account’s license configurations.
	LicenseConfigurationArns []string `type:"list"`

	// Maximum number of results to return in a single call. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults *int64 `type:"integer"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListLicenseConfigurationsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLicenseConfigurationsInput) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseConfigurationsResponse
type ListLicenseConfigurationsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Array of license configuration objects.
	LicenseConfigurations []LicenseConfiguration `type:"list"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListLicenseConfigurationsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLicenseConfigurationsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListLicenseConfigurationsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseSpecificationsForResourceRequest
type ListLicenseSpecificationsForResourceInput struct {
	_ struct{} `type:"structure"`

	// Maximum number of results to return in a single call. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults *int64 `type:"integer"`

	// Token for the next set of results.
	NextToken *string `type:"string"`

	// ARN of an AMI or Amazon EC2 instance that has an associated license configuration.
	//
	// ResourceArn is a required field
	ResourceArn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListLicenseSpecificationsForResourceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLicenseSpecificationsForResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListLicenseSpecificationsForResourceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListLicenseSpecificationsForResourceInput"}

	if s.ResourceArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseSpecificationsForResourceResponse
type ListLicenseSpecificationsForResourceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// License configurations associated with a resource.
	LicenseSpecifications []LicenseSpecification `type:"list"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListLicenseSpecificationsForResourceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListLicenseSpecificationsForResourceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListLicenseSpecificationsForResourceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListResourceInventoryRequest
type ListResourceInventoryInput struct {
	_ struct{} `type:"structure"`

	// One or more filters.
	Filters []InventoryFilter `type:"list"`

	// Maximum number of results to return in a single call. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults *int64 `type:"integer"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListResourceInventoryInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListResourceInventoryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListResourceInventoryInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListResourceInventoryInput"}
	if s.Filters != nil {
		for i, v := range s.Filters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Filters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListResourceInventoryResponse
type ListResourceInventoryOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Token for the next set of results.
	NextToken *string `type:"string"`

	// The detailed list of resources.
	ResourceInventoryList []ResourceInventory `type:"list"`
}

// String returns the string representation
func (s ListResourceInventoryOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListResourceInventoryOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListResourceInventoryOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListTagsForResourceRequest
type ListTagsForResourceInput struct {
	_ struct{} `type:"structure"`

	// ARN for the resource.
	//
	// ResourceArn is a required field
	ResourceArn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListTagsForResourceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTagsForResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTagsForResourceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListTagsForResourceInput"}

	if s.ResourceArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListTagsForResourceResponse
type ListTagsForResourceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// List of tags attached to the resource.
	Tags []Tag `type:"list"`
}

// String returns the string representation
func (s ListTagsForResourceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTagsForResourceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListTagsForResourceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListUsageForLicenseConfigurationRequest
type ListUsageForLicenseConfigurationInput struct {
	_ struct{} `type:"structure"`

	// List of filters to apply.
	Filters []Filter `type:"list"`

	// ARN of the targeted LicenseConfiguration object.
	//
	// LicenseConfigurationArn is a required field
	LicenseConfigurationArn *string `type:"string" required:"true"`

	// Maximum number of results to return in a single call. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults *int64 `type:"integer"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListUsageForLicenseConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsageForLicenseConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListUsageForLicenseConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListUsageForLicenseConfigurationInput"}

	if s.LicenseConfigurationArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("LicenseConfigurationArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListUsageForLicenseConfigurationResponse
type ListUsageForLicenseConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// An array of LicenseConfigurationUsage objects.
	LicenseConfigurationUsageList []LicenseConfigurationUsage `type:"list"`

	// Token for the next set of results.
	NextToken *string `type:"string"`
}

// String returns the string representation
func (s ListUsageForLicenseConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsageForLicenseConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListUsageForLicenseConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Summary for a resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ManagedResourceSummary
type ManagedResourceSummary struct {
	_ struct{} `type:"structure"`

	// Number of resources associated with licenses.
	AssociationCount *int64 `type:"long"`

	// Type of resource associated with a license (instance, host, or AMI).
	ResourceType ResourceType `type:"string" enum:"true"`
}

// String returns the string representation
func (s ManagedResourceSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ManagedResourceSummary) GoString() string {
	return s.String()
}

// Object containing configuration information for AWS Organizations.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/OrganizationConfiguration
type OrganizationConfiguration struct {
	_ struct{} `type:"structure"`

	// Flag to activate AWS Organization integration.
	//
	// EnableIntegration is a required field
	EnableIntegration *bool `type:"boolean" required:"true"`
}

// String returns the string representation
func (s OrganizationConfiguration) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OrganizationConfiguration) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OrganizationConfiguration) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "OrganizationConfiguration"}

	if s.EnableIntegration == nil {
		invalidParams.Add(aws.NewErrParamRequired("EnableIntegration"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A set of attributes that describe a resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ResourceInventory
type ResourceInventory struct {
	_ struct{} `type:"structure"`

	// The platform of the resource.
	Platform *string `type:"string"`

	// Platform version of the resource in the inventory.
	PlatformVersion *string `type:"string"`

	// The ARN of the resource.
	ResourceArn *string `type:"string"`

	// Unique ID of the resource.
	ResourceId *string `type:"string"`

	// Unique ID of the account that owns the resource.
	ResourceOwningAccountId *string `type:"string"`

	// The type of resource.
	ResourceType ResourceType `type:"string" enum:"true"`
}

// String returns the string representation
func (s ResourceInventory) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceInventory) GoString() string {
	return s.String()
}

// Tag for a resource in a key-value format.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/Tag
type Tag struct {
	_ struct{} `type:"structure"`

	// Key for the resource tag.
	Key *string `type:"string"`

	// Value for the resource tag.
	Value *string `type:"string"`
}

// String returns the string representation
func (s Tag) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Tag) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/TagResourceRequest
type TagResourceInput struct {
	_ struct{} `type:"structure"`

	// Resource of the ARN to be tagged.
	//
	// ResourceArn is a required field
	ResourceArn *string `type:"string" required:"true"`

	// Names of the tags to attach to the resource.
	//
	// Tags is a required field
	Tags []Tag `type:"list" required:"true"`
}

// String returns the string representation
func (s TagResourceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TagResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TagResourceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "TagResourceInput"}

	if s.ResourceArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceArn"))
	}

	if s.Tags == nil {
		invalidParams.Add(aws.NewErrParamRequired("Tags"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/TagResourceResponse
type TagResourceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s TagResourceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TagResourceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s TagResourceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UntagResourceRequest
type UntagResourceInput struct {
	_ struct{} `type:"structure"`

	// ARN of the resource.
	//
	// ResourceArn is a required field
	ResourceArn *string `type:"string" required:"true"`

	// List keys identifying tags to remove.
	//
	// TagKeys is a required field
	TagKeys []string `type:"list" required:"true"`
}

// String returns the string representation
func (s UntagResourceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UntagResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UntagResourceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UntagResourceInput"}

	if s.ResourceArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceArn"))
	}

	if s.TagKeys == nil {
		invalidParams.Add(aws.NewErrParamRequired("TagKeys"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UntagResourceResponse
type UntagResourceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UntagResourceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UntagResourceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UntagResourceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseConfigurationRequest
type UpdateLicenseConfigurationInput struct {
	_ struct{} `type:"structure"`

	// New human-friendly description of the license configuration.
	Description *string `type:"string"`

	// ARN for a license configuration.
	//
	// LicenseConfigurationArn is a required field
	LicenseConfigurationArn *string `type:"string" required:"true"`

	// New status of the license configuration (ACTIVE or INACTIVE).
	LicenseConfigurationStatus LicenseConfigurationStatus `type:"string" enum:"true"`

	// New number of licenses managed by the license configuration.
	LicenseCount *int64 `type:"long"`

	// Sets the number of available licenses as a hard limit.
	LicenseCountHardLimit *bool `type:"boolean"`

	// List of flexible text strings designating license rules.
	LicenseRules []string `type:"list"`

	// New name of the license configuration.
	Name *string `type:"string"`
}

// String returns the string representation
func (s UpdateLicenseConfigurationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLicenseConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateLicenseConfigurationInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateLicenseConfigurationInput"}

	if s.LicenseConfigurationArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("LicenseConfigurationArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseConfigurationResponse
type UpdateLicenseConfigurationOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateLicenseConfigurationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLicenseConfigurationOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateLicenseConfigurationOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseSpecificationsForResourceRequest
type UpdateLicenseSpecificationsForResourceInput struct {
	_ struct{} `type:"structure"`

	// License configuration ARNs to be added to a resource.
	AddLicenseSpecifications []LicenseSpecification `type:"list"`

	// License configuration ARNs to be removed from a resource.
	RemoveLicenseSpecifications []LicenseSpecification `type:"list"`

	// ARN for an AWS server resource.
	//
	// ResourceArn is a required field
	ResourceArn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateLicenseSpecificationsForResourceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLicenseSpecificationsForResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateLicenseSpecificationsForResourceInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateLicenseSpecificationsForResourceInput"}

	if s.ResourceArn == nil {
		invalidParams.Add(aws.NewErrParamRequired("ResourceArn"))
	}
	if s.AddLicenseSpecifications != nil {
		for i, v := range s.AddLicenseSpecifications {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "AddLicenseSpecifications", i), err.(aws.ErrInvalidParams))
			}
		}
	}
	if s.RemoveLicenseSpecifications != nil {
		for i, v := range s.RemoveLicenseSpecifications {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "RemoveLicenseSpecifications", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseSpecificationsForResourceResponse
type UpdateLicenseSpecificationsForResourceOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateLicenseSpecificationsForResourceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLicenseSpecificationsForResourceOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateLicenseSpecificationsForResourceOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateServiceSettingsRequest
type UpdateServiceSettingsInput struct {
	_ struct{} `type:"structure"`

	// Activates cross-account discovery.
	EnableCrossAccountsDiscovery *bool `type:"boolean"`

	// Integrates AWS Organizations with License Manager for cross-account discovery.
	OrganizationConfiguration *OrganizationConfiguration `type:"structure"`

	// ARN of the Amazon S3 bucket where License Manager information is stored.
	S3BucketArn *string `type:"string"`

	// ARN of the Amazon SNS topic used for License Manager alerts.
	SnsTopicArn *string `type:"string"`
}

// String returns the string representation
func (s UpdateServiceSettingsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateServiceSettingsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateServiceSettingsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateServiceSettingsInput"}
	if s.OrganizationConfiguration != nil {
		if err := s.OrganizationConfiguration.Validate(); err != nil {
			invalidParams.AddNested("OrganizationConfiguration", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateServiceSettingsResponse
type UpdateServiceSettingsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateServiceSettingsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateServiceSettingsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateServiceSettingsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

type InventoryFilterCondition string

// Enum values for InventoryFilterCondition
const (
	InventoryFilterConditionEquals     InventoryFilterCondition = "EQUALS"
	InventoryFilterConditionNotEquals  InventoryFilterCondition = "NOT_EQUALS"
	InventoryFilterConditionBeginsWith InventoryFilterCondition = "BEGINS_WITH"
	InventoryFilterConditionContains   InventoryFilterCondition = "CONTAINS"
)

func (enum InventoryFilterCondition) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InventoryFilterCondition) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LicenseConfigurationStatus string

// Enum values for LicenseConfigurationStatus
const (
	LicenseConfigurationStatusAvailable LicenseConfigurationStatus = "AVAILABLE"
	LicenseConfigurationStatusDisabled  LicenseConfigurationStatus = "DISABLED"
)

func (enum LicenseConfigurationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LicenseConfigurationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type LicenseCountingType string

// Enum values for LicenseCountingType
const (
	LicenseCountingTypeVCpu     LicenseCountingType = "vCPU"
	LicenseCountingTypeInstance LicenseCountingType = "Instance"
	LicenseCountingTypeCore     LicenseCountingType = "Core"
	LicenseCountingTypeSocket   LicenseCountingType = "Socket"
)

func (enum LicenseCountingType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum LicenseCountingType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeEc2Instance ResourceType = "EC2_INSTANCE"
	ResourceTypeEc2Host     ResourceType = "EC2_HOST"
	ResourceTypeEc2Ami      ResourceType = "EC2_AMI"
)

func (enum ResourceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ResourceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
