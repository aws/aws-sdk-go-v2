// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package licensemanager

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/licensemanager/types"
)

const opCreateLicenseConfiguration = "CreateLicenseConfiguration"

// CreateLicenseConfigurationRequest returns a request value for making API operation for
// AWS License Manager.
//
// Creates a new license configuration object. A license configuration is an
// abstraction of a customer license agreement that can be consumed and enforced
// by License Manager. Components include specifications for the license type
// (licensing by instance, socket, CPU, or VCPU), tenancy (shared tenancy, Amazon
// EC2 Dedicated Instance, Amazon EC2 Dedicated Host, or any of these), host
// affinity (how long a VM must be associated with a host), the number of licenses
// purchased and used.
//
//    // Example sending a request using CreateLicenseConfigurationRequest.
//    req := client.CreateLicenseConfigurationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicenseConfiguration
func (c *Client) CreateLicenseConfigurationRequest(input *types.CreateLicenseConfigurationInput) CreateLicenseConfigurationRequest {
	op := &aws.Operation{
		Name:       opCreateLicenseConfiguration,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateLicenseConfigurationInput{}
	}

	req := c.newRequest(op, input, &types.CreateLicenseConfigurationOutput{})
	return CreateLicenseConfigurationRequest{Request: req, Input: input, Copy: c.CreateLicenseConfigurationRequest}
}

// CreateLicenseConfigurationRequest is the request type for the
// CreateLicenseConfiguration API operation.
type CreateLicenseConfigurationRequest struct {
	*aws.Request
	Input *types.CreateLicenseConfigurationInput
	Copy  func(*types.CreateLicenseConfigurationInput) CreateLicenseConfigurationRequest
}

// Send marshals and sends the CreateLicenseConfiguration API request.
func (r CreateLicenseConfigurationRequest) Send(ctx context.Context) (*CreateLicenseConfigurationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateLicenseConfigurationResponse{
		CreateLicenseConfigurationOutput: r.Request.Data.(*types.CreateLicenseConfigurationOutput),
		response:                         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateLicenseConfigurationResponse is the response type for the
// CreateLicenseConfiguration API operation.
type CreateLicenseConfigurationResponse struct {
	*types.CreateLicenseConfigurationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateLicenseConfiguration request.
func (r *CreateLicenseConfigurationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
