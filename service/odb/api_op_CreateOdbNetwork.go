// Code generated by smithy-go-codegen DO NOT EDIT.

package odb

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/service/odb/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Creates an ODB network.
func (c *Client) CreateOdbNetwork(ctx context.Context, params *CreateOdbNetworkInput, optFns ...func(*Options)) (*CreateOdbNetworkOutput, error) {
	if params == nil {
		params = &CreateOdbNetworkInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateOdbNetwork", params, optFns, c.addOperationCreateOdbNetworkMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateOdbNetworkOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateOdbNetworkInput struct {

	// The CIDR range of the client subnet for the ODB network.
	//
	// Constraints:
	//
	//   - Must not overlap with the CIDR range of the backup subnet.
	//
	//   - Must not overlap with the CIDR ranges of the VPCs that are connected to the
	//   ODB network.
	//
	//   - Must not use the following CIDR ranges that are reserved by OCI:
	//
	//   - 100.106.0.0/16 and 100.107.0.0/16
	//
	//   - 169.254.0.0/16
	//
	//   - 224.0.0.0 - 239.255.255.255
	//
	//   - 240.0.0.0 - 255.255.255.255
	//
	// This member is required.
	ClientSubnetCidr *string

	// A user-friendly name for the ODB network.
	//
	// This member is required.
	DisplayName *string

	// The Amazon Web Services Availability Zone (AZ) where the ODB network is located.
	//
	// This operation requires that you specify a value for either availabilityZone or
	// availabilityZoneId .
	AvailabilityZone *string

	// The AZ ID of the AZ where the ODB network is located.
	//
	// This operation requires that you specify a value for either availabilityZone or
	// availabilityZoneId .
	AvailabilityZoneId *string

	// The CIDR range of the backup subnet for the ODB network.
	//
	// Constraints:
	//
	//   - Must not overlap with the CIDR range of the client subnet.
	//
	//   - Must not overlap with the CIDR ranges of the VPCs that are connected to the
	//   ODB network.
	//
	//   - Must not use the following CIDR ranges that are reserved by OCI:
	//
	//   - 100.106.0.0/16 and 100.107.0.0/16
	//
	//   - 169.254.0.0/16
	//
	//   - 224.0.0.0 - 239.255.255.255
	//
	//   - 240.0.0.0 - 255.255.255.255
	BackupSubnetCidr *string

	// A unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. If you don't specify a client token, the Amazon Web Services SDK
	// automatically generates a client token and uses it for the request to ensure
	// idempotency. The client token is valid for up to 24 hours after it's first used.
	ClientToken *string

	// The domain name to use for the resources in the ODB network.
	CustomDomainName *string

	// The DNS prefix to the default DNS domain name. The default DNS domain name is
	// oraclevcn.com.
	DefaultDnsPrefix *string

	// Specifies the configuration for Amazon S3 access from the ODB network.
	S3Access types.Access

	// Specifies the endpoint policy for Amazon S3 access from the ODB network.
	S3PolicyDocument *string

	// The list of resource tags to apply to the ODB network.
	Tags map[string]string

	// Specifies the configuration for Zero-ETL access from the ODB network.
	ZeroEtlAccess types.Access

	noSmithyDocumentSerde
}

type CreateOdbNetworkOutput struct {

	// The unique identifier of the ODB network.
	//
	// This member is required.
	OdbNetworkId *string

	// The user-friendly name of the ODB network.
	DisplayName *string

	// The current status of the ODB network.
	Status types.ResourceStatus

	// Additional information about the status of the ODB network.
	StatusReason *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateOdbNetworkMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpCreateOdbNetwork{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpCreateOdbNetwork{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "CreateOdbNetwork"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addIdempotencyToken_opCreateOdbNetworkMiddleware(stack, options); err != nil {
		return err
	}
	if err = addOpCreateOdbNetworkValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateOdbNetwork(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addInterceptAttempt(stack, options); err != nil {
		return err
	}
	if err = addInterceptExecution(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeSerialization(stack, options); err != nil {
		return err
	}
	if err = addInterceptAfterSerialization(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeSigning(stack, options); err != nil {
		return err
	}
	if err = addInterceptAfterSigning(stack, options); err != nil {
		return err
	}
	if err = addInterceptTransmit(stack, options); err != nil {
		return err
	}
	if err = addInterceptBeforeDeserialization(stack, options); err != nil {
		return err
	}
	if err = addInterceptAfterDeserialization(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

type idempotencyToken_initializeOpCreateOdbNetwork struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpCreateOdbNetwork) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpCreateOdbNetwork) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*CreateOdbNetworkInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *CreateOdbNetworkInput ")
	}

	if input.ClientToken == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.ClientToken = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opCreateOdbNetworkMiddleware(stack *middleware.Stack, cfg Options) error {
	return stack.Initialize.Add(&idempotencyToken_initializeOpCreateOdbNetwork{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opCreateOdbNetwork(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "CreateOdbNetwork",
	}
}
