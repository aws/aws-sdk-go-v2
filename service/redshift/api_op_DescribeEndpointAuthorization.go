// Code generated by smithy-go-codegen DO NOT EDIT.

package redshift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Describes an endpoint authorization.
func (c *Client) DescribeEndpointAuthorization(ctx context.Context, params *DescribeEndpointAuthorizationInput, optFns ...func(*Options)) (*DescribeEndpointAuthorizationOutput, error) {
	if params == nil {
		params = &DescribeEndpointAuthorizationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeEndpointAuthorization", params, optFns, addOperationDescribeEndpointAuthorizationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeEndpointAuthorizationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeEndpointAuthorizationInput struct {

	// The AWS account ID of either the cluster owner (grantor) or grantee. If Grantee
	// parameter is true, then the Account value is of the grantor.
	Account *string

	// The cluster identifier of the cluster to access.
	ClusterIdentifier *string

	// Indicates whether to check authorization from a grantor or grantee point of
	// view. If true, Amazon Redshift returns endpoint authorizations that you've been
	// granted. If false (default), checks authorization from a grantor point of view.
	Grantee *bool

	// Reserved for Amazon Redshift internal use.
	Marker *string

	// Reserved for Amazon Redshift internal use.
	MaxRecords *int32
}

type DescribeEndpointAuthorizationOutput struct {

	// The authorizations to an endpoint.
	EndpointAuthorizationList []types.EndpointAuthorization

	// Reserved for Amazon Redshift internal use.
	Marker *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribeEndpointAuthorizationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsquery_serializeOpDescribeEndpointAuthorization{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsquery_deserializeOpDescribeEndpointAuthorization{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeEndpointAuthorization(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opDescribeEndpointAuthorization(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "redshift",
		OperationName: "DescribeEndpointAuthorization",
	}
}
