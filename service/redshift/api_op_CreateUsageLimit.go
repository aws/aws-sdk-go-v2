// Code generated by smithy-go-codegen DO NOT EDIT.

package redshift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a usage limit for a specified Amazon Redshift feature on a cluster. The
// usage limit is identified by the returned usage limit identifier.
func (c *Client) CreateUsageLimit(ctx context.Context, params *CreateUsageLimitInput, optFns ...func(*Options)) (*CreateUsageLimitOutput, error) {
	stack := middleware.NewStack("CreateUsageLimit", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateUsageLimitMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateUsageLimitValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateUsageLimit(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateUsageLimit",
			Err:           err,
		}
	}
	out := result.(*CreateUsageLimitOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateUsageLimitInput struct {
	// The Amazon Redshift feature that you want to limit.
	FeatureType types.UsageLimitFeatureType
	// A list of tag instances.
	Tags []*types.Tag
	// The identifier of the cluster that you want to limit usage.
	ClusterIdentifier *string
	// The action that Amazon Redshift takes when the limit is reached. The default is
	// log. For more information about this parameter, see UsageLimit ().
	BreachAction types.UsageLimitBreachAction
	// The time period that the amount applies to. A weekly period begins on Sunday.
	// The default is monthly.
	Period types.UsageLimitPeriod
	// The limit amount. If time-based, this amount is in minutes. If data-based, this
	// amount is in terabytes (TB). The value must be a positive number.
	Amount *int64
	// The type of limit. Depending on the feature type, this can be based on a time
	// duration or data size. If FeatureType is spectrum, then LimitType must be
	// data-scanned. If FeatureType is concurrency-scaling, then LimitType must be
	// time.
	LimitType types.UsageLimitLimitType
}

// Describes a usage limit object for a cluster.
type CreateUsageLimitOutput struct {
	// The identifier of the cluster with a usage limit.
	ClusterIdentifier *string
	// The Amazon Redshift feature to which the limit applies.
	FeatureType types.UsageLimitFeatureType
	// A list of tag instances.
	Tags []*types.Tag
	// The type of limit. Depending on the feature type, this can be based on a time
	// duration or data size.
	LimitType types.UsageLimitLimitType
	// The action that Amazon Redshift takes when the limit is reached. Possible values
	// are:
	//
	//     * log - To log an event in a system table. The default is log.
	//
	//     *
	// emit-metric - To emit CloudWatch metrics.
	//
	//     * disable - To disable the
	// feature until the next usage period begins.
	BreachAction types.UsageLimitBreachAction
	// The time period that the amount applies to. A weekly period begins on Sunday.
	// The default is monthly.
	Period types.UsageLimitPeriod
	// The identifier of the usage limit.
	UsageLimitId *string
	// The limit amount. If time-based, this amount is in minutes. If data-based, this
	// amount is in terabytes (TB).
	Amount *int64

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateUsageLimitMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateUsageLimit{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateUsageLimit{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateUsageLimit(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "redshift",
		OperationName: "CreateUsageLimit",
	}
}
