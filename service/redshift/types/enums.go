// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionType string

// Enum values for ActionType
const (
	ActionTypeRestoreCluster      ActionType = "restore-cluster"
	ActionTypeRecommendNodeConfig ActionType = "recommend-node-config"
	ActionTypeResizeCluster       ActionType = "resize-cluster"
)

// Values returns all known values for ActionType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ActionType) Values() []ActionType {
	return []ActionType{
		"restore-cluster",
		"recommend-node-config",
		"resize-cluster",
	}
}

type AquaConfigurationStatus string

// Enum values for AquaConfigurationStatus
const (
	AquaConfigurationStatusEnabled  AquaConfigurationStatus = "enabled"
	AquaConfigurationStatusDisabled AquaConfigurationStatus = "disabled"
	AquaConfigurationStatusAuto     AquaConfigurationStatus = "auto"
)

// Values returns all known values for AquaConfigurationStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AquaConfigurationStatus) Values() []AquaConfigurationStatus {
	return []AquaConfigurationStatus{
		"enabled",
		"disabled",
		"auto",
	}
}

type AquaStatus string

// Enum values for AquaStatus
const (
	AquaStatusEnabled  AquaStatus = "enabled"
	AquaStatusDisabled AquaStatus = "disabled"
	AquaStatusApplying AquaStatus = "applying"
)

// Values returns all known values for AquaStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (AquaStatus) Values() []AquaStatus {
	return []AquaStatus{
		"enabled",
		"disabled",
		"applying",
	}
}

type AuthorizationStatus string

// Enum values for AuthorizationStatus
const (
	AuthorizationStatusAuthorized AuthorizationStatus = "Authorized"
	AuthorizationStatusRevoking   AuthorizationStatus = "Revoking"
)

// Values returns all known values for AuthorizationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AuthorizationStatus) Values() []AuthorizationStatus {
	return []AuthorizationStatus{
		"Authorized",
		"Revoking",
	}
}

type DataShareStatus string

// Enum values for DataShareStatus
const (
	DataShareStatusActive               DataShareStatus = "ACTIVE"
	DataShareStatusPendingAuthorization DataShareStatus = "PENDING_AUTHORIZATION"
	DataShareStatusAuthorized           DataShareStatus = "AUTHORIZED"
	DataShareStatusDeauthorized         DataShareStatus = "DEAUTHORIZED"
	DataShareStatusRejected             DataShareStatus = "REJECTED"
	DataShareStatusAvailable            DataShareStatus = "AVAILABLE"
)

// Values returns all known values for DataShareStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DataShareStatus) Values() []DataShareStatus {
	return []DataShareStatus{
		"ACTIVE",
		"PENDING_AUTHORIZATION",
		"AUTHORIZED",
		"DEAUTHORIZED",
		"REJECTED",
		"AVAILABLE",
	}
}

type DataShareStatusForConsumer string

// Enum values for DataShareStatusForConsumer
const (
	DataShareStatusForConsumerActive    DataShareStatusForConsumer = "ACTIVE"
	DataShareStatusForConsumerAvailable DataShareStatusForConsumer = "AVAILABLE"
)

// Values returns all known values for DataShareStatusForConsumer. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataShareStatusForConsumer) Values() []DataShareStatusForConsumer {
	return []DataShareStatusForConsumer{
		"ACTIVE",
		"AVAILABLE",
	}
}

type DataShareStatusForProducer string

// Enum values for DataShareStatusForProducer
const (
	DataShareStatusForProducerActive               DataShareStatusForProducer = "ACTIVE"
	DataShareStatusForProducerAuthorized           DataShareStatusForProducer = "AUTHORIZED"
	DataShareStatusForProducerPendingAuthorization DataShareStatusForProducer = "PENDING_AUTHORIZATION"
	DataShareStatusForProducerDeauthorized         DataShareStatusForProducer = "DEAUTHORIZED"
	DataShareStatusForProducerRejected             DataShareStatusForProducer = "REJECTED"
)

// Values returns all known values for DataShareStatusForProducer. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataShareStatusForProducer) Values() []DataShareStatusForProducer {
	return []DataShareStatusForProducer{
		"ACTIVE",
		"AUTHORIZED",
		"PENDING_AUTHORIZATION",
		"DEAUTHORIZED",
		"REJECTED",
	}
}

type LogDestinationType string

// Enum values for LogDestinationType
const (
	LogDestinationTypeS3         LogDestinationType = "s3"
	LogDestinationTypeCloudwatch LogDestinationType = "cloudwatch"
)

// Values returns all known values for LogDestinationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (LogDestinationType) Values() []LogDestinationType {
	return []LogDestinationType{
		"s3",
		"cloudwatch",
	}
}

type Mode string

// Enum values for Mode
const (
	ModeStandard        Mode = "standard"
	ModeHighPerformance Mode = "high-performance"
)

// Values returns all known values for Mode. Note that this can be expanded in the
// future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (Mode) Values() []Mode {
	return []Mode{
		"standard",
		"high-performance",
	}
}

type NodeConfigurationOptionsFilterName string

// Enum values for NodeConfigurationOptionsFilterName
const (
	NodeConfigurationOptionsFilterNameNodeType                        NodeConfigurationOptionsFilterName = "NodeType"
	NodeConfigurationOptionsFilterNameNumNodes                        NodeConfigurationOptionsFilterName = "NumberOfNodes"
	NodeConfigurationOptionsFilterNameEstimatedDiskUtilizationPercent NodeConfigurationOptionsFilterName = "EstimatedDiskUtilizationPercent"
	NodeConfigurationOptionsFilterNameMode                            NodeConfigurationOptionsFilterName = "Mode"
)

// Values returns all known values for NodeConfigurationOptionsFilterName. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (NodeConfigurationOptionsFilterName) Values() []NodeConfigurationOptionsFilterName {
	return []NodeConfigurationOptionsFilterName{
		"NodeType",
		"NumberOfNodes",
		"EstimatedDiskUtilizationPercent",
		"Mode",
	}
}

type OperatorType string

// Enum values for OperatorType
const (
	OperatorTypeEq      OperatorType = "eq"
	OperatorTypeLt      OperatorType = "lt"
	OperatorTypeGt      OperatorType = "gt"
	OperatorTypeLe      OperatorType = "le"
	OperatorTypeGe      OperatorType = "ge"
	OperatorTypeIn      OperatorType = "in"
	OperatorTypeBetween OperatorType = "between"
)

// Values returns all known values for OperatorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (OperatorType) Values() []OperatorType {
	return []OperatorType{
		"eq",
		"lt",
		"gt",
		"le",
		"ge",
		"in",
		"between",
	}
}

type ParameterApplyType string

// Enum values for ParameterApplyType
const (
	ParameterApplyTypeStatic  ParameterApplyType = "static"
	ParameterApplyTypeDynamic ParameterApplyType = "dynamic"
)

// Values returns all known values for ParameterApplyType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ParameterApplyType) Values() []ParameterApplyType {
	return []ParameterApplyType{
		"static",
		"dynamic",
	}
}

type PartnerIntegrationStatus string

// Enum values for PartnerIntegrationStatus
const (
	PartnerIntegrationStatusActive            PartnerIntegrationStatus = "Active"
	PartnerIntegrationStatusInactive          PartnerIntegrationStatus = "Inactive"
	PartnerIntegrationStatusRuntimeFailure    PartnerIntegrationStatus = "RuntimeFailure"
	PartnerIntegrationStatusConnectionFailure PartnerIntegrationStatus = "ConnectionFailure"
)

// Values returns all known values for PartnerIntegrationStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (PartnerIntegrationStatus) Values() []PartnerIntegrationStatus {
	return []PartnerIntegrationStatus{
		"Active",
		"Inactive",
		"RuntimeFailure",
		"ConnectionFailure",
	}
}

type ReservedNodeExchangeActionType string

// Enum values for ReservedNodeExchangeActionType
const (
	ReservedNodeExchangeActionTypeRestoreCluster ReservedNodeExchangeActionType = "restore-cluster"
	ReservedNodeExchangeActionTypeResizeCluster  ReservedNodeExchangeActionType = "resize-cluster"
)

// Values returns all known values for ReservedNodeExchangeActionType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (ReservedNodeExchangeActionType) Values() []ReservedNodeExchangeActionType {
	return []ReservedNodeExchangeActionType{
		"restore-cluster",
		"resize-cluster",
	}
}

type ReservedNodeExchangeStatusType string

// Enum values for ReservedNodeExchangeStatusType
const (
	ReservedNodeExchangeStatusTypeRequested  ReservedNodeExchangeStatusType = "REQUESTED"
	ReservedNodeExchangeStatusTypePending    ReservedNodeExchangeStatusType = "PENDING"
	ReservedNodeExchangeStatusTypeInProgress ReservedNodeExchangeStatusType = "IN_PROGRESS"
	ReservedNodeExchangeStatusTypeRetrying   ReservedNodeExchangeStatusType = "RETRYING"
	ReservedNodeExchangeStatusTypeSucceeded  ReservedNodeExchangeStatusType = "SUCCEEDED"
	ReservedNodeExchangeStatusTypeFailed     ReservedNodeExchangeStatusType = "FAILED"
)

// Values returns all known values for ReservedNodeExchangeStatusType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (ReservedNodeExchangeStatusType) Values() []ReservedNodeExchangeStatusType {
	return []ReservedNodeExchangeStatusType{
		"REQUESTED",
		"PENDING",
		"IN_PROGRESS",
		"RETRYING",
		"SUCCEEDED",
		"FAILED",
	}
}

type ReservedNodeOfferingType string

// Enum values for ReservedNodeOfferingType
const (
	ReservedNodeOfferingTypeRegular    ReservedNodeOfferingType = "Regular"
	ReservedNodeOfferingTypeUpgradable ReservedNodeOfferingType = "Upgradable"
)

// Values returns all known values for ReservedNodeOfferingType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReservedNodeOfferingType) Values() []ReservedNodeOfferingType {
	return []ReservedNodeOfferingType{
		"Regular",
		"Upgradable",
	}
}

type ScheduledActionFilterName string

// Enum values for ScheduledActionFilterName
const (
	ScheduledActionFilterNameClusterIdentifier ScheduledActionFilterName = "cluster-identifier"
	ScheduledActionFilterNameIamRole           ScheduledActionFilterName = "iam-role"
)

// Values returns all known values for ScheduledActionFilterName. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScheduledActionFilterName) Values() []ScheduledActionFilterName {
	return []ScheduledActionFilterName{
		"cluster-identifier",
		"iam-role",
	}
}

type ScheduledActionState string

// Enum values for ScheduledActionState
const (
	ScheduledActionStateActive   ScheduledActionState = "ACTIVE"
	ScheduledActionStateDisabled ScheduledActionState = "DISABLED"
)

// Values returns all known values for ScheduledActionState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ScheduledActionState) Values() []ScheduledActionState {
	return []ScheduledActionState{
		"ACTIVE",
		"DISABLED",
	}
}

type ScheduledActionTypeValues string

// Enum values for ScheduledActionTypeValues
const (
	ScheduledActionTypeValuesResizeCluster ScheduledActionTypeValues = "ResizeCluster"
	ScheduledActionTypeValuesPauseCluster  ScheduledActionTypeValues = "PauseCluster"
	ScheduledActionTypeValuesResumeCluster ScheduledActionTypeValues = "ResumeCluster"
)

// Values returns all known values for ScheduledActionTypeValues. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScheduledActionTypeValues) Values() []ScheduledActionTypeValues {
	return []ScheduledActionTypeValues{
		"ResizeCluster",
		"PauseCluster",
		"ResumeCluster",
	}
}

type ScheduleState string

// Enum values for ScheduleState
const (
	ScheduleStateModifying ScheduleState = "MODIFYING"
	ScheduleStateActive    ScheduleState = "ACTIVE"
	ScheduleStateFailed    ScheduleState = "FAILED"
)

// Values returns all known values for ScheduleState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ScheduleState) Values() []ScheduleState {
	return []ScheduleState{
		"MODIFYING",
		"ACTIVE",
		"FAILED",
	}
}

type SnapshotAttributeToSortBy string

// Enum values for SnapshotAttributeToSortBy
const (
	SnapshotAttributeToSortBySourceType SnapshotAttributeToSortBy = "SOURCE_TYPE"
	SnapshotAttributeToSortByTotalSize  SnapshotAttributeToSortBy = "TOTAL_SIZE"
	SnapshotAttributeToSortByCreateTime SnapshotAttributeToSortBy = "CREATE_TIME"
)

// Values returns all known values for SnapshotAttributeToSortBy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (SnapshotAttributeToSortBy) Values() []SnapshotAttributeToSortBy {
	return []SnapshotAttributeToSortBy{
		"SOURCE_TYPE",
		"TOTAL_SIZE",
		"CREATE_TIME",
	}
}

type SortByOrder string

// Enum values for SortByOrder
const (
	SortByOrderAscending  SortByOrder = "ASC"
	SortByOrderDescending SortByOrder = "DESC"
)

// Values returns all known values for SortByOrder. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (SortByOrder) Values() []SortByOrder {
	return []SortByOrder{
		"ASC",
		"DESC",
	}
}

type SourceType string

// Enum values for SourceType
const (
	SourceTypeCluster               SourceType = "cluster"
	SourceTypeClusterParameterGroup SourceType = "cluster-parameter-group"
	SourceTypeClusterSecurityGroup  SourceType = "cluster-security-group"
	SourceTypeClusterSnapshot       SourceType = "cluster-snapshot"
	SourceTypeScheduledAction       SourceType = "scheduled-action"
)

// Values returns all known values for SourceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (SourceType) Values() []SourceType {
	return []SourceType{
		"cluster",
		"cluster-parameter-group",
		"cluster-security-group",
		"cluster-snapshot",
		"scheduled-action",
	}
}

type TableRestoreStatusType string

// Enum values for TableRestoreStatusType
const (
	TableRestoreStatusTypePending    TableRestoreStatusType = "PENDING"
	TableRestoreStatusTypeInProgress TableRestoreStatusType = "IN_PROGRESS"
	TableRestoreStatusTypeSucceeded  TableRestoreStatusType = "SUCCEEDED"
	TableRestoreStatusTypeFailed     TableRestoreStatusType = "FAILED"
	TableRestoreStatusTypeCanceled   TableRestoreStatusType = "CANCELED"
)

// Values returns all known values for TableRestoreStatusType. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (TableRestoreStatusType) Values() []TableRestoreStatusType {
	return []TableRestoreStatusType{
		"PENDING",
		"IN_PROGRESS",
		"SUCCEEDED",
		"FAILED",
		"CANCELED",
	}
}

type UsageLimitBreachAction string

// Enum values for UsageLimitBreachAction
const (
	UsageLimitBreachActionLog        UsageLimitBreachAction = "log"
	UsageLimitBreachActionEmitMetric UsageLimitBreachAction = "emit-metric"
	UsageLimitBreachActionDisable    UsageLimitBreachAction = "disable"
)

// Values returns all known values for UsageLimitBreachAction. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (UsageLimitBreachAction) Values() []UsageLimitBreachAction {
	return []UsageLimitBreachAction{
		"log",
		"emit-metric",
		"disable",
	}
}

type UsageLimitFeatureType string

// Enum values for UsageLimitFeatureType
const (
	UsageLimitFeatureTypeSpectrum               UsageLimitFeatureType = "spectrum"
	UsageLimitFeatureTypeConcurrencyScaling     UsageLimitFeatureType = "concurrency-scaling"
	UsageLimitFeatureTypeCrossRegionDatasharing UsageLimitFeatureType = "cross-region-datasharing"
)

// Values returns all known values for UsageLimitFeatureType. Note that this can
// be expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (UsageLimitFeatureType) Values() []UsageLimitFeatureType {
	return []UsageLimitFeatureType{
		"spectrum",
		"concurrency-scaling",
		"cross-region-datasharing",
	}
}

type UsageLimitLimitType string

// Enum values for UsageLimitLimitType
const (
	UsageLimitLimitTypeTime        UsageLimitLimitType = "time"
	UsageLimitLimitTypeDataScanned UsageLimitLimitType = "data-scanned"
)

// Values returns all known values for UsageLimitLimitType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (UsageLimitLimitType) Values() []UsageLimitLimitType {
	return []UsageLimitLimitType{
		"time",
		"data-scanned",
	}
}

type UsageLimitPeriod string

// Enum values for UsageLimitPeriod
const (
	UsageLimitPeriodDaily   UsageLimitPeriod = "daily"
	UsageLimitPeriodWeekly  UsageLimitPeriod = "weekly"
	UsageLimitPeriodMonthly UsageLimitPeriod = "monthly"
)

// Values returns all known values for UsageLimitPeriod. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (UsageLimitPeriod) Values() []UsageLimitPeriod {
	return []UsageLimitPeriod{
		"daily",
		"weekly",
		"monthly",
	}
}
