// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package redshift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
)

const opRestoreFromClusterSnapshot = "RestoreFromClusterSnapshot"

// RestoreFromClusterSnapshotRequest returns a request value for making API operation for
// Amazon Redshift.
//
// Creates a new cluster from a snapshot. By default, Amazon Redshift creates
// the resulting cluster with the same configuration as the original cluster
// from which the snapshot was created, except that the new cluster is created
// with the default cluster security and parameter groups. After Amazon Redshift
// creates the cluster, you can use the ModifyCluster API to associate a different
// security group and different parameter group with the restored cluster. If
// you are using a DS node type, you can also choose to change to another DS
// node type of the same size during restore.
//
// If you restore a cluster into a VPC, you must provide a cluster subnet group
// where you want the cluster restored.
//
// For more information about working with snapshots, go to Amazon Redshift
// Snapshots (https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html)
// in the Amazon Redshift Cluster Management Guide.
//
//    // Example sending a request using RestoreFromClusterSnapshotRequest.
//    req := client.RestoreFromClusterSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/redshift-2012-12-01/RestoreFromClusterSnapshot
func (c *Client) RestoreFromClusterSnapshotRequest(input *types.RestoreFromClusterSnapshotInput) RestoreFromClusterSnapshotRequest {
	op := &aws.Operation{
		Name:       opRestoreFromClusterSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.RestoreFromClusterSnapshotInput{}
	}

	req := c.newRequest(op, input, &types.RestoreFromClusterSnapshotOutput{})
	return RestoreFromClusterSnapshotRequest{Request: req, Input: input, Copy: c.RestoreFromClusterSnapshotRequest}
}

// RestoreFromClusterSnapshotRequest is the request type for the
// RestoreFromClusterSnapshot API operation.
type RestoreFromClusterSnapshotRequest struct {
	*aws.Request
	Input *types.RestoreFromClusterSnapshotInput
	Copy  func(*types.RestoreFromClusterSnapshotInput) RestoreFromClusterSnapshotRequest
}

// Send marshals and sends the RestoreFromClusterSnapshot API request.
func (r RestoreFromClusterSnapshotRequest) Send(ctx context.Context) (*RestoreFromClusterSnapshotResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RestoreFromClusterSnapshotResponse{
		RestoreFromClusterSnapshotOutput: r.Request.Data.(*types.RestoreFromClusterSnapshotOutput),
		response:                         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RestoreFromClusterSnapshotResponse is the response type for the
// RestoreFromClusterSnapshot API operation.
type RestoreFromClusterSnapshotResponse struct {
	*types.RestoreFromClusterSnapshotOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RestoreFromClusterSnapshot request.
func (r *RestoreFromClusterSnapshotResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
