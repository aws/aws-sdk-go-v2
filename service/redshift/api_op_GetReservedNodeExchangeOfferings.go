// Code generated by smithy-go-codegen DO NOT EDIT.

package redshift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns an array of DC2 ReservedNodeOfferings that matches the payment type,
// term, and usage price of the given DC1 reserved node.
func (c *Client) GetReservedNodeExchangeOfferings(ctx context.Context, params *GetReservedNodeExchangeOfferingsInput, optFns ...func(*Options)) (*GetReservedNodeExchangeOfferingsOutput, error) {
	stack := middleware.NewStack("GetReservedNodeExchangeOfferings", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpGetReservedNodeExchangeOfferingsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetReservedNodeExchangeOfferingsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetReservedNodeExchangeOfferings(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetReservedNodeExchangeOfferings",
			Err:           err,
		}
	}
	out := result.(*GetReservedNodeExchangeOfferingsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type GetReservedNodeExchangeOfferingsInput struct {
	// An integer setting the maximum number of ReservedNodeOfferings to retrieve.
	MaxRecords *int32
	// A value that indicates the starting point for the next set of
	// ReservedNodeOfferings.
	Marker *string
	// A string representing the node identifier for the DC1 Reserved Node to be
	// exchanged.
	ReservedNodeId *string
}

type GetReservedNodeExchangeOfferingsOutput struct {
	// An optional parameter that specifies the starting point for returning a set of
	// response records. When the results of a GetReservedNodeExchangeOfferings request
	// exceed the value specified in MaxRecords, Amazon Redshift returns a value in the
	// marker field of the response. You can retrieve the next set of response records
	// by providing the returned marker value in the marker parameter and retrying the
	// request.
	Marker *string
	// Returns an array of ReservedNodeOffering () objects.
	ReservedNodeOfferings []*types.ReservedNodeOffering

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpGetReservedNodeExchangeOfferingsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpGetReservedNodeExchangeOfferings{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpGetReservedNodeExchangeOfferings{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetReservedNodeExchangeOfferings(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "redshift",
		OperationName: "GetReservedNodeExchangeOfferings",
	}
}
