// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package redshift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
)

const opDescribeClusterSecurityGroups = "DescribeClusterSecurityGroups"

// DescribeClusterSecurityGroupsRequest returns a request value for making API operation for
// Amazon Redshift.
//
// Returns information about Amazon Redshift security groups. If the name of
// a security group is specified, the response will contain only information
// about only that security group.
//
// For information about managing security groups, go to Amazon Redshift Cluster
// Security Groups (https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)
// in the Amazon Redshift Cluster Management Guide.
//
// If you specify both tag keys and tag values in the same request, Amazon Redshift
// returns all security groups that match any combination of the specified keys
// and values. For example, if you have owner and environment for tag keys,
// and admin and test for tag values, all security groups that have any combination
// of those values are returned.
//
// If both tag keys and values are omitted from the request, security groups
// are returned regardless of whether they have tag keys or values associated
// with them.
//
//    // Example sending a request using DescribeClusterSecurityGroupsRequest.
//    req := client.DescribeClusterSecurityGroupsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/redshift-2012-12-01/DescribeClusterSecurityGroups
func (c *Client) DescribeClusterSecurityGroupsRequest(input *types.DescribeClusterSecurityGroupsInput) DescribeClusterSecurityGroupsRequest {
	op := &aws.Operation{
		Name:       opDescribeClusterSecurityGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxRecords",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeClusterSecurityGroupsInput{}
	}

	req := c.newRequest(op, input, &types.DescribeClusterSecurityGroupsOutput{})
	return DescribeClusterSecurityGroupsRequest{Request: req, Input: input, Copy: c.DescribeClusterSecurityGroupsRequest}
}

// DescribeClusterSecurityGroupsRequest is the request type for the
// DescribeClusterSecurityGroups API operation.
type DescribeClusterSecurityGroupsRequest struct {
	*aws.Request
	Input *types.DescribeClusterSecurityGroupsInput
	Copy  func(*types.DescribeClusterSecurityGroupsInput) DescribeClusterSecurityGroupsRequest
}

// Send marshals and sends the DescribeClusterSecurityGroups API request.
func (r DescribeClusterSecurityGroupsRequest) Send(ctx context.Context) (*DescribeClusterSecurityGroupsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeClusterSecurityGroupsResponse{
		DescribeClusterSecurityGroupsOutput: r.Request.Data.(*types.DescribeClusterSecurityGroupsOutput),
		response:                            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeClusterSecurityGroupsRequestPaginator returns a paginator for DescribeClusterSecurityGroups.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeClusterSecurityGroupsRequest(input)
//   p := redshift.NewDescribeClusterSecurityGroupsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeClusterSecurityGroupsPaginator(req DescribeClusterSecurityGroupsRequest) DescribeClusterSecurityGroupsPaginator {
	return DescribeClusterSecurityGroupsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeClusterSecurityGroupsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeClusterSecurityGroupsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeClusterSecurityGroupsPaginator struct {
	aws.Pager
}

func (p *DescribeClusterSecurityGroupsPaginator) CurrentPage() *types.DescribeClusterSecurityGroupsOutput {
	return p.Pager.CurrentPage().(*types.DescribeClusterSecurityGroupsOutput)
}

// DescribeClusterSecurityGroupsResponse is the response type for the
// DescribeClusterSecurityGroups API operation.
type DescribeClusterSecurityGroupsResponse struct {
	*types.DescribeClusterSecurityGroupsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeClusterSecurityGroups request.
func (r *DescribeClusterSecurityGroupsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
