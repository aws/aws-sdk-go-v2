// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package redshift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
)

const opDescribeClusterSnapshots = "DescribeClusterSnapshots"

// DescribeClusterSnapshotsRequest returns a request value for making API operation for
// Amazon Redshift.
//
// Returns one or more snapshot objects, which contain metadata about your cluster
// snapshots. By default, this operation returns information about all snapshots
// of all clusters that are owned by you AWS customer account. No information
// is returned for snapshots owned by inactive AWS customer accounts.
//
// If you specify both tag keys and tag values in the same request, Amazon Redshift
// returns all snapshots that match any combination of the specified keys and
// values. For example, if you have owner and environment for tag keys, and
// admin and test for tag values, all snapshots that have any combination of
// those values are returned. Only snapshots that you own are returned in the
// response; shared snapshots are not returned with the tag key and tag value
// request parameters.
//
// If both tag keys and values are omitted from the request, snapshots are returned
// regardless of whether they have tag keys or values associated with them.
//
//    // Example sending a request using DescribeClusterSnapshotsRequest.
//    req := client.DescribeClusterSnapshotsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/redshift-2012-12-01/DescribeClusterSnapshots
func (c *Client) DescribeClusterSnapshotsRequest(input *types.DescribeClusterSnapshotsInput) DescribeClusterSnapshotsRequest {
	op := &aws.Operation{
		Name:       opDescribeClusterSnapshots,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxRecords",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeClusterSnapshotsInput{}
	}

	req := c.newRequest(op, input, &types.DescribeClusterSnapshotsOutput{})
	return DescribeClusterSnapshotsRequest{Request: req, Input: input, Copy: c.DescribeClusterSnapshotsRequest}
}

// DescribeClusterSnapshotsRequest is the request type for the
// DescribeClusterSnapshots API operation.
type DescribeClusterSnapshotsRequest struct {
	*aws.Request
	Input *types.DescribeClusterSnapshotsInput
	Copy  func(*types.DescribeClusterSnapshotsInput) DescribeClusterSnapshotsRequest
}

// Send marshals and sends the DescribeClusterSnapshots API request.
func (r DescribeClusterSnapshotsRequest) Send(ctx context.Context) (*DescribeClusterSnapshotsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeClusterSnapshotsResponse{
		DescribeClusterSnapshotsOutput: r.Request.Data.(*types.DescribeClusterSnapshotsOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeClusterSnapshotsRequestPaginator returns a paginator for DescribeClusterSnapshots.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeClusterSnapshotsRequest(input)
//   p := redshift.NewDescribeClusterSnapshotsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeClusterSnapshotsPaginator(req DescribeClusterSnapshotsRequest) DescribeClusterSnapshotsPaginator {
	return DescribeClusterSnapshotsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeClusterSnapshotsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeClusterSnapshotsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeClusterSnapshotsPaginator struct {
	aws.Pager
}

func (p *DescribeClusterSnapshotsPaginator) CurrentPage() *types.DescribeClusterSnapshotsOutput {
	return p.Pager.CurrentPage().(*types.DescribeClusterSnapshotsOutput)
}

// DescribeClusterSnapshotsResponse is the response type for the
// DescribeClusterSnapshots API operation.
type DescribeClusterSnapshotsResponse struct {
	*types.DescribeClusterSnapshotsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeClusterSnapshots request.
func (r *DescribeClusterSnapshotsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
