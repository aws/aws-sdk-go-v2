// Code generated by smithy-go-codegen DO NOT EDIT.

package redshift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Modifies the number of days to retain snapshots in the destination AWS Region
// after they are copied from the source AWS Region. By default, this operation
// only changes the retention period of copied automated snapshots. The retention
// periods for both new and existing copied automated snapshots are updated with
// the new retention period. You can set the manual option to change only the
// retention periods of copied manual snapshots. If you set this option, only newly
// copied manual snapshots have the new retention period.
func (c *Client) ModifySnapshotCopyRetentionPeriod(ctx context.Context, params *ModifySnapshotCopyRetentionPeriodInput, optFns ...func(*Options)) (*ModifySnapshotCopyRetentionPeriodOutput, error) {
	stack := middleware.NewStack("ModifySnapshotCopyRetentionPeriod", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpModifySnapshotCopyRetentionPeriodMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpModifySnapshotCopyRetentionPeriodValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opModifySnapshotCopyRetentionPeriod(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ModifySnapshotCopyRetentionPeriod",
			Err:           err,
		}
	}
	out := result.(*ModifySnapshotCopyRetentionPeriodOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type ModifySnapshotCopyRetentionPeriodInput struct {
	// The unique identifier of the cluster for which you want to change the retention
	// period for either automated or manual snapshots that are copied to a destination
	// AWS Region. Constraints: Must be the valid name of an existing cluster that has
	// cross-region snapshot copy enabled.
	ClusterIdentifier *string
	// The number of days to retain automated snapshots in the destination AWS Region
	// after they are copied from the source AWS Region. By default, this only changes
	// the retention period of copied automated snapshots. If you decrease the
	// retention period for automated snapshots that are copied to a destination AWS
	// Region, Amazon Redshift deletes any existing automated snapshots that were
	// copied to the destination AWS Region and that fall outside of the new retention
	// period. Constraints: Must be at least 1 and no more than 35 for automated
	// snapshots. If you specify the manual option, only newly copied manual snapshots
	// will have the new retention period. If you specify the value of -1 newly copied
	// manual snapshots are retained indefinitely. Constraints: The number of days must
	// be either -1 or an integer between 1 and 3,653 for manual snapshots.
	RetentionPeriod *int32
	// Indicates whether to apply the snapshot retention period to newly copied manual
	// snapshots instead of automated snapshots.
	Manual *bool
}

type ModifySnapshotCopyRetentionPeriodOutput struct {
	// Describes a cluster.
	Cluster *types.Cluster

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpModifySnapshotCopyRetentionPeriodMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpModifySnapshotCopyRetentionPeriod{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpModifySnapshotCopyRetentionPeriod{}, middleware.After)
}

func newServiceMetadataMiddleware_opModifySnapshotCopyRetentionPeriod(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "redshift",
		OperationName: "ModifySnapshotCopyRetentionPeriod",
	}
}
