// Code generated by smithy-go-codegen DO NOT EDIT.

package redshift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates an HSM configuration that contains the information required by an Amazon
// Redshift cluster to store and use database encryption keys in a Hardware
// Security Module (HSM). After creating the HSM configuration, you can specify it
// as a parameter when creating a cluster. The cluster will then store its
// encryption keys in the HSM. In addition to creating an HSM configuration, you
// must also create an HSM client certificate. For more information, go to Hardware
// Security Modules
// (https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html) in the
// Amazon Redshift Cluster Management Guide.
func (c *Client) CreateHsmConfiguration(ctx context.Context, params *CreateHsmConfigurationInput, optFns ...func(*Options)) (*CreateHsmConfigurationOutput, error) {
	stack := middleware.NewStack("CreateHsmConfiguration", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateHsmConfigurationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateHsmConfigurationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateHsmConfiguration(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateHsmConfiguration",
			Err:           err,
		}
	}
	out := result.(*CreateHsmConfigurationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type CreateHsmConfigurationInput struct {
	// The IP address that the Amazon Redshift cluster must use to access the HSM.
	HsmIpAddress *string
	// The HSMs public certificate file. When using Cloud HSM, the file name is
	// server.pem.
	HsmServerPublicCertificate *string
	// A text description of the HSM configuration to be created.
	Description *string
	// The password required to access the HSM partition.
	HsmPartitionPassword *string
	// The name of the partition in the HSM where the Amazon Redshift clusters will
	// store their database encryption keys.
	HsmPartitionName *string
	// A list of tag instances.
	Tags []*types.Tag
	// The identifier to be assigned to the new Amazon Redshift HSM configuration.
	HsmConfigurationIdentifier *string
}

type CreateHsmConfigurationOutput struct {
	// Returns information about an HSM configuration, which is an object that
	// describes to Amazon Redshift clusters the information they require to connect to
	// an HSM where they can store database encryption keys.
	HsmConfiguration *types.HsmConfiguration

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateHsmConfigurationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateHsmConfiguration{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateHsmConfiguration{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateHsmConfiguration(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "redshift",
		OperationName: "CreateHsmConfiguration",
	}
}
