// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package redshift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
)

const opDescribeClusterParameterGroups = "DescribeClusterParameterGroups"

// DescribeClusterParameterGroupsRequest returns a request value for making API operation for
// Amazon Redshift.
//
// Returns a list of Amazon Redshift parameter groups, including parameter groups
// you created and the default parameter group. For each parameter group, the
// response includes the parameter group name, description, and parameter group
// family name. You can optionally specify a name to retrieve the description
// of a specific parameter group.
//
// For more information about parameters and parameter groups, go to Amazon
// Redshift Parameter Groups (https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)
// in the Amazon Redshift Cluster Management Guide.
//
// If you specify both tag keys and tag values in the same request, Amazon Redshift
// returns all parameter groups that match any combination of the specified
// keys and values. For example, if you have owner and environment for tag keys,
// and admin and test for tag values, all parameter groups that have any combination
// of those values are returned.
//
// If both tag keys and values are omitted from the request, parameter groups
// are returned regardless of whether they have tag keys or values associated
// with them.
//
//    // Example sending a request using DescribeClusterParameterGroupsRequest.
//    req := client.DescribeClusterParameterGroupsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/redshift-2012-12-01/DescribeClusterParameterGroups
func (c *Client) DescribeClusterParameterGroupsRequest(input *types.DescribeClusterParameterGroupsInput) DescribeClusterParameterGroupsRequest {
	op := &aws.Operation{
		Name:       opDescribeClusterParameterGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxRecords",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeClusterParameterGroupsInput{}
	}

	req := c.newRequest(op, input, &types.DescribeClusterParameterGroupsOutput{})
	return DescribeClusterParameterGroupsRequest{Request: req, Input: input, Copy: c.DescribeClusterParameterGroupsRequest}
}

// DescribeClusterParameterGroupsRequest is the request type for the
// DescribeClusterParameterGroups API operation.
type DescribeClusterParameterGroupsRequest struct {
	*aws.Request
	Input *types.DescribeClusterParameterGroupsInput
	Copy  func(*types.DescribeClusterParameterGroupsInput) DescribeClusterParameterGroupsRequest
}

// Send marshals and sends the DescribeClusterParameterGroups API request.
func (r DescribeClusterParameterGroupsRequest) Send(ctx context.Context) (*DescribeClusterParameterGroupsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeClusterParameterGroupsResponse{
		DescribeClusterParameterGroupsOutput: r.Request.Data.(*types.DescribeClusterParameterGroupsOutput),
		response:                             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeClusterParameterGroupsRequestPaginator returns a paginator for DescribeClusterParameterGroups.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeClusterParameterGroupsRequest(input)
//   p := redshift.NewDescribeClusterParameterGroupsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeClusterParameterGroupsPaginator(req DescribeClusterParameterGroupsRequest) DescribeClusterParameterGroupsPaginator {
	return DescribeClusterParameterGroupsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeClusterParameterGroupsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeClusterParameterGroupsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeClusterParameterGroupsPaginator struct {
	aws.Pager
}

func (p *DescribeClusterParameterGroupsPaginator) CurrentPage() *types.DescribeClusterParameterGroupsOutput {
	return p.Pager.CurrentPage().(*types.DescribeClusterParameterGroupsOutput)
}

// DescribeClusterParameterGroupsResponse is the response type for the
// DescribeClusterParameterGroups API operation.
type DescribeClusterParameterGroupsResponse struct {
	*types.DescribeClusterParameterGroupsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeClusterParameterGroups request.
func (r *DescribeClusterParameterGroupsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
