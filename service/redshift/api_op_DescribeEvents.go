// Code generated by smithy-go-codegen DO NOT EDIT.

package redshift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns events related to clusters, security groups, snapshots, and parameter
// groups for the past 14 days. Events specific to a particular cluster, security
// group, snapshot or parameter group can be obtained by providing the name as a
// parameter. By default, the past hour of events are returned.
func (c *Client) DescribeEvents(ctx context.Context, params *DescribeEventsInput, optFns ...func(*Options)) (*DescribeEventsOutput, error) {
	stack := middleware.NewStack("DescribeEvents", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpDescribeEventsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeEvents(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeEvents",
			Err:           err,
		}
	}
	out := result.(*DescribeEventsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type DescribeEventsInput struct {
	// The number of minutes prior to the time of the request for which to retrieve
	// events. For example, if the request is sent at 18:00 and you specify a duration
	// of 60, then only events which have occurred after 17:00 will be returned.
	// Default: 60
	Duration *int32
	// The maximum number of response records to return in each call. If the number of
	// remaining response records exceeds the specified MaxRecords value, a value is
	// returned in a marker field of the response. You can retrieve the next set of
	// records by retrying the command with the returned marker value. Default: 100
	// Constraints: minimum 20, maximum 100.
	MaxRecords *int32
	// The identifier of the event source for which events will be returned. If this
	// parameter is not specified, then all sources are included in the response.
	// Constraints: If SourceIdentifier is supplied, SourceType must also be
	// provided.
	//
	//     * Specify a cluster identifier when SourceType is cluster.
	//
	//     *
	// Specify a cluster security group name when SourceType is
	// cluster-security-group.
	//
	//     * Specify a cluster parameter group name when
	// SourceType is cluster-parameter-group.
	//
	//     * Specify a cluster snapshot
	// identifier when SourceType is cluster-snapshot.
	SourceIdentifier *string
	// The end of the time interval for which to retrieve events, specified in ISO 8601
	// format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.
	// (http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
	EndTime *time.Time
	// An optional parameter that specifies the starting point to return a set of
	// response records. When the results of a DescribeEvents () request exceed the
	// value specified in MaxRecords, AWS returns a value in the Marker field of the
	// response. You can retrieve the next set of response records by providing the
	// returned marker value in the Marker parameter and retrying the request.
	Marker *string
	// The beginning of the time interval to retrieve events for, specified in ISO 8601
	// format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.
	// (http://en.wikipedia.org/wiki/ISO_8601) Example: 2009-07-08T18:00Z
	StartTime *time.Time
	// The event source to retrieve events for. If no value is specified, all events
	// are returned. Constraints: If SourceType is supplied, SourceIdentifier must also
	// be provided.
	//
	//     * Specify cluster when SourceIdentifier is a cluster
	// identifier.
	//
	//     * Specify cluster-security-group when SourceIdentifier is a
	// cluster security group name.
	//
	//     * Specify cluster-parameter-group when
	// SourceIdentifier is a cluster parameter group name.
	//
	//     * Specify
	// cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.
	SourceType types.SourceType
}

//
type DescribeEventsOutput struct {
	// A list of Event instances.
	Events []*types.Event
	// A value that indicates the starting point for the next set of response records
	// in a subsequent request. If a value is returned in a response, you can retrieve
	// the next set of records by providing this returned marker value in the Marker
	// parameter and retrying the command. If the Marker field is empty, all response
	// records have been retrieved for the request.
	Marker *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpDescribeEventsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpDescribeEvents{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpDescribeEvents{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeEvents(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "redshift",
		OperationName: "DescribeEvents",
	}
}
