// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package redshift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift/types"
)

const opDescribeHsmClientCertificates = "DescribeHsmClientCertificates"

// DescribeHsmClientCertificatesRequest returns a request value for making API operation for
// Amazon Redshift.
//
// Returns information about the specified HSM client certificate. If no certificate
// ID is specified, returns information about all the HSM certificates owned
// by your AWS customer account.
//
// If you specify both tag keys and tag values in the same request, Amazon Redshift
// returns all HSM client certificates that match any combination of the specified
// keys and values. For example, if you have owner and environment for tag keys,
// and admin and test for tag values, all HSM client certificates that have
// any combination of those values are returned.
//
// If both tag keys and values are omitted from the request, HSM client certificates
// are returned regardless of whether they have tag keys or values associated
// with them.
//
//    // Example sending a request using DescribeHsmClientCertificatesRequest.
//    req := client.DescribeHsmClientCertificatesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/redshift-2012-12-01/DescribeHsmClientCertificates
func (c *Client) DescribeHsmClientCertificatesRequest(input *types.DescribeHsmClientCertificatesInput) DescribeHsmClientCertificatesRequest {
	op := &aws.Operation{
		Name:       opDescribeHsmClientCertificates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"Marker"},
			LimitToken:      "MaxRecords",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeHsmClientCertificatesInput{}
	}

	req := c.newRequest(op, input, &types.DescribeHsmClientCertificatesOutput{})
	return DescribeHsmClientCertificatesRequest{Request: req, Input: input, Copy: c.DescribeHsmClientCertificatesRequest}
}

// DescribeHsmClientCertificatesRequest is the request type for the
// DescribeHsmClientCertificates API operation.
type DescribeHsmClientCertificatesRequest struct {
	*aws.Request
	Input *types.DescribeHsmClientCertificatesInput
	Copy  func(*types.DescribeHsmClientCertificatesInput) DescribeHsmClientCertificatesRequest
}

// Send marshals and sends the DescribeHsmClientCertificates API request.
func (r DescribeHsmClientCertificatesRequest) Send(ctx context.Context) (*DescribeHsmClientCertificatesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeHsmClientCertificatesResponse{
		DescribeHsmClientCertificatesOutput: r.Request.Data.(*types.DescribeHsmClientCertificatesOutput),
		response:                            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeHsmClientCertificatesRequestPaginator returns a paginator for DescribeHsmClientCertificates.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeHsmClientCertificatesRequest(input)
//   p := redshift.NewDescribeHsmClientCertificatesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeHsmClientCertificatesPaginator(req DescribeHsmClientCertificatesRequest) DescribeHsmClientCertificatesPaginator {
	return DescribeHsmClientCertificatesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeHsmClientCertificatesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeHsmClientCertificatesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeHsmClientCertificatesPaginator struct {
	aws.Pager
}

func (p *DescribeHsmClientCertificatesPaginator) CurrentPage() *types.DescribeHsmClientCertificatesOutput {
	return p.Pager.CurrentPage().(*types.DescribeHsmClientCertificatesOutput)
}

// DescribeHsmClientCertificatesResponse is the response type for the
// DescribeHsmClientCertificates API operation.
type DescribeHsmClientCertificatesResponse struct {
	*types.DescribeHsmClientCertificatesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeHsmClientCertificates request.
func (r *DescribeHsmClientCertificatesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
