// Code generated by smithy-go-codegen DO NOT EDIT.

package connect

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates or updates the contact attributes associated with the specified contact.
// You can add or update attributes for both ongoing and completed contacts. For
// example, you can update the customer's name or the reason the customer called
// while the call is active, or add notes about steps that the agent took during
// the call that are displayed to the next agent that takes the call. You can also
// update attributes for a contact using data from your CRM application and save
// the data with the contact in Amazon Connect. You could also flag calls for
// additional analysis, such as legal review or identifying abusive callers.
// Contact attributes are available in Amazon Connect for 24 months, and are then
// deleted.  <p> <b>Important:</b> You cannot use the operation to update
// attributes for contacts that occurred prior to the release of the API, September
// 12, 2018. You can update attributes only for contacts that started after the
// release of the API. If you attempt to update attributes for a contact that
// occurred prior to the release of the API, a 400 error is returned. This applies
// also to queued callbacks that were initiated prior to the release of the API but
// are still active in your instance.
func (c *Client) UpdateContactAttributes(ctx context.Context, params *UpdateContactAttributesInput, optFns ...func(*Options)) (*UpdateContactAttributesOutput, error) {
	stack := middleware.NewStack("UpdateContactAttributes", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpUpdateContactAttributesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateContactAttributesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateContactAttributes(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateContactAttributes",
			Err:           err,
		}
	}
	out := result.(*UpdateContactAttributesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateContactAttributesInput struct {
	// The Amazon Connect attributes. These attributes can be accessed in contact flows
	// just like any other contact attributes. You can have up to 32,768 UTF-8 bytes
	// across all attributes for a contact. Attribute keys can include only
	// alphanumeric, dash, and underscore characters.
	Attributes map[string]*string
	// The identifier of the Amazon Connect instance.
	InstanceId *string
	// The identifier of the contact. This is the identifier of the contact associated
	// with the first interaction with the contact center.
	InitialContactId *string
}

type UpdateContactAttributesOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpUpdateContactAttributesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpUpdateContactAttributes{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpUpdateContactAttributes{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateContactAttributes(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "connect",
		OperationName: "UpdateContactAttributes",
	}
}
