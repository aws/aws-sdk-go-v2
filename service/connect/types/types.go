// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	smithydocument "github.com/aws/smithy-go/document"
	"time"
)

// Information about an action.
type ActionSummary struct {

	// The action type.
	//
	// This member is required.
	ActionType ActionType

	noSmithyDocumentSerde
}

// The distribution of agents between the instance and its replica(s).
type AgentConfig struct {

	// Information about traffic distributions.
	//
	// This member is required.
	Distributions []Distribution

	noSmithyDocumentSerde
}

// Information about the contact (https://docs.aws.amazon.com/connect/latest/APIReference/API_Contact.html)
// associated to the user.
type AgentContactReference struct {

	// The state of the contact (https://docs.aws.amazon.com/connect/latest/adminguide/about-contact-states.html)
	// .
	AgentContactState ContactState

	// The channel of the contact.
	Channel Channel

	// The time at which the contact was connected to an agent.
	ConnectedToAgentTimestamp *time.Time

	// The identifier of the contact in this instance of Amazon Connect.
	ContactId *string

	// How the contact was initiated.
	InitiationMethod ContactInitiationMethod

	// Contains information about a queue resource for which metrics are returned.
	Queue *QueueReference

	// The epoch timestamp when the contact state started.
	StateStartTimestamp *time.Time

	noSmithyDocumentSerde
}

// Information about the agent who accepted the contact.
type AgentInfo struct {

	// The timestamp when the contact was connected to the agent.
	ConnectedToAgentTimestamp *time.Time

	// The identifier of the agent who accepted the contact.
	Id *string

	noSmithyDocumentSerde
}

// Contains information about an agent status.
type AgentStatus struct {

	// The Amazon Resource Name (ARN) of the agent status.
	AgentStatusARN *string

	// The identifier of the agent status.
	AgentStatusId *string

	// The description of the agent status.
	Description *string

	// The display order of the agent status.
	DisplayOrder *int32

	// The name of the agent status.
	Name *string

	// The state of the agent status.
	State AgentStatusState

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	// The type of agent status.
	Type AgentStatusType

	noSmithyDocumentSerde
}

// Information about the agent's status.
type AgentStatusReference struct {

	// The Amazon Resource Name (ARN) of the agent's status.
	StatusArn *string

	// The name of the agent status.
	StatusName *string

	// The start timestamp of the agent's status.
	StatusStartTimestamp *time.Time

	noSmithyDocumentSerde
}

// Summary information for an agent status.
type AgentStatusSummary struct {

	// The Amazon Resource Name (ARN) for the agent status.
	Arn *string

	// The identifier for an agent status.
	Id *string

	// The name of the agent status.
	Name *string

	// The type of the agent status.
	Type AgentStatusType

	noSmithyDocumentSerde
}

// Configuration of the answering machine detection.
type AnswerMachineDetectionConfig struct {

	// Wait for the answering machine prompt.
	AwaitAnswerMachinePrompt bool

	// The flag to indicate if answer machine detection analysis needs to be performed
	// for a voice call. If set to true , TrafficType must be set as CAMPAIGN .
	EnableAnswerMachineDetection bool

	noSmithyDocumentSerde
}

// This action must be set if TriggerEventSource is one of the following values:
// OnPostCallAnalysisAvailable | OnRealTimeCallAnalysisAvailable |
// OnPostChatAnalysisAvailable . Contact is categorized using the rule name.
// RuleName is used as ContactCategory .
type AssignContactCategoryActionDefinition struct {
	noSmithyDocumentSerde
}

// Information about a reference when the referenceType is ATTACHMENT . Otherwise,
// null.
type AttachmentReference struct {

	// Identifier of the attachment reference.
	Name *string

	// Status of the attachment reference type.
	Status ReferenceStatus

	// The location path of the attachment reference.
	Value *string

	noSmithyDocumentSerde
}

// A toggle for an individual feature at the instance level.
type Attribute struct {

	// The type of attribute.
	AttributeType InstanceAttributeType

	// The value of the attribute.
	Value *string

	noSmithyDocumentSerde
}

// Information about available phone numbers.
type AvailableNumberSummary struct {

	// The phone number. Phone numbers are formatted [+] [country code] [subscriber
	// number including area code] .
	PhoneNumber *string

	// The ISO country code.
	PhoneNumberCountryCode PhoneNumberCountryCode

	// The type of phone number.
	PhoneNumberType PhoneNumberType

	noSmithyDocumentSerde
}

// A chat message.
type ChatMessage struct {

	// The content of the chat message.
	//   - For text/plain and text/markdown , the Length Constraints are Minimum of 1,
	//   Maximum of 1024.
	//   - For application/json , the Length Constraints are Minimum of 1, Maximum of
	//   12000.
	//   - For application/vnd.amazonaws.connect.message.interactive.response , the
	//   Length Constraints are Minimum of 1, Maximum of 12288.
	//
	// This member is required.
	Content *string

	// The type of the content. Supported types are text/plain , text/markdown ,
	// application/json , and
	// application/vnd.amazonaws.connect.message.interactive.response .
	//
	// This member is required.
	ContentType *string

	noSmithyDocumentSerde
}

// Configuration information for the chat participant role.
type ChatParticipantRoleConfig struct {

	// A list of participant timers. You can specify any unique combination of role
	// and timer type. Duplicate entries error out the request with a 400.
	//
	// This member is required.
	ParticipantTimerConfigList []ParticipantTimerConfiguration

	noSmithyDocumentSerde
}

// The streaming configuration, such as the Amazon SNS streaming endpoint.
type ChatStreamingConfiguration struct {

	// The Amazon Resource Name (ARN) of the standard Amazon SNS topic. The Amazon
	// Resource Name (ARN) of the streaming endpoint that is used to publish real-time
	// message streaming for chat conversations.
	//
	// This member is required.
	StreamingEndpointArn *string

	noSmithyDocumentSerde
}

// Information about a phone number that has been claimed to your Amazon Connect
// instance or traffic distribution group.
type ClaimedPhoneNumberSummary struct {

	// The phone number. Phone numbers are formatted [+] [country code] [subscriber
	// number including area code] .
	PhoneNumber *string

	// The Amazon Resource Name (ARN) of the phone number.
	PhoneNumberArn *string

	// The ISO country code.
	PhoneNumberCountryCode PhoneNumberCountryCode

	// The description of the phone number.
	PhoneNumberDescription *string

	// A unique identifier for the phone number.
	PhoneNumberId *string

	// The status of the phone number.
	//   - CLAIMED means the previous ClaimedPhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html)
	//   or UpdatePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html)
	//   operation succeeded.
	//   - IN_PROGRESS means a ClaimedPhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html)
	//   or UpdatePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html)
	//   operation is still in progress and has not yet completed. You can call
	//   DescribePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_DescribePhoneNumber.html)
	//   at a later time to verify if the previous operation has completed.
	//   - FAILED indicates that the previous ClaimedPhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html)
	//   or UpdatePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html)
	//   operation has failed. It will include a message indicating the failure reason. A
	//   common reason for a failure may be that the TargetArn value you are claiming
	//   or updating a phone number to has reached its limit of total claimed numbers. If
	//   you received a FAILED status from a ClaimPhoneNumber API call, you have one
	//   day to retry claiming the phone number before the number is released back to the
	//   inventory for other customers to claim.
	// You will not be billed for the phone number during the 1-day period if number
	// claiming fails.
	PhoneNumberStatus *PhoneNumberStatus

	// The type of phone number.
	PhoneNumberType PhoneNumberType

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	// The Amazon Resource Name (ARN) for Amazon Connect instances or traffic
	// distribution groups that phone numbers are claimed to.
	TargetArn *string

	noSmithyDocumentSerde
}

// Contains information about a contact.
type Contact struct {

	// Information about the agent who accepted the contact.
	AgentInfo *AgentInfo

	// The Amazon Resource Name (ARN) for the contact.
	Arn *string

	// How the contact reached your contact center.
	Channel Channel

	// The description of the contact.
	Description *string

	// The timestamp when the customer endpoint disconnected from Amazon Connect.
	DisconnectTimestamp *time.Time

	// The identifier for the contact.
	Id *string

	// If this contact is related to other contacts, this is the ID of the initial
	// contact.
	InitialContactId *string

	// Indicates how the contact was initiated.
	InitiationMethod ContactInitiationMethod

	// The date and time this contact was initiated, in UTC time. For INBOUND , this is
	// when the contact arrived. For OUTBOUND , this is when the agent began dialing.
	// For CALLBACK , this is when the callback contact was created. For TRANSFER and
	// QUEUE_TRANSFER , this is when the transfer was initiated. For API , this is when
	// the request arrived. For EXTERNAL_OUTBOUND , this is when the agent started
	// dialing the external participant. For MONITOR , this is when the supervisor
	// started listening to a contact.
	InitiationTimestamp *time.Time

	// The timestamp when contact was last updated.
	LastUpdateTimestamp *time.Time

	// The name of the contact.
	Name *string

	// If this contact is not the first contact, this is the ID of the previous
	// contact.
	PreviousContactId *string

	// If this contact was queued, this contains information about the queue.
	QueueInfo *QueueInfo

	// The contactId that is related (https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html#relatedcontactid)
	// to this contact.
	RelatedContactId *string

	// The timestamp, in Unix epoch time format, at which to start running the inbound
	// flow.
	ScheduledTimestamp *time.Time

	// Information about Amazon Connect Wisdom.
	WisdomInfo *WisdomInfo

	noSmithyDocumentSerde
}

// Filters user data based on the contact information that is associated to the
// users. It contains a list of contact states (https://docs.aws.amazon.com/connect/latest/adminguide/about-contact-states.html)
// .
type ContactFilter struct {

	// A list of up to 9 contact states (https://docs.aws.amazon.com/connect/latest/adminguide/about-contact-states.html)
	// .
	ContactStates []ContactState

	noSmithyDocumentSerde
}

// Contains information about a flow.
type ContactFlow struct {

	// The Amazon Resource Name (ARN) of the flow.
	Arn *string

	// The content of the flow.
	Content *string

	// The description of the flow.
	Description *string

	// The identifier of the flow.
	Id *string

	// The name of the flow.
	Name *string

	// The type of flow.
	State ContactFlowState

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	// The type of the flow. For descriptions of the available types, see Choose a
	// flow type (https://docs.aws.amazon.com/connect/latest/adminguide/create-contact-flow.html#contact-flow-types)
	// in the Amazon Connect Administrator Guide.
	Type ContactFlowType

	noSmithyDocumentSerde
}

// Contains information about a flow module.
type ContactFlowModule struct {

	// The Amazon Resource Name (ARN).
	Arn *string

	// The content of the flow module.
	Content *string

	// The description of the flow module.
	Description *string

	// The identifier of the flow module.
	Id *string

	// The name of the flow module.
	Name *string

	// The type of flow module.
	State ContactFlowModuleState

	// The status of the flow module.
	Status ContactFlowModuleStatus

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Contains summary information about a flow.
type ContactFlowModuleSummary struct {

	// The Amazon Resource Name (ARN) of the flow module.
	Arn *string

	// The identifier of the flow module.
	Id *string

	// The name of the flow module.
	Name *string

	// The type of flow module.
	State ContactFlowModuleState

	noSmithyDocumentSerde
}

// Contains summary information about a flow. You can also create and update flows
// using the Amazon Connect Flow language (https://docs.aws.amazon.com/connect/latest/APIReference/flow-language.html)
// .
type ContactFlowSummary struct {

	// The Amazon Resource Name (ARN) of the flow.
	Arn *string

	// The type of flow.
	ContactFlowState ContactFlowState

	// The type of flow.
	ContactFlowType ContactFlowType

	// The identifier of the flow.
	Id *string

	// The name of the flow.
	Name *string

	noSmithyDocumentSerde
}

// An object that can be used to specify Tag conditions inside the SearchFilter .
// This accepts an OR of AND (List of List) input where:
//   - Top level list specifies conditions that need to be applied with OR operator
//   - Inner list specifies conditions that need to be applied with AND operator.
type ControlPlaneTagFilter struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []TagCondition

	// A list of conditions which would be applied together with an OR condition.
	OrConditions [][]TagCondition

	// A leaf node condition which can be used to specify a tag condition.
	TagCondition *TagCondition

	noSmithyDocumentSerde
}

// Contains credentials to use for federation.
type Credentials struct {

	// An access token generated for a federated user to access Amazon Connect.
	AccessToken *string

	// A token generated with an expiration time for the session a user is logged in
	// to Amazon Connect.
	AccessTokenExpiration *time.Time

	// Renews a token generated for a user to access the Amazon Connect instance.
	RefreshToken *string

	// Renews the expiration timer for a generated token.
	RefreshTokenExpiration *time.Time

	noSmithyDocumentSerde
}

// Defines the cross-channel routing behavior that allows an agent working on a
// contact in one channel to be offered a contact from a different channel.
type CrossChannelBehavior struct {

	// Specifies the other channels that can be routed to an agent handling their
	// current channel.
	//
	// This member is required.
	BehaviorType BehaviorType

	noSmithyDocumentSerde
}

// Contains information about a real-time metric. For a description of each
// metric, see Real-time Metrics Definitions (https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html)
// in the Amazon Connect Administrator Guide.
type CurrentMetric struct {

	// The name of the metric.
	Name CurrentMetricName

	// The unit for the metric.
	Unit Unit

	noSmithyDocumentSerde
}

// Contains the data for a real-time metric.
type CurrentMetricData struct {

	// Information about the metric.
	Metric *CurrentMetric

	// The value of the metric.
	Value *float64

	noSmithyDocumentSerde
}

// Contains information about a set of real-time metrics.
type CurrentMetricResult struct {

	// The set of metrics.
	Collections []CurrentMetricData

	// The dimensions for the metrics.
	Dimensions *Dimensions

	noSmithyDocumentSerde
}

// The way to sort the resulting response based on metrics. By default resources
// are sorted based on AGENTS_ONLINE , DESCENDING . The metric collection is sorted
// based on the input metrics.
type CurrentMetricSortCriteria struct {

	// The current metric names.
	SortByMetric CurrentMetricName

	// The way to sort.
	SortOrder SortOrder

	noSmithyDocumentSerde
}

// Information about a reference when the referenceType is DATE . Otherwise, null.
type DateReference struct {

	// Identifier of the date reference.
	Name *string

	// A valid date.
	Value *string

	noSmithyDocumentSerde
}

// Contains information about a default vocabulary.
type DefaultVocabulary struct {

	// The identifier of the Amazon Connect instance. You can find the instance ID (https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html)
	// in the Amazon Resource Name (ARN) of the instance.
	//
	// This member is required.
	InstanceId *string

	// The language code of the vocabulary entries. For a list of languages and their
	// corresponding language codes, see What is Amazon Transcribe? (https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html)
	//
	// This member is required.
	LanguageCode VocabularyLanguageCode

	// The identifier of the custom vocabulary.
	//
	// This member is required.
	VocabularyId *string

	// A unique name of the custom vocabulary.
	//
	// This member is required.
	VocabularyName *string

	noSmithyDocumentSerde
}

// Contains information about the dimensions for a set of metrics.
type Dimensions struct {

	// The channel used for grouping and filters.
	Channel Channel

	// Information about the queue for which metrics are returned.
	Queue *QueueReference

	// Information about the routing profile assigned to the user.
	RoutingProfile *RoutingProfileReference

	noSmithyDocumentSerde
}

// Information about a traffic distribution.
type Distribution struct {

	// The percentage of the traffic that is distributed, in increments of 10.
	//
	// This member is required.
	Percentage int32

	// The Amazon Web Services Region where the traffic is distributed.
	//
	// This member is required.
	Region *string

	noSmithyDocumentSerde
}

// Information about a reference when the referenceType is EMAIL . Otherwise, null.
type EmailReference struct {

	// Identifier of the email reference.
	Name *string

	// A valid email address.
	Value *string

	noSmithyDocumentSerde
}

// The encryption configuration.
type EncryptionConfig struct {

	// The type of encryption.
	//
	// This member is required.
	EncryptionType EncryptionType

	// The full ARN of the encryption key. Be sure to provide the full ARN of the
	// encryption key, not just the ID. Amazon Connect supports only KMS keys with the
	// default key spec of SYMMETRIC_DEFAULT (https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-symmetric-default)
	// .
	//
	// This member is required.
	KeyId *string

	noSmithyDocumentSerde
}

// Information about a contact evaluation.
type Evaluation struct {

	// A map of question identifiers to answer value.
	//
	// This member is required.
	Answers map[string]EvaluationAnswerOutput

	// The timestamp for when the evaluation was created.
	//
	// This member is required.
	CreatedTime *time.Time

	// The Amazon Resource Name (ARN) for the contact evaluation resource.
	//
	// This member is required.
	EvaluationArn *string

	// A unique identifier for the contact evaluation.
	//
	// This member is required.
	EvaluationId *string

	// The timestamp for when the evaluation was last updated.
	//
	// This member is required.
	LastModifiedTime *time.Time

	// Metadata about the contact evaluation.
	//
	// This member is required.
	Metadata *EvaluationMetadata

	// A map of question identifiers to note value.
	//
	// This member is required.
	Notes map[string]EvaluationNote

	// The status of the contact evaluation.
	//
	// This member is required.
	Status EvaluationStatus

	// A map of item (section or question) identifiers to score value.
	Scores map[string]EvaluationScore

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Information about answer data for a contact evaluation. Answer data must be
// either string, numeric, or not applicable.
//
// The following types satisfy this interface:
//
//	EvaluationAnswerDataMemberNotApplicable
//	EvaluationAnswerDataMemberNumericValue
//	EvaluationAnswerDataMemberStringValue
type EvaluationAnswerData interface {
	isEvaluationAnswerData()
}

// The flag to mark the question as not applicable.
type EvaluationAnswerDataMemberNotApplicable struct {
	Value bool

	noSmithyDocumentSerde
}

func (*EvaluationAnswerDataMemberNotApplicable) isEvaluationAnswerData() {}

// The numeric value for an answer in a contact evaluation.
type EvaluationAnswerDataMemberNumericValue struct {
	Value float64

	noSmithyDocumentSerde
}

func (*EvaluationAnswerDataMemberNumericValue) isEvaluationAnswerData() {}

// The string value for an answer in a contact evaluation.
type EvaluationAnswerDataMemberStringValue struct {
	Value string

	noSmithyDocumentSerde
}

func (*EvaluationAnswerDataMemberStringValue) isEvaluationAnswerData() {}

// Information about input answers for a contact evaluation.
type EvaluationAnswerInput struct {

	// The value for an answer in a contact evaluation.
	Value EvaluationAnswerData

	noSmithyDocumentSerde
}

// Information about output answers for a contact evaluation.
type EvaluationAnswerOutput struct {

	// The system suggested value for an answer in a contact evaluation.
	SystemSuggestedValue EvaluationAnswerData

	// The value for an answer in a contact evaluation.
	Value EvaluationAnswerData

	noSmithyDocumentSerde
}

// Information about the evaluation form.
type EvaluationForm struct {

	// The Amazon Resource Name (ARN) of the user who created the evaluation form.
	//
	// This member is required.
	CreatedBy *string

	// The timestamp for when the evaluation form was created.
	//
	// This member is required.
	CreatedTime *time.Time

	// The Amazon Resource Name (ARN) for the evaluation form resource.
	//
	// This member is required.
	EvaluationFormArn *string

	// The unique identifier for the evaluation form.
	//
	// This member is required.
	EvaluationFormId *string

	// A version of the evaluation form.
	//
	// This member is required.
	EvaluationFormVersion *int32

	// Items that are part of the evaluation form. The total number of sections and
	// questions must not exceed 100 each. Questions must be contained in a section.
	//
	// This member is required.
	Items []EvaluationFormItem

	// The Amazon Resource Name (ARN) of the user who last updated the evaluation form.
	//
	// This member is required.
	LastModifiedBy *string

	// The timestamp for when the evaluation form was last updated.
	//
	// This member is required.
	LastModifiedTime *time.Time

	// The flag indicating whether the evaluation form is locked for changes.
	//
	// This member is required.
	Locked bool

	// The status of the evaluation form.
	//
	// This member is required.
	Status EvaluationFormVersionStatus

	// A title of the evaluation form.
	//
	// This member is required.
	Title *string

	// The description of the evaluation form.
	Description *string

	// A scoring strategy of the evaluation form.
	ScoringStrategy *EvaluationFormScoringStrategy

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Information about an evaluation form used in a contact evaluation.
type EvaluationFormContent struct {

	// The Amazon Resource Name (ARN) for the evaluation form resource.
	//
	// This member is required.
	EvaluationFormArn *string

	// The unique identifier for the evaluation form.
	//
	// This member is required.
	EvaluationFormId *string

	// A version of the evaluation form.
	//
	// This member is required.
	EvaluationFormVersion *int32

	// Items that are part of the evaluation form. The total number of sections and
	// questions must not exceed 100 each. Questions must be contained in a section.
	//
	// This member is required.
	Items []EvaluationFormItem

	// A title of the evaluation form.
	//
	// This member is required.
	Title *string

	// The description of the evaluation form.
	Description *string

	// A scoring strategy of the evaluation form.
	ScoringStrategy *EvaluationFormScoringStrategy

	noSmithyDocumentSerde
}

// Information about an item from an evaluation form. The item must be either a
// section or a question.
//
// The following types satisfy this interface:
//
//	EvaluationFormItemMemberQuestion
//	EvaluationFormItemMemberSection
type EvaluationFormItem interface {
	isEvaluationFormItem()
}

// The information of the question.
type EvaluationFormItemMemberQuestion struct {
	Value EvaluationFormQuestion

	noSmithyDocumentSerde
}

func (*EvaluationFormItemMemberQuestion) isEvaluationFormItem() {}

// The information of the section.
type EvaluationFormItemMemberSection struct {
	Value EvaluationFormSection

	noSmithyDocumentSerde
}

func (*EvaluationFormItemMemberSection) isEvaluationFormItem() {}

// Information about the automation configuration in numeric questions.
//
// The following types satisfy this interface:
//
//	EvaluationFormNumericQuestionAutomationMemberPropertyValue
type EvaluationFormNumericQuestionAutomation interface {
	isEvaluationFormNumericQuestionAutomation()
}

// The property value of the automation.
type EvaluationFormNumericQuestionAutomationMemberPropertyValue struct {
	Value NumericQuestionPropertyValueAutomation

	noSmithyDocumentSerde
}

func (*EvaluationFormNumericQuestionAutomationMemberPropertyValue) isEvaluationFormNumericQuestionAutomation() {
}

// Information about the option range used for scoring in numeric questions.
type EvaluationFormNumericQuestionOption struct {

	// The maximum answer value of the range option.
	//
	// This member is required.
	MaxValue int32

	// The minimum answer value of the range option.
	//
	// This member is required.
	MinValue int32

	// The flag to mark the option as automatic fail. If an automatic fail answer is
	// provided, the overall evaluation gets a score of 0.
	AutomaticFail bool

	// The score assigned to answer values within the range option.
	Score int32

	noSmithyDocumentSerde
}

// Information about properties for a numeric question in an evaluation form.
type EvaluationFormNumericQuestionProperties struct {

	// The maximum answer value.
	//
	// This member is required.
	MaxValue int32

	// The minimum answer value.
	//
	// This member is required.
	MinValue int32

	// The automation properties of the numeric question.
	Automation EvaluationFormNumericQuestionAutomation

	// The scoring options of the numeric question.
	Options []EvaluationFormNumericQuestionOption

	noSmithyDocumentSerde
}

// Information about a question from an evaluation form.
type EvaluationFormQuestion struct {

	// The type of the question.
	//
	// This member is required.
	QuestionType EvaluationFormQuestionType

	// The identifier of the question. An identifier must be unique within the
	// evaluation form.
	//
	// This member is required.
	RefId *string

	// The title of the question.
	//
	// This member is required.
	Title *string

	// The instructions of the section.
	Instructions *string

	// The flag to enable not applicable answers to the question.
	NotApplicableEnabled bool

	// The properties of the type of question. Text questions do not have to define
	// question type properties.
	QuestionTypeProperties EvaluationFormQuestionTypeProperties

	// The scoring weight of the section.
	Weight float64

	noSmithyDocumentSerde
}

// Information about properties for a question in an evaluation form. The question
// type properties must be either for a numeric question or a single select
// question.
//
// The following types satisfy this interface:
//
//	EvaluationFormQuestionTypePropertiesMemberNumeric
//	EvaluationFormQuestionTypePropertiesMemberSingleSelect
type EvaluationFormQuestionTypeProperties interface {
	isEvaluationFormQuestionTypeProperties()
}

// The properties of the numeric question.
type EvaluationFormQuestionTypePropertiesMemberNumeric struct {
	Value EvaluationFormNumericQuestionProperties

	noSmithyDocumentSerde
}

func (*EvaluationFormQuestionTypePropertiesMemberNumeric) isEvaluationFormQuestionTypeProperties() {}

// The properties of the numeric question.
type EvaluationFormQuestionTypePropertiesMemberSingleSelect struct {
	Value EvaluationFormSingleSelectQuestionProperties

	noSmithyDocumentSerde
}

func (*EvaluationFormQuestionTypePropertiesMemberSingleSelect) isEvaluationFormQuestionTypeProperties() {
}

// Information about scoring strategy for an evaluation form.
type EvaluationFormScoringStrategy struct {

	// The scoring mode of the evaluation form.
	//
	// This member is required.
	Mode EvaluationFormScoringMode

	// The scoring status of the evaluation form.
	//
	// This member is required.
	Status EvaluationFormScoringStatus

	noSmithyDocumentSerde
}

// Information about a section from an evaluation form. A section can contain
// sections and/or questions. Evaluation forms can only contain sections and
// subsections (two level nesting).
type EvaluationFormSection struct {

	// The items of the section.
	//
	// This member is required.
	Items []EvaluationFormItem

	// The identifier of the section. An identifier must be unique within the
	// evaluation form.
	//
	// This member is required.
	RefId *string

	// The title of the section.
	//
	// This member is required.
	Title *string

	// The instructions of the section.
	Instructions *string

	// The scoring weight of the section.
	Weight float64

	noSmithyDocumentSerde
}

// Information about the automation configuration in single select questions.
// Automation options are evaluated in order, and the first matched option is
// applied. If no automation option matches, and there is a default option, then
// the default option is applied.
type EvaluationFormSingleSelectQuestionAutomation struct {

	// The automation options of the single select question.
	//
	// This member is required.
	Options []EvaluationFormSingleSelectQuestionAutomationOption

	// The identifier of the default answer option, when none of the automation
	// options match the criteria.
	DefaultOptionRefId *string

	noSmithyDocumentSerde
}

// Information about the automation option of a single select question.
//
// The following types satisfy this interface:
//
//	EvaluationFormSingleSelectQuestionAutomationOptionMemberRuleCategory
type EvaluationFormSingleSelectQuestionAutomationOption interface {
	isEvaluationFormSingleSelectQuestionAutomationOption()
}

// The automation option based on a rule category for the single select question.
type EvaluationFormSingleSelectQuestionAutomationOptionMemberRuleCategory struct {
	Value SingleSelectQuestionRuleCategoryAutomation

	noSmithyDocumentSerde
}

func (*EvaluationFormSingleSelectQuestionAutomationOptionMemberRuleCategory) isEvaluationFormSingleSelectQuestionAutomationOption() {
}

// Information about the automation configuration in single select questions.
type EvaluationFormSingleSelectQuestionOption struct {

	// The identifier of the answer option. An identifier must be unique within the
	// question.
	//
	// This member is required.
	RefId *string

	// The title of the answer option.
	//
	// This member is required.
	Text *string

	// The flag to mark the option as automatic fail. If an automatic fail answer is
	// provided, the overall evaluation gets a score of 0.
	AutomaticFail bool

	// The score assigned to the answer option.
	Score int32

	noSmithyDocumentSerde
}

// Information about the options in single select questions.
type EvaluationFormSingleSelectQuestionProperties struct {

	// The answer options of the single select question.
	//
	// This member is required.
	Options []EvaluationFormSingleSelectQuestionOption

	// The display mode of the single select question.
	Automation *EvaluationFormSingleSelectQuestionAutomation

	// The display mode of the single select question.
	DisplayAs EvaluationFormSingleSelectQuestionDisplayMode

	noSmithyDocumentSerde
}

// Summary information about an evaluation form.
type EvaluationFormSummary struct {

	// The Amazon Resource Name (ARN) of the user who created the evaluation form.
	//
	// This member is required.
	CreatedBy *string

	// The timestamp for when the evaluation form was created.
	//
	// This member is required.
	CreatedTime *time.Time

	// The Amazon Resource Name (ARN) for the evaluation form resource.
	//
	// This member is required.
	EvaluationFormArn *string

	// The unique identifier for the evaluation form.
	//
	// This member is required.
	EvaluationFormId *string

	// The Amazon Resource Name (ARN) of the user who last updated the evaluation form.
	//
	// This member is required.
	LastModifiedBy *string

	// The timestamp for when the evaluation form was last updated.
	//
	// This member is required.
	LastModifiedTime *time.Time

	// The version number of the latest evaluation form version.
	//
	// This member is required.
	LatestVersion *int32

	// A title of the evaluation form.
	//
	// This member is required.
	Title *string

	// The version of the active evaluation form version.
	ActiveVersion *int32

	// The Amazon Resource Name (ARN) of the user who last activated the evaluation
	// form.
	LastActivatedBy *string

	// The timestamp for when the evaluation form was last activated.
	LastActivatedTime *time.Time

	noSmithyDocumentSerde
}

// Summary information about an evaluation form.
type EvaluationFormVersionSummary struct {

	// The Amazon Resource Name (ARN) of the user who created the evaluation form.
	//
	// This member is required.
	CreatedBy *string

	// The timestamp for when the evaluation form was created.
	//
	// This member is required.
	CreatedTime *time.Time

	// The Amazon Resource Name (ARN) for the evaluation form resource.
	//
	// This member is required.
	EvaluationFormArn *string

	// The unique identifier for the evaluation form.
	//
	// This member is required.
	EvaluationFormId *string

	// A version of the evaluation form.
	//
	// This member is required.
	EvaluationFormVersion *int32

	// The Amazon Resource Name (ARN) of the user who last updated the evaluation form.
	//
	// This member is required.
	LastModifiedBy *string

	// The timestamp for when the evaluation form was last updated.
	//
	// This member is required.
	LastModifiedTime *time.Time

	// The flag indicating whether the evaluation form is locked for changes.
	//
	// This member is required.
	Locked bool

	// The status of the evaluation form.
	//
	// This member is required.
	Status EvaluationFormVersionStatus

	noSmithyDocumentSerde
}

// Metadata information about a contact evaluation.
type EvaluationMetadata struct {

	// The identifier of the contact in this instance of Amazon Connect.
	//
	// This member is required.
	ContactId *string

	// The Amazon Resource Name (ARN) of the user who last updated the evaluation.
	//
	// This member is required.
	EvaluatorArn *string

	// The identifier of the agent who performed the contact.
	ContactAgentId *string

	// The overall score of the contact evaluation.
	Score *EvaluationScore

	noSmithyDocumentSerde
}

// Information about notes for a contact evaluation.
type EvaluationNote struct {

	// The note for an item (section or question) in a contact evaluation.
	Value *string

	noSmithyDocumentSerde
}

// Information about scores of a contact evaluation item (section or question).
type EvaluationScore struct {

	// The flag that marks the item as automatic fail. If the item or a child item
	// gets an automatic fail answer, this flag will be true.
	AutomaticFail bool

	// The flag to mark the item as not applicable for scoring.
	NotApplicable bool

	// The score percentage for an item in a contact evaluation.
	Percentage float64

	noSmithyDocumentSerde
}

// Summary information about a contact evaluation.
type EvaluationSummary struct {

	// The timestamp for when the evaluation was created.
	//
	// This member is required.
	CreatedTime *time.Time

	// The Amazon Resource Name (ARN) for the contact evaluation resource.
	//
	// This member is required.
	EvaluationArn *string

	// The unique identifier for the evaluation form.
	//
	// This member is required.
	EvaluationFormId *string

	// A title of the evaluation form.
	//
	// This member is required.
	EvaluationFormTitle *string

	// A unique identifier for the contact evaluation.
	//
	// This member is required.
	EvaluationId *string

	// The Amazon Resource Name (ARN) of the user who last updated the evaluation.
	//
	// This member is required.
	EvaluatorArn *string

	// The timestamp for when the evaluation was last updated.
	//
	// This member is required.
	LastModifiedTime *time.Time

	// The status of the contact evaluation.
	//
	// This member is required.
	Status EvaluationStatus

	// The overall score of the contact evaluation.
	Score *EvaluationScore

	noSmithyDocumentSerde
}

// The EventBridge action definition.
type EventBridgeActionDefinition struct {

	// The name.
	//
	// This member is required.
	Name *string

	noSmithyDocumentSerde
}

// Contains the filter to apply when retrieving metrics.
type Filters struct {

	// The channel to use to filter the metrics.
	Channels []Channel

	// The queues to use to filter the metrics. You should specify at least one queue,
	// and can specify up to 100 queues per request. The GetCurrentMetricsData API in
	// particular requires a queue when you include a Filter in your request.
	Queues []string

	// A list of up to 100 routing profile IDs or ARNs.
	RoutingProfiles []string

	noSmithyDocumentSerde
}

// Contains the filter to apply when retrieving metrics with the GetMetricDataV2 (https://docs.aws.amazon.com/connect/latest/APIReference/API_GetMetricDataV2.html)
// API.
type FilterV2 struct {

	// The key to use for filtering data. For example, QUEUE , ROUTING_PROFILE, AGENT ,
	// CHANNEL , AGENT_HIERARCHY_LEVEL_ONE , AGENT_HIERARCHY_LEVEL_TWO ,
	// AGENT_HIERARCHY_LEVEL_THREE , AGENT_HIERARCHY_LEVEL_FOUR ,
	// AGENT_HIERARCHY_LEVEL_FIVE . There must be at least 1 key and a maximum 5 keys.
	FilterKey *string

	// The identifiers to use for filtering data. For example, if you have a filter
	// key of QUEUE , you would add queue IDs or ARNs in FilterValues .
	FilterValues []string

	noSmithyDocumentSerde
}

// Contains information about a hierarchy group.
type HierarchyGroup struct {

	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string

	// Information about the levels in the hierarchy group.
	HierarchyPath *HierarchyPath

	// The identifier of the hierarchy group.
	Id *string

	// The identifier of the level in the hierarchy group.
	LevelId *string

	// The name of the hierarchy group.
	Name *string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// A leaf node condition which can be used to specify a hierarchy group condition.
type HierarchyGroupCondition struct {

	// The type of hierarchy group match.
	HierarchyGroupMatchType HierarchyGroupMatchType

	// The value in the hierarchy group condition.
	Value *string

	noSmithyDocumentSerde
}

// Contains summary information about a hierarchy group.
type HierarchyGroupSummary struct {

	// The Amazon Resource Name (ARN) of the hierarchy group.
	Arn *string

	// The identifier of the hierarchy group.
	Id *string

	// The name of the hierarchy group.
	Name *string

	noSmithyDocumentSerde
}

// Information about the hierarchy group.
type HierarchyGroupSummaryReference struct {

	// The Amazon Resource Name (ARN) for the hierarchy group.
	Arn *string

	// The unique identifier for the hierarchy group.
	Id *string

	noSmithyDocumentSerde
}

// Contains information about a hierarchy level.
type HierarchyLevel struct {

	// The Amazon Resource Name (ARN) of the hierarchy level.
	Arn *string

	// The identifier of the hierarchy level.
	Id *string

	// The name of the hierarchy level.
	Name *string

	noSmithyDocumentSerde
}

// Contains information about the hierarchy level to update.
type HierarchyLevelUpdate struct {

	// The name of the user hierarchy level. Must not be more than 50 characters.
	//
	// This member is required.
	Name *string

	noSmithyDocumentSerde
}

// Contains information about the levels of a hierarchy group.
type HierarchyPath struct {

	// Information about level five.
	LevelFive *HierarchyGroupSummary

	// Information about level four.
	LevelFour *HierarchyGroupSummary

	// Information about level one.
	LevelOne *HierarchyGroupSummary

	// Information about level three.
	LevelThree *HierarchyGroupSummary

	// Information about level two.
	LevelTwo *HierarchyGroupSummary

	noSmithyDocumentSerde
}

// Information about the levels in the hierarchy group.
type HierarchyPathReference struct {

	// Information about level five.
	LevelFive *HierarchyGroupSummaryReference

	// Information about level four.
	LevelFour *HierarchyGroupSummaryReference

	// Information about level one.
	LevelOne *HierarchyGroupSummaryReference

	// Information about level three.
	LevelThree *HierarchyGroupSummaryReference

	// Information about level two.
	LevelTwo *HierarchyGroupSummaryReference

	noSmithyDocumentSerde
}

// Contains information about a hierarchy structure.
type HierarchyStructure struct {

	// Information about level five.
	LevelFive *HierarchyLevel

	// Information about level four.
	LevelFour *HierarchyLevel

	// Information about level one.
	LevelOne *HierarchyLevel

	// Information about level three.
	LevelThree *HierarchyLevel

	// Information about level two.
	LevelTwo *HierarchyLevel

	noSmithyDocumentSerde
}

// Contains information about the level hierarchy to update.
type HierarchyStructureUpdate struct {

	// The update for level five.
	LevelFive *HierarchyLevelUpdate

	// The update for level four.
	LevelFour *HierarchyLevelUpdate

	// The update for level one.
	LevelOne *HierarchyLevelUpdate

	// The update for level three.
	LevelThree *HierarchyLevelUpdate

	// The update for level two.
	LevelTwo *HierarchyLevelUpdate

	noSmithyDocumentSerde
}

// Contains information about a historical metric. For a description of each
// metric, see Historical Metrics Definitions (https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html)
// in the Amazon Connect Administrator Guide.
type HistoricalMetric struct {

	// The name of the metric.
	Name HistoricalMetricName

	// The statistic for the metric.
	Statistic Statistic

	// The threshold for the metric, used with service level metrics.
	Threshold *Threshold

	// The unit for the metric.
	Unit Unit

	noSmithyDocumentSerde
}

// Contains the data for a historical metric.
type HistoricalMetricData struct {

	// Information about the metric.
	Metric *HistoricalMetric

	// The value of the metric.
	Value *float64

	noSmithyDocumentSerde
}

// Contains information about the historical metrics retrieved.
type HistoricalMetricResult struct {

	// The set of metrics.
	Collections []HistoricalMetricData

	// The dimension for the metrics.
	Dimensions *Dimensions

	noSmithyDocumentSerde
}

// Information about of the hours of operation.
type HoursOfOperation struct {

	// Configuration information for the hours of operation.
	Config []HoursOfOperationConfig

	// The description for the hours of operation.
	Description *string

	// The Amazon Resource Name (ARN) for the hours of operation.
	HoursOfOperationArn *string

	// The identifier for the hours of operation.
	HoursOfOperationId *string

	// The name for the hours of operation.
	Name *string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	// The time zone for the hours of operation.
	TimeZone *string

	noSmithyDocumentSerde
}

// Contains information about the hours of operation.
type HoursOfOperationConfig struct {

	// The day that the hours of operation applies to.
	//
	// This member is required.
	Day HoursOfOperationDays

	// The end time that your contact center closes.
	//
	// This member is required.
	EndTime *HoursOfOperationTimeSlice

	// The start time that your contact center opens.
	//
	// This member is required.
	StartTime *HoursOfOperationTimeSlice

	noSmithyDocumentSerde
}

// The search criteria to be used to return hours of operations.
type HoursOfOperationSearchCriteria struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []HoursOfOperationSearchCriteria

	// A list of conditions which would be applied together with an OR condition.
	OrConditions []HoursOfOperationSearchCriteria

	// A leaf node condition which can be used to specify a string condition. The
	// currently supported values for FieldName are name , description , timezone , and
	// resourceID .
	StringCondition *StringCondition

	noSmithyDocumentSerde
}

// Filters to be applied to search results.
type HoursOfOperationSearchFilter struct {

	// An object that can be used to specify Tag conditions inside the SearchFilter .
	// This accepts an OR of AND (List of List) input where:
	//   - Top level list specifies conditions that need to be applied with OR operator
	//   - Inner list specifies conditions that need to be applied with AND operator.
	TagFilter *ControlPlaneTagFilter

	noSmithyDocumentSerde
}

// Contains summary information about hours of operation for a contact center.
type HoursOfOperationSummary struct {

	// The Amazon Resource Name (ARN) of the hours of operation.
	Arn *string

	// The identifier of the hours of operation.
	Id *string

	// The name of the hours of operation.
	Name *string

	noSmithyDocumentSerde
}

// The start time or end time for an hours of operation.
type HoursOfOperationTimeSlice struct {

	// The hours.
	//
	// This member is required.
	Hours *int32

	// The minutes.
	//
	// This member is required.
	Minutes *int32

	noSmithyDocumentSerde
}

// The Amazon Connect instance.
type Instance struct {

	// The Amazon Resource Name (ARN) of the instance.
	Arn *string

	// When the instance was created.
	CreatedTime *time.Time

	// The identifier of the Amazon Connect instance. You can find the instance ID (https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html)
	// in the Amazon Resource Name (ARN) of the instance.
	Id *string

	// The identity management type.
	IdentityManagementType DirectoryType

	// Whether inbound calls are enabled.
	InboundCallsEnabled *bool

	// This URL allows contact center users to access the Amazon Connect admin website.
	InstanceAccessUrl *string

	// The alias of instance.
	InstanceAlias *string

	// The state of the instance.
	InstanceStatus InstanceStatus

	// Whether outbound calls are enabled.
	OutboundCallsEnabled *bool

	// The service role of the instance.
	ServiceRole *string

	// Relevant details why the instance was not successfully created.
	StatusReason *InstanceStatusReason

	noSmithyDocumentSerde
}

// Relevant details why the instance was not successfully created.
type InstanceStatusReason struct {

	// The message.
	Message *string

	noSmithyDocumentSerde
}

// The storage configuration for the instance.
type InstanceStorageConfig struct {

	// A valid storage type.
	//
	// This member is required.
	StorageType StorageType

	// The existing association identifier that uniquely identifies the resource type
	// and storage config for the given instance ID.
	AssociationId *string

	// The configuration of the Kinesis Firehose delivery stream.
	KinesisFirehoseConfig *KinesisFirehoseConfig

	// The configuration of the Kinesis data stream.
	KinesisStreamConfig *KinesisStreamConfig

	// The configuration of the Kinesis video stream.
	KinesisVideoStreamConfig *KinesisVideoStreamConfig

	// The S3 bucket configuration.
	S3Config *S3Config

	noSmithyDocumentSerde
}

// Information about the instance.
type InstanceSummary struct {

	// The Amazon Resource Name (ARN) of the instance.
	Arn *string

	// When the instance was created.
	CreatedTime *time.Time

	// The identifier of the instance.
	Id *string

	// The identity management type of the instance.
	IdentityManagementType DirectoryType

	// Whether inbound calls are enabled.
	InboundCallsEnabled *bool

	// This URL allows contact center users to access the Amazon Connect admin website.
	InstanceAccessUrl *string

	// The alias of the instance.
	InstanceAlias *string

	// The state of the instance.
	InstanceStatus InstanceStatus

	// Whether outbound calls are enabled.
	OutboundCallsEnabled *bool

	// The service role of the instance.
	ServiceRole *string

	noSmithyDocumentSerde
}

// Contains summary information about the associated AppIntegrations.
type IntegrationAssociationSummary struct {

	// The identifier of the Amazon Connect instance. You can find the instance ID (https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html)
	// in the Amazon Resource Name (ARN) of the instance.
	InstanceId *string

	// The Amazon Resource Name (ARN) for the AppIntegration.
	IntegrationArn *string

	// The Amazon Resource Name (ARN) for the AppIntegration association.
	IntegrationAssociationArn *string

	// The identifier for the AppIntegration association.
	IntegrationAssociationId *string

	// The integration type.
	IntegrationType IntegrationType

	// The user-provided, friendly name for the external application.
	SourceApplicationName *string

	// The URL for the external application.
	SourceApplicationUrl *string

	// The name of the source.
	SourceType SourceType

	noSmithyDocumentSerde
}

// A field that is invisible to an agent.
type InvisibleFieldInfo struct {

	// Identifier of the invisible field.
	Id *TaskTemplateFieldIdentifier

	noSmithyDocumentSerde
}

// Configuration information of a Kinesis Data Firehose delivery stream.
type KinesisFirehoseConfig struct {

	// The Amazon Resource Name (ARN) of the delivery stream.
	//
	// This member is required.
	FirehoseArn *string

	noSmithyDocumentSerde
}

// Configuration information of a Kinesis data stream.
type KinesisStreamConfig struct {

	// The Amazon Resource Name (ARN) of the data stream.
	//
	// This member is required.
	StreamArn *string

	noSmithyDocumentSerde
}

// Configuration information of a Kinesis video stream.
type KinesisVideoStreamConfig struct {

	// The encryption configuration.
	//
	// This member is required.
	EncryptionConfig *EncryptionConfig

	// The prefix of the video stream.
	//
	// This member is required.
	Prefix *string

	// The number of hours data is retained in the stream. Kinesis Video Streams
	// retains the data in a data store that is associated with the stream. The default
	// value is 0, indicating that the stream does not persist data.
	//
	// This member is required.
	RetentionPeriodHours int32

	noSmithyDocumentSerde
}

// Configuration information of an Amazon Lex bot.
type LexBot struct {

	// The Amazon Web Services Region where the Amazon Lex bot was created.
	//
	// This member is required.
	LexRegion *string

	// The name of the Amazon Lex bot.
	//
	// This member is required.
	Name *string

	noSmithyDocumentSerde
}

// Configuration information of an Amazon Lex or Amazon Lex V2 bot.
type LexBotConfig struct {

	// Configuration information of an Amazon Lex bot.
	LexBot *LexBot

	// Configuration information of an Amazon Lex V2 bot.
	LexV2Bot *LexV2Bot

	noSmithyDocumentSerde
}

// Configuration information of an Amazon Lex V2 bot.
type LexV2Bot struct {

	// The Amazon Resource Name (ARN) of the Amazon Lex V2 bot.
	AliasArn *string

	noSmithyDocumentSerde
}

// Information about phone numbers that have been claimed to your Amazon Connect
// instance or traffic distribution group.
type ListPhoneNumbersSummary struct {

	// The phone number. Phone numbers are formatted [+] [country code] [subscriber
	// number including area code] .
	PhoneNumber *string

	// The Amazon Resource Name (ARN) of the phone number.
	PhoneNumberArn *string

	// The ISO country code.
	PhoneNumberCountryCode PhoneNumberCountryCode

	// A unique identifier for the phone number.
	PhoneNumberId *string

	// The type of phone number.
	PhoneNumberType PhoneNumberType

	// The Amazon Resource Name (ARN) for Amazon Connect instances or traffic
	// distribution groups that phone numbers are claimed to.
	TargetArn *string

	noSmithyDocumentSerde
}

// Contains information about which channels are supported, and how many contacts
// an agent can have on a channel simultaneously.
type MediaConcurrency struct {

	// The channels that agents can handle in the Contact Control Panel (CCP).
	//
	// This member is required.
	Channel Channel

	// The number of contacts an agent can have on a channel simultaneously. Valid
	// Range for VOICE : Minimum value of 1. Maximum value of 1. Valid Range for CHAT :
	// Minimum value of 1. Maximum value of 10. Valid Range for TASK : Minimum value of
	// 1. Maximum value of 10.
	//
	// This member is required.
	Concurrency int32

	// Defines the cross-channel routing behavior for each channel that is enabled for
	// this Routing Profile. For example, this allows you to offer an agent a different
	// contact from another channel when they are currently working with a contact from
	// a Voice channel.
	CrossChannelBehavior *CrossChannelBehavior

	noSmithyDocumentSerde
}

// Contains the name, thresholds, and metric filters.
type MetricDataV2 struct {

	// The metric name, thresholds, and metric filters of the returned metric.
	Metric *MetricV2

	// The corresponding value of the metric returned in the response.
	Value *float64

	noSmithyDocumentSerde
}

// Contains information about the filter used when retrieving metrics.
// MetricFiltersV2 can be used on the following metrics: AVG_AGENT_CONNECTING_TIME
// , CONTACTS_CREATED , CONTACTS_HANDLED , SUM_CONTACTS_DISCONNECTED .
type MetricFilterV2 struct {

	// The key to use for filtering data. Valid metric filter keys: INITIATION_METHOD ,
	// DISCONNECT_REASON . These are the same values as the InitiationMethod and
	// DisconnectReason in the contact record. For more information, see
	// ContactTraceRecord (https://docs.aws.amazon.com/connect/latest/adminguide/ctr-data-model.html#ctr-ContactTraceRecord)
	// in the Amazon Connect Administrator's Guide.
	MetricFilterKey *string

	// The values to use for filtering data. Valid metric filter values for
	// INITIATION_METHOD : INBOUND | OUTBOUND | TRANSFER | QUEUE_TRANSFER | CALLBACK |
	// API Valid metric filter values for DISCONNECT_REASON : CUSTOMER_DISCONNECT |
	// AGENT_DISCONNECT | THIRD_PARTY_DISCONNECT | TELECOM_PROBLEM | BARGED |
	// CONTACT_FLOW_DISCONNECT | OTHER | EXPIRED | API
	MetricFilterValues []string

	noSmithyDocumentSerde
}

// Contains information about the metric results.
type MetricResultV2 struct {

	// The set of metrics.
	Collections []MetricDataV2

	// The dimension for the metrics.
	Dimensions map[string]string

	noSmithyDocumentSerde
}

// Contains information about the metric.
type MetricV2 struct {

	// Contains the filters to be used when returning data.
	MetricFilters []MetricFilterV2

	// The name of the metric. This parameter is required. The following Required = No
	// is incorrect.
	Name *string

	// Contains information about the threshold for service level metrics.
	Threshold []ThresholdV2

	noSmithyDocumentSerde
}

// The type of notification recipient.
type NotificationRecipientType struct {

	// A list of user IDs.
	UserIds []string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }. Amazon Connect users
	// with the specified tags will be notified.
	UserTags map[string]string

	noSmithyDocumentSerde
}

// Information about a reference when the referenceType is NUMBER . Otherwise, null.
type NumberReference struct {

	// Identifier of the number reference.
	Name *string

	// A valid number.
	Value *string

	noSmithyDocumentSerde
}

// Information about the property value used in automation of a numeric questions.
// Label values are associated with minimum and maximum values for the numeric
// question.
//   - Sentiment scores have a minimum value of -5 and maximum value of 5.
//   - Duration labels, such as NON_TALK_TIME , CONTACT_DURATION ,
//     AGENT_INTERACTION_DURATION , CUSTOMER_HOLD_TIME have a minimum value of 0 and
//     maximum value of 28800.
//   - Percentages have a minimum value of 0 and maximum value of 100.
//   - NUMBER_OF_INTERRUPTIONS has a minimum value of 0 and maximum value of 1000.
type NumericQuestionPropertyValueAutomation struct {

	// The property label of the automation.
	//
	// This member is required.
	Label NumericQuestionPropertyAutomationLabel

	noSmithyDocumentSerde
}

// The outbound caller ID name, number, and outbound whisper flow.
type OutboundCallerConfig struct {

	// The caller ID name.
	OutboundCallerIdName *string

	// The caller ID number.
	OutboundCallerIdNumberId *string

	// The outbound whisper flow to be used during an outbound call.
	OutboundFlowId *string

	noSmithyDocumentSerde
}

// The customer's details.
type ParticipantDetails struct {

	// Display name of the participant.
	//
	// This member is required.
	DisplayName *string

	noSmithyDocumentSerde
}

// The details to add for the participant.
type ParticipantDetailsToAdd struct {

	// The display name of the participant.
	DisplayName *string

	// The role of the participant being added.
	ParticipantRole ParticipantRole

	noSmithyDocumentSerde
}

// Configuration information for the timer. After the timer configuration is set,
// it persists for the duration of the chat. It persists across new contacts in the
// chain, for example, transfer contacts. For more information about how chat
// timeouts work, see Set up chat timeouts for human participants (https://docs.aws.amazon.com/connect/latest/adminguide/setup-chat-timeouts.html)
// .
type ParticipantTimerConfiguration struct {

	// The role of the participant in the chat conversation.
	//
	// This member is required.
	ParticipantRole TimerEligibleParticipantRoles

	// The type of timer. IDLE indicates the timer applies for considering a human
	// chat participant as idle. DISCONNECT_NONCUSTOMER indicates the timer applies to
	// automatically disconnecting a chat participant due to idleness.
	//
	// This member is required.
	TimerType ParticipantTimerType

	// The value of the timer. Either the timer action (Unset to delete the timer), or
	// the duration of the timer in minutes. Only one value can be set.
	//
	// This member is required.
	TimerValue ParticipantTimerValue

	noSmithyDocumentSerde
}

// The value of the timer. Either the timer action ( Unset to delete the timer),
// or the duration of the timer in minutes. Only one value can be set. For more
// information about how chat timeouts work, see Set up chat timeouts for human
// participants (https://docs.aws.amazon.com/connect/latest/adminguide/setup-chat-timeouts.html)
// .
//
// The following types satisfy this interface:
//
//	ParticipantTimerValueMemberParticipantTimerAction
//	ParticipantTimerValueMemberParticipantTimerDurationInMinutes
type ParticipantTimerValue interface {
	isParticipantTimerValue()
}

// The timer action. Currently only one value is allowed: Unset . It deletes a
// timer.
type ParticipantTimerValueMemberParticipantTimerAction struct {
	Value ParticipantTimerAction

	noSmithyDocumentSerde
}

func (*ParticipantTimerValueMemberParticipantTimerAction) isParticipantTimerValue() {}

// The duration of a timer, in minutes.
type ParticipantTimerValueMemberParticipantTimerDurationInMinutes struct {
	Value int32

	noSmithyDocumentSerde
}

func (*ParticipantTimerValueMemberParticipantTimerDurationInMinutes) isParticipantTimerValue() {}

// The credentials used by the participant.
type ParticipantTokenCredentials struct {

	// The expiration of the token. It's specified in ISO 8601 format:
	// yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.
	Expiry *string

	// The token used by the chat participant to call CreateParticipantConnection (https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html)
	// . The participant token is valid for the lifetime of a chat participant.
	ParticipantToken *string

	noSmithyDocumentSerde
}

// Enable persistent chats. For more information about enabling persistent chat,
// and for example use cases and how to configure for them, see Enable persistent
// chat (https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html)
// .
type PersistentChat struct {

	// The contactId that is used for rehydration depends on the rehydration type.
	// RehydrationType is required for persistent chat.
	//   - ENTIRE_PAST_SESSION : Rehydrates a chat from the most recently terminated
	//   past chat contact of the specified past ended chat session. To use this type,
	//   provide the initialContactId of the past ended chat session in the
	//   sourceContactId field. In this type, Amazon Connect determines the most recent
	//   chat contact on the specified chat session that has ended, and uses it to start
	//   a persistent chat.
	//   - FROM_SEGMENT : Rehydrates a chat from the past chat contact that is
	//   specified in the sourceContactId field.
	// The actual contactId used for rehydration is provided in the response of this
	// API.
	RehydrationType RehydrationType

	// The contactId from which a persistent chat session must be started.
	SourceContactId *string

	noSmithyDocumentSerde
}

// Contains information about a phone number for a quick connect.
type PhoneNumberQuickConnectConfig struct {

	// The phone number in E.164 format.
	//
	// This member is required.
	PhoneNumber *string

	noSmithyDocumentSerde
}

// The status of the phone number.
//   - CLAIMED means the previous ClaimedPhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html)
//     or UpdatePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html)
//     operation succeeded.
//   - IN_PROGRESS means a ClaimedPhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html)
//     or UpdatePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html)
//     operation is still in progress and has not yet completed. You can call
//     DescribePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_DescribePhoneNumber.html)
//     at a later time to verify if the previous operation has completed.
//   - FAILED indicates that the previous ClaimedPhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html)
//     or UpdatePhoneNumber (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html)
//     operation has failed. It will include a message indicating the failure reason. A
//     common reason for a failure may be that the TargetArn value you are claiming
//     or updating a phone number to has reached its limit of total claimed numbers. If
//     you received a FAILED status from a ClaimPhoneNumber API call, you have one
//     day to retry claiming the phone number before the number is released back to the
//     inventory for other customers to claim.
type PhoneNumberStatus struct {

	// The status message.
	Message *string

	// The status.
	Status PhoneNumberWorkflowStatus

	noSmithyDocumentSerde
}

// Contains summary information about a phone number for a contact center.
type PhoneNumberSummary struct {

	// The Amazon Resource Name (ARN) of the phone number.
	Arn *string

	// The identifier of the phone number.
	Id *string

	// The phone number.
	PhoneNumber *string

	// The ISO country code.
	PhoneNumberCountryCode PhoneNumberCountryCode

	// The type of phone number.
	PhoneNumberType PhoneNumberType

	noSmithyDocumentSerde
}

// Information about a problem detail.
type ProblemDetail struct {

	// The problem detail's message.
	Message *string

	noSmithyDocumentSerde
}

// Information about a prompt.
type Prompt struct {

	// The description of the prompt.
	Description *string

	// The name of the prompt.
	Name *string

	// The Amazon Resource Name (ARN) of the prompt.
	PromptARN *string

	// A unique identifier for the prompt.
	PromptId *string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// The search criteria to be used to return prompts.
type PromptSearchCriteria struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []PromptSearchCriteria

	// A list of conditions which would be applied together with an OR condition.
	OrConditions []PromptSearchCriteria

	// A leaf node condition which can be used to specify a string condition. The
	// currently supported values for FieldName are name , description , and resourceID
	// .
	StringCondition *StringCondition

	noSmithyDocumentSerde
}

// Filters to be applied to search results.
type PromptSearchFilter struct {

	// An object that can be used to specify Tag conditions inside the SearchFilter .
	// This accepts an OR of AND (List of List) input where:
	//   - Top level list specifies conditions that need to be applied with OR operator
	//   - Inner list specifies conditions that need to be applied with AND operator.
	TagFilter *ControlPlaneTagFilter

	noSmithyDocumentSerde
}

// Contains information about the prompt.
type PromptSummary struct {

	// The Amazon Resource Name (ARN) of the prompt.
	Arn *string

	// The identifier of the prompt.
	Id *string

	// The name of the prompt.
	Name *string

	noSmithyDocumentSerde
}

// Contains information about why a property is not valid.
type PropertyValidationExceptionProperty struct {

	// A message describing why the property is not valid.
	//
	// This member is required.
	Message *string

	// The full property path.
	//
	// This member is required.
	PropertyPath *string

	// Why the property is not valid.
	//
	// This member is required.
	Reason PropertyValidationExceptionReason

	noSmithyDocumentSerde
}

// Contains information about a queue.
type Queue struct {

	// The description of the queue.
	Description *string

	// The identifier for the hours of operation.
	HoursOfOperationId *string

	// The maximum number of contacts that can be in the queue before it is considered
	// full.
	MaxContacts *int32

	// The name of the queue.
	Name *string

	// The outbound caller ID name, number, and outbound whisper flow.
	OutboundCallerConfig *OutboundCallerConfig

	// The Amazon Resource Name (ARN) for the queue.
	QueueArn *string

	// The identifier for the queue.
	QueueId *string

	// The status of the queue.
	Status QueueStatus

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// If this contact was queued, this contains information about the queue.
type QueueInfo struct {

	// The timestamp when the contact was added to the queue.
	EnqueueTimestamp *time.Time

	// The unique identifier for the queue.
	Id *string

	noSmithyDocumentSerde
}

// Contains information about a queue for a quick connect. The flow must be of
// type Transfer to Queue.
type QueueQuickConnectConfig struct {

	// The identifier of the flow.
	//
	// This member is required.
	ContactFlowId *string

	// The identifier for the queue.
	//
	// This member is required.
	QueueId *string

	noSmithyDocumentSerde
}

// Contains information about a queue resource for which metrics are returned.
type QueueReference struct {

	// The Amazon Resource Name (ARN) of the queue.
	Arn *string

	// The identifier of the queue.
	Id *string

	noSmithyDocumentSerde
}

// The search criteria to be used to return queues. The name and description
// fields support "contains" queries with a minimum of 2 characters and a maximum
// of 25 characters. Any queries with character lengths outside of this range will
// throw invalid results.
type QueueSearchCriteria struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []QueueSearchCriteria

	// A list of conditions which would be applied together with an OR condition.
	OrConditions []QueueSearchCriteria

	// The type of queue.
	QueueTypeCondition SearchableQueueType

	// A leaf node condition which can be used to specify a string condition. The
	// currently supported values for FieldName are name , description , and resourceID
	// .
	StringCondition *StringCondition

	noSmithyDocumentSerde
}

// Filters to be applied to search results.
type QueueSearchFilter struct {

	// An object that can be used to specify Tag conditions inside the SearchFilter .
	// This accepts an OR of AND (List of List) input where:
	//   - Top level list specifies conditions that need to be applied with OR operator
	//   - Inner list specifies conditions that need to be applied with AND operator.
	TagFilter *ControlPlaneTagFilter

	noSmithyDocumentSerde
}

// Contains summary information about a queue.
type QueueSummary struct {

	// The Amazon Resource Name (ARN) of the queue.
	Arn *string

	// The identifier of the queue.
	Id *string

	// The name of the queue.
	Name *string

	// The type of queue.
	QueueType QueueType

	noSmithyDocumentSerde
}

// Contains information about a quick connect.
type QuickConnect struct {

	// The description.
	Description *string

	// The name of the quick connect.
	Name *string

	// The Amazon Resource Name (ARN) of the quick connect.
	QuickConnectARN *string

	// Contains information about the quick connect.
	QuickConnectConfig *QuickConnectConfig

	// The identifier for the quick connect.
	QuickConnectId *string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Contains configuration settings for a quick connect.
type QuickConnectConfig struct {

	// The type of quick connect. In the Amazon Connect console, when you create a
	// quick connect, you are prompted to assign one of the following types: Agent
	// (USER), External (PHONE_NUMBER), or Queue (QUEUE).
	//
	// This member is required.
	QuickConnectType QuickConnectType

	// The phone configuration. This is required only if QuickConnectType is
	// PHONE_NUMBER.
	PhoneConfig *PhoneNumberQuickConnectConfig

	// The queue configuration. This is required only if QuickConnectType is QUEUE.
	QueueConfig *QueueQuickConnectConfig

	// The user configuration. This is required only if QuickConnectType is USER.
	UserConfig *UserQuickConnectConfig

	noSmithyDocumentSerde
}

// The search criteria to be used to return quick connects.
type QuickConnectSearchCriteria struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []QuickConnectSearchCriteria

	// A list of conditions which would be applied together with an OR condition.
	OrConditions []QuickConnectSearchCriteria

	// A leaf node condition which can be used to specify a string condition. The
	// currently supported values for FieldName are name , description , and resourceID
	// .
	StringCondition *StringCondition

	noSmithyDocumentSerde
}

// Filters to be applied to search results.
type QuickConnectSearchFilter struct {

	// An object that can be used to specify Tag conditions inside the SearchFilter .
	// This accepts an OR of AND (List of List) input where:
	//   - Top level list specifies conditions that need to be applied with OR operator
	//   - Inner list specifies conditions that need to be applied with AND operator.
	TagFilter *ControlPlaneTagFilter

	noSmithyDocumentSerde
}

// Contains summary information about a quick connect.
type QuickConnectSummary struct {

	// The Amazon Resource Name (ARN) of the quick connect.
	Arn *string

	// The identifier for the quick connect.
	Id *string

	// The name of the quick connect.
	Name *string

	// The type of quick connect. In the Amazon Connect console, when you create a
	// quick connect, you are prompted to assign one of the following types: Agent
	// (USER), External (PHONE_NUMBER), or Queue (QUEUE).
	QuickConnectType QuickConnectType

	noSmithyDocumentSerde
}

// Indicates a field that is read-only to an agent.
type ReadOnlyFieldInfo struct {

	// Identifier of the read-only field.
	Id *TaskTemplateFieldIdentifier

	noSmithyDocumentSerde
}

// Well-formed data on a contact, used by agents to complete a contact request.
// You can have up to 4,096 UTF-8 bytes across all references for a contact.
type Reference struct {

	// The type of the reference. DATE must be of type Epoch timestamp.
	//
	// This member is required.
	Type ReferenceType

	// A valid value for the reference. For example, for a URL reference, a formatted
	// URL that is displayed to an agent in the Contact Control Panel (CCP).
	//
	// This member is required.
	Value *string

	noSmithyDocumentSerde
}

// Contains summary information about a reference. ReferenceSummary contains only
// one non null field between the URL and attachment based on the reference type.
//
// The following types satisfy this interface:
//
//	ReferenceSummaryMemberAttachment
//	ReferenceSummaryMemberDate
//	ReferenceSummaryMemberEmail
//	ReferenceSummaryMemberNumber
//	ReferenceSummaryMemberString
//	ReferenceSummaryMemberUrl
type ReferenceSummary interface {
	isReferenceSummary()
}

// Information about the reference when the referenceType is ATTACHMENT .
// Otherwise, null.
type ReferenceSummaryMemberAttachment struct {
	Value AttachmentReference

	noSmithyDocumentSerde
}

func (*ReferenceSummaryMemberAttachment) isReferenceSummary() {}

// Information about a reference when the referenceType is DATE . Otherwise, null.
type ReferenceSummaryMemberDate struct {
	Value DateReference

	noSmithyDocumentSerde
}

func (*ReferenceSummaryMemberDate) isReferenceSummary() {}

// Information about a reference when the referenceType is EMAIL . Otherwise, null.
type ReferenceSummaryMemberEmail struct {
	Value EmailReference

	noSmithyDocumentSerde
}

func (*ReferenceSummaryMemberEmail) isReferenceSummary() {}

// Information about a reference when the referenceType is NUMBER . Otherwise, null.
type ReferenceSummaryMemberNumber struct {
	Value NumberReference

	noSmithyDocumentSerde
}

func (*ReferenceSummaryMemberNumber) isReferenceSummary() {}

// Information about a reference when the referenceType is STRING . Otherwise, null.
type ReferenceSummaryMemberString struct {
	Value StringReference

	noSmithyDocumentSerde
}

func (*ReferenceSummaryMemberString) isReferenceSummary() {}

// Information about the reference when the referenceType is URL . Otherwise, null.
type ReferenceSummaryMemberUrl struct {
	Value UrlReference

	noSmithyDocumentSerde
}

func (*ReferenceSummaryMemberUrl) isReferenceSummary() {}

// Information about a required field.
type RequiredFieldInfo struct {

	// The unique identifier for the field.
	Id *TaskTemplateFieldIdentifier

	noSmithyDocumentSerde
}

// The search criteria to be used to search tags.
type ResourceTagsSearchCriteria struct {

	// The search criteria to be used to return tags.
	TagSearchCondition *TagSearchCondition

	noSmithyDocumentSerde
}

// Contains information about a routing profile.
type RoutingProfile struct {

	// Whether agents with this routing profile will have their routing order
	// calculated based on time since their last inbound contact or longest idle time.
	AgentAvailabilityTimer AgentAvailabilityTimer

	// The identifier of the default outbound queue for this routing profile.
	DefaultOutboundQueueId *string

	// The description of the routing profile.
	Description *string

	// The identifier of the Amazon Connect instance. You can find the instance ID (https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html)
	// in the Amazon Resource Name (ARN) of the instance.
	InstanceId *string

	// The channels agents can handle in the Contact Control Panel (CCP) for this
	// routing profile.
	MediaConcurrencies []MediaConcurrency

	// The name of the routing profile.
	Name *string

	// The number of associated queues in routing profile.
	NumberOfAssociatedQueues *int64

	// The number of associated users in routing profile.
	NumberOfAssociatedUsers *int64

	// The Amazon Resource Name (ARN) of the routing profile.
	RoutingProfileArn *string

	// The identifier of the routing profile.
	RoutingProfileId *string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Contains information about the queue and channel for which priority and delay
// can be set.
type RoutingProfileQueueConfig struct {

	// The delay, in seconds, a contact should be in the queue before they are routed
	// to an available agent. For more information, see Queues: priority and delay (https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html)
	// in the Amazon Connect Administrator Guide.
	//
	// This member is required.
	Delay *int32

	// The order in which contacts are to be handled for the queue. For more
	// information, see Queues: priority and delay (https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html)
	// .
	//
	// This member is required.
	Priority *int32

	// Contains information about a queue resource.
	//
	// This member is required.
	QueueReference *RoutingProfileQueueReference

	noSmithyDocumentSerde
}

// Contains summary information about a routing profile queue.
type RoutingProfileQueueConfigSummary struct {

	// The channels this queue supports.
	//
	// This member is required.
	Channel Channel

	// The delay, in seconds, that a contact should be in the queue before they are
	// routed to an available agent. For more information, see Queues: priority and
	// delay (https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html)
	// in the Amazon Connect Administrator Guide.
	//
	// This member is required.
	Delay int32

	// The order in which contacts are to be handled for the queue. For more
	// information, see Queues: priority and delay (https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html)
	// .
	//
	// This member is required.
	Priority int32

	// The Amazon Resource Name (ARN) of the queue.
	//
	// This member is required.
	QueueArn *string

	// The identifier for the queue.
	//
	// This member is required.
	QueueId *string

	// The name of the queue.
	//
	// This member is required.
	QueueName *string

	noSmithyDocumentSerde
}

// Contains the channel and queue identifier for a routing profile.
type RoutingProfileQueueReference struct {

	// The channels agents can handle in the Contact Control Panel (CCP) for this
	// routing profile.
	//
	// This member is required.
	Channel Channel

	// The identifier for the queue.
	//
	// This member is required.
	QueueId *string

	noSmithyDocumentSerde
}

// Information about the routing profile assigned to the user.
type RoutingProfileReference struct {

	// The Amazon Resource Name (ARN) of the routing profile.
	Arn *string

	// The identifier of the routing profile.
	Id *string

	noSmithyDocumentSerde
}

// The search criteria to be used to return routing profiles. The name and
// description fields support "contains" queries with a minimum of 2 characters and
// a maximum of 25 characters. Any queries with character lengths outside of this
// range will throw invalid results.
type RoutingProfileSearchCriteria struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []RoutingProfileSearchCriteria

	// A list of conditions which would be applied together with an OR condition.
	OrConditions []RoutingProfileSearchCriteria

	// A leaf node condition which can be used to specify a string condition. The
	// currently supported values for FieldName are name , description , and resourceID
	// .
	StringCondition *StringCondition

	noSmithyDocumentSerde
}

// Filters to be applied to search results.
type RoutingProfileSearchFilter struct {

	// An object that can be used to specify Tag conditions inside the SearchFilter .
	// This accepts an OR of AND (List of List) input where:
	//   - Top level list specifies conditions that need to be applied with OR operator
	//   - Inner list specifies conditions that need to be applied with AND operator.
	TagFilter *ControlPlaneTagFilter

	noSmithyDocumentSerde
}

// Contains summary information about a routing profile.
type RoutingProfileSummary struct {

	// The Amazon Resource Name (ARN) of the routing profile.
	Arn *string

	// The identifier of the routing profile.
	Id *string

	// The name of the routing profile.
	Name *string

	noSmithyDocumentSerde
}

// Information about a rule.
type Rule struct {

	// A list of actions to be run when the rule is triggered.
	//
	// This member is required.
	Actions []RuleAction

	// The timestamp for when the rule was created.
	//
	// This member is required.
	CreatedTime *time.Time

	// The conditions of the rule.
	//
	// This member is required.
	Function *string

	// The Amazon Resource Name (ARN) of the user who last updated the rule.
	//
	// This member is required.
	LastUpdatedBy *string

	// The timestamp for the when the rule was last updated.
	//
	// This member is required.
	LastUpdatedTime *time.Time

	// The name of the rule.
	//
	// This member is required.
	Name *string

	// The publish status of the rule.
	//
	// This member is required.
	PublishStatus RulePublishStatus

	// The Amazon Resource Name (ARN) of the rule.
	//
	// This member is required.
	RuleArn *string

	// A unique identifier for the rule.
	//
	// This member is required.
	RuleId *string

	// The event source to trigger the rule.
	//
	// This member is required.
	TriggerEventSource *RuleTriggerEventSource

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Information about the action to be performed when a rule is triggered.
type RuleAction struct {

	// The type of action that creates a rule.
	//
	// This member is required.
	ActionType ActionType

	// Information about the contact category action.
	AssignContactCategoryAction *AssignContactCategoryActionDefinition

	// Information about the EventBridge action.
	EventBridgeAction *EventBridgeActionDefinition

	// Information about the send notification action.
	SendNotificationAction *SendNotificationActionDefinition

	// Information about the task action. This field is required if TriggerEventSource
	// is one of the following values: OnZendeskTicketCreate |
	// OnZendeskTicketStatusUpdate | OnSalesforceCaseCreate
	TaskAction *TaskActionDefinition

	noSmithyDocumentSerde
}

// A list of ActionTypes associated with a rule.
type RuleSummary struct {

	// A list of ActionTypes associated with a rule.
	//
	// This member is required.
	ActionSummaries []ActionSummary

	// The timestamp for when the rule was created.
	//
	// This member is required.
	CreatedTime *time.Time

	// The name of the event source.
	//
	// This member is required.
	EventSourceName EventSourceName

	// The timestamp for when the rule was last updated.
	//
	// This member is required.
	LastUpdatedTime *time.Time

	// The name of the rule.
	//
	// This member is required.
	Name *string

	// The publish status of the rule.
	//
	// This member is required.
	PublishStatus RulePublishStatus

	// The Amazon Resource Name (ARN) of the rule.
	//
	// This member is required.
	RuleArn *string

	// A unique identifier for the rule.
	//
	// This member is required.
	RuleId *string

	noSmithyDocumentSerde
}

// The name of the event source. This field is required if TriggerEventSource is
// one of the following values: OnZendeskTicketCreate | OnZendeskTicketStatusUpdate
// | OnSalesforceCaseCreate
type RuleTriggerEventSource struct {

	// The name of the event source.
	//
	// This member is required.
	EventSourceName EventSourceName

	// The identifier for the integration association.
	IntegrationAssociationId *string

	noSmithyDocumentSerde
}

// Information about the Amazon Simple Storage Service (Amazon S3) storage type.
type S3Config struct {

	// The S3 bucket name.
	//
	// This member is required.
	BucketName *string

	// The S3 bucket prefix.
	//
	// This member is required.
	BucketPrefix *string

	// The Amazon S3 encryption configuration.
	EncryptionConfig *EncryptionConfig

	noSmithyDocumentSerde
}

// Configuration information of the security key.
type SecurityKey struct {

	// The existing association identifier that uniquely identifies the resource type
	// and storage config for the given instance ID.
	AssociationId *string

	// When the security key was created.
	CreationTime *time.Time

	// The key of the security key.
	Key *string

	noSmithyDocumentSerde
}

// Contains information about a security profile.
type SecurityProfile struct {

	// The list of tags that a security profile uses to restrict access to resources
	// in Amazon Connect.
	AllowedAccessControlTags map[string]string

	// The Amazon Resource Name (ARN) for the secruity profile.
	Arn *string

	// The description of the security profile.
	Description *string

	// The identifier for the security profile.
	Id *string

	// The organization resource identifier for the security profile.
	OrganizationResourceId *string

	// The name for the security profile.
	SecurityProfileName *string

	// The list of resources that a security profile applies tag restrictions to in
	// Amazon Connect.
	TagRestrictedResources []string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// The search criteria to be used to return security profiles. The name field
// support "contains" queries with a minimum of 2 characters and maximum of 25
// characters. Any queries with character lengths outside of this range will throw
// invalid results.
type SecurityProfileSearchCriteria struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []SecurityProfileSearchCriteria

	// A list of conditions which would be applied together with an OR condition.
	OrConditions []SecurityProfileSearchCriteria

	// A leaf node condition which can be used to specify a string condition.
	StringCondition *StringCondition

	noSmithyDocumentSerde
}

// Information about the returned security profiles.
type SecurityProfileSearchSummary struct {

	// The Amazon Resource Name (ARN) of the security profile.
	Arn *string

	// The description of the security profile.
	Description *string

	// The identifier of the security profile.
	Id *string

	// The organization resource identifier.
	OrganizationResourceId *string

	// The name of the security profile.
	SecurityProfileName *string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Filters to be applied to search results.
type SecurityProfilesSearchFilter struct {

	// An object that can be used to specify Tag conditions inside the SearchFilter .
	// This accepts an OR of AND (List of List) input where:
	//   - Top level list specifies conditions that need to be applied with OR operator
	//   - Inner list specifies conditions that need to be applied with AND operator.
	TagFilter *ControlPlaneTagFilter

	noSmithyDocumentSerde
}

// Contains information about a security profile.
type SecurityProfileSummary struct {

	// The Amazon Resource Name (ARN) of the security profile.
	Arn *string

	// The identifier of the security profile.
	Id *string

	// The name of the security profile.
	Name *string

	noSmithyDocumentSerde
}

// Information about the send notification action.
type SendNotificationActionDefinition struct {

	// Notification content. Supports variable injection. For more information, see
	// JSONPath reference (https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html)
	// in the Amazon Connect Administrators Guide.
	//
	// This member is required.
	Content *string

	// Content type format.
	//
	// This member is required.
	ContentType NotificationContentType

	// Notification delivery method.
	//
	// This member is required.
	DeliveryMethod NotificationDeliveryType

	// Notification recipient.
	//
	// This member is required.
	Recipient *NotificationRecipientType

	// The subject of the email if the delivery method is EMAIL . Supports variable
	// injection. For more information, see JSONPath reference (https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html)
	// in the Amazon Connect Administrators Guide.
	Subject *string

	noSmithyDocumentSerde
}

// The distribution of allowing signing in to the instance and its replica(s).
type SignInConfig struct {

	// Information about traffic distributions.
	//
	// This member is required.
	Distributions []SignInDistribution

	noSmithyDocumentSerde
}

// The distribution of sign in traffic between the instance and its replica(s).
type SignInDistribution struct {

	// Whether sign in distribution is enabled.
	//
	// This member is required.
	Enabled bool

	// The Amazon Web Services Region of the sign in distribution.
	//
	// This member is required.
	Region *string

	noSmithyDocumentSerde
}

// Information about the automation option based on a rule category for a single
// select question.
type SingleSelectQuestionRuleCategoryAutomation struct {

	// The category name, as defined in Rules.
	//
	// This member is required.
	Category *string

	// The condition to apply for the automation option. If the condition is PRESENT ,
	// then the option is applied when the contact data includes the category.
	// Similarly, if the condition is NOT_PRESENT , then the option is applied when the
	// contact data does not include the category.
	//
	// This member is required.
	Condition SingleSelectQuestionRuleCategoryAutomationCondition

	// The identifier of the answer option.
	//
	// This member is required.
	OptionRefId *string

	noSmithyDocumentSerde
}

// A leaf node condition which can be used to specify a string condition.
type StringCondition struct {

	// The type of comparison to be made when evaluating the string condition.
	ComparisonType StringComparisonType

	// The name of the field in the string condition.
	FieldName *string

	// The value of the string.
	Value *string

	noSmithyDocumentSerde
}

// Information about a reference when the referenceType is STRING . Otherwise, null.
type StringReference struct {

	// Identifier of the string reference.
	Name *string

	// A valid string.
	Value *string

	noSmithyDocumentSerde
}

// A leaf node condition which can be used to specify a tag condition, for
// example, HAVE BPO = 123 .
type TagCondition struct {

	// The tag key in the tag condition.
	TagKey *string

	// The tag value in the tag condition.
	TagValue *string

	noSmithyDocumentSerde
}

// The search criteria to be used to return tags.
type TagSearchCondition struct {

	// The tag key used in the tag search condition.
	TagKey *string

	// The type of comparison to be made when evaluating the tag key in tag search
	// condition.
	TagKeyComparisonType StringComparisonType

	// The tag value used in the tag search condition.
	TagValue *string

	// The type of comparison to be made when evaluating the tag value in tag search
	// condition.
	TagValueComparisonType StringComparisonType

	noSmithyDocumentSerde
}

// A tag set contains tag key and tag value.
type TagSet struct {

	// The tag key in the tagSet.
	Key *string

	// The tag value in the tagSet.
	Value *string

	noSmithyDocumentSerde
}

// Information about the task action.
type TaskActionDefinition struct {

	// The identifier of the flow.
	//
	// This member is required.
	ContactFlowId *string

	// The name. Supports variable injection. For more information, see JSONPath
	// reference (https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html)
	// in the Amazon Connect Administrators Guide.
	//
	// This member is required.
	Name *string

	// The description. Supports variable injection. For more information, see
	// JSONPath reference (https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-variable-injection.html)
	// in the Amazon Connect Administrators Guide.
	Description *string

	// Information about the reference when the referenceType is URL . Otherwise, null.
	// (Supports variable injection in the Value field.)
	References map[string]Reference

	noSmithyDocumentSerde
}

// Describes constraints that apply to the template fields.
type TaskTemplateConstraints struct {

	// Lists the fields that are invisible to agents.
	InvisibleFields []InvisibleFieldInfo

	// Lists the fields that are read-only to agents, and cannot be edited.
	ReadOnlyFields []ReadOnlyFieldInfo

	// Lists the fields that are required to be filled by agents.
	RequiredFields []RequiredFieldInfo

	noSmithyDocumentSerde
}

// Describes a default field and its corresponding value.
type TaskTemplateDefaultFieldValue struct {

	// Default value for the field.
	DefaultValue *string

	// Identifier of a field.
	Id *TaskTemplateFieldIdentifier

	noSmithyDocumentSerde
}

// Describes default values for fields on a template.
type TaskTemplateDefaults struct {

	// Default value for the field.
	DefaultFieldValues []TaskTemplateDefaultFieldValue

	noSmithyDocumentSerde
}

// Describes a single task template field.
type TaskTemplateField struct {

	// The unique identifier for the field.
	//
	// This member is required.
	Id *TaskTemplateFieldIdentifier

	// The description of the field.
	Description *string

	// A list of options for a single select field.
	SingleSelectOptions []string

	// Indicates the type of field.
	Type TaskTemplateFieldType

	noSmithyDocumentSerde
}

// The identifier of the task template field.
type TaskTemplateFieldIdentifier struct {

	// The name of the task template field.
	Name *string

	noSmithyDocumentSerde
}

// Contains summary information about the task template.
type TaskTemplateMetadata struct {

	// The Amazon Resource Name (ARN) of the task template.
	Arn *string

	// The timestamp when the task template was created.
	CreatedTime *time.Time

	// The description of the task template.
	Description *string

	// A unique identifier for the task template.
	Id *string

	// The timestamp when the task template was last modified.
	LastModifiedTime *time.Time

	// The name of the task template.
	Name *string

	// Marks a template as ACTIVE or INACTIVE for a task to refer to it. Tasks can
	// only be created from ACTIVE templates. If a template is marked as INACTIVE ,
	// then a task that refers to this template cannot be created.
	Status TaskTemplateStatus

	noSmithyDocumentSerde
}

// The distribution of traffic between the instance and its replicas.
type TelephonyConfig struct {

	// Information about traffic distributions.
	//
	// This member is required.
	Distributions []Distribution

	noSmithyDocumentSerde
}

// Contains information about the threshold for service level metrics.
type Threshold struct {

	// The type of comparison. Only "less than" (LT) comparisons are supported.
	Comparison Comparison

	// The threshold value to compare.
	ThresholdValue *float64

	noSmithyDocumentSerde
}

// Contains information about the threshold for service level metrics.
type ThresholdV2 struct {

	// The type of comparison. Only "less than" (LT) comparisons are supported.
	Comparison *string

	// The threshold value to compare.
	ThresholdValue *float64

	noSmithyDocumentSerde
}

// Information about a traffic distribution group.
type TrafficDistributionGroup struct {

	// The Amazon Resource Name (ARN) of the traffic distribution group.
	Arn *string

	// The description of the traffic distribution group.
	Description *string

	// The identifier of the traffic distribution group. This can be the ID or the ARN
	// if the API is being called in the Region where the traffic distribution group
	// was created. The ARN must be provided if the call is from the replicated Region.
	Id *string

	// The Amazon Resource Name (ARN).
	InstanceArn *string

	// Whether this is the default traffic distribution group created during instance
	// replication. The default traffic distribution group cannot be deleted by the
	// DeleteTrafficDistributionGroup API. The default traffic distribution group is
	// deleted as part of the process for deleting a replica. You can change the
	// SignInConfig only for a default TrafficDistributionGroup . If you call
	// UpdateTrafficDistribution with a modified SignInConfig and a non-default
	// TrafficDistributionGroup , an InvalidRequestException is returned.
	IsDefault bool

	// The name of the traffic distribution group.
	Name *string

	// The status of the traffic distribution group.
	//   - CREATION_IN_PROGRESS means the previous CreateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateTrafficDistributionGroup.html)
	//   operation is still in progress and has not yet completed.
	//   - ACTIVE means the previous CreateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateTrafficDistributionGroup.html)
	//   operation has succeeded.
	//   - CREATION_FAILED indicates that the previous CreateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateTrafficDistributionGroup.html)
	//   operation has failed.
	//   - PENDING_DELETION means the previous DeleteTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_DeleteTrafficDistributionGroup.html)
	//   operation is still in progress and has not yet completed.
	//   - DELETION_FAILED means the previous DeleteTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_DeleteTrafficDistributionGroup.html)
	//   operation has failed.
	//   - UPDATE_IN_PROGRESS means the previous UpdateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateTrafficDistributionGroup.html)
	//   operation is still in progress and has not yet completed.
	Status TrafficDistributionGroupStatus

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Information about traffic distribution groups.
type TrafficDistributionGroupSummary struct {

	// The Amazon Resource Name (ARN) of the traffic distribution group.
	Arn *string

	// The identifier of the traffic distribution group. This can be the ID or the ARN
	// if the API is being called in the Region where the traffic distribution group
	// was created. The ARN must be provided if the call is from the replicated Region.
	Id *string

	// The Amazon Resource Name (ARN) of the traffic distribution group.
	InstanceArn *string

	// Whether this is the default traffic distribution group created during instance
	// replication. The default traffic distribution group cannot be deleted by the
	// DeleteTrafficDistributionGroup API. The default traffic distribution group is
	// deleted as part of the process for deleting a replica.
	IsDefault bool

	// The name of the traffic distribution group.
	Name *string

	// The status of the traffic distribution group.
	//   - CREATION_IN_PROGRESS means the previous CreateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateTrafficDistributionGroup.html)
	//   operation is still in progress and has not yet completed.
	//   - ACTIVE means the previous CreateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateTrafficDistributionGroup.html)
	//   operation has succeeded.
	//   - CREATION_FAILED indicates that the previous CreateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateTrafficDistributionGroup.html)
	//   operation has failed.
	//   - PENDING_DELETION means the previous DeleteTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_DeleteTrafficDistributionGroup.html)
	//   operation is still in progress and has not yet completed.
	//   - DELETION_FAILED means the previous DeleteTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_DeleteTrafficDistributionGroup.html)
	//   operation has failed.
	//   - UPDATE_IN_PROGRESS means the previous UpdateTrafficDistributionGroup (https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateTrafficDistributionGroup.html)
	//   operation is still in progress and has not yet completed.
	Status TrafficDistributionGroupStatus

	noSmithyDocumentSerde
}

// Summary information about a traffic distribution group user.
type TrafficDistributionGroupUserSummary struct {

	// The identifier for the user. This can be the ID or the ARN of the user.
	UserId *string

	noSmithyDocumentSerde
}

// Configuration information for the chat participant role.
//
// The following types satisfy this interface:
//
//	UpdateParticipantRoleConfigChannelInfoMemberChat
type UpdateParticipantRoleConfigChannelInfo interface {
	isUpdateParticipantRoleConfigChannelInfo()
}

// Configuration information for the chat participant role.
type UpdateParticipantRoleConfigChannelInfoMemberChat struct {
	Value ChatParticipantRoleConfig

	noSmithyDocumentSerde
}

func (*UpdateParticipantRoleConfigChannelInfoMemberChat) isUpdateParticipantRoleConfigChannelInfo() {}

// The URL reference.
type UrlReference struct {

	// Identifier of the URL reference.
	Name *string

	// A valid URL.
	Value *string

	noSmithyDocumentSerde
}

// Contains the use case.
type UseCase struct {

	// The Amazon Resource Name (ARN) for the use case.
	UseCaseArn *string

	// The identifier for the use case.
	UseCaseId *string

	// The type of use case to associate to the integration association. Each
	// integration association can have only one of each use case type.
	UseCaseType UseCaseType

	noSmithyDocumentSerde
}

// Contains information about a user account for an Amazon Connect instance.
type User struct {

	// The Amazon Resource Name (ARN) of the user account.
	Arn *string

	// The identifier of the user account in the directory used for identity
	// management.
	DirectoryUserId *string

	// The identifier of the hierarchy group for the user.
	HierarchyGroupId *string

	// The identifier of the user account.
	Id *string

	// Information about the user identity.
	IdentityInfo *UserIdentityInfo

	// Information about the phone configuration for the user.
	PhoneConfig *UserPhoneConfig

	// The identifier of the routing profile for the user.
	RoutingProfileId *string

	// The identifiers of the security profiles for the user.
	SecurityProfileIds []string

	// The tags.
	Tags map[string]string

	// The user name assigned to the user account.
	Username *string

	noSmithyDocumentSerde
}

// Data for a user.
type UserData struct {

	// A map of active slots by channel. The key is a channel name. The value is an
	// integer: the number of active slots.
	ActiveSlotsByChannel map[string]int32

	// A map of available slots by channel. The key is a channel name. The value is an
	// integer: the available number of slots.
	AvailableSlotsByChannel map[string]int32

	// A list of contact reference information.
	Contacts []AgentContactReference

	// Contains information about the levels of a hierarchy group assigned to a user.
	HierarchyPath *HierarchyPathReference

	// A map of maximum slots by channel. The key is a channel name. The value is an
	// integer: the maximum number of slots. This is calculated from MediaConcurrency (https://docs.aws.amazon.com/connect/latest/APIReference/API_MediaConcurrency.html)
	// of the RoutingProfile assigned to the agent.
	MaxSlotsByChannel map[string]int32

	// The Next status of the agent.
	NextStatus *string

	// Information about the routing profile that is assigned to the user.
	RoutingProfile *RoutingProfileReference

	// The status of the agent that they manually set in their Contact Control Panel
	// (CCP), or that the supervisor manually changes in the real-time metrics report.
	Status *AgentStatusReference

	// Information about the user for the data that is returned. It contains the
	// resourceId and ARN of the user.
	User *UserReference

	noSmithyDocumentSerde
}

// A filter for the user data.
type UserDataFilters struct {

	// A list of up to 100 agent IDs or ARNs.
	Agents []string

	// A filter for the user data based on the contact information that is associated
	// to the user. It contains a list of contact states.
	ContactFilter *ContactFilter

	// A list of up to 100 queues or ARNs.
	Queues []string

	// A list of up to 100 routing profile IDs or ARNs.
	RoutingProfiles []string

	// A UserHierarchyGroup ID or ARN.
	UserHierarchyGroups []string

	noSmithyDocumentSerde
}

// Contains information about the identity of a user.
type UserIdentityInfo struct {

	// The email address. If you are using SAML for identity management and include
	// this parameter, an error is returned.
	Email *string

	// The first name. This is required if you are using Amazon Connect or SAML for
	// identity management.
	FirstName *string

	// The last name. This is required if you are using Amazon Connect or SAML for
	// identity management.
	LastName *string

	// The user's mobile number.
	Mobile *string

	// The user's secondary email address. If you provide a secondary email, the user
	// receives email notifications - other than password reset notifications - to this
	// email address instead of to their primary email address. Pattern:
	// (?=^.{0,265}$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}
	SecondaryEmail *string

	noSmithyDocumentSerde
}

// The user's first name and last name.
type UserIdentityInfoLite struct {

	// The user's first name.
	FirstName *string

	// The user's last name.
	LastName *string

	noSmithyDocumentSerde
}

// Contains information about the phone configuration settings for a user.
type UserPhoneConfig struct {

	// The phone type.
	//
	// This member is required.
	PhoneType PhoneType

	// The After Call Work (ACW) timeout setting, in seconds. When returned by a
	// SearchUsers call, AfterContactWorkTimeLimit is returned in milliseconds.
	AfterContactWorkTimeLimit int32

	// The Auto accept setting.
	AutoAccept bool

	// The phone number for the user's desk phone.
	DeskPhoneNumber *string

	noSmithyDocumentSerde
}

// Contains information about the quick connect configuration settings for a user.
// The contact flow must be of type Transfer to Agent.
type UserQuickConnectConfig struct {

	// The identifier of the flow.
	//
	// This member is required.
	ContactFlowId *string

	// The identifier of the user.
	//
	// This member is required.
	UserId *string

	noSmithyDocumentSerde
}

// Information about the user.
type UserReference struct {

	// The Amazon Resource Name (ARN) for the user.
	Arn *string

	// The unique identifier for the user.
	Id *string

	noSmithyDocumentSerde
}

// The search criteria to be used to return users. The name and description fields
// support "contains" queries with a minimum of 2 characters and a maximum of 25
// characters. Any queries with character lengths outside of this range will throw
// invalid results.
type UserSearchCriteria struct {

	// A list of conditions which would be applied together with an AND condition.
	AndConditions []UserSearchCriteria

	// A leaf node condition which can be used to specify a hierarchy group condition.
	HierarchyGroupCondition *HierarchyGroupCondition

	// A list of conditions which would be applied together with an OR condition.
	OrConditions []UserSearchCriteria

	// A leaf node condition which can be used to specify a string condition. The
	// currently supported values for FieldName are name , description , and resourceID
	// .
	StringCondition *StringCondition

	noSmithyDocumentSerde
}

// Filters to be applied to search results.
type UserSearchFilter struct {

	// An object that can be used to specify Tag conditions inside the SearchFilter .
	// This accepts an OR of AND (List of List) input where:
	//   - Top level list specifies conditions that need to be applied with OR operator
	//   - Inner list specifies conditions that need to be applied with AND operator.
	TagFilter *ControlPlaneTagFilter

	noSmithyDocumentSerde
}

// Information about the returned users.
type UserSearchSummary struct {

	// The Amazon Resource Name (ARN) of the user.
	Arn *string

	// The directory identifier of the user.
	DirectoryUserId *string

	// The identifier of the user's hierarchy group.
	HierarchyGroupId *string

	// The identifier of the user's summary.
	Id *string

	// The user's first name and last name.
	IdentityInfo *UserIdentityInfoLite

	// Contains information about the phone configuration settings for a user.
	PhoneConfig *UserPhoneConfig

	// The identifier of the user's routing profile.
	RoutingProfileId *string

	// The identifiers of the user's security profiles.
	SecurityProfileIds []string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	// The name of the user.
	Username *string

	noSmithyDocumentSerde
}

// Contains summary information about a user.
type UserSummary struct {

	// The Amazon Resource Name (ARN) of the user account.
	Arn *string

	// The identifier of the user account.
	Id *string

	// The Amazon Connect user name of the user account.
	Username *string

	noSmithyDocumentSerde
}

// Contains information about a custom vocabulary.
type Vocabulary struct {

	// The Amazon Resource Name (ARN) of the custom vocabulary.
	//
	// This member is required.
	Arn *string

	// The identifier of the custom vocabulary.
	//
	// This member is required.
	Id *string

	// The language code of the vocabulary entries. For a list of languages and their
	// corresponding language codes, see What is Amazon Transcribe? (https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html)
	//
	// This member is required.
	LanguageCode VocabularyLanguageCode

	// The timestamp when the custom vocabulary was last modified.
	//
	// This member is required.
	LastModifiedTime *time.Time

	// A unique name of the custom vocabulary.
	//
	// This member is required.
	Name *string

	// The current state of the custom vocabulary.
	//
	// This member is required.
	State VocabularyState

	// The content of the custom vocabulary in plain-text format with a table of
	// values. Each row in the table represents a word or a phrase, described with
	// Phrase , IPA , SoundsLike , and DisplayAs fields. Separate the fields with TAB
	// characters. For more information, see Create a custom vocabulary using a table (https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html#create-vocabulary-table)
	// .
	Content *string

	// The reason why the custom vocabulary was not created.
	FailureReason *string

	// The tags used to organize, track, or control access for this resource. For
	// example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags map[string]string

	noSmithyDocumentSerde
}

// Contains summary information about the custom vocabulary.
type VocabularySummary struct {

	// The Amazon Resource Name (ARN) of the custom vocabulary.
	//
	// This member is required.
	Arn *string

	// The identifier of the custom vocabulary.
	//
	// This member is required.
	Id *string

	// The language code of the vocabulary entries. For a list of languages and their
	// corresponding language codes, see What is Amazon Transcribe? (https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html)
	//
	// This member is required.
	LanguageCode VocabularyLanguageCode

	// The timestamp when the custom vocabulary was last modified.
	//
	// This member is required.
	LastModifiedTime *time.Time

	// A unique name of the custom vocabulary.
	//
	// This member is required.
	Name *string

	// The current state of the custom vocabulary.
	//
	// This member is required.
	State VocabularyState

	// The reason why the custom vocabulary was not created.
	FailureReason *string

	noSmithyDocumentSerde
}

// Contains information about the recording configuration settings.
type VoiceRecordingConfiguration struct {

	// Identifies which track is being recorded.
	VoiceRecordingTrack VoiceRecordingTrack

	noSmithyDocumentSerde
}

// Information about Amazon Connect Wisdom.
type WisdomInfo struct {

	// The Amazon Resource Name (ARN) of the Wisdom session.
	SessionArn *string

	noSmithyDocumentSerde
}

type noSmithyDocumentSerde = smithydocument.NoSerde

// UnknownUnionMember is returned when a union member is returned over the wire,
// but has an unknown tag.
type UnknownUnionMember struct {
	Tag   string
	Value []byte

	noSmithyDocumentSerde
}

func (*UnknownUnionMember) isEvaluationAnswerData()                               {}
func (*UnknownUnionMember) isEvaluationFormItem()                                 {}
func (*UnknownUnionMember) isEvaluationFormNumericQuestionAutomation()            {}
func (*UnknownUnionMember) isEvaluationFormQuestionTypeProperties()               {}
func (*UnknownUnionMember) isEvaluationFormSingleSelectQuestionAutomationOption() {}
func (*UnknownUnionMember) isParticipantTimerValue()                              {}
func (*UnknownUnionMember) isReferenceSummary()                                   {}
func (*UnknownUnionMember) isUpdateParticipantRoleConfigChannelInfo()             {}
