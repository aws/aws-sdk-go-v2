// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package connect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect/types"
)

const opGetMetricData = "GetMetricData"

// GetMetricDataRequest returns a request value for making API operation for
// Amazon Connect Service.
//
// Gets historical metric data from the specified Amazon Connect instance.
//
// For more information, see Historical Metrics Reports (https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics.html)
// in the Amazon Connect Administrator Guide.
//
//    // Example sending a request using GetMetricDataRequest.
//    req := client.GetMetricDataRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/GetMetricData
func (c *Client) GetMetricDataRequest(input *types.GetMetricDataInput) GetMetricDataRequest {
	op := &aws.Operation{
		Name:       opGetMetricData,
		HTTPMethod: "POST",
		HTTPPath:   "/metrics/historical/{InstanceId}",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetMetricDataInput{}
	}

	req := c.newRequest(op, input, &types.GetMetricDataOutput{})
	return GetMetricDataRequest{Request: req, Input: input, Copy: c.GetMetricDataRequest}
}

// GetMetricDataRequest is the request type for the
// GetMetricData API operation.
type GetMetricDataRequest struct {
	*aws.Request
	Input *types.GetMetricDataInput
	Copy  func(*types.GetMetricDataInput) GetMetricDataRequest
}

// Send marshals and sends the GetMetricData API request.
func (r GetMetricDataRequest) Send(ctx context.Context) (*GetMetricDataResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetMetricDataResponse{
		GetMetricDataOutput: r.Request.Data.(*types.GetMetricDataOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetMetricDataRequestPaginator returns a paginator for GetMetricData.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetMetricDataRequest(input)
//   p := connect.NewGetMetricDataRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetMetricDataPaginator(req GetMetricDataRequest) GetMetricDataPaginator {
	return GetMetricDataPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetMetricDataInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetMetricDataPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetMetricDataPaginator struct {
	aws.Pager
}

func (p *GetMetricDataPaginator) CurrentPage() *types.GetMetricDataOutput {
	return p.Pager.CurrentPage().(*types.GetMetricDataOutput)
}

// GetMetricDataResponse is the response type for the
// GetMetricData API operation.
type GetMetricDataResponse struct {
	*types.GetMetricDataOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetMetricData request.
func (r *GetMetricDataResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
