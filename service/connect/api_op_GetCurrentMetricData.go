// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package connect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect/types"
)

const opGetCurrentMetricData = "GetCurrentMetricData"

// GetCurrentMetricDataRequest returns a request value for making API operation for
// Amazon Connect Service.
//
// Gets the real-time metric data from the specified Amazon Connect instance.
//
// For more information, see Real-time Metrics Reports (https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-reports.html)
// in the Amazon Connect Administrator Guide.
//
//    // Example sending a request using GetCurrentMetricDataRequest.
//    req := client.GetCurrentMetricDataRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/GetCurrentMetricData
func (c *Client) GetCurrentMetricDataRequest(input *types.GetCurrentMetricDataInput) GetCurrentMetricDataRequest {
	op := &aws.Operation{
		Name:       opGetCurrentMetricData,
		HTTPMethod: "POST",
		HTTPPath:   "/metrics/current/{InstanceId}",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.GetCurrentMetricDataInput{}
	}

	req := c.newRequest(op, input, &types.GetCurrentMetricDataOutput{})
	return GetCurrentMetricDataRequest{Request: req, Input: input, Copy: c.GetCurrentMetricDataRequest}
}

// GetCurrentMetricDataRequest is the request type for the
// GetCurrentMetricData API operation.
type GetCurrentMetricDataRequest struct {
	*aws.Request
	Input *types.GetCurrentMetricDataInput
	Copy  func(*types.GetCurrentMetricDataInput) GetCurrentMetricDataRequest
}

// Send marshals and sends the GetCurrentMetricData API request.
func (r GetCurrentMetricDataRequest) Send(ctx context.Context) (*GetCurrentMetricDataResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetCurrentMetricDataResponse{
		GetCurrentMetricDataOutput: r.Request.Data.(*types.GetCurrentMetricDataOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewGetCurrentMetricDataRequestPaginator returns a paginator for GetCurrentMetricData.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.GetCurrentMetricDataRequest(input)
//   p := connect.NewGetCurrentMetricDataRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewGetCurrentMetricDataPaginator(req GetCurrentMetricDataRequest) GetCurrentMetricDataPaginator {
	return GetCurrentMetricDataPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.GetCurrentMetricDataInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// GetCurrentMetricDataPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type GetCurrentMetricDataPaginator struct {
	aws.Pager
}

func (p *GetCurrentMetricDataPaginator) CurrentPage() *types.GetCurrentMetricDataOutput {
	return p.Pager.CurrentPage().(*types.GetCurrentMetricDataOutput)
}

// GetCurrentMetricDataResponse is the response type for the
// GetCurrentMetricData API operation.
type GetCurrentMetricDataResponse struct {
	*types.GetCurrentMetricDataOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetCurrentMetricData request.
func (r *GetCurrentMetricDataResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
