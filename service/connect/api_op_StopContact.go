// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package connect

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect/types"
)

const opStopContact = "StopContact"

// StopContactRequest returns a request value for making API operation for
// Amazon Connect Service.
//
// Ends the specified contact.
//
//    // Example sending a request using StopContactRequest.
//    req := client.StopContactRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/StopContact
func (c *Client) StopContactRequest(input *types.StopContactInput) StopContactRequest {
	op := &aws.Operation{
		Name:       opStopContact,
		HTTPMethod: "POST",
		HTTPPath:   "/contact/stop",
	}

	if input == nil {
		input = &types.StopContactInput{}
	}

	req := c.newRequest(op, input, &types.StopContactOutput{})
	return StopContactRequest{Request: req, Input: input, Copy: c.StopContactRequest}
}

// StopContactRequest is the request type for the
// StopContact API operation.
type StopContactRequest struct {
	*aws.Request
	Input *types.StopContactInput
	Copy  func(*types.StopContactInput) StopContactRequest
}

// Send marshals and sends the StopContact API request.
func (r StopContactRequest) Send(ctx context.Context) (*StopContactResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StopContactResponse{
		StopContactOutput: r.Request.Data.(*types.StopContactOutput),
		response:          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StopContactResponse is the response type for the
// StopContact API operation.
type StopContactResponse struct {
	*types.StopContactOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StopContact request.
func (r *StopContactResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
