// Code generated by smithy-go-codegen DO NOT EDIT.

package ecr

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves the results of the lifecycle policy preview request for the specified
// repository.
func (c *Client) GetLifecyclePolicyPreview(ctx context.Context, params *GetLifecyclePolicyPreviewInput, optFns ...func(*Options)) (*GetLifecyclePolicyPreviewOutput, error) {
	if params == nil {
		params = &GetLifecyclePolicyPreviewInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GetLifecyclePolicyPreview", params, optFns, addOperationGetLifecyclePolicyPreviewMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GetLifecyclePolicyPreviewOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetLifecyclePolicyPreviewInput struct {

	// The name of the repository.
	//
	// This member is required.
	RepositoryName *string

	// An optional parameter that filters results based on image tag status and all
	// tags, if tagged.
	Filter *types.LifecyclePolicyPreviewFilter

	// The list of imageIDs to be included.
	ImageIds []*types.ImageIdentifier

	// The maximum number of repository results returned by
	// GetLifecyclePolicyPreviewRequest in  paginated output. When this parameter is
	// used, GetLifecyclePolicyPreviewRequest only returns  maxResults results in a
	// single page along with a nextToken  response element. The remaining results of
	// the initial request can be seen by sending  another
	// GetLifecyclePolicyPreviewRequest request with the returned nextToken  value.
	// This value can be between 1 and 1000. If this  parameter is not used, then
	// GetLifecyclePolicyPreviewRequest returns up to  100 results and a nextToken
	// value, if  applicable. This option cannot be used when you specify images with
	// imageIds.
	MaxResults *int32

	// The nextToken value returned from a previous paginated
	// GetLifecyclePolicyPreviewRequest request where maxResults was used and the
	// results exceeded the value of that parameter. Pagination continues from the end
	// of the  previous results that returned the nextToken value. This value is  null
	// when there are no more results to return. This option cannot be used when you
	// specify images with imageIds.
	NextToken *string

	// The AWS account ID associated with the registry that contains the repository. If
	// you do not specify a registry, the default registry is assumed.
	RegistryId *string
}

type GetLifecyclePolicyPreviewOutput struct {

	// The JSON lifecycle policy text.
	LifecyclePolicyText *string

	// The nextToken value to include in a future GetLifecyclePolicyPreview request.
	// When the results of a GetLifecyclePolicyPreview request exceed maxResults, this
	// value can be used to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken *string

	// The results of the lifecycle policy preview request.
	PreviewResults []*types.LifecyclePolicyPreviewResult

	// The registry ID associated with the request.
	RegistryId *string

	// The repository name associated with the request.
	RepositoryName *string

	// The status of the lifecycle policy preview request.
	Status types.LifecyclePolicyPreviewStatus

	// The list of images that is returned as a result of the action.
	Summary *types.LifecyclePolicyPreviewSummary

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationGetLifecyclePolicyPreviewMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpGetLifecyclePolicyPreview{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetLifecyclePolicyPreview{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpGetLifecyclePolicyPreviewValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opGetLifecyclePolicyPreview(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opGetLifecyclePolicyPreview(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ecr",
		OperationName: "GetLifecyclePolicyPreview",
	}
}
