// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecr

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
)

const opListImages = "ListImages"

// ListImagesRequest returns a request value for making API operation for
// Amazon EC2 Container Registry.
//
// Lists all the image IDs for a given repository.
//
// You can filter images based on whether or not they are tagged by setting
// the tagStatus parameter to TAGGED or UNTAGGED. For example, you can filter
// your results to return only UNTAGGED images and then pipe that result to
// a BatchDeleteImage operation to delete them. Or, you can filter your results
// to return only TAGGED images to list all of the tags in your repository.
//
//    // Example sending a request using ListImagesRequest.
//    req := client.ListImagesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListImages
func (c *Client) ListImagesRequest(input *types.ListImagesInput) ListImagesRequest {
	op := &aws.Operation{
		Name:       opListImages,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListImagesInput{}
	}

	req := c.newRequest(op, input, &types.ListImagesOutput{})
	return ListImagesRequest{Request: req, Input: input, Copy: c.ListImagesRequest}
}

// ListImagesRequest is the request type for the
// ListImages API operation.
type ListImagesRequest struct {
	*aws.Request
	Input *types.ListImagesInput
	Copy  func(*types.ListImagesInput) ListImagesRequest
}

// Send marshals and sends the ListImages API request.
func (r ListImagesRequest) Send(ctx context.Context) (*ListImagesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListImagesResponse{
		ListImagesOutput: r.Request.Data.(*types.ListImagesOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListImagesRequestPaginator returns a paginator for ListImages.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListImagesRequest(input)
//   p := ecr.NewListImagesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListImagesPaginator(req ListImagesRequest) ListImagesPaginator {
	return ListImagesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListImagesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListImagesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListImagesPaginator struct {
	aws.Pager
}

func (p *ListImagesPaginator) CurrentPage() *types.ListImagesOutput {
	return p.Pager.CurrentPage().(*types.ListImagesOutput)
}

// ListImagesResponse is the response type for the
// ListImages API operation.
type ListImagesResponse struct {
	*types.ListImagesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListImages request.
func (r *ListImagesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
