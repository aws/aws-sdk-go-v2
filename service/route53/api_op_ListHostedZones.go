// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

const opListHostedZones = "ListHostedZones"

// ListHostedZonesRequest returns a request value for making API operation for
// Amazon Route 53.
//
// Retrieves a list of the public and private hosted zones that are associated
// with the current AWS account. The response includes a HostedZones child element
// for each hosted zone.
//
// Amazon Route 53 returns a maximum of 100 items in each response. If you have
// a lot of hosted zones, you can use the maxitems parameter to list them in
// groups of up to 100.
//
//    // Example sending a request using ListHostedZonesRequest.
//    req := client.ListHostedZonesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZones
func (c *Client) ListHostedZonesRequest(input *types.ListHostedZonesInput) ListHostedZonesRequest {
	op := &aws.Operation{
		Name:       opListHostedZones,
		HTTPMethod: "GET",
		HTTPPath:   "/2013-04-01/hostedzone",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextMarker"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListHostedZonesInput{}
	}

	req := c.newRequest(op, input, &types.ListHostedZonesOutput{})
	return ListHostedZonesRequest{Request: req, Input: input, Copy: c.ListHostedZonesRequest}
}

// ListHostedZonesRequest is the request type for the
// ListHostedZones API operation.
type ListHostedZonesRequest struct {
	*aws.Request
	Input *types.ListHostedZonesInput
	Copy  func(*types.ListHostedZonesInput) ListHostedZonesRequest
}

// Send marshals and sends the ListHostedZones API request.
func (r ListHostedZonesRequest) Send(ctx context.Context) (*ListHostedZonesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListHostedZonesResponse{
		ListHostedZonesOutput: r.Request.Data.(*types.ListHostedZonesOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListHostedZonesRequestPaginator returns a paginator for ListHostedZones.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListHostedZonesRequest(input)
//   p := route53.NewListHostedZonesRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListHostedZonesPaginator(req ListHostedZonesRequest) ListHostedZonesPaginator {
	return ListHostedZonesPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListHostedZonesInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListHostedZonesPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListHostedZonesPaginator struct {
	aws.Pager
}

func (p *ListHostedZonesPaginator) CurrentPage() *types.ListHostedZonesOutput {
	return p.Pager.CurrentPage().(*types.ListHostedZonesOutput)
}

// ListHostedZonesResponse is the response type for the
// ListHostedZones API operation.
type ListHostedZonesResponse struct {
	*types.ListHostedZonesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListHostedZones request.
func (r *ListHostedZonesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
