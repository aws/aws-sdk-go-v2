// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

const opGetReusableDelegationSetLimit = "GetReusableDelegationSetLimit"

// GetReusableDelegationSetLimitRequest returns a request value for making API operation for
// Amazon Route 53.
//
// Gets the maximum number of hosted zones that you can associate with the specified
// reusable delegation set.
//
// For the default limit, see Limits (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html)
// in the Amazon Route 53 Developer Guide. To request a higher limit, open a
// case (https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase&limitType=service-code-route53).
//
//    // Example sending a request using GetReusableDelegationSetLimitRequest.
//    req := client.GetReusableDelegationSetLimitRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetReusableDelegationSetLimit
func (c *Client) GetReusableDelegationSetLimitRequest(input *types.GetReusableDelegationSetLimitInput) GetReusableDelegationSetLimitRequest {
	op := &aws.Operation{
		Name:       opGetReusableDelegationSetLimit,
		HTTPMethod: "GET",
		HTTPPath:   "/2013-04-01/reusabledelegationsetlimit/{Id}/{Type}",
	}

	if input == nil {
		input = &types.GetReusableDelegationSetLimitInput{}
	}

	req := c.newRequest(op, input, &types.GetReusableDelegationSetLimitOutput{})
	return GetReusableDelegationSetLimitRequest{Request: req, Input: input, Copy: c.GetReusableDelegationSetLimitRequest}
}

// GetReusableDelegationSetLimitRequest is the request type for the
// GetReusableDelegationSetLimit API operation.
type GetReusableDelegationSetLimitRequest struct {
	*aws.Request
	Input *types.GetReusableDelegationSetLimitInput
	Copy  func(*types.GetReusableDelegationSetLimitInput) GetReusableDelegationSetLimitRequest
}

// Send marshals and sends the GetReusableDelegationSetLimit API request.
func (r GetReusableDelegationSetLimitRequest) Send(ctx context.Context) (*GetReusableDelegationSetLimitResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetReusableDelegationSetLimitResponse{
		GetReusableDelegationSetLimitOutput: r.Request.Data.(*types.GetReusableDelegationSetLimitOutput),
		response:                            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetReusableDelegationSetLimitResponse is the response type for the
// GetReusableDelegationSetLimit API operation.
type GetReusableDelegationSetLimitResponse struct {
	*types.GetReusableDelegationSetLimitOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetReusableDelegationSetLimit request.
func (r *GetReusableDelegationSetLimitResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
