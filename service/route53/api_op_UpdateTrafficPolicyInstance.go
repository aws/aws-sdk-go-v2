// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

const opUpdateTrafficPolicyInstance = "UpdateTrafficPolicyInstance"

// UpdateTrafficPolicyInstanceRequest returns a request value for making API operation for
// Amazon Route 53.
//
// Updates the resource record sets in a specified hosted zone that were created
// based on the settings in a specified traffic policy version.
//
// When you update a traffic policy instance, Amazon Route 53 continues to respond
// to DNS queries for the root resource record set name (such as example.com)
// while it replaces one group of resource record sets with another. Route 53
// performs the following operations:
//
// Route 53 creates a new group of resource record sets based on the specified
// traffic policy. This is true regardless of how significant the differences
// are between the existing resource record sets and the new resource record
// sets.
//
// When all of the new resource record sets have been created, Route 53 starts
// to respond to DNS queries for the root resource record set name (such as
// example.com) by using the new resource record sets.
//
// Route 53 deletes the old group of resource record sets that are associated
// with the root resource record set name.
//
//    // Example sending a request using UpdateTrafficPolicyInstanceRequest.
//    req := client.UpdateTrafficPolicyInstanceRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyInstance
func (c *Client) UpdateTrafficPolicyInstanceRequest(input *types.UpdateTrafficPolicyInstanceInput) UpdateTrafficPolicyInstanceRequest {
	op := &aws.Operation{
		Name:       opUpdateTrafficPolicyInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/2013-04-01/trafficpolicyinstance/{Id}",
	}

	if input == nil {
		input = &types.UpdateTrafficPolicyInstanceInput{}
	}

	req := c.newRequest(op, input, &types.UpdateTrafficPolicyInstanceOutput{})
	return UpdateTrafficPolicyInstanceRequest{Request: req, Input: input, Copy: c.UpdateTrafficPolicyInstanceRequest}
}

// UpdateTrafficPolicyInstanceRequest is the request type for the
// UpdateTrafficPolicyInstance API operation.
type UpdateTrafficPolicyInstanceRequest struct {
	*aws.Request
	Input *types.UpdateTrafficPolicyInstanceInput
	Copy  func(*types.UpdateTrafficPolicyInstanceInput) UpdateTrafficPolicyInstanceRequest
}

// Send marshals and sends the UpdateTrafficPolicyInstance API request.
func (r UpdateTrafficPolicyInstanceRequest) Send(ctx context.Context) (*UpdateTrafficPolicyInstanceResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateTrafficPolicyInstanceResponse{
		UpdateTrafficPolicyInstanceOutput: r.Request.Data.(*types.UpdateTrafficPolicyInstanceOutput),
		response:                          &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateTrafficPolicyInstanceResponse is the response type for the
// UpdateTrafficPolicyInstance API operation.
type UpdateTrafficPolicyInstanceResponse struct {
	*types.UpdateTrafficPolicyInstanceOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateTrafficPolicyInstance request.
func (r *UpdateTrafficPolicyInstanceResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
