// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

const opGetGeoLocation = "GetGeoLocation"

// GetGeoLocationRequest returns a request value for making API operation for
// Amazon Route 53.
//
// Gets information about whether a specified geographic location is supported
// for Amazon Route 53 geolocation resource record sets.
//
// Use the following syntax to determine whether a continent is supported for
// geolocation:
//
// GET /2013-04-01/geolocation?continentcode=two-letter abbreviation for a continent
//
// Use the following syntax to determine whether a country is supported for
// geolocation:
//
// GET /2013-04-01/geolocation?countrycode=two-character country code
//
// Use the following syntax to determine whether a subdivision of a country
// is supported for geolocation:
//
// GET /2013-04-01/geolocation?countrycode=two-character country code&subdivisioncode=subdivision
// code
//
//    // Example sending a request using GetGeoLocationRequest.
//    req := client.GetGeoLocationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetGeoLocation
func (c *Client) GetGeoLocationRequest(input *types.GetGeoLocationInput) GetGeoLocationRequest {
	op := &aws.Operation{
		Name:       opGetGeoLocation,
		HTTPMethod: "GET",
		HTTPPath:   "/2013-04-01/geolocation",
	}

	if input == nil {
		input = &types.GetGeoLocationInput{}
	}

	req := c.newRequest(op, input, &types.GetGeoLocationOutput{})
	return GetGeoLocationRequest{Request: req, Input: input, Copy: c.GetGeoLocationRequest}
}

// GetGeoLocationRequest is the request type for the
// GetGeoLocation API operation.
type GetGeoLocationRequest struct {
	*aws.Request
	Input *types.GetGeoLocationInput
	Copy  func(*types.GetGeoLocationInput) GetGeoLocationRequest
}

// Send marshals and sends the GetGeoLocation API request.
func (r GetGeoLocationRequest) Send(ctx context.Context) (*GetGeoLocationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &GetGeoLocationResponse{
		GetGeoLocationOutput: r.Request.Data.(*types.GetGeoLocationOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// GetGeoLocationResponse is the response type for the
// GetGeoLocation API operation.
type GetGeoLocationResponse struct {
	*types.GetGeoLocationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// GetGeoLocation request.
func (r *GetGeoLocationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
