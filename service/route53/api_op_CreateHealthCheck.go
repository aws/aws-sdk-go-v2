// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

const opCreateHealthCheck = "CreateHealthCheck"

// CreateHealthCheckRequest returns a request value for making API operation for
// Amazon Route 53.
//
// Creates a new health check.
//
// For information about adding health checks to resource record sets, see HealthCheckId
// (https://docs.aws.amazon.com/Route53/latest/APIReference/API_ResourceRecordSet.html#Route53-Type-ResourceRecordSet-HealthCheckId)
// in ChangeResourceRecordSets (https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html).
//
// ELB Load Balancers
//
// If you're registering EC2 instances with an Elastic Load Balancing (ELB)
// load balancer, do not create Amazon Route 53 health checks for the EC2 instances.
// When you register an EC2 instance with a load balancer, you configure settings
// for an ELB health check, which performs a similar function to a Route 53
// health check.
//
// Private Hosted Zones
//
// You can associate health checks with failover resource record sets in a private
// hosted zone. Note the following:
//
//    * Route 53 health checkers are outside the VPC. To check the health of
//    an endpoint within a VPC by IP address, you must assign a public IP address
//    to the instance in the VPC.
//
//    * You can configure a health checker to check the health of an external
//    resource that the instance relies on, such as a database server.
//
//    * You can create a CloudWatch metric, associate an alarm with the metric,
//    and then create a health check that is based on the state of the alarm.
//    For example, you might create a CloudWatch metric that checks the status
//    of the Amazon EC2 StatusCheckFailed metric, add an alarm to the metric,
//    and then create a health check that is based on the state of the alarm.
//    For information about creating CloudWatch metrics and alarms by using
//    the CloudWatch console, see the Amazon CloudWatch User Guide (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatch.html).
//
//    // Example sending a request using CreateHealthCheckRequest.
//    req := client.CreateHealthCheckRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHealthCheck
func (c *Client) CreateHealthCheckRequest(input *types.CreateHealthCheckInput) CreateHealthCheckRequest {
	op := &aws.Operation{
		Name:       opCreateHealthCheck,
		HTTPMethod: "POST",
		HTTPPath:   "/2013-04-01/healthcheck",
	}

	if input == nil {
		input = &types.CreateHealthCheckInput{}
	}

	req := c.newRequest(op, input, &types.CreateHealthCheckOutput{})
	return CreateHealthCheckRequest{Request: req, Input: input, Copy: c.CreateHealthCheckRequest}
}

// CreateHealthCheckRequest is the request type for the
// CreateHealthCheck API operation.
type CreateHealthCheckRequest struct {
	*aws.Request
	Input *types.CreateHealthCheckInput
	Copy  func(*types.CreateHealthCheckInput) CreateHealthCheckRequest
}

// Send marshals and sends the CreateHealthCheck API request.
func (r CreateHealthCheckRequest) Send(ctx context.Context) (*CreateHealthCheckResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateHealthCheckResponse{
		CreateHealthCheckOutput: r.Request.Data.(*types.CreateHealthCheckOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateHealthCheckResponse is the response type for the
// CreateHealthCheck API operation.
type CreateHealthCheckResponse struct {
	*types.CreateHealthCheckOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateHealthCheck request.
func (r *CreateHealthCheckResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
