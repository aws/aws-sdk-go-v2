// Code generated by smithy-go-codegen DO NOT EDIT.

package route53

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets information about the traffic policy instances that you created by using
// the current AWS account. After you submit an UpdateTrafficPolicyInstance
// request, there's a brief delay while Amazon Route 53 creates the resource record
// sets that are specified in the traffic policy definition. For more information,
// see the State response element. Route 53 returns a maximum of 100 items in each
// response. If you have a lot of traffic policy instances, you can use the
// MaxItems parameter to list them in groups of up to 100.
func (c *Client) ListTrafficPolicyInstances(ctx context.Context, params *ListTrafficPolicyInstancesInput, optFns ...func(*Options)) (*ListTrafficPolicyInstancesOutput, error) {
	stack := middleware.NewStack("ListTrafficPolicyInstances", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpListTrafficPolicyInstancesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListTrafficPolicyInstances(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListTrafficPolicyInstances",
			Err:           err,
		}
	}
	out := result.(*ListTrafficPolicyInstancesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to get information about the traffic policy instances that you created
// by using the current AWS account.
type ListTrafficPolicyInstancesInput struct {
	// The maximum number of traffic policy instances that you want Amazon Route 53 to
	// return in response to a ListTrafficPolicyInstances request. If you have more
	// than MaxItems traffic policy instances, the value of the IsTruncated element in
	// the response is true, and the values of HostedZoneIdMarker,
	// TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker represent
	// the first traffic policy instance in the next group of MaxItems traffic policy
	// instances.
	MaxItems *string
	// If the value of IsTruncated in the previous response was true, you have more
	// traffic policy instances. To get more traffic policy instances, submit another
	// ListTrafficPolicyInstances request. For the value of HostedZoneId, specify the
	// value of HostedZoneIdMarker from the previous response, which is the hosted zone
	// ID of the first traffic policy instance in the next group of traffic policy
	// instances. If the value of IsTruncated in the previous response was false, there
	// are no more traffic policy instances to get.
	HostedZoneIdMarker *string
	// If the value of IsTruncated in the previous response was true, you have more
	// traffic policy instances. To get more traffic policy instances, submit another
	// ListTrafficPolicyInstances request. For the value of trafficpolicyinstancetype,
	// specify the value of TrafficPolicyInstanceTypeMarker from the previous response,
	// which is the type of the first traffic policy instance in the next group of
	// traffic policy instances. If the value of IsTruncated in the previous response
	// was false, there are no more traffic policy instances to get.
	TrafficPolicyInstanceTypeMarker types.RRType
	// If the value of IsTruncated in the previous response was true, you have more
	// traffic policy instances. To get more traffic policy instances, submit another
	// ListTrafficPolicyInstances request. For the value of trafficpolicyinstancename,
	// specify the value of TrafficPolicyInstanceNameMarker from the previous response,
	// which is the name of the first traffic policy instance in the next group of
	// traffic policy instances. If the value of IsTruncated in the previous response
	// was false, there are no more traffic policy instances to get.
	TrafficPolicyInstanceNameMarker *string
}

// A complex type that contains the response information for the request.
type ListTrafficPolicyInstancesOutput struct {
	// If IsTruncated is true, TrafficPolicyInstanceNameMarker is the name of the first
	// traffic policy instance that Route 53 will return if you submit another
	// ListTrafficPolicyInstances request.
	TrafficPolicyInstanceNameMarker *string
	// A list that contains one TrafficPolicyInstance element for each traffic policy
	// instance that matches the elements in the request.
	TrafficPolicyInstances []*types.TrafficPolicyInstance
	// If IsTruncated is true, TrafficPolicyInstanceTypeMarker is the DNS type of the
	// resource record sets that are associated with the first traffic policy instance
	// that Amazon Route 53 will return if you submit another
	// ListTrafficPolicyInstances request.
	TrafficPolicyInstanceTypeMarker types.RRType
	// A flag that indicates whether there are more traffic policy instances to be
	// listed. If the response was truncated, you can get more traffic policy instances
	// by calling ListTrafficPolicyInstances again and specifying the values of the
	// HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and
	// TrafficPolicyInstanceTypeMarker in the corresponding request parameters.
	IsTruncated *bool
	// If IsTruncated is true, HostedZoneIdMarker is the ID of the hosted zone of the
	// first traffic policy instance that Route 53 will return if you submit another
	// ListTrafficPolicyInstances request.
	HostedZoneIdMarker *string
	// The value that you specified for the MaxItems parameter in the call to
	// ListTrafficPolicyInstances that produced the current response.
	MaxItems *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpListTrafficPolicyInstancesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpListTrafficPolicyInstances{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpListTrafficPolicyInstances{}, middleware.After)
}

func newServiceMetadataMiddleware_opListTrafficPolicyInstances(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "route53",
		OperationName: "ListTrafficPolicyInstances",
	}
}
