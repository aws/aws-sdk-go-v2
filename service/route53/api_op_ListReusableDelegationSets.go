// Code generated by smithy-go-codegen DO NOT EDIT.

package route53

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves a list of the reusable delegation sets that are associated with the
// current AWS account.
func (c *Client) ListReusableDelegationSets(ctx context.Context, params *ListReusableDelegationSetsInput, optFns ...func(*Options)) (*ListReusableDelegationSetsOutput, error) {
	stack := middleware.NewStack("ListReusableDelegationSets", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpListReusableDelegationSetsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListReusableDelegationSets(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListReusableDelegationSets",
			Err:           err,
		}
	}
	out := result.(*ListReusableDelegationSetsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to get a list of the reusable delegation sets that are associated with
// the current AWS account.
type ListReusableDelegationSetsInput struct {
	// If the value of IsTruncated in the previous response was true, you have more
	// reusable delegation sets. To get another group, submit another
	// ListReusableDelegationSets request. For the value of marker, specify the value
	// of NextMarker from the previous response, which is the ID of the first reusable
	// delegation set that Amazon Route 53 will return if you submit another request.
	// If the value of IsTruncated in the previous response was false, there are no
	// more reusable delegation sets to get.
	Marker *string
	// The number of reusable delegation sets that you want Amazon Route 53 to return
	// in the response to this request. If you specify a value greater than 100, Route
	// 53 returns only the first 100 reusable delegation sets.
	MaxItems *string
}

// A complex type that contains information about the reusable delegation sets that
// are associated with the current AWS account.
type ListReusableDelegationSetsOutput struct {
	// A complex type that contains one DelegationSet element for each reusable
	// delegation set that was created by the current AWS account.
	DelegationSets []*types.DelegationSet
	// For the second and subsequent calls to ListReusableDelegationSets, Marker is the
	// value that you specified for the marker parameter in the request that produced
	// the current response.
	Marker *string
	// If IsTruncated is true, the value of NextMarker identifies the next reusable
	// delegation set that Amazon Route 53 will return if you submit another
	// ListReusableDelegationSets request and specify the value of NextMarker in the
	// marker parameter.
	NextMarker *string
	// A flag that indicates whether there are more reusable delegation sets to be
	// listed.
	IsTruncated *bool
	// The value that you specified for the maxitems parameter in the call to
	// ListReusableDelegationSets that produced the current response.
	MaxItems *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpListReusableDelegationSetsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpListReusableDelegationSets{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpListReusableDelegationSets{}, middleware.After)
}

func newServiceMetadataMiddleware_opListReusableDelegationSets(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "route53",
		OperationName: "ListReusableDelegationSets",
	}
}
