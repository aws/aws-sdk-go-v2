// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

const opListResourceRecordSets = "ListResourceRecordSets"

// ListResourceRecordSetsRequest returns a request value for making API operation for
// Amazon Route 53.
//
// Lists the resource record sets in a specified hosted zone.
//
// ListResourceRecordSets returns up to 100 resource record sets at a time in
// ASCII order, beginning at a position specified by the name and type elements.
//
// Sort order
//
// ListResourceRecordSets sorts results first by DNS name with the labels reversed,
// for example:
//
// com.example.www.
//
// Note the trailing dot, which can change the sort order when the record name
// contains characters that appear before . (decimal 46) in the ASCII table.
// These characters include the following: ! " # $ % & ' ( ) * + , -
//
// When multiple records have the same DNS name, ListResourceRecordSets sorts
// results by the record type.
//
// Specifying where to start listing records
//
// You can use the name and type elements to specify the resource record set
// that the list begins with:
//
// If you do not specify Name or Type
//
// The results begin with the first resource record set that the hosted zone
// contains.
//
// If you specify Name but not Type
//
// The results begin with the first resource record set in the list whose name
// is greater than or equal to Name.
//
// If you specify Type but not Name
//
// Amazon Route 53 returns the InvalidInput error.
//
// If you specify both Name and Type
//
// The results begin with the first resource record set in the list whose name
// is greater than or equal to Name, and whose type is greater than or equal
// to Type.
//
// Resource record sets that are PENDING
//
// This action returns the most current version of the records. This includes
// records that are PENDING, and that are not yet available on all Route 53
// DNS servers.
//
// Changing resource record sets
//
// To ensure that you get an accurate listing of the resource record sets for
// a hosted zone at a point in time, do not submit a ChangeResourceRecordSets
// request while you're paging through the results of a ListResourceRecordSets
// request. If you do, some pages may display results without the latest changes
// while other pages display results with the latest changes.
//
// Displaying the next page of results
//
// If a ListResourceRecordSets command returns more than one page of results,
// the value of IsTruncated is true. To display the next page of results, get
// the values of NextRecordName, NextRecordType, and NextRecordIdentifier (if
// any) from the response. Then submit another ListResourceRecordSets request,
// and specify those values for StartRecordName, StartRecordType, and StartRecordIdentifier.
//
//    // Example sending a request using ListResourceRecordSetsRequest.
//    req := client.ListResourceRecordSetsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListResourceRecordSets
func (c *Client) ListResourceRecordSetsRequest(input *types.ListResourceRecordSetsInput) ListResourceRecordSetsRequest {
	op := &aws.Operation{
		Name:       opListResourceRecordSets,
		HTTPMethod: "GET",
		HTTPPath:   "/2013-04-01/hostedzone/{Id}/rrset",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"StartRecordName", "StartRecordType", "StartRecordIdentifier"},
			OutputTokens:    []string{"NextRecordName", "NextRecordType", "NextRecordIdentifier"},
			LimitToken:      "MaxItems",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListResourceRecordSetsInput{}
	}

	req := c.newRequest(op, input, &types.ListResourceRecordSetsOutput{})
	return ListResourceRecordSetsRequest{Request: req, Input: input, Copy: c.ListResourceRecordSetsRequest}
}

// ListResourceRecordSetsRequest is the request type for the
// ListResourceRecordSets API operation.
type ListResourceRecordSetsRequest struct {
	*aws.Request
	Input *types.ListResourceRecordSetsInput
	Copy  func(*types.ListResourceRecordSetsInput) ListResourceRecordSetsRequest
}

// Send marshals and sends the ListResourceRecordSets API request.
func (r ListResourceRecordSetsRequest) Send(ctx context.Context) (*ListResourceRecordSetsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListResourceRecordSetsResponse{
		ListResourceRecordSetsOutput: r.Request.Data.(*types.ListResourceRecordSetsOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListResourceRecordSetsRequestPaginator returns a paginator for ListResourceRecordSets.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListResourceRecordSetsRequest(input)
//   p := route53.NewListResourceRecordSetsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListResourceRecordSetsPaginator(req ListResourceRecordSetsRequest) ListResourceRecordSetsPaginator {
	return ListResourceRecordSetsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListResourceRecordSetsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListResourceRecordSetsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListResourceRecordSetsPaginator struct {
	aws.Pager
}

func (p *ListResourceRecordSetsPaginator) CurrentPage() *types.ListResourceRecordSetsOutput {
	return p.Pager.CurrentPage().(*types.ListResourceRecordSetsOutput)
}

// ListResourceRecordSetsResponse is the response type for the
// ListResourceRecordSets API operation.
type ListResourceRecordSetsResponse struct {
	*types.ListResourceRecordSetsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListResourceRecordSets request.
func (r *ListResourceRecordSetsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
