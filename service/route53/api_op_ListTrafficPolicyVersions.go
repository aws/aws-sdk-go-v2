// Code generated by smithy-go-codegen DO NOT EDIT.

package route53

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets information about all of the versions for a specified traffic policy.
// Traffic policy versions are listed in numerical order by VersionNumber.
func (c *Client) ListTrafficPolicyVersions(ctx context.Context, params *ListTrafficPolicyVersionsInput, optFns ...func(*Options)) (*ListTrafficPolicyVersionsOutput, error) {
	stack := middleware.NewStack("ListTrafficPolicyVersions", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpListTrafficPolicyVersionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListTrafficPolicyVersionsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListTrafficPolicyVersions(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListTrafficPolicyVersions",
			Err:           err,
		}
	}
	out := result.(*ListTrafficPolicyVersionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A complex type that contains the information about the request to list your
// traffic policies.
type ListTrafficPolicyVersionsInput struct {
	// The maximum number of traffic policy versions that you want Amazon Route 53 to
	// include in the response body for this request. If the specified traffic policy
	// has more than MaxItems versions, the value of IsTruncated in the response is
	// true, and the value of the TrafficPolicyVersionMarker element is the ID of the
	// first version that Route 53 will return if you submit another request.
	MaxItems *string
	// For your first request to ListTrafficPolicyVersions, don't include the
	// TrafficPolicyVersionMarker parameter. If you have more traffic policy versions
	// than the value of MaxItems, ListTrafficPolicyVersions returns only the first
	// group of MaxItems versions. To get more traffic policy versions, submit another
	// ListTrafficPolicyVersions request. For the value of TrafficPolicyVersionMarker,
	// specify the value of TrafficPolicyVersionMarker in the previous response.
	TrafficPolicyVersionMarker *string
	// Specify the value of Id of the traffic policy for which you want to list all
	// versions.
	Id *string
}

// A complex type that contains the response information for the request.
type ListTrafficPolicyVersionsOutput struct {
	// The value that you specified for the maxitems parameter in the
	// ListTrafficPolicyVersions request that produced the current response.
	MaxItems *string
	// A flag that indicates whether there are more traffic policies to be listed. If
	// the response was truncated, you can get the next group of traffic policies by
	// submitting another ListTrafficPolicyVersions request and specifying the value of
	// NextMarker in the marker parameter.
	IsTruncated *bool
	// If IsTruncated is true, the value of TrafficPolicyVersionMarker identifies the
	// first traffic policy that Amazon Route 53 will return if you submit another
	// request. Call ListTrafficPolicyVersions again and specify the value of
	// TrafficPolicyVersionMarker in the TrafficPolicyVersionMarker request parameter.
	// This element is present only if IsTruncated is true.
	TrafficPolicyVersionMarker *string
	// A list that contains one TrafficPolicy element for each traffic policy version
	// that is associated with the specified traffic policy.
	TrafficPolicies []*types.TrafficPolicy

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpListTrafficPolicyVersionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpListTrafficPolicyVersions{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpListTrafficPolicyVersions{}, middleware.After)
}

func newServiceMetadataMiddleware_opListTrafficPolicyVersions(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "route53",
		OperationName: "ListTrafficPolicyVersions",
	}
}
