// Code generated by smithy-go-codegen DO NOT EDIT.

package route53

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieve a list of the health checks that are associated with the current AWS
// account.
func (c *Client) ListHealthChecks(ctx context.Context, params *ListHealthChecksInput, optFns ...func(*Options)) (*ListHealthChecksOutput, error) {
	stack := middleware.NewStack("ListHealthChecks", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpListHealthChecksMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListHealthChecks(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListHealthChecks",
			Err:           err,
		}
	}
	out := result.(*ListHealthChecksOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request to retrieve a list of the health checks that are associated with the
// current AWS account.
type ListHealthChecksInput struct {
	// The maximum number of health checks that you want ListHealthChecks to return in
	// response to the current request. Amazon Route 53 returns a maximum of 100 items.
	// If you set MaxItems to a value greater than 100, Route 53 returns only the first
	// 100 health checks.
	MaxItems *string
	// If the value of IsTruncated in the previous response was true, you have more
	// health checks. To get another group, submit another ListHealthChecks request.
	// For the value of marker, specify the value of NextMarker from the previous
	// response, which is the ID of the first health check that Amazon Route 53 will
	// return if you submit another request. If the value of IsTruncated in the
	// previous response was false, there are no more health checks to get.
	Marker *string
}

// A complex type that contains the response to a ListHealthChecks request.
type ListHealthChecksOutput struct {
	// A complex type that contains one HealthCheck element for each health check that
	// is associated with the current AWS account.
	HealthChecks []*types.HealthCheck
	// A flag that indicates whether there are more health checks to be listed. If the
	// response was truncated, you can get the next group of health checks by
	// submitting another ListHealthChecks request and specifying the value of
	// NextMarker in the marker parameter.
	IsTruncated *bool
	// The value that you specified for the maxitems parameter in the call to
	// ListHealthChecks that produced the current response.
	MaxItems *string
	// If IsTruncated is true, the value of NextMarker identifies the first health
	// check that Amazon Route 53 returns if you submit another ListHealthChecks
	// request and specify the value of NextMarker in the marker parameter.
	NextMarker *string
	// For the second and subsequent calls to ListHealthChecks, Marker is the value
	// that you specified for the marker parameter in the previous request.
	Marker *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpListHealthChecksMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpListHealthChecks{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpListHealthChecks{}, middleware.After)
}

func newServiceMetadataMiddleware_opListHealthChecks(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "route53",
		OperationName: "ListHealthChecks",
	}
}
