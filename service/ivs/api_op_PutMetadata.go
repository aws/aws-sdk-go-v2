// Code generated by smithy-go-codegen DO NOT EDIT.

package ivs

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Inserts metadata into an RTMPS stream for the specified channel. A maximum of 5
// requests per second per channel is allowed, each with a maximum 1KB payload.
func (c *Client) PutMetadata(ctx context.Context, params *PutMetadataInput, optFns ...func(*Options)) (*PutMetadataOutput, error) {
	if params == nil {
		params = &PutMetadataInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutMetadata", params, optFns, addOperationPutMetadataMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutMetadataOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutMetadataInput struct {

	// ARN of the channel into which metadata is inserted. This channel must have an
	// active stream.
	//
	// This member is required.
	ChannelArn *string

	// Metadata to insert into the stream. Maximum: 1 KB per request.
	//
	// This member is required.
	Metadata *string
}

type PutMetadataOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutMetadataMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpPutMetadata{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpPutMetadata{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutMetadataValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutMetadata(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutMetadata(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ivs",
		OperationName: "PutMetadata",
	}
}
