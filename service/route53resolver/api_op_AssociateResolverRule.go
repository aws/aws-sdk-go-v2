// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53resolver

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver/types"
)

const opAssociateResolverRule = "AssociateResolverRule"

// AssociateResolverRuleRequest returns a request value for making API operation for
// Amazon Route 53 Resolver.
//
// Associates a resolver rule with a VPC. When you associate a rule with a VPC,
// Resolver forwards all DNS queries for the domain name that is specified in
// the rule and that originate in the VPC. The queries are forwarded to the
// IP addresses for the DNS resolvers that are specified in the rule. For more
// information about rules, see CreateResolverRule.
//
//    // Example sending a request using AssociateResolverRuleRequest.
//    req := client.AssociateResolverRuleRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/AssociateResolverRule
func (c *Client) AssociateResolverRuleRequest(input *types.AssociateResolverRuleInput) AssociateResolverRuleRequest {
	op := &aws.Operation{
		Name:       opAssociateResolverRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AssociateResolverRuleInput{}
	}

	req := c.newRequest(op, input, &types.AssociateResolverRuleOutput{})
	return AssociateResolverRuleRequest{Request: req, Input: input, Copy: c.AssociateResolverRuleRequest}
}

// AssociateResolverRuleRequest is the request type for the
// AssociateResolverRule API operation.
type AssociateResolverRuleRequest struct {
	*aws.Request
	Input *types.AssociateResolverRuleInput
	Copy  func(*types.AssociateResolverRuleInput) AssociateResolverRuleRequest
}

// Send marshals and sends the AssociateResolverRule API request.
func (r AssociateResolverRuleRequest) Send(ctx context.Context) (*AssociateResolverRuleResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AssociateResolverRuleResponse{
		AssociateResolverRuleOutput: r.Request.Data.(*types.AssociateResolverRuleOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AssociateResolverRuleResponse is the response type for the
// AssociateResolverRule API operation.
type AssociateResolverRuleResponse struct {
	*types.AssociateResolverRuleOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AssociateResolverRule request.
func (r *AssociateResolverRuleResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
