// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53resolver

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver/types"
)

const opCreateResolverEndpoint = "CreateResolverEndpoint"

// CreateResolverEndpointRequest returns a request value for making API operation for
// Amazon Route 53 Resolver.
//
// Creates a resolver endpoint. There are two types of resolver endpoints, inbound
// and outbound:
//
//    * An inbound resolver endpoint forwards DNS queries to the DNS service
//    for a VPC from your network or another VPC.
//
//    * An outbound resolver endpoint forwards DNS queries from the DNS service
//    for a VPC to your network or another VPC.
//
//    // Example sending a request using CreateResolverEndpointRequest.
//    req := client.CreateResolverEndpointRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/CreateResolverEndpoint
func (c *Client) CreateResolverEndpointRequest(input *types.CreateResolverEndpointInput) CreateResolverEndpointRequest {
	op := &aws.Operation{
		Name:       opCreateResolverEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateResolverEndpointInput{}
	}

	req := c.newRequest(op, input, &types.CreateResolverEndpointOutput{})
	return CreateResolverEndpointRequest{Request: req, Input: input, Copy: c.CreateResolverEndpointRequest}
}

// CreateResolverEndpointRequest is the request type for the
// CreateResolverEndpoint API operation.
type CreateResolverEndpointRequest struct {
	*aws.Request
	Input *types.CreateResolverEndpointInput
	Copy  func(*types.CreateResolverEndpointInput) CreateResolverEndpointRequest
}

// Send marshals and sends the CreateResolverEndpoint API request.
func (r CreateResolverEndpointRequest) Send(ctx context.Context) (*CreateResolverEndpointResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateResolverEndpointResponse{
		CreateResolverEndpointOutput: r.Request.Data.(*types.CreateResolverEndpointOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateResolverEndpointResponse is the response type for the
// CreateResolverEndpoint API operation.
type CreateResolverEndpointResponse struct {
	*types.CreateResolverEndpointOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateResolverEndpoint request.
func (r *CreateResolverEndpointResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
