// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53resolver

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver/types"
)

const opAssociateResolverEndpointIpAddress = "AssociateResolverEndpointIpAddress"

// AssociateResolverEndpointIpAddressRequest returns a request value for making API operation for
// Amazon Route 53 Resolver.
//
// Adds IP addresses to an inbound or an outbound resolver endpoint. If you
// want to adding more than one IP address, submit one AssociateResolverEndpointIpAddress
// request for each IP address.
//
// To remove an IP address from an endpoint, see DisassociateResolverEndpointIpAddress.
//
//    // Example sending a request using AssociateResolverEndpointIpAddressRequest.
//    req := client.AssociateResolverEndpointIpAddressRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53resolver-2018-04-01/AssociateResolverEndpointIpAddress
func (c *Client) AssociateResolverEndpointIpAddressRequest(input *types.AssociateResolverEndpointIpAddressInput) AssociateResolverEndpointIpAddressRequest {
	op := &aws.Operation{
		Name:       opAssociateResolverEndpointIpAddress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AssociateResolverEndpointIpAddressInput{}
	}

	req := c.newRequest(op, input, &types.AssociateResolverEndpointIpAddressOutput{})
	return AssociateResolverEndpointIpAddressRequest{Request: req, Input: input, Copy: c.AssociateResolverEndpointIpAddressRequest}
}

// AssociateResolverEndpointIpAddressRequest is the request type for the
// AssociateResolverEndpointIpAddress API operation.
type AssociateResolverEndpointIpAddressRequest struct {
	*aws.Request
	Input *types.AssociateResolverEndpointIpAddressInput
	Copy  func(*types.AssociateResolverEndpointIpAddressInput) AssociateResolverEndpointIpAddressRequest
}

// Send marshals and sends the AssociateResolverEndpointIpAddress API request.
func (r AssociateResolverEndpointIpAddressRequest) Send(ctx context.Context) (*AssociateResolverEndpointIpAddressResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AssociateResolverEndpointIpAddressResponse{
		AssociateResolverEndpointIpAddressOutput: r.Request.Data.(*types.AssociateResolverEndpointIpAddressOutput),
		response:                                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AssociateResolverEndpointIpAddressResponse is the response type for the
// AssociateResolverEndpointIpAddress API operation.
type AssociateResolverEndpointIpAddressResponse struct {
	*types.AssociateResolverEndpointIpAddressOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AssociateResolverEndpointIpAddress request.
func (r *AssociateResolverEndpointIpAddressResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
