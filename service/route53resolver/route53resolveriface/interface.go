// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package route53resolveriface provides an interface to enable mocking the Amazon Route 53 Resolver service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package route53resolveriface

import (
	"github.com/aws/aws-sdk-go-v2/service/route53resolver"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver/types"
)

// ClientAPI provides an interface to enable mocking the
// route53resolver.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Route53Resolver.
//    func myFunc(svc route53resolveriface.ClientAPI) bool {
//        // Make svc.AssociateResolverEndpointIpAddress request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := route53resolver.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        route53resolveriface.ClientPI
//    }
//    func (m *mockClientClient) AssociateResolverEndpointIpAddress(input *types.AssociateResolverEndpointIpAddressInput) (*types.AssociateResolverEndpointIpAddressOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	AssociateResolverEndpointIpAddressRequest(*types.AssociateResolverEndpointIpAddressInput) route53resolver.AssociateResolverEndpointIpAddressRequest

	AssociateResolverRuleRequest(*types.AssociateResolverRuleInput) route53resolver.AssociateResolverRuleRequest

	CreateResolverEndpointRequest(*types.CreateResolverEndpointInput) route53resolver.CreateResolverEndpointRequest

	CreateResolverRuleRequest(*types.CreateResolverRuleInput) route53resolver.CreateResolverRuleRequest

	DeleteResolverEndpointRequest(*types.DeleteResolverEndpointInput) route53resolver.DeleteResolverEndpointRequest

	DeleteResolverRuleRequest(*types.DeleteResolverRuleInput) route53resolver.DeleteResolverRuleRequest

	DisassociateResolverEndpointIpAddressRequest(*types.DisassociateResolverEndpointIpAddressInput) route53resolver.DisassociateResolverEndpointIpAddressRequest

	DisassociateResolverRuleRequest(*types.DisassociateResolverRuleInput) route53resolver.DisassociateResolverRuleRequest

	GetResolverEndpointRequest(*types.GetResolverEndpointInput) route53resolver.GetResolverEndpointRequest

	GetResolverRuleRequest(*types.GetResolverRuleInput) route53resolver.GetResolverRuleRequest

	GetResolverRuleAssociationRequest(*types.GetResolverRuleAssociationInput) route53resolver.GetResolverRuleAssociationRequest

	GetResolverRulePolicyRequest(*types.GetResolverRulePolicyInput) route53resolver.GetResolverRulePolicyRequest

	ListResolverEndpointIpAddressesRequest(*types.ListResolverEndpointIpAddressesInput) route53resolver.ListResolverEndpointIpAddressesRequest

	ListResolverEndpointsRequest(*types.ListResolverEndpointsInput) route53resolver.ListResolverEndpointsRequest

	ListResolverRuleAssociationsRequest(*types.ListResolverRuleAssociationsInput) route53resolver.ListResolverRuleAssociationsRequest

	ListResolverRulesRequest(*types.ListResolverRulesInput) route53resolver.ListResolverRulesRequest

	ListTagsForResourceRequest(*types.ListTagsForResourceInput) route53resolver.ListTagsForResourceRequest

	PutResolverRulePolicyRequest(*types.PutResolverRulePolicyInput) route53resolver.PutResolverRulePolicyRequest

	TagResourceRequest(*types.TagResourceInput) route53resolver.TagResourceRequest

	UntagResourceRequest(*types.UntagResourceInput) route53resolver.UntagResourceRequest

	UpdateResolverEndpointRequest(*types.UpdateResolverEndpointInput) route53resolver.UpdateResolverEndpointRequest

	UpdateResolverRuleRequest(*types.UpdateResolverRuleInput) route53resolver.UpdateResolverRuleRequest
}

var _ ClientAPI = (*route53resolver.Client)(nil)
