// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53domains

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

const opCheckDomainAvailability = "CheckDomainAvailability"

// CheckDomainAvailabilityRequest is a API request type for the CheckDomainAvailability API operation.
type CheckDomainAvailabilityRequest struct {
	*aws.Request
	Input *CheckDomainAvailabilityInput
	Copy  func(*CheckDomainAvailabilityInput) CheckDomainAvailabilityRequest
}

// Send marshals and sends the CheckDomainAvailability API request.
func (r CheckDomainAvailabilityRequest) Send() (*CheckDomainAvailabilityOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CheckDomainAvailabilityOutput), nil
}

// CheckDomainAvailabilityRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation checks the availability of one domain name. Note that if the
// availability status of a domain is pending, you must submit another request
// to determine the availability of the domain name.
//
//    // Example sending a request using the CheckDomainAvailabilityRequest method.
//    req := client.CheckDomainAvailabilityRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/CheckDomainAvailability
func (c *Route53Domains) CheckDomainAvailabilityRequest(input *CheckDomainAvailabilityInput) CheckDomainAvailabilityRequest {
	op := &aws.Operation{
		Name:       opCheckDomainAvailability,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckDomainAvailabilityInput{}
	}

	output := &CheckDomainAvailabilityOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CheckDomainAvailabilityRequest{Request: req, Input: input, Copy: c.CheckDomainAvailabilityRequest}
}

const opCheckDomainTransferability = "CheckDomainTransferability"

// CheckDomainTransferabilityRequest is a API request type for the CheckDomainTransferability API operation.
type CheckDomainTransferabilityRequest struct {
	*aws.Request
	Input *CheckDomainTransferabilityInput
	Copy  func(*CheckDomainTransferabilityInput) CheckDomainTransferabilityRequest
}

// Send marshals and sends the CheckDomainTransferability API request.
func (r CheckDomainTransferabilityRequest) Send() (*CheckDomainTransferabilityOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CheckDomainTransferabilityOutput), nil
}

// CheckDomainTransferabilityRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// Checks whether a domain name can be transferred to Amazon Route 53.
//
//    // Example sending a request using the CheckDomainTransferabilityRequest method.
//    req := client.CheckDomainTransferabilityRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/CheckDomainTransferability
func (c *Route53Domains) CheckDomainTransferabilityRequest(input *CheckDomainTransferabilityInput) CheckDomainTransferabilityRequest {
	op := &aws.Operation{
		Name:       opCheckDomainTransferability,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckDomainTransferabilityInput{}
	}

	output := &CheckDomainTransferabilityOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CheckDomainTransferabilityRequest{Request: req, Input: input, Copy: c.CheckDomainTransferabilityRequest}
}

const opDeleteTagsForDomain = "DeleteTagsForDomain"

// DeleteTagsForDomainRequest is a API request type for the DeleteTagsForDomain API operation.
type DeleteTagsForDomainRequest struct {
	*aws.Request
	Input *DeleteTagsForDomainInput
	Copy  func(*DeleteTagsForDomainInput) DeleteTagsForDomainRequest
}

// Send marshals and sends the DeleteTagsForDomain API request.
func (r DeleteTagsForDomainRequest) Send() (*DeleteTagsForDomainOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteTagsForDomainOutput), nil
}

// DeleteTagsForDomainRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation deletes the specified tags for a domain.
//
// All tag operations are eventually consistent; subsequent operations might
// not immediately represent all issued operations.
//
//    // Example sending a request using the DeleteTagsForDomainRequest method.
//    req := client.DeleteTagsForDomainRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DeleteTagsForDomain
func (c *Route53Domains) DeleteTagsForDomainRequest(input *DeleteTagsForDomainInput) DeleteTagsForDomainRequest {
	op := &aws.Operation{
		Name:       opDeleteTagsForDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteTagsForDomainInput{}
	}

	output := &DeleteTagsForDomainOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteTagsForDomainRequest{Request: req, Input: input, Copy: c.DeleteTagsForDomainRequest}
}

const opDisableDomainAutoRenew = "DisableDomainAutoRenew"

// DisableDomainAutoRenewRequest is a API request type for the DisableDomainAutoRenew API operation.
type DisableDomainAutoRenewRequest struct {
	*aws.Request
	Input *DisableDomainAutoRenewInput
	Copy  func(*DisableDomainAutoRenewInput) DisableDomainAutoRenewRequest
}

// Send marshals and sends the DisableDomainAutoRenew API request.
func (r DisableDomainAutoRenewRequest) Send() (*DisableDomainAutoRenewOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DisableDomainAutoRenewOutput), nil
}

// DisableDomainAutoRenewRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation disables automatic renewal of domain registration for the
// specified domain.
//
//    // Example sending a request using the DisableDomainAutoRenewRequest method.
//    req := client.DisableDomainAutoRenewRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DisableDomainAutoRenew
func (c *Route53Domains) DisableDomainAutoRenewRequest(input *DisableDomainAutoRenewInput) DisableDomainAutoRenewRequest {
	op := &aws.Operation{
		Name:       opDisableDomainAutoRenew,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableDomainAutoRenewInput{}
	}

	output := &DisableDomainAutoRenewOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DisableDomainAutoRenewRequest{Request: req, Input: input, Copy: c.DisableDomainAutoRenewRequest}
}

const opDisableDomainTransferLock = "DisableDomainTransferLock"

// DisableDomainTransferLockRequest is a API request type for the DisableDomainTransferLock API operation.
type DisableDomainTransferLockRequest struct {
	*aws.Request
	Input *DisableDomainTransferLockInput
	Copy  func(*DisableDomainTransferLockInput) DisableDomainTransferLockRequest
}

// Send marshals and sends the DisableDomainTransferLock API request.
func (r DisableDomainTransferLockRequest) Send() (*DisableDomainTransferLockOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DisableDomainTransferLockOutput), nil
}

// DisableDomainTransferLockRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation removes the transfer lock on the domain (specifically the
// clientTransferProhibited status) to allow domain transfers. We recommend
// you refrain from performing this action unless you intend to transfer the
// domain to a different registrar. Successful submission returns an operation
// ID that you can use to track the progress and completion of the action. If
// the request is not completed successfully, the domain registrant will be
// notified by email.
//
//    // Example sending a request using the DisableDomainTransferLockRequest method.
//    req := client.DisableDomainTransferLockRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DisableDomainTransferLock
func (c *Route53Domains) DisableDomainTransferLockRequest(input *DisableDomainTransferLockInput) DisableDomainTransferLockRequest {
	op := &aws.Operation{
		Name:       opDisableDomainTransferLock,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableDomainTransferLockInput{}
	}

	output := &DisableDomainTransferLockOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DisableDomainTransferLockRequest{Request: req, Input: input, Copy: c.DisableDomainTransferLockRequest}
}

const opEnableDomainAutoRenew = "EnableDomainAutoRenew"

// EnableDomainAutoRenewRequest is a API request type for the EnableDomainAutoRenew API operation.
type EnableDomainAutoRenewRequest struct {
	*aws.Request
	Input *EnableDomainAutoRenewInput
	Copy  func(*EnableDomainAutoRenewInput) EnableDomainAutoRenewRequest
}

// Send marshals and sends the EnableDomainAutoRenew API request.
func (r EnableDomainAutoRenewRequest) Send() (*EnableDomainAutoRenewOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*EnableDomainAutoRenewOutput), nil
}

// EnableDomainAutoRenewRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation configures Amazon Route 53 to automatically renew the specified
// domain before the domain registration expires. The cost of renewing your
// domain registration is billed to your AWS account.
//
// The period during which you can renew a domain name varies by TLD. For a
// list of TLDs and their renewal policies, see "Renewal, restoration, and deletion
// times" (http://wiki.gandi.net/en/domains/renew#renewal_restoration_and_deletion_times)
// on the website for our registrar associate, Gandi. Amazon Route 53 requires
// that you renew before the end of the renewal period that is listed on the
// Gandi website so we can complete processing before the deadline.
//
//    // Example sending a request using the EnableDomainAutoRenewRequest method.
//    req := client.EnableDomainAutoRenewRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/EnableDomainAutoRenew
func (c *Route53Domains) EnableDomainAutoRenewRequest(input *EnableDomainAutoRenewInput) EnableDomainAutoRenewRequest {
	op := &aws.Operation{
		Name:       opEnableDomainAutoRenew,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableDomainAutoRenewInput{}
	}

	output := &EnableDomainAutoRenewOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return EnableDomainAutoRenewRequest{Request: req, Input: input, Copy: c.EnableDomainAutoRenewRequest}
}

const opEnableDomainTransferLock = "EnableDomainTransferLock"

// EnableDomainTransferLockRequest is a API request type for the EnableDomainTransferLock API operation.
type EnableDomainTransferLockRequest struct {
	*aws.Request
	Input *EnableDomainTransferLockInput
	Copy  func(*EnableDomainTransferLockInput) EnableDomainTransferLockRequest
}

// Send marshals and sends the EnableDomainTransferLock API request.
func (r EnableDomainTransferLockRequest) Send() (*EnableDomainTransferLockOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*EnableDomainTransferLockOutput), nil
}

// EnableDomainTransferLockRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation sets the transfer lock on the domain (specifically the clientTransferProhibited
// status) to prevent domain transfers. Successful submission returns an operation
// ID that you can use to track the progress and completion of the action. If
// the request is not completed successfully, the domain registrant will be
// notified by email.
//
//    // Example sending a request using the EnableDomainTransferLockRequest method.
//    req := client.EnableDomainTransferLockRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/EnableDomainTransferLock
func (c *Route53Domains) EnableDomainTransferLockRequest(input *EnableDomainTransferLockInput) EnableDomainTransferLockRequest {
	op := &aws.Operation{
		Name:       opEnableDomainTransferLock,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableDomainTransferLockInput{}
	}

	output := &EnableDomainTransferLockOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return EnableDomainTransferLockRequest{Request: req, Input: input, Copy: c.EnableDomainTransferLockRequest}
}

const opGetContactReachabilityStatus = "GetContactReachabilityStatus"

// GetContactReachabilityStatusRequest is a API request type for the GetContactReachabilityStatus API operation.
type GetContactReachabilityStatusRequest struct {
	*aws.Request
	Input *GetContactReachabilityStatusInput
	Copy  func(*GetContactReachabilityStatusInput) GetContactReachabilityStatusRequest
}

// Send marshals and sends the GetContactReachabilityStatus API request.
func (r GetContactReachabilityStatusRequest) Send() (*GetContactReachabilityStatusOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetContactReachabilityStatusOutput), nil
}

// GetContactReachabilityStatusRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// For operations that require confirmation that the email address for the registrant
// contact is valid, such as registering a new domain, this operation returns
// information about whether the registrant contact has responded.
//
// If you want us to resend the email, use the ResendContactReachabilityEmail
// operation.
//
//    // Example sending a request using the GetContactReachabilityStatusRequest method.
//    req := client.GetContactReachabilityStatusRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetContactReachabilityStatus
func (c *Route53Domains) GetContactReachabilityStatusRequest(input *GetContactReachabilityStatusInput) GetContactReachabilityStatusRequest {
	op := &aws.Operation{
		Name:       opGetContactReachabilityStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetContactReachabilityStatusInput{}
	}

	output := &GetContactReachabilityStatusOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetContactReachabilityStatusRequest{Request: req, Input: input, Copy: c.GetContactReachabilityStatusRequest}
}

const opGetDomainDetail = "GetDomainDetail"

// GetDomainDetailRequest is a API request type for the GetDomainDetail API operation.
type GetDomainDetailRequest struct {
	*aws.Request
	Input *GetDomainDetailInput
	Copy  func(*GetDomainDetailInput) GetDomainDetailRequest
}

// Send marshals and sends the GetDomainDetail API request.
func (r GetDomainDetailRequest) Send() (*GetDomainDetailOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetDomainDetailOutput), nil
}

// GetDomainDetailRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation returns detailed information about a specified domain that
// is associated with the current AWS account. Contact information for the domain
// is also returned as part of the output.
//
//    // Example sending a request using the GetDomainDetailRequest method.
//    req := client.GetDomainDetailRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetDomainDetail
func (c *Route53Domains) GetDomainDetailRequest(input *GetDomainDetailInput) GetDomainDetailRequest {
	op := &aws.Operation{
		Name:       opGetDomainDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDomainDetailInput{}
	}

	output := &GetDomainDetailOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetDomainDetailRequest{Request: req, Input: input, Copy: c.GetDomainDetailRequest}
}

const opGetDomainSuggestions = "GetDomainSuggestions"

// GetDomainSuggestionsRequest is a API request type for the GetDomainSuggestions API operation.
type GetDomainSuggestionsRequest struct {
	*aws.Request
	Input *GetDomainSuggestionsInput
	Copy  func(*GetDomainSuggestionsInput) GetDomainSuggestionsRequest
}

// Send marshals and sends the GetDomainSuggestions API request.
func (r GetDomainSuggestionsRequest) Send() (*GetDomainSuggestionsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetDomainSuggestionsOutput), nil
}

// GetDomainSuggestionsRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// The GetDomainSuggestions operation returns a list of suggested domain names
// given a string, which can either be a domain name or simply a word or phrase
// (without spaces).
//
//    // Example sending a request using the GetDomainSuggestionsRequest method.
//    req := client.GetDomainSuggestionsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetDomainSuggestions
func (c *Route53Domains) GetDomainSuggestionsRequest(input *GetDomainSuggestionsInput) GetDomainSuggestionsRequest {
	op := &aws.Operation{
		Name:       opGetDomainSuggestions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDomainSuggestionsInput{}
	}

	output := &GetDomainSuggestionsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetDomainSuggestionsRequest{Request: req, Input: input, Copy: c.GetDomainSuggestionsRequest}
}

const opGetOperationDetail = "GetOperationDetail"

// GetOperationDetailRequest is a API request type for the GetOperationDetail API operation.
type GetOperationDetailRequest struct {
	*aws.Request
	Input *GetOperationDetailInput
	Copy  func(*GetOperationDetailInput) GetOperationDetailRequest
}

// Send marshals and sends the GetOperationDetail API request.
func (r GetOperationDetailRequest) Send() (*GetOperationDetailOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetOperationDetailOutput), nil
}

// GetOperationDetailRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation returns the current status of an operation that is not completed.
//
//    // Example sending a request using the GetOperationDetailRequest method.
//    req := client.GetOperationDetailRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetOperationDetail
func (c *Route53Domains) GetOperationDetailRequest(input *GetOperationDetailInput) GetOperationDetailRequest {
	op := &aws.Operation{
		Name:       opGetOperationDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetOperationDetailInput{}
	}

	output := &GetOperationDetailOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetOperationDetailRequest{Request: req, Input: input, Copy: c.GetOperationDetailRequest}
}

const opListDomains = "ListDomains"

// ListDomainsRequest is a API request type for the ListDomains API operation.
type ListDomainsRequest struct {
	*aws.Request
	Input *ListDomainsInput
	Copy  func(*ListDomainsInput) ListDomainsRequest
}

// Send marshals and sends the ListDomains API request.
func (r ListDomainsRequest) Send() (*ListDomainsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListDomainsOutput), nil
}

// ListDomainsRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation returns all the domain names registered with Amazon Route
// 53 for the current AWS account.
//
//    // Example sending a request using the ListDomainsRequest method.
//    req := client.ListDomainsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListDomains
func (c *Route53Domains) ListDomainsRequest(input *ListDomainsInput) ListDomainsRequest {
	op := &aws.Operation{
		Name:       opListDomains,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextPageMarker"},
			LimitToken:      "MaxItems",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListDomainsInput{}
	}

	output := &ListDomainsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListDomainsRequest{Request: req, Input: input, Copy: c.ListDomainsRequest}
}

// Paginate pages iterates over the pages of a ListDomainsRequest operation,
// calling the Next method for each page. Using the paginators Next
// method will depict whether or not there are more pages.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListDomains operation.
//		req := client.ListDomainsRequest(input)
//		p := req.Paginate()
//		for p.Next() {
//			page := p.CurrentPage()
//		}
//
//		if err := p.Err(); err != nil {
//			return err
//		}
//
func (p *ListDomainsRequest) Paginate(opts ...aws.Option) ListDomainsPager {
	return ListDomainsPager{
		Pager: aws.Pager{
			NewRequest: func() (*aws.Request, error) {
				var inCpy *ListDomainsInput
				if p.Input != nil {
					tmp := *p.Input
					inCpy = &tmp
				}

				req := p.Copy(inCpy)
				req.ApplyOptions(opts...)

				return req.Request, nil
			},
		},
	}
}

// ListDomainsPager is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListDomainsPager struct {
	aws.Pager
}

func (p *ListDomainsPager) CurrentPage() *ListDomainsOutput {
	return p.Pager.CurrentPage().(*ListDomainsOutput)
}

const opListOperations = "ListOperations"

// ListOperationsRequest is a API request type for the ListOperations API operation.
type ListOperationsRequest struct {
	*aws.Request
	Input *ListOperationsInput
	Copy  func(*ListOperationsInput) ListOperationsRequest
}

// Send marshals and sends the ListOperations API request.
func (r ListOperationsRequest) Send() (*ListOperationsOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListOperationsOutput), nil
}

// ListOperationsRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation returns the operation IDs of operations that are not yet complete.
//
//    // Example sending a request using the ListOperationsRequest method.
//    req := client.ListOperationsRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListOperations
func (c *Route53Domains) ListOperationsRequest(input *ListOperationsInput) ListOperationsRequest {
	op := &aws.Operation{
		Name:       opListOperations,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"Marker"},
			OutputTokens:    []string{"NextPageMarker"},
			LimitToken:      "MaxItems",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &ListOperationsInput{}
	}

	output := &ListOperationsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListOperationsRequest{Request: req, Input: input, Copy: c.ListOperationsRequest}
}

// Paginate pages iterates over the pages of a ListOperationsRequest operation,
// calling the Next method for each page. Using the paginators Next
// method will depict whether or not there are more pages.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a ListOperations operation.
//		req := client.ListOperationsRequest(input)
//		p := req.Paginate()
//		for p.Next() {
//			page := p.CurrentPage()
//		}
//
//		if err := p.Err(); err != nil {
//			return err
//		}
//
func (p *ListOperationsRequest) Paginate(opts ...aws.Option) ListOperationsPager {
	return ListOperationsPager{
		Pager: aws.Pager{
			NewRequest: func() (*aws.Request, error) {
				var inCpy *ListOperationsInput
				if p.Input != nil {
					tmp := *p.Input
					inCpy = &tmp
				}

				req := p.Copy(inCpy)
				req.ApplyOptions(opts...)

				return req.Request, nil
			},
		},
	}
}

// ListOperationsPager is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListOperationsPager struct {
	aws.Pager
}

func (p *ListOperationsPager) CurrentPage() *ListOperationsOutput {
	return p.Pager.CurrentPage().(*ListOperationsOutput)
}

const opListTagsForDomain = "ListTagsForDomain"

// ListTagsForDomainRequest is a API request type for the ListTagsForDomain API operation.
type ListTagsForDomainRequest struct {
	*aws.Request
	Input *ListTagsForDomainInput
	Copy  func(*ListTagsForDomainInput) ListTagsForDomainRequest
}

// Send marshals and sends the ListTagsForDomain API request.
func (r ListTagsForDomainRequest) Send() (*ListTagsForDomainOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListTagsForDomainOutput), nil
}

// ListTagsForDomainRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation returns all of the tags that are associated with the specified
// domain.
//
// All tag operations are eventually consistent; subsequent operations might
// not immediately represent all issued operations.
//
//    // Example sending a request using the ListTagsForDomainRequest method.
//    req := client.ListTagsForDomainRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListTagsForDomain
func (c *Route53Domains) ListTagsForDomainRequest(input *ListTagsForDomainInput) ListTagsForDomainRequest {
	op := &aws.Operation{
		Name:       opListTagsForDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListTagsForDomainInput{}
	}

	output := &ListTagsForDomainOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListTagsForDomainRequest{Request: req, Input: input, Copy: c.ListTagsForDomainRequest}
}

const opRegisterDomain = "RegisterDomain"

// RegisterDomainRequest is a API request type for the RegisterDomain API operation.
type RegisterDomainRequest struct {
	*aws.Request
	Input *RegisterDomainInput
	Copy  func(*RegisterDomainInput) RegisterDomainRequest
}

// Send marshals and sends the RegisterDomain API request.
func (r RegisterDomainRequest) Send() (*RegisterDomainOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*RegisterDomainOutput), nil
}

// RegisterDomainRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation registers a domain. Domains are registered either by Amazon
// Registrar (for .com, .net, and .org domains) or by our registrar associate,
// Gandi (for all other domains). For some top-level domains (TLDs), this operation
// requires extra parameters.
//
// When you register a domain, Amazon Route 53 does the following:
//
//    * Creates a Amazon Route 53 hosted zone that has the same name as the
//    domain. Amazon Route 53 assigns four name servers to your hosted zone
//    and automatically updates your domain registration with the names of these
//    name servers.
//
//    * Enables autorenew, so your domain registration will renew automatically
//    each year. We'll notify you in advance of the renewal date so you can
//    choose whether to renew the registration.
//
//    * Optionally enables privacy protection, so WHOIS queries return contact
//    information either for Amazon Registrar (for .com, .net, and .org domains)
//    or for our registrar associate, Gandi (for all other TLDs). If you don't
//    enable privacy protection, WHOIS queries return the information that you
//    entered for the registrant, admin, and tech contacts.
//
//    * If registration is successful, returns an operation ID that you can
//    use to track the progress and completion of the action. If the request
//    is not completed successfully, the domain registrant is notified by email.
//
//    * Charges your AWS account an amount based on the top-level domain. For
//    more information, see Amazon Route 53 Pricing (http://aws.amazon.com/route53/pricing/).
//
//    // Example sending a request using the RegisterDomainRequest method.
//    req := client.RegisterDomainRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RegisterDomain
func (c *Route53Domains) RegisterDomainRequest(input *RegisterDomainInput) RegisterDomainRequest {
	op := &aws.Operation{
		Name:       opRegisterDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RegisterDomainInput{}
	}

	output := &RegisterDomainOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return RegisterDomainRequest{Request: req, Input: input, Copy: c.RegisterDomainRequest}
}

const opRenewDomain = "RenewDomain"

// RenewDomainRequest is a API request type for the RenewDomain API operation.
type RenewDomainRequest struct {
	*aws.Request
	Input *RenewDomainInput
	Copy  func(*RenewDomainInput) RenewDomainRequest
}

// Send marshals and sends the RenewDomain API request.
func (r RenewDomainRequest) Send() (*RenewDomainOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*RenewDomainOutput), nil
}

// RenewDomainRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation renews a domain for the specified number of years. The cost
// of renewing your domain is billed to your AWS account.
//
// We recommend that you renew your domain several weeks before the expiration
// date. Some TLD registries delete domains before the expiration date if you
// haven't renewed far enough in advance. For more information about renewing
// domain registration, see Renewing Registration for a Domain (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html)
// in the Amazon Route 53 Developer Guide.
//
//    // Example sending a request using the RenewDomainRequest method.
//    req := client.RenewDomainRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RenewDomain
func (c *Route53Domains) RenewDomainRequest(input *RenewDomainInput) RenewDomainRequest {
	op := &aws.Operation{
		Name:       opRenewDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewDomainInput{}
	}

	output := &RenewDomainOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return RenewDomainRequest{Request: req, Input: input, Copy: c.RenewDomainRequest}
}

const opResendContactReachabilityEmail = "ResendContactReachabilityEmail"

// ResendContactReachabilityEmailRequest is a API request type for the ResendContactReachabilityEmail API operation.
type ResendContactReachabilityEmailRequest struct {
	*aws.Request
	Input *ResendContactReachabilityEmailInput
	Copy  func(*ResendContactReachabilityEmailInput) ResendContactReachabilityEmailRequest
}

// Send marshals and sends the ResendContactReachabilityEmail API request.
func (r ResendContactReachabilityEmailRequest) Send() (*ResendContactReachabilityEmailOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ResendContactReachabilityEmailOutput), nil
}

// ResendContactReachabilityEmailRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// For operations that require confirmation that the email address for the registrant
// contact is valid, such as registering a new domain, this operation resends
// the confirmation email to the current email address for the registrant contact.
//
//    // Example sending a request using the ResendContactReachabilityEmailRequest method.
//    req := client.ResendContactReachabilityEmailRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ResendContactReachabilityEmail
func (c *Route53Domains) ResendContactReachabilityEmailRequest(input *ResendContactReachabilityEmailInput) ResendContactReachabilityEmailRequest {
	op := &aws.Operation{
		Name:       opResendContactReachabilityEmail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResendContactReachabilityEmailInput{}
	}

	output := &ResendContactReachabilityEmailOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ResendContactReachabilityEmailRequest{Request: req, Input: input, Copy: c.ResendContactReachabilityEmailRequest}
}

const opRetrieveDomainAuthCode = "RetrieveDomainAuthCode"

// RetrieveDomainAuthCodeRequest is a API request type for the RetrieveDomainAuthCode API operation.
type RetrieveDomainAuthCodeRequest struct {
	*aws.Request
	Input *RetrieveDomainAuthCodeInput
	Copy  func(*RetrieveDomainAuthCodeInput) RetrieveDomainAuthCodeRequest
}

// Send marshals and sends the RetrieveDomainAuthCode API request.
func (r RetrieveDomainAuthCodeRequest) Send() (*RetrieveDomainAuthCodeOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*RetrieveDomainAuthCodeOutput), nil
}

// RetrieveDomainAuthCodeRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation returns the AuthCode for the domain. To transfer a domain
// to another registrar, you provide this value to the new registrar.
//
//    // Example sending a request using the RetrieveDomainAuthCodeRequest method.
//    req := client.RetrieveDomainAuthCodeRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RetrieveDomainAuthCode
func (c *Route53Domains) RetrieveDomainAuthCodeRequest(input *RetrieveDomainAuthCodeInput) RetrieveDomainAuthCodeRequest {
	op := &aws.Operation{
		Name:       opRetrieveDomainAuthCode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RetrieveDomainAuthCodeInput{}
	}

	output := &RetrieveDomainAuthCodeOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return RetrieveDomainAuthCodeRequest{Request: req, Input: input, Copy: c.RetrieveDomainAuthCodeRequest}
}

const opTransferDomain = "TransferDomain"

// TransferDomainRequest is a API request type for the TransferDomain API operation.
type TransferDomainRequest struct {
	*aws.Request
	Input *TransferDomainInput
	Copy  func(*TransferDomainInput) TransferDomainRequest
}

// Send marshals and sends the TransferDomain API request.
func (r TransferDomainRequest) Send() (*TransferDomainOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*TransferDomainOutput), nil
}

// TransferDomainRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation transfers a domain from another registrar to Amazon Route
// 53. When the transfer is complete, the domain is registered either with Amazon
// Registrar (for .com, .net, and .org domains) or with our registrar associate,
// Gandi (for all other TLDs).
//
// For transfer requirements, a detailed procedure, and information about viewing
// the status of a domain transfer, see Transferring Registration for a Domain
// to Amazon Route 53 (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html)
// in the Amazon Route 53 Developer Guide.
//
// If the registrar for your domain is also the DNS service provider for the
// domain, we highly recommend that you consider transferring your DNS service
// to Amazon Route 53 or to another DNS service provider before you transfer
// your registration. Some registrars provide free DNS service when you purchase
// a domain registration. When you transfer the registration, the previous registrar
// will not renew your domain registration and could end your DNS service at
// any time.
//
// If the registrar for your domain is also the DNS service provider for the
// domain and you don't transfer DNS service to another provider, your website,
// email, and the web applications associated with the domain might become unavailable.
//
// If the transfer is successful, this method returns an operation ID that you
// can use to track the progress and completion of the action. If the transfer
// doesn't complete successfully, the domain registrant will be notified by
// email.
//
//    // Example sending a request using the TransferDomainRequest method.
//    req := client.TransferDomainRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/TransferDomain
func (c *Route53Domains) TransferDomainRequest(input *TransferDomainInput) TransferDomainRequest {
	op := &aws.Operation{
		Name:       opTransferDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TransferDomainInput{}
	}

	output := &TransferDomainOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return TransferDomainRequest{Request: req, Input: input, Copy: c.TransferDomainRequest}
}

const opUpdateDomainContact = "UpdateDomainContact"

// UpdateDomainContactRequest is a API request type for the UpdateDomainContact API operation.
type UpdateDomainContactRequest struct {
	*aws.Request
	Input *UpdateDomainContactInput
	Copy  func(*UpdateDomainContactInput) UpdateDomainContactRequest
}

// Send marshals and sends the UpdateDomainContact API request.
func (r UpdateDomainContactRequest) Send() (*UpdateDomainContactOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateDomainContactOutput), nil
}

// UpdateDomainContactRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation updates the contact information for a particular domain. You
// must specify information for at least one contact: registrant, administrator,
// or technical.
//
// If the update is successful, this method returns an operation ID that you
// can use to track the progress and completion of the action. If the request
// is not completed successfully, the domain registrant will be notified by
// email.
//
//    // Example sending a request using the UpdateDomainContactRequest method.
//    req := client.UpdateDomainContactRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainContact
func (c *Route53Domains) UpdateDomainContactRequest(input *UpdateDomainContactInput) UpdateDomainContactRequest {
	op := &aws.Operation{
		Name:       opUpdateDomainContact,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDomainContactInput{}
	}

	output := &UpdateDomainContactOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateDomainContactRequest{Request: req, Input: input, Copy: c.UpdateDomainContactRequest}
}

const opUpdateDomainContactPrivacy = "UpdateDomainContactPrivacy"

// UpdateDomainContactPrivacyRequest is a API request type for the UpdateDomainContactPrivacy API operation.
type UpdateDomainContactPrivacyRequest struct {
	*aws.Request
	Input *UpdateDomainContactPrivacyInput
	Copy  func(*UpdateDomainContactPrivacyInput) UpdateDomainContactPrivacyRequest
}

// Send marshals and sends the UpdateDomainContactPrivacy API request.
func (r UpdateDomainContactPrivacyRequest) Send() (*UpdateDomainContactPrivacyOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateDomainContactPrivacyOutput), nil
}

// UpdateDomainContactPrivacyRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation updates the specified domain contact's privacy setting. When
// privacy protection is enabled, contact information such as email address
// is replaced either with contact information for Amazon Registrar (for .com,
// .net, and .org domains) or with contact information for our registrar associate,
// Gandi.
//
// This operation affects only the contact information for the specified contact
// type (registrant, administrator, or tech). If the request succeeds, Amazon
// Route 53 returns an operation ID that you can use with GetOperationDetail
// to track the progress and completion of the action. If the request doesn't
// complete successfully, the domain registrant will be notified by email.
//
//    // Example sending a request using the UpdateDomainContactPrivacyRequest method.
//    req := client.UpdateDomainContactPrivacyRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainContactPrivacy
func (c *Route53Domains) UpdateDomainContactPrivacyRequest(input *UpdateDomainContactPrivacyInput) UpdateDomainContactPrivacyRequest {
	op := &aws.Operation{
		Name:       opUpdateDomainContactPrivacy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDomainContactPrivacyInput{}
	}

	output := &UpdateDomainContactPrivacyOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateDomainContactPrivacyRequest{Request: req, Input: input, Copy: c.UpdateDomainContactPrivacyRequest}
}

const opUpdateDomainNameservers = "UpdateDomainNameservers"

// UpdateDomainNameserversRequest is a API request type for the UpdateDomainNameservers API operation.
type UpdateDomainNameserversRequest struct {
	*aws.Request
	Input *UpdateDomainNameserversInput
	Copy  func(*UpdateDomainNameserversInput) UpdateDomainNameserversRequest
}

// Send marshals and sends the UpdateDomainNameservers API request.
func (r UpdateDomainNameserversRequest) Send() (*UpdateDomainNameserversOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateDomainNameserversOutput), nil
}

// UpdateDomainNameserversRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation replaces the current set of name servers for the domain with
// the specified set of name servers. If you use Amazon Route 53 as your DNS
// service, specify the four name servers in the delegation set for the hosted
// zone for the domain.
//
// If successful, this operation returns an operation ID that you can use to
// track the progress and completion of the action. If the request is not completed
// successfully, the domain registrant will be notified by email.
//
//    // Example sending a request using the UpdateDomainNameserversRequest method.
//    req := client.UpdateDomainNameserversRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainNameservers
func (c *Route53Domains) UpdateDomainNameserversRequest(input *UpdateDomainNameserversInput) UpdateDomainNameserversRequest {
	op := &aws.Operation{
		Name:       opUpdateDomainNameservers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDomainNameserversInput{}
	}

	output := &UpdateDomainNameserversOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateDomainNameserversRequest{Request: req, Input: input, Copy: c.UpdateDomainNameserversRequest}
}

const opUpdateTagsForDomain = "UpdateTagsForDomain"

// UpdateTagsForDomainRequest is a API request type for the UpdateTagsForDomain API operation.
type UpdateTagsForDomainRequest struct {
	*aws.Request
	Input *UpdateTagsForDomainInput
	Copy  func(*UpdateTagsForDomainInput) UpdateTagsForDomainRequest
}

// Send marshals and sends the UpdateTagsForDomain API request.
func (r UpdateTagsForDomainRequest) Send() (*UpdateTagsForDomainOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateTagsForDomainOutput), nil
}

// UpdateTagsForDomainRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// This operation adds or updates tags for a specified domain.
//
// All tag operations are eventually consistent; subsequent operations might
// not immediately represent all issued operations.
//
//    // Example sending a request using the UpdateTagsForDomainRequest method.
//    req := client.UpdateTagsForDomainRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateTagsForDomain
func (c *Route53Domains) UpdateTagsForDomainRequest(input *UpdateTagsForDomainInput) UpdateTagsForDomainRequest {
	op := &aws.Operation{
		Name:       opUpdateTagsForDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateTagsForDomainInput{}
	}

	output := &UpdateTagsForDomainOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateTagsForDomainRequest{Request: req, Input: input, Copy: c.UpdateTagsForDomainRequest}
}

const opViewBilling = "ViewBilling"

// ViewBillingRequest is a API request type for the ViewBilling API operation.
type ViewBillingRequest struct {
	*aws.Request
	Input *ViewBillingInput
	Copy  func(*ViewBillingInput) ViewBillingRequest
}

// Send marshals and sends the ViewBilling API request.
func (r ViewBillingRequest) Send() (*ViewBillingOutput, error) {
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ViewBillingOutput), nil
}

// ViewBillingRequest returns a request value for making API operation for
// Amazon Route 53 Domains.
//
// Returns all the domain-related billing records for the current AWS account
// for a specified period
//
//    // Example sending a request using the ViewBillingRequest method.
//    req := client.ViewBillingRequest(params)
//    resp, err := req.Send()
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ViewBilling
func (c *Route53Domains) ViewBillingRequest(input *ViewBillingInput) ViewBillingRequest {
	op := &aws.Operation{
		Name:       opViewBilling,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ViewBillingInput{}
	}

	output := &ViewBillingOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ViewBillingRequest{Request: req, Input: input, Copy: c.ViewBillingRequest}
}

// Information for one billing record.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/BillingRecord
type BillingRecord struct {
	_ struct{} `type:"structure"`

	// The date that the operation was billed, in Unix format.
	BillDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// The name of the domain that the billing record applies to. If the domain
	// name contains characters other than a-z, 0-9, and - (hyphen), such as an
	// internationalized domain name, then this value is in Punycode. For more information,
	// see DNS Domain Name Format (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html)
	// in the Amazon Route 53 Developer Guidezzz.
	DomainName *string `type:"string"`

	// The ID of the invoice that is associated with the billing record.
	InvoiceId *string `type:"string"`

	// The operation that you were charged for.
	Operation OperationType `type:"string" enum:"true"`

	// The price that you were charged for the operation, in US dollars.
	//
	// Example value: 12.0
	Price *float64 `type:"double"`
}

// String returns the string representation
func (s BillingRecord) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s BillingRecord) GoString() string {
	return s.String()
}

// The CheckDomainAvailability request contains the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/CheckDomainAvailabilityRequest
type CheckDomainAvailabilityInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to get availability for.
	//
	// Constraints: The domain name can contain only the letters a through z, the
	// numbers 0 through 9, and hyphen (-). Internationalized Domain Names are not
	// supported.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// Reserved for future use.
	IdnLangCode *string `type:"string"`
}

// String returns the string representation
func (s CheckDomainAvailabilityInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckDomainAvailabilityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CheckDomainAvailabilityInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CheckDomainAvailabilityInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The CheckDomainAvailability response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/CheckDomainAvailabilityResponse
type CheckDomainAvailabilityOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Whether the domain name is available for registering.
	//
	// You can register only domains designated as AVAILABLE.
	//
	// Valid values:
	//
	// AVAILABLEThe domain name is available.
	//
	// AVAILABLE_RESERVEDThe domain name is reserved under specific conditions.
	//
	// AVAILABLE_PREORDERThe domain name is available and can be preordered.
	//
	// DONT_KNOWThe TLD registry didn't reply with a definitive answer about whether
	// the domain name is available. Amazon Route 53 can return this response for
	// a variety of reasons, for example, the registry is performing maintenance.
	// Try again later.
	//
	// PENDINGThe TLD registry didn't return a response in the expected amount of
	// time. When the response is delayed, it usually takes just a few extra seconds.
	// You can resubmit the request immediately.
	//
	// RESERVEDThe domain name has been reserved for another person or organization.
	//
	// UNAVAILABLEThe domain name is not available.
	//
	// UNAVAILABLE_PREMIUMThe domain name is not available.
	//
	// UNAVAILABLE_RESTRICTEDThe domain name is forbidden.
	//
	// Availability is a required field
	Availability DomainAvailability `type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s CheckDomainAvailabilityOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckDomainAvailabilityOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CheckDomainAvailabilityOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The CheckDomainTransferability request contains the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/CheckDomainTransferabilityRequest
type CheckDomainTransferabilityInput struct {
	_ struct{} `type:"structure"`

	// If the registrar for the top-level domain (TLD) requires an authorization
	// code to transfer the domain, the code that you got from the current registrar
	// for the domain.
	AuthCode *string `type:"string"`

	// The name of the domain that you want to transfer to Amazon Route 53.
	//
	// Constraints: The domain name can contain only the letters a through z, the
	// numbers 0 through 9, and hyphen (-). Internationalized Domain Names are not
	// supported.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CheckDomainTransferabilityInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckDomainTransferabilityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CheckDomainTransferabilityInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CheckDomainTransferabilityInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The CheckDomainTransferability response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/CheckDomainTransferabilityResponse
type CheckDomainTransferabilityOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A complex type that contains information about whether the specified domain
	// can be transferred to Amazon Route 53.
	//
	// Transferability is a required field
	Transferability *DomainTransferability `type:"structure" required:"true"`
}

// String returns the string representation
func (s CheckDomainTransferabilityOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckDomainTransferabilityOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CheckDomainTransferabilityOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// ContactDetail includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ContactDetail
type ContactDetail struct {
	_ struct{} `type:"structure"`

	// First line of the contact's address.
	AddressLine1 *string `type:"string"`

	// Second line of contact's address, if any.
	AddressLine2 *string `type:"string"`

	// The city of the contact's address.
	City *string `type:"string"`

	// Indicates whether the contact is a person, company, association, or public
	// organization. If you choose an option other than PERSON, you must enter an
	// organization name, and you can't enable privacy protection for the contact.
	ContactType ContactType `type:"string" enum:"true"`

	// Code for the country of the contact's address.
	CountryCode CountryCode `type:"string" enum:"true"`

	// Email address of the contact.
	Email *string `type:"string"`

	// A list of name-value pairs for parameters required by certain top-level domains.
	ExtraParams []ExtraParam `type:"list"`

	// Fax number of the contact.
	//
	// Constraints: Phone number must be specified in the format "+[country dialing
	// code].[number including any area code]". For example, a US phone number might
	// appear as "+1.1234567890".
	Fax *string `type:"string"`

	// First name of contact.
	FirstName *string `type:"string"`

	// Last name of contact.
	LastName *string `type:"string"`

	// Name of the organization for contact types other than PERSON.
	OrganizationName *string `type:"string"`

	// The phone number of the contact.
	//
	// Constraints: Phone number must be specified in the format "+[country dialing
	// code].[number including any area code>]". For example, a US phone number
	// might appear as "+1.1234567890".
	PhoneNumber *string `type:"string"`

	// The state or province of the contact's city.
	State *string `type:"string"`

	// The zip or postal code of the contact's address.
	ZipCode *string `type:"string"`
}

// String returns the string representation
func (s ContactDetail) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ContactDetail) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ContactDetail) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ContactDetail"}
	if s.ExtraParams != nil {
		for i, v := range s.ExtraParams {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "ExtraParams", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The DeleteTagsForDomainRequest includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DeleteTagsForDomainRequest
type DeleteTagsForDomainInput struct {
	_ struct{} `type:"structure"`

	// The domain for which you want to delete one or more tags.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// A list of tag keys to delete.
	//
	// TagsToDelete is a required field
	TagsToDelete []string `type:"list" required:"true"`
}

// String returns the string representation
func (s DeleteTagsForDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTagsForDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteTagsForDomainInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteTagsForDomainInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if s.TagsToDelete == nil {
		invalidParams.Add(aws.NewErrParamRequired("TagsToDelete"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DeleteTagsForDomainResponse
type DeleteTagsForDomainOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DeleteTagsForDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTagsForDomainOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteTagsForDomainOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DisableDomainAutoRenewRequest
type DisableDomainAutoRenewInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to disable automatic renewal for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableDomainAutoRenewInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainAutoRenewInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableDomainAutoRenewInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DisableDomainAutoRenewInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DisableDomainAutoRenewResponse
type DisableDomainAutoRenewOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s DisableDomainAutoRenewOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainAutoRenewOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DisableDomainAutoRenewOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The DisableDomainTransferLock request includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DisableDomainTransferLockRequest
type DisableDomainTransferLockInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to remove the transfer lock for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableDomainTransferLockInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainTransferLockInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableDomainTransferLockInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DisableDomainTransferLockInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The DisableDomainTransferLock response includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DisableDomainTransferLockResponse
type DisableDomainTransferLockOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Identifier for tracking the progress of the request. To use this ID to query
	// the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableDomainTransferLockOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDomainTransferLockOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DisableDomainTransferLockOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Information about one suggested domain name.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DomainSuggestion
type DomainSuggestion struct {
	_ struct{} `type:"structure"`

	// Whether the domain name is available for registering.
	//
	// You can register only the domains that are designated as AVAILABLE.
	//
	// Valid values:
	//
	// AVAILABLEThe domain name is available.
	//
	// AVAILABLE_RESERVEDThe domain name is reserved under specific conditions.
	//
	// AVAILABLE_PREORDERThe domain name is available and can be preordered.
	//
	// DONT_KNOWThe TLD registry didn't reply with a definitive answer about whether
	// the domain name is available. Amazon Route 53 can return this response for
	// a variety of reasons, for example, the registry is performing maintenance.
	// Try again later.
	//
	// PENDINGThe TLD registry didn't return a response in the expected amount of
	// time. When the response is delayed, it usually takes just a few extra seconds.
	// You can resubmit the request immediately.
	//
	// RESERVEDThe domain name has been reserved for another person or organization.
	//
	// UNAVAILABLEThe domain name is not available.
	//
	// UNAVAILABLE_PREMIUMThe domain name is not available.
	//
	// UNAVAILABLE_RESTRICTEDThe domain name is forbidden.
	Availability *string `type:"string"`

	// A suggested domain name.
	DomainName *string `type:"string"`
}

// String returns the string representation
func (s DomainSuggestion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DomainSuggestion) GoString() string {
	return s.String()
}

// Summary information about one domain.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DomainSummary
type DomainSummary struct {
	_ struct{} `type:"structure"`

	// Indicates whether the domain is automatically renewed upon expiration.
	AutoRenew *bool `type:"boolean"`

	// The name of the domain that the summary information applies to.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// Expiration date of the domain in Coordinated Universal Time (UTC).
	Expiry *time.Time `type:"timestamp" timestampFormat:"unix"`

	// Indicates whether a domain is locked from unauthorized transfer to another
	// party.
	TransferLock *bool `type:"boolean"`
}

// String returns the string representation
func (s DomainSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DomainSummary) GoString() string {
	return s.String()
}

// A complex type that contains information about whether the specified domain
// can be transferred to Amazon Route 53.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/DomainTransferability
type DomainTransferability struct {
	_ struct{} `type:"structure"`

	// Whether the domain name can be transferred to Amazon Route 53.
	//
	// You can transfer only domains that have a value of TRANSFERABLE for Transferable.
	//
	// Valid values:
	//
	// TRANSFERABLEThe domain name can be transferred to Amazon Route 53.
	//
	// UNTRANSFERRABLEThe domain name can't be transferred to Amazon Route 53.
	//
	// DONT_KNOWReserved for future use.
	Transferable Transferable `type:"string" enum:"true"`
}

// String returns the string representation
func (s DomainTransferability) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DomainTransferability) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/EnableDomainAutoRenewRequest
type EnableDomainAutoRenewInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to enable automatic renewal for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableDomainAutoRenewInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainAutoRenewInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableDomainAutoRenewInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "EnableDomainAutoRenewInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/EnableDomainAutoRenewResponse
type EnableDomainAutoRenewOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s EnableDomainAutoRenewOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainAutoRenewOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s EnableDomainAutoRenewOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// A request to set the transfer lock for the specified domain.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/EnableDomainTransferLockRequest
type EnableDomainTransferLockInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to set the transfer lock for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableDomainTransferLockInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainTransferLockInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableDomainTransferLockInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "EnableDomainTransferLockInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The EnableDomainTransferLock response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/EnableDomainTransferLockResponse
type EnableDomainTransferLockOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Identifier for tracking the progress of the request. To use this ID to query
	// the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableDomainTransferLockOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDomainTransferLockOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s EnableDomainTransferLockOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// ExtraParam includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ExtraParam
type ExtraParam struct {
	_ struct{} `type:"structure"`

	// Name of the additional parameter required by the top-level domain. Here are
	// the top-level domains that require additional parameters and which parameters
	// they require:
	//
	//    * .com.au and .net.au:AU_ID_NUMBER and AU_ID_TYPE
	//
	//    * .ca:BRAND_NUMBER, CA_LEGAL_TYPE, and CA_BUSINESS_ENTITY_TYPE
	//
	//    * .es:ES_IDENTIFICATION, ES_IDENTIFICATION_TYPE, and ES_LEGAL_FORM
	//
	//    * .fi:BIRTH_DATE_IN_YYYY_MM_DD, FI_BUSINESS_NUMBER, FI_ID_NUMBER, FI_NATIONALITY,
	//    and FI_ORGANIZATION_TYPE
	//
	//    * .fr:BRAND_NUMBER, BIRTH_DEPARTMENT, BIRTH_DATE_IN_YYYY_MM_DD, BIRTH_COUNTRY,
	//    and BIRTH_CITY
	//
	//    * .it:BIRTH_COUNTRY, IT_PIN, and IT_REGISTRANT_ENTITY_TYPE
	//
	//    * .ru:BIRTH_DATE_IN_YYYY_MM_DD and RU_PASSPORT_DATA
	//
	//    * .se:BIRTH_COUNTRY and SE_ID_NUMBER
	//
	//    * .sg:SG_ID_NUMBER
	//
	//    * .co.uk, .me.uk, and .org.uk:UK_CONTACT_TYPE and UK_COMPANY_NUMBER
	//
	// In addition, many TLDs require VAT_NUMBER.
	//
	// Name is a required field
	Name ExtraParamName `type:"string" required:"true" enum:"true"`

	// Values corresponding to the additional parameter names required by some top-level
	// domains.
	//
	// Value is a required field
	Value *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ExtraParam) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtraParam) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ExtraParam) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ExtraParam"}
	if len(s.Name) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetContactReachabilityStatusRequest
type GetContactReachabilityStatusInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain for which you want to know whether the registrant
	// contact has confirmed that the email address is valid.
	DomainName *string `locationName:"domainName" type:"string"`
}

// String returns the string representation
func (s GetContactReachabilityStatusInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetContactReachabilityStatusInput) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetContactReachabilityStatusResponse
type GetContactReachabilityStatusOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The domain name for which you requested the reachability status.
	DomainName *string `locationName:"domainName" type:"string"`

	// Whether the registrant contact has responded. Values include the following:
	//
	// PENDINGWe sent the confirmation email and haven't received a response yet.
	//
	// DONEWe sent the email and got confirmation from the registrant contact.
	//
	// EXPIREDThe time limit expired before the registrant contact responded.
	Status ReachabilityStatus `locationName:"status" type:"string" enum:"true"`
}

// String returns the string representation
func (s GetContactReachabilityStatusOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetContactReachabilityStatusOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetContactReachabilityStatusOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The GetDomainDetail request includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetDomainDetailRequest
type GetDomainDetailInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to get detailed information about.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetDomainDetailInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainDetailInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDomainDetailInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetDomainDetailInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The GetDomainDetail response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetDomainDetailResponse
type GetDomainDetailOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Email address to contact to report incorrect contact information for a domain,
	// to report that the domain is being used to send spam, to report that someone
	// is cybersquatting on a domain name, or report some other type of abuse.
	AbuseContactEmail *string `type:"string"`

	// Phone number for reporting abuse.
	AbuseContactPhone *string `type:"string"`

	// Provides details about the domain administrative contact.
	//
	// AdminContact is a required field
	AdminContact *ContactDetail `type:"structure" required:"true"`

	// Specifies whether contact information is concealed from WHOIS queries. If
	// the value is true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If the value is false, WHOIS queries
	// return the information that you entered for the admin contact.
	AdminPrivacy *bool `type:"boolean"`

	// Specifies whether the domain registration is set to renew automatically.
	AutoRenew *bool `type:"boolean"`

	// The date when the domain was created as found in the response to a WHOIS
	// query. The date and time is in Coordinated Universal time (UTC).
	CreationDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// Reserved for future use.
	DnsSec *string `type:"string"`

	// The name of a domain.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// The date when the registration for the domain is set to expire. The date
	// and time is in Coordinated Universal time (UTC).
	ExpirationDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// The name of the domain.
	//
	// Nameservers is a required field
	Nameservers []Nameserver `type:"list" required:"true"`

	// Provides details about the domain registrant.
	//
	// RegistrantContact is a required field
	RegistrantContact *ContactDetail `type:"structure" required:"true"`

	// Specifies whether contact information is concealed from WHOIS queries. If
	// the value is true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If the value is false, WHOIS queries
	// return the information that you entered for the registrant contact (domain
	// owner).
	RegistrantPrivacy *bool `type:"boolean"`

	// Name of the registrar of the domain as identified in the registry. Domains
	// with a .com, .net, or .org TLD are registered by Amazon Registrar. All other
	// domains are registered by our registrar associate, Gandi. The value for domains
	// that are registered by Gandi is "GANDI SAS".
	RegistrarName *string `type:"string"`

	// Web address of the registrar.
	RegistrarUrl *string `type:"string"`

	// Reserved for future use.
	RegistryDomainId *string `type:"string"`

	// Reseller of the domain. Domains registered or transferred using Amazon Route
	// 53 domains will have "Amazon" as the reseller.
	Reseller *string `type:"string"`

	// An array of domain name status codes, also known as Extensible Provisioning
	// Protocol (EPP) status codes.
	//
	// ICANN, the organization that maintains a central database of domain names,
	// has developed a set of domain name status codes that tell you the status
	// of a variety of operations on a domain name, for example, registering a domain
	// name, transferring a domain name to another registrar, renewing the registration
	// for a domain name, and so on. All registrars use this same set of status
	// codes.
	//
	// For a current list of domain name status codes and an explanation of what
	// each code means, go to the ICANN website (https://www.icann.org/) and search
	// for epp status codes. (Search on the ICANN website; web searches sometimes
	// return an old version of the document.)
	StatusList []string `type:"list"`

	// Provides details about the domain technical contact.
	//
	// TechContact is a required field
	TechContact *ContactDetail `type:"structure" required:"true"`

	// Specifies whether contact information is concealed from WHOIS queries. If
	// the value is true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If the value is false, WHOIS queries
	// return the information that you entered for the technical contact.
	TechPrivacy *bool `type:"boolean"`

	// The last updated date of the domain as found in the response to a WHOIS query.
	// The date and time is in Coordinated Universal time (UTC).
	UpdatedDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// The fully qualified name of the WHOIS server that can answer the WHOIS query
	// for the domain.
	WhoIsServer *string `type:"string"`
}

// String returns the string representation
func (s GetDomainDetailOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainDetailOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetDomainDetailOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetDomainSuggestionsRequest
type GetDomainSuggestionsInput struct {
	_ struct{} `type:"structure"`

	// A domain name that you want to use as the basis for a list of possible domain
	// names. The domain name must contain a top-level domain (TLD), such as .com,
	// that Amazon Route 53 supports. For a list of TLDs, see Domains that You Can
	// Register with Amazon Route 53 (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html)
	// in the Amazon Route 53 Developer Guide.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// If OnlyAvailable is true, Amazon Route 53 returns only domain names that
	// are available. If OnlyAvailable is false, Amazon Route 53 returns domain
	// names without checking whether they're available to be registered. To determine
	// whether the domain is available, you can call checkDomainAvailability for
	// each suggestion.
	//
	// OnlyAvailable is a required field
	OnlyAvailable *bool `type:"boolean" required:"true"`

	// The number of suggested domain names that you want Amazon Route 53 to return.
	//
	// SuggestionCount is a required field
	SuggestionCount *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s GetDomainSuggestionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainSuggestionsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDomainSuggestionsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetDomainSuggestionsInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if s.OnlyAvailable == nil {
		invalidParams.Add(aws.NewErrParamRequired("OnlyAvailable"))
	}

	if s.SuggestionCount == nil {
		invalidParams.Add(aws.NewErrParamRequired("SuggestionCount"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetDomainSuggestionsResponse
type GetDomainSuggestionsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A list of possible domain names. If you specified true for OnlyAvailable
	// in the request, the list contains only domains that are available for registration.
	SuggestionsList []DomainSuggestion `type:"list"`
}

// String returns the string representation
func (s GetDomainSuggestionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDomainSuggestionsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetDomainSuggestionsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The GetOperationDetail request includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetOperationDetailRequest
type GetOperationDetailInput struct {
	_ struct{} `type:"structure"`

	// The identifier for the operation for which you want to get the status. Amazon
	// Route 53 returned the identifier in the response to the original request.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetOperationDetailInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOperationDetailInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetOperationDetailInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetOperationDetailInput"}

	if s.OperationId == nil {
		invalidParams.Add(aws.NewErrParamRequired("OperationId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The GetOperationDetail response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/GetOperationDetailResponse
type GetOperationDetailOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The name of a domain.
	DomainName *string `type:"string"`

	// Detailed information on the status including possible errors.
	Message *string `type:"string"`

	// The identifier for the operation.
	OperationId *string `type:"string"`

	// The current status of the requested operation in the system.
	Status OperationStatus `type:"string" enum:"true"`

	// The date when the request was submitted.
	SubmittedDate *time.Time `type:"timestamp" timestampFormat:"unix"`

	// The type of operation that was requested.
	Type OperationType `type:"string" enum:"true"`
}

// String returns the string representation
func (s GetOperationDetailOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetOperationDetailOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetOperationDetailOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The ListDomains request includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListDomainsRequest
type ListDomainsInput struct {
	_ struct{} `type:"structure"`

	// For an initial request for a list of domains, omit this element. If the number
	// of domains that are associated with the current AWS account is greater than
	// the value that you specified for MaxItems, you can use Marker to return additional
	// domains. Get the value of NextPageMarker from the previous response, and
	// submit another request that includes the value of NextPageMarker in the Marker
	// element.
	//
	// Constraints: The marker must match the value specified in the previous request.
	Marker *string `type:"string"`

	// Number of domains to be returned.
	//
	// Default: 20
	MaxItems *int64 `type:"integer"`
}

// String returns the string representation
func (s ListDomainsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDomainsInput) GoString() string {
	return s.String()
}

// The ListDomains response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListDomainsResponse
type ListDomainsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A summary of domains.
	//
	// Domains is a required field
	Domains []DomainSummary `type:"list" required:"true"`

	// If there are more domains than you specified for MaxItems in the request,
	// submit another request and include the value of NextPageMarker in the value
	// of Marker.
	NextPageMarker *string `type:"string"`
}

// String returns the string representation
func (s ListDomainsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDomainsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListDomainsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The ListOperations request includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListOperationsRequest
type ListOperationsInput struct {
	_ struct{} `type:"structure"`

	// For an initial request for a list of operations, omit this element. If the
	// number of operations that are not yet complete is greater than the value
	// that you specified for MaxItems, you can use Marker to return additional
	// operations. Get the value of NextPageMarker from the previous response, and
	// submit another request that includes the value of NextPageMarker in the Marker
	// element.
	Marker *string `type:"string"`

	// Number of domains to be returned.
	//
	// Default: 20
	MaxItems *int64 `type:"integer"`

	// An optional parameter that lets you get information about all the operations
	// that you submitted after a specified date and time. Specify the date and
	// time in Coordinated Universal time (UTC).
	SubmittedSince *time.Time `type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s ListOperationsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsInput) GoString() string {
	return s.String()
}

// The ListOperations response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListOperationsResponse
type ListOperationsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// If there are more operations than you specified for MaxItems in the request,
	// submit another request and include the value of NextPageMarker in the value
	// of Marker.
	NextPageMarker *string `type:"string"`

	// Lists summaries of the operations.
	//
	// Operations is a required field
	Operations []OperationSummary `type:"list" required:"true"`
}

// String returns the string representation
func (s ListOperationsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListOperationsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The ListTagsForDomainRequest includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListTagsForDomainRequest
type ListTagsForDomainInput struct {
	_ struct{} `type:"structure"`

	// The domain for which you want to get a list of tags.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListTagsForDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTagsForDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTagsForDomainInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListTagsForDomainInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The ListTagsForDomain response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ListTagsForDomainResponse
type ListTagsForDomainOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A list of the tags that are associated with the specified domain.
	//
	// TagList is a required field
	TagList []Tag `type:"list" required:"true"`
}

// String returns the string representation
func (s ListTagsForDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTagsForDomainOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListTagsForDomainOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Nameserver includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/Nameserver
type Nameserver struct {
	_ struct{} `type:"structure"`

	// Glue IP address of a name server entry. Glue IP addresses are required only
	// when the name of the name server is a subdomain of the domain. For example,
	// if your domain is example.com and the name server for the domain is ns.example.com,
	// you need to specify the IP address for ns.example.com.
	//
	// Constraints: The list can contain only one IPv4 and one IPv6 address.
	GlueIps []string `type:"list"`

	// The fully qualified host name of the name server.
	//
	// Constraint: Maximum 255 characters
	//
	// Name is a required field
	Name *string `type:"string" required:"true"`
}

// String returns the string representation
func (s Nameserver) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Nameserver) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Nameserver) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Nameserver"}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// OperationSummary includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/OperationSummary
type OperationSummary struct {
	_ struct{} `type:"structure"`

	// Identifier returned to track the requested action.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`

	// The current status of the requested operation in the system.
	//
	// Status is a required field
	Status OperationStatus `type:"string" required:"true" enum:"true"`

	// The date when the request was submitted.
	//
	// SubmittedDate is a required field
	SubmittedDate *time.Time `type:"timestamp" timestampFormat:"unix" required:"true"`

	// Type of the action requested.
	//
	// Type is a required field
	Type OperationType `type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s OperationSummary) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationSummary) GoString() string {
	return s.String()
}

// The RegisterDomain request includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RegisterDomainRequest
type RegisterDomainInput struct {
	_ struct{} `type:"structure"`

	// Provides detailed contact information.
	//
	// AdminContact is a required field
	AdminContact *ContactDetail `type:"structure" required:"true"`

	// Indicates whether the domain will be automatically renewed (true) or not
	// (false). Autorenewal only takes effect after the account is charged.
	//
	// Default: true
	AutoRenew *bool `type:"boolean"`

	// The domain name that you want to register.
	//
	// Constraints: The domain name can contain only the letters a through z, the
	// numbers 0 through 9, and hyphen (-). Internationalized Domain Names are not
	// supported.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// The number of years that you want to register the domain for. Domains are
	// registered for a minimum of one year. The maximum period depends on the top-level
	// domain. For the range of valid values for your domain, see Domains that You
	// Can Register with Amazon Route 53 (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html)
	// in the Amazon Route 53 Developer Guide.
	//
	// Default: 1
	//
	// DurationInYears is a required field
	DurationInYears *int64 `min:"1" type:"integer" required:"true"`

	// Reserved for future use.
	IdnLangCode *string `type:"string"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the admin contact.
	//
	// Default: true
	PrivacyProtectAdminContact *bool `type:"boolean"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the registrant contact (the domain
	// owner).
	//
	// Default: true
	PrivacyProtectRegistrantContact *bool `type:"boolean"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the technical contact.
	//
	// Default: true
	PrivacyProtectTechContact *bool `type:"boolean"`

	// Provides detailed contact information.
	//
	// RegistrantContact is a required field
	RegistrantContact *ContactDetail `type:"structure" required:"true"`

	// Provides detailed contact information.
	//
	// TechContact is a required field
	TechContact *ContactDetail `type:"structure" required:"true"`
}

// String returns the string representation
func (s RegisterDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RegisterDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RegisterDomainInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RegisterDomainInput"}

	if s.AdminContact == nil {
		invalidParams.Add(aws.NewErrParamRequired("AdminContact"))
	}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if s.DurationInYears == nil {
		invalidParams.Add(aws.NewErrParamRequired("DurationInYears"))
	}
	if s.DurationInYears != nil && *s.DurationInYears < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("DurationInYears", 1))
	}

	if s.RegistrantContact == nil {
		invalidParams.Add(aws.NewErrParamRequired("RegistrantContact"))
	}

	if s.TechContact == nil {
		invalidParams.Add(aws.NewErrParamRequired("TechContact"))
	}
	if s.AdminContact != nil {
		if err := s.AdminContact.Validate(); err != nil {
			invalidParams.AddNested("AdminContact", err.(aws.ErrInvalidParams))
		}
	}
	if s.RegistrantContact != nil {
		if err := s.RegistrantContact.Validate(); err != nil {
			invalidParams.AddNested("RegistrantContact", err.(aws.ErrInvalidParams))
		}
	}
	if s.TechContact != nil {
		if err := s.TechContact.Validate(); err != nil {
			invalidParams.AddNested("TechContact", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The RegisterDomain response includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RegisterDomainResponse
type RegisterDomainOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Identifier for tracking the progress of the request. To use this ID to query
	// the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RegisterDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RegisterDomainOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s RegisterDomainOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// A RenewDomain request includes the number of years that you want to renew
// for and the current expiration year.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RenewDomainRequest
type RenewDomainInput struct {
	_ struct{} `type:"structure"`

	// The year when the registration for the domain is set to expire. This value
	// must match the current expiration date for the domain.
	//
	// CurrentExpiryYear is a required field
	CurrentExpiryYear *int64 `type:"integer" required:"true"`

	// The name of the domain that you want to renew.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// The number of years that you want to renew the domain for. The maximum number
	// of years depends on the top-level domain. For the range of valid values for
	// your domain, see Domains that You Can Register with Amazon Route 53 (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html)
	// in the Amazon Route 53 Developer Guide.
	//
	// Default: 1
	DurationInYears *int64 `min:"1" type:"integer"`
}

// String returns the string representation
func (s RenewDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewDomainInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RenewDomainInput"}

	if s.CurrentExpiryYear == nil {
		invalidParams.Add(aws.NewErrParamRequired("CurrentExpiryYear"))
	}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}
	if s.DurationInYears != nil && *s.DurationInYears < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("DurationInYears", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RenewDomainResponse
type RenewDomainOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The identifier for tracking the progress of the request. To use this ID to
	// query the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RenewDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewDomainOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s RenewDomainOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ResendContactReachabilityEmailRequest
type ResendContactReachabilityEmailInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain for which you want Amazon Route 53 to resend a confirmation
	// email to the registrant contact.
	DomainName *string `locationName:"domainName" type:"string"`
}

// String returns the string representation
func (s ResendContactReachabilityEmailInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResendContactReachabilityEmailInput) GoString() string {
	return s.String()
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ResendContactReachabilityEmailResponse
type ResendContactReachabilityEmailOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The domain name for which you requested a confirmation email.
	DomainName *string `locationName:"domainName" type:"string"`

	// The email address for the registrant contact at the time that we sent the
	// verification email.
	EmailAddress *string `locationName:"emailAddress" type:"string"`

	// True if the email address for the registrant contact has already been verified,
	// and false otherwise. If the email address has already been verified, we don't
	// send another confirmation email.
	IsAlreadyVerified *bool `locationName:"isAlreadyVerified" type:"boolean"`
}

// String returns the string representation
func (s ResendContactReachabilityEmailOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResendContactReachabilityEmailOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ResendContactReachabilityEmailOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// A request for the authorization code for the specified domain. To transfer
// a domain to another registrar, you provide this value to the new registrar.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RetrieveDomainAuthCodeRequest
type RetrieveDomainAuthCodeInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to get an authorization code for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RetrieveDomainAuthCodeInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RetrieveDomainAuthCodeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RetrieveDomainAuthCodeInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RetrieveDomainAuthCodeInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The RetrieveDomainAuthCode response includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/RetrieveDomainAuthCodeResponse
type RetrieveDomainAuthCodeOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// The authorization code for the domain.
	//
	// AuthCode is a required field
	AuthCode *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RetrieveDomainAuthCodeOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RetrieveDomainAuthCodeOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s RetrieveDomainAuthCodeOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Each tag includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/Tag
type Tag struct {
	_ struct{} `type:"structure"`

	// The key (name) of a tag.
	//
	// Valid values: A-Z, a-z, 0-9, space, ".:/=+\-@"
	//
	// Constraints: Each key can be 1-128 characters long.
	Key *string `type:"string"`

	// The value of a tag.
	//
	// Valid values: A-Z, a-z, 0-9, space, ".:/=+\-@"
	//
	// Constraints: Each value can be 0-256 characters long.
	Value *string `type:"string"`
}

// String returns the string representation
func (s Tag) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Tag) GoString() string {
	return s.String()
}

// The TransferDomain request includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/TransferDomainRequest
type TransferDomainInput struct {
	_ struct{} `type:"structure"`

	// Provides detailed contact information.
	//
	// AdminContact is a required field
	AdminContact *ContactDetail `type:"structure" required:"true"`

	// The authorization code for the domain. You get this value from the current
	// registrar.
	AuthCode *string `type:"string"`

	// Indicates whether the domain will be automatically renewed (true) or not
	// (false). Autorenewal only takes effect after the account is charged.
	//
	// Default: true
	AutoRenew *bool `type:"boolean"`

	// The name of the domain that you want to transfer to Amazon Route 53.
	//
	// Constraints: The domain name can contain only the letters a through z, the
	// numbers 0 through 9, and hyphen (-). Internationalized Domain Names are not
	// supported.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// The number of years that you want to register the domain for. Domains are
	// registered for a minimum of one year. The maximum period depends on the top-level
	// domain.
	//
	// Default: 1
	//
	// DurationInYears is a required field
	DurationInYears *int64 `min:"1" type:"integer" required:"true"`

	// Reserved for future use.
	IdnLangCode *string `type:"string"`

	// Contains details for the host and glue IP addresses.
	Nameservers []Nameserver `type:"list"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the admin contact.
	//
	// Default: true
	PrivacyProtectAdminContact *bool `type:"boolean"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the registrant contact (domain
	// owner).
	//
	// Default: true
	PrivacyProtectRegistrantContact *bool `type:"boolean"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the technical contact.
	//
	// Default: true
	PrivacyProtectTechContact *bool `type:"boolean"`

	// Provides detailed contact information.
	//
	// RegistrantContact is a required field
	RegistrantContact *ContactDetail `type:"structure" required:"true"`

	// Provides detailed contact information.
	//
	// TechContact is a required field
	TechContact *ContactDetail `type:"structure" required:"true"`
}

// String returns the string representation
func (s TransferDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TransferDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TransferDomainInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "TransferDomainInput"}

	if s.AdminContact == nil {
		invalidParams.Add(aws.NewErrParamRequired("AdminContact"))
	}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if s.DurationInYears == nil {
		invalidParams.Add(aws.NewErrParamRequired("DurationInYears"))
	}
	if s.DurationInYears != nil && *s.DurationInYears < 1 {
		invalidParams.Add(aws.NewErrParamMinValue("DurationInYears", 1))
	}

	if s.RegistrantContact == nil {
		invalidParams.Add(aws.NewErrParamRequired("RegistrantContact"))
	}

	if s.TechContact == nil {
		invalidParams.Add(aws.NewErrParamRequired("TechContact"))
	}
	if s.AdminContact != nil {
		if err := s.AdminContact.Validate(); err != nil {
			invalidParams.AddNested("AdminContact", err.(aws.ErrInvalidParams))
		}
	}
	if s.Nameservers != nil {
		for i, v := range s.Nameservers {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Nameservers", i), err.(aws.ErrInvalidParams))
			}
		}
	}
	if s.RegistrantContact != nil {
		if err := s.RegistrantContact.Validate(); err != nil {
			invalidParams.AddNested("RegistrantContact", err.(aws.ErrInvalidParams))
		}
	}
	if s.TechContact != nil {
		if err := s.TechContact.Validate(); err != nil {
			invalidParams.AddNested("TechContact", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The TranserDomain response includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/TransferDomainResponse
type TransferDomainOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Identifier for tracking the progress of the request. To use this ID to query
	// the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s TransferDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s TransferDomainOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s TransferDomainOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The UpdateDomainContact request includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainContactRequest
type UpdateDomainContactInput struct {
	_ struct{} `type:"structure"`

	// Provides detailed contact information.
	AdminContact *ContactDetail `type:"structure"`

	// The name of the domain that you want to update contact information for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// Provides detailed contact information.
	RegistrantContact *ContactDetail `type:"structure"`

	// Provides detailed contact information.
	TechContact *ContactDetail `type:"structure"`
}

// String returns the string representation
func (s UpdateDomainContactInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDomainContactInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateDomainContactInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}
	if s.AdminContact != nil {
		if err := s.AdminContact.Validate(); err != nil {
			invalidParams.AddNested("AdminContact", err.(aws.ErrInvalidParams))
		}
	}
	if s.RegistrantContact != nil {
		if err := s.RegistrantContact.Validate(); err != nil {
			invalidParams.AddNested("RegistrantContact", err.(aws.ErrInvalidParams))
		}
	}
	if s.TechContact != nil {
		if err := s.TechContact.Validate(); err != nil {
			invalidParams.AddNested("TechContact", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The UpdateDomainContact response includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainContactResponse
type UpdateDomainContactOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Identifier for tracking the progress of the request. To use this ID to query
	// the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateDomainContactOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateDomainContactOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The UpdateDomainContactPrivacy request includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainContactPrivacyRequest
type UpdateDomainContactPrivacyInput struct {
	_ struct{} `type:"structure"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the admin contact.
	AdminPrivacy *bool `type:"boolean"`

	// The name of the domain that you want to update the privacy setting for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the registrant contact (domain
	// owner).
	RegistrantPrivacy *bool `type:"boolean"`

	// Whether you want to conceal contact information from WHOIS queries. If you
	// specify true, WHOIS ("who is") queries return contact information either
	// for Amazon Registrar (for .com, .net, and .org domains) or for our registrar
	// associate, Gandi (for all other TLDs). If you specify false, WHOIS queries
	// return the information that you entered for the technical contact.
	TechPrivacy *bool `type:"boolean"`
}

// String returns the string representation
func (s UpdateDomainContactPrivacyInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactPrivacyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDomainContactPrivacyInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateDomainContactPrivacyInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The UpdateDomainContactPrivacy response includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainContactPrivacyResponse
type UpdateDomainContactPrivacyOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Identifier for tracking the progress of the request. To use this ID to query
	// the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateDomainContactPrivacyOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainContactPrivacyOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateDomainContactPrivacyOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// Replaces the current set of name servers for the domain with the specified
// set of name servers. If you use Amazon Route 53 as your DNS service, specify
// the four name servers in the delegation set for the hosted zone for the domain.
//
// If successful, this operation returns an operation ID that you can use to
// track the progress and completion of the action. If the request is not completed
// successfully, the domain registrant will be notified by email.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainNameserversRequest
type UpdateDomainNameserversInput struct {
	_ struct{} `type:"structure"`

	// The name of the domain that you want to change name servers for.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// The authorization key for .fi domains
	FIAuthKey *string `deprecated:"true" type:"string"`

	// A list of new name servers for the domain.
	//
	// Nameservers is a required field
	Nameservers []Nameserver `type:"list" required:"true"`
}

// String returns the string representation
func (s UpdateDomainNameserversInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainNameserversInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDomainNameserversInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateDomainNameserversInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if s.Nameservers == nil {
		invalidParams.Add(aws.NewErrParamRequired("Nameservers"))
	}
	if s.Nameservers != nil {
		for i, v := range s.Nameservers {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Nameservers", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The UpdateDomainNameservers response includes the following element.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateDomainNameserversResponse
type UpdateDomainNameserversOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// Identifier for tracking the progress of the request. To use this ID to query
	// the operation status, use GetOperationDetail.
	//
	// OperationId is a required field
	OperationId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateDomainNameserversOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDomainNameserversOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateDomainNameserversOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The UpdateTagsForDomainRequest includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateTagsForDomainRequest
type UpdateTagsForDomainInput struct {
	_ struct{} `type:"structure"`

	// The domain for which you want to add or update tags.
	//
	// DomainName is a required field
	DomainName *string `type:"string" required:"true"`

	// A list of the tag keys and values that you want to add or update. If you
	// specify a key that already exists, the corresponding value will be replaced.
	TagsToUpdate []Tag `type:"list"`
}

// String returns the string representation
func (s UpdateTagsForDomainInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTagsForDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateTagsForDomainInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateTagsForDomainInput"}

	if s.DomainName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DomainName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/UpdateTagsForDomainResponse
type UpdateTagsForDomainOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response
}

// String returns the string representation
func (s UpdateTagsForDomainOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTagsForDomainOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateTagsForDomainOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// The ViewBilling request includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ViewBillingRequest
type ViewBillingInput struct {
	_ struct{} `type:"structure"`

	// The end date and time for the time period for which you want a list of billing
	// records. Specify the date and time in Coordinated Universal time (UTC).
	End *time.Time `type:"timestamp" timestampFormat:"unix"`

	// For an initial request for a list of billing records, omit this element.
	// If the number of billing records that are associated with the current AWS
	// account during the specified period is greater than the value that you specified
	// for MaxItems, you can use Marker to return additional billing records. Get
	// the value of NextPageMarker from the previous response, and submit another
	// request that includes the value of NextPageMarker in the Marker element.
	//
	// Constraints: The marker must match the value of NextPageMarker that was returned
	// in the previous response.
	Marker *string `type:"string"`

	// The number of billing records to be returned.
	//
	// Default: 20
	MaxItems *int64 `type:"integer"`

	// The beginning date and time for the time period for which you want a list
	// of billing records. Specify the date and time in Coordinated Universal time
	// (UTC).
	Start *time.Time `type:"timestamp" timestampFormat:"unix"`
}

// String returns the string representation
func (s ViewBillingInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ViewBillingInput) GoString() string {
	return s.String()
}

// The ViewBilling response includes the following elements.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53domains-2014-05-15/ViewBillingResponse
type ViewBillingOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	// A summary of billing records.
	BillingRecords []BillingRecord `type:"list"`

	// If there are more billing records than you specified for MaxItems in the
	// request, submit another request and include the value of NextPageMarker in
	// the value of Marker.
	NextPageMarker *string `type:"string"`
}

// String returns the string representation
func (s ViewBillingOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ViewBillingOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ViewBillingOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

type ContactType string

// Enum values for ContactType
const (
	ContactTypePerson      ContactType = "PERSON"
	ContactTypeCompany     ContactType = "COMPANY"
	ContactTypeAssociation ContactType = "ASSOCIATION"
	ContactTypePublicBody  ContactType = "PUBLIC_BODY"
	ContactTypeReseller    ContactType = "RESELLER"
)

func (enum ContactType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ContactType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type CountryCode string

// Enum values for CountryCode
const (
	CountryCodeAd CountryCode = "AD"
	CountryCodeAe CountryCode = "AE"
	CountryCodeAf CountryCode = "AF"
	CountryCodeAg CountryCode = "AG"
	CountryCodeAi CountryCode = "AI"
	CountryCodeAl CountryCode = "AL"
	CountryCodeAm CountryCode = "AM"
	CountryCodeAn CountryCode = "AN"
	CountryCodeAo CountryCode = "AO"
	CountryCodeAq CountryCode = "AQ"
	CountryCodeAr CountryCode = "AR"
	CountryCodeAs CountryCode = "AS"
	CountryCodeAt CountryCode = "AT"
	CountryCodeAu CountryCode = "AU"
	CountryCodeAw CountryCode = "AW"
	CountryCodeAz CountryCode = "AZ"
	CountryCodeBa CountryCode = "BA"
	CountryCodeBb CountryCode = "BB"
	CountryCodeBd CountryCode = "BD"
	CountryCodeBe CountryCode = "BE"
	CountryCodeBf CountryCode = "BF"
	CountryCodeBg CountryCode = "BG"
	CountryCodeBh CountryCode = "BH"
	CountryCodeBi CountryCode = "BI"
	CountryCodeBj CountryCode = "BJ"
	CountryCodeBl CountryCode = "BL"
	CountryCodeBm CountryCode = "BM"
	CountryCodeBn CountryCode = "BN"
	CountryCodeBo CountryCode = "BO"
	CountryCodeBr CountryCode = "BR"
	CountryCodeBs CountryCode = "BS"
	CountryCodeBt CountryCode = "BT"
	CountryCodeBw CountryCode = "BW"
	CountryCodeBy CountryCode = "BY"
	CountryCodeBz CountryCode = "BZ"
	CountryCodeCa CountryCode = "CA"
	CountryCodeCc CountryCode = "CC"
	CountryCodeCd CountryCode = "CD"
	CountryCodeCf CountryCode = "CF"
	CountryCodeCg CountryCode = "CG"
	CountryCodeCh CountryCode = "CH"
	CountryCodeCi CountryCode = "CI"
	CountryCodeCk CountryCode = "CK"
	CountryCodeCl CountryCode = "CL"
	CountryCodeCm CountryCode = "CM"
	CountryCodeCn CountryCode = "CN"
	CountryCodeCo CountryCode = "CO"
	CountryCodeCr CountryCode = "CR"
	CountryCodeCu CountryCode = "CU"
	CountryCodeCv CountryCode = "CV"
	CountryCodeCx CountryCode = "CX"
	CountryCodeCy CountryCode = "CY"
	CountryCodeCz CountryCode = "CZ"
	CountryCodeDe CountryCode = "DE"
	CountryCodeDj CountryCode = "DJ"
	CountryCodeDk CountryCode = "DK"
	CountryCodeDm CountryCode = "DM"
	CountryCodeDo CountryCode = "DO"
	CountryCodeDz CountryCode = "DZ"
	CountryCodeEc CountryCode = "EC"
	CountryCodeEe CountryCode = "EE"
	CountryCodeEg CountryCode = "EG"
	CountryCodeEr CountryCode = "ER"
	CountryCodeEs CountryCode = "ES"
	CountryCodeEt CountryCode = "ET"
	CountryCodeFi CountryCode = "FI"
	CountryCodeFj CountryCode = "FJ"
	CountryCodeFk CountryCode = "FK"
	CountryCodeFm CountryCode = "FM"
	CountryCodeFo CountryCode = "FO"
	CountryCodeFr CountryCode = "FR"
	CountryCodeGa CountryCode = "GA"
	CountryCodeGb CountryCode = "GB"
	CountryCodeGd CountryCode = "GD"
	CountryCodeGe CountryCode = "GE"
	CountryCodeGh CountryCode = "GH"
	CountryCodeGi CountryCode = "GI"
	CountryCodeGl CountryCode = "GL"
	CountryCodeGm CountryCode = "GM"
	CountryCodeGn CountryCode = "GN"
	CountryCodeGq CountryCode = "GQ"
	CountryCodeGr CountryCode = "GR"
	CountryCodeGt CountryCode = "GT"
	CountryCodeGu CountryCode = "GU"
	CountryCodeGw CountryCode = "GW"
	CountryCodeGy CountryCode = "GY"
	CountryCodeHk CountryCode = "HK"
	CountryCodeHn CountryCode = "HN"
	CountryCodeHr CountryCode = "HR"
	CountryCodeHt CountryCode = "HT"
	CountryCodeHu CountryCode = "HU"
	CountryCodeId CountryCode = "ID"
	CountryCodeIe CountryCode = "IE"
	CountryCodeIl CountryCode = "IL"
	CountryCodeIm CountryCode = "IM"
	CountryCodeIn CountryCode = "IN"
	CountryCodeIq CountryCode = "IQ"
	CountryCodeIr CountryCode = "IR"
	CountryCodeIs CountryCode = "IS"
	CountryCodeIt CountryCode = "IT"
	CountryCodeJm CountryCode = "JM"
	CountryCodeJo CountryCode = "JO"
	CountryCodeJp CountryCode = "JP"
	CountryCodeKe CountryCode = "KE"
	CountryCodeKg CountryCode = "KG"
	CountryCodeKh CountryCode = "KH"
	CountryCodeKi CountryCode = "KI"
	CountryCodeKm CountryCode = "KM"
	CountryCodeKn CountryCode = "KN"
	CountryCodeKp CountryCode = "KP"
	CountryCodeKr CountryCode = "KR"
	CountryCodeKw CountryCode = "KW"
	CountryCodeKy CountryCode = "KY"
	CountryCodeKz CountryCode = "KZ"
	CountryCodeLa CountryCode = "LA"
	CountryCodeLb CountryCode = "LB"
	CountryCodeLc CountryCode = "LC"
	CountryCodeLi CountryCode = "LI"
	CountryCodeLk CountryCode = "LK"
	CountryCodeLr CountryCode = "LR"
	CountryCodeLs CountryCode = "LS"
	CountryCodeLt CountryCode = "LT"
	CountryCodeLu CountryCode = "LU"
	CountryCodeLv CountryCode = "LV"
	CountryCodeLy CountryCode = "LY"
	CountryCodeMa CountryCode = "MA"
	CountryCodeMc CountryCode = "MC"
	CountryCodeMd CountryCode = "MD"
	CountryCodeMe CountryCode = "ME"
	CountryCodeMf CountryCode = "MF"
	CountryCodeMg CountryCode = "MG"
	CountryCodeMh CountryCode = "MH"
	CountryCodeMk CountryCode = "MK"
	CountryCodeMl CountryCode = "ML"
	CountryCodeMm CountryCode = "MM"
	CountryCodeMn CountryCode = "MN"
	CountryCodeMo CountryCode = "MO"
	CountryCodeMp CountryCode = "MP"
	CountryCodeMr CountryCode = "MR"
	CountryCodeMs CountryCode = "MS"
	CountryCodeMt CountryCode = "MT"
	CountryCodeMu CountryCode = "MU"
	CountryCodeMv CountryCode = "MV"
	CountryCodeMw CountryCode = "MW"
	CountryCodeMx CountryCode = "MX"
	CountryCodeMy CountryCode = "MY"
	CountryCodeMz CountryCode = "MZ"
	CountryCodeNa CountryCode = "NA"
	CountryCodeNc CountryCode = "NC"
	CountryCodeNe CountryCode = "NE"
	CountryCodeNg CountryCode = "NG"
	CountryCodeNi CountryCode = "NI"
	CountryCodeNl CountryCode = "NL"
	CountryCodeNo CountryCode = "NO"
	CountryCodeNp CountryCode = "NP"
	CountryCodeNr CountryCode = "NR"
	CountryCodeNu CountryCode = "NU"
	CountryCodeNz CountryCode = "NZ"
	CountryCodeOm CountryCode = "OM"
	CountryCodePa CountryCode = "PA"
	CountryCodePe CountryCode = "PE"
	CountryCodePf CountryCode = "PF"
	CountryCodePg CountryCode = "PG"
	CountryCodePh CountryCode = "PH"
	CountryCodePk CountryCode = "PK"
	CountryCodePl CountryCode = "PL"
	CountryCodePm CountryCode = "PM"
	CountryCodePn CountryCode = "PN"
	CountryCodePr CountryCode = "PR"
	CountryCodePt CountryCode = "PT"
	CountryCodePw CountryCode = "PW"
	CountryCodePy CountryCode = "PY"
	CountryCodeQa CountryCode = "QA"
	CountryCodeRo CountryCode = "RO"
	CountryCodeRs CountryCode = "RS"
	CountryCodeRu CountryCode = "RU"
	CountryCodeRw CountryCode = "RW"
	CountryCodeSa CountryCode = "SA"
	CountryCodeSb CountryCode = "SB"
	CountryCodeSc CountryCode = "SC"
	CountryCodeSd CountryCode = "SD"
	CountryCodeSe CountryCode = "SE"
	CountryCodeSg CountryCode = "SG"
	CountryCodeSh CountryCode = "SH"
	CountryCodeSi CountryCode = "SI"
	CountryCodeSk CountryCode = "SK"
	CountryCodeSl CountryCode = "SL"
	CountryCodeSm CountryCode = "SM"
	CountryCodeSn CountryCode = "SN"
	CountryCodeSo CountryCode = "SO"
	CountryCodeSr CountryCode = "SR"
	CountryCodeSt CountryCode = "ST"
	CountryCodeSv CountryCode = "SV"
	CountryCodeSy CountryCode = "SY"
	CountryCodeSz CountryCode = "SZ"
	CountryCodeTc CountryCode = "TC"
	CountryCodeTd CountryCode = "TD"
	CountryCodeTg CountryCode = "TG"
	CountryCodeTh CountryCode = "TH"
	CountryCodeTj CountryCode = "TJ"
	CountryCodeTk CountryCode = "TK"
	CountryCodeTl CountryCode = "TL"
	CountryCodeTm CountryCode = "TM"
	CountryCodeTn CountryCode = "TN"
	CountryCodeTo CountryCode = "TO"
	CountryCodeTr CountryCode = "TR"
	CountryCodeTt CountryCode = "TT"
	CountryCodeTv CountryCode = "TV"
	CountryCodeTw CountryCode = "TW"
	CountryCodeTz CountryCode = "TZ"
	CountryCodeUa CountryCode = "UA"
	CountryCodeUg CountryCode = "UG"
	CountryCodeUs CountryCode = "US"
	CountryCodeUy CountryCode = "UY"
	CountryCodeUz CountryCode = "UZ"
	CountryCodeVa CountryCode = "VA"
	CountryCodeVc CountryCode = "VC"
	CountryCodeVe CountryCode = "VE"
	CountryCodeVg CountryCode = "VG"
	CountryCodeVi CountryCode = "VI"
	CountryCodeVn CountryCode = "VN"
	CountryCodeVu CountryCode = "VU"
	CountryCodeWf CountryCode = "WF"
	CountryCodeWs CountryCode = "WS"
	CountryCodeYe CountryCode = "YE"
	CountryCodeYt CountryCode = "YT"
	CountryCodeZa CountryCode = "ZA"
	CountryCodeZm CountryCode = "ZM"
	CountryCodeZw CountryCode = "ZW"
)

func (enum CountryCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum CountryCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DomainAvailability string

// Enum values for DomainAvailability
const (
	DomainAvailabilityAvailable             DomainAvailability = "AVAILABLE"
	DomainAvailabilityAvailableReserved     DomainAvailability = "AVAILABLE_RESERVED"
	DomainAvailabilityAvailablePreorder     DomainAvailability = "AVAILABLE_PREORDER"
	DomainAvailabilityUnavailable           DomainAvailability = "UNAVAILABLE"
	DomainAvailabilityUnavailablePremium    DomainAvailability = "UNAVAILABLE_PREMIUM"
	DomainAvailabilityUnavailableRestricted DomainAvailability = "UNAVAILABLE_RESTRICTED"
	DomainAvailabilityReserved              DomainAvailability = "RESERVED"
	DomainAvailabilityDontKnow              DomainAvailability = "DONT_KNOW"
)

func (enum DomainAvailability) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DomainAvailability) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ExtraParamName string

// Enum values for ExtraParamName
const (
	ExtraParamNameDunsNumber             ExtraParamName = "DUNS_NUMBER"
	ExtraParamNameBrandNumber            ExtraParamName = "BRAND_NUMBER"
	ExtraParamNameBirthDepartment        ExtraParamName = "BIRTH_DEPARTMENT"
	ExtraParamNameBirthDateInYyyyMmDd    ExtraParamName = "BIRTH_DATE_IN_YYYY_MM_DD"
	ExtraParamNameBirthCountry           ExtraParamName = "BIRTH_COUNTRY"
	ExtraParamNameBirthCity              ExtraParamName = "BIRTH_CITY"
	ExtraParamNameDocumentNumber         ExtraParamName = "DOCUMENT_NUMBER"
	ExtraParamNameAuIdNumber             ExtraParamName = "AU_ID_NUMBER"
	ExtraParamNameAuIdType               ExtraParamName = "AU_ID_TYPE"
	ExtraParamNameCaLegalType            ExtraParamName = "CA_LEGAL_TYPE"
	ExtraParamNameCaBusinessEntityType   ExtraParamName = "CA_BUSINESS_ENTITY_TYPE"
	ExtraParamNameEsIdentification       ExtraParamName = "ES_IDENTIFICATION"
	ExtraParamNameEsIdentificationType   ExtraParamName = "ES_IDENTIFICATION_TYPE"
	ExtraParamNameEsLegalForm            ExtraParamName = "ES_LEGAL_FORM"
	ExtraParamNameFiBusinessNumber       ExtraParamName = "FI_BUSINESS_NUMBER"
	ExtraParamNameFiIdNumber             ExtraParamName = "FI_ID_NUMBER"
	ExtraParamNameFiNationality          ExtraParamName = "FI_NATIONALITY"
	ExtraParamNameFiOrganizationType     ExtraParamName = "FI_ORGANIZATION_TYPE"
	ExtraParamNameItPin                  ExtraParamName = "IT_PIN"
	ExtraParamNameItRegistrantEntityType ExtraParamName = "IT_REGISTRANT_ENTITY_TYPE"
	ExtraParamNameRuPassportData         ExtraParamName = "RU_PASSPORT_DATA"
	ExtraParamNameSeIdNumber             ExtraParamName = "SE_ID_NUMBER"
	ExtraParamNameSgIdNumber             ExtraParamName = "SG_ID_NUMBER"
	ExtraParamNameVatNumber              ExtraParamName = "VAT_NUMBER"
	ExtraParamNameUkContactType          ExtraParamName = "UK_CONTACT_TYPE"
	ExtraParamNameUkCompanyNumber        ExtraParamName = "UK_COMPANY_NUMBER"
)

func (enum ExtraParamName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ExtraParamName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationStatus string

// Enum values for OperationStatus
const (
	OperationStatusSubmitted  OperationStatus = "SUBMITTED"
	OperationStatusInProgress OperationStatus = "IN_PROGRESS"
	OperationStatusError      OperationStatus = "ERROR"
	OperationStatusSuccessful OperationStatus = "SUCCESSFUL"
	OperationStatusFailed     OperationStatus = "FAILED"
)

func (enum OperationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationType string

// Enum values for OperationType
const (
	OperationTypeRegisterDomain          OperationType = "REGISTER_DOMAIN"
	OperationTypeDeleteDomain            OperationType = "DELETE_DOMAIN"
	OperationTypeTransferInDomain        OperationType = "TRANSFER_IN_DOMAIN"
	OperationTypeUpdateDomainContact     OperationType = "UPDATE_DOMAIN_CONTACT"
	OperationTypeUpdateNameserver        OperationType = "UPDATE_NAMESERVER"
	OperationTypeChangePrivacyProtection OperationType = "CHANGE_PRIVACY_PROTECTION"
	OperationTypeDomainLock              OperationType = "DOMAIN_LOCK"
	OperationTypeEnableAutorenew         OperationType = "ENABLE_AUTORENEW"
	OperationTypeDisableAutorenew        OperationType = "DISABLE_AUTORENEW"
	OperationTypeAddDnssec               OperationType = "ADD_DNSSEC"
	OperationTypeRemoveDnssec            OperationType = "REMOVE_DNSSEC"
	OperationTypeExpireDomain            OperationType = "EXPIRE_DOMAIN"
	OperationTypeTransferOutDomain       OperationType = "TRANSFER_OUT_DOMAIN"
	OperationTypeChangeDomainOwner       OperationType = "CHANGE_DOMAIN_OWNER"
	OperationTypeRenewDomain             OperationType = "RENEW_DOMAIN"
	OperationTypePushDomain              OperationType = "PUSH_DOMAIN"
)

func (enum OperationType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReachabilityStatus string

// Enum values for ReachabilityStatus
const (
	ReachabilityStatusPending ReachabilityStatus = "PENDING"
	ReachabilityStatusDone    ReachabilityStatus = "DONE"
	ReachabilityStatusExpired ReachabilityStatus = "EXPIRED"
)

func (enum ReachabilityStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReachabilityStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// Whether the domain name can be transferred to Amazon Route 53.
//
// You can transfer only domains that have a value of TRANSFERABLE for Transferable.
//
// Valid values:
//
// TRANSFERABLEThe domain name can be transferred to Amazon Route 53.
//
// UNTRANSFERRABLEThe domain name can't be transferred to Amazon Route 53.
//
// DONT_KNOWReserved for future use.
type Transferable string

// Enum values for Transferable
const (
	TransferableTransferable   Transferable = "TRANSFERABLE"
	TransferableUntransferable Transferable = "UNTRANSFERABLE"
	TransferableDontKnow       Transferable = "DONT_KNOW"
)

func (enum Transferable) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Transferable) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
