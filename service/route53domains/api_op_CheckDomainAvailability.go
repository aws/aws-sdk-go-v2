// Code generated by smithy-go-codegen DO NOT EDIT.

package route53domains

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/route53domains/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// This operation checks the availability of one domain name. Note that if the
// availability status of a domain is pending, you must submit another request to
// determine the availability of the domain name.
func (c *Client) CheckDomainAvailability(ctx context.Context, params *CheckDomainAvailabilityInput, optFns ...func(*Options)) (*CheckDomainAvailabilityOutput, error) {
	stack := middleware.NewStack("CheckDomainAvailability", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCheckDomainAvailabilityMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCheckDomainAvailabilityValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCheckDomainAvailability(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CheckDomainAvailability",
			Err:           err,
		}
	}
	out := result.(*CheckDomainAvailabilityOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The CheckDomainAvailability request contains the following elements.
type CheckDomainAvailabilityInput struct {
	// Reserved for future use.
	IdnLangCode *string
	// The name of the domain that you want to get availability for. The top-level
	// domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of
	// supported TLDs, see Domains that You Can Register with Amazon Route 53
	// (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html)
	// in the Amazon Route 53 Developer Guide. The domain name can contain only the
	// following characters:
	//
	//     * Letters a through z. Domain names are not case
	// sensitive.
	//
	//     * Numbers 0 through 9.
	//
	//     * Hyphen (-). You can't specify a
	// hyphen at the beginning or end of a label.
	//
	//     * Period (.) to separate the
	// labels in the name, such as the . in example.com.
	//
	// Internationalized domain
	// names are not supported for some top-level domains. To determine whether the TLD
	// that you want to use supports internationalized domain names, see Domains that
	// You Can Register with Amazon Route 53
	// (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html).
	// For more information, see Formatting Internationalized Domain Names
	// (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html#domain-name-format-idns).
	DomainName *string
}

// The CheckDomainAvailability response includes the following elements.
type CheckDomainAvailabilityOutput struct {
	// Whether the domain name is available for registering. You can register only
	// domains designated as AVAILABLE. Valid values: AVAILABLE The domain name is
	// available. AVAILABLE_RESERVED The domain name is reserved under specific
	// conditions. AVAILABLE_PREORDER The domain name is available and can be
	// preordered. DONT_KNOW The TLD registry didn't reply with a definitive answer
	// about whether the domain name is available. Route 53 can return this response
	// for a variety of reasons, for example, the registry is performing maintenance.
	// Try again later. PENDING The TLD registry didn't return a response in the
	// expected amount of time. When the response is delayed, it usually takes just a
	// few extra seconds. You can resubmit the request immediately. RESERVED The domain
	// name has been reserved for another person or organization. UNAVAILABLE The
	// domain name is not available. UNAVAILABLE_PREMIUM The domain name is not
	// available. UNAVAILABLE_RESTRICTED The domain name is forbidden.
	Availability types.DomainAvailability

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCheckDomainAvailabilityMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCheckDomainAvailability{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCheckDomainAvailability{}, middleware.After)
}

func newServiceMetadataMiddleware_opCheckDomainAvailability(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "route53domains",
		OperationName: "CheckDomainAvailability",
	}
}
