// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package route53domains

type ContactType string

// Enum values for ContactType
const (
	ContactTypePerson      ContactType = "PERSON"
	ContactTypeCompany     ContactType = "COMPANY"
	ContactTypeAssociation ContactType = "ASSOCIATION"
	ContactTypePublicBody  ContactType = "PUBLIC_BODY"
	ContactTypeReseller    ContactType = "RESELLER"
)

func (enum ContactType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ContactType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type CountryCode string

// Enum values for CountryCode
const (
	CountryCodeAd CountryCode = "AD"
	CountryCodeAe CountryCode = "AE"
	CountryCodeAf CountryCode = "AF"
	CountryCodeAg CountryCode = "AG"
	CountryCodeAi CountryCode = "AI"
	CountryCodeAl CountryCode = "AL"
	CountryCodeAm CountryCode = "AM"
	CountryCodeAn CountryCode = "AN"
	CountryCodeAo CountryCode = "AO"
	CountryCodeAq CountryCode = "AQ"
	CountryCodeAr CountryCode = "AR"
	CountryCodeAs CountryCode = "AS"
	CountryCodeAt CountryCode = "AT"
	CountryCodeAu CountryCode = "AU"
	CountryCodeAw CountryCode = "AW"
	CountryCodeAz CountryCode = "AZ"
	CountryCodeBa CountryCode = "BA"
	CountryCodeBb CountryCode = "BB"
	CountryCodeBd CountryCode = "BD"
	CountryCodeBe CountryCode = "BE"
	CountryCodeBf CountryCode = "BF"
	CountryCodeBg CountryCode = "BG"
	CountryCodeBh CountryCode = "BH"
	CountryCodeBi CountryCode = "BI"
	CountryCodeBj CountryCode = "BJ"
	CountryCodeBl CountryCode = "BL"
	CountryCodeBm CountryCode = "BM"
	CountryCodeBn CountryCode = "BN"
	CountryCodeBo CountryCode = "BO"
	CountryCodeBr CountryCode = "BR"
	CountryCodeBs CountryCode = "BS"
	CountryCodeBt CountryCode = "BT"
	CountryCodeBw CountryCode = "BW"
	CountryCodeBy CountryCode = "BY"
	CountryCodeBz CountryCode = "BZ"
	CountryCodeCa CountryCode = "CA"
	CountryCodeCc CountryCode = "CC"
	CountryCodeCd CountryCode = "CD"
	CountryCodeCf CountryCode = "CF"
	CountryCodeCg CountryCode = "CG"
	CountryCodeCh CountryCode = "CH"
	CountryCodeCi CountryCode = "CI"
	CountryCodeCk CountryCode = "CK"
	CountryCodeCl CountryCode = "CL"
	CountryCodeCm CountryCode = "CM"
	CountryCodeCn CountryCode = "CN"
	CountryCodeCo CountryCode = "CO"
	CountryCodeCr CountryCode = "CR"
	CountryCodeCu CountryCode = "CU"
	CountryCodeCv CountryCode = "CV"
	CountryCodeCx CountryCode = "CX"
	CountryCodeCy CountryCode = "CY"
	CountryCodeCz CountryCode = "CZ"
	CountryCodeDe CountryCode = "DE"
	CountryCodeDj CountryCode = "DJ"
	CountryCodeDk CountryCode = "DK"
	CountryCodeDm CountryCode = "DM"
	CountryCodeDo CountryCode = "DO"
	CountryCodeDz CountryCode = "DZ"
	CountryCodeEc CountryCode = "EC"
	CountryCodeEe CountryCode = "EE"
	CountryCodeEg CountryCode = "EG"
	CountryCodeEr CountryCode = "ER"
	CountryCodeEs CountryCode = "ES"
	CountryCodeEt CountryCode = "ET"
	CountryCodeFi CountryCode = "FI"
	CountryCodeFj CountryCode = "FJ"
	CountryCodeFk CountryCode = "FK"
	CountryCodeFm CountryCode = "FM"
	CountryCodeFo CountryCode = "FO"
	CountryCodeFr CountryCode = "FR"
	CountryCodeGa CountryCode = "GA"
	CountryCodeGb CountryCode = "GB"
	CountryCodeGd CountryCode = "GD"
	CountryCodeGe CountryCode = "GE"
	CountryCodeGh CountryCode = "GH"
	CountryCodeGi CountryCode = "GI"
	CountryCodeGl CountryCode = "GL"
	CountryCodeGm CountryCode = "GM"
	CountryCodeGn CountryCode = "GN"
	CountryCodeGq CountryCode = "GQ"
	CountryCodeGr CountryCode = "GR"
	CountryCodeGt CountryCode = "GT"
	CountryCodeGu CountryCode = "GU"
	CountryCodeGw CountryCode = "GW"
	CountryCodeGy CountryCode = "GY"
	CountryCodeHk CountryCode = "HK"
	CountryCodeHn CountryCode = "HN"
	CountryCodeHr CountryCode = "HR"
	CountryCodeHt CountryCode = "HT"
	CountryCodeHu CountryCode = "HU"
	CountryCodeId CountryCode = "ID"
	CountryCodeIe CountryCode = "IE"
	CountryCodeIl CountryCode = "IL"
	CountryCodeIm CountryCode = "IM"
	CountryCodeIn CountryCode = "IN"
	CountryCodeIq CountryCode = "IQ"
	CountryCodeIr CountryCode = "IR"
	CountryCodeIs CountryCode = "IS"
	CountryCodeIt CountryCode = "IT"
	CountryCodeJm CountryCode = "JM"
	CountryCodeJo CountryCode = "JO"
	CountryCodeJp CountryCode = "JP"
	CountryCodeKe CountryCode = "KE"
	CountryCodeKg CountryCode = "KG"
	CountryCodeKh CountryCode = "KH"
	CountryCodeKi CountryCode = "KI"
	CountryCodeKm CountryCode = "KM"
	CountryCodeKn CountryCode = "KN"
	CountryCodeKp CountryCode = "KP"
	CountryCodeKr CountryCode = "KR"
	CountryCodeKw CountryCode = "KW"
	CountryCodeKy CountryCode = "KY"
	CountryCodeKz CountryCode = "KZ"
	CountryCodeLa CountryCode = "LA"
	CountryCodeLb CountryCode = "LB"
	CountryCodeLc CountryCode = "LC"
	CountryCodeLi CountryCode = "LI"
	CountryCodeLk CountryCode = "LK"
	CountryCodeLr CountryCode = "LR"
	CountryCodeLs CountryCode = "LS"
	CountryCodeLt CountryCode = "LT"
	CountryCodeLu CountryCode = "LU"
	CountryCodeLv CountryCode = "LV"
	CountryCodeLy CountryCode = "LY"
	CountryCodeMa CountryCode = "MA"
	CountryCodeMc CountryCode = "MC"
	CountryCodeMd CountryCode = "MD"
	CountryCodeMe CountryCode = "ME"
	CountryCodeMf CountryCode = "MF"
	CountryCodeMg CountryCode = "MG"
	CountryCodeMh CountryCode = "MH"
	CountryCodeMk CountryCode = "MK"
	CountryCodeMl CountryCode = "ML"
	CountryCodeMm CountryCode = "MM"
	CountryCodeMn CountryCode = "MN"
	CountryCodeMo CountryCode = "MO"
	CountryCodeMp CountryCode = "MP"
	CountryCodeMr CountryCode = "MR"
	CountryCodeMs CountryCode = "MS"
	CountryCodeMt CountryCode = "MT"
	CountryCodeMu CountryCode = "MU"
	CountryCodeMv CountryCode = "MV"
	CountryCodeMw CountryCode = "MW"
	CountryCodeMx CountryCode = "MX"
	CountryCodeMy CountryCode = "MY"
	CountryCodeMz CountryCode = "MZ"
	CountryCodeNa CountryCode = "NA"
	CountryCodeNc CountryCode = "NC"
	CountryCodeNe CountryCode = "NE"
	CountryCodeNg CountryCode = "NG"
	CountryCodeNi CountryCode = "NI"
	CountryCodeNl CountryCode = "NL"
	CountryCodeNo CountryCode = "NO"
	CountryCodeNp CountryCode = "NP"
	CountryCodeNr CountryCode = "NR"
	CountryCodeNu CountryCode = "NU"
	CountryCodeNz CountryCode = "NZ"
	CountryCodeOm CountryCode = "OM"
	CountryCodePa CountryCode = "PA"
	CountryCodePe CountryCode = "PE"
	CountryCodePf CountryCode = "PF"
	CountryCodePg CountryCode = "PG"
	CountryCodePh CountryCode = "PH"
	CountryCodePk CountryCode = "PK"
	CountryCodePl CountryCode = "PL"
	CountryCodePm CountryCode = "PM"
	CountryCodePn CountryCode = "PN"
	CountryCodePr CountryCode = "PR"
	CountryCodePt CountryCode = "PT"
	CountryCodePw CountryCode = "PW"
	CountryCodePy CountryCode = "PY"
	CountryCodeQa CountryCode = "QA"
	CountryCodeRo CountryCode = "RO"
	CountryCodeRs CountryCode = "RS"
	CountryCodeRu CountryCode = "RU"
	CountryCodeRw CountryCode = "RW"
	CountryCodeSa CountryCode = "SA"
	CountryCodeSb CountryCode = "SB"
	CountryCodeSc CountryCode = "SC"
	CountryCodeSd CountryCode = "SD"
	CountryCodeSe CountryCode = "SE"
	CountryCodeSg CountryCode = "SG"
	CountryCodeSh CountryCode = "SH"
	CountryCodeSi CountryCode = "SI"
	CountryCodeSk CountryCode = "SK"
	CountryCodeSl CountryCode = "SL"
	CountryCodeSm CountryCode = "SM"
	CountryCodeSn CountryCode = "SN"
	CountryCodeSo CountryCode = "SO"
	CountryCodeSr CountryCode = "SR"
	CountryCodeSt CountryCode = "ST"
	CountryCodeSv CountryCode = "SV"
	CountryCodeSy CountryCode = "SY"
	CountryCodeSz CountryCode = "SZ"
	CountryCodeTc CountryCode = "TC"
	CountryCodeTd CountryCode = "TD"
	CountryCodeTg CountryCode = "TG"
	CountryCodeTh CountryCode = "TH"
	CountryCodeTj CountryCode = "TJ"
	CountryCodeTk CountryCode = "TK"
	CountryCodeTl CountryCode = "TL"
	CountryCodeTm CountryCode = "TM"
	CountryCodeTn CountryCode = "TN"
	CountryCodeTo CountryCode = "TO"
	CountryCodeTr CountryCode = "TR"
	CountryCodeTt CountryCode = "TT"
	CountryCodeTv CountryCode = "TV"
	CountryCodeTw CountryCode = "TW"
	CountryCodeTz CountryCode = "TZ"
	CountryCodeUa CountryCode = "UA"
	CountryCodeUg CountryCode = "UG"
	CountryCodeUs CountryCode = "US"
	CountryCodeUy CountryCode = "UY"
	CountryCodeUz CountryCode = "UZ"
	CountryCodeVa CountryCode = "VA"
	CountryCodeVc CountryCode = "VC"
	CountryCodeVe CountryCode = "VE"
	CountryCodeVg CountryCode = "VG"
	CountryCodeVi CountryCode = "VI"
	CountryCodeVn CountryCode = "VN"
	CountryCodeVu CountryCode = "VU"
	CountryCodeWf CountryCode = "WF"
	CountryCodeWs CountryCode = "WS"
	CountryCodeYe CountryCode = "YE"
	CountryCodeYt CountryCode = "YT"
	CountryCodeZa CountryCode = "ZA"
	CountryCodeZm CountryCode = "ZM"
	CountryCodeZw CountryCode = "ZW"
)

func (enum CountryCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum CountryCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type DomainAvailability string

// Enum values for DomainAvailability
const (
	DomainAvailabilityAvailable             DomainAvailability = "AVAILABLE"
	DomainAvailabilityAvailableReserved     DomainAvailability = "AVAILABLE_RESERVED"
	DomainAvailabilityAvailablePreorder     DomainAvailability = "AVAILABLE_PREORDER"
	DomainAvailabilityUnavailable           DomainAvailability = "UNAVAILABLE"
	DomainAvailabilityUnavailablePremium    DomainAvailability = "UNAVAILABLE_PREMIUM"
	DomainAvailabilityUnavailableRestricted DomainAvailability = "UNAVAILABLE_RESTRICTED"
	DomainAvailabilityReserved              DomainAvailability = "RESERVED"
	DomainAvailabilityDontKnow              DomainAvailability = "DONT_KNOW"
)

func (enum DomainAvailability) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum DomainAvailability) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ExtraParamName string

// Enum values for ExtraParamName
const (
	ExtraParamNameDunsNumber                    ExtraParamName = "DUNS_NUMBER"
	ExtraParamNameBrandNumber                   ExtraParamName = "BRAND_NUMBER"
	ExtraParamNameBirthDepartment               ExtraParamName = "BIRTH_DEPARTMENT"
	ExtraParamNameBirthDateInYyyyMmDd           ExtraParamName = "BIRTH_DATE_IN_YYYY_MM_DD"
	ExtraParamNameBirthCountry                  ExtraParamName = "BIRTH_COUNTRY"
	ExtraParamNameBirthCity                     ExtraParamName = "BIRTH_CITY"
	ExtraParamNameDocumentNumber                ExtraParamName = "DOCUMENT_NUMBER"
	ExtraParamNameAuIdNumber                    ExtraParamName = "AU_ID_NUMBER"
	ExtraParamNameAuIdType                      ExtraParamName = "AU_ID_TYPE"
	ExtraParamNameCaLegalType                   ExtraParamName = "CA_LEGAL_TYPE"
	ExtraParamNameCaBusinessEntityType          ExtraParamName = "CA_BUSINESS_ENTITY_TYPE"
	ExtraParamNameCaLegalRepresentative         ExtraParamName = "CA_LEGAL_REPRESENTATIVE"
	ExtraParamNameCaLegalRepresentativeCapacity ExtraParamName = "CA_LEGAL_REPRESENTATIVE_CAPACITY"
	ExtraParamNameEsIdentification              ExtraParamName = "ES_IDENTIFICATION"
	ExtraParamNameEsIdentificationType          ExtraParamName = "ES_IDENTIFICATION_TYPE"
	ExtraParamNameEsLegalForm                   ExtraParamName = "ES_LEGAL_FORM"
	ExtraParamNameFiBusinessNumber              ExtraParamName = "FI_BUSINESS_NUMBER"
	ExtraParamNameFiIdNumber                    ExtraParamName = "FI_ID_NUMBER"
	ExtraParamNameFiNationality                 ExtraParamName = "FI_NATIONALITY"
	ExtraParamNameFiOrganizationType            ExtraParamName = "FI_ORGANIZATION_TYPE"
	ExtraParamNameItNationality                 ExtraParamName = "IT_NATIONALITY"
	ExtraParamNameItPin                         ExtraParamName = "IT_PIN"
	ExtraParamNameItRegistrantEntityType        ExtraParamName = "IT_REGISTRANT_ENTITY_TYPE"
	ExtraParamNameRuPassportData                ExtraParamName = "RU_PASSPORT_DATA"
	ExtraParamNameSeIdNumber                    ExtraParamName = "SE_ID_NUMBER"
	ExtraParamNameSgIdNumber                    ExtraParamName = "SG_ID_NUMBER"
	ExtraParamNameVatNumber                     ExtraParamName = "VAT_NUMBER"
	ExtraParamNameUkContactType                 ExtraParamName = "UK_CONTACT_TYPE"
	ExtraParamNameUkCompanyNumber               ExtraParamName = "UK_COMPANY_NUMBER"
)

func (enum ExtraParamName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ExtraParamName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationStatus string

// Enum values for OperationStatus
const (
	OperationStatusSubmitted  OperationStatus = "SUBMITTED"
	OperationStatusInProgress OperationStatus = "IN_PROGRESS"
	OperationStatusError      OperationStatus = "ERROR"
	OperationStatusSuccessful OperationStatus = "SUCCESSFUL"
	OperationStatusFailed     OperationStatus = "FAILED"
)

func (enum OperationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperationType string

// Enum values for OperationType
const (
	OperationTypeRegisterDomain            OperationType = "REGISTER_DOMAIN"
	OperationTypeDeleteDomain              OperationType = "DELETE_DOMAIN"
	OperationTypeTransferInDomain          OperationType = "TRANSFER_IN_DOMAIN"
	OperationTypeUpdateDomainContact       OperationType = "UPDATE_DOMAIN_CONTACT"
	OperationTypeUpdateNameserver          OperationType = "UPDATE_NAMESERVER"
	OperationTypeChangePrivacyProtection   OperationType = "CHANGE_PRIVACY_PROTECTION"
	OperationTypeDomainLock                OperationType = "DOMAIN_LOCK"
	OperationTypeEnableAutorenew           OperationType = "ENABLE_AUTORENEW"
	OperationTypeDisableAutorenew          OperationType = "DISABLE_AUTORENEW"
	OperationTypeAddDnssec                 OperationType = "ADD_DNSSEC"
	OperationTypeRemoveDnssec              OperationType = "REMOVE_DNSSEC"
	OperationTypeExpireDomain              OperationType = "EXPIRE_DOMAIN"
	OperationTypeTransferOutDomain         OperationType = "TRANSFER_OUT_DOMAIN"
	OperationTypeChangeDomainOwner         OperationType = "CHANGE_DOMAIN_OWNER"
	OperationTypeRenewDomain               OperationType = "RENEW_DOMAIN"
	OperationTypePushDomain                OperationType = "PUSH_DOMAIN"
	OperationTypeInternalTransferOutDomain OperationType = "INTERNAL_TRANSFER_OUT_DOMAIN"
	OperationTypeInternalTransferInDomain  OperationType = "INTERNAL_TRANSFER_IN_DOMAIN"
)

func (enum OperationType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperationType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ReachabilityStatus string

// Enum values for ReachabilityStatus
const (
	ReachabilityStatusPending ReachabilityStatus = "PENDING"
	ReachabilityStatusDone    ReachabilityStatus = "DONE"
	ReachabilityStatusExpired ReachabilityStatus = "EXPIRED"
)

func (enum ReachabilityStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ReachabilityStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

// Whether the domain name can be transferred to Route 53.
//
// You can transfer only domains that have a value of TRANSFERABLE for Transferable.
//
// Valid values:
//
// TRANSFERABLE
//
// The domain name can be transferred to Route 53.
//
// UNTRANSFERRABLE
//
// The domain name can't be transferred to Route 53.
//
// DONT_KNOW
//
// Reserved for future use.
type Transferable string

// Enum values for Transferable
const (
	TransferableTransferable   Transferable = "TRANSFERABLE"
	TransferableUntransferable Transferable = "UNTRANSFERABLE"
	TransferableDontKnow       Transferable = "DONT_KNOW"
)

func (enum Transferable) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Transferable) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
