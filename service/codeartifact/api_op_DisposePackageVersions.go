// Code generated by smithy-go-codegen DO NOT EDIT.

package codeartifact

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Deletes the assets in package versions and sets the package versions' status to
// Disposed. A disposed package version cannot be restored in your repository
// because its assets are deleted.  <p> To view all disposed package versions in a
// repository, use <code> <a
// href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListackageVersions</a>
// </code> and set the <code> <a
// href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html#API_ListPackageVersions_RequestSyntax">status</a>
// </code> parameter to <code>Disposed</code>. </p> <p> To view information about a
// disposed package version, use <code> <a
// href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a>
// </code> and set the <code> <a
// href="https://docs.aws.amazon.com/API_ListPackageVersions.html#codeartifact-ListPackageVersions-response-status">status</a>
// </code> parameter to <code>Disposed</code>. </p>
func (c *Client) DisposePackageVersions(ctx context.Context, params *DisposePackageVersionsInput, optFns ...func(*Options)) (*DisposePackageVersionsOutput, error) {
	if params == nil {
		params = &DisposePackageVersionsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DisposePackageVersions", params, optFns, addOperationDisposePackageVersionsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DisposePackageVersionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DisposePackageVersionsInput struct {

	// The name of the domain that contains the repository you want to dispose.
	//
	// This member is required.
	Domain *string

	// A format that specifies the type of package versions you want to dispose. The
	// valid values are:
	//
	//     * npm
	//
	//     * pypi
	//
	//     * maven
	//
	// This member is required.
	Format types.PackageFormat

	// The name of the package with the versions you want to dispose.
	//
	// This member is required.
	Package *string

	// The name of the repository that contains the package versions you want to
	// dispose.
	//
	// This member is required.
	Repository *string

	// The versions of the package you want to dispose.
	//
	// This member is required.
	Versions []*string

	// The 12-digit account number of the AWS account that owns the domain. It does not
	// include dashes or spaces.
	DomainOwner *string

	// The expected status of the package version to dispose. Valid values are:
	//
	//     *
	// Published
	//
	//     * Unfinished
	//
	//     * Unlisted
	//
	//     * Archived
	//
	//     * Disposed
	ExpectedStatus types.PackageVersionStatus

	// The namespace of the package. The package component that specifies its namespace
	// depends on its type. For example:
	//
	//     * The namespace of a Maven package is its
	// groupId.
	//
	//     * The namespace of an npm package is its scope.
	//
	//     * A Python
	// package does not contain a corresponding component, so Python packages do not
	// have a namespace.
	Namespace *string

	// The revisions of the package versions you want to dispose.
	VersionRevisions map[string]*string
}

type DisposePackageVersionsOutput struct {

	// A PackageVersionError object that contains a map of errors codes for the
	// disposed package versions that failed. The possible error codes are:
	//
	//     *
	// ALREADY_EXISTS
	//
	//     * MISMATCHED_REVISION
	//
	//     * MISMATCHED_STATUS
	//
	//     *
	// NOT_ALLOWED
	//
	//     * NOT_FOUND
	//
	//     * SKIPPED
	FailedVersions map[string]*types.PackageVersionError

	// A list of the package versions that were successfully disposed.
	SuccessfulVersions map[string]*types.SuccessfulPackageVersionInfo

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDisposePackageVersionsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpDisposePackageVersions{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpDisposePackageVersions{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDisposePackageVersionsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDisposePackageVersions(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDisposePackageVersions(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "codeartifact",
		OperationName: "DisposePackageVersions",
	}
}
