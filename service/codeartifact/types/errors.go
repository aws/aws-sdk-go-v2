// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// The operation did not succeed because of an unauthorized access attempt.
type AccessDeniedException struct {
	Message *string
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AccessDeniedException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AccessDeniedException) HasMessage() bool {
	return e.Message != nil
}

// The operation did not succeed because prerequisites are not met.
type ConflictException struct {
	Message *string

	ResourceType ResourceType
	ResourceId   *string
}

func (e *ConflictException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConflictException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConflictException) ErrorCode() string             { return "ConflictException" }
func (e *ConflictException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ConflictException) GetResourceType() ResourceType {
	return e.ResourceType
}
func (e *ConflictException) GetResourceId() string {
	return ptr.ToString(e.ResourceId)
}
func (e *ConflictException) HasResourceId() bool {
	return e.ResourceId != nil
}
func (e *ConflictException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ConflictException) HasMessage() bool {
	return e.Message != nil
}

// The operation did not succeed because of an error that occurred inside AWS
// CodeArtifact.
type InternalServerException struct {
	Message *string
}

func (e *InternalServerException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServerException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServerException) ErrorCode() string             { return "InternalServerException" }
func (e *InternalServerException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }
func (e *InternalServerException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InternalServerException) HasMessage() bool {
	return e.Message != nil
}

// The operation did not succeed because the resource requested is not found in the
// service.
type ResourceNotFoundException struct {
	Message *string

	ResourceId   *string
	ResourceType ResourceType
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string             { return "ResourceNotFoundException" }
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundException) GetResourceId() string {
	return ptr.ToString(e.ResourceId)
}
func (e *ResourceNotFoundException) HasResourceId() bool {
	return e.ResourceId != nil
}
func (e *ResourceNotFoundException) GetResourceType() ResourceType {
	return e.ResourceType
}
func (e *ResourceNotFoundException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundException) HasMessage() bool {
	return e.Message != nil
}

// The operation did not succeed because it would have exceeded a service limit for
// your account.
type ServiceQuotaExceededException struct {
	Message *string

	ResourceType ResourceType
	ResourceId   *string
}

func (e *ServiceQuotaExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ServiceQuotaExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ServiceQuotaExceededException) ErrorCode() string             { return "ServiceQuotaExceededException" }
func (e *ServiceQuotaExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ServiceQuotaExceededException) GetResourceType() ResourceType {
	return e.ResourceType
}
func (e *ServiceQuotaExceededException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ServiceQuotaExceededException) HasMessage() bool {
	return e.Message != nil
}
func (e *ServiceQuotaExceededException) GetResourceId() string {
	return ptr.ToString(e.ResourceId)
}
func (e *ServiceQuotaExceededException) HasResourceId() bool {
	return e.ResourceId != nil
}

// The operation did not succeed because too many requests are sent to the service.
type ThrottlingException struct {
	Message *string

	RetryAfterSeconds *int32
}

func (e *ThrottlingException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ThrottlingException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ThrottlingException) ErrorCode() string             { return "ThrottlingException" }
func (e *ThrottlingException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ThrottlingException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ThrottlingException) HasMessage() bool {
	return e.Message != nil
}
func (e *ThrottlingException) GetRetryAfterSeconds() int32 {
	return ptr.ToInt32(e.RetryAfterSeconds)
}
func (e *ThrottlingException) HasRetryAfterSeconds() bool {
	return e.RetryAfterSeconds != nil
}

// The operation did not succeed because a parameter in the request was sent with
// an invalid value.
type ValidationException struct {
	Message *string

	Reason ValidationExceptionReason
}

func (e *ValidationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ValidationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ValidationException) ErrorCode() string             { return "ValidationException" }
func (e *ValidationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ValidationException) GetReason() ValidationExceptionReason {
	return e.Reason
}
func (e *ValidationException) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ValidationException) HasMessage() bool {
	return e.Message != nil
}
