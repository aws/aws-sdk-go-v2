// Code generated by smithy-go-codegen DO NOT EDIT.

package fsx

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/fsx/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a new, empty Amazon FSx file system.  <p>If a file system with the
// specified client request token exists and the parameters match,
// <code>CreateFileSystem</code> returns the description of the existing file
// system. If a file system specified client request token exists and the
// parameters don't match, this call returns
// <code>IncompatibleParameterError</code>. If a file system with the specified
// client request token doesn't exist, <code>CreateFileSystem</code> does the
// following: </p> <ul> <li> <p>Creates a new, empty Amazon FSx file system with an
// assigned ID, and an initial lifecycle state of <code>CREATING</code>.</p> </li>
// <li> <p>Returns the description of the file system.</p> </li> </ul> <p>This
// operation requires a client request token in the request that Amazon FSx uses to
// ensure idempotent creation. This means that calling the operation multiple times
// with the same client request token has no effect. By using the idempotent
// operation, you can retry a <code>CreateFileSystem</code> operation without the
// risk of creating an extra file system. This approach can be useful when an
// initial call fails in a way that makes it unclear whether a file system was
// created. Examples are if a transport level timeout occurred, or your connection
// was reset. If you use the same client request token and the initial call created
// a file system, the client receives success as long as the parameters are the
// same.</p> <note> <p>The <code>CreateFileSystem</code> call returns while the
// file system's lifecycle state is still <code>CREATING</code>. You can check the
// file-system creation status by calling the <a>DescribeFileSystems</a> operation,
// which returns the file system state along with other information.</p> </note>
func (c *Client) CreateFileSystem(ctx context.Context, params *CreateFileSystemInput, optFns ...func(*Options)) (*CreateFileSystemOutput, error) {
	stack := middleware.NewStack("CreateFileSystem", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateFileSystemMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addIdempotencyToken_opCreateFileSystemMiddleware(stack, options)
	addOpCreateFileSystemValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateFileSystem(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateFileSystem",
			Err:           err,
		}
	}
	out := result.(*CreateFileSystemOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The request object used to create a new Amazon FSx file system.
type CreateFileSystemInput struct {
	// The Microsoft Windows configuration for the file system being created.
	WindowsConfiguration *types.CreateFileSystemWindowsConfiguration
	// Specifies the IDs of the subnets that the file system will be accessible from.
	// For Windows MULTI_AZ_1 file system deployment types, provide exactly two subnet
	// IDs, one for the preferred file server and one for the standby file server. You
	// specify one of these subnets as the preferred subnet using the
	// WindowsConfiguration > PreferredSubnetID property. For Windows SINGLE_AZ_1 and
	// SINGLE_AZ_2 file system deployment types and Lustre file systems, provide
	// exactly one subnet ID. The file server is launched in that subnet's Availability
	// Zone.
	SubnetIds []*string
	// A list of IDs specifying the security groups to apply to all network interfaces
	// created for file system access. This list isn't returned in later requests to
	// describe the file system.
	SecurityGroupIds []*string
	// A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent
	// creation. This string is automatically filled on your behalf when you use the
	// AWS Command Line Interface (AWS CLI) or an AWS SDK.
	ClientRequestToken *string
	// The Lustre configuration for the file system being created.
	LustreConfiguration *types.CreateFileSystemLustreConfiguration
	// The type of Amazon FSx file system to create, either WINDOWS or LUSTRE.
	FileSystemType types.FileSystemType
	// Sets the storage capacity of the file system that you're creating. For Lustre
	// file systems:
	//
	//     * For SCRATCH_2 and PERSISTENT_1 deployment types, valid
	// values are 1.2, 2.4, and increments of 2.4 TiB.
	//
	//     * For SCRATCH_1 deployment
	// type, valid values are 1.2, 2.4, and increments of 3.6 TiB.
	//
	// For Windows file
	// systems:
	//
	//     * If StorageType=SSD, valid values are 32 GiB - 65,536 GiB (64
	// TiB).
	//
	//     * If StorageType=HDD, valid values are 2000 GiB - 65,536 GiB (64
	// TiB).
	StorageCapacity *int32
	// The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the file
	// system's data for Amazon FSx for Windows File Server file systems and Amazon FSx
	// for Lustre PERSISTENT_1 file systems at rest. In either case, if not specified,
	// the Amazon FSx managed key is used. The Amazon FSx for Lustre SCRATCH_1 and
	// SCRATCH_2 file systems are always encrypted at rest using Amazon FSx managed
	// keys. For more information, see Encrypt
	// (https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the
	// AWS Key Management Service API Reference.
	KmsKeyId *string
	// Sets the storage type for the Amazon FSx for Windows file system you're
	// creating. Valid values are SSD and HDD.
	//
	//     * Set to SSD to use solid state
	// drive storage. SSD is supported on all Windows deployment types.
	//
	//     * Set to
	// HDD to use hard disk drive storage. HDD is supported on SINGLE_AZ_2 and
	// MULTI_AZ_1 Windows file system deployment types.
	//
	// Default value is SSD. For more
	// information, see  Storage Type Options
	// (https://docs.aws.amazon.com/fsx/latest/WindowsGuide/optimize-fsx-costs.html#storage-type-options)
	// in the Amazon FSx for Windows User Guide.
	StorageType types.StorageType
	// The tags to apply to the file system being created. The key value of the Name
	// tag appears in the console as the file system name.
	Tags []*types.Tag
}

// The response object returned after the file system is created.
type CreateFileSystemOutput struct {
	// The configuration of the file system that was created.
	FileSystem *types.FileSystem

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateFileSystemMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateFileSystem{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateFileSystem{}, middleware.After)
}

type idempotencyToken_initializeOpCreateFileSystem struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpCreateFileSystem) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpCreateFileSystem) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*CreateFileSystemInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *CreateFileSystemInput ")
	}

	if input.ClientRequestToken == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.ClientRequestToken = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opCreateFileSystemMiddleware(stack *middleware.Stack, cfg Options) {
	stack.Initialize.Add(&idempotencyToken_initializeOpCreateFileSystem{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opCreateFileSystem(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "fsx",
		OperationName: "CreateFileSystem",
	}
}
