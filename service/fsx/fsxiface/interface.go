// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package fsxiface provides an interface to enable mocking the Amazon FSx service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package fsxiface

import (
	"github.com/aws/aws-sdk-go-v2/service/fsx"
	"github.com/aws/aws-sdk-go-v2/service/fsx/types"
)

// ClientAPI provides an interface to enable mocking the
// fsx.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon FSx.
//    func myFunc(svc fsxiface.ClientAPI) bool {
//        // Make svc.CreateBackup request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := fsx.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        fsxiface.ClientPI
//    }
//    func (m *mockClientClient) CreateBackup(input *types.CreateBackupInput) (*types.CreateBackupOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	CreateBackupRequest(*types.CreateBackupInput) fsx.CreateBackupRequest

	CreateFileSystemRequest(*types.CreateFileSystemInput) fsx.CreateFileSystemRequest

	CreateFileSystemFromBackupRequest(*types.CreateFileSystemFromBackupInput) fsx.CreateFileSystemFromBackupRequest

	DeleteBackupRequest(*types.DeleteBackupInput) fsx.DeleteBackupRequest

	DeleteFileSystemRequest(*types.DeleteFileSystemInput) fsx.DeleteFileSystemRequest

	DescribeBackupsRequest(*types.DescribeBackupsInput) fsx.DescribeBackupsRequest

	DescribeFileSystemsRequest(*types.DescribeFileSystemsInput) fsx.DescribeFileSystemsRequest

	ListTagsForResourceRequest(*types.ListTagsForResourceInput) fsx.ListTagsForResourceRequest

	TagResourceRequest(*types.TagResourceInput) fsx.TagResourceRequest

	UntagResourceRequest(*types.UntagResourceInput) fsx.UntagResourceRequest

	UpdateFileSystemRequest(*types.UpdateFileSystemInput) fsx.UpdateFileSystemRequest
}

var _ ClientAPI = (*fsx.Client)(nil)
