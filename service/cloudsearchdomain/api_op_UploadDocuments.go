// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudsearchdomain

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudsearchdomain/types"
)

const opUploadDocuments = "UploadDocuments"

// UploadDocumentsRequest returns a request value for making API operation for
// Amazon CloudSearch Domain.
//
// Posts a batch of documents to a search domain for indexing. A document batch
// is a collection of add and delete operations that represent the documents
// you want to add, update, or delete from your domain. Batches can be described
// in either JSON or XML. Each item that you want Amazon CloudSearch to return
// as a search result (such as a product) is represented as a document. Every
// document has a unique ID and one or more fields that contain the data that
// you want to search and return in results. Individual documents cannot contain
// more than 1 MB of data. The entire batch cannot exceed 5 MB. To get the best
// possible upload performance, group add and delete operations in batches that
// are close the 5 MB limit. Submitting a large volume of single-document batches
// can overload a domain's document service.
//
// The endpoint for submitting UploadDocuments requests is domain-specific.
// To get the document endpoint for your domain, use the Amazon CloudSearch
// configuration service DescribeDomains action. A domain's endpoints are also
// displayed on the domain dashboard in the Amazon CloudSearch console.
//
// For more information about formatting your data for Amazon CloudSearch, see
// Preparing Your Data (http://docs.aws.amazon.com/cloudsearch/latest/developerguide/preparing-data.html)
// in the Amazon CloudSearch Developer Guide. For more information about uploading
// data for indexing, see Uploading Data (http://docs.aws.amazon.com/cloudsearch/latest/developerguide/uploading-data.html)
// in the Amazon CloudSearch Developer Guide.
//
//    // Example sending a request using UploadDocumentsRequest.
//    req := client.UploadDocumentsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) UploadDocumentsRequest(input *types.UploadDocumentsInput) UploadDocumentsRequest {
	op := &aws.Operation{
		Name:       opUploadDocuments,
		HTTPMethod: "POST",
		HTTPPath:   "/2013-01-01/documents/batch?format=sdk",
	}

	if input == nil {
		input = &types.UploadDocumentsInput{}
	}

	req := c.newRequest(op, input, &types.UploadDocumentsOutput{})
	return UploadDocumentsRequest{Request: req, Input: input, Copy: c.UploadDocumentsRequest}
}

// UploadDocumentsRequest is the request type for the
// UploadDocuments API operation.
type UploadDocumentsRequest struct {
	*aws.Request
	Input *types.UploadDocumentsInput
	Copy  func(*types.UploadDocumentsInput) UploadDocumentsRequest
}

// Send marshals and sends the UploadDocuments API request.
func (r UploadDocumentsRequest) Send(ctx context.Context) (*UploadDocumentsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UploadDocumentsResponse{
		UploadDocumentsOutput: r.Request.Data.(*types.UploadDocumentsOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UploadDocumentsResponse is the response type for the
// UploadDocuments API operation.
type UploadDocumentsResponse struct {
	*types.UploadDocumentsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UploadDocuments request.
func (r *UploadDocumentsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
