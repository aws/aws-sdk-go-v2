// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudsearchdomain

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudsearchdomain/types"
)

const opSearch = "Search"

// SearchRequest returns a request value for making API operation for
// Amazon CloudSearch Domain.
//
// Retrieves a list of documents that match the specified search criteria. How
// you specify the search criteria depends on which query parser you use. Amazon
// CloudSearch supports four query parsers:
//
//    * simple: search all text and text-array fields for the specified string.
//    Search for phrases, individual terms, and prefixes.
//
//    * structured: search specific fields, construct compound queries using
//    Boolean operators, and use advanced features such as term boosting and
//    proximity searching.
//
//    * lucene: specify search criteria using the Apache Lucene query parser
//    syntax.
//
//    * dismax: specify search criteria using the simplified subset of the Apache
//    Lucene query parser syntax defined by the DisMax query parser.
//
// For more information, see Searching Your Data (http://docs.aws.amazon.com/cloudsearch/latest/developerguide/searching.html)
// in the Amazon CloudSearch Developer Guide.
//
// The endpoint for submitting Search requests is domain-specific. You submit
// search requests to a domain's search endpoint. To get the search endpoint
// for your domain, use the Amazon CloudSearch configuration service DescribeDomains
// action. A domain's endpoints are also displayed on the domain dashboard in
// the Amazon CloudSearch console.
//
//    // Example sending a request using SearchRequest.
//    req := client.SearchRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
func (c *Client) SearchRequest(input *types.SearchInput) SearchRequest {
	op := &aws.Operation{
		Name:       opSearch,
		HTTPMethod: "GET",
		HTTPPath:   "/2013-01-01/search?format=sdk&pretty=true",
	}

	if input == nil {
		input = &types.SearchInput{}
	}

	req := c.newRequest(op, input, &types.SearchOutput{})
	return SearchRequest{Request: req, Input: input, Copy: c.SearchRequest}
}

// SearchRequest is the request type for the
// Search API operation.
type SearchRequest struct {
	*aws.Request
	Input *types.SearchInput
	Copy  func(*types.SearchInput) SearchRequest
}

// Send marshals and sends the Search API request.
func (r SearchRequest) Send(ctx context.Context) (*SearchResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SearchResponse{
		SearchOutput: r.Request.Data.(*types.SearchOutput),
		response:     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SearchResponse is the response type for the
// Search API operation.
type SearchResponse struct {
	*types.SearchOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// Search request.
func (r *SearchResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
