// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lexruntimeservice

import (
	"context"
	"errors"

	"github.com/aws/aws-sdk-go-v2/aws"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/service/smithyprototype/lexruntimeservice/types"
	"github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

/*
***Mock operation for pagination***
 */

type ListSessionsInput struct {
	_ struct{} `type:"structure"`

	// The alias in use for the bot that contains the session data.
	//
	// BotAlias is a required field
	BotAlias *string `location:"uri" locationName:"botAlias" type:"string" required:"true"`

	// The name of the bot that contains the session data.
	//
	// BotName is a required field
	BotName *string `location:"uri" locationName:"botName" type:"string" required:"true"`

	// A string used to filter the intents returned in the recentIntentSummaryView
	// structure.
	//
	// When you specify a filter, only intents with their checkpointLabel field
	// set to that string are returned.
	CheckpointLabelFilter *string `location:"querystring" locationName:"checkpointLabelFilter" min:"1" type:"string"`

	// The ID of the client application user. Amazon Lex uses this to identify a
	// user's conversation with your bot.
	//
	// UserId is a required field
	UserId *string `location:"uri" locationName:"userId" min:"2" type:"string" required:"true"`

	NextToken *string
}

// String returns the string representation
func (s ListSessionsInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func validateListSessionsInput(s *ListSessionsInput) error {
	invalidParams := aws.ErrInvalidParams{Context: "ListSessionsInput"}

	if s.BotAlias == nil {
		invalidParams.Add(aws.NewErrParamRequired("BotAlias"))
	}

	if s.BotName == nil {
		invalidParams.Add(aws.NewErrParamRequired("BotName"))
	}
	if s.CheckpointLabelFilter != nil && len(*s.CheckpointLabelFilter) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("CheckpointLabelFilter", 1))
	}

	if s.UserId == nil {
		invalidParams.Add(aws.NewErrParamRequired("UserId"))
	}
	if s.UserId != nil && len(*s.UserId) < 2 {
		invalidParams.Add(aws.NewErrParamMinLen("UserId", 2))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type ListSessionsOutput struct {
	_ struct{} `type:"structure"`

	// Describes the current state of the bot.
	DialogAction *types.DialogAction `locationName:"dialogAction" type:"structure"`

	// An array of information about the intents used in the session. The array
	// can contain a maximum of three summaries. If more than three intents are
	// used in the session, the recentIntentSummaryView operation contains information
	// about the last three intents used.
	//
	// If you set the checkpointLabelFilter parameter in the request, the array
	// contains only the intents with the specified label.
	RecentIntentSummaryView []types.IntentSummary `locationName:"recentIntentSummaryView" type:"list"`

	// Map of key/value pairs representing the session-specific context information.
	// It contains application information passed between Amazon Lex and a client
	// application.
	SessionAttributes map[string]string `locationName:"sessionAttributes" type:"map" sensitive:"true"`

	// A unique identifier for the session.
	SessionId *string `locationName:"sessionId" type:"string"`

	// Operation result metadata
	ResultMetadata middleware.Metadata

	NextToken *string
}

// String returns the string representation
func (s ListSessionsOutput) String() string {
	return awsutil.Prettify(s)
}

// ListSessions invokes the API Amazon Lex Runtime Service, returning the
// result or error.
//
// Returns session information for a specified bot, alias, and user ID.
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/ListSessions
func (c *Client) ListSessions(ctx context.Context, input *ListSessionsInput, optFns ...func(*Options)) (
	*ListSessionsOutput, error,
) {
	stack := middleware.NewStack("lex runtime get session", smithyhttp.NewStackRequest)

	options := c.options.Copy()
	// Allow user options to modify client options
	for _, fn := range optFns {
		fn(&options)
	}

	// TODO add stack (de)serializers, retry, and signer
	// Items like HTTP method and path are added via operation's serializer
	//
	//	  HTTPMethod: "GET",
	//	  HTTPPath:   "/bot/{botName}/alias/{botAlias}/user/{userId}/session",

	// Iterate through stack modification options.
	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}

	h := middleware.DecorateHandler(awshttp.ClientHandler{
		Client: options.HTTPClient,
	}, stack)

	res, metadata, err := h.Handle(ctx, input)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceName:   "LexRuntimeService",
			OperationName: "ListSessions",
			Err:           err,
		}
	}

	out := res.(*ListSessionsOutput)
	out.ResultMetadata = metadata

	return out, nil
}

// Client interface generated for an operation as needed. This includes
// paginators, waiters, etc.

// ListSessionsClient provides the interface for a client that implements the
// ListSessions API operation. Implemented by the package's Client type.
type ListSessionsClient interface {
	ListSessions(ctx context.Context, input *ListSessionsInput, opts ...func(*Options)) (
		*ListSessionsOutput, error,
	)
}

// ListSessionsPaginator provides the paginator for the ListSessions API operation.
type ListSessionsPaginator struct {
	client ListSessionsClient
	input  *ListSessionsInput
}

// NewListSessionsPaginator returns a ListSessionsPaginator configured for the
// API operation client, and input parameters.
func NewListSessionsPaginator(client ListSessionsClient, input *ListSessionsInput, optFns ...func(*Options)) *ListSessionsPaginator {
	// TODO implementation
	return nil
}

// HasMorePages returns if there may be more pages to retrieve.
func (p *ListSessionsPaginator) HasMorePages() bool {
	// TODO implementation
	return false
}

// NextPage returns the next page from the API, or error.
func (p *ListSessionsPaginator) NextPage(ctx context.Context, opts ...func(*Options)) (
	*ListSessionsOutput, error,
) {
	// TODO implementation
	return nil, errors.New("not implemented")
}
