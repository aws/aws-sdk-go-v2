// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lexruntimeservice

import (
	"context"
	"net/http"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
)

// Client provides the client for interacting with the Amazon Lex Runtime Service.
type Client struct {
	options Options
}

// Options provides the set of configurations that can be applied to the
// Client. Use functional options to modify this set when creating the client,
// or when invoking API operations.
type Options struct {
	// The AWS regional endpoint the client will make API operation calls to.
	// Required by the client.
	RegionID string

	// Behavior to resolve endpoints. Defaults to client's default endpoint
	// resolution if nil.
	EndpointResolver aws.EndpointResolver

	// The HTTP client to invoke API calls with. Defaults to client's default
	// HTTP implementation if nil.
	HTTPClient HTTPClient

	// Credentials will be used to create the client's default signer if one is
	// not provided. If signer is provided Credentials are ignored.
	Credentials aws.CredentialsProvider

	// If nil, will default to client's signer using provided credentials.
	// Credentials must also be set.
	Signer      HTTPSigner
	SigningName string

	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional option on operation
	// call to modify this list for per operation behavior.
	APIOptions []APIOptionFunc

	Retryer  aws.Retryer
	LogLevel aws.LogLevel
	Logger   aws.Logger
}

func (o Options) Copy() Options {
	to := o

	to.APIOptions = make([]APIOptionFunc, len(o.APIOptions))
	copy(to.APIOptions, o.APIOptions)

	return to
}

// APIOptionFunc provides the type for overriding options for API operation
// calls. Allows modifying the middleware stack, and client options per API
// operation call.
type APIOptionFunc func(*middleware.Stack) error

// HTTPSigner provides the interface for implementations to sign HTTP AWS
// requests.
type HTTPSigner interface {
	SignHTTP(ctx context.Context, r *http.Request, payloadHash string, service string, region string, signingTime time.Time) error
}

// HTTPClient provides the interface for an implementation to round trip HTTP
// requests to a service, returning a response or error.
type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// New returns an initialized client with the client options used to specify
// the behavior of the client.
func New(opts Options) *Client {
	// Fill options with default values.
	// TODO move this to helper function.
	if opts.EndpointResolver == nil {
		opts.EndpointResolver = newEndpointResolver()
	}
	if opts.Signer == nil {
		opts.Signer = v4.NewSigner(opts.Credentials)
	}
	if opts.HTTPClient == nil {
		opts.HTTPClient = aws.NewBuildableHTTPClient()
	}

	client := &Client{
		options: opts,
	}

	return client
}

// NewFromConfig returns a Client initialized with the configuration provided
// in the AWS Config, and functional options provided.
func NewFromConfig(cfg aws.Config, optFns ...func(*Options)) *Client {
	var o Options

	// TODO Copy cfg into options into options value
	o.RegionID = cfg.Region
	o.EndpointResolver = cfg.EndpointResolver

	for _, fn := range optFns {
		fn(&o)
	}

	return New(o)
}

// ServiceID returns the name of the identifier for the service API.
func (c *Client) ServiceID() string { return "LexRuntimeService" }

// ServiceName returns the full service name.
func (c *Client) ServiceName() string { return "Amazon Lex Runtime Service" }
