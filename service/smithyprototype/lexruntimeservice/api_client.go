// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lexruntimeservice

import (
	"context"
	"net/http"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	"github.com/awslabs/smithy-go/middleware"
)

// Client provides the client for interacting with the Amazon Lex Runtime Service.
type Client struct {
	serviceName string
	serviceID   string
	endpointID  string
	options     ClientOptions
}

// ClientOptions provides the set of configurations that can be applied to the
// Client. Use functional options to modify this set when creating the client,
// or when invoking API operations.
type ClientOptions struct {
	RegionID string

	EndpointResolver aws.EndpointResolver
	HTTPClient       HTTPClient

	// Signer is the signer for the client.
	SigningName string
	Signer      HTTPSigner

	APIOptions []APIOptionFunc

	Retryer  aws.Retryer
	LogLevel aws.LogLevel
	Logger   aws.Logger
}

// HTTPSigner provides the interface for implementations to sign HTTP AWS
// requests.
type HTTPSigner interface {
	SignHTTP(ctx context.Context, r *http.Request, payloadHash string, service string, region string, signingTime time.Time) error
}

// HTTPClient provides the interface for an implementation to round trip HTTP
// requests to a service, returning a response or error.
type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

// NewClient returns an initialized client with the client options used to
// specify the behavior of the client.
func NewClient(cfg aws.Config, opts ...func(*ClientOptions)) *Client {
	client := &Client{
		serviceName: "Amazon Lex Runtime Service",
		serviceID:   "LexRuntimeService",
		endpointID:  "runtime.lex",

		options: ClientOptions{
			RegionID:         cfg.Region,
			EndpointResolver: cfg.EndpointResolver,
			Signer:           v4.NewSigner(cfg.Credentials),
			HTTPClient:       cfg.HTTPClient,
		},
	}

	for _, fn := range opts {
		fn(&client.options)
	}

	return client
}

// ServiceID returns the name of the identifier for the service API.
func (c *Client) ServiceID() string { return c.serviceID }

// ServiceName returns the full service name.
func (c *Client) ServiceName() string { return c.serviceName }

// APIOptionFunc provides the type for overriding options for API operation
// calls. Allows modifying the middleware stack, and client options per API
// operation call.
type APIOptionFunc func(*ClientOptions, *middleware.Stack) error

func (c *Client) invoke(ctx context.Context, stack *middleware.Stack, input interface{}, opts ...APIOptionFunc) (
	result interface{}, metadata middleware.Metadata, err error,
) {
	clientOptions := c.options
	for _, fn := range c.options.APIOptions {
		if err := fn(&clientOptions, stack); err != nil {
			return nil, metadata, err
		}
	}

	for _, fn := range opts {
		if err := fn(&clientOptions, stack); err != nil {
			return nil, metadata, err
		}
	}

	h := middleware.DecorateHandler(awshttp.ClientHandler{Client: clientOptions.HTTPClient}, stack)
	return h.Handle(ctx, input)
}
