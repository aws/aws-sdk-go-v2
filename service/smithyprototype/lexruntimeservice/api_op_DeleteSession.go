// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lexruntimeservice

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	awshttp "github.com/aws/aws-sdk-go-v2/aws/transport/http"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

type DeleteSessionInput struct {
	_ struct{} `type:"structure"`

	// The alias in use for the bot that contains the session data.
	//
	// BotAlias is a required field
	BotAlias *string `location:"uri" locationName:"botAlias" type:"string" required:"true"`

	// The name of the bot that contains the session data.
	//
	// BotName is a required field
	BotName *string `location:"uri" locationName:"botName" type:"string" required:"true"`

	// The identifier of the user associated with the session data.
	//
	// UserId is a required field
	UserId *string `location:"uri" locationName:"userId" min:"2" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSessionInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func validateDeleteSessionInput(s *DeleteSessionInput) error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteSessionInput"}

	if s.BotAlias == nil {
		invalidParams.Add(aws.NewErrParamRequired("BotAlias"))
	}

	if s.BotName == nil {
		invalidParams.Add(aws.NewErrParamRequired("BotName"))
	}

	if s.UserId == nil {
		invalidParams.Add(aws.NewErrParamRequired("UserId"))
	}
	if s.UserId != nil && len(*s.UserId) < 2 {
		invalidParams.Add(aws.NewErrParamMinLen("UserId", 2))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DeleteSessionOutput struct {
	_ struct{} `type:"structure"`

	// The alias in use for the bot associated with the session data.
	BotAlias *string `locationName:"botAlias" type:"string"`

	// The name of the bot associated with the session data.
	BotName *string `locationName:"botName" type:"string"`

	// The unique identifier for the session.
	SessionId *string `locationName:"sessionId" type:"string"`

	// The ID of the client application user.
	UserId *string `locationName:"userId" min:"2" type:"string"`

	// Operation result metadata
	ResultMetadata middleware.Metadata
}

// String returns the string representation
func (s DeleteSessionOutput) String() string {
	return awsutil.Prettify(s)
}

// DeleteSession invokes the API Amazon Lex Runtime Service, returning the
// result or error.
//
// Removes session information for a specified bot, alias, and user ID.
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/DeleteSession
func (c *Client) DeleteSession(ctx context.Context, input *DeleteSessionInput, optFns ...func(*Options)) (
	*DeleteSessionOutput, error,
) {
	stack := middleware.NewStack("lex runtime delete session", smithyhttp.NewStackRequest)

	options := c.options.Copy()
	// Allow user options to modify client options
	for _, fn := range optFns {
		fn(&options)
	}

	// TODO add stack (de)serializers, retry, and signer
	//  Items like HTTP method and path are added via operation's serializer
	//
	//	  HTTPMethod: "DELETE",
	//	  HTTPPath:   "/bot/{botName}/alias/{botAlias}/user/{userId}/session",

	// Iterate through stack modification options.
	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}

	h := middleware.DecorateHandler(awshttp.ClientHandler{
		Client: options.HTTPClient,
	}, stack)

	res, _, err := h.Handle(ctx, input)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceName:   "LexRuntimeService",
			OperationName: "DeleteSession",
			Err:           err,
		}
	}

	return res.(*DeleteSessionOutput), nil
}
