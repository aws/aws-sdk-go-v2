// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package simpledbiface provides an interface to enable mocking the Amazon SimpleDB service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package simpledbiface

import (
	"github.com/aws/aws-sdk-go-v2/service/simpledb"
)

// SimpleDBAPI provides an interface to enable mocking the
// simpledb.SimpleDB service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Amazon SimpleDB.
//    func myFunc(svc simpledbiface.SimpleDBAPI) bool {
//        // Make svc.BatchDeleteAttributes request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := simpledb.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockSimpleDBClient struct {
//        simpledbiface.SimpleDBAPI
//    }
//    func (m *mockSimpleDBClient) BatchDeleteAttributes(input *simpledb.BatchDeleteAttributesInput) (*simpledb.BatchDeleteAttributesOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockSimpleDBClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type SimpleDBAPI interface {
	BatchDeleteAttributesRequest(*simpledb.BatchDeleteAttributesInput) simpledb.BatchDeleteAttributesRequest

	BatchPutAttributesRequest(*simpledb.BatchPutAttributesInput) simpledb.BatchPutAttributesRequest

	CreateDomainRequest(*simpledb.CreateDomainInput) simpledb.CreateDomainRequest

	DeleteAttributesRequest(*simpledb.DeleteAttributesInput) simpledb.DeleteAttributesRequest

	DeleteDomainRequest(*simpledb.DeleteDomainInput) simpledb.DeleteDomainRequest

	DomainMetadataRequest(*simpledb.DomainMetadataInput) simpledb.DomainMetadataRequest

	GetAttributesRequest(*simpledb.GetAttributesInput) simpledb.GetAttributesRequest

	ListDomainsRequest(*simpledb.ListDomainsInput) simpledb.ListDomainsRequest

	PutAttributesRequest(*simpledb.PutAttributesInput) simpledb.PutAttributesRequest

	SelectRequest(*simpledb.SelectInput) simpledb.SelectRequest
}

var _ SimpleDBAPI = (*simpledb.SimpleDB)(nil)
