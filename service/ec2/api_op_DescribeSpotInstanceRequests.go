// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes the specified Spot Instance requests. You can use
// DescribeSpotInstanceRequests to find a running Spot Instance by examining the
// response. If the status of the Spot Instance is fulfilled, the instance ID
// appears in the response and contains the identifier of the instance.
// Alternatively, you can use DescribeInstances
// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances)
// with a filter to look for instances where the instance lifecycle is spot. We
// recommend that you set MaxResults to a value between 5 and 1000 to limit the
// number of results returned. This paginates the output, which makes the list more
// manageable and returns the results faster. If the list of results exceeds your
// MaxResults value, then that number of results is returned along with a NextToken
// value that can be passed to a subsequent DescribeSpotInstanceRequests request to
// retrieve the remaining results. Spot Instance requests are deleted four hours
// after they are canceled and their instances are terminated.
func (c *Client) DescribeSpotInstanceRequests(ctx context.Context, params *DescribeSpotInstanceRequestsInput, optFns ...func(*Options)) (*DescribeSpotInstanceRequestsOutput, error) {
	stack := middleware.NewStack("DescribeSpotInstanceRequests", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpDescribeSpotInstanceRequestsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeSpotInstanceRequests(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeSpotInstanceRequests",
			Err:           err,
		}
	}
	out := result.(*DescribeSpotInstanceRequestsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the parameters for DescribeSpotInstanceRequests.
type DescribeSpotInstanceRequestsInput struct {
	// The token to request the next set of results. This value is null when there are
	// no more results to return.
	NextToken *string
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// One or more Spot Instance request IDs.
	SpotInstanceRequestIds []*string
	// The maximum number of results to return in a single call. Specify a value
	// between 5 and 1000. To retrieve the remaining results, make another call with
	// the returned NextToken value.
	MaxResults *int32
	// One or more filters.
	//
	//     * availability-zone-group - The Availability Zone
	// group.
	//
	//     * create-time - The time stamp when the Spot Instance request was
	// created.
	//
	//     * fault-code - The fault code related to the request.
	//
	//     *
	// fault-message - The fault message related to the request.
	//
	//     * instance-id -
	// The ID of the instance that fulfilled the request.
	//
	//     * launch-group - The
	// Spot Instance launch group.
	//
	//     *
	// launch.block-device-mapping.delete-on-termination - Indicates whether the EBS
	// volume is deleted on instance termination.
	//
	//     *
	// launch.block-device-mapping.device-name - The device name for the volume in the
	// block device mapping (for example, /dev/sdh or xvdh).
	//
	//     *
	// launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS
	// volume.
	//
	//     * launch.block-device-mapping.volume-size - The size of the EBS
	// volume, in GiB.
	//
	//     * launch.block-device-mapping.volume-type - The type of EBS
	// volume: gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for
	// Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.
	//
	//     *
	// launch.group-id - The ID of the security group for the instance.
	//
	//     *
	// launch.group-name - The name of the security group for the instance.
	//
	//     *
	// launch.image-id - The ID of the AMI.
	//
	//     * launch.instance-type - The type of
	// instance (for example, m3.medium).
	//
	//     * launch.kernel-id - The kernel ID.
	//
	//
	// * launch.key-name - The name of the key pair the instance launched with.
	//
	//     *
	// launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot
	// Instance.
	//
	//     * launch.ramdisk-id - The RAM disk ID.
	//
	//     *
	// launched-availability-zone - The Availability Zone in which the request is
	// launched.
	//
	//     * network-interface.addresses.primary - Indicates whether the IP
	// address is the primary private IP address.
	//
	//     *
	// network-interface.delete-on-termination - Indicates whether the network
	// interface is deleted when the instance is terminated.
	//
	//     *
	// network-interface.description - A description of the network interface.
	//
	//     *
	// network-interface.device-index - The index of the device for the network
	// interface attachment on the instance.
	//
	//     * network-interface.group-id - The ID
	// of the security group associated with the network interface.
	//
	//     *
	// network-interface.network-interface-id - The ID of the network interface.
	//
	//     *
	// network-interface.private-ip-address - The primary private IP address of the
	// network interface.
	//
	//     * network-interface.subnet-id - The ID of the subnet for
	// the instance.
	//
	//     * product-description - The product description associated
	// with the instance (Linux/UNIX | Windows).
	//
	//     * spot-instance-request-id - The
	// Spot Instance request ID.
	//
	//     * spot-price - The maximum hourly price for any
	// Spot Instance launched to fulfill the request.
	//
	//     * state - The state of the
	// Spot Instance request (open | active | closed | cancelled | failed). Spot
	// request status information can help you track your Amazon EC2 Spot Instance
	// requests. For more information, see Spot request status
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html) in
	// the Amazon EC2 User Guide for Linux Instances.
	//
	//     * status-code - The short
	// code describing the most recent evaluation of your Spot Instance request.
	//
	//     *
	// status-message - The message explaining the status of the Spot Instance
	// request.
	//
	//     * tag: - The key/value combination of a tag assigned to the
	// resource. Use the tag key in the filter name and the tag value as the filter
	// value. For example, to find all resources that have a tag with the key Owner and
	// the value TeamA, specify tag:Owner for the filter name and TeamA for the filter
	// value.
	//
	//     * tag-key - The key of a tag assigned to the resource. Use this
	// filter to find all resources assigned a tag with a specific key, regardless of
	// the tag value.
	//
	//     * type - The type of Spot Instance request (one-time |
	// persistent).
	//
	//     * valid-from - The start date of the request.
	//
	//     *
	// valid-until - The end date of the request.
	Filters []*types.Filter
}

// Contains the output of DescribeSpotInstanceRequests.
type DescribeSpotInstanceRequestsOutput struct {
	// One or more Spot Instance requests.
	SpotInstanceRequests []*types.SpotInstanceRequest
	// The token to use to retrieve the next set of results. This value is null when
	// there are no more results to return.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpDescribeSpotInstanceRequestsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpDescribeSpotInstanceRequests{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpDescribeSpotInstanceRequests{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeSpotInstanceRequests(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "DescribeSpotInstanceRequests",
	}
}
