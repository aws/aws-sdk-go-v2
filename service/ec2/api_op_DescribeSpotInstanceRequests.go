// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opDescribeSpotInstanceRequests = "DescribeSpotInstanceRequests"

// DescribeSpotInstanceRequestsRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Describes the specified Spot Instance requests.
//
// You can use DescribeSpotInstanceRequests to find a running Spot Instance
// by examining the response. If the status of the Spot Instance is fulfilled,
// the instance ID appears in the response and contains the identifier of the
// instance. Alternatively, you can use DescribeInstances with a filter to look
// for instances where the instance lifecycle is spot.
//
// We recommend that you set MaxResults to a value between 5 and 1000 to limit
// the number of results returned. This paginates the output, which makes the
// list more manageable and returns the results faster. If the list of results
// exceeds your MaxResults value, then that number of results is returned along
// with a NextToken value that can be passed to a subsequent DescribeSpotInstanceRequests
// request to retrieve the remaining results.
//
// Spot Instance requests are deleted four hours after they are canceled and
// their instances are terminated.
//
//    // Example sending a request using DescribeSpotInstanceRequestsRequest.
//    req := client.DescribeSpotInstanceRequestsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotInstanceRequests
func (c *Client) DescribeSpotInstanceRequestsRequest(input *types.DescribeSpotInstanceRequestsInput) DescribeSpotInstanceRequestsRequest {
	op := &aws.Operation{
		Name:       opDescribeSpotInstanceRequests,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeSpotInstanceRequestsInput{}
	}

	req := c.newRequest(op, input, &types.DescribeSpotInstanceRequestsOutput{})
	return DescribeSpotInstanceRequestsRequest{Request: req, Input: input, Copy: c.DescribeSpotInstanceRequestsRequest}
}

// DescribeSpotInstanceRequestsRequest is the request type for the
// DescribeSpotInstanceRequests API operation.
type DescribeSpotInstanceRequestsRequest struct {
	*aws.Request
	Input *types.DescribeSpotInstanceRequestsInput
	Copy  func(*types.DescribeSpotInstanceRequestsInput) DescribeSpotInstanceRequestsRequest
}

// Send marshals and sends the DescribeSpotInstanceRequests API request.
func (r DescribeSpotInstanceRequestsRequest) Send(ctx context.Context) (*DescribeSpotInstanceRequestsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeSpotInstanceRequestsResponse{
		DescribeSpotInstanceRequestsOutput: r.Request.Data.(*types.DescribeSpotInstanceRequestsOutput),
		response:                           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeSpotInstanceRequestsRequestPaginator returns a paginator for DescribeSpotInstanceRequests.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeSpotInstanceRequestsRequest(input)
//   p := ec2.NewDescribeSpotInstanceRequestsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeSpotInstanceRequestsPaginator(req DescribeSpotInstanceRequestsRequest) DescribeSpotInstanceRequestsPaginator {
	return DescribeSpotInstanceRequestsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeSpotInstanceRequestsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeSpotInstanceRequestsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeSpotInstanceRequestsPaginator struct {
	aws.Pager
}

func (p *DescribeSpotInstanceRequestsPaginator) CurrentPage() *types.DescribeSpotInstanceRequestsOutput {
	return p.Pager.CurrentPage().(*types.DescribeSpotInstanceRequestsOutput)
}

// DescribeSpotInstanceRequestsResponse is the response type for the
// DescribeSpotInstanceRequests API operation.
type DescribeSpotInstanceRequestsResponse struct {
	*types.DescribeSpotInstanceRequestsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeSpotInstanceRequests request.
func (r *DescribeSpotInstanceRequestsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
