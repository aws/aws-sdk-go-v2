// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Stops an Amazon EBS-backed instance. You can use the Stop action to hibernate an
// instance if the instance is enabled for hibernation
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation)
// and it meets the hibernation prerequisites
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites).
// For more information, see Hibernate your instance
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the
// Amazon Elastic Compute Cloud User Guide. We don't charge usage for a stopped
// instance, or data transfer fees; however, your root partition Amazon EBS volume
// remains and continues to persist your data, and you are charged for Amazon EBS
// volume usage. Every time you start your Windows instance, Amazon EC2 charges you
// for a full instance hour. If you stop and restart your Windows instance, a new
// instance hour begins and Amazon EC2 charges you for another full instance hour
// even if you are still within the same 60-minute period when it was stopped.
// Every time you start your Linux instance, Amazon EC2 charges a one-minute
// minimum for instance usage, and thereafter charges per second for instance
// usage. You can't stop or hibernate instance store-backed instances. You can't
// use the Stop action to hibernate Spot Instances, but you can specify that Amazon
// EC2 should hibernate Spot Instances when they are interrupted. For more
// information, see Hibernating interrupted Spot Instances
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances)
// in the Amazon Elastic Compute Cloud User Guide. When you stop or hibernate an
// instance, we shut it down. You can restart your instance at any time. Before
// stopping or hibernating an instance, make sure it is in a state from which it
// can be restarted. Stopping an instance does not preserve data stored in RAM, but
// hibernating an instance does preserve data stored in RAM. If an instance cannot
// hibernate successfully, a normal shutdown occurs. Stopping and hibernating an
// instance is different to rebooting or terminating it. For example, when you stop
// or hibernate an instance, the root device and any other devices attached to the
// instance persist. When you terminate an instance, the root device and any other
// devices attached during the instance launch are automatically deleted. For more
// information about the differences between rebooting, stopping, hibernating, and
// terminating instances, see Instance lifecycle
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)
// in the Amazon Elastic Compute Cloud User Guide. When you stop an instance, we
// attempt to shut it down forcibly after a short while. If your instance appears
// stuck in the stopping state after a period of time, there may be an issue with
// the underlying host computer. For more information, see Troubleshooting stopping
// your instance
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html)
// in the Amazon Elastic Compute Cloud User Guide.
func (c *Client) StopInstances(ctx context.Context, params *StopInstancesInput, optFns ...func(*Options)) (*StopInstancesOutput, error) {
	stack := middleware.NewStack("StopInstances", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpStopInstancesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStopInstancesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStopInstances(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StopInstances",
			Err:           err,
		}
	}
	out := result.(*StopInstancesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StopInstancesInput struct {
	// Forces the instances to stop. The instances do not have an opportunity to flush
	// file system caches or file system metadata. If you use this option, you must
	// perform file system check and repair procedures. This option is not recommended
	// for Windows instances. Default: false
	Force *bool
	// The IDs of the instances.
	InstanceIds []*string
	// Hibernates the instance if the instance was enabled for hibernation at launch.
	// If the instance cannot hibernate successfully, a normal shutdown occurs. For
	// more information, see Hibernate your instance
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the
	// Amazon Elastic Compute Cloud User Guide. Default: false
	Hibernate *bool
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
}

type StopInstancesOutput struct {
	// Information about the stopped instances.
	StoppingInstances []*types.InstanceStateChange

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpStopInstancesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpStopInstances{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpStopInstances{}, middleware.After)
}

func newServiceMetadataMiddleware_opStopInstances(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "StopInstances",
	}
}
