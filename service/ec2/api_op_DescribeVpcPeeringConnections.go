// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes one or more of your VPC peering connections.
func (c *Client) DescribeVpcPeeringConnections(ctx context.Context, params *DescribeVpcPeeringConnectionsInput, optFns ...func(*Options)) (*DescribeVpcPeeringConnectionsOutput, error) {
	stack := middleware.NewStack("DescribeVpcPeeringConnections", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpDescribeVpcPeeringConnectionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeVpcPeeringConnections(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeVpcPeeringConnections",
			Err:           err,
		}
	}
	out := result.(*DescribeVpcPeeringConnectionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeVpcPeeringConnectionsInput struct {
	// One or more VPC peering connection IDs. Default: Describes all your VPC peering
	// connections.
	VpcPeeringConnectionIds []*string
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// One or more filters.
	//
	//     * accepter-vpc-info.cidr-block - The IPv4 CIDR block
	// of the accepter VPC.
	//
	//     * accepter-vpc-info.owner-id - The AWS account ID of
	// the owner of the accepter VPC.
	//
	//     * accepter-vpc-info.vpc-id - The ID of the
	// accepter VPC.
	//
	//     * expiration-time - The expiration date and time for the VPC
	// peering connection.
	//
	//     * requester-vpc-info.cidr-block - The IPv4 CIDR block
	// of the requester's VPC.
	//
	//     * requester-vpc-info.owner-id - The AWS account ID
	// of the owner of the requester VPC.
	//
	//     * requester-vpc-info.vpc-id - The ID of
	// the requester VPC.
	//
	//     * status-code - The status of the VPC peering connection
	// (pending-acceptance | failed | expired | provisioning | active | deleting |
	// deleted | rejected).
	//
	//     * status-message - A message that provides more
	// information about the status of the VPC peering connection, if applicable.
	//
	//
	// * tag: - The key/value combination of a tag assigned to the resource. Use the
	// tag key in the filter name and the tag value as the filter value. For example,
	// to find all resources that have a tag with the key Owner and the value TeamA,
	// specify tag:Owner for the filter name and TeamA for the filter value.
	//
	//     *
	// tag-key - The key of a tag assigned to the resource. Use this filter to find all
	// resources assigned a tag with a specific key, regardless of the tag value.
	//
	//
	// * vpc-peering-connection-id - The ID of the VPC peering connection.
	Filters []*types.Filter
	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults *int32
	// The token for the next page of results.
	NextToken *string
}

type DescribeVpcPeeringConnectionsOutput struct {
	// Information about the VPC peering connections.
	VpcPeeringConnections []*types.VpcPeeringConnection
	// The token to use to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpDescribeVpcPeeringConnectionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpDescribeVpcPeeringConnections{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpDescribeVpcPeeringConnections{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeVpcPeeringConnections(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "DescribeVpcPeeringConnections",
	}
}
