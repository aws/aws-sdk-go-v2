// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Modifies the specified Client VPN endpoint. Modifying the DNS server resets
// existing client connections.
func (c *Client) ModifyClientVpnEndpoint(ctx context.Context, params *ModifyClientVpnEndpointInput, optFns ...func(*Options)) (*ModifyClientVpnEndpointOutput, error) {
	stack := middleware.NewStack("ModifyClientVpnEndpoint", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpModifyClientVpnEndpointMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpModifyClientVpnEndpointValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opModifyClientVpnEndpoint(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ModifyClientVpnEndpoint",
			Err:           err,
		}
	}
	out := result.(*ModifyClientVpnEndpointOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ModifyClientVpnEndpointInput struct {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// The port number to assign to the Client VPN endpoint for TCP and UDP traffic.
	// Valid Values: 443 | 1194 Default Value: 443
	VpnPort *int32
	// The IDs of one or more security groups to apply to the target network.
	SecurityGroupIds []*string
	// A brief description of the Client VPN endpoint.
	Description *string
	// Information about the client connection logging options. If you enable client
	// connection logging, data about client connections is sent to a Cloudwatch Logs
	// log stream. The following information is logged:
	//
	//     * Client connection
	// requests
	//
	//     * Client connection results (successful and unsuccessful)
	//
	//     *
	// Reasons for unsuccessful client connection requests
	//
	//     * Client connection
	// termination time
	ConnectionLogOptions *types.ConnectionLogOptions
	// The ARN of the server certificate to be used. The server certificate must be
	// provisioned in AWS Certificate Manager (ACM).
	ServerCertificateArn *string
	// Information about the DNS servers to be used by Client VPN connections. A Client
	// VPN endpoint can have up to two DNS servers.
	DnsServers *types.DnsServersOptionsModifyStructure
	// Indicates whether the VPN is split-tunnel. For information about split-tunnel
	// VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint
	// (https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html)
	// in the AWS Client VPN Administrator Guide.
	SplitTunnel *bool
	// The ID of the VPC to associate with the Client VPN endpoint.
	VpcId *string
	// The ID of the Client VPN endpoint to modify.
	ClientVpnEndpointId *string
}

type ModifyClientVpnEndpointOutput struct {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return *bool

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpModifyClientVpnEndpointMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpModifyClientVpnEndpoint{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpModifyClientVpnEndpoint{}, middleware.After)
}

func newServiceMetadataMiddleware_opModifyClientVpnEndpoint(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "ModifyClientVpnEndpoint",
	}
}
