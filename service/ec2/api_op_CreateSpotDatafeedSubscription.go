// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opCreateSpotDatafeedSubscription = "CreateSpotDatafeedSubscription"

// CreateSpotDatafeedSubscriptionRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Creates a data feed for Spot Instances, enabling you to view Spot Instance
// usage logs. You can create one data feed per AWS account. For more information,
// see Spot Instance Data Feed (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html)
// in the Amazon EC2 User Guide for Linux Instances.
//
//    // Example sending a request using CreateSpotDatafeedSubscriptionRequest.
//    req := client.CreateSpotDatafeedSubscriptionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSpotDatafeedSubscription
func (c *Client) CreateSpotDatafeedSubscriptionRequest(input *types.CreateSpotDatafeedSubscriptionInput) CreateSpotDatafeedSubscriptionRequest {
	op := &aws.Operation{
		Name:       opCreateSpotDatafeedSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateSpotDatafeedSubscriptionInput{}
	}

	req := c.newRequest(op, input, &types.CreateSpotDatafeedSubscriptionOutput{})
	return CreateSpotDatafeedSubscriptionRequest{Request: req, Input: input, Copy: c.CreateSpotDatafeedSubscriptionRequest}
}

// CreateSpotDatafeedSubscriptionRequest is the request type for the
// CreateSpotDatafeedSubscription API operation.
type CreateSpotDatafeedSubscriptionRequest struct {
	*aws.Request
	Input *types.CreateSpotDatafeedSubscriptionInput
	Copy  func(*types.CreateSpotDatafeedSubscriptionInput) CreateSpotDatafeedSubscriptionRequest
}

// Send marshals and sends the CreateSpotDatafeedSubscription API request.
func (r CreateSpotDatafeedSubscriptionRequest) Send(ctx context.Context) (*CreateSpotDatafeedSubscriptionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateSpotDatafeedSubscriptionResponse{
		CreateSpotDatafeedSubscriptionOutput: r.Request.Data.(*types.CreateSpotDatafeedSubscriptionOutput),
		response:                             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateSpotDatafeedSubscriptionResponse is the response type for the
// CreateSpotDatafeedSubscription API operation.
type CreateSpotDatafeedSubscriptionResponse struct {
	*types.CreateSpotDatafeedSubscriptionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateSpotDatafeedSubscription request.
func (r *CreateSpotDatafeedSubscriptionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
