// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Allows or restricts mirroring network services. By default, Amazon DNS network
// services are not eligible for Traffic Mirror. Use AddNetworkServices to add
// network services to a Traffic Mirror filter. When a network service is added to
// the Traffic Mirror filter, all traffic related to that network service will be
// mirrored. When you no longer want to mirror network services, use
// RemoveNetworkServices to remove the network services from the Traffic Mirror
// filter. For information about filter rule properties, see Network Services
// (https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html)
// in the Traffic Mirroring User Guide .
func (c *Client) ModifyTrafficMirrorFilterNetworkServices(ctx context.Context, params *ModifyTrafficMirrorFilterNetworkServicesInput, optFns ...func(*Options)) (*ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	stack := middleware.NewStack("ModifyTrafficMirrorFilterNetworkServices", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpModifyTrafficMirrorFilterNetworkServicesMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpModifyTrafficMirrorFilterNetworkServicesValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opModifyTrafficMirrorFilterNetworkServices(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ModifyTrafficMirrorFilterNetworkServices",
			Err:           err,
		}
	}
	out := result.(*ModifyTrafficMirrorFilterNetworkServicesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ModifyTrafficMirrorFilterNetworkServicesInput struct {
	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterId *string
	// The network service, for example Amazon DNS, that you want to mirror.
	AddNetworkServices []types.TrafficMirrorNetworkService
	// The network service, for example Amazon DNS, that you no longer want to mirror.
	RemoveNetworkServices []types.TrafficMirrorNetworkService
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
}

type ModifyTrafficMirrorFilterNetworkServicesOutput struct {
	// The Traffic Mirror filter that the network service is associated with.
	TrafficMirrorFilter *types.TrafficMirrorFilter

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpModifyTrafficMirrorFilterNetworkServicesMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpModifyTrafficMirrorFilterNetworkServices{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpModifyTrafficMirrorFilterNetworkServices{}, middleware.After)
}

func newServiceMetadataMiddleware_opModifyTrafficMirrorFilterNetworkServices(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "ModifyTrafficMirrorFilterNetworkServices",
	}
}
