// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a subnet in a specified VPC. You must specify an IPv4 CIDR block for the
// subnet. After you create a subnet, you can't change its CIDR block. The allowed
// block size is between a /16 netmask (65,536 IP addresses) and /28 netmask (16 IP
// addresses). The CIDR block must not overlap with the CIDR block of an existing
// subnet in the VPC. If you've associated an IPv6 CIDR block with your VPC, you
// can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. AWS
// reserves both the first four and the last IPv4 address in each subnet's CIDR
// block. They're not available for use. If you add more than one subnet to a VPC,
// they're set up in a star topology with a logical router in the middle. When you
// stop an instance in a subnet, it retains its private IPv4 address. It's
// therefore possible to have a subnet with no running instances (they're all
// stopped), but no remaining IP addresses available. For more information about
// subnets, see Your VPC and Subnets
// (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the
// Amazon Virtual Private Cloud User Guide.
func (c *Client) CreateSubnet(ctx context.Context, params *CreateSubnetInput, optFns ...func(*Options)) (*CreateSubnetOutput, error) {
	stack := middleware.NewStack("CreateSubnet", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpCreateSubnetMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateSubnetValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateSubnet(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateSubnet",
			Err:           err,
		}
	}
	out := result.(*CreateSubnetOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateSubnetInput struct {
	// The IPv6 network range for the subnet, in CIDR notation. The subnet size must
	// use a /64 prefix length.
	Ipv6CidrBlock *string
	// The ID of the VPC.
	VpcId *string
	// The AZ ID or the Local Zone ID of the subnet.
	AvailabilityZoneId *string
	// The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN,
	// you must also specify the Availability Zone of the Outpost subnet.
	OutpostArn *string
	// The IPv4 network range for the subnet, in CIDR notation. For example,
	// 10.0.0.0/24. We modify the specified CIDR block to its canonical form; for
	// example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
	CidrBlock *string
	// The Availability Zone or Local Zone for the subnet. Default: AWS selects one for
	// you. If you create more than one subnet in your VPC, we do not necessarily
	// select a different zone for each subnet. To create a subnet in a Local Zone, set
	// this value to the Local Zone ID, for example us-west-2-lax-1a. For information
	// about the Regions that support Local Zones, see Available Regions
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions)
	// in the Amazon Elastic Compute Cloud User Guide. To create a subnet in an
	// Outpost, set this value to the Availability Zone for the Outpost and specify the
	// Outpost ARN.
	AvailabilityZone *string
	// The tags to assign to the subnet.
	TagSpecifications []*types.TagSpecification
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
}

type CreateSubnetOutput struct {
	// Information about the subnet.
	Subnet *types.Subnet

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpCreateSubnetMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpCreateSubnet{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpCreateSubnet{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateSubnet(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "CreateSubnet",
	}
}
