// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns a quote and exchange information for exchanging one or more specified
// Convertible Reserved Instances for a new Convertible Reserved Instance. If the
// exchange cannot be performed, the reason is returned in the response. Use
// AcceptReservedInstancesExchangeQuote () to perform the exchange.
func (c *Client) GetReservedInstancesExchangeQuote(ctx context.Context, params *GetReservedInstancesExchangeQuoteInput, optFns ...func(*Options)) (*GetReservedInstancesExchangeQuoteOutput, error) {
	stack := middleware.NewStack("GetReservedInstancesExchangeQuote", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpGetReservedInstancesExchangeQuoteMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetReservedInstancesExchangeQuoteValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetReservedInstancesExchangeQuote(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetReservedInstancesExchangeQuote",
			Err:           err,
		}
	}
	out := result.(*GetReservedInstancesExchangeQuoteOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the parameters for GetReservedInstanceExchangeQuote.
type GetReservedInstancesExchangeQuoteInput struct {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// The configuration of the target Convertible Reserved Instance to exchange for
	// your current Convertible Reserved Instances.
	TargetConfigurations []*types.TargetConfigurationRequest
	// The IDs of the Convertible Reserved Instances to exchange.
	ReservedInstanceIds []*string
}

// Contains the output of GetReservedInstancesExchangeQuote.
type GetReservedInstancesExchangeQuoteOutput struct {
	// If true, the exchange is valid. If false, the exchange cannot be completed.
	IsValidExchange *bool
	// The configuration of your Convertible Reserved Instances.
	ReservedInstanceValueSet []*types.ReservedInstanceReservationValue
	// The values of the target Convertible Reserved Instances.
	TargetConfigurationValueSet []*types.TargetReservationValue
	// The new end date of the reservation term.
	OutputReservedInstancesWillExpireAt *time.Time
	// The cost associated with the Reserved Instance.
	TargetConfigurationValueRollup *types.ReservationValue
	// Describes the reason why the exchange cannot be completed.
	ValidationFailureReason *string
	// The cost associated with the Reserved Instance.
	ReservedInstanceValueRollup *types.ReservationValue
	// The currency of the transaction.
	CurrencyCode *string
	// The total true upfront charge for the exchange.
	PaymentDue *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpGetReservedInstancesExchangeQuoteMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpGetReservedInstancesExchangeQuote{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpGetReservedInstancesExchangeQuote{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetReservedInstancesExchangeQuote(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "GetReservedInstancesExchangeQuote",
	}
}
