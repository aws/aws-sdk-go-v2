// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opDescribeVolumeStatus = "DescribeVolumeStatus"

// DescribeVolumeStatusRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Describes the status of the specified volumes. Volume status provides the
// result of the checks performed on your volumes to determine events that can
// impair the performance of your volumes. The performance of a volume can be
// affected if an issue occurs on the volume's underlying host. If the volume's
// underlying host experiences a power outage or system issue, after the system
// is restored, there could be data inconsistencies on the volume. Volume events
// notify you if this occurs. Volume actions notify you if any action needs
// to be taken in response to the event.
//
// The DescribeVolumeStatus operation provides the following information about
// the specified volumes:
//
// Status: Reflects the current status of the volume. The possible values are
// ok, impaired , warning, or insufficient-data. If all checks pass, the overall
// status of the volume is ok. If the check fails, the overall status is impaired.
// If the status is insufficient-data, then the checks may still be taking place
// on your volume at the time. We recommend that you retry the request. For
// more information about volume status, see Monitoring the Status of Your Volumes
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
// Events: Reflect the cause of a volume status and may require you to take
// action. For example, if your volume returns an impaired status, then the
// volume event might be potential-data-inconsistency. This means that your
// volume has been affected by an issue with the underlying host, has all I/O
// operations disabled, and may have inconsistent data.
//
// Actions: Reflect the actions you may have to take in response to an event.
// For example, if the status of the volume is impaired and the volume event
// shows potential-data-inconsistency, then the action shows enable-volume-io.
// This means that you may want to enable the I/O operations for the volume
// by calling the EnableVolumeIO action and then check the volume for data consistency.
//
// Volume status is based on the volume status checks, and does not reflect
// the volume state. Therefore, volume status does not indicate volumes in the
// error state (for example, when a volume is incapable of accepting I/O.)
//
//    // Example sending a request using DescribeVolumeStatusRequest.
//    req := client.DescribeVolumeStatusRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeStatus
func (c *Client) DescribeVolumeStatusRequest(input *types.DescribeVolumeStatusInput) DescribeVolumeStatusRequest {
	op := &aws.Operation{
		Name:       opDescribeVolumeStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeVolumeStatusInput{}
	}

	req := c.newRequest(op, input, &types.DescribeVolumeStatusOutput{})
	return DescribeVolumeStatusRequest{Request: req, Input: input, Copy: c.DescribeVolumeStatusRequest}
}

// DescribeVolumeStatusRequest is the request type for the
// DescribeVolumeStatus API operation.
type DescribeVolumeStatusRequest struct {
	*aws.Request
	Input *types.DescribeVolumeStatusInput
	Copy  func(*types.DescribeVolumeStatusInput) DescribeVolumeStatusRequest
}

// Send marshals and sends the DescribeVolumeStatus API request.
func (r DescribeVolumeStatusRequest) Send(ctx context.Context) (*DescribeVolumeStatusResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeVolumeStatusResponse{
		DescribeVolumeStatusOutput: r.Request.Data.(*types.DescribeVolumeStatusOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeVolumeStatusRequestPaginator returns a paginator for DescribeVolumeStatus.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeVolumeStatusRequest(input)
//   p := ec2.NewDescribeVolumeStatusRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeVolumeStatusPaginator(req DescribeVolumeStatusRequest) DescribeVolumeStatusPaginator {
	return DescribeVolumeStatusPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeVolumeStatusInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeVolumeStatusPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeVolumeStatusPaginator struct {
	aws.Pager
}

func (p *DescribeVolumeStatusPaginator) CurrentPage() *types.DescribeVolumeStatusOutput {
	return p.Pager.CurrentPage().(*types.DescribeVolumeStatusOutput)
}

// DescribeVolumeStatusResponse is the response type for the
// DescribeVolumeStatus API operation.
type DescribeVolumeStatusResponse struct {
	*types.DescribeVolumeStatusOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeVolumeStatus request.
func (r *DescribeVolumeStatusResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
