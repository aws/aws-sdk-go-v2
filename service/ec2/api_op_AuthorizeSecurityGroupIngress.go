// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/ec2query"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opAuthorizeSecurityGroupIngress = "AuthorizeSecurityGroupIngress"

// AuthorizeSecurityGroupIngressRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Adds the specified ingress rules to a security group.
//
// An inbound rule permits instances to receive traffic from the specified IPv4
// or IPv6 CIDR address ranges, or from the instances associated with the specified
// destination security groups.
//
// You specify a protocol for each rule (for example, TCP). For TCP and UDP,
// you must also specify the destination port or port range. For ICMP/ICMPv6,
// you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean
// all types or all codes.
//
// Rule changes are propagated to instances within the security group as quickly
// as possible. However, a small delay might occur.
//
// For more information about VPC security group limits, see Amazon VPC Limits
// (https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html).
//
//    // Example sending a request using AuthorizeSecurityGroupIngressRequest.
//    req := client.AuthorizeSecurityGroupIngressRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupIngress
func (c *Client) AuthorizeSecurityGroupIngressRequest(input *types.AuthorizeSecurityGroupIngressInput) AuthorizeSecurityGroupIngressRequest {
	op := &aws.Operation{
		Name:       opAuthorizeSecurityGroupIngress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AuthorizeSecurityGroupIngressInput{}
	}

	req := c.newRequest(op, input, &types.AuthorizeSecurityGroupIngressOutput{})
	req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return AuthorizeSecurityGroupIngressRequest{Request: req, Input: input, Copy: c.AuthorizeSecurityGroupIngressRequest}
}

// AuthorizeSecurityGroupIngressRequest is the request type for the
// AuthorizeSecurityGroupIngress API operation.
type AuthorizeSecurityGroupIngressRequest struct {
	*aws.Request
	Input *types.AuthorizeSecurityGroupIngressInput
	Copy  func(*types.AuthorizeSecurityGroupIngressInput) AuthorizeSecurityGroupIngressRequest
}

// Send marshals and sends the AuthorizeSecurityGroupIngress API request.
func (r AuthorizeSecurityGroupIngressRequest) Send(ctx context.Context) (*AuthorizeSecurityGroupIngressResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AuthorizeSecurityGroupIngressResponse{
		AuthorizeSecurityGroupIngressOutput: r.Request.Data.(*types.AuthorizeSecurityGroupIngressOutput),
		response:                            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AuthorizeSecurityGroupIngressResponse is the response type for the
// AuthorizeSecurityGroupIngress API operation.
type AuthorizeSecurityGroupIngressResponse struct {
	*types.AuthorizeSecurityGroupIngressOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AuthorizeSecurityGroupIngress request.
func (r *AuthorizeSecurityGroupIngressResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
