// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the
// public key and displays the private key for you to save to a file. The private
// key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with
// the specified name already exists, Amazon EC2 returns an error. You can have up
// to five thousand key pairs per Region. The key pair returned to you is available
// only in the Region in which you create it. If you prefer, you can create your
// own key pair using a third-party tool and upload it to any Region using
// ImportKeyPair (). For more information, see Key Pairs
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the
// Amazon Elastic Compute Cloud User Guide.
func (c *Client) CreateKeyPair(ctx context.Context, params *CreateKeyPairInput, optFns ...func(*Options)) (*CreateKeyPairOutput, error) {
	stack := middleware.NewStack("CreateKeyPair", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpCreateKeyPairMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateKeyPairValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateKeyPair(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateKeyPair",
			Err:           err,
		}
	}
	out := result.(*CreateKeyPairOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateKeyPairInput struct {
	// The tags to apply to the new key pair.
	TagSpecifications []*types.TagSpecification
	// A unique name for the key pair. Constraints: Up to 255 ASCII characters
	KeyName *string
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
}

// Describes a key pair.
type CreateKeyPairOutput struct {
	// The SHA-1 digest of the DER encoded private key.
	KeyFingerprint *string
	// The name of the key pair.
	KeyName *string
	// An unencrypted PEM encoded RSA private key.
	KeyMaterial *string
	// The ID of the key pair.
	KeyPairId *string
	// Any tags applied to the key pair.
	Tags []*types.Tag

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpCreateKeyPairMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpCreateKeyPair{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpCreateKeyPair{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateKeyPair(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "CreateKeyPair",
	}
}
