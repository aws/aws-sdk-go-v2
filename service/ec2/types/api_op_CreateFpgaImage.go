// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

type CreateFpgaImageInput struct {
	_ struct{} `type:"structure"`

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken *string `type:"string"`

	// A description for the AFI.
	Description *string `type:"string"`

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun *bool `type:"boolean"`

	// The location of the encrypted design checkpoint in Amazon S3. The input must
	// be a tarball.
	//
	// InputStorageLocation is a required field
	InputStorageLocation *StorageLocation `type:"structure" required:"true"`

	// The location in Amazon S3 for the output logs.
	LogsStorageLocation *StorageLocation `type:"structure"`

	// A name for the AFI.
	Name *string `type:"string"`

	// The tags to apply to the FPGA image during creation.
	TagSpecifications []TagSpecification `locationName:"TagSpecification" locationNameList:"item" type:"list"`
}

// String returns the string representation
func (s CreateFpgaImageInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateFpgaImageInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateFpgaImageInput"}

	if s.InputStorageLocation == nil {
		invalidParams.Add(aws.NewErrParamRequired("InputStorageLocation"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type CreateFpgaImageOutput struct {
	_ struct{} `type:"structure"`

	// The global FPGA image identifier (AGFI ID).
	FpgaImageGlobalId *string `locationName:"fpgaImageGlobalId" type:"string"`

	// The FPGA image identifier (AFI ID).
	FpgaImageId *string `locationName:"fpgaImageId" type:"string"`
}

// String returns the string representation
func (s CreateFpgaImageOutput) String() string {
	return awsutil.Prettify(s)
}
