// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opDescribeVpcs = "DescribeVpcs"

// DescribeVpcsRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Describes one or more of your VPCs.
//
//    // Example sending a request using DescribeVpcsRequest.
//    req := client.DescribeVpcsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcs
func (c *Client) DescribeVpcsRequest(input *types.DescribeVpcsInput) DescribeVpcsRequest {
	op := &aws.Operation{
		Name:       opDescribeVpcs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeVpcsInput{}
	}

	req := c.newRequest(op, input, &types.DescribeVpcsOutput{})
	return DescribeVpcsRequest{Request: req, Input: input, Copy: c.DescribeVpcsRequest}
}

// DescribeVpcsRequest is the request type for the
// DescribeVpcs API operation.
type DescribeVpcsRequest struct {
	*aws.Request
	Input *types.DescribeVpcsInput
	Copy  func(*types.DescribeVpcsInput) DescribeVpcsRequest
}

// Send marshals and sends the DescribeVpcs API request.
func (r DescribeVpcsRequest) Send(ctx context.Context) (*DescribeVpcsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeVpcsResponse{
		DescribeVpcsOutput: r.Request.Data.(*types.DescribeVpcsOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeVpcsRequestPaginator returns a paginator for DescribeVpcs.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeVpcsRequest(input)
//   p := ec2.NewDescribeVpcsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeVpcsPaginator(req DescribeVpcsRequest) DescribeVpcsPaginator {
	return DescribeVpcsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeVpcsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeVpcsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeVpcsPaginator struct {
	aws.Pager
}

func (p *DescribeVpcsPaginator) CurrentPage() *types.DescribeVpcsOutput {
	return p.Pager.CurrentPage().(*types.DescribeVpcsOutput)
}

// DescribeVpcsResponse is the response type for the
// DescribeVpcs API operation.
type DescribeVpcsResponse struct {
	*types.DescribeVpcsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeVpcs request.
func (r *DescribeVpcsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
