// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes the specified EBS snapshots available to you or all of the EBS
// snapshots available to you. The snapshots available to you include public
// snapshots, private snapshots that you own, and private snapshots owned by other
// AWS accounts for which you have explicit create volume permissions. The create
// volume permissions fall into the following categories:
//
//     * public: The owner
// of the snapshot granted create volume permissions for the snapshot to the all
// group. All AWS accounts have create volume permissions for these snapshots.
//
//
// * explicit: The owner of the snapshot granted create volume permissions to a
// specific AWS account.
//
//     * implicit: An AWS account has implicit create volume
// permissions for all snapshots it owns.
//
// The list of snapshots returned can be
// filtered by specifying snapshot IDs, snapshot owners, or AWS accounts with
// create volume permissions. If no options are specified, Amazon EC2 returns all
// snapshots for which you have create volume permissions. If you specify one or
// more snapshot IDs, only snapshots that have the specified IDs are returned. If
// you specify an invalid snapshot ID, an error is returned. If you specify a
// snapshot ID for which you do not have access, it is not included in the returned
// results. If you specify one or more snapshot owners using the OwnerIds option,
// only snapshots from the specified owners and for which you have access are
// returned. The results can include the AWS account IDs of the specified owners,
// amazon for snapshots owned by Amazon, or self for snapshots that you own. If you
// specify a list of restorable users, only snapshots with create snapshot
// permissions for those users are returned. You can specify AWS account IDs (if
// you own the snapshots), self for snapshots for which you own or have explicit
// permissions, or all for public snapshots. If you are describing a long list of
// snapshots, we recommend that you paginate the output to make the list more
// manageable. The MaxResults parameter sets the maximum number of results returned
// in a single page. If the list of results exceeds your MaxResults value, then
// that number of results is returned along with a NextToken value that can be
// passed to a subsequent DescribeSnapshots request to retrieve the remaining
// results. To get the state of fast snapshot restores for a snapshot, use
// DescribeFastSnapshotRestores (). For more information about EBS snapshots, see
// Amazon EBS Snapshots
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html) in the
// Amazon Elastic Compute Cloud User Guide.
func (c *Client) DescribeSnapshots(ctx context.Context, params *DescribeSnapshotsInput, optFns ...func(*Options)) (*DescribeSnapshotsOutput, error) {
	stack := middleware.NewStack("DescribeSnapshots", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpDescribeSnapshotsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeSnapshots(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeSnapshots",
			Err:           err,
		}
	}
	out := result.(*DescribeSnapshotsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeSnapshotsInput struct {
	// The IDs of the AWS accounts that can create volumes from the snapshot.
	RestorableByUserIds []*string
	// The snapshot IDs. Default: Describes the snapshots for which you have create
	// volume permissions.
	SnapshotIds []*string
	// Scopes the results to snapshots with the specified owners. You can specify a
	// combination of AWS account IDs, self, and amazon.
	OwnerIds []*string
	// The filters.
	//
	//     * description - A description of the snapshot.
	//
	//     *
	// encrypted - Indicates whether the snapshot is encrypted (true | false)
	//
	//     *
	// owner-alias - The owner alias, from an Amazon-maintained list (amazon). This is
	// not the user-configured AWS account alias set using the IAM console. We
	// recommend that you use the related parameter instead of this filter.
	//
	//     *
	// owner-id - The AWS account ID of the owner. We recommend that you use the
	// related parameter instead of this filter.
	//
	//     * progress - The progress of the
	// snapshot, as a percentage (for example, 80%).
	//
	//     * snapshot-id - The snapshot
	// ID.
	//
	//     * start-time - The time stamp when the snapshot was initiated.
	//
	//     *
	// status - The status of the snapshot (pending | completed | error).
	//
	//     * tag: -
	// The key/value combination of a tag assigned to the resource. Use the tag key in
	// the filter name and the tag value as the filter value. For example, to find all
	// resources that have a tag with the key Owner and the value TeamA, specify
	// tag:Owner for the filter name and TeamA for the filter value.
	//
	//     * tag-key -
	// The key of a tag assigned to the resource. Use this filter to find all resources
	// assigned a tag with a specific key, regardless of the tag value.
	//
	//     *
	// volume-id - The ID of the volume the snapshot is for.
	//
	//     * volume-size - The
	// size of the volume, in GiB.
	Filters []*types.Filter
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// The maximum number of snapshot results returned by DescribeSnapshots in
	// paginated output. When this parameter is used, DescribeSnapshots only returns
	// MaxResults results in a single page along with a NextToken response element. The
	// remaining results of the initial request can be seen by sending another
	// DescribeSnapshots request with the returned NextToken value. This value can be
	// between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000
	// results are returned. If this parameter is not used, then DescribeSnapshots
	// returns all results. You cannot specify this parameter and the snapshot IDs
	// parameter in the same request.
	MaxResults *int32
	// The NextToken value returned from a previous paginated DescribeSnapshots request
	// where MaxResults was used and the results exceeded the value of that parameter.
	// Pagination continues from the end of the previous results that returned the
	// NextToken value. This value is null when there are no more results to return.
	NextToken *string
}

type DescribeSnapshotsOutput struct {
	// Information about the snapshots.
	Snapshots []*types.Snapshot
	// The NextToken value to include in a future DescribeSnapshots request. When the
	// results of a DescribeSnapshots request exceed MaxResults, this value can be used
	// to retrieve the next page of results. This value is null when there are no more
	// results to return.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpDescribeSnapshotsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpDescribeSnapshots{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpDescribeSnapshots{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeSnapshots(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "DescribeSnapshots",
	}
}
