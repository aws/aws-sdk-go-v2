// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opCreateVpc = "CreateVpc"

// CreateVpcRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can
// create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16
// netmask (65,536 IPv4 addresses). For more information about how large to
// make your VPC, see Your VPC and Subnets (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)
// in the Amazon Virtual Private Cloud User Guide.
//
// You can optionally request an Amazon-provided IPv6 CIDR block for the VPC.
// The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon's
// pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.
//
// By default, each instance you launch in the VPC has the default DHCP options,
// which include only a default DNS server that we provide (AmazonProvidedDNS).
// For more information, see DHCP Options Sets (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html)
// in the Amazon Virtual Private Cloud User Guide.
//
// You can specify the instance tenancy value for the VPC when you create it.
// You can't change this value for the VPC after you create it. For more information,
// see Dedicated Instances (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
//    // Example sending a request using CreateVpcRequest.
//    req := client.CreateVpcRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpc
func (c *Client) CreateVpcRequest(input *types.CreateVpcInput) CreateVpcRequest {
	op := &aws.Operation{
		Name:       opCreateVpc,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateVpcInput{}
	}

	req := c.newRequest(op, input, &types.CreateVpcOutput{})
	return CreateVpcRequest{Request: req, Input: input, Copy: c.CreateVpcRequest}
}

// CreateVpcRequest is the request type for the
// CreateVpc API operation.
type CreateVpcRequest struct {
	*aws.Request
	Input *types.CreateVpcInput
	Copy  func(*types.CreateVpcInput) CreateVpcRequest
}

// Send marshals and sends the CreateVpc API request.
func (r CreateVpcRequest) Send(ctx context.Context) (*CreateVpcResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateVpcResponse{
		CreateVpcOutput: r.Request.Data.(*types.CreateVpcOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateVpcResponse is the response type for the
// CreateVpc API operation.
type CreateVpcResponse struct {
	*types.CreateVpcOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateVpc request.
func (r *CreateVpcResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
