// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opDescribeScheduledInstanceAvailability = "DescribeScheduledInstanceAvailability"

// DescribeScheduledInstanceAvailabilityRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Finds available schedules that meet the specified criteria.
//
// You can search for an available schedule no more than 3 months in advance.
// You must meet the minimum required duration of 1,200 hours per year. For
// example, the minimum daily schedule is 4 hours, the minimum weekly schedule
// is 24 hours, and the minimum monthly schedule is 100 hours.
//
// After you find a schedule that meets your needs, call PurchaseScheduledInstances
// to purchase Scheduled Instances with that schedule.
//
//    // Example sending a request using DescribeScheduledInstanceAvailabilityRequest.
//    req := client.DescribeScheduledInstanceAvailabilityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstanceAvailability
func (c *Client) DescribeScheduledInstanceAvailabilityRequest(input *types.DescribeScheduledInstanceAvailabilityInput) DescribeScheduledInstanceAvailabilityRequest {
	op := &aws.Operation{
		Name:       opDescribeScheduledInstanceAvailability,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribeScheduledInstanceAvailabilityInput{}
	}

	req := c.newRequest(op, input, &types.DescribeScheduledInstanceAvailabilityOutput{})
	return DescribeScheduledInstanceAvailabilityRequest{Request: req, Input: input, Copy: c.DescribeScheduledInstanceAvailabilityRequest}
}

// DescribeScheduledInstanceAvailabilityRequest is the request type for the
// DescribeScheduledInstanceAvailability API operation.
type DescribeScheduledInstanceAvailabilityRequest struct {
	*aws.Request
	Input *types.DescribeScheduledInstanceAvailabilityInput
	Copy  func(*types.DescribeScheduledInstanceAvailabilityInput) DescribeScheduledInstanceAvailabilityRequest
}

// Send marshals and sends the DescribeScheduledInstanceAvailability API request.
func (r DescribeScheduledInstanceAvailabilityRequest) Send(ctx context.Context) (*DescribeScheduledInstanceAvailabilityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeScheduledInstanceAvailabilityResponse{
		DescribeScheduledInstanceAvailabilityOutput: r.Request.Data.(*types.DescribeScheduledInstanceAvailabilityOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribeScheduledInstanceAvailabilityRequestPaginator returns a paginator for DescribeScheduledInstanceAvailability.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribeScheduledInstanceAvailabilityRequest(input)
//   p := ec2.NewDescribeScheduledInstanceAvailabilityRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribeScheduledInstanceAvailabilityPaginator(req DescribeScheduledInstanceAvailabilityRequest) DescribeScheduledInstanceAvailabilityPaginator {
	return DescribeScheduledInstanceAvailabilityPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribeScheduledInstanceAvailabilityInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribeScheduledInstanceAvailabilityPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribeScheduledInstanceAvailabilityPaginator struct {
	aws.Pager
}

func (p *DescribeScheduledInstanceAvailabilityPaginator) CurrentPage() *types.DescribeScheduledInstanceAvailabilityOutput {
	return p.Pager.CurrentPage().(*types.DescribeScheduledInstanceAvailabilityOutput)
}

// DescribeScheduledInstanceAvailabilityResponse is the response type for the
// DescribeScheduledInstanceAvailability API operation.
type DescribeScheduledInstanceAvailabilityResponse struct {
	*types.DescribeScheduledInstanceAvailabilityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeScheduledInstanceAvailability request.
func (r *DescribeScheduledInstanceAvailabilityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
