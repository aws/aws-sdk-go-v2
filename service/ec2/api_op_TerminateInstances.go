// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opTerminateInstances = "TerminateInstances"

// TerminateInstancesRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Shuts down the specified instances. This operation is idempotent; if you
// terminate an instance more than once, each call succeeds.
//
// If you specify multiple instances and the request fails (for example, because
// of a single incorrect instance ID), none of the instances are terminated.
//
// Terminated instances remain visible after termination (for approximately
// one hour).
//
// By default, Amazon EC2 deletes all EBS volumes that were attached when the
// instance launched. Volumes attached after instance launch continue running.
//
// You can stop, start, and terminate EBS-backed instances. You can only terminate
// instance store-backed instances. What happens to an instance differs if you
// stop it or terminate it. For example, when you stop an instance, the root
// device and any other devices attached to the instance persist. When you terminate
// an instance, any attached EBS volumes with the DeleteOnTermination block
// device mapping parameter set to true are automatically deleted. For more
// information about the differences between stopping and terminating instances,
// see Instance Lifecycle (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
// For more information about troubleshooting, see Troubleshooting Terminating
// Your Instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
//    // Example sending a request using TerminateInstancesRequest.
//    req := client.TerminateInstancesRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TerminateInstances
func (c *Client) TerminateInstancesRequest(input *types.TerminateInstancesInput) TerminateInstancesRequest {
	op := &aws.Operation{
		Name:       opTerminateInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.TerminateInstancesInput{}
	}

	req := c.newRequest(op, input, &types.TerminateInstancesOutput{})
	return TerminateInstancesRequest{Request: req, Input: input, Copy: c.TerminateInstancesRequest}
}

// TerminateInstancesRequest is the request type for the
// TerminateInstances API operation.
type TerminateInstancesRequest struct {
	*aws.Request
	Input *types.TerminateInstancesInput
	Copy  func(*types.TerminateInstancesInput) TerminateInstancesRequest
}

// Send marshals and sends the TerminateInstances API request.
func (r TerminateInstancesRequest) Send(ctx context.Context) (*TerminateInstancesResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &TerminateInstancesResponse{
		TerminateInstancesOutput: r.Request.Data.(*types.TerminateInstancesOutput),
		response:                 &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// TerminateInstancesResponse is the response type for the
// TerminateInstances API operation.
type TerminateInstancesResponse struct {
	*types.TerminateInstancesOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// TerminateInstances request.
func (r *TerminateInstancesResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
