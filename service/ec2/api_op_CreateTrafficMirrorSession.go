// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opCreateTrafficMirrorSession = "CreateTrafficMirrorSession"

// CreateTrafficMirrorSessionRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Creates a Traffic Mirror session.
//
// A Traffic Mirror session actively copies packets from a Traffic Mirror source
// to a Traffic Mirror target. Create a filter, and then assign it to the session
// to define a subset of the traffic to mirror, for example all TCP traffic.
//
// The Traffic Mirror source and the Traffic Mirror target (monitoring appliances)
// can be in the same VPC, or in a different VPC connected via VPC peering or
// a transit gateway.
//
// By default, no traffic is mirrored. Use CreateTrafficMirrorFilter (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm)
// to create filter rules that specify the traffic to mirror.
//
//    // Example sending a request using CreateTrafficMirrorSessionRequest.
//    req := client.CreateTrafficMirrorSessionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateTrafficMirrorSession
func (c *Client) CreateTrafficMirrorSessionRequest(input *types.CreateTrafficMirrorSessionInput) CreateTrafficMirrorSessionRequest {
	op := &aws.Operation{
		Name:       opCreateTrafficMirrorSession,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateTrafficMirrorSessionInput{}
	}

	req := c.newRequest(op, input, &types.CreateTrafficMirrorSessionOutput{})
	return CreateTrafficMirrorSessionRequest{Request: req, Input: input, Copy: c.CreateTrafficMirrorSessionRequest}
}

// CreateTrafficMirrorSessionRequest is the request type for the
// CreateTrafficMirrorSession API operation.
type CreateTrafficMirrorSessionRequest struct {
	*aws.Request
	Input *types.CreateTrafficMirrorSessionInput
	Copy  func(*types.CreateTrafficMirrorSessionInput) CreateTrafficMirrorSessionRequest
}

// Send marshals and sends the CreateTrafficMirrorSession API request.
func (r CreateTrafficMirrorSessionRequest) Send(ctx context.Context) (*CreateTrafficMirrorSessionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateTrafficMirrorSessionResponse{
		CreateTrafficMirrorSessionOutput: r.Request.Data.(*types.CreateTrafficMirrorSessionOutput),
		response:                         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateTrafficMirrorSessionResponse is the response type for the
// CreateTrafficMirrorSession API operation.
type CreateTrafficMirrorSessionResponse struct {
	*types.CreateTrafficMirrorSessionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateTrafficMirrorSession request.
func (r *CreateTrafficMirrorSessionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
