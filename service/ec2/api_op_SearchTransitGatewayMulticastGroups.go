// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Searches one or more transit gateway multicast groups and returns the group
// membership information.
func (c *Client) SearchTransitGatewayMulticastGroups(ctx context.Context, params *SearchTransitGatewayMulticastGroupsInput, optFns ...func(*Options)) (*SearchTransitGatewayMulticastGroupsOutput, error) {
	stack := middleware.NewStack("SearchTransitGatewayMulticastGroups", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpSearchTransitGatewayMulticastGroupsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSearchTransitGatewayMulticastGroups(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SearchTransitGatewayMulticastGroups",
			Err:           err,
		}
	}
	out := result.(*SearchTransitGatewayMulticastGroupsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SearchTransitGatewayMulticastGroupsInput struct {
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId *string
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults *int32
	// The token for the next page of results.
	NextToken *string
	// One or more filters. The possible values are:
	//
	//     * group-ip-address - The IP
	// address of the transit gateway multicast group.
	//
	//     * is-group-member - The
	// resource is a group member. Valid values are true | false.
	//
	//     *
	// is-group-source - The resource is a group source. Valid values are true |
	// false.
	//
	//     * member-type - The member type. Valid values are igmp | static.
	//
	//
	// * resource-id - The ID of the resource.
	//
	//     * resource-type - The type of
	// resource. Valid values are vpc | vpn | direct-connect-gateway | tgw-peering.
	//
	//
	// * source-type - The source type. Valid values are igmp | static.
	//
	//     * state -
	// The state of the subnet association. Valid values are associated | associated |
	// disassociated | disassociating.
	//
	//     * subnet-id - The ID of the subnet.
	//
	//     *
	// transit-gateway-attachment-id - The id of the transit gateway attachment.
	Filters []*types.Filter
}

type SearchTransitGatewayMulticastGroupsOutput struct {
	// The token to use to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken *string
	// Information about the transit gateway multicast group.
	MulticastGroups []*types.TransitGatewayMulticastGroup

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpSearchTransitGatewayMulticastGroupsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpSearchTransitGatewayMulticastGroups{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpSearchTransitGatewayMulticastGroups{}, middleware.After)
}

func newServiceMetadataMiddleware_opSearchTransitGatewayMulticastGroups(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "SearchTransitGatewayMulticastGroups",
	}
}
