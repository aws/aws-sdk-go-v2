// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Allocates an Elastic IP address to your AWS account. After you allocate the
// Elastic IP address you can associate it with an instance or network interface.
// After you release an Elastic IP address, it is released to the IP address pool
// and can be allocated to a different AWS account. You can allocate an Elastic IP
// address from an address pool owned by AWS or from an address pool created from a
// public IPv4 address range that you have brought to AWS for use with your AWS
// resources using bring your own IP addresses (BYOIP). For more information, see
// Bring Your Own IP Addresses (BYOIP)
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html) in the
// Amazon Elastic Compute Cloud User Guide. [EC2-VPC] If you release an Elastic IP
// address, you might be able to recover it. You cannot recover an Elastic IP
// address that you released after it is allocated to another AWS account. You
// cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an
// Elastic IP address that you released, specify it in this operation. An Elastic
// IP address is for use either in the EC2-Classic platform or in a VPC. By
// default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and
// 5 Elastic IP addresses for EC2-VPC per Region. For more information, see Elastic
// IP Addresses
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
// in the Amazon Elastic Compute Cloud User Guide.
func (c *Client) AllocateAddress(ctx context.Context, params *AllocateAddressInput, optFns ...func(*Options)) (*AllocateAddressOutput, error) {
	stack := middleware.NewStack("AllocateAddress", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpAllocateAddressMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opAllocateAddress(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "AllocateAddress",
			Err:           err,
		}
	}
	out := result.(*AllocateAddressOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AllocateAddressInput struct {
	// The location from which the IP address is advertised. Use this parameter to
	// limit the address to this location. A network border group is a unique set of
	// Availability Zones or Local Zones from where AWS advertises IP addresses and
	// limits the addresses to the group. IP addresses cannot move between network
	// border groups. Use DescribeAvailabilityZones
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html)
	// to view the network border groups.  <note> <p>You cannot use a network border
	// group with EC2 Classic. If you attempt this operation on EC2 classic, you will
	// receive an <code>InvalidParameterCombination</code> error. For more information,
	// see <a
	// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
	// Codes</a>.</p> </note>
	NetworkBorderGroup *string
	// Indicates whether the Elastic IP address is for use with instances in a VPC or
	// instances in EC2-Classic. Default: If the Region supports EC2-Classic, the
	// default is standard. Otherwise, the default is vpc.
	Domain types.DomainType
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// The ID of an address pool that you own. Use this parameter to let Amazon EC2
	// select an address from the address pool. To specify a specific address from the
	// address pool, use the Address parameter instead.
	PublicIpv4Pool *string
	// The ID of a customer-owned address pool. Use this parameter to let Amazon EC2
	// select an address from the address pool. Alternatively, specify a specific
	// address from the address pool.
	CustomerOwnedIpv4Pool *string
	// [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address
	// pool.
	Address *string
}

type AllocateAddressOutput struct {
	// The customer-owned IP address.
	CustomerOwnedIp *string
	// Indicates whether the Elastic IP address is for use with instances in a VPC
	// (vpc) or instances in EC2-Classic (standard).
	Domain types.DomainType
	// The ID of an address pool.
	PublicIpv4Pool *string
	// The Elastic IP address.
	PublicIp *string
	// The location from which the IP address is advertised.
	NetworkBorderGroup *string
	// The ID of the customer-owned address pool.
	CustomerOwnedIpv4Pool *string
	// [EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP
	// address for use with instances in a VPC.
	AllocationId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpAllocateAddressMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpAllocateAddress{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpAllocateAddress{}, middleware.After)
}

func newServiceMetadataMiddleware_opAllocateAddress(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "AllocateAddress",
	}
}
