// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opCreateVolume = "CreateVolume"

// CreateVolumeRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Creates an EBS volume that can be attached to an instance in the same Availability
// Zone. The volume is created in the regional endpoint that you send the HTTP
// request to. For more information see Regions and Endpoints (https://docs.aws.amazon.com/general/latest/gr/rande.html).
//
// You can create a new empty volume or restore a volume from an EBS snapshot.
// Any AWS Marketplace product codes from the snapshot are propagated to the
// volume.
//
// You can create encrypted volumes. Encrypted volumes must be attached to instances
// that support Amazon EBS encryption. Volumes that are created from encrypted
// snapshots are also automatically encrypted. For more information, see Amazon
// EBS Encryption (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
// You can tag your volumes during creation. For more information, see Tagging
// Your Amazon EC2 Resources (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
// For more information, see Creating an Amazon EBS Volume (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
//    // Example sending a request using CreateVolumeRequest.
//    req := client.CreateVolumeRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVolume
func (c *Client) CreateVolumeRequest(input *types.CreateVolumeInput) CreateVolumeRequest {
	op := &aws.Operation{
		Name:       opCreateVolume,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateVolumeInput{}
	}

	req := c.newRequest(op, input, &types.CreateVolumeOutput{})
	return CreateVolumeRequest{Request: req, Input: input, Copy: c.CreateVolumeRequest}
}

// CreateVolumeRequest is the request type for the
// CreateVolume API operation.
type CreateVolumeRequest struct {
	*aws.Request
	Input *types.CreateVolumeInput
	Copy  func(*types.CreateVolumeInput) CreateVolumeRequest
}

// Send marshals and sends the CreateVolume API request.
func (r CreateVolumeRequest) Send(ctx context.Context) (*CreateVolumeResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateVolumeResponse{
		CreateVolumeOutput: r.Request.Data.(*types.CreateVolumeOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateVolumeResponse is the response type for the
// CreateVolume API operation.
type CreateVolumeResponse struct {
	*types.CreateVolumeOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateVolume request.
func (r *CreateVolumeResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
