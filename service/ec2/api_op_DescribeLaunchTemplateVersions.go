// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes one or more versions of a specified launch template. You can describe
// all versions, individual versions, or a range of versions. You can also describe
// all the latest versions or all the default versions of all the launch templates
// in your account.
func (c *Client) DescribeLaunchTemplateVersions(ctx context.Context, params *DescribeLaunchTemplateVersionsInput, optFns ...func(*Options)) (*DescribeLaunchTemplateVersionsOutput, error) {
	stack := middleware.NewStack("DescribeLaunchTemplateVersions", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpDescribeLaunchTemplateVersionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeLaunchTemplateVersions(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeLaunchTemplateVersions",
			Err:           err,
		}
	}
	out := result.(*DescribeLaunchTemplateVersionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeLaunchTemplateVersionsInput struct {
	// The name of the launch template. To describe one or more versions of a specified
	// launch template, you must specify either the launch template ID or the launch
	// template name in the request. To describe all the latest or default launch
	// template versions in your account, you must omit this parameter.
	LaunchTemplateName *string
	// The version number after which to describe launch template versions.
	MinVersion *string
	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 1 and 200.
	MaxResults *int32
	// One or more filters.
	//
	//     * create-time - The time the launch template version
	// was created.
	//
	//     * ebs-optimized - A boolean that indicates whether the
	// instance is optimized for Amazon EBS I/O.
	//
	//     * iam-instance-profile - The ARN
	// of the IAM instance profile.
	//
	//     * image-id - The ID of the AMI.
	//
	//     *
	// instance-type - The instance type.
	//
	//     * is-default-version - A boolean that
	// indicates whether the launch template version is the default version.
	//
	//     *
	// kernel-id - The kernel ID.
	//
	//     * ram-disk-id - The RAM disk ID.
	Filters []*types.Filter
	// The version number up to which to describe launch template versions.
	MaxVersion *string
	// One or more versions of the launch template. Valid values depend on whether you
	// are describing a specified launch template (by ID or name) or all launch
	// templates in your account. To describe one or more versions of a specified
	// launch template, valid values are $Latest, $Default, and numbers. To describe
	// all launch templates in your account that are defined as the latest version, the
	// valid value is $Latest. To describe all launch templates in your account that
	// are defined as the default version, the valid value is $Default. You can specify
	// $Latest and $Default in the same call. You cannot specify numbers.
	Versions []*string
	// The ID of the launch template. To describe one or more versions of a specified
	// launch template, you must specify either the launch template ID or the launch
	// template name in the request. To describe all the latest or default launch
	// template versions in your account, you must omit this parameter.
	LaunchTemplateId *string
	// The token to request the next page of results.
	NextToken *string
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
}

type DescribeLaunchTemplateVersionsOutput struct {
	// Information about the launch template versions.
	LaunchTemplateVersions []*types.LaunchTemplateVersion
	// The token to use to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpDescribeLaunchTemplateVersionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpDescribeLaunchTemplateVersions{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpDescribeLaunchTemplateVersions{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeLaunchTemplateVersions(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "DescribeLaunchTemplateVersions",
	}
}
