// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Modifies the placement attributes for a specified instance. You can do the
// following:
//
//     * Modify the affinity between an instance and a Dedicated Host
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html).
// When affinity is set to host and the instance is not associated with a specific
// Dedicated Host, the next time the instance is launched, it is automatically
// associated with the host on which it lands. If the instance is restarted or
// rebooted, this relationship persists.
//
//     * Change the Dedicated Host with
// which an instance is associated.
//
//     * Change the instance tenancy of an
// instance from host to dedicated, or from dedicated to host.
//
//     * Move an
// instance to or from a placement group
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html).
//
// At
// least one attribute for affinity, host ID, tenancy, or placement group name must
// be specified in the request. Affinity and tenancy can be modified in the same
// request. To modify the host ID, tenancy, placement group, or partition for an
// instance, the instance must be in the stopped state.
func (c *Client) ModifyInstancePlacement(ctx context.Context, params *ModifyInstancePlacementInput, optFns ...func(*Options)) (*ModifyInstancePlacementOutput, error) {
	stack := middleware.NewStack("ModifyInstancePlacement", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpModifyInstancePlacementMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpModifyInstancePlacementValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opModifyInstancePlacement(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ModifyInstancePlacement",
			Err:           err,
		}
	}
	out := result.(*ModifyInstancePlacementOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ModifyInstancePlacementInput struct {
	// The affinity setting for the instance.
	Affinity types.Affinity
	// The ID of the instance that you are modifying.
	InstanceId *string
	// The name of the placement group in which to place the instance. For spread
	// placement groups, the instance must have a tenancy of default. For cluster and
	// partition placement groups, the instance must have a tenancy of default or
	// dedicated. To remove an instance from a placement group, specify an empty string
	// ("").
	GroupName *string
	// The tenancy for the instance.
	Tenancy types.HostTenancy
	// Reserved for future use.
	PartitionNumber *int32
	// The ARN of the host resource group in which to place the instance.
	HostResourceGroupArn *string
	// The ID of the Dedicated Host with which to associate the instance.
	HostId *string
}

type ModifyInstancePlacementOutput struct {
	// Is true if the request succeeds, and an error otherwise.
	Return *bool

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpModifyInstancePlacementMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpModifyInstancePlacement{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpModifyInstancePlacement{}, middleware.After)
}

func newServiceMetadataMiddleware_opModifyInstancePlacement(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "ModifyInstancePlacement",
	}
}
