// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a VPC endpoint for a specified service. An endpoint enables you to
// create a private connection between your VPC and the service. The service may be
// provided by AWS, an AWS Marketplace Partner, or another AWS account. For more
// information, see VPC Endpoints
// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html) in the
// Amazon Virtual Private Cloud User Guide. A gateway endpoint serves as a target
// for a route in your route table for traffic destined for the AWS service. You
// can specify an endpoint policy to attach to the endpoint, which will control
// access to the service from your VPC. You can also specify the VPC route tables
// that use the endpoint. An interface endpoint is a network interface in your
// subnet that serves as an endpoint for communicating with the specified service.
// You can specify the subnets in which to create an endpoint, and the security
// groups to associate with the endpoint network interface. Use
// DescribeVpcEndpointServices () to get a list of supported services.
func (c *Client) CreateVpcEndpoint(ctx context.Context, params *CreateVpcEndpointInput, optFns ...func(*Options)) (*CreateVpcEndpointOutput, error) {
	stack := middleware.NewStack("CreateVpcEndpoint", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpCreateVpcEndpointMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateVpcEndpointValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateVpcEndpoint(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateVpcEndpoint",
			Err:           err,
		}
	}
	out := result.(*CreateVpcEndpointOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the parameters for CreateVpcEndpoint.
type CreateVpcEndpointInput struct {
	// (Interface endpoint) The ID of one or more subnets in which to create an
	// endpoint network interface.
	SubnetIds []*string
	// (Interface endpoint) The ID of one or more security groups to associate with the
	// endpoint network interface.
	SecurityGroupIds []*string
	// The service name. To get a list of available services, use the
	// DescribeVpcEndpointServices () request, or get the name from the service
	// provider.
	ServiceName *string
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of
	// the request. For more information, see How to Ensure Idempotency
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken *string
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// The tags to associate with the endpoint.
	TagSpecifications []*types.TagSpecification
	// The type of endpoint. Default: Gateway
	VpcEndpointType types.VpcEndpointType
	// (Gateway endpoint) One or more route table IDs.
	RouteTableIds []*string
	// A policy to attach to the endpoint that controls access to the service. The
	// policy must be in valid JSON format. If this parameter is not specified, we
	// attach a default policy that allows full access to the service.
	PolicyDocument *string
	// The ID of the VPC in which the endpoint will be used.
	VpcId *string
	// (Interface endpoint) Indicates whether to associate a private hosted zone with
	// the specified VPC. The private hosted zone contains a record set for the default
	// public DNS name for the service for the Region (for example,
	// kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of
	// the endpoint network interfaces in the VPC. This enables you to make requests to
	// the default public DNS name for the service instead of the public DNS names that
	// are automatically generated by the VPC endpoint service. To use a private hosted
	// zone, you must set the following VPC attributes to true: enableDnsHostnames and
	// enableDnsSupport. Use ModifyVpcAttribute () to set the VPC attributes. Default:
	// true
	PrivateDnsEnabled *bool
}

// Contains the output of CreateVpcEndpoint.
type CreateVpcEndpointOutput struct {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of
	// the request.
	ClientToken *string
	// Information about the endpoint.
	VpcEndpoint *types.VpcEndpoint

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpCreateVpcEndpointMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpCreateVpcEndpoint{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpCreateVpcEndpoint{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateVpcEndpoint(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "CreateVpcEndpoint",
	}
}
