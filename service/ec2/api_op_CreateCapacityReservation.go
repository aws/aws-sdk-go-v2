// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opCreateCapacityReservation = "CreateCapacityReservation"

// CreateCapacityReservationRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Creates a new Capacity Reservation with the specified attributes.
//
// Capacity Reservations enable you to reserve capacity for your Amazon EC2
// instances in a specific Availability Zone for any duration. This gives you
// the flexibility to selectively add capacity reservations and still get the
// Regional RI discounts for that usage. By creating Capacity Reservations,
// you ensure that you always have access to Amazon EC2 capacity when you need
// it, for as long as you need it. For more information, see Capacity Reservations
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
// Your request to create a Capacity Reservation could fail if Amazon EC2 does
// not have sufficient capacity to fulfill the request. If your request fails
// due to Amazon EC2 capacity constraints, either try again at a later time,
// try in a different Availability Zone, or request a smaller capacity reservation.
// If your application is flexible across instance types and sizes, try to create
// a Capacity Reservation with different instance attributes.
//
// Your request could also fail if the requested quantity exceeds your On-Demand
// Instance limit for the selected instance type. If your request fails due
// to limit constraints, increase your On-Demand Instance limit for the required
// instance type and try again. For more information about increasing your instance
// limits, see Amazon EC2 Service Limits (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
//    // Example sending a request using CreateCapacityReservationRequest.
//    req := client.CreateCapacityReservationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateCapacityReservation
func (c *Client) CreateCapacityReservationRequest(input *types.CreateCapacityReservationInput) CreateCapacityReservationRequest {
	op := &aws.Operation{
		Name:       opCreateCapacityReservation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateCapacityReservationInput{}
	}

	req := c.newRequest(op, input, &types.CreateCapacityReservationOutput{})
	return CreateCapacityReservationRequest{Request: req, Input: input, Copy: c.CreateCapacityReservationRequest}
}

// CreateCapacityReservationRequest is the request type for the
// CreateCapacityReservation API operation.
type CreateCapacityReservationRequest struct {
	*aws.Request
	Input *types.CreateCapacityReservationInput
	Copy  func(*types.CreateCapacityReservationInput) CreateCapacityReservationRequest
}

// Send marshals and sends the CreateCapacityReservation API request.
func (r CreateCapacityReservationRequest) Send(ctx context.Context) (*CreateCapacityReservationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateCapacityReservationResponse{
		CreateCapacityReservationOutput: r.Request.Data.(*types.CreateCapacityReservationOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateCapacityReservationResponse is the response type for the
// CreateCapacityReservation API operation.
type CreateCapacityReservationResponse struct {
	*types.CreateCapacityReservationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateCapacityReservation request.
func (r *CreateCapacityReservationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
