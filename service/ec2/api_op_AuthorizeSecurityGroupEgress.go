// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/aws/aws-sdk-go-v2/private/protocol/ec2query"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opAuthorizeSecurityGroupEgress = "AuthorizeSecurityGroupEgress"

// AuthorizeSecurityGroupEgressRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// [VPC only] Adds the specified egress rules to a security group for use with
// a VPC.
//
// An outbound rule permits instances to send traffic to the specified IPv4
// or IPv6 CIDR address ranges, or to the instances associated with the specified
// destination security groups.
//
// You specify a protocol for each rule (for example, TCP). For the TCP and
// UDP protocols, you must also specify the destination port or port range.
// For the ICMP protocol, you must also specify the ICMP type and code. You
// can use -1 for the type or code to mean all types or all codes.
//
// Rule changes are propagated to affected instances as quickly as possible.
// However, a small delay might occur.
//
// For more information about VPC security group limits, see Amazon VPC Limits
// (https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html).
//
//    // Example sending a request using AuthorizeSecurityGroupEgressRequest.
//    req := client.AuthorizeSecurityGroupEgressRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupEgress
func (c *Client) AuthorizeSecurityGroupEgressRequest(input *types.AuthorizeSecurityGroupEgressInput) AuthorizeSecurityGroupEgressRequest {
	op := &aws.Operation{
		Name:       opAuthorizeSecurityGroupEgress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AuthorizeSecurityGroupEgressInput{}
	}

	req := c.newRequest(op, input, &types.AuthorizeSecurityGroupEgressOutput{})
	req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return AuthorizeSecurityGroupEgressRequest{Request: req, Input: input, Copy: c.AuthorizeSecurityGroupEgressRequest}
}

// AuthorizeSecurityGroupEgressRequest is the request type for the
// AuthorizeSecurityGroupEgress API operation.
type AuthorizeSecurityGroupEgressRequest struct {
	*aws.Request
	Input *types.AuthorizeSecurityGroupEgressInput
	Copy  func(*types.AuthorizeSecurityGroupEgressInput) AuthorizeSecurityGroupEgressRequest
}

// Send marshals and sends the AuthorizeSecurityGroupEgress API request.
func (r AuthorizeSecurityGroupEgressRequest) Send(ctx context.Context) (*AuthorizeSecurityGroupEgressResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AuthorizeSecurityGroupEgressResponse{
		AuthorizeSecurityGroupEgressOutput: r.Request.Data.(*types.AuthorizeSecurityGroupEgressOutput),
		response:                           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AuthorizeSecurityGroupEgressResponse is the response type for the
// AuthorizeSecurityGroupEgress API operation.
type AuthorizeSecurityGroupEgressResponse struct {
	*types.AuthorizeSecurityGroupEgressOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AuthorizeSecurityGroupEgress request.
func (r *AuthorizeSecurityGroupEgressResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
