// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opDescribePublicIpv4Pools = "DescribePublicIpv4Pools"

// DescribePublicIpv4PoolsRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Describes the specified IPv4 address pools.
//
//    // Example sending a request using DescribePublicIpv4PoolsRequest.
//    req := client.DescribePublicIpv4PoolsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePublicIpv4Pools
func (c *Client) DescribePublicIpv4PoolsRequest(input *types.DescribePublicIpv4PoolsInput) DescribePublicIpv4PoolsRequest {
	op := &aws.Operation{
		Name:       opDescribePublicIpv4Pools,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"NextToken"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "MaxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.DescribePublicIpv4PoolsInput{}
	}

	req := c.newRequest(op, input, &types.DescribePublicIpv4PoolsOutput{})
	return DescribePublicIpv4PoolsRequest{Request: req, Input: input, Copy: c.DescribePublicIpv4PoolsRequest}
}

// DescribePublicIpv4PoolsRequest is the request type for the
// DescribePublicIpv4Pools API operation.
type DescribePublicIpv4PoolsRequest struct {
	*aws.Request
	Input *types.DescribePublicIpv4PoolsInput
	Copy  func(*types.DescribePublicIpv4PoolsInput) DescribePublicIpv4PoolsRequest
}

// Send marshals and sends the DescribePublicIpv4Pools API request.
func (r DescribePublicIpv4PoolsRequest) Send(ctx context.Context) (*DescribePublicIpv4PoolsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribePublicIpv4PoolsResponse{
		DescribePublicIpv4PoolsOutput: r.Request.Data.(*types.DescribePublicIpv4PoolsOutput),
		response:                      &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewDescribePublicIpv4PoolsRequestPaginator returns a paginator for DescribePublicIpv4Pools.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.DescribePublicIpv4PoolsRequest(input)
//   p := ec2.NewDescribePublicIpv4PoolsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewDescribePublicIpv4PoolsPaginator(req DescribePublicIpv4PoolsRequest) DescribePublicIpv4PoolsPaginator {
	return DescribePublicIpv4PoolsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.DescribePublicIpv4PoolsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// DescribePublicIpv4PoolsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type DescribePublicIpv4PoolsPaginator struct {
	aws.Pager
}

func (p *DescribePublicIpv4PoolsPaginator) CurrentPage() *types.DescribePublicIpv4PoolsOutput {
	return p.Pager.CurrentPage().(*types.DescribePublicIpv4PoolsOutput)
}

// DescribePublicIpv4PoolsResponse is the response type for the
// DescribePublicIpv4Pools API operation.
type DescribePublicIpv4PoolsResponse struct {
	*types.DescribePublicIpv4PoolsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribePublicIpv4Pools request.
func (r *DescribePublicIpv4PoolsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
