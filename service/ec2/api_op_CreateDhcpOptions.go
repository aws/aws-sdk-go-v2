// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a set of DHCP options for your VPC. After creating the set, you must
// associate it with the VPC, causing all existing and new instances that you
// launch in the VPC to use this set of DHCP options. The following are the
// individual DHCP options you can specify. For more information about the options,
// see RFC 2132 (http://www.ietf.org/rfc/rfc2132.txt).
//
//     * domain-name-servers -
// The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The
// default DHCP option set specifies AmazonProvidedDNS. If specifying more than one
// domain name server, specify the IP addresses in a single parameter, separated by
// commas. To have your instance receive a custom DNS hostname as specified in
// domain-name, you must set domain-name-servers to a custom DNS server.
//
//     *
// domain-name - If you're using AmazonProvidedDNS in us-east-1, specify
// ec2.internal. If you're using AmazonProvidedDNS in another Region, specify
// region.compute.internal (for example, ap-northeast-1.compute.internal).
// Otherwise, specify a domain name (for example, ExampleCompany.com). This value
// is used to complete unqualified DNS hostnames. Important: Some Linux operating
// systems accept multiple domain names separated by spaces. However, Windows and
// other Linux operating systems treat the value as a single domain, which results
// in unexpected behavior. If your DHCP options set is associated with a VPC that
// has instances with multiple operating systems, specify only one domain name.
//
//
// * ntp-servers - The IP addresses of up to four Network Time Protocol (NTP)
// servers.
//
//     * netbios-name-servers - The IP addresses of up to four NetBIOS
// name servers.
//
//     * netbios-node-type - The NetBIOS node type (1, 2, 4, or 8).
// We recommend that you specify 2 (broadcast and multicast are not currently
// supported). For more information about these node types, see RFC 2132
// (http://www.ietf.org/rfc/rfc2132.txt).
//
//     <p>Your VPC automatically starts out
// with a set of DHCP options that includes only a DNS server that we provide
// (AmazonProvidedDNS). If you create a set of options, and if your VPC has an
// internet gateway, make sure to set the <code>domain-name-servers</code> option
// either to <code>AmazonProvidedDNS</code> or to a domain name server of your
// choice. For more information, see <a
// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
// Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
func (c *Client) CreateDhcpOptions(ctx context.Context, params *CreateDhcpOptionsInput, optFns ...func(*Options)) (*CreateDhcpOptionsOutput, error) {
	stack := middleware.NewStack("CreateDhcpOptions", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpCreateDhcpOptionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateDhcpOptionsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateDhcpOptions(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateDhcpOptions",
			Err:           err,
		}
	}
	out := result.(*CreateDhcpOptionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateDhcpOptionsInput struct {
	// A DHCP configuration option.
	DhcpConfigurations []*types.NewDhcpConfiguration
	// The tags to assign to the DHCP option.
	TagSpecifications []*types.TagSpecification
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
}

type CreateDhcpOptionsOutput struct {
	// A set of DHCP options.
	DhcpOptions *types.DhcpOptions

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpCreateDhcpOptionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpCreateDhcpOptions{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpCreateDhcpOptions{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateDhcpOptions(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "CreateDhcpOptions",
	}
}
