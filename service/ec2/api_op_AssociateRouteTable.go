// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opAssociateRouteTable = "AssociateRouteTable"

// AssociateRouteTableRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Associates a subnet with a route table. The subnet and route table must be
// in the same VPC. This association causes traffic originating from the subnet
// to be routed according to the routes in the route table. The action returns
// an association ID, which you need in order to disassociate the route table
// from the subnet later. A route table can be associated with multiple subnets.
//
// For more information, see Route Tables (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html)
// in the Amazon Virtual Private Cloud User Guide.
//
//    // Example sending a request using AssociateRouteTableRequest.
//    req := client.AssociateRouteTableRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateRouteTable
func (c *Client) AssociateRouteTableRequest(input *types.AssociateRouteTableInput) AssociateRouteTableRequest {
	op := &aws.Operation{
		Name:       opAssociateRouteTable,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AssociateRouteTableInput{}
	}

	req := c.newRequest(op, input, &types.AssociateRouteTableOutput{})
	return AssociateRouteTableRequest{Request: req, Input: input, Copy: c.AssociateRouteTableRequest}
}

// AssociateRouteTableRequest is the request type for the
// AssociateRouteTable API operation.
type AssociateRouteTableRequest struct {
	*aws.Request
	Input *types.AssociateRouteTableInput
	Copy  func(*types.AssociateRouteTableInput) AssociateRouteTableRequest
}

// Send marshals and sends the AssociateRouteTable API request.
func (r AssociateRouteTableRequest) Send(ctx context.Context) (*AssociateRouteTableResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AssociateRouteTableResponse{
		AssociateRouteTableOutput: r.Request.Data.(*types.AssociateRouteTableOutput),
		response:                  &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AssociateRouteTableResponse is the response type for the
// AssociateRouteTable API operation.
type AssociateRouteTableResponse struct {
	*types.AssociateRouteTableOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AssociateRouteTable request.
func (r *AssociateRouteTableResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
