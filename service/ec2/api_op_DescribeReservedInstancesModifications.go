// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes the modifications made to your Reserved Instances. If no parameter is
// specified, information about all your Reserved Instances modification requests
// is returned. If a modification ID is specified, only information about the
// specific modification is returned. For more information, see Modifying Reserved
// Instances
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html) in the
// Amazon Elastic Compute Cloud User Guide.
func (c *Client) DescribeReservedInstancesModifications(ctx context.Context, params *DescribeReservedInstancesModificationsInput, optFns ...func(*Options)) (*DescribeReservedInstancesModificationsOutput, error) {
	stack := middleware.NewStack("DescribeReservedInstancesModifications", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpDescribeReservedInstancesModificationsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeReservedInstancesModifications(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeReservedInstancesModifications",
			Err:           err,
		}
	}
	out := result.(*DescribeReservedInstancesModificationsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the parameters for DescribeReservedInstancesModifications.
type DescribeReservedInstancesModificationsInput struct {
	// One or more filters.
	//
	//     * client-token - The idempotency token for the
	// modification request.
	//
	//     * create-date - The time when the modification
	// request was created.
	//
	//     * effective-date - The time when the modification
	// becomes effective.
	//
	//     * modification-result.reserved-instances-id - The ID for
	// the Reserved Instances created as part of the modification request. This ID is
	// only available when the status of the modification is fulfilled.
	//
	//     *
	// modification-result.target-configuration.availability-zone - The Availability
	// Zone for the new Reserved Instances.
	//
	//     *
	// modification-result.target-configuration.instance-count  - The number of new
	// Reserved Instances.
	//
	//     *
	// modification-result.target-configuration.instance-type - The instance type of
	// the new Reserved Instances.
	//
	//     *
	// modification-result.target-configuration.platform - The network platform of the
	// new Reserved Instances (EC2-Classic | EC2-VPC).
	//
	//     * reserved-instances-id -
	// The ID of the Reserved Instances modified.
	//
	//     *
	// reserved-instances-modification-id - The ID of the modification request.
	//
	//     *
	// status - The status of the Reserved Instances modification request (processing |
	// fulfilled | failed).
	//
	//     * status-message - The reason for the status.
	//
	//     *
	// update-date - The time when the modification request was last updated.
	Filters []*types.Filter
	// IDs for the submitted modification request.
	ReservedInstancesModificationIds []*string
	// The token to retrieve the next page of results.
	NextToken *string
}

// Contains the output of DescribeReservedInstancesModifications.
type DescribeReservedInstancesModificationsOutput struct {
	// The Reserved Instance modification information.
	ReservedInstancesModifications []*types.ReservedInstancesModification
	// The token to use to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpDescribeReservedInstancesModificationsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpDescribeReservedInstancesModifications{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpDescribeReservedInstancesModifications{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeReservedInstancesModifications(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "DescribeReservedInstancesModifications",
	}
}
