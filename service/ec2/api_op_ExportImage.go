// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Exports an Amazon Machine Image (AMI) to a VM file. For more information, see
// Exporting a VM Directory from an Amazon Machine Image (AMI)
// (https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html) in
// the VM Import/Export User Guide.
func (c *Client) ExportImage(ctx context.Context, params *ExportImageInput, optFns ...func(*Options)) (*ExportImageOutput, error) {
	stack := middleware.NewStack("ExportImage", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsEc2query_serdeOpExportImageMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addIdempotencyToken_opExportImageMiddleware(stack, options)
	addOpExportImageValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opExportImage(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ExportImage",
			Err:           err,
		}
	}
	out := result.(*ExportImageOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ExportImageInput struct {
	// The name of the role that grants VM Import/Export permission to export images to
	// your Amazon S3 bucket. If this parameter is not specified, the default role is
	// named 'vmimport'.
	RoleName *string
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation. Otherwise, it is
	// UnauthorizedOperation.
	DryRun *bool
	// The tags to apply to the image being exported.
	TagSpecifications []*types.TagSpecification
	// The ID of the image.
	ImageId *string
	// A description of the image being exported. The maximum length is 255 characters.
	Description *string
	// The disk image format.
	DiskImageFormat types.DiskImageFormat
	// Information about the destination Amazon S3 bucket. The bucket must exist and
	// grant WRITE and READ_ACP permissions to the AWS account
	// vm-import-export@amazon.com.
	S3ExportLocation *types.ExportTaskS3LocationRequest
	// Token to enable idempotency for export image requests.
	ClientToken *string
}

type ExportImageOutput struct {
	// The disk image format for the exported image.
	DiskImageFormat types.DiskImageFormat
	// The status message for the export image task.
	StatusMessage *string
	// The percent complete of the export image task.
	Progress *string
	// A description of the image being exported.
	Description *string
	// The ID of the export image task.
	ExportImageTaskId *string
	// The status of the export image task. The possible values are active, completed,
	// deleting, and deleted.
	Status *string
	// Any tags assigned to the image being exported.
	Tags []*types.Tag
	// The ID of the image.
	ImageId *string
	// The name of the role that grants VM Import/Export permission to export images to
	// your Amazon S3 bucket.
	RoleName *string
	// Information about the destination Amazon S3 bucket.
	S3ExportLocation *types.ExportTaskS3Location

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsEc2query_serdeOpExportImageMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsEc2query_serializeOpExportImage{}, middleware.After)
	stack.Deserialize.Add(&awsEc2query_deserializeOpExportImage{}, middleware.After)
}

type idempotencyToken_initializeOpExportImage struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpExportImage) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpExportImage) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*ExportImageInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *ExportImageInput ")
	}

	if input.ClientToken == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.ClientToken = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opExportImageMiddleware(stack *middleware.Stack, cfg Options) {
	stack.Initialize.Add(&idempotencyToken_initializeOpExportImage{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opExportImage(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ec2",
		OperationName: "ExportImage",
	}
}
