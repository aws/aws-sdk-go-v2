// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

const opAssociateAddress = "AssociateAddress"

// AssociateAddressRequest returns a request value for making API operation for
// Amazon Elastic Compute Cloud.
//
// Associates an Elastic IP address with an instance or a network interface.
// Before you can use an Elastic IP address, you must allocate it to your account.
//
// An Elastic IP address is for use in either the EC2-Classic platform or in
// a VPC. For more information, see Elastic IP Addresses (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
// in the Amazon Elastic Compute Cloud User Guide.
//
// [EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is
// already associated with a different instance, it is disassociated from that
// instance and associated with the specified instance. If you associate an
// Elastic IP address with an instance that has an existing Elastic IP address,
// the existing address is disassociated from the instance, but remains allocated
// to your account.
//
// [VPC in an EC2-Classic account] If you don't specify a private IP address,
// the Elastic IP address is associated with the primary IP address. If the
// Elastic IP address is already associated with a different instance or a network
// interface, you get an error unless you allow reassociation. You cannot associate
// an Elastic IP address with an instance or network interface that has an existing
// Elastic IP address.
//
// This is an idempotent operation. If you perform the operation more than once,
// Amazon EC2 doesn't return an error, and you may be charged for each time
// the Elastic IP address is remapped to the same instance. For more information,
// see the Elastic IP Addresses section of Amazon EC2 Pricing (http://aws.amazon.com/ec2/pricing/).
//
//    // Example sending a request using AssociateAddressRequest.
//    req := client.AssociateAddressRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateAddress
func (c *Client) AssociateAddressRequest(input *types.AssociateAddressInput) AssociateAddressRequest {
	op := &aws.Operation{
		Name:       opAssociateAddress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AssociateAddressInput{}
	}

	req := c.newRequest(op, input, &types.AssociateAddressOutput{})
	return AssociateAddressRequest{Request: req, Input: input, Copy: c.AssociateAddressRequest}
}

// AssociateAddressRequest is the request type for the
// AssociateAddress API operation.
type AssociateAddressRequest struct {
	*aws.Request
	Input *types.AssociateAddressInput
	Copy  func(*types.AssociateAddressInput) AssociateAddressRequest
}

// Send marshals and sends the AssociateAddress API request.
func (r AssociateAddressRequest) Send(ctx context.Context) (*AssociateAddressResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AssociateAddressResponse{
		AssociateAddressOutput: r.Request.Data.(*types.AssociateAddressOutput),
		response:               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AssociateAddressResponse is the response type for the
// AssociateAddress API operation.
type AssociateAddressResponse struct {
	*types.AssociateAddressOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AssociateAddress request.
func (r *AssociateAddressResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
