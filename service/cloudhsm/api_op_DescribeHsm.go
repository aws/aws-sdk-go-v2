// Code generated by smithy-go-codegen DO NOT EDIT.

package cloudhsm

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cloudhsm/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// This is documentation for AWS CloudHSM Classic. For more information, see AWS
// CloudHSM Classic FAQs (http://aws.amazon.com/cloudhsm/faqs-classic/), the AWS
// CloudHSM Classic User Guide
// (https://docs.aws.amazon.com/cloudhsm/classic/userguide/), and the AWS CloudHSM
// Classic API Reference
// (https://docs.aws.amazon.com/cloudhsm/classic/APIReference/). For information
// about the current version of AWS CloudHSM, see AWS CloudHSM
// (http://aws.amazon.com/cloudhsm/), the AWS CloudHSM User Guide
// (https://docs.aws.amazon.com/cloudhsm/latest/userguide/), and the AWS CloudHSM
// API Reference (https://docs.aws.amazon.com/cloudhsm/latest/APIReference/).
// Retrieves information about an HSM. You can identify the HSM by its ARN or its
// serial number.
func (c *Client) DescribeHsm(ctx context.Context, params *DescribeHsmInput, optFns ...func(*Options)) (*DescribeHsmOutput, error) {
	stack := middleware.NewStack("DescribeHsm", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDescribeHsmMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeHsm(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeHsm",
			Err:           err,
		}
	}
	out := result.(*DescribeHsmOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Contains the inputs for the DescribeHsm () operation.
type DescribeHsmInput struct {
	// The serial number of the HSM. Either the HsmArn or the HsmSerialNumber parameter
	// must be specified.
	HsmSerialNumber *string
	// The ARN of the HSM. Either the HsmArn or the SerialNumber parameter must be
	// specified.
	HsmArn *string
}

// Contains the output of the DescribeHsm () operation.
type DescribeHsmOutput struct {
	// The subscription start date.
	SubscriptionStartDate *string
	// The name of the HSM vendor.
	VendorName *string
	// The identifier of the subnet that the HSM is in.
	SubnetId *string
	// The ARN of the IAM role assigned to the HSM.
	IamRoleArn *string
	// Contains additional information about the status of the HSM.
	StatusDetails *string
	// The identifier of the elastic network interface (ENI) attached to the HSM.
	EniId *string
	// The identifier of the VPC that the HSM is in.
	VpcId *string
	// The Availability Zone that the HSM is in.
	AvailabilityZone *string
	// The date and time that the SSH key was last updated.
	SshKeyLastUpdated *string
	// The public SSH key.
	SshPublicKey *string
	// The HSM software version.
	SoftwareVersion *string
	// The date and time that the server certificate was last updated.
	ServerCertLastUpdated *string
	// The subscription end date.
	SubscriptionEndDate *string
	// The ARN of the HSM.
	HsmArn *string
	// Specifies the type of subscription for the HSM.
	//
	//     * PRODUCTION - The HSM is
	// being used in a production environment.
	//
	//     * TRIAL - The HSM is being used in
	// a product trial.
	SubscriptionType types.SubscriptionType
	// The HSM model type.
	HsmType *string
	// The URI of the certificate server.
	ServerCertUri *string
	// The list of partitions on the HSM.
	Partitions []*string
	// The status of the HSM.
	Status types.HsmStatus
	// The IP address assigned to the HSM's ENI.
	EniIp *string
	// The serial number of the HSM.
	SerialNumber *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDescribeHsmMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeHsm{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeHsm{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeHsm(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cloudhsm",
		OperationName: "DescribeHsm",
	}
}
