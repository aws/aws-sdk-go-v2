// Code generated by smithy-go-codegen DO NOT EDIT.

package s3

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sets the supplied tag-set to an object that already exists in a bucket. A tag is
// a key-value pair. You can associate tags with an object by sending a PUT request
// against the tagging subresource that is associated with the object. You can
// retrieve tags by sending a GET request. For more information, see
// GetObjectTagging ().  <p>For tagging-related restrictions related to characters
// and encodings, see <a
// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html">Tag
// Restrictions</a>. Note that Amazon S3 limits the maximum number of tags to 10
// tags per object.</p> <p>To use this operation, you must have permission to
// perform the <code>s3:PutObjectTagging</code> action. By default, the bucket
// owner has this permission and can grant this permission to others.</p> <p>To put
// tags of any other version, use the <code>versionId</code> query parameter. You
// also need permission for the <code>s3:PutObjectVersionTagging</code> action.</p>
// <p>For information about the Amazon S3 object tagging feature, see <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html">Object
// Tagging</a>.</p> <p class="title"> <b>Special Errors</b> </p> <ul> <li> <p
// class="title"> <b></b> </p> <ul> <li> <p> <i>Code: InvalidTagError </i> </p>
// </li> <li> <p> <i>Cause: The tag provided was not a valid tag. This error can
// occur if the tag did not pass input validation. For more information, see <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html">Object
// Tagging</a>.</i> </p> </li> </ul> </li> <li> <p class="title"> <b></b> </p> <ul>
// <li> <p> <i>Code: MalformedXMLError </i> </p> </li> <li> <p> <i>Cause: The XML
// provided does not match the schema.</i> </p> </li> </ul> </li> <li> <ul> <li>
// <p> <i>Code: OperationAbortedError </i> </p> </li> <li> <p> <i>Cause: A
// conflicting conditional operation is currently in progress against this
// resource. Please try again.</i> </p> </li> </ul> </li> <li> <ul> <li> <p>
// <i>Code: InternalError</i> </p> </li> <li> <p> <i>Cause: The service was unable
// to apply the provided tag to the object.</i> </p> </li> </ul> </li> </ul> <p
// class="title"> <b>Related Resources</b> </p> <ul> <li> <p>
// <a>GetObjectTagging</a> </p> </li> </ul>
func (c *Client) PutObjectTagging(ctx context.Context, params *PutObjectTaggingInput, optFns ...func(*Options)) (*PutObjectTaggingOutput, error) {
	if params == nil {
		params = &PutObjectTaggingInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutObjectTagging", params, optFns, addOperationPutObjectTaggingMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutObjectTaggingOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutObjectTaggingInput struct {

	// The bucket name containing the object. When using this API with an access point,
	// you must direct requests to the access point hostname. The access point hostname
	// takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com.
	// When using this operation using an access point through the AWS SDKs, you
	// provide the access point ARN in place of the bucket name. For more information
	// about access point ARNs, see Using Access Points
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) in
	// the Amazon Simple Storage Service Developer Guide.
	//
	// This member is required.
	Bucket *string

	// Name of the tag.
	//
	// This member is required.
	Key *string

	// Container for the TagSet and Tag elements
	//
	// This member is required.
	Tagging *types.Tagging

	// The MD5 hash for the request body.
	ContentMD5 *string

	// The versionId of the object that the tag-set will be added to.
	VersionId *string
}

type PutObjectTaggingOutput struct {

	// The versionId of the object the tag-set was added to.
	VersionId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutObjectTaggingMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestxml_serializeOpPutObjectTagging{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestxml_deserializeOpPutObjectTagging{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutObjectTaggingValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutObjectTagging(options.Region), middleware.Before)
	addMetadataRetrieverMiddleware(stack)
	addUpdateEndpointMiddleware(stack, options)
	addResponseErrorMiddleware(stack)
	v4.AddContentSHA256HeaderMiddleware(stack)
	disableAcceptEncodingGzip(stack)
	smithyhttp.AddChecksumMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutObjectTagging(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "s3",
		OperationName: "PutObjectTagging",
	}
}
