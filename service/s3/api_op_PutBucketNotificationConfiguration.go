// Code generated by smithy-go-codegen DO NOT EDIT.

package s3

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Enables notifications of specified events for a bucket. For more information
// about event notifications, see Configuring Event Notifications
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
// <p>Using this API, you can replace an existing notification configuration. The
// configuration is an XML file that defines the event types that you want Amazon
// S3 to publish and the destination where you want Amazon S3 to publish an event
// notification when it detects an event of the specified type.</p> <p>By default,
// your bucket has no event notifications configured. That is, the notification
// configuration will be an empty <code>NotificationConfiguration</code>.</p> <p>
// <code><NotificationConfiguration></code> </p> <p>
// <code></NotificationConfiguration></code> </p> <p>This operation replaces the
// existing notification configuration with the configuration you include in the
// request body.</p> <p>After Amazon S3 receives this request, it first verifies
// that any Amazon Simple Notification Service (Amazon SNS) or Amazon Simple Queue
// Service (Amazon SQS) destination exists, and that the bucket owner has
// permission to publish to it by sending a test notification. In the case of AWS
// Lambda destinations, Amazon S3 verifies that the Lambda function permissions
// grant Amazon S3 permission to invoke the function from the Amazon S3 bucket. For
// more information, see <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring
// Notifications for Amazon S3 Events</a>.</p> <p>You can disable notifications by
// adding the empty NotificationConfiguration element.</p> <p>By default, only the
// bucket owner can configure notifications on a bucket. However, bucket owners can
// use a bucket policy to grant permission to other users to set this configuration
// with <code>s3:PutBucketNotification</code> permission.</p> <note> <p>The PUT
// notification is an atomic operation. For example, suppose your notification
// configuration includes SNS topic, SQS queue, and Lambda function configurations.
// When you send a PUT request with this configuration, Amazon S3 sends test
// messages to your SNS topic. If the message fails, the entire PUT operation will
// fail, and Amazon S3 will not add the configuration to your bucket.</p> </note>
// <p> <b>Responses</b> </p> <p>If the configuration in the request body includes
// only one <code>TopicConfiguration</code> specifying only the
// <code>s3:ReducedRedundancyLostObject</code> event type, the response will also
// include the <code>x-amz-sns-test-message-id</code> header containing the message
// ID of the test notification sent to the topic.</p> <p>The following operation is
// related to <code>PutBucketNotificationConfiguration</code>:</p> <ul> <li> <p>
// <a>GetBucketNotificationConfiguration</a> </p> </li> </ul>
func (c *Client) PutBucketNotificationConfiguration(ctx context.Context, params *PutBucketNotificationConfigurationInput, optFns ...func(*Options)) (*PutBucketNotificationConfigurationOutput, error) {
	stack := middleware.NewStack("PutBucketNotificationConfiguration", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpPutBucketNotificationConfigurationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutBucketNotificationConfigurationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutBucketNotificationConfiguration(options.Region), middleware.Before)
	addUpdateEndpointMiddleware(stack, options)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutBucketNotificationConfiguration",
			Err:           err,
		}
	}
	out := result.(*PutBucketNotificationConfigurationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutBucketNotificationConfigurationInput struct {
	// A container for specifying the notification configuration of the bucket. If this
	// element is empty, notifications are turned off for the bucket.
	NotificationConfiguration *types.NotificationConfiguration
	// The name of the bucket.
	Bucket *string
}

type PutBucketNotificationConfigurationOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpPutBucketNotificationConfigurationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpPutBucketNotificationConfiguration{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpPutBucketNotificationConfiguration{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutBucketNotificationConfiguration(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "s3",
		OperationName: "PutBucketNotificationConfiguration",
	}
}
