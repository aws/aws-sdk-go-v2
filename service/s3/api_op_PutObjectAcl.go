// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

const opPutObjectAcl = "PutObjectAcl"

// PutObjectAclRequest returns a request value for making API operation for
// Amazon Simple Storage Service.
//
// uses the acl subresource to set the access control list (ACL) permissions
// for an object that already exists in a bucket. You must have WRITE_ACP permission
// to set the ACL of an object.
//
// Depending on your application needs, you may choose to set the ACL on an
// object using either the request body or the headers. For example, if you
// have an existing application that updates a bucket ACL using the request
// body, then you can continue to use that approach.
//
// Access Permissions
//
// You can set access permissions using one of the following methods:
//
//    * Specify a canned ACL with the x-amz-acl request header. Amazon S3 supports
//    a set of predefined ACLs, known as canned ACLs. Each canned ACL has a
//    predefined set of grantees and permissions. Specify the canned ACL name
//    as the value of x-amz-acl. If you use this header, you cannot use other
//    access control specific headers in your request. For more information,
//    see Canned ACL (https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL).
//
//    * Specify access permissions explicitly with the x-amz-grant-read, x-amz-grant-read-acp,
//    x-amz-grant-write-acp, and x-amz-grant-full-control headers. When using
//    these headers you specify explicit access permissions and grantees (AWS
//    accounts or a Amazon S3 groups) who will receive the permission. If you
//    use these ACL specific headers, you cannot use x-amz-acl header to set
//    a canned ACL. These parameters map to the set of permissions that Amazon
//    S3 supports in an ACL. For more information, see Access Control List (ACL)
//    Overview (https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html).
//    You specify each grantee as a type=value pair, where the type is one of
//    the following: emailAddress – if the value specified is the email address
//    of an AWS account id – if the value specified is the canonical user
//    ID of an AWS account uri – if you are granting permissions to a predefined
//    group For example, the following x-amz-grant-read header grants list objects
//    permission to the two AWS accounts identified by their email addresses.
//    x-amz-grant-read: emailAddress="xyz@amazon.com", emailAddress="abc@amazon.com"
//
// You can use either a canned ACL or specify access permissions explicitly.
// You cannot do both.
//
// Grantee Values
//
// You can specify the person (grantee) to whom you're assigning access rights
// (using request elements) in the following ways:
//
//    * By Email address: <Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
//    xsi:type="AmazonCustomerByEmail"><EmailAddress><>Grantees@email.com<></EmailAddress>lt;/Grantee>
//    The grantee is resolved to the CanonicalUser and, in a response to a GET
//    Object acl request, appears as the CanonicalUser.
//
//    * By the person's ID: <Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
//    xsi:type="CanonicalUser"><ID><>ID<></ID><DisplayName><>GranteesEmail<></DisplayName>
//    </Grantee> DisplayName is optional and ignored in the request
//
//    * By URI: <Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
//    xsi:type="Group"><URI><>http://acs.amazonaws.com/groups/global/AuthenticatedUsers<></URI></Grantee>
//
// Versioning
//
// The ACL of an object is set at the object version level. By default, PUT
// sets the ACL of the current version of an object. To set the ACL of a different
// version, use the versionId subresource.
//
// Related Resources
//
//    * CopyObject
//
//    * GetObject
//
//    // Example sending a request using PutObjectAclRequest.
//    req := client.PutObjectAclRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutObjectAcl
func (c *Client) PutObjectAclRequest(input *types.PutObjectAclInput) PutObjectAclRequest {
	op := &aws.Operation{
		Name:       opPutObjectAcl,
		HTTPMethod: "PUT",
		HTTPPath:   "/{Bucket}/{Key+}?acl",
	}

	if input == nil {
		input = &types.PutObjectAclInput{}
	}

	req := c.newRequest(op, input, &types.PutObjectAclOutput{})
	return PutObjectAclRequest{Request: req, Input: input, Copy: c.PutObjectAclRequest}
}

// PutObjectAclRequest is the request type for the
// PutObjectAcl API operation.
type PutObjectAclRequest struct {
	*aws.Request
	Input *types.PutObjectAclInput
	Copy  func(*types.PutObjectAclInput) PutObjectAclRequest
}

// Send marshals and sends the PutObjectAcl API request.
func (r PutObjectAclRequest) Send(ctx context.Context) (*PutObjectAclResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutObjectAclResponse{
		PutObjectAclOutput: r.Request.Data.(*types.PutObjectAclOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutObjectAclResponse is the response type for the
// PutObjectAcl API operation.
type PutObjectAclResponse struct {
	*types.PutObjectAclOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutObjectAcl request.
func (r *PutObjectAclResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
