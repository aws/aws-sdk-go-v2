// Code generated by smithy-go-codegen DO NOT EDIT.

package s3

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sets a metrics configuration (specified by the metrics configuration ID) for the
// bucket. You can have up to 1,000 metrics configurations per bucket. If you're
// updating an existing metrics configuration, note that this is a full replacement
// of the existing metrics configuration. If you don't include the elements you
// want to keep, they are erased.  <p>To use this operation, you must have
// permissions to perform the <code>s3:PutMetricsConfiguration</code> action. The
// bucket owner has this permission by default. The bucket owner can grant this
// permission to others. For more information about permissions, see <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions
// Related to Bucket Subresource Operations</a> and <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing
// Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For information about
// CloudWatch request metrics for Amazon S3, see <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring
// Metrics with Amazon CloudWatch</a>.</p> <p>The following operations are related
// to <code>PutBucketMetricsConfiguration</code>:</p> <ul> <li> <p>
// <a>DeleteBucketMetricsConfiguration</a> </p> </li> <li> <p>
// <a>PutBucketMetricsConfiguration</a> </p> </li> <li> <p>
// <a>ListBucketMetricsConfigurations</a> </p> </li> </ul> <p>
// <code>GetBucketLifecycle</code> has the following special error:</p> <ul> <li>
// <p>Error code: <code>TooManyConfigurations</code> </p> <ul> <li> <p>Description:
// You are attempting to create a new configuration but have already reached the
// 1,000-configuration limit.</p> </li> <li> <p>HTTP Status Code: HTTP 400 Bad
// Request</p> </li> </ul> </li> </ul>
func (c *Client) PutBucketMetricsConfiguration(ctx context.Context, params *PutBucketMetricsConfigurationInput, optFns ...func(*Options)) (*PutBucketMetricsConfigurationOutput, error) {
	stack := middleware.NewStack("PutBucketMetricsConfiguration", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestxml_serdeOpPutBucketMetricsConfigurationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutBucketMetricsConfigurationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutBucketMetricsConfiguration(options.Region), middleware.Before)
	addUpdateEndpointMiddleware(stack, options)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutBucketMetricsConfiguration",
			Err:           err,
		}
	}
	out := result.(*PutBucketMetricsConfigurationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutBucketMetricsConfigurationInput struct {
	// The name of the bucket for which the metrics configuration is set.
	Bucket *string
	// Specifies the metrics configuration.
	MetricsConfiguration *types.MetricsConfiguration
	// The ID used to identify the metrics configuration.
	Id *string
}

type PutBucketMetricsConfigurationOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestxml_serdeOpPutBucketMetricsConfigurationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestxml_serializeOpPutBucketMetricsConfiguration{}, middleware.After)
	stack.Deserialize.Add(&awsRestxml_deserializeOpPutBucketMetricsConfiguration{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutBucketMetricsConfiguration(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "s3",
		OperationName: "PutBucketMetricsConfiguration",
	}
}
