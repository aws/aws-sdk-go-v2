// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

const opHeadObject = "HeadObject"

// HeadObjectRequest returns a request value for making API operation for
// Amazon Simple Storage Service.
//
// The HEAD operation retrieves metadata from an object without returning the
// object itself. This operation is useful if you're only interested in an object's
// metadata. To use HEAD, you must have READ access to the object.
//
// A HEAD request has the same options as a GET operation on an object. The
// response is identical to the GET response except that there is no response
// body.
//
// If you encrypt an object by using server-side encryption with customer-provided
// encryption keys (SSE-C) when you store the object in Amazon S3, then when
// you retrieve the metadata from the object, you must use the following headers:
//
//    * x-amz-server-side​-encryption​-customer-algorithm
//
//    * x-amz-server-side​-encryption​-customer-key
//
//    * x-amz-server-side​-encryption​-customer-key-MD5
//
// For more information about SSE-C, see Server-Side Encryption (Using Customer-Provided
// Encryption Keys) (https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html).
//
// Encryption request headers, like x-amz-server-side-encryption, should not
// be sent for GET requests if your object uses server-side encryption with
// CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed
// encryption keys (SSE-S3). If your object does use these types of keys, you’ll
// get an HTTP 400 BadRequest error.
//
// Request headers are limited to 8 KB in size. For more information, see Common
// Request Headers (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html).
//
// Consider the following when using request headers:
//
//    * Consideration 1 – If both of the If-Match and If-Unmodified-Since
//    headers are present in the request as follows: If-Match condition evaluates
//    to true, and; If-Unmodified-Since condition evaluates to false; Then Amazon
//    S3 returns 200 OK and the data requested.
//
//    * Consideration 2 – If both of the If-None-Match and If-Modified-Since
//    headers are present in the request as follows: If-None-Match condition
//    evaluates to false, and; If-Modified-Since condition evaluates to true;
//    Then Amazon S3 returns the 304 Not Modified response code.
//
// For more information about conditional requests, see RFC 7232 (https://tools.ietf.org/html/rfc7232).
//
// Permissions
//
// You need the s3:GetObject permission for this operation. For more information,
// see Specifying Permissions in a Policy (https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html).
// If the object you request does not exist, the error Amazon S3 returns depends
// on whether you also have the s3:ListBucket permission.
//
//    * If you have the s3:ListBucket permission on the bucket, Amazon S3 will
//    return a HTTP status code 404 ("no such key") error.
//
//    * If you don’t have the s3:ListBucket permission, Amazon S3 will return
//    a HTTP status code 403 ("access denied") error.
//
// The following operation is related to HeadObject:
//
//    * GetObject
//
// See http://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses
// for more information on returned errors.
//
//    // Example sending a request using HeadObjectRequest.
//    req := client.HeadObjectRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/HeadObject
func (c *Client) HeadObjectRequest(input *types.HeadObjectInput) HeadObjectRequest {
	op := &aws.Operation{
		Name:       opHeadObject,
		HTTPMethod: "HEAD",
		HTTPPath:   "/{Bucket}/{Key+}",
	}

	if input == nil {
		input = &types.HeadObjectInput{}
	}

	req := c.newRequest(op, input, &types.HeadObjectOutput{})
	return HeadObjectRequest{Request: req, Input: input, Copy: c.HeadObjectRequest}
}

// HeadObjectRequest is the request type for the
// HeadObject API operation.
type HeadObjectRequest struct {
	*aws.Request
	Input *types.HeadObjectInput
	Copy  func(*types.HeadObjectInput) HeadObjectRequest
}

// Send marshals and sends the HeadObject API request.
func (r HeadObjectRequest) Send(ctx context.Context) (*HeadObjectResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &HeadObjectResponse{
		HeadObjectOutput: r.Request.Data.(*types.HeadObjectOutput),
		response:         &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// HeadObjectResponse is the response type for the
// HeadObject API operation.
type HeadObjectResponse struct {
	*types.HeadObjectOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// HeadObject request.
func (r *HeadObjectResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
