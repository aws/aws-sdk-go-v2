// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

const opListMultipartUploads = "ListMultipartUploads"

// ListMultipartUploadsRequest returns a request value for making API operation for
// Amazon Simple Storage Service.
//
// This operation lists in-progress multipart uploads. An in-progress multipart
// upload is a multipart upload that has been initiated using the Initiate Multipart
// Upload request, but has not yet been completed or aborted.
//
// This operation returns at most 1,000 multipart uploads in the response. 1,000
// multipart uploads is the maximum number of uploads a response can include,
// which is also the default value. You can further limit the number of uploads
// in a response by specifying the max-uploads parameter in the response. If
// additional multipart uploads satisfy the list criteria, the response will
// contain an IsTruncated element with the value true. To list the additional
// multipart uploads, use the key-marker and upload-id-marker request parameters.
//
// In the response, the uploads are sorted by key. If your application has initiated
// more than one multipart upload using the same object key, then uploads in
// the response are first sorted by key. Additionally, uploads are sorted in
// ascending order within each key by the upload initiation time.
//
// For more information on multipart uploads, see Uploading Objects Using Multipart
// Upload (https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html).
//
// For information on permissions required to use the multipart upload API,
// see Multipart Upload API and Permissions (https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html).
//
// The following operations are related to ListMultipartUploads:
//
//    * CreateMultipartUpload
//
//    * UploadPart
//
//    * CompleteMultipartUpload
//
//    * ListParts
//
//    * AbortMultipartUpload
//
//    // Example sending a request using ListMultipartUploadsRequest.
//    req := client.ListMultipartUploadsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListMultipartUploads
func (c *Client) ListMultipartUploadsRequest(input *types.ListMultipartUploadsInput) ListMultipartUploadsRequest {
	op := &aws.Operation{
		Name:       opListMultipartUploads,
		HTTPMethod: "GET",
		HTTPPath:   "/{Bucket}?uploads",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"KeyMarker", "UploadIdMarker"},
			OutputTokens:    []string{"NextKeyMarker", "NextUploadIdMarker"},
			LimitToken:      "MaxUploads",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListMultipartUploadsInput{}
	}

	req := c.newRequest(op, input, &types.ListMultipartUploadsOutput{})
	return ListMultipartUploadsRequest{Request: req, Input: input, Copy: c.ListMultipartUploadsRequest}
}

// ListMultipartUploadsRequest is the request type for the
// ListMultipartUploads API operation.
type ListMultipartUploadsRequest struct {
	*aws.Request
	Input *types.ListMultipartUploadsInput
	Copy  func(*types.ListMultipartUploadsInput) ListMultipartUploadsRequest
}

// Send marshals and sends the ListMultipartUploads API request.
func (r ListMultipartUploadsRequest) Send(ctx context.Context) (*ListMultipartUploadsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListMultipartUploadsResponse{
		ListMultipartUploadsOutput: r.Request.Data.(*types.ListMultipartUploadsOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListMultipartUploadsRequestPaginator returns a paginator for ListMultipartUploads.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListMultipartUploadsRequest(input)
//   p := s3.NewListMultipartUploadsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListMultipartUploadsPaginator(req ListMultipartUploadsRequest) ListMultipartUploadsPaginator {
	return ListMultipartUploadsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListMultipartUploadsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListMultipartUploadsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListMultipartUploadsPaginator struct {
	aws.Pager
}

func (p *ListMultipartUploadsPaginator) CurrentPage() *types.ListMultipartUploadsOutput {
	return p.Pager.CurrentPage().(*types.ListMultipartUploadsOutput)
}

// ListMultipartUploadsResponse is the response type for the
// ListMultipartUploads API operation.
type ListMultipartUploadsResponse struct {
	*types.ListMultipartUploadsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListMultipartUploads request.
func (r *ListMultipartUploadsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
