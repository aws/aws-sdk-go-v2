// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package s3

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
)

const opListParts = "ListParts"

// ListPartsRequest returns a request value for making API operation for
// Amazon Simple Storage Service.
//
// Lists the parts that have been uploaded for a specific multipart upload.
// This operation must include the upload ID, which you obtain by sending the
// initiate multipart upload request (see CreateMultipartUpload). This request
// returns a maximum of 1,000 uploaded parts. The default number of parts returned
// is 1,000 parts. You can restrict the number of parts returned by specifying
// the max-parts request parameter. If your multipart upload consists of more
// than 1,000 parts, the response returns an IsTruncated field with the value
// of true, and a NextPartNumberMarker element. In subsequent ListParts requests
// you can include the part-number-marker query string parameter and set its
// value to the NextPartNumberMarker field value from the previous response.
//
// For more information on multipart uploads, see Uploading Objects Using Multipart
// Upload (https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html).
//
// For information on permissions required to use the multipart upload API,
// see Multipart Upload API and Permissions (https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html).
//
// The following operations are related to ListParts:
//
//    * CreateMultipartUpload
//
//    * UploadPart
//
//    * CompleteMultipartUpload
//
//    * AbortMultipartUpload
//
//    * ListMultipartUploads
//
//    // Example sending a request using ListPartsRequest.
//    req := client.ListPartsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListParts
func (c *Client) ListPartsRequest(input *types.ListPartsInput) ListPartsRequest {
	op := &aws.Operation{
		Name:       opListParts,
		HTTPMethod: "GET",
		HTTPPath:   "/{Bucket}/{Key+}",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"PartNumberMarker"},
			OutputTokens:    []string{"NextPartNumberMarker"},
			LimitToken:      "MaxParts",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &types.ListPartsInput{}
	}

	req := c.newRequest(op, input, &types.ListPartsOutput{})
	return ListPartsRequest{Request: req, Input: input, Copy: c.ListPartsRequest}
}

// ListPartsRequest is the request type for the
// ListParts API operation.
type ListPartsRequest struct {
	*aws.Request
	Input *types.ListPartsInput
	Copy  func(*types.ListPartsInput) ListPartsRequest
}

// Send marshals and sends the ListParts API request.
func (r ListPartsRequest) Send(ctx context.Context) (*ListPartsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListPartsResponse{
		ListPartsOutput: r.Request.Data.(*types.ListPartsOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListPartsRequestPaginator returns a paginator for ListParts.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListPartsRequest(input)
//   p := s3.NewListPartsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListPartsPaginator(req ListPartsRequest) ListPartsPaginator {
	return ListPartsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListPartsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListPartsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListPartsPaginator struct {
	aws.Pager
}

func (p *ListPartsPaginator) CurrentPage() *types.ListPartsOutput {
	return p.Pager.CurrentPage().(*types.ListPartsOutput)
}

// ListPartsResponse is the response type for the
// ListParts API operation.
type ListPartsResponse struct {
	*types.ListPartsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListParts request.
func (r *ListPartsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
