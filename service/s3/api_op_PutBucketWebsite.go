// Code generated by smithy-go-codegen DO NOT EDIT.

package s3

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sets the configuration of the website that is specified in the website
// subresource. To configure a bucket as a website, you can add this subresource on
// the bucket with website configuration information such as the file name of the
// index document and any redirect rules. For more information, see Hosting
// Websites on Amazon S3
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).  <p>This
// PUT operation requires the <code>S3:PutBucketWebsite</code> permission. By
// default, only the bucket owner can configure the website attached to a bucket;
// however, bucket owners can allow other users to set the website configuration by
// writing a bucket policy that grants them the <code>S3:PutBucketWebsite</code>
// permission.</p> <p>To redirect all website requests sent to the bucket's website
// endpoint, you add a website configuration with the following elements. Because
// all requests are sent to another website, you don't need to provide index
// document name for the bucket.</p> <ul> <li> <p>
// <code>WebsiteConfiguration</code> </p> </li> <li> <p>
// <code>RedirectAllRequestsTo</code> </p> </li> <li> <p> <code>HostName</code>
// </p> </li> <li> <p> <code>Protocol</code> </p> </li> </ul> <p>If you want
// granular control over redirects, you can use the following elements to add
// routing rules that describe conditions for redirecting requests and information
// about the redirect destination. In this case, the website configuration must
// provide an index document for the bucket, because some requests might not be
// redirected. </p> <ul> <li> <p> <code>WebsiteConfiguration</code> </p> </li> <li>
// <p> <code>IndexDocument</code> </p> </li> <li> <p> <code>Suffix</code> </p>
// </li> <li> <p> <code>ErrorDocument</code> </p> </li> <li> <p> <code>Key</code>
// </p> </li> <li> <p> <code>RoutingRules</code> </p> </li> <li> <p>
// <code>RoutingRule</code> </p> </li> <li> <p> <code>Condition</code> </p> </li>
// <li> <p> <code>HttpErrorCodeReturnedEquals</code> </p> </li> <li> <p>
// <code>KeyPrefixEquals</code> </p> </li> <li> <p> <code>Redirect</code> </p>
// </li> <li> <p> <code>Protocol</code> </p> </li> <li> <p> <code>HostName</code>
// </p> </li> <li> <p> <code>ReplaceKeyPrefixWith</code> </p> </li> <li> <p>
// <code>ReplaceKeyWith</code> </p> </li> <li> <p> <code>HttpRedirectCode</code>
// </p> </li> </ul> <p>Amazon S3 has a limitation of 50 routing rules per website
// configuration. If you require more than 50 routing rules, you can use object
// redirect. For more information, see <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html">Configuring
// an Object Redirect</a> in the <i>Amazon Simple Storage Service Developer
// Guide</i>.</p>
func (c *Client) PutBucketWebsite(ctx context.Context, params *PutBucketWebsiteInput, optFns ...func(*Options)) (*PutBucketWebsiteOutput, error) {
	if params == nil {
		params = &PutBucketWebsiteInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutBucketWebsite", params, optFns, addOperationPutBucketWebsiteMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutBucketWebsiteOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutBucketWebsiteInput struct {

	// The bucket name.
	//
	// This member is required.
	Bucket *string

	// Container for the request.
	//
	// This member is required.
	WebsiteConfiguration *types.WebsiteConfiguration

	// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a
	// message integrity check to verify that the request body was not corrupted in
	// transit. For more information, see RFC 1864
	// (http://www.ietf.org/rfc/rfc1864.txt).
	ContentMD5 *string
}

type PutBucketWebsiteOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutBucketWebsiteMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestxml_serializeOpPutBucketWebsite{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestxml_deserializeOpPutBucketWebsite{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutBucketWebsiteValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutBucketWebsite(options.Region), middleware.Before)
	addMetadataRetrieverMiddleware(stack)
	addUpdateEndpointMiddleware(stack, options)
	addResponseErrorMiddleware(stack)
	v4.AddContentSHA256HeaderMiddleware(stack)
	disableAcceptEncodingGzip(stack)
	smithyhttp.AddChecksumMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opPutBucketWebsite(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "s3",
		OperationName: "PutBucketWebsite",
	}
}
