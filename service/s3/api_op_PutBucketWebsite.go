// Code generated by smithy-go-codegen DO NOT EDIT.

package s3

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	awsid "github.com/aws/aws-sdk-go-v2/aws/middleware/id"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	acceptencodingcust "github.com/aws/aws-sdk-go-v2/service/internal/accept-encoding"
	"github.com/aws/aws-sdk-go-v2/service/internal/s3shared"
	s3cust "github.com/aws/aws-sdk-go-v2/service/s3/internal/customizations"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyid "github.com/awslabs/smithy-go/middleware/id"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sets the configuration of the website that is specified in the website
// subresource. To configure a bucket as a website, you can add this subresource on
// the bucket with website configuration information such as the file name of the
// index document and any redirect rules. For more information, see Hosting
// Websites on Amazon S3
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html). This PUT
// operation requires the S3:PutBucketWebsite permission. By default, only the
// bucket owner can configure the website attached to a bucket; however, bucket
// owners can allow other users to set the website configuration by writing a
// bucket policy that grants them the S3:PutBucketWebsite permission. To redirect
// all website requests sent to the bucket's website endpoint, you add a website
// configuration with the following elements. Because all requests are sent to
// another website, you don't need to provide index document name for the bucket.
//
//
// * WebsiteConfiguration
//
//     * RedirectAllRequestsTo
//
//     * HostName
//
//     *
// Protocol
//
// If you want granular control over redirects, you can use the following
// elements to add routing rules that describe conditions for redirecting requests
// and information about the redirect destination. In this case, the website
// configuration must provide an index document for the bucket, because some
// requests might not be redirected.
//
//     * WebsiteConfiguration
//
//     *
// IndexDocument
//
//     * Suffix
//
//     * ErrorDocument
//
//     * Key
//
//     *
// RoutingRules
//
//     * RoutingRule
//
//     * Condition
//
//     *
// HttpErrorCodeReturnedEquals
//
//     * KeyPrefixEquals
//
//     * Redirect
//
//     *
// Protocol
//
//     * HostName
//
//     * ReplaceKeyPrefixWith
//
//     * ReplaceKeyWith
//
//
// * HttpRedirectCode
//
// Amazon S3 has a limitation of 50 routing rules per website
// configuration. If you require more than 50 routing rules, you can use object
// redirect. For more information, see Configuring an Object Redirect
// (https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html) in
// the Amazon Simple Storage Service Developer Guide.
func (c *Client) PutBucketWebsite(ctx context.Context, params *PutBucketWebsiteInput, optFns ...func(*Options)) (*PutBucketWebsiteOutput, error) {
	if params == nil {
		params = &PutBucketWebsiteInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PutBucketWebsite", params, optFns, addOperationPutBucketWebsiteMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PutBucketWebsiteOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutBucketWebsiteInput struct {

	// The bucket name.
	//
	// This member is required.
	Bucket *string

	// Container for the request.
	//
	// This member is required.
	WebsiteConfiguration *types.WebsiteConfiguration

	// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a
	// message integrity check to verify that the request body was not corrupted in
	// transit. For more information, see RFC 1864
	// (http://www.ietf.org/rfc/rfc1864.txt).
	ContentMD5 *string
}

type PutBucketWebsiteOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationPutBucketWebsiteStackSlots(stack *middleware.Stack) error {
	if err := stack.Initialize.AddSlot(middleware.After,
		smithyid.OperationIdempotencyTokenAutoFill,
		smithyid.OperationInputValidation,
	); err != nil {
		return err
	}
	if err := stack.Initialize.AddSlot(middleware.Before,
		awsid.RegisterServiceMetadata,
		awsid.Presigning,
	); err != nil {
		return err
	}
	if err := stack.Serialize.AddSlot(middleware.After,
		smithyid.OperationSerializer,
	); err != nil {
		return err
	}
	if err := stack.Serialize.InsertSlot(smithyid.OperationSerializer, middleware.Before,
		awsid.ResolveEndpoint,
	); err != nil {
		return err
	}
	if err := stack.Serialize.InsertSlot(smithyid.OperationSerializer, middleware.After,
		s3shared.EnableDualstackMiddlewareID,
	); err != nil {
		return err
	}
	if err := stack.Serialize.InsertSlot(s3shared.EnableDualstackMiddlewareID, middleware.After,
		s3cust.UpdateEndpointMiddlewareID,
	); err != nil {
		return err
	}
	if err := stack.Build.AddSlot(middleware.After,
		smithyid.ContentChecksum,
		smithyid.ComputeContentLength,
		smithyid.ValidateContentLength,
	); err != nil {
		return err
	}
	if err := stack.Build.AddSlot(middleware.After,
		awsid.ClientRequestID,
		awsid.ComputePayloadHash,
		awsid.UserAgent,
	); err != nil {
		return err
	}
	if err := stack.Finalize.AddSlot(middleware.After,
		awsid.Retry,
		awsid.Signing,
	); err != nil {
		return err
	}
	if err := stack.Finalize.AddSlot(middleware.Before,
		acceptencodingcust.EnableGzipMiddlewareID,
		acceptencodingcust.DisableGzipMiddlewareID,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.AddSlot(middleware.After,
		smithyid.ErrorCloseResponseBody,
		smithyid.CloseResponseBody,
		smithyid.OperationDeserializer,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.AddSlot(middleware.Before,
		awsid.ResponseErrorWrapper,
		awsid.RequestIDRetriever,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.InsertSlot(smithyid.OperationDeserializer, middleware.After,
		awsid.ResponseReadTimeout,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.InsertSlot(smithyid.OperationDeserializer, middleware.Before,
		s3shared.MetadataRetrieverMiddlewareID,
	); err != nil {
		return err
	}
	if err := stack.Deserialize.InsertSlot(smithyid.OperationDeserializer, middleware.After,
		s3cust.Process200ErrorMiddlewareID,
		acceptencodingcust.DecompressGzipMiddlewareID,
	); err != nil {
		return err
	}
	return nil
}
func addOperationPutBucketWebsiteMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := addOperationPutBucketWebsiteStackSlots(stack); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestxml_serializeOpPutBucketWebsite{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestxml_deserializeOpPutBucketWebsite{}, middleware.After)
	if err != nil {
		return err
	}
	if err := awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err := smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err := addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err := v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err := addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err := addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err := awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err := addClientUserAgent(stack); err != nil {
		return err
	}
	if err := smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err := smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err := addOpPutBucketWebsiteValidationMiddleware(stack); err != nil {
		return err
	}
	if err := stack.Initialize.Add(newServiceMetadataMiddleware_opPutBucketWebsite(options.Region), middleware.Before); err != nil {
		return err
	}
	if err := addMetadataRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err := addUpdateEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err := addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err := v4.AddContentSHA256HeaderMiddleware(stack); err != nil {
		return err
	}
	if err := disableAcceptEncodingGzip(stack); err != nil {
		return err
	}
	if err := smithyhttp.AddContentChecksumMiddleware(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opPutBucketWebsite(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "s3",
		OperationName: "PutBucketWebsite",
	}
}
