// Code generated by smithy-go-codegen DO NOT EDIT.

package ses

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/ses/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Composes an email message and immediately queues it for sending.  <p>This
// operation is more flexible than the <code>SendEmail</code> API operation. When
// you use the <code>SendRawEmail</code> operation, you can specify the headers of
// the message as well as its content. This flexibility is useful, for example,
// when you want to send a multipart MIME email (such a message that contains both
// a text and an HTML version). You can also use this operation to send messages
// that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the
// following requirements:</p> <ul> <li> <p>You can only send email from <a
// href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified
// email addresses or domains</a>. If you try to send email from an address that
// isn't verified, the operation results in an "Email address not verified"
// error.</p> </li> <li> <p>If your account is still in the <a
// href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon
// SES sandbox</a>, you can only send email to other verified addresses in your
// account, or to addresses that are associated with the <a
// href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon
// SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including
// attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least
// one recipient address. A recipient address includes any address on the To:, CC:,
// or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one
// recipient address, and one of the recipient addresses isn't in a valid format
// (that is, it's not in the format
// <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the
// entire message, even if the other addresses are valid.</p> </li> <li> <p>Each
// message can include up to 50 recipient addresses across the To:, CC:, or BCC:
// lines. If you need to send a single message to more than 50 recipients, you have
// to split the list of recipient addresses into groups of less than 50 recipients,
// and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows
// you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However,
// if Amazon SES has to modify the contents of your message (for example, if you
// use open and click tracking), 8-bit content isn't preserved. For this reason, we
// highly recommend that you encode all content that isn't 7-bit ASCII. For more
// information, see <a
// href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME
// Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul>
// <p>Additionally, keep the following considerations in mind when using the
// <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize
// the message headers when using the <code>SendRawEmail</code> operation, Amazon
// SES will automatically apply its own <code>Message-ID</code> and
// <code>Date</code> headers; if you passed these headers when creating the
// message, they will be overwritten by the values that Amazon SES provides.</p>
// </li> <li> <p>If you are using sending authorization to send on behalf of
// another user, <code>SendRawEmail</code> enables you to specify the cross-account
// identity for the email's Source, From, and Return-Path parameters in one of two
// ways: you can pass optional parameters <code>SourceArn</code>,
// <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can
// include the following X-headers in the header of your raw email:</p> <ul> <li>
// <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p>
// <code>X-SES-FROM-ARN</code> </p> </li> <li> <p>
// <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include
// these X-headers in the DKIM signature. Amazon SES removes these before it sends
// the email.</p> </important> <p>If you only specify the
// <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and
// Return-Path addresses to the same identity that you specified.</p> <p>For more
// information about sending authorization, see the <a
// href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using
// Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer
// Guide.</i> </p> </li> <li> <p>For every message that you send, the total number
// of recipients (including each recipient in the To:, CC: and BCC: fields) is
// counted against the maximum number of emails you can send in a 24-hour period
// (your <i>sending quota</i>). For more information about sending quotas in Amazon
// SES, see <a
// href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing
// Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i>
// </p> </li> </ul>
func (c *Client) SendRawEmail(ctx context.Context, params *SendRawEmailInput, optFns ...func(*Options)) (*SendRawEmailOutput, error) {
	stack := middleware.NewStack("SendRawEmail", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpSendRawEmailMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSendRawEmailValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSendRawEmail(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SendRawEmail",
			Err:           err,
		}
	}
	out := result.(*SendRawEmailOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents a request to send a single raw email using Amazon SES. For more
// information, see the Amazon SES Developer Guide
// (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html).
type SendRawEmailInput struct {
	// This parameter is used only for sending authorization. It is the ARN of the
	// identity that is associated with the sending authorization policy that permits
	// you to send for the email address specified in the Source parameter. For
	// example, if the owner of example.com (which has ARN
	// arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it
	// that authorizes you to send from user@example.com, then you would specify the
	// SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
	// Source to be user@example.com. Instead of using this parameter, you can use the
	// X-header X-SES-SOURCE-ARN in the raw message of the email. If you use both the
	// SourceArn parameter and the corresponding X-header, Amazon SES uses the value of
	// the SourceArn parameter. For information about when to use this parameter, see
	// the description of SendRawEmail in this guide, or see the Amazon SES Developer
	// Guide
	// (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html).
	SourceArn *string
	// The raw email message itself. The message has to meet the following criteria:
	//
	//
	// * The message has to contain a header and a body, separated by a blank line.
	//
	//
	// * All of the required header fields must be present in the message.
	//
	//     * Each
	// part of a multipart MIME message must be formatted properly.
	//
	//     * Attachments
	// must be of a content type that Amazon SES supports. For a list on unsupported
	// content types, see Unsupported Attachment Types
	// (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types.html) in the
	// Amazon SES Developer Guide.
	//
	//     * The entire message must be base64-encoded.
	//
	//
	// * If any of the MIME parts in your message contain content that is outside of
	// the 7-bit ASCII character range, we highly recommend that you encode that
	// content. For more information, see Sending Raw Email
	// (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html) in
	// the Amazon SES Developer Guide.
	//
	//     * Per RFC 5321
	// (https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6), the maximum length of
	// each line of text, including the , must not exceed 1,000 characters.
	RawMessage *types.RawMessage
	// This parameter is used only for sending authorization. It is the ARN of the
	// identity that is associated with the sending authorization policy that permits
	// you to specify a particular "From" address in the header of the raw email.
	// Instead of using this parameter, you can use the X-header X-SES-FROM-ARN in the
	// raw message of the email. If you use both the FromArn parameter and the
	// corresponding X-header, Amazon SES uses the value of the FromArn parameter. For
	// information about when to use this parameter, see the description of
	// SendRawEmail in this guide, or see the Amazon SES Developer Guide
	// (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html).
	FromArn *string
	// A list of destinations for the message, consisting of To:, CC:, and BCC:
	// addresses.
	Destinations []*string
	// The identity's email address. If you do not provide a value for this parameter,
	// you must specify a "From" address in the raw text of the message. (You can also
	// specify both.) Amazon SES does not support the SMTPUTF8 extension, as described
	// inRFC6531 (https://tools.ietf.org/html/rfc6531). For this reason, the local part
	// of a source email address (the part of the email address that precedes the @
	// sign) may only contain 7-bit ASCII characters
	// (https://en.wikipedia.org/wiki/Email_address#Local-part). If the domain part of
	// an address (the part after the @ sign) contains non-ASCII characters, they must
	// be encoded using Punycode, as described in RFC3492
	// (https://tools.ietf.org/html/rfc3492.html). The sender name (also known as the
	// friendly name) may contain non-ASCII characters. These characters must be
	// encoded using MIME encoded-word syntax, as described in RFC 2047
	// (https://tools.ietf.org/html/rfc2047). MIME encoded-word syntax uses the
	// following form: =?charset?encoding?encoded-text?=.  <p>If you specify the
	// <code>Source</code> parameter and have feedback forwarding enabled, then bounces
	// and complaints will be sent to this email address. This takes precedence over
	// any Return-Path header that you might include in the raw text of the
	// message.</p>
	Source *string
	// A list of tags, in the form of name/value pairs, to apply to an email that you
	// send using SendRawEmail. Tags correspond to characteristics of the email that
	// you define, so that you can publish email sending events.
	Tags []*types.MessageTag
	// This parameter is used only for sending authorization. It is the ARN of the
	// identity that is associated with the sending authorization policy that permits
	// you to use the email address specified in the ReturnPath parameter. For example,
	// if the owner of example.com (which has ARN
	// arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it
	// that authorizes you to use feedback@example.com, then you would specify the
	// ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and
	// the ReturnPath to be feedback@example.com. Instead of using this parameter, you
	// can use the X-header X-SES-RETURN-PATH-ARN in the raw message of the email. If
	// you use both the ReturnPathArn parameter and the corresponding X-header, Amazon
	// SES uses the value of the ReturnPathArn parameter. For information about when to
	// use this parameter, see the description of SendRawEmail in this guide, or see
	// the Amazon SES Developer Guide
	// (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html).
	ReturnPathArn *string
	// The name of the configuration set to use when you send an email using
	// SendRawEmail.
	ConfigurationSetName *string
}

// Represents a unique message ID.
type SendRawEmailOutput struct {
	// The unique message identifier returned from the SendRawEmail action.
	MessageId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpSendRawEmailMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpSendRawEmail{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpSendRawEmail{}, middleware.After)
}

func newServiceMetadataMiddleware_opSendRawEmail(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "ses",
		OperationName: "SendRawEmail",
	}
}
