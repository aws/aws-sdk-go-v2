// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ses

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ses/types"
)

const opSendEmail = "SendEmail"

// SendEmailRequest returns a request value for making API operation for
// Amazon Simple Email Service.
//
// Composes an email message and immediately queues it for sending. In order
// to send email using the SendEmail operation, your message must meet the following
// requirements:
//
//    * The message must be sent from a verified email address or domain. If
//    you attempt to send email using a non-verified address or domain, the
//    operation will result in an "Email address not verified" error.
//
//    * If your account is still in the Amazon SES sandbox, you may only send
//    to verified addresses or domains, or to email addresses associated with
//    the Amazon SES Mailbox Simulator. For more information, see Verifying
//    Email Addresses and Domains (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html)
//    in the Amazon SES Developer Guide.
//
//    * The maximum message size is 10 MB.
//
//    * The message must include at least one recipient email address. The recipient
//    address can be a To: address, a CC: address, or a BCC: address. If a recipient
//    email address is invalid (that is, it is not in the format UserName@[SubDomain.]Domain.TopLevelDomain),
//    the entire message will be rejected, even if the message contains other
//    recipients that are valid.
//
//    * The message may not include more than 50 recipients, across the To:,
//    CC: and BCC: fields. If you need to send an email message to a larger
//    audience, you can divide your recipient list into groups of 50 or fewer,
//    and then call the SendEmail operation several times to send the message
//    to each group.
//
// For every message that you send, the total number of recipients (including
// each recipient in the To:, CC: and BCC: fields) is counted against the maximum
// number of emails you can send in a 24-hour period (your sending quota). For
// more information about sending quotas in Amazon SES, see Managing Your Amazon
// SES Sending Limits (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html)
// in the Amazon SES Developer Guide.
//
//    // Example sending a request using SendEmailRequest.
//    req := client.SendEmailRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/email-2010-12-01/SendEmail
func (c *Client) SendEmailRequest(input *types.SendEmailInput) SendEmailRequest {
	op := &aws.Operation{
		Name:       opSendEmail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.SendEmailInput{}
	}

	req := c.newRequest(op, input, &types.SendEmailOutput{})
	return SendEmailRequest{Request: req, Input: input, Copy: c.SendEmailRequest}
}

// SendEmailRequest is the request type for the
// SendEmail API operation.
type SendEmailRequest struct {
	*aws.Request
	Input *types.SendEmailInput
	Copy  func(*types.SendEmailInput) SendEmailRequest
}

// Send marshals and sends the SendEmail API request.
func (r SendEmailRequest) Send(ctx context.Context) (*SendEmailResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SendEmailResponse{
		SendEmailOutput: r.Request.Data.(*types.SendEmailOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SendEmailResponse is the response type for the
// SendEmail API operation.
type SendEmailResponse struct {
	*types.SendEmailOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SendEmail request.
func (r *SendEmailResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
