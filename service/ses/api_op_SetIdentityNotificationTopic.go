// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ses

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ses/types"
)

const opSetIdentityNotificationTopic = "SetIdentityNotificationTopic"

// SetIdentityNotificationTopicRequest returns a request value for making API operation for
// Amazon Simple Email Service.
//
// Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when
// delivering notifications. When you use this operation, you specify a verified
// identity, such as an email address or domain. When you send an email that
// uses the chosen identity in the Source field, Amazon SES sends notifications
// to the topic you specified. You can send bounce, complaint, or delivery notifications
// (or any combination of the three) to the Amazon SNS topic that you specify.
//
// You can execute this operation no more than once per second.
//
// For more information about feedback notification, see the Amazon SES Developer
// Guide (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html).
//
//    // Example sending a request using SetIdentityNotificationTopicRequest.
//    req := client.SetIdentityNotificationTopicRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/email-2010-12-01/SetIdentityNotificationTopic
func (c *Client) SetIdentityNotificationTopicRequest(input *types.SetIdentityNotificationTopicInput) SetIdentityNotificationTopicRequest {
	op := &aws.Operation{
		Name:       opSetIdentityNotificationTopic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.SetIdentityNotificationTopicInput{}
	}

	req := c.newRequest(op, input, &types.SetIdentityNotificationTopicOutput{})
	return SetIdentityNotificationTopicRequest{Request: req, Input: input, Copy: c.SetIdentityNotificationTopicRequest}
}

// SetIdentityNotificationTopicRequest is the request type for the
// SetIdentityNotificationTopic API operation.
type SetIdentityNotificationTopicRequest struct {
	*aws.Request
	Input *types.SetIdentityNotificationTopicInput
	Copy  func(*types.SetIdentityNotificationTopicInput) SetIdentityNotificationTopicRequest
}

// Send marshals and sends the SetIdentityNotificationTopic API request.
func (r SetIdentityNotificationTopicRequest) Send(ctx context.Context) (*SetIdentityNotificationTopicResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SetIdentityNotificationTopicResponse{
		SetIdentityNotificationTopicOutput: r.Request.Data.(*types.SetIdentityNotificationTopicOutput),
		response:                           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SetIdentityNotificationTopicResponse is the response type for the
// SetIdentityNotificationTopic API operation.
type SetIdentityNotificationTopicResponse struct {
	*types.SetIdentityNotificationTopicOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SetIdentityNotificationTopic request.
func (r *SetIdentityNotificationTopicResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
