// Code generated by smithy-go-codegen DO NOT EDIT.

package cognitosync

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/cognitosync/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Gets paginated records, optionally changed after a particular sync count for a
// dataset and identity. With Amazon Cognito Sync, each identity has access only to
// its own data. Thus, the credentials used to make this API call need to have
// access to the identity data. ListRecords can be called with temporary user
// credentials provided by Cognito Identity or with developer credentials. You
// should use Cognito Identity credentials to make this API call.
func (c *Client) ListRecords(ctx context.Context, params *ListRecordsInput, optFns ...func(*Options)) (*ListRecordsOutput, error) {
	stack := middleware.NewStack("ListRecords", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpListRecordsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpListRecordsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opListRecords(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ListRecords",
			Err:           err,
		}
	}
	out := result.(*ListRecordsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// A request for a list of records.
type ListRecordsInput struct {
	// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE)
	// created by Amazon Cognito. GUID generation is unique within a region.
	IdentityPoolId *string
	// A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE)
	// created by Amazon Cognito. GUID generation is unique within a region.
	IdentityId *string
	// The maximum number of results to be returned.
	MaxResults *int32
	// A pagination token for obtaining the next page of results.
	NextToken *string
	// The last server sync count for this record.
	LastSyncCount *int64
	// A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_'
	// (underscore), '-' (dash), and '.' (dot).
	DatasetName *string
	// A token containing a session ID, identity ID, and expiration.
	SyncSessionToken *string
}

// Returned for a successful ListRecordsRequest.
type ListRecordsOutput struct {
	// Total number of records.
	Count *int32
	// Server sync count for this dataset.
	DatasetSyncCount *int64
	// Names of merged datasets.
	MergedDatasetNames []*string
	// A token containing a session ID, identity ID, and expiration.
	SyncSessionToken *string
	// The user/device that made the last change to this record.
	LastModifiedBy *string
	// A boolean value specifying whether to delete the dataset locally.
	DatasetDeletedAfterRequestedSyncCount *bool
	// A list of all records.
	Records []*types.Record
	// A pagination token for obtaining the next page of results.
	NextToken *string
	// Indicates whether the dataset exists.
	DatasetExists *bool

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpListRecordsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpListRecords{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpListRecords{}, middleware.After)
}

func newServiceMetadataMiddleware_opListRecords(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "cognito-sync",
		OperationName: "ListRecords",
	}
}
