// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/aws/smithy-go"
)

// An exception thrown when a bulk publish operation is requested less than 24
// hours after a previous bulk publish operation completed successfully.
type AlreadyStreamedException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *AlreadyStreamedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AlreadyStreamedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AlreadyStreamedException) ErrorCode() string {
	if e.Code == nil {
		return "AlreadyStreamedException"
	}
	return *e.Code
}
func (e *AlreadyStreamedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Thrown if there are parallel requests to modify a resource.
type ConcurrentModificationException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *ConcurrentModificationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ConcurrentModificationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ConcurrentModificationException) ErrorCode() string {
	if e.Code == nil {
		return "ConcurrentModificationException"
	}
	return *e.Code
}
func (e *ConcurrentModificationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// An exception thrown when there is an IN_PROGRESS bulk publish operation for the
// given identity pool.
type DuplicateRequestException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *DuplicateRequestException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DuplicateRequestException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DuplicateRequestException) ErrorCode() string {
	if e.Code == nil {
		return "DuplicateRequestException"
	}
	return *e.Code
}
func (e *DuplicateRequestException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Indicates an internal service error.
type InternalErrorException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *InternalErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalErrorException) ErrorCode() string {
	if e.Code == nil {
		return "InternalErrorException"
	}
	return *e.Code
}
func (e *InternalErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

type InvalidConfigurationException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *InvalidConfigurationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidConfigurationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidConfigurationException) ErrorCode() string {
	if e.Code == nil {
		return "InvalidConfigurationException"
	}
	return *e.Code
}
func (e *InvalidConfigurationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The AWS Lambda function returned invalid output or an exception.
type InvalidLambdaFunctionOutputException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *InvalidLambdaFunctionOutputException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidLambdaFunctionOutputException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidLambdaFunctionOutputException) ErrorCode() string {
	if e.Code == nil {
		return "InvalidLambdaFunctionOutputException"
	}
	return *e.Code
}
func (e *InvalidLambdaFunctionOutputException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// Thrown when a request parameter does not comply with the associated constraints.
type InvalidParameterException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *InvalidParameterException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidParameterException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidParameterException) ErrorCode() string {
	if e.Code == nil {
		return "InvalidParameterException"
	}
	return *e.Code
}
func (e *InvalidParameterException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// AWS Lambda throttled your account, please contact AWS Support
type LambdaThrottledException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *LambdaThrottledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LambdaThrottledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LambdaThrottledException) ErrorCode() string {
	if e.Code == nil {
		return "LambdaThrottledException"
	}
	return *e.Code
}
func (e *LambdaThrottledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Thrown when the limit on the number of objects or operations has been exceeded.
type LimitExceededException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string {
	if e.Code == nil {
		return "LimitExceededException"
	}
	return *e.Code
}
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Thrown when a user is not authorized to access the requested resource.
type NotAuthorizedException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *NotAuthorizedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *NotAuthorizedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *NotAuthorizedException) ErrorCode() string {
	if e.Code == nil {
		return "NotAuthorizedException"
	}
	return *e.Code
}
func (e *NotAuthorizedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Thrown if an update can't be applied because the resource was changed by another
// call and this would result in a conflict.
type ResourceConflictException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *ResourceConflictException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceConflictException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceConflictException) ErrorCode() string {
	if e.Code == nil {
		return "ResourceConflictException"
	}
	return *e.Code
}
func (e *ResourceConflictException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Thrown if the resource doesn't exist.
type ResourceNotFoundException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string {
	if e.Code == nil {
		return "ResourceNotFoundException"
	}
	return *e.Code
}
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Thrown if the request is throttled.
type TooManyRequestsException struct {
	Message *string

	Code *string

	noSmithyDocumentSerde
}

func (e *TooManyRequestsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *TooManyRequestsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *TooManyRequestsException) ErrorCode() string {
	if e.Code == nil {
		return "TooManyRequestsException"
	}
	return *e.Code
}
func (e *TooManyRequestsException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
