// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cognitosync

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitosync/types"
)

const opUpdateRecords = "UpdateRecords"

// UpdateRecordsRequest returns a request value for making API operation for
// Amazon Cognito Sync.
//
// Posts updates to records and adds and deletes records for a dataset and user.
//
// The sync count in the record patch is your last known sync count for that
// record. The server will reject an UpdateRecords request with a ResourceConflictException
// if you try to patch a record with a new value but a stale sync count.
//
// For example, if the sync count on the server is 5 for a key called highScore
// and you try and submit a new highScore with sync count of 4, the request
// will be rejected. To obtain the current sync count for a record, call ListRecords.
// On a successful update of the record, the response returns the new sync count
// for that record. You should present that sync count the next time you try
// to update that same record. When the record does not exist, specify the sync
// count as 0.
//
// This API can be called with temporary user credentials provided by Cognito
// Identity or with developer credentials.
//
//    // Example sending a request using UpdateRecordsRequest.
//    req := client.UpdateRecordsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/cognito-sync-2014-06-30/UpdateRecords
func (c *Client) UpdateRecordsRequest(input *types.UpdateRecordsInput) UpdateRecordsRequest {
	op := &aws.Operation{
		Name:       opUpdateRecords,
		HTTPMethod: "POST",
		HTTPPath:   "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
	}

	if input == nil {
		input = &types.UpdateRecordsInput{}
	}

	req := c.newRequest(op, input, &types.UpdateRecordsOutput{})
	return UpdateRecordsRequest{Request: req, Input: input, Copy: c.UpdateRecordsRequest}
}

// UpdateRecordsRequest is the request type for the
// UpdateRecords API operation.
type UpdateRecordsRequest struct {
	*aws.Request
	Input *types.UpdateRecordsInput
	Copy  func(*types.UpdateRecordsInput) UpdateRecordsRequest
}

// Send marshals and sends the UpdateRecords API request.
func (r UpdateRecordsRequest) Send(ctx context.Context) (*UpdateRecordsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateRecordsResponse{
		UpdateRecordsOutput: r.Request.Data.(*types.UpdateRecordsOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateRecordsResponse is the response type for the
// UpdateRecords API operation.
type UpdateRecordsResponse struct {
	*types.UpdateRecordsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateRecords request.
func (r *UpdateRecordsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
