// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AgentParameterField string

// Enum values for AgentParameterField
const (
	// Sampling interval in milliseconds used to sample profiles.
	AgentParameterFieldSampling_interval_in_milliseconds AgentParameterField = "SamplingIntervalInMilliseconds"
	// Reporting interval in milliseconds used to report profiles.
	AgentParameterFieldReporting_interval_in_milliseconds AgentParameterField = "ReportingIntervalInMilliseconds"
	// Minimum time in milliseconds between sending reports.
	AgentParameterFieldMinimum_time_for_reporting_in_milliseconds AgentParameterField = "MinimumTimeForReportingInMilliseconds"
	// Percentage of memory to be used by CodeGuru profiler. Minimum of 30MB is
	// required for the agent.
	AgentParameterFieldMemory_usage_limit_percent AgentParameterField = "MemoryUsageLimitPercent"
	// Maximum stack depth to be captured by the CodeGuru Profiler.
	AgentParameterFieldMax_stack_depth AgentParameterField = "MaxStackDepth"
)

// Values returns all known values for AgentParameterField. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AgentParameterField) Values() []AgentParameterField {
	return []AgentParameterField{
		"SamplingIntervalInMilliseconds",
		"ReportingIntervalInMilliseconds",
		"MinimumTimeForReportingInMilliseconds",
		"MemoryUsageLimitPercent",
		"MaxStackDepth",
	}
}

type AggregationPeriod string

// Enum values for AggregationPeriod
const (
	// Period of five minutes.
	AggregationPeriodPt5m AggregationPeriod = "PT5M"
	// Period of one hour.
	AggregationPeriodPt1h AggregationPeriod = "PT1H"
	// Period of one day.
	AggregationPeriodP1d AggregationPeriod = "P1D"
)

// Values returns all known values for AggregationPeriod. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AggregationPeriod) Values() []AggregationPeriod {
	return []AggregationPeriod{
		"PT5M",
		"PT1H",
		"P1D",
	}
}

type ComputePlatform string

// Enum values for ComputePlatform
const (
	// Compute platform meant to used for all usecases (like EC2, Fargate, physical
	// servers etc.) but AWS Lambda.
	ComputePlatformDefault ComputePlatform = "Default"
	// Compute platform meant to used for AWS Lambda.
	ComputePlatformAwslambda ComputePlatform = "AWSLambda"
)

// Values returns all known values for ComputePlatform. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComputePlatform) Values() []ComputePlatform {
	return []ComputePlatform{
		"Default",
		"AWSLambda",
	}
}

type MetricType string

// Enum values for MetricType
const (
	// Metric value aggregated for all instances of a frame name in a profile relative
	// to the root frame.
	MetricTypeAggregated_relative_total_time MetricType = "AGGREGATED_RELATIVE_TOTAL_TIME"
)

// Values returns all known values for MetricType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (MetricType) Values() []MetricType {
	return []MetricType{
		"AGGREGATED_RELATIVE_TOTAL_TIME",
	}
}

type OrderBy string

// Enum values for OrderBy
const (
	// Order by timestamp in descending order.
	OrderByTimestamp_descending OrderBy = "TimestampDescending"
	// Order by timestamp in ascending order.
	OrderByTimestamp_ascending OrderBy = "TimestampAscending"
)

// Values returns all known values for OrderBy. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (OrderBy) Values() []OrderBy {
	return []OrderBy{
		"TimestampDescending",
		"TimestampAscending",
	}
}

type MetadataField string

// Enum values for MetadataField
const (
	// Compute platform on which agent is running.
	MetadataFieldCompute_platform MetadataField = "ComputePlatform"
	// Unique identifier for the agent instance.
	MetadataFieldAgent_id MetadataField = "AgentId"
	// AWS requestId of the Lambda invocation.
	MetadataFieldAws_request_id MetadataField = "AwsRequestId"
	// Execution environment on which Lambda function is running.
	MetadataFieldExecution_environment MetadataField = "ExecutionEnvironment"
	// Function ARN that's used to invoke the Lambda function.
	MetadataFieldLambda_function_arn MetadataField = "LambdaFunctionArn"
	// Memory allocated for the Lambda function.
	MetadataFieldLambda_memory_limit_in_mb MetadataField = "LambdaMemoryLimitInMB"
	// Time in milliseconds left before the execution times out.
	MetadataFieldLambda_remaining_time_in_milliseconds MetadataField = "LambdaRemainingTimeInMilliseconds"
	// Time in milliseconds between two invocations of the Lambda function.
	MetadataFieldLambda_time_gap_between_invokes_in_milliseconds MetadataField = "LambdaTimeGapBetweenInvokesInMilliseconds"
	// Time in milliseconds for the previous Lambda invocation.
	MetadataFieldLambda_previous_execution_time_in_milliseconds MetadataField = "LambdaPreviousExecutionTimeInMilliseconds"
)

// Values returns all known values for MetadataField. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (MetadataField) Values() []MetadataField {
	return []MetadataField{
		"ComputePlatform",
		"AgentId",
		"AwsRequestId",
		"ExecutionEnvironment",
		"LambdaFunctionArn",
		"LambdaMemoryLimitInMB",
		"LambdaRemainingTimeInMilliseconds",
		"LambdaTimeGapBetweenInvokesInMilliseconds",
		"LambdaPreviousExecutionTimeInMilliseconds",
	}
}

type ActionGroup string

// Enum values for ActionGroup
const (
	// Permission group type for Agent APIs - ConfigureAgent, PostAgentProfile
	ActionGroupAgent_permissions ActionGroup = "agentPermissions"
)

// Values returns all known values for ActionGroup. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (ActionGroup) Values() []ActionGroup {
	return []ActionGroup{
		"agentPermissions",
	}
}
