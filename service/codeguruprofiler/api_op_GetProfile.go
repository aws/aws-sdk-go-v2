// Code generated by smithy-go-codegen DO NOT EDIT.

package codeguruprofiler

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Gets the aggregated profile of a profiling group for the specified time range.
// If the requested time range does not align with the available aggregated
// profiles, it is expanded to attain alignment. If aggregated profiles are
// available only for part of the period requested, the profile is returned from
// the earliest available to the latest within the requested time range. For
// example, if the requested time range is from 00:00 to 00:20 and the available
// profiles are from 00:15 to 00:25, the returned profile will be from 00:15 to
// 00:20. You must specify exactly two of the following parameters: startTime,
// period, and endTime.
func (c *Client) GetProfile(ctx context.Context, params *GetProfileInput, optFns ...func(*Options)) (*GetProfileOutput, error) {
	stack := middleware.NewStack("GetProfile", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetProfileMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetProfileValidationMiddleware(stack)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetProfile",
			Err:           err,
		}
	}
	out := result.(*GetProfileOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// The structure representing the getProfileRequest.
type GetProfileInput struct {
	// The format of the profile to return. You can choose application/json or the
	// default application/x-amzn-ion.
	Accept *string
	// You must specify exactly two of the following parameters: startTime, period, and
	// endTime.
	EndTime *time.Time
	// The maximum depth of the graph.
	MaxDepth *int32
	// The period of the profile to get. The time range must be in the past and not
	// longer than one week. You must specify exactly two of the following parameters:
	// startTime, period, and endTime.
	Period *string
	// The name of the profiling group to get.
	ProfilingGroupName *string
	// The start time of the profile to get. You must specify exactly two of the
	// following parameters: startTime, period, and endTime.
	StartTime *time.Time
}

// The structure representing the getProfileResponse.
type GetProfileOutput struct {
	// The content encoding of the profile.
	ContentEncoding *string
	// The content type of the profile in the payload. It is either application/json or
	// the default application/x-amzn-ion.
	ContentType *string
	// Information about the profile.
	Profile []byte

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetProfileMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetProfile{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetProfile{}, middleware.After)
}
