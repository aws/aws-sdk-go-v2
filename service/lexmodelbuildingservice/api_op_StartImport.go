// Code generated by smithy-go-codegen DO NOT EDIT.

package lexmodelbuildingservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Starts a job to import a resource to Amazon Lex.
func (c *Client) StartImport(ctx context.Context, params *StartImportInput, optFns ...func(*Options)) (*StartImportOutput, error) {
	stack := middleware.NewStack("StartImport", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpStartImportMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStartImportValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartImport(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartImport",
			Err:           err,
		}
	}
	out := result.(*StartImportOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartImportInput struct {
	// A list of tags to add to the imported bot. You can only add tags when you import
	// a bot, you can't add tags to an intent or slot type.
	Tags []*types.Tag
	// Specifies the type of resource to export. Each resource also exports any
	// resources that it depends on.
	//
	//     * A bot exports dependent intents.
	//
	//     * An
	// intent exports dependent slot types.
	ResourceType types.ResourceType
	// A zip archive in binary format. The archive should contain one file, a JSON file
	// containing the resource to import. The resource should match the type specified
	// in the resourceType field.
	Payload []byte
	// Specifies the action that the StartImport operation should take when there is an
	// existing resource with the same name.
	//
	//     * FAIL_ON_CONFLICT - The import
	// operation is stopped on the first conflict between a resource in the import file
	// and an existing resource. The name of the resource causing the conflict is in
	// the failureReason field of the response to the GetImport operation.
	// OVERWRITE_LATEST - The import operation proceeds even if there is a conflict
	// with an existing resource. The $LASTEST version of the existing resource is
	// overwritten with the data from the import file.
	MergeStrategy types.MergeStrategy
}

type StartImportOutput struct {
	// The identifier for the specific import job.
	ImportId *string
	// The status of the import job. If the status is FAILED, you can get the reason
	// for the failure using the GetImport operation.
	ImportStatus types.ImportStatus
	// A list of tags added to the imported bot.
	Tags []*types.Tag
	// The type of resource to import.
	ResourceType types.ResourceType
	// The name given to the import job.
	Name *string
	// A timestamp for the date and time that the import job was requested.
	CreatedDate *time.Time
	// The action to take when there is a merge conflict.
	MergeStrategy types.MergeStrategy

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpStartImportMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpStartImport{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpStartImport{}, middleware.After)
}

func newServiceMetadataMiddleware_opStartImport(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lex",
		OperationName: "StartImport",
	}
}
