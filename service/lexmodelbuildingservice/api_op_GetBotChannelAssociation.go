// Code generated by smithy-go-codegen DO NOT EDIT.

package lexmodelbuildingservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns information about the association between an Amazon Lex bot and a
// messaging platform. This operation requires permissions for the
// lex:GetBotChannelAssociation action.
func (c *Client) GetBotChannelAssociation(ctx context.Context, params *GetBotChannelAssociationInput, optFns ...func(*Options)) (*GetBotChannelAssociationOutput, error) {
	stack := middleware.NewStack("GetBotChannelAssociation", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetBotChannelAssociationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetBotChannelAssociationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetBotChannelAssociation(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetBotChannelAssociation",
			Err:           err,
		}
	}
	out := result.(*GetBotChannelAssociationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetBotChannelAssociationInput struct {
	// The name of the association between the bot and the channel. The name is case
	// sensitive.
	Name *string
	// An alias pointing to the specific version of the Amazon Lex bot to which this
	// association is being made.
	BotAlias *string
	// The name of the Amazon Lex bot.
	BotName *string
}

type GetBotChannelAssociationOutput struct {
	// An alias pointing to the specific version of the Amazon Lex bot to which this
	// association is being made.
	BotAlias *string
	// A description of the association between the bot and the channel.
	Description *string
	// The name of the Amazon Lex bot.
	BotName *string
	// If status is FAILED, Amazon Lex provides the reason that it failed to create the
	// association.
	FailureReason *string
	// The date that the association between the bot and the channel was created.
	CreatedDate *time.Time
	// The type of the messaging platform.
	Type types.ChannelType
	// Provides information that the messaging platform needs to communicate with the
	// Amazon Lex bot.
	BotConfiguration map[string]*string
	// The status of the bot channel.
	//
	//     * CREATED - The channel has been created and
	// is ready for use.
	//
	//     * IN_PROGRESS - Channel creation is in progress.
	//
	//     *
	// FAILED - There was an error creating the channel. For information about the
	// reason for the failure, see the failureReason field.
	Status types.ChannelStatus
	// The name of the association between the bot and the channel.
	Name *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetBotChannelAssociationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetBotChannelAssociation{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetBotChannelAssociation{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetBotChannelAssociation(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lex",
		OperationName: "GetBotChannelAssociation",
	}
}
