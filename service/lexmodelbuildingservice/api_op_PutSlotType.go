// Code generated by smithy-go-codegen DO NOT EDIT.

package lexmodelbuildingservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Creates a custom slot type or replaces an existing custom slot type. To create a
// custom slot type, specify a name for the slot type and a set of enumeration
// values, which are the values that a slot of this type can assume. For more
// information, see how-it-works (). If you specify the name of an existing slot
// type, the fields in the request replace the existing values in the $LATEST
// version of the slot type. Amazon Lex removes the fields that you don't provide
// in the request. If you don't specify required fields, Amazon Lex throws an
// exception. When you update the $LATEST version of a slot type, if a bot uses the
// $LATEST version of an intent that contains the slot type, the bot's status field
// is set to NOT_BUILT.  <p>This operation requires permissions for the
// <code>lex:PutSlotType</code> action.</p>
func (c *Client) PutSlotType(ctx context.Context, params *PutSlotTypeInput, optFns ...func(*Options)) (*PutSlotTypeOutput, error) {
	stack := middleware.NewStack("PutSlotType", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpPutSlotTypeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutSlotTypeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutSlotType(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutSlotType",
			Err:           err,
		}
	}
	out := result.(*PutSlotTypeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutSlotTypeInput struct {
	// When set to true a new numbered version of the slot type is created. This is the
	// same as calling the CreateSlotTypeVersion operation. If you do not specify
	// createVersion, the default is false.
	CreateVersion *bool
	// Determines the slot resolution strategy that Amazon Lex uses to return slot type
	// values. The field can be set to one of the following values:
	//
	//     *
	// ORIGINAL_VALUE - Returns the value entered by the user, if the user value is
	// similar to the slot value.
	//
	//     * TOP_RESOLUTION - If there is a resolution list
	// for the slot, return the first value in the resolution list as the slot type
	// value. If there is no resolution list, null is returned.
	//
	// If you don't specify
	// the valueSelectionStrategy, the default is ORIGINAL_VALUE.
	ValueSelectionStrategy types.SlotValueSelectionStrategy
	// Configuration information that extends the parent built-in slot type. The
	// configuration is added to the settings for the parent slot type.
	SlotTypeConfigurations []*types.SlotTypeConfiguration
	// Identifies a specific revision of the $LATEST version. When you create a new
	// slot type, leave the checksum field blank. If you specify a checksum you get a
	// BadRequestException exception. When you want to update a slot type, set the
	// checksum field to the checksum of the most recent revision of the $LATEST
	// version. If you don't specify the  checksum field, or if the checksum does not
	// match the $LATEST version, you get a PreconditionFailedException exception.
	Checksum *string
	// The name of the slot type. The name is not case sensitive. The name can't match
	// a built-in slot type name, or a built-in slot type name with "AMAZON." removed.
	// For example, because there is a built-in slot type called AMAZON.DATE, you can't
	// create a custom slot type called DATE. For a list of built-in slot types, see
	// Slot Type Reference
	// (https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference)
	// in the Alexa Skills Kit.
	Name *string
	// A list of EnumerationValue objects that defines the values that the slot type
	// can take. Each value can have a list of synonyms, which are additional values
	// that help train the machine learning model about the values that it resolves for
	// a slot. When Amazon Lex resolves a slot value, it generates a resolution list
	// that contains up to five possible values for the slot. If you are using a Lambda
	// function, this resolution list is passed to the function. If you are not using a
	// Lambda function you can choose to return the value that the user entered or the
	// first value in the resolution list as the slot value. The valueSelectionStrategy
	// field indicates the option to use.
	EnumerationValues []*types.EnumerationValue
	// A description of the slot type.
	Description *string
	// The built-in slot type used as the parent of the slot type. When you define a
	// parent slot type, the new slot type has all of the same configuration as the
	// parent. Only AMAZON.AlphaNumeric is supported.
	ParentSlotTypeSignature *string
}

type PutSlotTypeOutput struct {
	// Configuration information that extends the parent built-in slot type.
	SlotTypeConfigurations []*types.SlotTypeConfiguration
	// The slot resolution strategy that Amazon Lex uses to determine the value of the
	// slot. For more information, see PutSlotType ().
	ValueSelectionStrategy types.SlotValueSelectionStrategy
	// The date that the slot type was updated. When you create a slot type, the
	// creation date and last update date are the same.
	LastUpdatedDate *time.Time
	// A description of the slot type.
	Description *string
	// Checksum of the $LATEST version of the slot type.
	Checksum *string
	// The name of the slot type.
	Name *string
	// The version of the slot type. For a new slot type, the version is always
	// $LATEST.
	Version *string
	// The date that the slot type was created.
	CreatedDate *time.Time
	// True if a new version of the slot type was created. If the createVersion field
	// was not specified in the request, the createVersion field is set to false in the
	// response.
	CreateVersion *bool
	// The built-in slot type used as the parent of the slot type.
	ParentSlotTypeSignature *string
	// A list of EnumerationValue objects that defines the values that the slot type
	// can take.
	EnumerationValues []*types.EnumerationValue

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpPutSlotTypeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpPutSlotType{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpPutSlotType{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutSlotType(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lex",
		OperationName: "PutSlotType",
	}
}
