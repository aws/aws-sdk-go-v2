// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package types

import (
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice/enums"
)

type StartImportInput struct {
	_ struct{} `type:"structure"`

	// Specifies the action that the StartImport operation should take when there
	// is an existing resource with the same name.
	//
	//    * FAIL_ON_CONFLICT - The import operation is stopped on the first conflict
	//    between a resource in the import file and an existing resource. The name
	//    of the resource causing the conflict is in the failureReason field of
	//    the response to the GetImport operation. OVERWRITE_LATEST - The import
	//    operation proceeds even if there is a conflict with an existing resource.
	//    The $LASTEST version of the existing resource is overwritten with the
	//    data from the import file.
	//
	// MergeStrategy is a required field
	MergeStrategy enums.MergeStrategy `locationName:"mergeStrategy" type:"string" required:"true" enum:"true"`

	// A zip archive in binary format. The archive should contain one file, a JSON
	// file containing the resource to import. The resource should match the type
	// specified in the resourceType field.
	//
	// Payload is automatically base64 encoded/decoded by the SDK.
	//
	// Payload is a required field
	Payload []byte `locationName:"payload" type:"blob" required:"true"`

	// Specifies the type of resource to export. Each resource also exports any
	// resources that it depends on.
	//
	//    * A bot exports dependent intents.
	//
	//    * An intent exports dependent slot types.
	//
	// ResourceType is a required field
	ResourceType enums.ResourceType `locationName:"resourceType" type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s StartImportInput) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StartImportInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "StartImportInput"}
	if len(s.MergeStrategy) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("MergeStrategy"))
	}

	if s.Payload == nil {
		invalidParams.Add(aws.NewErrParamRequired("Payload"))
	}
	if len(s.ResourceType) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("ResourceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type StartImportOutput struct {
	_ struct{} `type:"structure"`

	// A timestamp for the date and time that the import job was requested.
	CreatedDate *time.Time `locationName:"createdDate" type:"timestamp"`

	// The identifier for the specific import job.
	ImportId *string `locationName:"importId" type:"string"`

	// The status of the import job. If the status is FAILED, you can get the reason
	// for the failure using the GetImport operation.
	ImportStatus enums.ImportStatus `locationName:"importStatus" type:"string" enum:"true"`

	// The action to take when there is a merge conflict.
	MergeStrategy enums.MergeStrategy `locationName:"mergeStrategy" type:"string" enum:"true"`

	// The name given to the import job.
	Name *string `locationName:"name" min:"1" type:"string"`

	// The type of resource to import.
	ResourceType enums.ResourceType `locationName:"resourceType" type:"string" enum:"true"`
}

// String returns the string representation
func (s StartImportOutput) String() string {
	return awsutil.Prettify(s)
}
