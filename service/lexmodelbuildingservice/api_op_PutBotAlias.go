// Code generated by smithy-go-codegen DO NOT EDIT.

package lexmodelbuildingservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Creates an alias for the specified version of the bot or replaces an alias for
// the specified bot. To change the version of the bot that the alias points to,
// replace the alias. For more information about aliases, see versioning-aliases
// (). This operation requires permissions for the lex:PutBotAlias action.
func (c *Client) PutBotAlias(ctx context.Context, params *PutBotAliasInput, optFns ...func(*Options)) (*PutBotAliasOutput, error) {
	stack := middleware.NewStack("PutBotAlias", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpPutBotAliasMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutBotAliasValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutBotAlias(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutBotAlias",
			Err:           err,
		}
	}
	out := result.(*PutBotAliasOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutBotAliasInput struct {
	// The name of the bot.
	BotName *string
	// The version of the bot.
	BotVersion *string
	// A description of the alias.
	Description *string
	// The name of the alias. The name is not case sensitive.
	Name *string
	// Identifies a specific revision of the $LATEST version. When you create a new bot
	// alias, leave the checksum field blank. If you specify a checksum you get a
	// BadRequestException exception. When you want to update a bot alias, set the
	// checksum field to the checksum of the most recent revision of the $LATEST
	// version. If you don't specify the  checksum field, or if the checksum does not
	// match the $LATEST version, you get a PreconditionFailedException exception.
	Checksum *string
	// A list of tags to add to the bot alias. You can only add tags when you create an
	// alias, you can't use the PutBotAlias operation to update the tags on a bot
	// alias. To update tags, use the TagResource operation.
	Tags []*types.Tag
	// Settings for conversation logs for the alias.
	ConversationLogs *types.ConversationLogsRequest
}

type PutBotAliasOutput struct {
	// A description of the alias.
	Description *string
	// The settings that determine how Amazon Lex uses conversation logs for the alias.
	ConversationLogs *types.ConversationLogsResponse
	// The date that the bot alias was updated. When you create a resource, the
	// creation date and the last updated date are the same.
	LastUpdatedDate *time.Time
	// The name of the bot that the alias points to.
	BotName *string
	// The date that the bot alias was created.
	CreatedDate *time.Time
	// The version of the bot that the alias points to.
	BotVersion *string
	// The checksum for the current version of the alias.
	Checksum *string
	// The name of the alias.
	Name *string
	// A list of tags associated with a bot.
	Tags []*types.Tag

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpPutBotAliasMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpPutBotAlias{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpPutBotAlias{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutBotAlias(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lex",
		OperationName: "PutBotAlias",
	}
}
