// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lexmodelbuildingservice

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice/types"
)

const opPutBot = "PutBot"

// PutBotRequest returns a request value for making API operation for
// Amazon Lex Model Building Service.
//
// Creates an Amazon Lex conversational bot or replaces an existing bot. When
// you create or update a bot you are only required to specify a name, a locale,
// and whether the bot is directed toward children under age 13. You can use
// this to add intents later, or to remove intents from an existing bot. When
// you create a bot with the minimum information, the bot is created or updated
// but Amazon Lex returns the response FAILED. You can build the bot after you
// add one or more intents. For more information about Amazon Lex bots, see
// how-it-works.
//
// If you specify the name of an existing bot, the fields in the request replace
// the existing values in the $LATEST version of the bot. Amazon Lex removes
// any fields that you don't provide values for in the request, except for the
// idleTTLInSeconds and privacySettings fields, which are set to their default
// values. If you don't specify values for required fields, Amazon Lex throws
// an exception.
//
// This operation requires permissions for the lex:PutBot action. For more information,
// see auth-and-access-control.
//
//    // Example sending a request using PutBotRequest.
//    req := client.PutBotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/lex-models-2017-04-19/PutBot
func (c *Client) PutBotRequest(input *types.PutBotInput) PutBotRequest {
	op := &aws.Operation{
		Name:       opPutBot,
		HTTPMethod: "PUT",
		HTTPPath:   "/bots/{name}/versions/$LATEST",
	}

	if input == nil {
		input = &types.PutBotInput{}
	}

	req := c.newRequest(op, input, &types.PutBotOutput{})
	return PutBotRequest{Request: req, Input: input, Copy: c.PutBotRequest}
}

// PutBotRequest is the request type for the
// PutBot API operation.
type PutBotRequest struct {
	*aws.Request
	Input *types.PutBotInput
	Copy  func(*types.PutBotInput) PutBotRequest
}

// Send marshals and sends the PutBot API request.
func (r PutBotRequest) Send(ctx context.Context) (*PutBotResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &PutBotResponse{
		PutBotOutput: r.Request.Data.(*types.PutBotOutput),
		response:     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// PutBotResponse is the response type for the
// PutBot API operation.
type PutBotResponse struct {
	*types.PutBotOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// PutBot request.
func (r *PutBotResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
