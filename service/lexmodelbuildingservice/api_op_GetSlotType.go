// Code generated by smithy-go-codegen DO NOT EDIT.

package lexmodelbuildingservice

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns information about a specific version of a slot type. In addition to
// specifying the slot type name, you must specify the slot type version. This
// operation requires permissions for the lex:GetSlotType action.
func (c *Client) GetSlotType(ctx context.Context, params *GetSlotTypeInput, optFns ...func(*Options)) (*GetSlotTypeOutput, error) {
	stack := middleware.NewStack("GetSlotType", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpGetSlotTypeMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpGetSlotTypeValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opGetSlotType(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "GetSlotType",
			Err:           err,
		}
	}
	out := result.(*GetSlotTypeOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetSlotTypeInput struct {
	// The name of the slot type. The name is case sensitive.
	Name *string
	// The version of the slot type.
	Version *string
}

type GetSlotTypeOutput struct {
	// The date that the slot type was updated. When you create a resource, the
	// creation date and last update date are the same.
	LastUpdatedDate *time.Time
	// The version of the slot type.
	Version *string
	// The date that the slot type was created.
	CreatedDate *time.Time
	// Configuration information that extends the parent built-in slot type.
	SlotTypeConfigurations []*types.SlotTypeConfiguration
	// A description of the slot type.
	Description *string
	// The strategy that Amazon Lex uses to determine the value of the slot. For more
	// information, see PutSlotType ().
	ValueSelectionStrategy types.SlotValueSelectionStrategy
	// Checksum of the $LATEST version of the slot type.
	Checksum *string
	// The name of the slot type.
	Name *string
	// A list of EnumerationValue objects that defines the values that the slot type
	// can take.
	EnumerationValues []*types.EnumerationValue
	// The built-in slot type used as a parent for the slot type.
	ParentSlotTypeSignature *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpGetSlotTypeMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpGetSlotType{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpGetSlotType{}, middleware.After)
}

func newServiceMetadataMiddleware_opGetSlotType(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "lex",
		OperationName: "GetSlotType",
	}
}
