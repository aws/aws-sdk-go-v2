// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type CampaignStatus string

// Enum values for CampaignStatus
const (
	CampaignStatusCreating           CampaignStatus = "CREATING"
	CampaignStatusWaitingForApproval CampaignStatus = "WAITING_FOR_APPROVAL"
	CampaignStatusRunning            CampaignStatus = "RUNNING"
	CampaignStatusSuspended          CampaignStatus = "SUSPENDED"
)

// Values returns all known values for CampaignStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (CampaignStatus) Values() []CampaignStatus {
	return []CampaignStatus{
		"CREATING",
		"WAITING_FOR_APPROVAL",
		"RUNNING",
		"SUSPENDED",
	}
}

type Compression string

// Enum values for Compression
const (
	CompressionOff    Compression = "OFF"
	CompressionSnappy Compression = "SNAPPY"
)

// Values returns all known values for Compression. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (Compression) Values() []Compression {
	return []Compression{
		"OFF",
		"SNAPPY",
	}
}

type DataFormat string

// Enum values for DataFormat
const (
	DataFormatJson    DataFormat = "JSON"
	DataFormatParquet DataFormat = "PARQUET"
)

// Values returns all known values for DataFormat. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (DataFormat) Values() []DataFormat {
	return []DataFormat{
		"JSON",
		"PARQUET",
	}
}

type DiagnosticsMode string

// Enum values for DiagnosticsMode
const (
	DiagnosticsModeOff            DiagnosticsMode = "OFF"
	DiagnosticsModeSendActiveDtcs DiagnosticsMode = "SEND_ACTIVE_DTCS"
)

// Values returns all known values for DiagnosticsMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (DiagnosticsMode) Values() []DiagnosticsMode {
	return []DiagnosticsMode{
		"OFF",
		"SEND_ACTIVE_DTCS",
	}
}

type LogType string

// Enum values for LogType
const (
	LogTypeOff   LogType = "OFF"
	LogTypeError LogType = "ERROR"
)

// Values returns all known values for LogType. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (LogType) Values() []LogType {
	return []LogType{
		"OFF",
		"ERROR",
	}
}

type ManifestStatus string

// Enum values for ManifestStatus
const (
	ManifestStatusActive ManifestStatus = "ACTIVE"
	ManifestStatusDraft  ManifestStatus = "DRAFT"
)

// Values returns all known values for ManifestStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ManifestStatus) Values() []ManifestStatus {
	return []ManifestStatus{
		"ACTIVE",
		"DRAFT",
	}
}

type NetworkInterfaceFailureReason string

// Enum values for NetworkInterfaceFailureReason
const (
	NetworkInterfaceFailureReasonDuplicateInterface                            NetworkInterfaceFailureReason = "DUPLICATE_NETWORK_INTERFACE"
	NetworkInterfaceFailureReasonConflictingNetworkInterface                   NetworkInterfaceFailureReason = "CONFLICTING_NETWORK_INTERFACE"
	NetworkInterfaceFailureReasonNetworkInterfaceToAddAlreadyExists            NetworkInterfaceFailureReason = "NETWORK_INTERFACE_TO_ADD_ALREADY_EXISTS"
	NetworkInterfaceFailureReasonCanNetworkInterfaceInfoIsNull                 NetworkInterfaceFailureReason = "CAN_NETWORK_INTERFACE_INFO_IS_NULL"
	NetworkInterfaceFailureReasonObdNetworkInterfaceInfoIsNull                 NetworkInterfaceFailureReason = "OBD_NETWORK_INTERFACE_INFO_IS_NULL"
	NetworkInterfaceFailureReasonNetworkInterfaceToRemoveAssociatedWithSignals NetworkInterfaceFailureReason = "NETWORK_INTERFACE_TO_REMOVE_ASSOCIATED_WITH_SIGNALS"
)

// Values returns all known values for NetworkInterfaceFailureReason. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client. The ordering of this slice is not guaranteed to be stable across
// updates.
func (NetworkInterfaceFailureReason) Values() []NetworkInterfaceFailureReason {
	return []NetworkInterfaceFailureReason{
		"DUPLICATE_NETWORK_INTERFACE",
		"CONFLICTING_NETWORK_INTERFACE",
		"NETWORK_INTERFACE_TO_ADD_ALREADY_EXISTS",
		"CAN_NETWORK_INTERFACE_INFO_IS_NULL",
		"OBD_NETWORK_INTERFACE_INFO_IS_NULL",
		"NETWORK_INTERFACE_TO_REMOVE_ASSOCIATED_WITH_SIGNALS",
	}
}

type NetworkInterfaceType string

// Enum values for NetworkInterfaceType
const (
	NetworkInterfaceTypeCanInterface NetworkInterfaceType = "CAN_INTERFACE"
	NetworkInterfaceTypeObdInterface NetworkInterfaceType = "OBD_INTERFACE"
)

// Values returns all known values for NetworkInterfaceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NetworkInterfaceType) Values() []NetworkInterfaceType {
	return []NetworkInterfaceType{
		"CAN_INTERFACE",
		"OBD_INTERFACE",
	}
}

type NodeDataType string

// Enum values for NodeDataType
const (
	NodeDataTypeInt8               NodeDataType = "INT8"
	NodeDataTypeUint8              NodeDataType = "UINT8"
	NodeDataTypeInt16              NodeDataType = "INT16"
	NodeDataTypeUint16             NodeDataType = "UINT16"
	NodeDataTypeInt32              NodeDataType = "INT32"
	NodeDataTypeUint32             NodeDataType = "UINT32"
	NodeDataTypeInt64              NodeDataType = "INT64"
	NodeDataTypeUint64             NodeDataType = "UINT64"
	NodeDataTypeBoolean            NodeDataType = "BOOLEAN"
	NodeDataTypeFloat              NodeDataType = "FLOAT"
	NodeDataTypeDouble             NodeDataType = "DOUBLE"
	NodeDataTypeString             NodeDataType = "STRING"
	NodeDataTypeUnixTimestamp      NodeDataType = "UNIX_TIMESTAMP"
	NodeDataTypeInt8Array          NodeDataType = "INT8_ARRAY"
	NodeDataTypeUint8Array         NodeDataType = "UINT8_ARRAY"
	NodeDataTypeInt16Array         NodeDataType = "INT16_ARRAY"
	NodeDataTypeUint16Array        NodeDataType = "UINT16_ARRAY"
	NodeDataTypeInt32Array         NodeDataType = "INT32_ARRAY"
	NodeDataTypeUint32Array        NodeDataType = "UINT32_ARRAY"
	NodeDataTypeInt64Array         NodeDataType = "INT64_ARRAY"
	NodeDataTypeUint64Array        NodeDataType = "UINT64_ARRAY"
	NodeDataTypeBooleanArray       NodeDataType = "BOOLEAN_ARRAY"
	NodeDataTypeFloatArray         NodeDataType = "FLOAT_ARRAY"
	NodeDataTypeDoubleArray        NodeDataType = "DOUBLE_ARRAY"
	NodeDataTypeStringArray        NodeDataType = "STRING_ARRAY"
	NodeDataTypeUnixTimestampArray NodeDataType = "UNIX_TIMESTAMP_ARRAY"
	NodeDataTypeUnknown            NodeDataType = "UNKNOWN"
)

// Values returns all known values for NodeDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (NodeDataType) Values() []NodeDataType {
	return []NodeDataType{
		"INT8",
		"UINT8",
		"INT16",
		"UINT16",
		"INT32",
		"UINT32",
		"INT64",
		"UINT64",
		"BOOLEAN",
		"FLOAT",
		"DOUBLE",
		"STRING",
		"UNIX_TIMESTAMP",
		"INT8_ARRAY",
		"UINT8_ARRAY",
		"INT16_ARRAY",
		"UINT16_ARRAY",
		"INT32_ARRAY",
		"UINT32_ARRAY",
		"INT64_ARRAY",
		"UINT64_ARRAY",
		"BOOLEAN_ARRAY",
		"FLOAT_ARRAY",
		"DOUBLE_ARRAY",
		"STRING_ARRAY",
		"UNIX_TIMESTAMP_ARRAY",
		"UNKNOWN",
	}
}

type RegistrationStatus string

// Enum values for RegistrationStatus
const (
	RegistrationStatusRegistrationPending RegistrationStatus = "REGISTRATION_PENDING"
	RegistrationStatusRegistrationSuccess RegistrationStatus = "REGISTRATION_SUCCESS"
	RegistrationStatusRegistrationFailure RegistrationStatus = "REGISTRATION_FAILURE"
)

// Values returns all known values for RegistrationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RegistrationStatus) Values() []RegistrationStatus {
	return []RegistrationStatus{
		"REGISTRATION_PENDING",
		"REGISTRATION_SUCCESS",
		"REGISTRATION_FAILURE",
	}
}

type SignalDecoderFailureReason string

// Enum values for SignalDecoderFailureReason
const (
	SignalDecoderFailureReasonDuplicateSignal                                       SignalDecoderFailureReason = "DUPLICATE_SIGNAL"
	SignalDecoderFailureReasonConflictingSignal                                     SignalDecoderFailureReason = "CONFLICTING_SIGNAL"
	SignalDecoderFailureReasonSignalToAddAlreadyExists                              SignalDecoderFailureReason = "SIGNAL_TO_ADD_ALREADY_EXISTS"
	SignalDecoderFailureReasonSignalNotAssociatedWithNetworkInterface               SignalDecoderFailureReason = "SIGNAL_NOT_ASSOCIATED_WITH_NETWORK_INTERFACE"
	SignalDecoderFailureReasonNetworkInterfaceTypeIncompatibleWithSignalDecoderType SignalDecoderFailureReason = "NETWORK_INTERFACE_TYPE_INCOMPATIBLE_WITH_SIGNAL_DECODER_TYPE"
	SignalDecoderFailureReasonSignalNotInModel                                      SignalDecoderFailureReason = "SIGNAL_NOT_IN_MODEL"
	SignalDecoderFailureReasonCanSignalInfoIsNull                                   SignalDecoderFailureReason = "CAN_SIGNAL_INFO_IS_NULL"
	SignalDecoderFailureReasonObdSignalInfoIsNull                                   SignalDecoderFailureReason = "OBD_SIGNAL_INFO_IS_NULL"
	SignalDecoderFailureReasonNoDecoderInfoForSignalInModel                         SignalDecoderFailureReason = "NO_DECODER_INFO_FOR_SIGNAL_IN_MODEL"
)

// Values returns all known values for SignalDecoderFailureReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (SignalDecoderFailureReason) Values() []SignalDecoderFailureReason {
	return []SignalDecoderFailureReason{
		"DUPLICATE_SIGNAL",
		"CONFLICTING_SIGNAL",
		"SIGNAL_TO_ADD_ALREADY_EXISTS",
		"SIGNAL_NOT_ASSOCIATED_WITH_NETWORK_INTERFACE",
		"NETWORK_INTERFACE_TYPE_INCOMPATIBLE_WITH_SIGNAL_DECODER_TYPE",
		"SIGNAL_NOT_IN_MODEL",
		"CAN_SIGNAL_INFO_IS_NULL",
		"OBD_SIGNAL_INFO_IS_NULL",
		"NO_DECODER_INFO_FOR_SIGNAL_IN_MODEL",
	}
}

type SignalDecoderType string

// Enum values for SignalDecoderType
const (
	SignalDecoderTypeCanSignal SignalDecoderType = "CAN_SIGNAL"
	SignalDecoderTypeObdSignal SignalDecoderType = "OBD_SIGNAL"
)

// Values returns all known values for SignalDecoderType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SignalDecoderType) Values() []SignalDecoderType {
	return []SignalDecoderType{
		"CAN_SIGNAL",
		"OBD_SIGNAL",
	}
}

type SpoolingMode string

// Enum values for SpoolingMode
const (
	SpoolingModeOff    SpoolingMode = "OFF"
	SpoolingModeToDisk SpoolingMode = "TO_DISK"
)

// Values returns all known values for SpoolingMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (SpoolingMode) Values() []SpoolingMode {
	return []SpoolingMode{
		"OFF",
		"TO_DISK",
	}
}

type StorageCompressionFormat string

// Enum values for StorageCompressionFormat
const (
	StorageCompressionFormatNone StorageCompressionFormat = "NONE"
	StorageCompressionFormatGzip StorageCompressionFormat = "GZIP"
)

// Values returns all known values for StorageCompressionFormat. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (StorageCompressionFormat) Values() []StorageCompressionFormat {
	return []StorageCompressionFormat{
		"NONE",
		"GZIP",
	}
}

type TriggerMode string

// Enum values for TriggerMode
const (
	TriggerModeAlways     TriggerMode = "ALWAYS"
	TriggerModeRisingEdge TriggerMode = "RISING_EDGE"
)

// Values returns all known values for TriggerMode. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (TriggerMode) Values() []TriggerMode {
	return []TriggerMode{
		"ALWAYS",
		"RISING_EDGE",
	}
}

type UpdateCampaignAction string

// Enum values for UpdateCampaignAction
const (
	UpdateCampaignActionApprove UpdateCampaignAction = "APPROVE"
	UpdateCampaignActionSuspend UpdateCampaignAction = "SUSPEND"
	UpdateCampaignActionResume  UpdateCampaignAction = "RESUME"
	UpdateCampaignActionUpdate  UpdateCampaignAction = "UPDATE"
)

// Values returns all known values for UpdateCampaignAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (UpdateCampaignAction) Values() []UpdateCampaignAction {
	return []UpdateCampaignAction{
		"APPROVE",
		"SUSPEND",
		"RESUME",
		"UPDATE",
	}
}

type UpdateMode string

// Enum values for UpdateMode
const (
	UpdateModeOverwrite UpdateMode = "Overwrite"
	UpdateModeMerge     UpdateMode = "Merge"
)

// Values returns all known values for UpdateMode. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (UpdateMode) Values() []UpdateMode {
	return []UpdateMode{
		"Overwrite",
		"Merge",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonUnknownOperation      ValidationExceptionReason = "unknownOperation"
	ValidationExceptionReasonCannotParse           ValidationExceptionReason = "cannotParse"
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "fieldValidationFailed"
	ValidationExceptionReasonOther                 ValidationExceptionReason = "other"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"unknownOperation",
		"cannotParse",
		"fieldValidationFailed",
		"other",
	}
}

type VehicleAssociationBehavior string

// Enum values for VehicleAssociationBehavior
const (
	VehicleAssociationBehaviorCreateIotThing         VehicleAssociationBehavior = "CreateIotThing"
	VehicleAssociationBehaviorValidateIotThingExists VehicleAssociationBehavior = "ValidateIotThingExists"
)

// Values returns all known values for VehicleAssociationBehavior. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (VehicleAssociationBehavior) Values() []VehicleAssociationBehavior {
	return []VehicleAssociationBehavior{
		"CreateIotThing",
		"ValidateIotThingExists",
	}
}

type VehicleState string

// Enum values for VehicleState
const (
	VehicleStateCreated   VehicleState = "CREATED"
	VehicleStateReady     VehicleState = "READY"
	VehicleStateHealthy   VehicleState = "HEALTHY"
	VehicleStateSuspended VehicleState = "SUSPENDED"
	VehicleStateDeleting  VehicleState = "DELETING"
)

// Values returns all known values for VehicleState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (VehicleState) Values() []VehicleState {
	return []VehicleState{
		"CREATED",
		"READY",
		"HEALTHY",
		"SUSPENDED",
		"DELETING",
	}
}
