// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// An accelerator is a complex type that includes one or more listeners that
// process inbound connections and then direct traffic to one or more endpoint
// groups, each of which includes endpoints, such as load balancers.
type Accelerator struct {
	// The name of the accelerator. The name must contain only alphanumeric characters
	// or hyphens (-), and must not begin or end with a hyphen.
	Name *string
	// Describes the deployment status of the accelerator.
	Status AcceleratorStatus
	// Indicates whether the accelerator is enabled. The value is true or false. The
	// default value is true. If the value is set to true, the accelerator cannot be
	// deleted. If set to false, accelerator can be deleted.
	Enabled *bool
	// The date and time that the accelerator was last modified.
	LastModifiedTime *time.Time
	// The date and time that the accelerator was created.
	CreatedTime *time.Time
	// The Domain Name System (DNS) name that Global Accelerator creates that points to
	// your accelerator's static IP addresses. The naming convention for the DNS name
	// is the following: A lowercase letter a, followed by a 16-bit random hex string,
	// followed by .awsglobalaccelerator.com. For example:
	// a1234567890abcdef.awsglobalaccelerator.com. For more information about the
	// default DNS name, see  Support for DNS Addressing in Global Accelerator
	// (https://docs.aws.amazon.com/global-accelerator/latest/dg/about-accelerators.html#about-accelerators.dns-addressing)
	// in the AWS Global Accelerator Developer Guide.
	DnsName *string
	// The value for the address type must be IPv4.
	IpAddressType IpAddressType
	// The static IP addresses that Global Accelerator associates with the accelerator.
	IpSets []*IpSet
	// The Amazon Resource Name (ARN) of the accelerator.
	AcceleratorArn *string
}

// Attributes of an accelerator.
type AcceleratorAttributes struct {
	// The prefix for the location in the Amazon S3 bucket for the flow logs. Attribute
	// is required if FlowLogsEnabled is true. If you don’t specify a prefix, the flow
	// logs are stored in the root of the bucket. If you specify slash (/) for the S3
	// bucket prefix, the log file bucket folder structure will include a double slash
	// (//), like the following: s3-bucket_name//AWSLogs/aws_account_id
	FlowLogsS3Prefix *string
	// The name of the Amazon S3 bucket for the flow logs. Attribute is required if
	// FlowLogsEnabled is true. The bucket must exist and have a bucket policy that
	// grants AWS Global Accelerator permission to write to the bucket.
	FlowLogsS3Bucket *string
	// Indicates whether flow logs are enabled. The default value is false. If the
	// value is true, FlowLogsS3Bucket and FlowLogsS3Prefix must be specified. For more
	// information, see Flow Logs
	// (https://docs.aws.amazon.com/global-accelerator/latest/dg/monitoring-global-accelerator.flow-logs.html)
	// in the AWS Global Accelerator Developer Guide.
	FlowLogsEnabled *bool
}

// Information about an IP address range that is provisioned for use with your AWS
// resources through bring your own IP address (BYOIP). The following describes
// each BYOIP State that your IP address range can be in.
//
//     *
// PENDING_PROVISIONING — You’ve submitted a request to provision an IP address
// range but it is not yet provisioned with AWS Global Accelerator.
//
//     * READY —
// The address range is provisioned with AWS Global Accelerator and can be
// advertised.
//
//     * PENDING_ADVERTISING — You’ve submitted a request for AWS
// Global Accelerator to advertise an address range but it is not yet being
// advertised.
//
//     * ADVERTISING — The address range is being advertised by AWS
// Global Accelerator.
//
//     * PENDING_WITHDRAWING — You’ve submitted a request to
// withdraw an address range from being advertised but it is still being advertised
// by AWS Global Accelerator.
//
//     * PENDING_DEPROVISIONING — You’ve submitted a
// request to deprovision an address range from AWS Global Accelerator but it is
// still provisioned.
//
//     * DEPROVISIONED — The address range is deprovisioned
// from AWS Global Accelerator.
//
//     * FAILED_PROVISION — The request to provision
// the address range from AWS Global Accelerator was not successful. Please make
// sure that you provide all of the correct information, and try again. If the
// request fails a second time, contact AWS support.
//
//     * FAILED_ADVERTISING —
// The request for AWS Global Accelerator to advertise the address range was not
// successful. Please make sure that you provide all of the correct information,
// and try again. If the request fails a second time, contact AWS support.
//
//     *
// FAILED_WITHDRAW — The request to withdraw the address range from advertising by
// AWS Global Accelerator was not successful. Please make sure that you provide all
// of the correct information, and try again. If the request fails a second time,
// contact AWS support.
//
//     * FAILED_DEPROVISION — The request to deprovision the
// address range from AWS Global Accelerator was not successful. Please make sure
// that you provide all of the correct information, and try again. If the request
// fails a second time, contact AWS support.
type ByoipCidr struct {
	// The address range, in CIDR notation.
	Cidr *string
	// A history of status changes for an IP address range that that you bring to AWS
	// Global Accelerator through bring your own IP address (BYOIP).
	Events []*ByoipCidrEvent
	// The state of the address pool.
	State ByoipCidrState
}

// A complex type that contains a Message and a Timestamp value for changes that
// you make in the status an IP address range that you bring to AWS Global
// Accelerator through bring your own IP address (BYOIP).
type ByoipCidrEvent struct {
	// A timestamp when you make a status change for an IP address range that you bring
	// to AWS Global Accelerator through bring your own IP address (BYOIP).
	Timestamp *time.Time
	// A string that contains an Event message describing changes that you make in the
	// status of an IP address range that you bring to AWS Global Accelerator through
	// bring your own IP address (BYOIP).
	Message *string
}

// Provides authorization for Amazon to bring a specific IP address range to a
// specific AWS account using bring your own IP addresses (BYOIP). For more
// information, see Bring Your Own IP Addresses (BYOIP)
// (https://docs.aws.amazon.com/global-accelerator/latest/dg/using-byoip.html) in
// the AWS Global Accelerator Developer Guide.
type CidrAuthorizationContext struct {
	// The plain-text authorization message for the prefix and account.
	Message *string
	// The signed authorization message for the prefix and account.
	Signature *string
}

// A complex type for endpoints.
type EndpointConfiguration struct {
	// The weight associated with the endpoint. When you add weights to endpoints, you
	// configure AWS Global Accelerator to route traffic based on proportions that you
	// specify. For example, you might specify endpoint weights of 4, 5, 5, and 6
	// (sum=20). The result is that 4/20 of your traffic, on average, is routed to the
	// first endpoint, 5/20 is routed both to the second and third endpoints, and 6/20
	// is routed to the last endpoint. For more information, see Endpoint Weights
	// (https://docs.aws.amazon.com/global-accelerator/latest/dg/about-endpoints-endpoint-weights.html)
	// in the AWS Global Accelerator Developer Guide.
	Weight *int32
	// An ID for the endpoint. If the endpoint is a Network Load Balancer or
	// Application Load Balancer, this is the Amazon Resource Name (ARN) of the
	// resource. If the endpoint is an Elastic IP address, this is the Elastic IP
	// address allocation ID. For EC2 instances, this is the EC2 instance ID. An
	// Application Load Balancer can be either internal or internet-facing.
	EndpointId *string
	// Indicates whether client IP address preservation is enabled for an Application
	// Load Balancer endpoint. The value is true or false. The default value is true
	// for new accelerators. If the value is set to true, the client's IP address is
	// preserved in the X-Forwarded-For request header as traffic travels to
	// applications on the Application Load Balancer endpoint fronted by the
	// accelerator. For more information, see  Preserve Client IP Addresses in AWS
	// Global Accelerator
	// (https://docs.aws.amazon.com/global-accelerator/latest/dg/preserve-client-ip-address.html)
	// in the AWS Global Accelerator Developer Guide.
	ClientIPPreservationEnabled *bool
}

// A complex type for an endpoint. Each endpoint group can include one or more
// endpoints, such as load balancers.
type EndpointDescription struct {
	// Indicates whether client IP address preservation is enabled for an Application
	// Load Balancer endpoint. The value is true or false. The default value is true
	// for new accelerators. If the value is set to true, the client's IP address is
	// preserved in the X-Forwarded-For request header as traffic travels to
	// applications on the Application Load Balancer endpoint fronted by the
	// accelerator. For more information, see  Viewing Client IP Addresses in AWS
	// Global Accelerator
	// (https://docs.aws.amazon.com/global-accelerator/latest/dg/introduction-how-it-works-client-ip.html)
	// in the AWS Global Accelerator Developer Guide.
	ClientIPPreservationEnabled *bool
	// An ID for the endpoint. If the endpoint is a Network Load Balancer or
	// Application Load Balancer, this is the Amazon Resource Name (ARN) of the
	// resource. If the endpoint is an Elastic IP address, this is the Elastic IP
	// address allocation ID. For EC2 instances, this is the EC2 instance ID. An
	// Application Load Balancer can be either internal or internet-facing.
	EndpointId *string
	// The weight associated with the endpoint. When you add weights to endpoints, you
	// configure AWS Global Accelerator to route traffic based on proportions that you
	// specify. For example, you might specify endpoint weights of 4, 5, 5, and 6
	// (sum=20). The result is that 4/20 of your traffic, on average, is routed to the
	// first endpoint, 5/20 is routed both to the second and third endpoints, and 6/20
	// is routed to the last endpoint. For more information, see Endpoint Weights
	// (https://docs.aws.amazon.com/global-accelerator/latest/dg/about-endpoints-endpoint-weights.html)
	// in the AWS Global Accelerator Developer Guide.
	Weight *int32
	// The reason code associated with why the endpoint is not healthy. If the endpoint
	// state is healthy, a reason code is not provided. If the endpoint state is
	// unhealthy, the reason code can be one of the following values:
	//
	//     * Timeout:
	// The health check requests to the endpoint are timing out before returning a
	// status.
	//
	//     * Failed: The health check failed, for example because the endpoint
	// response was invalid (malformed).
	//
	// If the endpoint state is initial, the reason
	// code can be one of the following values:
	//
	//     * ProvisioningInProgress: The
	// endpoint is in the process of being provisioned.
	//
	//     * InitialHealthChecking:
	// Global Accelerator is still setting up the minimum number of health checks for
	// the endpoint that are required to determine its health status.
	HealthReason *string
	// The health status of the endpoint.
	HealthState HealthState
}

// A complex type for the endpoint group. An AWS Region can have only one endpoint
// group for a specific listener.
type EndpointGroup struct {
	// The time—10 seconds or 30 seconds—between health checks for each endpoint. The
	// default value is 30.
	HealthCheckIntervalSeconds *int32
	// If the protocol is HTTP/S, then this value provides the ping path that Global
	// Accelerator uses for the destination on the endpoints for health checks. The
	// default is slash (/).
	HealthCheckPath *string
	// The AWS Region that this endpoint group belongs.
	EndpointGroupRegion *string
	// The list of endpoint objects.
	EndpointDescriptions []*EndpointDescription
	// The port that Global Accelerator uses to perform health checks on endpoints that
	// are part of this endpoint group.  <p>The default port is the port for the
	// listener that this endpoint group is associated with. If the listener port is a
	// list, Global Accelerator uses the first specified port in the list of ports.</p>
	HealthCheckPort *int32
	// The number of consecutive health checks required to set the state of a healthy
	// endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default
	// value is 3.
	ThresholdCount *int32
	// The protocol that Global Accelerator uses to perform health checks on endpoints
	// that are part of this endpoint group. The default value is TCP.
	HealthCheckProtocol HealthCheckProtocol
	// The Amazon Resource Name (ARN) of the endpoint group.
	EndpointGroupArn *string
	// The percentage of traffic to send to an AWS Region. Additional traffic is
	// distributed to other endpoint groups for this listener. Use this action to
	// increase (dial up) or decrease (dial down) traffic to a specific Region. The
	// percentage is applied to the traffic that would otherwise have been routed to
	// the Region based on optimal routing. The default value is 100.
	TrafficDialPercentage *float32
}

// A complex type for the set of IP addresses for an accelerator.
type IpSet struct {
	// The types of IP addresses included in this IP set.
	IpFamily *string
	// The array of IP addresses in the IP address set. An IP address set can have a
	// maximum of two IP addresses.
	IpAddresses []*string
}

// A complex type for a listener.
type Listener struct {
	// Client affinity lets you direct all requests from a user to the same endpoint,
	// if you have stateful applications, regardless of the port and protocol of the
	// client request. Clienty affinity gives you control over whether to always route
	// each client to the same specific endpoint. AWS Global Accelerator uses a
	// consistent-flow hashing algorithm to choose the optimal endpoint for a
	// connection. If client affinity is NONE, Global Accelerator uses the "five-tuple"
	// (5-tuple) properties—source IP address, source port, destination IP address,
	// destination port, and protocol—to select the hash value, and then chooses the
	// best endpoint. However, with this setting, if someone uses different ports to
	// connect to Global Accelerator, their connections might not be always routed to
	// the same endpoint because the hash value changes. If you want a given client to
	// always be routed to the same endpoint, set client affinity to SOURCE_IP instead.
	// When you use the SOURCE_IP setting, Global Accelerator uses the "two-tuple"
	// (2-tuple) properties— source (client) IP address and destination IP address—to
	// select the hash value. The default value is NONE.
	ClientAffinity ClientAffinity
	// The protocol for the connections from clients to the accelerator.
	Protocol Protocol
	// The Amazon Resource Name (ARN) of the listener.
	ListenerArn *string
	// The list of port ranges for the connections from clients to the accelerator.
	PortRanges []*PortRange
}

// A complex type for a range of ports for a listener.
type PortRange struct {
	// The last port in the range of ports, inclusive.
	ToPort *int32
	// The first port in the range of ports, inclusive.
	FromPort *int32
}

// A complex type that contains a Tag key and Tag value.
type Tag struct {
	// A string that contains a Tag key.
	Key *string
	// A string that contains a Tag value.
	Value *string
}
