// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package robomaker

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/robomaker/types"
)

const opListRobotApplications = "ListRobotApplications"

// ListRobotApplicationsRequest returns a request value for making API operation for
// AWS RoboMaker.
//
// Returns a list of robot application. You can optionally provide filters to
// retrieve specific robot applications.
//
//    // Example sending a request using ListRobotApplicationsRequest.
//    req := client.ListRobotApplicationsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListRobotApplications
func (c *Client) ListRobotApplicationsRequest(input *types.ListRobotApplicationsInput) ListRobotApplicationsRequest {
	op := &aws.Operation{
		Name:       opListRobotApplications,
		HTTPMethod: "POST",
		HTTPPath:   "/listRobotApplications",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListRobotApplicationsInput{}
	}

	req := c.newRequest(op, input, &types.ListRobotApplicationsOutput{})
	return ListRobotApplicationsRequest{Request: req, Input: input, Copy: c.ListRobotApplicationsRequest}
}

// ListRobotApplicationsRequest is the request type for the
// ListRobotApplications API operation.
type ListRobotApplicationsRequest struct {
	*aws.Request
	Input *types.ListRobotApplicationsInput
	Copy  func(*types.ListRobotApplicationsInput) ListRobotApplicationsRequest
}

// Send marshals and sends the ListRobotApplications API request.
func (r ListRobotApplicationsRequest) Send(ctx context.Context) (*ListRobotApplicationsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListRobotApplicationsResponse{
		ListRobotApplicationsOutput: r.Request.Data.(*types.ListRobotApplicationsOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListRobotApplicationsRequestPaginator returns a paginator for ListRobotApplications.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListRobotApplicationsRequest(input)
//   p := robomaker.NewListRobotApplicationsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListRobotApplicationsPaginator(req ListRobotApplicationsRequest) ListRobotApplicationsPaginator {
	return ListRobotApplicationsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListRobotApplicationsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListRobotApplicationsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListRobotApplicationsPaginator struct {
	aws.Pager
}

func (p *ListRobotApplicationsPaginator) CurrentPage() *types.ListRobotApplicationsOutput {
	return p.Pager.CurrentPage().(*types.ListRobotApplicationsOutput)
}

// ListRobotApplicationsResponse is the response type for the
// ListRobotApplications API operation.
type ListRobotApplicationsResponse struct {
	*types.ListRobotApplicationsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListRobotApplications request.
func (r *ListRobotApplicationsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
