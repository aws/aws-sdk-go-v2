// Code generated by smithy-go-codegen DO NOT EDIT.

package robomaker

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/robomaker/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Describes a simulation job.
func (c *Client) DescribeSimulationJob(ctx context.Context, params *DescribeSimulationJobInput, optFns ...func(*Options)) (*DescribeSimulationJobOutput, error) {
	stack := middleware.NewStack("DescribeSimulationJob", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpDescribeSimulationJobMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeSimulationJobValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeSimulationJob(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeSimulationJob",
			Err:           err,
		}
	}
	out := result.(*DescribeSimulationJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeSimulationJobInput struct {
	// The Amazon Resource Name (ARN) of the simulation job to be described.
	Job *string
}

type DescribeSimulationJobOutput struct {
	// The time, in milliseconds since the epoch, when the simulation job was last
	// updated.
	LastUpdatedAt *time.Time
	// The name of the simulation job.
	Name *string
	// The logging configuration.
	LoggingConfig *types.LoggingConfig
	// A list of robot applications.
	RobotApplications []*types.RobotApplicationConfig
	// The data sources for the simulation job.
	DataSources []*types.DataSource
	// The status of the simulation job.
	Status types.SimulationJobStatus
	// The Amazon Resource Name (ARN) of the simulation job.
	Arn *string
	// A list of simulation applications.
	SimulationApplications []*types.SimulationApplicationConfig
	// The simulation job execution duration in milliseconds.
	SimulationTimeMillis *int64
	// The IAM role that allows the simulation instance to call the AWS APIs that are
	// specified in its associated policies on your behalf.
	IamRole *string
	// Compute information for the simulation job.
	Compute *types.ComputeResponse
	// The VPC configuration.
	VpcConfig *types.VPCConfigResponse
	// The network interface information for the simulation job.
	NetworkInterface *types.NetworkInterface
	// The failure behavior for the simulation job.
	FailureBehavior types.FailureBehavior
	// Details about why the simulation job failed. For more information about
	// troubleshooting, see Troubleshooting
	// (https://docs.aws.amazon.com/robomaker/latest/dg/troubleshooting.html).
	FailureReason *string
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of
	// the request.
	ClientRequestToken *string
	// The time, in milliseconds since the epoch, when the simulation job was last
	// started.
	LastStartedAt *time.Time
	// The maximum job duration in seconds. The value must be 8 days (691,200 seconds)
	// or less.
	MaxJobDurationInSeconds *int64
	// The list of all tags added to the specified simulation job.
	Tags map[string]*string
	// The failure code of the simulation job if it failed: InternalServiceError
	// Internal service error. RobotApplicationCrash Robot application exited
	// abnormally. SimulationApplicationCrash Simulation application exited abnormally.
	// BadPermissionsRobotApplication Robot application bundle could not be downloaded.
	// BadPermissionsSimulationApplication Simulation application bundle could not be
	// downloaded. BadPermissionsS3Output Unable to publish outputs to
	// customer-provided S3 bucket. BadPermissionsCloudwatchLogs Unable to publish logs
	// to customer-provided CloudWatch Logs resource. SubnetIpLimitExceeded Subnet IP
	// limit exceeded. ENILimitExceeded ENI limit exceeded.
	// BadPermissionsUserCredentials Unable to use the Role provided.
	// InvalidBundleRobotApplication Robot bundle cannot be extracted (invalid format,
	// bundling error, or other issue). InvalidBundleSimulationApplication Simulation
	// bundle cannot be extracted (invalid format, bundling error, or other issue).
	// RobotApplicationVersionMismatchedEtag Etag for RobotApplication does not match
	// value during version creation. SimulationApplicationVersionMismatchedEtag Etag
	// for SimulationApplication does not match value during version creation.
	FailureCode types.SimulationJobErrorCode
	// Location for output files generated by the simulation job.
	OutputLocation *types.OutputLocation

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpDescribeSimulationJobMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpDescribeSimulationJob{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeSimulationJob{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeSimulationJob(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "robomaker",
		OperationName: "DescribeSimulationJob",
	}
}
