// Code generated by smithy-go-codegen DO NOT EDIT.

package signer

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/signer/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Returns information about a specific code signing job. You specify the job by
// using the jobId value that is returned by the StartSigningJob operation.
func (c *Client) DescribeSigningJob(ctx context.Context, params *DescribeSigningJobInput, optFns ...func(*Options)) (*DescribeSigningJobOutput, error) {
	if params == nil {
		params = &DescribeSigningJobInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeSigningJob", params, optFns, addOperationDescribeSigningJobMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeSigningJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeSigningJobInput struct {

	// The ID of the signing job on input.
	//
	// This member is required.
	JobId *string
}

type DescribeSigningJobOutput struct {

	// Date and time that the signing job was completed.
	CompletedAt *time.Time

	// Date and time that the signing job was created.
	CreatedAt *time.Time

	// The ID of the signing job on output.
	JobId *string

	// A list of any overrides that were applied to the signing operation.
	Overrides *types.SigningPlatformOverrides

	// The microcontroller platform to which your signed code image will be
	// distributed.
	PlatformId *string

	// The name of the profile that initiated the signing operation.
	ProfileName *string

	// The IAM principal that requested the signing job.
	RequestedBy *string

	// Name of the S3 bucket where the signed code image is saved by code signing.
	SignedObject *types.SignedObject

	// The Amazon Resource Name (ARN) of your code signing certificate.
	SigningMaterial *types.SigningMaterial

	// Map of user-assigned key-value pairs used during signing. These values contain
	// any information that you specified for use in your signing job.
	SigningParameters map[string]*string

	// The object that contains the name of your S3 bucket or your raw code.
	Source *types.Source

	// Status of the signing job.
	Status types.SigningStatus

	// String value that contains the status reason.
	StatusReason *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribeSigningJobMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpDescribeSigningJob{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpDescribeSigningJob{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpDescribeSigningJobValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeSigningJob(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opDescribeSigningJob(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "signer",
		OperationName: "DescribeSigningJob",
	}
}
