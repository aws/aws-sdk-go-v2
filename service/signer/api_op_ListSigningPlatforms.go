// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package signer

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/signer/types"
)

const opListSigningPlatforms = "ListSigningPlatforms"

// ListSigningPlatformsRequest returns a request value for making API operation for
// AWS Signer.
//
// Lists all signing platforms available in code signing that match the request
// parameters. If additional jobs remain to be listed, code signing returns
// a nextToken value. Use this value in subsequent calls to ListSigningJobs
// to fetch the remaining values. You can continue calling ListSigningJobs with
// your maxResults parameter and with new values that code signing returns in
// the nextToken parameter until all of your signing jobs have been returned.
//
//    // Example sending a request using ListSigningPlatformsRequest.
//    req := client.ListSigningPlatformsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/signer-2017-08-25/ListSigningPlatforms
func (c *Client) ListSigningPlatformsRequest(input *types.ListSigningPlatformsInput) ListSigningPlatformsRequest {
	op := &aws.Operation{
		Name:       opListSigningPlatforms,
		HTTPMethod: "GET",
		HTTPPath:   "/signing-platforms",
		Paginator: &aws.Paginator{
			InputTokens:     []string{"nextToken"},
			OutputTokens:    []string{"nextToken"},
			LimitToken:      "maxResults",
			TruncationToken: "",
		},
	}

	if input == nil {
		input = &types.ListSigningPlatformsInput{}
	}

	req := c.newRequest(op, input, &types.ListSigningPlatformsOutput{})
	return ListSigningPlatformsRequest{Request: req, Input: input, Copy: c.ListSigningPlatformsRequest}
}

// ListSigningPlatformsRequest is the request type for the
// ListSigningPlatforms API operation.
type ListSigningPlatformsRequest struct {
	*aws.Request
	Input *types.ListSigningPlatformsInput
	Copy  func(*types.ListSigningPlatformsInput) ListSigningPlatformsRequest
}

// Send marshals and sends the ListSigningPlatforms API request.
func (r ListSigningPlatformsRequest) Send(ctx context.Context) (*ListSigningPlatformsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListSigningPlatformsResponse{
		ListSigningPlatformsOutput: r.Request.Data.(*types.ListSigningPlatformsOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// NewListSigningPlatformsRequestPaginator returns a paginator for ListSigningPlatforms.
// Use Next method to get the next page, and CurrentPage to get the current
// response page from the paginator. Next will return false, if there are
// no more pages, or an error was encountered.
//
// Note: This operation can generate multiple requests to a service.
//
//   // Example iterating over pages.
//   req := client.ListSigningPlatformsRequest(input)
//   p := signer.NewListSigningPlatformsRequestPaginator(req)
//
//   for p.Next(context.TODO()) {
//       page := p.CurrentPage()
//   }
//
//   if err := p.Err(); err != nil {
//       return err
//   }
//
func NewListSigningPlatformsPaginator(req ListSigningPlatformsRequest) ListSigningPlatformsPaginator {
	return ListSigningPlatformsPaginator{
		Pager: aws.Pager{
			NewRequest: func(ctx context.Context) (*aws.Request, error) {
				var inCpy *types.ListSigningPlatformsInput
				if req.Input != nil {
					tmp := *req.Input
					inCpy = &tmp
				}

				newReq := req.Copy(inCpy)
				newReq.SetContext(ctx)
				return newReq.Request, nil
			},
		},
	}
}

// ListSigningPlatformsPaginator is used to paginate the request. This can be done by
// calling Next and CurrentPage.
type ListSigningPlatformsPaginator struct {
	aws.Pager
}

func (p *ListSigningPlatformsPaginator) CurrentPage() *types.ListSigningPlatformsOutput {
	return p.Pager.CurrentPage().(*types.ListSigningPlatformsOutput)
}

// ListSigningPlatformsResponse is the response type for the
// ListSigningPlatforms API operation.
type ListSigningPlatformsResponse struct {
	*types.ListSigningPlatformsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListSigningPlatforms request.
func (r *ListSigningPlatformsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
