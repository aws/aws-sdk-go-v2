// Code generated by smithy-go-codegen DO NOT EDIT.

package signer

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/signer/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a signing profile. A signing profile is a code signing template that can
// be used to carry out a pre-defined signing job. For more information, see
// http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html
// (http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html)
func (c *Client) PutSigningProfile(ctx context.Context, params *PutSigningProfileInput, optFns ...func(*Options)) (*PutSigningProfileOutput, error) {
	stack := middleware.NewStack("PutSigningProfile", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsRestjson1_serdeOpPutSigningProfileMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpPutSigningProfileValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opPutSigningProfile(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "PutSigningProfile",
			Err:           err,
		}
	}
	out := result.(*PutSigningProfileOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PutSigningProfileInput struct {
	// Tags to be associated with the signing profile that is being created.
	Tags map[string]*string
	// The name of the signing profile to be created.
	ProfileName *string
	// A subfield of platform. This specifies any different configuration options that
	// you want to apply to the chosen platform (such as a different hash-algorithm or
	// signing-algorithm).
	Overrides *types.SigningPlatformOverrides
	// Map of key-value pairs for signing. These can include any information that you
	// want to use during signing.
	SigningParameters map[string]*string
	// The ID of the signing platform to be created.
	PlatformId *string
	// The AWS Certificate Manager certificate that will be used to sign code with the
	// new signing profile.
	SigningMaterial *types.SigningMaterial
}

type PutSigningProfileOutput struct {
	// The Amazon Resource Name (ARN) of the signing profile created.
	Arn *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsRestjson1_serdeOpPutSigningProfileMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsRestjson1_serializeOpPutSigningProfile{}, middleware.After)
	stack.Deserialize.Add(&awsRestjson1_deserializeOpPutSigningProfile{}, middleware.After)
}

func newServiceMetadataMiddleware_opPutSigningProfile(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "signer",
		OperationName: "PutSigningProfile",
	}
}
