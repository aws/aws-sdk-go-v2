// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package iot1clickprojectsiface provides an interface to enable mocking the AWS IoT 1-Click Projects Service service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package iot1clickprojectsiface

import (
	"github.com/aws/aws-sdk-go-v2/service/iot1clickprojects"
	"github.com/aws/aws-sdk-go-v2/service/iot1clickprojects/types"
)

// ClientAPI provides an interface to enable mocking the
// iot1clickprojects.Client methods. This make unit testing your code that
// calls out to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // AWS IoT 1-Click Projects.
//    func myFunc(svc iot1clickprojectsiface.ClientAPI) bool {
//        // Make svc.AssociateDeviceWithPlacement request
//    }
//
//    func main() {
//        cfg, err := external.LoadDefaultAWSConfig()
//        if err != nil {
//            panic("failed to load config, " + err.Error())
//        }
//
//        svc := iot1clickprojects.New(cfg)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockClientClient struct {
//        iot1clickprojectsiface.ClientPI
//    }
//    func (m *mockClientClient) AssociateDeviceWithPlacement(input *types.AssociateDeviceWithPlacementInput) (*types.AssociateDeviceWithPlacementOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockClientClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type ClientAPI interface {
	AssociateDeviceWithPlacementRequest(*types.AssociateDeviceWithPlacementInput) iot1clickprojects.AssociateDeviceWithPlacementRequest

	CreatePlacementRequest(*types.CreatePlacementInput) iot1clickprojects.CreatePlacementRequest

	CreateProjectRequest(*types.CreateProjectInput) iot1clickprojects.CreateProjectRequest

	DeletePlacementRequest(*types.DeletePlacementInput) iot1clickprojects.DeletePlacementRequest

	DeleteProjectRequest(*types.DeleteProjectInput) iot1clickprojects.DeleteProjectRequest

	DescribePlacementRequest(*types.DescribePlacementInput) iot1clickprojects.DescribePlacementRequest

	DescribeProjectRequest(*types.DescribeProjectInput) iot1clickprojects.DescribeProjectRequest

	DisassociateDeviceFromPlacementRequest(*types.DisassociateDeviceFromPlacementInput) iot1clickprojects.DisassociateDeviceFromPlacementRequest

	GetDevicesInPlacementRequest(*types.GetDevicesInPlacementInput) iot1clickprojects.GetDevicesInPlacementRequest

	ListPlacementsRequest(*types.ListPlacementsInput) iot1clickprojects.ListPlacementsRequest

	ListProjectsRequest(*types.ListProjectsInput) iot1clickprojects.ListProjectsRequest

	ListTagsForResourceRequest(*types.ListTagsForResourceInput) iot1clickprojects.ListTagsForResourceRequest

	TagResourceRequest(*types.TagResourceInput) iot1clickprojects.TagResourceRequest

	UntagResourceRequest(*types.UntagResourceInput) iot1clickprojects.UntagResourceRequest

	UpdatePlacementRequest(*types.UpdatePlacementInput) iot1clickprojects.UpdatePlacementRequest

	UpdateProjectRequest(*types.UpdateProjectInput) iot1clickprojects.UpdateProjectRequest
}

var _ ClientAPI = (*iot1clickprojects.Client)(nil)
