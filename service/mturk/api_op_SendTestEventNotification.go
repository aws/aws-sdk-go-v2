// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package mturk

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mturk/types"
)

const opSendTestEventNotification = "SendTestEventNotification"

// SendTestEventNotificationRequest returns a request value for making API operation for
// Amazon Mechanical Turk.
//
// The SendTestEventNotification operation causes Amazon Mechanical Turk to
// send a notification message as if a HIT event occurred, according to the
// provided notification specification. This allows you to test notifications
// without setting up notifications for a real HIT type and trying to trigger
// them using the website. When you call this operation, the service attempts
// to send the test notification immediately.
//
//    // Example sending a request using SendTestEventNotificationRequest.
//    req := client.SendTestEventNotificationRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/mturk-requester-2017-01-17/SendTestEventNotification
func (c *Client) SendTestEventNotificationRequest(input *types.SendTestEventNotificationInput) SendTestEventNotificationRequest {
	op := &aws.Operation{
		Name:       opSendTestEventNotification,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.SendTestEventNotificationInput{}
	}

	req := c.newRequest(op, input, &types.SendTestEventNotificationOutput{})
	return SendTestEventNotificationRequest{Request: req, Input: input, Copy: c.SendTestEventNotificationRequest}
}

// SendTestEventNotificationRequest is the request type for the
// SendTestEventNotification API operation.
type SendTestEventNotificationRequest struct {
	*aws.Request
	Input *types.SendTestEventNotificationInput
	Copy  func(*types.SendTestEventNotificationInput) SendTestEventNotificationRequest
}

// Send marshals and sends the SendTestEventNotification API request.
func (r SendTestEventNotificationRequest) Send(ctx context.Context) (*SendTestEventNotificationResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SendTestEventNotificationResponse{
		SendTestEventNotificationOutput: r.Request.Data.(*types.SendTestEventNotificationOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SendTestEventNotificationResponse is the response type for the
// SendTestEventNotification API operation.
type SendTestEventNotificationResponse struct {
	*types.SendTestEventNotificationOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SendTestEventNotification request.
func (r *SendTestEventNotificationResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
