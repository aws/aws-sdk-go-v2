// Code generated by smithy-go-codegen DO NOT EDIT.

package mturk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// The CreateAdditionalAssignmentsForHIT operation increases the maximum number of
// assignments of an existing HIT. To extend the maximum number of assignments,
// specify the number of additional assignments.
//
//     * HITs created with fewer
// than 10 assignments cannot be extended to have 10 or more assignments.
// Attempting to add assignments in a way that brings the total number of
// assignments for a HIT from fewer than 10 assignments to 10 or more assignments
// will result in an AWS.MechanicalTurk.InvalidMaximumAssignmentsIncrease
// exception.
//
//     * HITs that were created before July 22, 2015 cannot be
// extended. Attempting to extend HITs that were created before July 22, 2015 will
// result in an AWS.MechanicalTurk.HITTooOldForExtension exception.
func (c *Client) CreateAdditionalAssignmentsForHIT(ctx context.Context, params *CreateAdditionalAssignmentsForHITInput, optFns ...func(*Options)) (*CreateAdditionalAssignmentsForHITOutput, error) {
	stack := middleware.NewStack("CreateAdditionalAssignmentsForHIT", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreateAdditionalAssignmentsForHITMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateAdditionalAssignmentsForHITValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateAdditionalAssignmentsForHIT(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateAdditionalAssignmentsForHIT",
			Err:           err,
		}
	}
	out := result.(*CreateAdditionalAssignmentsForHITOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateAdditionalAssignmentsForHITInput struct {
	// The number of additional assignments to request for this HIT.
	NumberOfAdditionalAssignments *int32
	// The ID of the HIT to extend.
	HITId *string
	// A unique identifier for this request, which allows you to retry the call on
	// error without extending the HIT multiple times. This is useful in cases such as
	// network timeouts where it is unclear whether or not the call succeeded on the
	// server. If the extend HIT already exists in the system from a previous call
	// using the same UniqueRequestToken, subsequent calls will return an error with a
	// message containing the request ID.
	UniqueRequestToken *string
}

type CreateAdditionalAssignmentsForHITOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreateAdditionalAssignmentsForHITMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreateAdditionalAssignmentsForHIT{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateAdditionalAssignmentsForHIT{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateAdditionalAssignmentsForHIT(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mturk-requester",
		OperationName: "CreateAdditionalAssignmentsForHIT",
	}
}
