// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package mturk

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mturk/types"
)

const opCreateHIT = "CreateHIT"

// CreateHITRequest returns a request value for making API operation for
// Amazon Mechanical Turk.
//
// The CreateHIT operation creates a new Human Intelligence Task (HIT). The
// new HIT is made available for Workers to find and accept on the Amazon Mechanical
// Turk website.
//
// This operation allows you to specify a new HIT by passing in values for the
// properties of the HIT, such as its title, reward amount and number of assignments.
// When you pass these values to CreateHIT, a new HIT is created for you, with
// a new HITTypeID. The HITTypeID can be used to create additional HITs in the
// future without needing to specify common parameters such as the title, description
// and reward amount each time.
//
// An alternative way to create HITs is to first generate a HITTypeID using
// the CreateHITType operation and then call the CreateHITWithHITType operation.
// This is the recommended best practice for Requesters who are creating large
// numbers of HITs.
//
// CreateHIT also supports several ways to provide question data: by providing
// a value for the Question parameter that fully specifies the contents of the
// HIT, or by providing a HitLayoutId and associated HitLayoutParameters.
//
// If a HIT is created with 10 or more maximum assignments, there is an additional
// fee. For more information, see Amazon Mechanical Turk Pricing (https://requester.mturk.com/pricing).
//
//    // Example sending a request using CreateHITRequest.
//    req := client.CreateHITRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/mturk-requester-2017-01-17/CreateHIT
func (c *Client) CreateHITRequest(input *types.CreateHITInput) CreateHITRequest {
	op := &aws.Operation{
		Name:       opCreateHIT,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateHITInput{}
	}

	req := c.newRequest(op, input, &types.CreateHITOutput{})
	return CreateHITRequest{Request: req, Input: input, Copy: c.CreateHITRequest}
}

// CreateHITRequest is the request type for the
// CreateHIT API operation.
type CreateHITRequest struct {
	*aws.Request
	Input *types.CreateHITInput
	Copy  func(*types.CreateHITInput) CreateHITRequest
}

// Send marshals and sends the CreateHIT API request.
func (r CreateHITRequest) Send(ctx context.Context) (*CreateHITResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateHITResponse{
		CreateHITOutput: r.Request.Data.(*types.CreateHITOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateHITResponse is the response type for the
// CreateHIT API operation.
type CreateHITResponse struct {
	*types.CreateHITOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateHIT request.
func (r *CreateHITResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
