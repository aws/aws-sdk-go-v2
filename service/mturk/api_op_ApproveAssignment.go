// Code generated by smithy-go-codegen DO NOT EDIT.

package mturk

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// The ApproveAssignment operation approves the results of a completed assignment.
// Approving an assignment initiates two payments from the Requester's Amazon.com
// account
//
//     * The Worker who submitted the results is paid the reward specified
// in the HIT.
//
//     * Amazon Mechanical Turk fees are debited.
//
// If the Requester's
// account does not have adequate funds for these payments, the call to
// ApproveAssignment returns an exception, and the approval is not processed. You
// can include an optional feedback message with the approval, which the Worker can
// see in the Status section of the web site. You can also call this operation for
// assignments that were previous rejected and approve them by explicitly
// overriding the previous rejection. This only works on rejected assignments that
// were submitted within the previous 30 days and only if the assignment's related
// HIT has not been deleted.
func (c *Client) ApproveAssignment(ctx context.Context, params *ApproveAssignmentInput, optFns ...func(*Options)) (*ApproveAssignmentOutput, error) {
	stack := middleware.NewStack("ApproveAssignment", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpApproveAssignmentMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpApproveAssignmentValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opApproveAssignment(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ApproveAssignment",
			Err:           err,
		}
	}
	out := result.(*ApproveAssignmentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ApproveAssignmentInput struct {
	// A flag indicating that an assignment should be approved even if it was
	// previously rejected. Defaults to False.
	OverrideRejection *bool
	// The ID of the assignment. The assignment must correspond to a HIT created by the
	// Requester.
	AssignmentId *string
	// A message for the Worker, which the Worker can see in the Status section of the
	// web site.
	RequesterFeedback *string
}

type ApproveAssignmentOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpApproveAssignmentMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpApproveAssignment{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpApproveAssignment{}, middleware.After)
}

func newServiceMetadataMiddleware_opApproveAssignment(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "mturk-requester",
		OperationName: "ApproveAssignment",
	}
}
