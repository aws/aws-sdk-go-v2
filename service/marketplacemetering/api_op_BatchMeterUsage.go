// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package marketplacemetering

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/marketplacemetering/types"
)

const opBatchMeterUsage = "BatchMeterUsage"

// BatchMeterUsageRequest returns a request value for making API operation for
// AWSMarketplace Metering.
//
// BatchMeterUsage is called from a SaaS application listed on the AWS Marketplace
// to post metering records for a set of customers.
//
// For identical requests, the API is idempotent; requests can be retried with
// the same records or a subset of the input records.
//
// Every request to BatchMeterUsage is for one product. If you need to meter
// usage for multiple products, you must make multiple calls to BatchMeterUsage.
//
// BatchMeterUsage can process up to 25 UsageRecords at a time.
//
//    // Example sending a request using BatchMeterUsageRequest.
//    req := client.BatchMeterUsageRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/BatchMeterUsage
func (c *Client) BatchMeterUsageRequest(input *types.BatchMeterUsageInput) BatchMeterUsageRequest {
	op := &aws.Operation{
		Name:       opBatchMeterUsage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.BatchMeterUsageInput{}
	}

	req := c.newRequest(op, input, &types.BatchMeterUsageOutput{})
	return BatchMeterUsageRequest{Request: req, Input: input, Copy: c.BatchMeterUsageRequest}
}

// BatchMeterUsageRequest is the request type for the
// BatchMeterUsage API operation.
type BatchMeterUsageRequest struct {
	*aws.Request
	Input *types.BatchMeterUsageInput
	Copy  func(*types.BatchMeterUsageInput) BatchMeterUsageRequest
}

// Send marshals and sends the BatchMeterUsage API request.
func (r BatchMeterUsageRequest) Send(ctx context.Context) (*BatchMeterUsageResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &BatchMeterUsageResponse{
		BatchMeterUsageOutput: r.Request.Data.(*types.BatchMeterUsageOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// BatchMeterUsageResponse is the response type for the
// BatchMeterUsage API operation.
type BatchMeterUsageResponse struct {
	*types.BatchMeterUsageOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// BatchMeterUsage request.
func (r *BatchMeterUsageResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
