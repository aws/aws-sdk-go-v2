// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package textract

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/textract/types"
)

const opAnalyzeDocument = "AnalyzeDocument"

// AnalyzeDocumentRequest returns a request value for making API operation for
// Amazon Textract.
//
// Analyzes an input document for relationships between detected items.
//
// The types of information returned are as follows:
//
//    * Words and lines that are related to nearby lines and words. The related
//    information is returned in two Block objects each of type KEY_VALUE_SET:
//    a KEY Block object and a VALUE Block object. For example, Name: Ana Silva
//    Carolina contains a key and value. Name: is the key. Ana Silva Carolina
//    is the value.
//
//    * Table and table cell data. A TABLE Block object contains information
//    about a detected table. A CELL Block object is returned for each cell
//    in a table.
//
//    * Selectable elements such as checkboxes and radio buttons. A SELECTION_ELEMENT
//    Block object contains information about a selectable element.
//
//    * Lines and words of text. A LINE Block object contains one or more WORD
//    Block objects.
//
// You can choose which type of analysis to perform by specifying the FeatureTypes
// list.
//
// The output is returned in a list of BLOCK objects.
//
// AnalyzeDocument is a synchronous operation. To analyze documents asynchronously,
// use StartDocumentAnalysis.
//
// For more information, see Document Text Analysis (https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html).
//
//    // Example sending a request using AnalyzeDocumentRequest.
//    req := client.AnalyzeDocumentRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeDocument
func (c *Client) AnalyzeDocumentRequest(input *types.AnalyzeDocumentInput) AnalyzeDocumentRequest {
	op := &aws.Operation{
		Name:       opAnalyzeDocument,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AnalyzeDocumentInput{}
	}

	req := c.newRequest(op, input, &types.AnalyzeDocumentOutput{})
	return AnalyzeDocumentRequest{Request: req, Input: input, Copy: c.AnalyzeDocumentRequest}
}

// AnalyzeDocumentRequest is the request type for the
// AnalyzeDocument API operation.
type AnalyzeDocumentRequest struct {
	*aws.Request
	Input *types.AnalyzeDocumentInput
	Copy  func(*types.AnalyzeDocumentInput) AnalyzeDocumentRequest
}

// Send marshals and sends the AnalyzeDocument API request.
func (r AnalyzeDocumentRequest) Send(ctx context.Context) (*AnalyzeDocumentResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AnalyzeDocumentResponse{
		AnalyzeDocumentOutput: r.Request.Data.(*types.AnalyzeDocumentOutput),
		response:              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AnalyzeDocumentResponse is the response type for the
// AnalyzeDocument API operation.
type AnalyzeDocumentResponse struct {
	*types.AnalyzeDocumentOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AnalyzeDocument request.
func (r *AnalyzeDocumentResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
