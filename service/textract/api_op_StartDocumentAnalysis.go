// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package textract

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/textract/types"
)

const opStartDocumentAnalysis = "StartDocumentAnalysis"

// StartDocumentAnalysisRequest returns a request value for making API operation for
// Amazon Textract.
//
// Starts asynchronous analysis of an input document for relationships between
// detected items such as key and value pairs, tables, and selection elements.
//
// StartDocumentAnalysis can analyze text in documents that are in JPG, PNG,
// and PDF format. The documents are stored in an Amazon S3 bucket. Use DocumentLocation
// to specify the bucket name and file name of the document.
//
// StartDocumentAnalysis returns a job identifier (JobId) that you use to get
// the results of the operation. When text analysis is finished, Amazon Textract
// publishes a completion status to the Amazon Simple Notification Service (Amazon
// SNS) topic that you specify in NotificationChannel. To get the results of
// the text analysis operation, first check that the status value published
// to the Amazon SNS topic is SUCCEEDED. If so, call GetDocumentAnalysis, and
// pass the job identifier (JobId) from the initial call to StartDocumentAnalysis.
//
// For more information, see Document Text Analysis (https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html).
//
//    // Example sending a request using StartDocumentAnalysisRequest.
//    req := client.StartDocumentAnalysisRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartDocumentAnalysis
func (c *Client) StartDocumentAnalysisRequest(input *types.StartDocumentAnalysisInput) StartDocumentAnalysisRequest {
	op := &aws.Operation{
		Name:       opStartDocumentAnalysis,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StartDocumentAnalysisInput{}
	}

	req := c.newRequest(op, input, &types.StartDocumentAnalysisOutput{})
	return StartDocumentAnalysisRequest{Request: req, Input: input, Copy: c.StartDocumentAnalysisRequest}
}

// StartDocumentAnalysisRequest is the request type for the
// StartDocumentAnalysis API operation.
type StartDocumentAnalysisRequest struct {
	*aws.Request
	Input *types.StartDocumentAnalysisInput
	Copy  func(*types.StartDocumentAnalysisInput) StartDocumentAnalysisRequest
}

// Send marshals and sends the StartDocumentAnalysis API request.
func (r StartDocumentAnalysisRequest) Send(ctx context.Context) (*StartDocumentAnalysisResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartDocumentAnalysisResponse{
		StartDocumentAnalysisOutput: r.Request.Data.(*types.StartDocumentAnalysisOutput),
		response:                    &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartDocumentAnalysisResponse is the response type for the
// StartDocumentAnalysis API operation.
type StartDocumentAnalysisResponse struct {
	*types.StartDocumentAnalysisOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartDocumentAnalysis request.
func (r *StartDocumentAnalysisResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
