// Code generated by smithy-go-codegen DO NOT EDIT.

package neptunedata

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/neptunedata/document"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Executes an openCypher query. See Accessing the Neptune Graph with openCypher (https://docs.aws.amazon.com/neptune/latest/userguide/access-graph-opencypher.html)
// for more information. Neptune supports building graph applications using
// openCypher, which is currently one of the most popular query languages among
// developers working with graph databases. Developers, business analysts, and data
// scientists like openCypher's declarative, SQL-inspired syntax because it
// provides a familiar structure in which to querying property graphs. The
// openCypher language was originally developed by Neo4j, then open-sourced in 2015
// and contributed to the openCypher project (https://opencypher.org/) under an
// Apache 2 open-source license.
func (c *Client) ExecuteOpenCypherQuery(ctx context.Context, params *ExecuteOpenCypherQueryInput, optFns ...func(*Options)) (*ExecuteOpenCypherQueryOutput, error) {
	if params == nil {
		params = &ExecuteOpenCypherQueryInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ExecuteOpenCypherQuery", params, optFns, c.addOperationExecuteOpenCypherQueryMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ExecuteOpenCypherQueryOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ExecuteOpenCypherQueryInput struct {

	// The openCypher query string to be executed.
	//
	// This member is required.
	OpenCypherQuery *string

	// The openCypher query parameters for query execution. See Examples of openCypher
	// parameterized queries (https://docs.aws.amazon.com/neptune/latest/userguide/opencypher-parameterized-queries.html)
	// for more information.
	Parameters *string

	noSmithyDocumentSerde
}

type ExecuteOpenCypherQueryOutput struct {

	// The openCypherquery results.
	//
	// This member is required.
	Results document.Interface

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationExecuteOpenCypherQueryMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpExecuteOpenCypherQuery{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpExecuteOpenCypherQuery{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointV2Middleware(stack, options); err != nil {
		return err
	}
	if err = addOpExecuteOpenCypherQueryValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opExecuteOpenCypherQuery(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addendpointDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opExecuteOpenCypherQuery(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "neptune-db",
		OperationName: "ExecuteOpenCypherQuery",
	}
}
