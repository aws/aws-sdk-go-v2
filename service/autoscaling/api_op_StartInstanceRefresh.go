// Code generated by smithy-go-codegen DO NOT EDIT.

package autoscaling

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Starts a new instance refresh operation, which triggers a rolling replacement of
// all previously launched instances in the Auto Scaling group with a new group of
// instances. If successful, this call creates a new instance refresh request with
// a unique ID that you can use to track its progress. To query its status, call
// the DescribeInstanceRefreshes () API. To describe the instance refreshes that
// have already run, call the DescribeInstanceRefreshes () API. To cancel an
// instance refresh operation in progress, use the CancelInstanceRefresh () API.
// For more information, see Replacing Auto Scaling Instances Based on an Instance
// Refresh
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html).
func (c *Client) StartInstanceRefresh(ctx context.Context, params *StartInstanceRefreshInput, optFns ...func(*Options)) (*StartInstanceRefreshOutput, error) {
	stack := middleware.NewStack("StartInstanceRefresh", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpStartInstanceRefreshMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpStartInstanceRefreshValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opStartInstanceRefresh(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "StartInstanceRefresh",
			Err:           err,
		}
	}
	out := result.(*StartInstanceRefreshOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartInstanceRefreshInput struct {
	// Set of preferences associated with the instance refresh request. If not
	// provided, the default values are used. For MinHealthyPercentage, the default
	// value is 90. For InstanceWarmup, the default is to use the value specified for
	// the health check grace period for the Auto Scaling group. For more information,
	// see RefreshPreferences
	// (https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_RefreshPreferences.html)
	// in the Amazon EC2 Auto Scaling API Reference.
	Preferences *types.RefreshPreferences
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// The strategy to use for the instance refresh. The only valid value is Rolling. A
	// rolling update is an update that is applied to all instances in an Auto Scaling
	// group until all instances have been updated. A rolling update can fail due to
	// failed health checks or if instances are on standby or are protected from scale
	// in. If the rolling update process fails, any instances that were already
	// replaced are not rolled back to their previous configuration.
	Strategy types.RefreshStrategy
}

type StartInstanceRefreshOutput struct {
	// A unique ID for tracking the progress of the request.
	InstanceRefreshId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpStartInstanceRefreshMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpStartInstanceRefresh{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpStartInstanceRefresh{}, middleware.After)
}

func newServiceMetadataMiddleware_opStartInstanceRefresh(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "autoscaling",
		OperationName: "StartInstanceRefresh",
	}
}
