// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"time"
)

// Describes scaling activity, which is a long-running process that represents a
// change to your Auto Scaling group, such as changing its size or replacing an
// instance.
type Activity struct {
	// The start time of the activity.
	StartTime *time.Time
	// The end time of the activity.
	EndTime *time.Time
	// A friendly, more verbose description of the activity status.
	StatusMessage *string
	// The current status of the activity.
	StatusCode ScalingActivityStatusCode
	// The details about the activity.
	Details *string
	// A value between 0 and 100 that indicates the progress of the activity.
	Progress *int32
	// The reason the activity began.
	Cause *string
	// A friendly, more verbose description of the activity.
	Description *string
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// The ID of the activity.
	ActivityId *string
}

// Describes a policy adjustment type.
type AdjustmentType struct {
	// The policy adjustment type. The valid values are ChangeInCapacity,
	// ExactCapacity, and PercentChangeInCapacity.
	AdjustmentType *string
}

// Describes an alarm.
type Alarm struct {
	// The Amazon Resource Name (ARN) of the alarm.
	AlarmARN *string
	// The name of the alarm.
	AlarmName *string
}

// Describes an Auto Scaling group.
type AutoScalingGroup struct {
	// The tags for the group.
	Tags []*TagDescription
	// The metrics enabled for the group.
	EnabledMetrics []*EnabledMetric
	// One or more subnet IDs, if applicable, separated by commas.
	VPCZoneIdentifier *string
	// The mixed instances policy for the group.
	MixedInstancesPolicy *MixedInstancesPolicy
	// The service to use for the health checks. The valid values are EC2 and ELB. If
	// you configure an Auto Scaling group to use ELB health checks, it considers the
	// instance unhealthy if it fails either the EC2 status checks or the load balancer
	// health checks.
	HealthCheckType *string
	// The maximum amount of time, in seconds, that an instance can be in service.
	// Valid Range: Minimum value of 0.
	MaxInstanceLifetime *int32
	// The suspended processes associated with the group.
	SuspendedProcesses []*SuspendedProcess
	// One or more Availability Zones for the group.
	AvailabilityZones []*string
	// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling
	// group uses to call other AWS services on your behalf.
	ServiceLinkedRoleARN *string
	// Indicates whether newly launched instances are protected from termination by
	// Amazon EC2 Auto Scaling when scaling in.
	NewInstancesProtectedFromScaleIn *bool
	// The date and time the group was created.
	CreatedTime *time.Time
	// The maximum size of the group.
	MaxSize *int32
	// The launch template for the group.
	LaunchTemplate *LaunchTemplateSpecification
	// The name of the placement group into which to launch your instances, if any.
	PlacementGroup *string
	// The desired size of the group.
	DesiredCapacity *int32
	// The minimum size of the group.
	MinSize *int32
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// The termination policies for the group.
	TerminationPolicies []*string
	// The Amazon Resource Names (ARN) of the target groups for your load balancer.
	TargetGroupARNs []*string
	// The name of the associated launch configuration.
	LaunchConfigurationName *string
	// The Amazon Resource Name (ARN) of the Auto Scaling group.
	AutoScalingGroupARN *string
	// One or more load balancers associated with the group.
	LoadBalancerNames []*string
	// The current state of the group when the DeleteAutoScalingGroup () operation is
	// in progress.
	Status *string
	// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before
	// checking the health status of an EC2 instance that has come into service.
	HealthCheckGracePeriod *int32
	// The duration of the default cooldown period, in seconds.
	DefaultCooldown *int32
	// The EC2 instances associated with the group.
	Instances []*Instance
}

// Describes an EC2 instance associated with an Auto Scaling group.
type AutoScalingInstanceDetails struct {
	// Indicates whether the instance is protected from termination by Amazon EC2 Auto
	// Scaling when scaling in.
	ProtectedFromScaleIn *bool
	// The last reported health status of this instance. "Healthy" means that the
	// instance is healthy and should remain in service. "Unhealthy" means that the
	// instance is unhealthy and Amazon EC2 Auto Scaling should terminate and replace
	// it.
	HealthStatus *string
	// The ID of the instance.
	InstanceId *string
	// The lifecycle state for the instance.
	LifecycleState *string
	// The launch template for the instance.
	LaunchTemplate *LaunchTemplateSpecification
	// The name of the Auto Scaling group for the instance.
	AutoScalingGroupName *string
	// The Availability Zone for the instance.
	AvailabilityZone *string
	// The number of capacity units contributed by the instance based on its instance
	// type. Valid Range: Minimum value of 1. Maximum value of 999.
	WeightedCapacity *string
	// The instance type of the EC2 instance.
	InstanceType *string
	// The launch configuration used to launch the instance. This value is not
	// available if you attached the instance to the Auto Scaling group.
	LaunchConfigurationName *string
}

// Describes a block device mapping.
type BlockDeviceMapping struct {
	// The name of the virtual device (for example, ephemeral0). You can specify either
	// VirtualName or Ebs, but not both.
	VirtualName *string
	// Setting this value to true suppresses the specified device included in the block
	// device mapping of the AMI. If NoDevice is true for the root device, instances
	// might fail the EC2 health check. In that case, Amazon EC2 Auto Scaling launches
	// replacement instances. If you specify NoDevice, you cannot specify Ebs.
	NoDevice *bool
	// Parameters used to automatically set up EBS volumes when an instance is
	// launched. You can specify either VirtualName or Ebs, but not both.
	Ebs *Ebs
	// The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh). For
	// more information, see Device Naming on Linux Instances
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html) in the
	// Amazon EC2 User Guide for Linux Instances.
	DeviceName *string
}

// Represents a CloudWatch metric of your choosing for a target tracking scaling
// policy to use with Amazon EC2 Auto Scaling. To create your customized metric
// specification:
//
//     * Add values for each required parameter from CloudWatch.
// You can use an existing metric, or a new metric that you create. To use your own
// metric, you must first publish the metric to CloudWatch. For more information,
// see Publish Custom Metrics
// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html)
// in the Amazon CloudWatch User Guide.
//
//     * Choose a metric that changes
// proportionally with capacity. The value of the metric should increase or
// decrease in inverse proportion to the number of capacity units. That is, the
// value of the metric should decrease when capacity increases.
//
// For more
// information about CloudWatch, see Amazon CloudWatch Concepts
// (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html).
type CustomizedMetricSpecification struct {
	// The namespace of the metric.
	Namespace *string
	// The dimensions of the metric. Conditional: If you published your metric with
	// dimensions, you must specify the same dimensions in your scaling policy.
	Dimensions []*MetricDimension
	// The unit of the metric.
	Unit *string
	// The statistic of the metric.
	Statistic MetricStatistic
	// The name of the metric.
	MetricName *string
}

// Describes information used to set up an Amazon EBS volume specified in a block
// device mapping.
type Ebs struct {
	// Indicates whether the volume is deleted on instance termination. For Amazon EC2
	// Auto Scaling, the default value is true.
	DeleteOnTermination *bool
	// Specifies whether the volume should be encrypted. Encrypted EBS volumes can only
	// be attached to instances that support Amazon EBS encryption. For more
	// information, see Supported Instance Types
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
	// If your AMI uses encrypted volumes, you can also only launch it on supported
	// instance types. If you are creating a volume from a snapshot, you cannot specify
	// an encryption value. Volumes that are created from encrypted snapshots are
	// automatically encrypted, and volumes that are created from unencrypted snapshots
	// are automatically unencrypted. By default, encrypted snapshots use the AWS
	// managed CMK that is used for EBS encryption, but you can specify a custom CMK
	// when you create the snapshot. The ability to encrypt a snapshot during copying
	// also allows you to apply a new CMK to an already-encrypted snapshot. Volumes
	// restored from the resulting copy are only accessible using the new CMK. Enabling
	// encryption by default
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default)
	// results in all EBS volumes being encrypted with the AWS managed CMK or a
	// customer managed CMK, whether or not the snapshot was encrypted. For more
	// information, see Using Encryption with EBS-Backed AMIs
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html) in the
	// Amazon EC2 User Guide for Linux Instances and Required CMK Key Policy for Use
	// with Encrypted Volumes
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/key-policy-requirements-EBS-encryption.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	Encrypted *bool
	// The volume size, in Gibibytes (GiB). This can be a number from 1-1,024 for
	// standard, 4-16,384 for io1, 1-16,384 for gp2, and 500-16,384 for st1 and sc1. If
	// you specify a snapshot, the volume size must be equal to or larger than the
	// snapshot size. Default: If you create a volume from a snapshot and you don't
	// specify a volume size, the default is the snapshot size. You must specify either
	// a VolumeSize or a SnapshotId. If you specify both SnapshotId and VolumeSize, the
	// volume size must be equal or greater than the size of the snapshot.
	VolumeSize *int32
	// The volume type, which can be standard for Magnetic, io1 for Provisioned IOPS
	// SSD, gp2 for General Purpose SSD, st1 for Throughput Optimized HDD, or sc1 for
	// Cold HDD. For more information, see Amazon EBS Volume Types
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the
	// Amazon EC2 User Guide for Linux Instances. Valid Values: standard | io1 | gp2 |
	// st1 | sc1
	VolumeType *string
	// The snapshot ID of the volume to use. You must specify either a VolumeSize or a
	// SnapshotId.
	SnapshotId *string
	// The number of I/O operations per second (IOPS) to provision for the volume. The
	// maximum ratio of IOPS to volume size (in GiB) is 50:1. For more information, see
	// Amazon EBS Volume Types
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the
	// Amazon EC2 User Guide for Linux Instances. Required when the volume type is io1.
	// (Not used with standard, gp2, st1, or sc1 volumes.)
	Iops *int32
}

// Describes an enabled metric.
type EnabledMetric struct {
	// The granularity of the metric. The only valid value is 1Minute.
	Granularity *string
	// One of the following metrics:
	//
	//     * GroupMinSize
	//
	//     * GroupMaxSize
	//
	//     *
	// GroupDesiredCapacity
	//
	//     * GroupInServiceInstances
	//
	//     *
	// GroupPendingInstances
	//
	//     * GroupStandbyInstances
	//
	//     *
	// GroupTerminatingInstances
	//
	//     * GroupTotalInstances
	//
	//     *
	// GroupInServiceCapacity
	//
	//     * GroupPendingCapacity
	//
	//     * GroupStandbyCapacity
	//
	//
	// * GroupTerminatingCapacity
	//
	//     * GroupTotalCapacity
	Metric *string
}

// Describes a scheduled action that could not be created, updated, or deleted.
type FailedScheduledUpdateGroupActionRequest struct {
	// The error code.
	ErrorCode *string
	// The name of the scheduled action.
	ScheduledActionName *string
	// The error message accompanying the error code.
	ErrorMessage *string
}

// Describes a filter that is used to return a more specific list of results when
// describing tags. For more information, see Tagging Auto Scaling Groups and
// Instances
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html)
// in the Amazon EC2 Auto Scaling User Guide.
type Filter struct {
	// One or more filter values. Filter values are case-sensitive.
	Values []*string
	// The name of the filter. The valid values are: auto-scaling-group, key, value,
	// and propagate-at-launch.
	Name *string
}

// Describes an EC2 instance.
type Instance struct {
	// Indicates whether the instance is protected from termination by Amazon EC2 Auto
	// Scaling when scaling in.
	ProtectedFromScaleIn *bool
	// The last reported health status of the instance. "Healthy" means that the
	// instance is healthy and should remain in service. "Unhealthy" means that the
	// instance is unhealthy and that Amazon EC2 Auto Scaling should terminate and
	// replace it.
	HealthStatus *string
	// The ID of the instance.
	InstanceId *string
	// The launch template for the instance.
	LaunchTemplate *LaunchTemplateSpecification
	// A description of the current lifecycle state. The Quarantined state is not used.
	LifecycleState LifecycleState
	// The Availability Zone in which the instance is running.
	AvailabilityZone *string
	// The number of capacity units contributed by the instance based on its instance
	// type. Valid Range: Minimum value of 1. Maximum value of 999.
	WeightedCapacity *string
	// The instance type of the EC2 instance.
	InstanceType *string
	// The launch configuration associated with the instance.
	LaunchConfigurationName *string
}

// The metadata options for the instances. For more information, see Instance
// Metadata and User Data
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
// in the Amazon EC2 User Guide for Linux Instances.
type InstanceMetadataOptions struct {
	// The state of token usage for your instance metadata requests. If the parameter
	// is not specified in the request, the default state is optional. If the state is
	// optional, you can choose to retrieve instance metadata with or without a signed
	// token header on your request. If you retrieve the IAM role credentials without a
	// token, the version 1.0 role credentials are returned. If you retrieve the IAM
	// role credentials using a valid signed token, the version 2.0 role credentials
	// are returned. If the state is required, you must send a signed token header with
	// any instance metadata retrieval requests. In this state, retrieving the IAM role
	// credentials always returns the version 2.0 credentials; the version 1.0
	// credentials are not available.
	HttpTokens InstanceMetadataHttpTokensState
	// The desired HTTP PUT response hop limit for instance metadata requests. The
	// larger the number, the further instance metadata requests can travel. Default: 1
	// Possible values: Integers from 1 to 64
	HttpPutResponseHopLimit *int32
	// This parameter enables or disables the HTTP metadata endpoint on your instances.
	// If the parameter is not specified, the default state is enabled. If you specify
	// a value of disabled, you will not be able to access your instance metadata.
	HttpEndpoint InstanceMetadataEndpointState
}

// Describes whether detailed monitoring is enabled for the Auto Scaling instances.
type InstanceMonitoring struct {
	// If true, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
	Enabled *bool
}

// Describes an instance refresh for an Auto Scaling group.
type InstanceRefresh struct {
	// The date and time at which the instance refresh ended.
	EndTime *time.Time
	// The percentage of the instance refresh that is complete. For each instance
	// replacement, Amazon EC2 Auto Scaling tracks the instance's health status and
	// warm-up time. When the instance's health status changes to healthy and the
	// specified warm-up time passes, the instance is considered updated and added to
	// the percentage complete.
	PercentageComplete *int32
	// The number of instances remaining to update before the instance refresh is
	// complete.
	InstancesToUpdate *int32
	// The instance refresh ID.
	InstanceRefreshId *string
	// The date and time at which the instance refresh began.
	StartTime *time.Time
	// The current status for the instance refresh operation:
	//
	//     * Pending - The
	// request was created, but the operation has not started.
	//
	//     * InProgress - The
	// operation is in progress.
	//
	//     * Successful - The operation completed
	// successfully.
	//
	//     * Failed - The operation failed to complete. You can
	// troubleshoot using the status reason and the scaling activities.
	//
	//     *
	// Cancelling - An ongoing operation is being cancelled. Cancellation does not roll
	// back any replacements that have already been completed, but it prevents new
	// replacements from being started.
	//
	//     * Cancelled - The operation is cancelled.
	Status InstanceRefreshStatus
	// Provides more details about the current status of the instance refresh.
	StatusReason *string
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
}

// Describes an instances distribution for an Auto Scaling group with a
// MixedInstancesPolicy (). The instances distribution specifies the distribution
// of On-Demand Instances and Spot Instances, the maximum price to pay for Spot
// Instances, and how the Auto Scaling group allocates instance types to fulfill
// On-Demand and Spot capacity. When you update SpotAllocationStrategy,
// SpotInstancePools, or SpotMaxPrice, this update action does not deploy any
// changes across the running Amazon EC2 instances in the group. Your existing Spot
// Instances continue to run as long as the maximum price for those instances is
// higher than the current Spot price. When scale out occurs, Amazon EC2 Auto
// Scaling launches instances based on the new settings. When scale in occurs,
// Amazon EC2 Auto Scaling terminates instances according to the group's
// termination policies.
type InstancesDistribution struct {
	// Indicates how to allocate instances across Spot Instance pools. If the
	// allocation strategy is lowest-price, the Auto Scaling group launches instances
	// using the Spot pools with the lowest price, and evenly allocates your instances
	// across the number of Spot pools that you specify. If the allocation strategy is
	// capacity-optimized, the Auto Scaling group launches instances using Spot pools
	// that are optimally chosen based on the available Spot capacity. The default Spot
	// allocation strategy for calls that you make through the API, the AWS CLI, or the
	// AWS SDKs is lowest-price. The default Spot allocation strategy for the AWS
	// Management Console is capacity-optimized. Valid values: lowest-price |
	// capacity-optimized
	SpotAllocationStrategy *string
	// The maximum price per unit hour that you are willing to pay for a Spot Instance.
	// If you leave the value of this parameter blank (which is the default), the
	// maximum Spot price is set at the On-Demand price. To remove a value that you
	// previously set, include the parameter but leave the value blank.
	SpotMaxPrice *string
	// The minimum amount of the Auto Scaling group's capacity that must be fulfilled
	// by On-Demand Instances. This base portion is provisioned first as your group
	// scales. Default if not set is 0. If you leave it set to 0, On-Demand Instances
	// are launched as a percentage of the Auto Scaling group's desired capacity, per
	// the OnDemandPercentageAboveBaseCapacity setting. An update to this setting means
	// a gradual replacement of instances to maintain the specified number of On-Demand
	// Instances for your base capacity. When replacing instances, Amazon EC2 Auto
	// Scaling launches new instances before terminating the old ones.
	OnDemandBaseCapacity *int32
	// Controls the percentages of On-Demand Instances and Spot Instances for your
	// additional capacity beyond OnDemandBaseCapacity. Default if not set is 100. If
	// you leave it set to 100, the percentages are 100% for On-Demand Instances and 0%
	// for Spot Instances. An update to this setting means a gradual replacement of
	// instances to maintain the percentage of On-Demand Instances for your additional
	// capacity above the base capacity. When replacing instances, Amazon EC2 Auto
	// Scaling launches new instances before terminating the old ones. Valid Range:
	// Minimum value of 0. Maximum value of 100.
	OnDemandPercentageAboveBaseCapacity *int32
	// The number of Spot Instance pools across which to allocate your Spot Instances.
	// The Spot pools are determined from the different instance types in the Overrides
	// array of LaunchTemplate (). Default if not set is 2. Used only when the Spot
	// allocation strategy is lowest-price. Valid Range: Minimum value of 1. Maximum
	// value of 20.
	SpotInstancePools *int32
	// Indicates how to allocate instance types to fulfill On-Demand capacity. The only
	// valid value is prioritized, which is also the default value. This strategy uses
	// the order of instance type overrides for the LaunchTemplate () to define the
	// launch priority of each instance type. The first instance type in the array is
	// prioritized higher than the last. If all your On-Demand capacity cannot be
	// fulfilled using your highest priority instance, then the Auto Scaling groups
	// launches the remaining capacity using the second priority instance type, and so
	// on.
	OnDemandAllocationStrategy *string
}

// Describes a launch configuration.
type LaunchConfiguration struct {
	// The instance type for the instances. For information about available instance
	// types, see Available Instance Types
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes)
	// in the Amazon EC2 User Guide for Linux Instances.
	InstanceType *string
	// The IDs of one or more security groups for the VPC specified in
	// ClassicLinkVPCId. For more information, see ClassicLink
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in
	// the Amazon EC2 User Guide for Linux Instances and Linking EC2-Classic Instances
	// to a VPC
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink)
	// in the Amazon EC2 Auto Scaling User Guide.
	ClassicLinkVPCSecurityGroups []*string
	// A list that contains the security groups to assign to the instances in the Auto
	// Scaling group. For more information, see Security Groups for Your VPC
	// (https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)
	// in the Amazon Virtual Private Cloud User Guide.
	SecurityGroups []*string
	// The Amazon Resource Name (ARN) of the launch configuration.
	LaunchConfigurationARN *string
	// For Auto Scaling groups that are running in a VPC, specifies whether to assign a
	// public IP address to the group's instances. For more information, see Launching
	// Auto Scaling Instances in a VPC
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html) in the
	// Amazon EC2 Auto Scaling User Guide.
	AssociatePublicIpAddress *bool
	// Controls whether instances in this group are launched with detailed (true) or
	// basic (false) monitoring. For more information, see Configure Monitoring for
	// Auto Scaling Instances
	// (https://docs.aws.amazon.com/autoscaling/latest/userguide/as-instance-monitoring.html#enable-as-instance-metrics)
	// in the Amazon EC2 Auto Scaling User Guide.
	InstanceMonitoring *InstanceMonitoring
	// The tenancy of the instance, either default or dedicated. An instance with
	// dedicated tenancy runs on isolated, single-tenant hardware and can only be
	// launched into a VPC. For more information, see Instance Placement Tenancy
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-vpc-tenancy)
	// in the Amazon EC2 Auto Scaling User Guide.
	PlacementTenancy *string
	// The metadata options for the instances. For more information, see Instance
	// Metadata and User Data
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
	// in the Amazon EC2 User Guide for Linux Instances.
	MetadataOptions *InstanceMetadataOptions
	// The name of the launch configuration.
	LaunchConfigurationName *string
	// The maximum hourly price to be paid for any Spot Instance launched to fulfill
	// the request. Spot Instances are launched when the price you specify exceeds the
	// current Spot price. For more information, see Launching Spot Instances in Your
	// Auto Scaling Group
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	SpotPrice *string
	// The ID of the RAM disk associated with the AMI.
	RamdiskId *string
	// The name of the key pair. For more information, see Amazon EC2 Key Pairs
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the
	// Amazon EC2 User Guide for Linux Instances.
	KeyName *string
	// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances.
	// For more information, see Finding an AMI
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html) in the
	// Amazon EC2 User Guide for Linux Instances.
	ImageId *string
	// The name or the Amazon Resource Name (ARN) of the instance profile associated
	// with the IAM role for the instance. The instance profile contains the IAM role.
	// For more information, see IAM Role for Applications That Run on Amazon EC2
	// Instances
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html) in the
	// Amazon EC2 Auto Scaling User Guide.
	IamInstanceProfile *string
	// The Base64-encoded user data to make available to the launched EC2 instances.
	// For more information, see Instance Metadata and User Data
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
	// in the Amazon EC2 User Guide for Linux Instances.
	UserData *string
	// The ID of the kernel associated with the AMI.
	KernelId *string
	// Specifies whether the launch configuration is optimized for EBS I/O (true) or
	// not (false). For more information, see Amazon EBS-Optimized Instances
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) in the
	// Amazon EC2 User Guide for Linux Instances.
	EbsOptimized *bool
	// A block device mapping, which specifies the block devices for the instance. For
	// more information, see Block Device Mapping
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
	// in the Amazon EC2 User Guide for Linux Instances.
	BlockDeviceMappings []*BlockDeviceMapping
	// The creation date and time for the launch configuration.
	CreatedTime *time.Time
	// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For
	// more information, see ClassicLink
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html) in
	// the Amazon EC2 User Guide for Linux Instances and Linking EC2-Classic Instances
	// to a VPC
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink)
	// in the Amazon EC2 Auto Scaling User Guide.
	ClassicLinkVPCId *string
}

// Describes a launch template and overrides. The overrides are used to override
// the instance type specified by the launch template with multiple instance types
// that can be used to launch On-Demand Instances and Spot Instances. When you
// update the launch template or overrides, existing Amazon EC2 instances continue
// to run. When scale out occurs, Amazon EC2 Auto Scaling launches instances to
// match the new settings. When scale in occurs, Amazon EC2 Auto Scaling terminates
// instances according to the group's termination policies.
type LaunchTemplate struct {
	// Any parameters that you specify override the same parameters in the launch
	// template. Currently, the only supported override is instance type. You can
	// specify between 1 and 20 instance types. If not provided, Amazon EC2 Auto
	// Scaling will use the instance type specified in the launch template to launch
	// instances.
	Overrides []*LaunchTemplateOverrides
	// The launch template to use. You must specify either the launch template ID or
	// launch template name in the request.
	LaunchTemplateSpecification *LaunchTemplateSpecification
}

// Describes an override for a launch template. Currently, the only supported
// override is instance type. The maximum number of instance type overrides that
// can be associated with an Auto Scaling group is 20.
type LaunchTemplateOverrides struct {
	// The number of capacity units, which gives the instance type a proportional
	// weight to other instance types. For example, larger instance types are generally
	// weighted more than smaller instance types. These are the same units that you
	// chose to set the desired capacity in terms of instances, or a performance
	// attribute such as vCPUs, memory, or I/O. For more information, see Instance
	// Weighting for Amazon EC2 Auto Scaling
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html)
	// in the Amazon EC2 Auto Scaling User Guide. Valid Range: Minimum value of 1.
	// Maximum value of 999.
	WeightedCapacity *string
	// The instance type. You must use an instance type that is supported in your
	// requested Region and Availability Zones. For information about available
	// instance types, see Available Instance Types
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes)
	// in the Amazon Elastic Compute Cloud User Guide.
	InstanceType *string
}

// Describes the Amazon EC2 launch template and the launch template version that
// can be used by an Auto Scaling group to configure Amazon EC2 instances. The
// launch template that is specified must be configured for use with an Auto
// Scaling group. For more information, see Creating a Launch Template for an Auto
// Scaling Group
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html)
// in the Amazon EC2 Auto Scaling User Guide.
type LaunchTemplateSpecification struct {
	// The ID of the launch template. To get the template ID, use the Amazon EC2
	// DescribeLaunchTemplates
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html)
	// API operation. New launch templates can be created using the Amazon EC2
	// CreateLaunchTemplate
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html)
	// API. You must specify either a template ID or a template name.
	LaunchTemplateId *string
	// The version number, $Latest, or $Default. To get the version number, use the
	// Amazon EC2 DescribeLaunchTemplateVersions
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplateVersions.html)
	// API operation. New launch template versions can be created using the Amazon EC2
	// CreateLaunchTemplateVersion
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplateVersion.html)
	// API. If the value is $Latest, Amazon EC2 Auto Scaling selects the latest version
	// of the launch template when launching instances. If the value is $Default,
	// Amazon EC2 Auto Scaling selects the default version of the launch template when
	// launching instances. The default value is $Default.
	Version *string
	// The name of the launch template. To get the template name, use the Amazon EC2
	// DescribeLaunchTemplates
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html)
	// API operation. New launch templates can be created using the Amazon EC2
	// CreateLaunchTemplate
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html)
	// API. You must specify either a template ID or a template name.
	LaunchTemplateName *string
}

// Describes a lifecycle hook, which tells Amazon EC2 Auto Scaling that you want to
// perform an action whenever it launches instances or terminates instances.
type LifecycleHook struct {
	// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when
	// an instance is in the transition state for the lifecycle hook. The notification
	// target can be either an SQS queue or an SNS topic.
	NotificationTargetARN *string
	// The ARN of the IAM role that allows the Auto Scaling group to publish to the
	// specified notification target.
	RoleARN *string
	// The name of the lifecycle hook.
	LifecycleHookName *string
	// Defines the action the Auto Scaling group should take when the lifecycle hook
	// timeout elapses or if an unexpected failure occurs. The possible values are
	// CONTINUE and ABANDON.
	DefaultResult *string
	// Additional information that is included any time Amazon EC2 Auto Scaling sends a
	// message to the notification target.
	NotificationMetadata *string
	// The maximum time, in seconds, that can elapse before the lifecycle hook times
	// out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the
	// action that you specified in the DefaultResult parameter.
	HeartbeatTimeout *int32
	// The maximum time, in seconds, that an instance can remain in a Pending:Wait or
	// Terminating:Wait state. The maximum is 172800 seconds (48 hours) or 100 times
	// HeartbeatTimeout, whichever is smaller.
	GlobalTimeout *int32
	// The state of the EC2 instance to which to attach the lifecycle hook. The
	// following are possible values:
	//
	//     * autoscaling:EC2_INSTANCE_LAUNCHING
	//
	//     *
	// autoscaling:EC2_INSTANCE_TERMINATING
	LifecycleTransition *string
	// The name of the Auto Scaling group for the lifecycle hook.
	AutoScalingGroupName *string
}

// Describes information used to specify a lifecycle hook for an Auto Scaling
// group. A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an
// instance when the instance launches (before it is put into service) or as the
// instance terminates (before it is fully terminated). This step is a part of the
// procedure for creating a lifecycle hook for an Auto Scaling group:
//
//     *
// (Optional) Create a Lambda function and a rule that allows CloudWatch Events to
// invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates
// instances.
//
//     * (Optional) Create a notification target and an IAM role. The
// target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows
// Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.
//
//     *
// Create the lifecycle hook. Specify whether the hook is used when the instances
// launch or terminate.
//
//     * If you need more time, record the lifecycle action
// heartbeat to keep the instance in a pending state.
//
//     * If you finish before
// the timeout period ends, complete the lifecycle action.
//
// For more information,
// see Amazon EC2 Auto Scaling Lifecycle Hooks
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html) in
// the Amazon EC2 Auto Scaling User Guide.
type LifecycleHookSpecification struct {
	// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when
	// an instance is in the transition state for the lifecycle hook. The notification
	// target can be either an SQS queue or an SNS topic.
	NotificationTargetARN *string
	// The state of the EC2 instance to which you want to attach the lifecycle hook.
	// The valid values are:
	//
	//     * autoscaling:EC2_INSTANCE_LAUNCHING
	//
	//     *
	// autoscaling:EC2_INSTANCE_TERMINATING
	LifecycleTransition *string
	// Additional information that you want to include any time Amazon EC2 Auto Scaling
	// sends a message to the notification target.
	NotificationMetadata *string
	// The ARN of the IAM role that allows the Auto Scaling group to publish to the
	// specified notification target, for example, an Amazon SNS topic or an Amazon SQS
	// queue.
	RoleARN *string
	// Defines the action the Auto Scaling group should take when the lifecycle hook
	// timeout elapses or if an unexpected failure occurs. The valid values are
	// CONTINUE and ABANDON. The default value is ABANDON.
	DefaultResult *string
	// The name of the lifecycle hook.
	LifecycleHookName *string
	// The maximum time, in seconds, that can elapse before the lifecycle hook times
	// out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the
	// action that you specified in the DefaultResult parameter. You can prevent the
	// lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat ().
	HeartbeatTimeout *int32
}

// Describes the state of a Classic Load Balancer. If you specify a load balancer
// when creating the Auto Scaling group, the state of the load balancer is
// InService. If you attach a load balancer to an existing Auto Scaling group, the
// initial state is Adding. The state transitions to Added after all instances in
// the group are registered with the load balancer. If Elastic Load Balancing
// health checks are enabled for the load balancer, the state transitions to
// InService after at least one instance in the group passes the health check. If
// EC2 health checks are enabled instead, the load balancer remains in the Added
// state.
type LoadBalancerState struct {
	// One of the following load balancer states:
	//
	//     * Adding - The instances in the
	// group are being registered with the load balancer.
	//
	//     * Added - All instances
	// in the group are registered with the load balancer.
	//
	//     * InService - At least
	// one instance in the group passed an ELB health check.
	//
	//     * Removing - The
	// instances in the group are being deregistered from the load balancer. If
	// connection draining is enabled, Elastic Load Balancing waits for in-flight
	// requests to complete before deregistering the instances.
	//
	//     * Removed - All
	// instances in the group are deregistered from the load balancer.
	State *string
	// The name of the load balancer.
	LoadBalancerName *string
}

// Describes the state of a target group. If you attach a target group to an
// existing Auto Scaling group, the initial state is Adding. The state transitions
// to Added after all Auto Scaling instances are registered with the target group.
// If Elastic Load Balancing health checks are enabled, the state transitions to
// InService after at least one Auto Scaling instance passes the health check. If
// EC2 health checks are enabled instead, the target group remains in the Added
// state.
type LoadBalancerTargetGroupState struct {
	// The state of the target group.
	//
	//     * Adding - The Auto Scaling instances are
	// being registered with the target group.
	//
	//     * Added - All Auto Scaling
	// instances are registered with the target group.
	//
	//     * InService - At least one
	// Auto Scaling instance passed an ELB health check.
	//
	//     * Removing - The Auto
	// Scaling instances are being deregistered from the target group. If connection
	// draining is enabled, Elastic Load Balancing waits for in-flight requests to
	// complete before deregistering the instances.
	//
	//     * Removed - All Auto Scaling
	// instances are deregistered from the target group.
	State *string
	// The Amazon Resource Name (ARN) of the target group.
	LoadBalancerTargetGroupARN *string
}

// Describes a metric.
type MetricCollectionType struct {
	// One of the following metrics:
	//
	//     * GroupMinSize
	//
	//     * GroupMaxSize
	//
	//     *
	// GroupDesiredCapacity
	//
	//     * GroupInServiceInstances
	//
	//     *
	// GroupPendingInstances
	//
	//     * GroupStandbyInstances
	//
	//     *
	// GroupTerminatingInstances
	//
	//     * GroupTotalInstances
	//
	//     *
	// GroupInServiceCapacity
	//
	//     * GroupPendingCapacity
	//
	//     * GroupStandbyCapacity
	//
	//
	// * GroupTerminatingCapacity
	//
	//     * GroupTotalCapacity
	Metric *string
}

// Describes the dimension of a metric.
type MetricDimension struct {
	// The name of the dimension.
	Name *string
	// The value of the dimension.
	Value *string
}

// Describes a granularity of a metric.
type MetricGranularityType struct {
	// The granularity. The only valid value is 1Minute.
	Granularity *string
}

// Describes a mixed instances policy for an Auto Scaling group. With mixed
// instances, your Auto Scaling group can provision a combination of On-Demand
// Instances and Spot Instances across multiple instance types. For more
// information, see Auto Scaling Groups with Multiple Instance Types and Purchase
// Options
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html)
// in the Amazon EC2 Auto Scaling User Guide. You can create a mixed instances
// policy for a new Auto Scaling group, or you can create it for an existing group
// by updating the group to specify MixedInstancesPolicy as the top-level parameter
// instead of a launch configuration or launch template. For more information, see
// CreateAutoScalingGroup () and UpdateAutoScalingGroup ().
type MixedInstancesPolicy struct {
	// The launch template and instance types (overrides). Required when creating a
	// mixed instances policy.
	LaunchTemplate *LaunchTemplate
	// The instances distribution to use. If you leave this parameter unspecified, the
	// value for each parameter in InstancesDistribution uses a default value.
	InstancesDistribution *InstancesDistribution
}

// Describes a notification.
type NotificationConfiguration struct {
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// One of the following event notification types:
	//
	//     *
	// autoscaling:EC2_INSTANCE_LAUNCH
	//
	//     * autoscaling:EC2_INSTANCE_LAUNCH_ERROR
	//
	//
	// * autoscaling:EC2_INSTANCE_TERMINATE
	//
	//     *
	// autoscaling:EC2_INSTANCE_TERMINATE_ERROR
	//
	//     * autoscaling:TEST_NOTIFICATION
	NotificationType *string
	// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon
	// SNS) topic.
	TopicARN *string
}

// Represents a predefined metric for a target tracking scaling policy to use with
// Amazon EC2 Auto Scaling.
type PredefinedMetricSpecification struct {
	// The metric type. The following predefined metrics are available:
	//
	//     *
	// ASGAverageCPUUtilization - Average CPU utilization of the Auto Scaling group.
	//
	//
	// * ASGAverageNetworkIn - Average number of bytes received on all network
	// interfaces by the Auto Scaling group.
	//
	//     * ASGAverageNetworkOut - Average
	// number of bytes sent out on all network interfaces by the Auto Scaling group.
	//
	//
	// * ALBRequestCountPerTarget - Number of requests completed per target in an
	// Application Load Balancer target group.
	PredefinedMetricType MetricType
	// Identifies the resource associated with the metric type. You can't specify a
	// resource label unless the metric type is ALBRequestCountPerTarget and there is a
	// target group attached to the Auto Scaling group. Elastic Load Balancing sends
	// data about your load balancers to Amazon CloudWatch. CloudWatch collects the
	// data and specifies the format to use to access the data. The format is
	// app/load-balancer-name/load-balancer-id/targetgroup/target-group-name/target-group-id
	// , where
	//
	//     * app/load-balancer-name/load-balancer-id  is the final portion of
	// the load balancer ARN, and
	//
	//     * targetgroup/target-group-name/target-group-id
	// is the final portion of the target group ARN.
	//
	// To find the ARN for an
	// Application Load Balancer, use the DescribeLoadBalancers
	// (https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html)
	// API operation. To find the ARN for the target group, use the
	// DescribeTargetGroups
	// (https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html)
	// API operation.
	ResourceLabel *string
}

// Describes a process type. For more information, see Scaling Processes
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types)
// in the Amazon EC2 Auto Scaling User Guide.
type ProcessType struct {
	// One of the following processes:
	//
	//     * Launch
	//
	//     * Terminate
	//
	//     *
	// AddToLoadBalancer
	//
	//     * AlarmNotification
	//
	//     * AZRebalance
	//
	//     *
	// HealthCheck
	//
	//     * InstanceRefresh
	//
	//     * ReplaceUnhealthy
	//
	//     *
	// ScheduledActions
	ProcessName *string
}

// Describes information used to start an instance refresh.
type RefreshPreferences struct {
	// The amount of capacity in the Auto Scaling group that must remain healthy during
	// an instance refresh to allow the operation to continue, as a percentage of the
	// desired capacity of the Auto Scaling group (rounded up to the nearest integer).
	// The default is 90.
	MinHealthyPercentage *int32
	// The number of seconds until a newly launched instance is configured and ready to
	// use. During this time, Amazon EC2 Auto Scaling does not immediately move on to
	// the next replacement. The default is to use the value for the health check grace
	// period defined for the group.
	InstanceWarmup *int32
}

// Describes a scaling policy.
type ScalingPolicy struct {
	// The CloudWatch alarms related to the policy.
	Alarms []*Alarm
	// One of the following policy types:
	//
	//     * TargetTrackingScaling
	//
	//     *
	// StepScaling
	//
	//     * SimpleScaling (default)
	//
	// For more information, see Target
	// Tracking Scaling Policies
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html)
	// and Step and Simple Scaling Policies
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	PolicyType *string
	// A set of adjustments that enable you to scale based on the size of the alarm
	// breach.
	StepAdjustments []*StepAdjustment
	// The aggregation type for the CloudWatch metrics. The valid values are Minimum,
	// Maximum, and Average.
	MetricAggregationType *string
	// The duration of the policy's cooldown period, in seconds.
	Cooldown *int32
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// A target tracking scaling policy.
	TargetTrackingConfiguration *TargetTrackingConfiguration
	// The estimated time, in seconds, until a newly launched instance can contribute
	// to the CloudWatch metrics.
	EstimatedInstanceWarmup *int32
	// Specifies how the scaling adjustment is interpreted (for example, an absolute
	// number or a percentage). The valid values are ChangeInCapacity, ExactCapacity,
	// and PercentChangeInCapacity.
	AdjustmentType *string
	// The Amazon Resource Name (ARN) of the policy.
	PolicyARN *string
	// The name of the scaling policy.
	PolicyName *string
	// The amount by which to scale, based on the specified adjustment type. A positive
	// value adds to the current capacity while a negative number removes from the
	// current capacity.
	ScalingAdjustment *int32
	// The minimum value to scale by when the adjustment type is
	// PercentChangeInCapacity.
	MinAdjustmentMagnitude *int32
	// Indicates whether the policy is enabled (true) or disabled (false).
	Enabled *bool
	// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
	MinAdjustmentStep *int32
}

// Describes a scheduled scaling action.
type ScheduledUpdateGroupAction struct {
	// The maximum size of the Auto Scaling group.
	MaxSize *int32
	// The recurring schedule for the action, in Unix cron syntax format. When
	// StartTime and EndTime are specified with Recurrence, they form the boundaries of
	// when the recurring action starts and stops.
	Recurrence *string
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// The name of the scheduled action.
	ScheduledActionName *string
	// The Amazon Resource Name (ARN) of the scheduled action.
	ScheduledActionARN *string
	// This parameter is no longer used.
	Time *time.Time
	// The desired capacity is the initial capacity of the Auto Scaling group after the
	// scheduled action runs and the capacity it attempts to maintain.
	DesiredCapacity *int32
	// The minimum size of the Auto Scaling group.
	MinSize *int32
	// The date and time in UTC for this action to start. For example,
	// "2019-06-01T00:00:00Z".
	StartTime *time.Time
	// The date and time in UTC for the recurring schedule to end. For example,
	// "2019-06-01T00:00:00Z".
	EndTime *time.Time
}

// Describes information used for one or more scheduled scaling action updates in a
// BatchPutScheduledUpdateGroupAction () operation. When updating a scheduled
// scaling action, all optional parameters are left unchanged if not specified.
type ScheduledUpdateGroupActionRequest struct {
	// The recurring schedule for the action, in Unix cron syntax format. This format
	// consists of five fields separated by white spaces: [Minute] [Hour]
	// [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for
	// example, "30 0 1 1,6,12 *"). For more information about this format, see Crontab
	// (http://crontab.org). When StartTime and EndTime are specified with Recurrence,
	// they form the boundaries of when the recurring action starts and stops.
	Recurrence *string
	// The minimum size of the Auto Scaling group.
	MinSize *int32
	// The name of the scaling action.
	ScheduledActionName *string
	// The maximum size of the Auto Scaling group.
	MaxSize *int32
	// The date and time for the recurring schedule to end. Amazon EC2 Auto Scaling
	// does not perform the action after this time.
	EndTime *time.Time
	// The date and time for the action to start, in YYYY-MM-DDThh:mm:ssZ format in
	// UTC/GMT only and in quotes (for example, "2019-06-01T00:00:00Z"). If you specify
	// Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this
	// time, and then performs the action based on the specified recurrence. If you try
	// to schedule the action in the past, Amazon EC2 Auto Scaling returns an error
	// message.
	StartTime *time.Time
	// The desired capacity is the initial capacity of the Auto Scaling group after the
	// scheduled action runs and the capacity it attempts to maintain.
	DesiredCapacity *int32
}

// Describes information used to create a step adjustment for a step scaling
// policy. For the following examples, suppose that you have an alarm with a breach
// threshold of 50:
//
//     * To trigger the adjustment when the metric is greater
// than or equal to 50 and less than 60, specify a lower bound of 0 and an upper
// bound of 10.
//
//     * To trigger the adjustment when the metric is greater than 40
// and less than or equal to 50, specify a lower bound of -10 and an upper bound of
// 0.
//
// There are a few rules for the step adjustments for your step policy:
//
//     *
// The ranges of your step adjustments can't overlap or have a gap.
//
//     * At most,
// one step adjustment can have a null lower bound. If one step adjustment has a
// negative lower bound, then there must be a step adjustment with a null lower
// bound.
//
//     * At most, one step adjustment can have a null upper bound. If one
// step adjustment has a positive upper bound, then there must be a step adjustment
// with a null upper bound.
//
//     * The upper and lower bound can't be null in the
// same step adjustment.
//
// For more information, see Step Adjustments
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps)
// in the Amazon EC2 Auto Scaling User Guide.
type StepAdjustment struct {
	// The lower bound for the difference between the alarm threshold and the
	// CloudWatch metric. If the metric value is above the breach threshold, the lower
	// bound is inclusive (the metric must be greater than or equal to the threshold
	// plus the lower bound). Otherwise, it is exclusive (the metric must be greater
	// than the threshold plus the lower bound). A null value indicates negative
	// infinity.
	MetricIntervalLowerBound *float64
	// The upper bound for the difference between the alarm threshold and the
	// CloudWatch metric. If the metric value is above the breach threshold, the upper
	// bound is exclusive (the metric must be less than the threshold plus the upper
	// bound). Otherwise, it is inclusive (the metric must be less than or equal to the
	// threshold plus the upper bound). A null value indicates positive infinity. The
	// upper bound must be greater than the lower bound.
	MetricIntervalUpperBound *float64
	// The amount by which to scale, based on the specified adjustment type. A positive
	// value adds to the current capacity while a negative number removes from the
	// current capacity.
	ScalingAdjustment *int32
}

// Describes an automatic scaling process that has been suspended. For more
// information, see Scaling Processes
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types)
// in the Amazon EC2 Auto Scaling User Guide.
type SuspendedProcess struct {
	// The reason that the process was suspended.
	SuspensionReason *string
	// The name of the suspended process.
	ProcessName *string
}

// Describes a tag for an Auto Scaling group.
type Tag struct {
	// The tag value.
	Value *string
	// The type of resource. The only supported value is auto-scaling-group.
	ResourceType *string
	// Determines whether the tag is added to new instances as they are launched in the
	// group.
	PropagateAtLaunch *bool
	// The tag key.
	Key *string
	// The name of the group.
	ResourceId *string
}

// Describes a tag for an Auto Scaling group.
type TagDescription struct {
	// Determines whether the tag is added to new instances as they are launched in the
	// group.
	PropagateAtLaunch *bool
	// The tag key.
	Key *string
	// The name of the group.
	ResourceId *string
	// The tag value.
	Value *string
	// The type of resource. The only supported value is auto-scaling-group.
	ResourceType *string
}

// Represents a target tracking scaling policy configuration to use with Amazon EC2
// Auto Scaling.
type TargetTrackingConfiguration struct {
	// Indicates whether scaling in by the target tracking scaling policy is disabled.
	// If scaling in is disabled, the target tracking scaling policy doesn't remove
	// instances from the Auto Scaling group. Otherwise, the target tracking scaling
	// policy can remove instances from the Auto Scaling group. The default is false.
	DisableScaleIn *bool
	// A predefined metric. You must specify either a predefined metric or a customized
	// metric.
	PredefinedMetricSpecification *PredefinedMetricSpecification
	// A customized metric. You must specify either a predefined metric or a customized
	// metric.
	CustomizedMetricSpecification *CustomizedMetricSpecification
	// The target value for the metric.
	TargetValue *float64
}
