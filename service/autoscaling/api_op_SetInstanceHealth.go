// Code generated by smithy-go-codegen DO NOT EDIT.

package autoscaling

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Sets the health status of the specified instance. For more information, see
// Health Checks for Auto Scaling Instances
// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html) in the
// Amazon EC2 Auto Scaling User Guide.
func (c *Client) SetInstanceHealth(ctx context.Context, params *SetInstanceHealthInput, optFns ...func(*Options)) (*SetInstanceHealthOutput, error) {
	stack := middleware.NewStack("SetInstanceHealth", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpSetInstanceHealthMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpSetInstanceHealthValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opSetInstanceHealth(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "SetInstanceHealth",
			Err:           err,
		}
	}
	out := result.(*SetInstanceHealthOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SetInstanceHealthInput struct {
	// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod
	// specified for the group, by default, this call respects the grace period. Set
	// this to False, to have the call not respect the grace period associated with the
	// group.  <p>For more information about the health check grace period, see <a
	// href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html">CreateAutoScalingGroup</a>
	// in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
	ShouldRespectGracePeriod *bool
	// The ID of the instance.
	InstanceId *string
	// The health status of the instance. Set to Healthy to have the instance remain in
	// service. Set to Unhealthy to have the instance be out of service. Amazon EC2
	// Auto Scaling terminates and replaces the unhealthy instance.
	HealthStatus *string
}

type SetInstanceHealthOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpSetInstanceHealthMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpSetInstanceHealth{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpSetInstanceHealth{}, middleware.After)
}

func newServiceMetadataMiddleware_opSetInstanceHealth(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "autoscaling",
		OperationName: "SetInstanceHealth",
	}
}
