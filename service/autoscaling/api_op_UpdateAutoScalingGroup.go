// Code generated by smithy-go-codegen DO NOT EDIT.

package autoscaling

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates the configuration for the specified Auto Scaling group. To update an
// Auto Scaling group, specify the name of the group and the parameter that you
// want to change. Any parameters that you don't specify are not changed by this
// update request. The new settings take effect on any scaling activities after
// this call returns. If you associate a new launch configuration or template with
// an Auto Scaling group, all new instances will get the updated configuration.
// Existing instances continue to run with the configuration that they were
// originally launched with. When you update a group to specify a mixed instances
// policy instead of a launch configuration or template, existing instances may be
// replaced to match the new purchasing options that you specified in the policy.
// For example, if the group currently has 100% On-Demand capacity and the policy
// specifies 50% Spot capacity, this means that half of your instances will be
// gradually terminated and relaunched as Spot Instances. When replacing instances,
// Amazon EC2 Auto Scaling launches new instances before terminating the old ones,
// so that updating your group does not compromise the performance or availability
// of your application. Note the following about changing DesiredCapacity, MaxSize,
// or MinSize:
//
//     * If a scale-in activity occurs as a result of a new
// DesiredCapacity value that is lower than the current size of the group, the Auto
// Scaling group uses its termination policy to determine which instances to
// terminate.
//
//     * If you specify a new value for MinSize without specifying a
// value for DesiredCapacity, and the new MinSize is larger than the current size
// of the group, this sets the group's DesiredCapacity to the new MinSize value.
//
//
// * If you specify a new value for MaxSize without specifying a value for
// DesiredCapacity, and the new MaxSize is smaller than the current size of the
// group, this sets the group's DesiredCapacity to the new MaxSize value.
//
// To see
// which parameters have been set, call the DescribeAutoScalingGroups () API. To
// view the scaling policies for an Auto Scaling group, call the DescribePolicies
// () API. If the group has scaling policies, you can update them by calling the
// PutScalingPolicy () API.
func (c *Client) UpdateAutoScalingGroup(ctx context.Context, params *UpdateAutoScalingGroupInput, optFns ...func(*Options)) (*UpdateAutoScalingGroupOutput, error) {
	stack := middleware.NewStack("UpdateAutoScalingGroup", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpUpdateAutoScalingGroupMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateAutoScalingGroupValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateAutoScalingGroup(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateAutoScalingGroup",
			Err:           err,
		}
	}
	out := result.(*UpdateAutoScalingGroupOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateAutoScalingGroupInput struct {
	// The desired capacity is the initial capacity of the Auto Scaling group after
	// this operation completes and the capacity it attempts to maintain. This number
	// must be greater than or equal to the minimum size of the group and less than or
	// equal to the maximum size of the group.
	DesiredCapacity *int32
	// The name of the placement group into which to launch your instances, if any. A
	// placement group is a logical grouping of instances within a single Availability
	// Zone. You cannot specify multiple Availability Zones and a placement group. For
	// more information, see Placement Groups
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in
	// the Amazon EC2 User Guide for Linux Instances.
	PlacementGroup *string
	// Indicates whether newly launched instances are protected from termination by
	// Amazon EC2 Auto Scaling when scaling in. For more information about preventing
	// instances from terminating on scale in, see Instance Protection
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection)
	// in the Amazon EC2 Auto Scaling User Guide.
	NewInstancesProtectedFromScaleIn *bool
	// The service to use for the health checks. The valid values are EC2 and ELB. If
	// you configure an Auto Scaling group to use ELB health checks, it considers the
	// instance unhealthy if it fails either the EC2 status checks or the load balancer
	// health checks.
	HealthCheckType *string
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling
	// group uses to call other AWS services on your behalf. For more information, see
	// Service-Linked Roles
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ServiceLinkedRoleARN *string
	// A standalone termination policy or a list of termination policies used to select
	// the instance to terminate. The policies are executed in the order that they are
	// listed. For more information, see Controlling Which Instances Auto Scaling
	// Terminates During Scale In
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	TerminationPolicies []*string
	// The minimum size of the Auto Scaling group.
	MinSize *int32
	// One or more Availability Zones for the group.
	AvailabilityZones []*string
	// The name of the launch configuration. If you specify LaunchConfigurationName in
	// your update request, you can't specify LaunchTemplate or MixedInstancesPolicy.
	LaunchConfigurationName *string
	// An embedded object that specifies a mixed instances policy. In your call to
	// UpdateAutoScalingGroup, you can make changes to the policy that is specified.
	// All optional parameters are left unchanged if not specified.  <p>For more
	// information, see <a
	// href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_MixedInstancesPolicy.html">MixedInstancesPolicy</a>
	// in the <i>Amazon EC2 Auto Scaling API Reference</i> and <a
	// href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto
	// Scaling Groups with Multiple Instance Types and Purchase Options</a> in the
	// <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
	MixedInstancesPolicy *types.MixedInstancesPolicy
	// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before
	// checking the health status of an EC2 instance that has come into service. The
	// default value is 0. For more information, see Health Check Grace Period
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period)
	// in the Amazon EC2 Auto Scaling User Guide. Required if you are adding an ELB
	// health check.
	HealthCheckGracePeriod *int32
	// The maximum amount of time, in seconds, that an instance can be in service. The
	// default is null. This parameter is optional, but if you specify a value for it,
	// you must specify a value of at least 604,800 seconds (7 days). To clear a
	// previously set value, specify a new value of 0. For more information, see
	// Replacing Auto Scaling Instances Based on Maximum Instance Lifetime
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html)
	// in the Amazon EC2 Auto Scaling User Guide. Valid Range: Minimum value of 0.
	MaxInstanceLifetime *int32
	// The maximum size of the Auto Scaling group. With a mixed instances policy that
	// uses instance weighting, Amazon EC2 Auto Scaling may need to go above MaxSize to
	// meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will
	// never go above MaxSize by more than your largest instance weight (weights that
	// define how many units each instance contributes to the desired capacity of the
	// group).
	MaxSize *int32
	// The amount of time, in seconds, after a scaling activity completes before
	// another scaling activity can start. The default value is 300. This setting
	// applies when using simple scaling policies, but not when using other scaling
	// policies or scheduled scaling. For more information, see Scaling Cooldowns for
	// Amazon EC2 Auto Scaling
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the
	// Amazon EC2 Auto Scaling User Guide.
	DefaultCooldown *int32
	// A comma-separated list of subnet IDs for virtual private cloud (VPC). If you
	// specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify
	// for this parameter must reside in those Availability Zones.
	VPCZoneIdentifier *string
	// The launch template and version to use to specify the updates. If you specify
	// LaunchTemplate in your update request, you can't specify LaunchConfigurationName
	// or MixedInstancesPolicy. For more information, see LaunchTemplateSpecification
	// (https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_LaunchTemplateSpecification.html)
	// in the Amazon EC2 Auto Scaling API Reference.
	LaunchTemplate *types.LaunchTemplateSpecification
}

type UpdateAutoScalingGroupOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpUpdateAutoScalingGroupMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpUpdateAutoScalingGroup{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpUpdateAutoScalingGroup{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateAutoScalingGroup(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "autoscaling",
		OperationName: "UpdateAutoScalingGroup",
	}
}
