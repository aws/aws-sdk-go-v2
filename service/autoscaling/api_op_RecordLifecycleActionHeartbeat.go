// Code generated by smithy-go-codegen DO NOT EDIT.

package autoscaling

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Records a heartbeat for the lifecycle action associated with the specified token
// or instance. This extends the timeout by the length of time defined using the
// PutLifecycleHook () API call.  <p>This step is a part of the procedure for
// adding a lifecycle hook to an Auto Scaling group:</p> <ol> <li> <p>(Optional)
// Create a Lambda function and a rule that allows CloudWatch Events to invoke your
// Lambda function when Amazon EC2 Auto Scaling launches or terminates
// instances.</p> </li> <li> <p>(Optional) Create a notification target and an IAM
// role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The
// role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the
// target.</p> </li> <li> <p>Create the lifecycle hook. Specify whether the hook is
// used when the instances launch or terminate.</p> </li> <li> <p> <b>If you need
// more time, record the lifecycle action heartbeat to keep the instance in a
// pending state.</b> </p> </li> <li> <p>If you finish before the timeout period
// ends, complete the lifecycle action.</p> </li> </ol> <p>For more information,
// see <a
// href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Auto
// Scaling Lifecycle</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
func (c *Client) RecordLifecycleActionHeartbeat(ctx context.Context, params *RecordLifecycleActionHeartbeatInput, optFns ...func(*Options)) (*RecordLifecycleActionHeartbeatOutput, error) {
	stack := middleware.NewStack("RecordLifecycleActionHeartbeat", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpRecordLifecycleActionHeartbeatMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRecordLifecycleActionHeartbeatValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRecordLifecycleActionHeartbeat(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RecordLifecycleActionHeartbeat",
			Err:           err,
		}
	}
	out := result.(*RecordLifecycleActionHeartbeatOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RecordLifecycleActionHeartbeatInput struct {
	// The ID of the instance.
	InstanceId *string
	// The name of the lifecycle hook.
	LifecycleHookName *string
	// A token that uniquely identifies a specific lifecycle action associated with an
	// instance. Amazon EC2 Auto Scaling sends this token to the notification target
	// that you specified when you created the lifecycle hook.
	LifecycleActionToken *string
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
}

type RecordLifecycleActionHeartbeatOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpRecordLifecycleActionHeartbeatMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpRecordLifecycleActionHeartbeat{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpRecordLifecycleActionHeartbeat{}, middleware.After)
}

func newServiceMetadataMiddleware_opRecordLifecycleActionHeartbeat(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "autoscaling",
		OperationName: "RecordLifecycleActionHeartbeat",
	}
}
