// Code generated by smithy-go-codegen DO NOT EDIT.

package autoscaling

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Executes the specified policy. This can be useful for testing the design of your
// scaling policy.
func (c *Client) ExecutePolicy(ctx context.Context, params *ExecutePolicyInput, optFns ...func(*Options)) (*ExecutePolicyOutput, error) {
	stack := middleware.NewStack("ExecutePolicy", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpExecutePolicyMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpExecutePolicyValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opExecutePolicy(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ExecutePolicy",
			Err:           err,
		}
	}
	out := result.(*ExecutePolicyOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ExecutePolicyInput struct {
	// The metric value to compare to BreachThreshold. This enables you to execute a
	// policy of type StepScaling and determine which step adjustment to use. For
	// example, if the breach threshold is 50 and you want to use a step adjustment
	// with a lower bound of 0 and an upper bound of 10, you can set the metric value
	// to 59. If you specify a metric value that doesn't correspond to a step
	// adjustment for the policy, the call returns an error. Required if the policy
	// type is StepScaling and not supported otherwise.
	MetricValue *float64
	// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to
	// complete before executing the policy. Valid only if the policy type is
	// SimpleScaling. For more information, see Scaling Cooldowns for Amazon EC2 Auto
	// Scaling (https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in
	// the Amazon EC2 Auto Scaling User Guide.
	HonorCooldown *bool
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string
	// The name or ARN of the policy.
	PolicyName *string
	// The breach threshold for the alarm. Required if the policy type is StepScaling
	// and not supported otherwise.
	BreachThreshold *float64
}

type ExecutePolicyOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpExecutePolicyMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpExecutePolicy{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpExecutePolicy{}, middleware.After)
}

func newServiceMetadataMiddleware_opExecutePolicy(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "autoscaling",
		OperationName: "ExecutePolicy",
	}
}
