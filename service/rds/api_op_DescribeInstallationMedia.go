// Code generated by smithy-go-codegen DO NOT EDIT.

package rds

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Describes the available installation media for a DB engine that requires an
// on-premises customer provided license, such as Microsoft SQL Server.
func (c *Client) DescribeInstallationMedia(ctx context.Context, params *DescribeInstallationMediaInput, optFns ...func(*Options)) (*DescribeInstallationMediaOutput, error) {
	stack := middleware.NewStack("DescribeInstallationMedia", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpDescribeInstallationMediaMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDescribeInstallationMediaValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeInstallationMedia(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DescribeInstallationMedia",
			Err:           err,
		}
	}
	out := result.(*DescribeInstallationMediaOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeInstallationMediaInput struct {
	// An optional pagination token provided by a previous DescribeInstallationMedia
	// request. If this parameter is specified, the response includes only records
	// beyond the marker, up to the value specified by MaxRecords.
	MaxRecords *int32
	// A filter that specifies one or more installation media to describe. Supported
	// filters include the following:
	//
	//     * custom-availability-zone-id - Accepts
	// custom Availability Zone (AZ) identifiers. The results list includes information
	// about only the custom AZs identified by these identifiers.
	//
	//     * engine -
	// Accepts database engines. The results list includes information about only the
	// database engines identified by these identifiers. For more information about the
	// valid engines for installation media, see ImportInstallationMedia ().
	Filters []*types.Filter
	// The installation medium ID.
	InstallationMediaId *string
	// An optional pagination token provided by a previous request. If this parameter
	// is specified, the response includes only records beyond the marker, up to the
	// value specified by MaxRecords.
	Marker *string
}

type DescribeInstallationMediaOutput struct {
	// An optional pagination token provided by a previous DescribeInstallationMedia ()
	// request. If this parameter is specified, the response includes only records
	// beyond the marker, up to the value specified by MaxRecords.
	Marker *string
	// The list of InstallationMedia () objects for the AWS account.
	InstallationMedia []*types.InstallationMedia

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpDescribeInstallationMediaMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpDescribeInstallationMedia{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpDescribeInstallationMedia{}, middleware.After)
}

func newServiceMetadataMiddleware_opDescribeInstallationMedia(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "DescribeInstallationMedia",
	}
}
