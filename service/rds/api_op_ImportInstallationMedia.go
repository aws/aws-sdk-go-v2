// Code generated by smithy-go-codegen DO NOT EDIT.

package rds

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Imports the installation media for a DB engine that requires an on-premises
// customer provided license, such as SQL Server.
func (c *Client) ImportInstallationMedia(ctx context.Context, params *ImportInstallationMediaInput, optFns ...func(*Options)) (*ImportInstallationMediaOutput, error) {
	stack := middleware.NewStack("ImportInstallationMedia", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpImportInstallationMediaMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpImportInstallationMediaValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opImportInstallationMedia(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "ImportInstallationMedia",
			Err:           err,
		}
	}
	out := result.(*ImportInstallationMediaOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ImportInstallationMediaInput struct {
	// The version number of the database engine to use. For a list of valid engine
	// versions, call DescribeDBEngineVersions (). The following are the database
	// engines and links to information about the major and minor versions. The list
	// only includes DB engines that require an on-premises customer provided license.
	// <p> <b>Microsoft SQL Server</b> </p> <p>See <a
	// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version
	// and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
	EngineVersion *string
	// The name of the database engine to be used for this instance.  <p>The list only
	// includes supported DB engines that require an on-premises customer provided
	// license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p>
	// </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p>
	// <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p>
	// </li> </ul>
	Engine *string
	// The path to the installation medium for the operating system associated with the
	// specified DB engine. Example:
	// WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso
	OSInstallationMediaPath *string
	// The identifier of the custom Availability Zone (AZ) to import the installation
	// media to.
	CustomAvailabilityZoneId *string
	// The path to the installation medium for the specified DB engine. Example:
	// SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso
	EngineInstallationMediaPath *string
}

// Contains the installation media for a DB engine that requires an on-premises
// customer provided license, such as Microsoft SQL Server.
type ImportInstallationMediaOutput struct {
	// The status of the installation medium.
	Status *string
	// The engine version of the DB engine.
	EngineVersion *string
	// The custom Availability Zone (AZ) that contains the installation media.
	CustomAvailabilityZoneId *string
	// The path to the installation medium for the operating system associated with the
	// DB engine.
	OSInstallationMediaPath *string
	// The DB engine.
	Engine *string
	// If an installation media failure occurred, the cause of the failure.
	FailureCause *types.InstallationMediaFailureCause
	// The installation medium ID.
	InstallationMediaId *string
	// The path to the installation medium for the DB engine.
	EngineInstallationMediaPath *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpImportInstallationMediaMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpImportInstallationMedia{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpImportInstallationMedia{}, middleware.After)
}

func newServiceMetadataMiddleware_opImportInstallationMedia(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "ImportInstallationMedia",
	}
}
