// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rds

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
)

const opModifyCurrentDBClusterCapacity = "ModifyCurrentDBClusterCapacity"

// ModifyCurrentDBClusterCapacityRequest returns a request value for making API operation for
// Amazon Relational Database Service.
//
// Set the capacity of an Aurora Serverless DB cluster to a specific value.
//
// Aurora Serverless scales seamlessly based on the workload on the DB cluster.
// In some cases, the capacity might not scale fast enough to meet a sudden
// change in workload, such as a large number of new transactions. Call ModifyCurrentDBClusterCapacity
// to set the capacity explicitly.
//
// After this call sets the DB cluster capacity, Aurora Serverless can automatically
// scale the DB cluster based on the cooldown period for scaling up and the
// cooldown period for scaling down.
//
// For more information about Aurora Serverless, see Using Amazon Aurora Serverless
// (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html)
// in the Amazon Aurora User Guide.
//
// If you call ModifyCurrentDBClusterCapacity with the default TimeoutAction,
// connections that prevent Aurora Serverless from finding a scaling point might
// be dropped. For more information about scaling points, see Autoscaling for
// Aurora Serverless (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling)
// in the Amazon Aurora User Guide.
//
// This action only applies to Aurora DB clusters.
//
//    // Example sending a request using ModifyCurrentDBClusterCapacityRequest.
//    req := client.ModifyCurrentDBClusterCapacityRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/rds-2014-10-31/ModifyCurrentDBClusterCapacity
func (c *Client) ModifyCurrentDBClusterCapacityRequest(input *types.ModifyCurrentDBClusterCapacityInput) ModifyCurrentDBClusterCapacityRequest {
	op := &aws.Operation{
		Name:       opModifyCurrentDBClusterCapacity,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.ModifyCurrentDBClusterCapacityInput{}
	}

	req := c.newRequest(op, input, &types.ModifyCurrentDBClusterCapacityOutput{})
	return ModifyCurrentDBClusterCapacityRequest{Request: req, Input: input, Copy: c.ModifyCurrentDBClusterCapacityRequest}
}

// ModifyCurrentDBClusterCapacityRequest is the request type for the
// ModifyCurrentDBClusterCapacity API operation.
type ModifyCurrentDBClusterCapacityRequest struct {
	*aws.Request
	Input *types.ModifyCurrentDBClusterCapacityInput
	Copy  func(*types.ModifyCurrentDBClusterCapacityInput) ModifyCurrentDBClusterCapacityRequest
}

// Send marshals and sends the ModifyCurrentDBClusterCapacity API request.
func (r ModifyCurrentDBClusterCapacityRequest) Send(ctx context.Context) (*ModifyCurrentDBClusterCapacityResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ModifyCurrentDBClusterCapacityResponse{
		ModifyCurrentDBClusterCapacityOutput: r.Request.Data.(*types.ModifyCurrentDBClusterCapacityOutput),
		response:                             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ModifyCurrentDBClusterCapacityResponse is the response type for the
// ModifyCurrentDBClusterCapacity API operation.
type ModifyCurrentDBClusterCapacityResponse struct {
	*types.ModifyCurrentDBClusterCapacityOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ModifyCurrentDBClusterCapacity request.
func (r *ModifyCurrentDBClusterCapacityResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
