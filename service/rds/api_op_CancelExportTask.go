// Code generated by smithy-go-codegen DO NOT EDIT.

package rds

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
	"time"
)

// Cancels an export task in progress that is exporting a snapshot to Amazon S3.
// Any data that has already been written to the S3 bucket isn't removed.
func (c *Client) CancelExportTask(ctx context.Context, params *CancelExportTaskInput, optFns ...func(*Options)) (*CancelExportTaskOutput, error) {
	stack := middleware.NewStack("CancelExportTask", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCancelExportTaskMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCancelExportTaskValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCancelExportTask(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CancelExportTask",
			Err:           err,
		}
	}
	out := result.(*CancelExportTaskOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CancelExportTaskInput struct {
	// The identifier of the snapshot export task to cancel.
	ExportTaskIdentifier *string
}

// Contains the details of a snapshot export to Amazon S3. This data type is used
// as a response element in the DescribeExportTasks action.
type CancelExportTaskOutput struct {
	// The name of the IAM role that is used to write to Amazon S3 when exporting a
	// snapshot.
	IamRoleArn *string
	// The total amount of data exported, in gigabytes.
	TotalExtractedDataInGB *int32
	// The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
	SourceArn *string
	// The Amazon S3 bucket that the snapshot is exported to.
	S3Bucket *string
	// The time that the snapshot was created.
	SnapshotTime *time.Time
	// The progress status of the export task.
	Status *string
	// A unique identifier for the snapshot export task. This ID isn't an identifier
	// for the Amazon S3 bucket where the snapshot is exported to.
	ExportTaskIdentifier *string
	// The reason the export failed, if it failed.
	FailureCause *string
	// The progress of the snapshot export task as a percentage.
	PercentProgress *int32
	// The Amazon S3 bucket prefix that is the file name and path of the exported
	// snapshot.
	S3Prefix *string
	// The ID of the AWS KMS key that is used to encrypt the snapshot when it's
	// exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS
	// key identifier, or the KMS key alias for the KMS encryption key. The IAM role
	// used for the snapshot export must have encryption and decryption permissions to
	// use this KMS key.
	KmsKeyId *string
	// The time that the snapshot export task completed.
	TaskEndTime *time.Time
	// The data exported from the snapshot. Valid values are the following:
	//
	//     *
	// database - Export all the data from a specified database.
	//
	//     * database.table
	// table-name - Export a table of the snapshot. This format is valid only for RDS
	// for MySQL, RDS for MariaDB, and Aurora MySQL.
	//
	//     * database.schema schema-name
	// - Export a database schema of the snapshot. This format is valid only for RDS
	// for PostgreSQL and Aurora PostgreSQL.
	//
	//     * database.schema.table table-name -
	// Export a table of the database schema. This format is valid only for RDS for
	// PostgreSQL and Aurora PostgreSQL.
	ExportOnly []*string
	// A warning about the snapshot export task.
	WarningMessage *string
	// The time that the snapshot export task started.
	TaskStartTime *time.Time

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCancelExportTaskMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCancelExportTask{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCancelExportTask{}, middleware.After)
}

func newServiceMetadataMiddleware_opCancelExportTask(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "CancelExportTask",
	}
}
