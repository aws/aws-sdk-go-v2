// Code generated by smithy-go-codegen DO NOT EDIT.

package rds

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Returns information about DB snapshots. This API action supports pagination.
func (c *Client) DescribeDBSnapshots(ctx context.Context, params *DescribeDBSnapshotsInput, optFns ...func(*Options)) (*DescribeDBSnapshotsOutput, error) {
	if params == nil {
		params = &DescribeDBSnapshotsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeDBSnapshots", params, optFns, addOperationDescribeDBSnapshotsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeDBSnapshotsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type DescribeDBSnapshotsInput struct {

	// The ID of the DB instance to retrieve the list of DB snapshots for. This
	// parameter can't be used in conjunction with DBSnapshotIdentifier. This parameter
	// isn't case-sensitive. Constraints:
	//
	// * If supplied, must match the identifier of
	// an existing DBInstance.
	DBInstanceIdentifier *string

	// A specific DB snapshot identifier to describe. This parameter can't be used in
	// conjunction with DBInstanceIdentifier. This value is stored as a lowercase
	// string. Constraints:
	//
	// * If supplied, must match the identifier of an existing
	// DBSnapshot.
	//
	// * If this identifier is for an automated snapshot, the SnapshotType
	// parameter must also be specified.
	DBSnapshotIdentifier *string

	// A specific DB resource ID to describe.
	DbiResourceId *string

	// A filter that specifies one or more DB snapshots to describe. Supported
	// filters:
	//
	// * db-instance-id - Accepts DB instance identifiers and DB instance
	// Amazon Resource Names (ARNs).
	//
	// * db-snapshot-id - Accepts DB snapshot
	// identifiers.
	//
	// * dbi-resource-id - Accepts identifiers of source DB instances.
	//
	// *
	// snapshot-type - Accepts types of DB snapshots.
	//
	// * engine - Accepts names of
	// database engines.
	Filters []types.Filter

	// A value that indicates whether to include manual DB cluster snapshots that are
	// public and can be copied or restored by any AWS account. By default, the public
	// snapshots are not included. You can share a manual DB snapshot as public by
	// using the ModifyDBSnapshotAttribute API.
	IncludePublic bool

	// A value that indicates whether to include shared manual DB cluster snapshots
	// from other AWS accounts that this AWS account has been given permission to copy
	// or restore. By default, these snapshots are not included. You can give an AWS
	// account permission to restore a manual DB snapshot from another AWS account by
	// using the ModifyDBSnapshotAttribute API action.
	IncludeShared bool

	// An optional pagination token provided by a previous DescribeDBSnapshots request.
	// If this parameter is specified, the response includes only records beyond the
	// marker, up to the value specified by MaxRecords.
	Marker *string

	// The maximum number of records to include in the response. If more records exist
	// than the specified MaxRecords value, a pagination token called a marker is
	// included in the response so that you can retrieve the remaining results.
	// Default: 100 Constraints: Minimum 20, maximum 100.
	MaxRecords *int32

	// The type of snapshots to be returned. You can specify one of the following
	// values:
	//
	// * automated - Return all DB snapshots that have been automatically
	// taken by Amazon RDS for my AWS account.
	//
	// * manual - Return all DB snapshots that
	// have been taken by my AWS account.
	//
	// * shared - Return all manual DB snapshots
	// that have been shared to my AWS account.
	//
	// * public - Return all DB snapshots
	// that have been marked as public.
	//
	// * awsbackup - Return the DB snapshots managed
	// by the AWS Backup service. For information about AWS Backup, see the  AWS Backup
	// Developer Guide.
	// (https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html) The
	// awsbackup type does not apply to Aurora.
	//
	// If you don't specify a SnapshotType
	// value, then both automated and manual snapshots are returned. Shared and public
	// DB snapshots are not included in the returned results by default. You can
	// include shared snapshots with these results by enabling the IncludeShared
	// parameter. You can include public snapshots with these results by enabling the
	// IncludePublic parameter. The IncludeShared and IncludePublic parameters don't
	// apply for SnapshotType values of manual or automated. The IncludePublic
	// parameter doesn't apply when SnapshotType is set to shared. The IncludeShared
	// parameter doesn't apply when SnapshotType is set to public.
	SnapshotType *string
}

// Contains the result of a successful invocation of the DescribeDBSnapshots
// action.
type DescribeDBSnapshotsOutput struct {

	// A list of DBSnapshot instances.
	DBSnapshots []types.DBSnapshot

	// An optional pagination token provided by a previous request. If this parameter
	// is specified, the response includes only records beyond the marker, up to the
	// value specified by MaxRecords.
	Marker *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribeDBSnapshotsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsquery_serializeOpDescribeDBSnapshots{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsquery_deserializeOpDescribeDBSnapshots{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpDescribeDBSnapshotsValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeDBSnapshots(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

// DescribeDBSnapshotsAPIClient is a client that implements the DescribeDBSnapshots
// operation.
type DescribeDBSnapshotsAPIClient interface {
	DescribeDBSnapshots(context.Context, *DescribeDBSnapshotsInput, ...func(*Options)) (*DescribeDBSnapshotsOutput, error)
}

var _ DescribeDBSnapshotsAPIClient = (*Client)(nil)

// DescribeDBSnapshotsPaginatorOptions is the paginator options for
// DescribeDBSnapshots
type DescribeDBSnapshotsPaginatorOptions struct {
	// The maximum number of records to include in the response. If more records exist
	// than the specified MaxRecords value, a pagination token called a marker is
	// included in the response so that you can retrieve the remaining results.
	// Default: 100 Constraints: Minimum 20, maximum 100.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// DescribeDBSnapshotsPaginator is a paginator for DescribeDBSnapshots
type DescribeDBSnapshotsPaginator struct {
	options   DescribeDBSnapshotsPaginatorOptions
	client    DescribeDBSnapshotsAPIClient
	params    *DescribeDBSnapshotsInput
	nextToken *string
	firstPage bool
}

// NewDescribeDBSnapshotsPaginator returns a new DescribeDBSnapshotsPaginator
func NewDescribeDBSnapshotsPaginator(client DescribeDBSnapshotsAPIClient, params *DescribeDBSnapshotsInput, optFns ...func(*DescribeDBSnapshotsPaginatorOptions)) *DescribeDBSnapshotsPaginator {
	options := DescribeDBSnapshotsPaginatorOptions{}
	if params.MaxRecords != nil {
		options.Limit = *params.MaxRecords
	}

	for _, fn := range optFns {
		fn(&options)
	}

	if params == nil {
		params = &DescribeDBSnapshotsInput{}
	}

	return &DescribeDBSnapshotsPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *DescribeDBSnapshotsPaginator) HasMorePages() bool {
	return p.firstPage || p.nextToken != nil
}

// NextPage retrieves the next DescribeDBSnapshots page.
func (p *DescribeDBSnapshotsPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*DescribeDBSnapshotsOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.Marker = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxRecords = limit

	result, err := p.client.DescribeDBSnapshots(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.Marker

	if p.options.StopOnDuplicateToken && prevToken != nil && p.nextToken != nil && *prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

func newServiceMetadataMiddleware_opDescribeDBSnapshots(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "DescribeDBSnapshots",
	}
}
