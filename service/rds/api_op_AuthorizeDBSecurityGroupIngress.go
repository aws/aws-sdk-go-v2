// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rds

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
)

const opAuthorizeDBSecurityGroupIngress = "AuthorizeDBSecurityGroupIngress"

// AuthorizeDBSecurityGroupIngressRequest returns a request value for making API operation for
// Amazon Relational Database Service.
//
// Enables ingress to a DBSecurityGroup using one of two forms of authorization.
// First, EC2 or VPC security groups can be added to the DBSecurityGroup if
// the application using the database is running on EC2 or VPC instances. Second,
// IP ranges are available if the application accessing your database is running
// on the Internet. Required parameters for this API are one of CIDR range,
// EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName
// or EC2SecurityGroupId for non-VPC).
//
// You can't authorize ingress from an EC2 security group in one AWS Region
// to an Amazon RDS DB instance in another. You can't authorize ingress from
// a VPC security group in one VPC to an Amazon RDS DB instance in another.
//
// For an overview of CIDR ranges, go to the Wikipedia Tutorial (http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
//
//    // Example sending a request using AuthorizeDBSecurityGroupIngressRequest.
//    req := client.AuthorizeDBSecurityGroupIngressRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/rds-2014-10-31/AuthorizeDBSecurityGroupIngress
func (c *Client) AuthorizeDBSecurityGroupIngressRequest(input *types.AuthorizeDBSecurityGroupIngressInput) AuthorizeDBSecurityGroupIngressRequest {
	op := &aws.Operation{
		Name:       opAuthorizeDBSecurityGroupIngress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.AuthorizeDBSecurityGroupIngressInput{}
	}

	req := c.newRequest(op, input, &types.AuthorizeDBSecurityGroupIngressOutput{})
	return AuthorizeDBSecurityGroupIngressRequest{Request: req, Input: input, Copy: c.AuthorizeDBSecurityGroupIngressRequest}
}

// AuthorizeDBSecurityGroupIngressRequest is the request type for the
// AuthorizeDBSecurityGroupIngress API operation.
type AuthorizeDBSecurityGroupIngressRequest struct {
	*aws.Request
	Input *types.AuthorizeDBSecurityGroupIngressInput
	Copy  func(*types.AuthorizeDBSecurityGroupIngressInput) AuthorizeDBSecurityGroupIngressRequest
}

// Send marshals and sends the AuthorizeDBSecurityGroupIngress API request.
func (r AuthorizeDBSecurityGroupIngressRequest) Send(ctx context.Context) (*AuthorizeDBSecurityGroupIngressResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &AuthorizeDBSecurityGroupIngressResponse{
		AuthorizeDBSecurityGroupIngressOutput: r.Request.Data.(*types.AuthorizeDBSecurityGroupIngressOutput),
		response:                              &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// AuthorizeDBSecurityGroupIngressResponse is the response type for the
// AuthorizeDBSecurityGroupIngress API operation.
type AuthorizeDBSecurityGroupIngressResponse struct {
	*types.AuthorizeDBSecurityGroupIngressOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// AuthorizeDBSecurityGroupIngress request.
func (r *AuthorizeDBSecurityGroupIngressResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
