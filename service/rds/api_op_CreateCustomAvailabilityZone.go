// Code generated by smithy-go-codegen DO NOT EDIT.

package rds

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Creates a custom Availability Zone (AZ). A custom AZ is an on-premises AZ that
// is integrated with a VMware vSphere cluster. For more information about RDS on
// VMware, see the  RDS on VMware User Guide.
// (https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html)
func (c *Client) CreateCustomAvailabilityZone(ctx context.Context, params *CreateCustomAvailabilityZoneInput, optFns ...func(*Options)) (*CreateCustomAvailabilityZoneOutput, error) {
	stack := middleware.NewStack("CreateCustomAvailabilityZone", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCreateCustomAvailabilityZoneMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreateCustomAvailabilityZoneValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreateCustomAvailabilityZone(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreateCustomAvailabilityZone",
			Err:           err,
		}
	}
	out := result.(*CreateCustomAvailabilityZoneOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type CreateCustomAvailabilityZoneInput struct {
	// The ID of an existing virtual private network (VPN) between the Amazon RDS
	// website and the VMware vSphere cluster.
	ExistingVpnId *string
	// The IP address of network traffic from your on-premises data center. A custom AZ
	// receives the network traffic. Specify this parameter only if ExistingVpnId isn't
	// specified.
	VpnTunnelOriginatorIP *string
	// The name of the custom Availability Zone (AZ).
	CustomAvailabilityZoneName *string
	// The name of a new VPN tunnel between the Amazon RDS website and the VMware
	// vSphere cluster. Specify this parameter only if ExistingVpnId isn't specified.
	NewVpnTunnelName *string
}

type CreateCustomAvailabilityZoneOutput struct {
	// A custom Availability Zone (AZ) is an on-premises AZ that is integrated with a
	// VMware vSphere cluster. For more information about RDS on VMware, see the  RDS
	// on VMware User Guide.
	// (https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html)
	CustomAvailabilityZone *types.CustomAvailabilityZone

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCreateCustomAvailabilityZoneMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCreateCustomAvailabilityZone{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCreateCustomAvailabilityZone{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreateCustomAvailabilityZone(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "CreateCustomAvailabilityZone",
	}
}
