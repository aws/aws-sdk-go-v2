// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/ptr"
)

// The specified CIDR IP range or Amazon EC2 security group is already authorized
// for the specified DB security group.
type AuthorizationAlreadyExistsFault struct {
	Message *string
}

func (e *AuthorizationAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AuthorizationAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AuthorizationAlreadyExistsFault) ErrorCode() string {
	return "AuthorizationAlreadyExistsFault"
}
func (e *AuthorizationAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AuthorizationAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AuthorizationAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The specified CIDR IP range or Amazon EC2 security group might not be authorized
// for the specified DB security group. Or, RDS might not be authorized to perform
// necessary actions using IAM on your behalf.
type AuthorizationNotFoundFault struct {
	Message *string
}

func (e *AuthorizationNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AuthorizationNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AuthorizationNotFoundFault) ErrorCode() string             { return "AuthorizationNotFoundFault" }
func (e *AuthorizationNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AuthorizationNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AuthorizationNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The DB security group authorization quota has been reached.
type AuthorizationQuotaExceededFault struct {
	Message *string
}

func (e *AuthorizationQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AuthorizationQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AuthorizationQuotaExceededFault) ErrorCode() string {
	return "AuthorizationQuotaExceededFault"
}
func (e *AuthorizationQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *AuthorizationQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *AuthorizationQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

type BackupPolicyNotFoundFault struct {
	Message *string
}

func (e *BackupPolicyNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *BackupPolicyNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *BackupPolicyNotFoundFault) ErrorCode() string             { return "BackupPolicyNotFoundFault" }
func (e *BackupPolicyNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *BackupPolicyNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *BackupPolicyNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// CertificateIdentifier doesn't refer to an existing certificate.
type CertificateNotFoundFault struct {
	Message *string
}

func (e *CertificateNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CertificateNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CertificateNotFoundFault) ErrorCode() string             { return "CertificateNotFoundFault" }
func (e *CertificateNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *CertificateNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CertificateNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// CustomAvailabilityZoneName is already used by an existing custom Availability
// Zone.
type CustomAvailabilityZoneAlreadyExistsFault struct {
	Message *string
}

func (e *CustomAvailabilityZoneAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CustomAvailabilityZoneAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CustomAvailabilityZoneAlreadyExistsFault) ErrorCode() string {
	return "CustomAvailabilityZoneAlreadyExistsFault"
}
func (e *CustomAvailabilityZoneAlreadyExistsFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *CustomAvailabilityZoneAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CustomAvailabilityZoneAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// CustomAvailabilityZoneId doesn't refer to an existing custom Availability Zone
// identifier.
type CustomAvailabilityZoneNotFoundFault struct {
	Message *string
}

func (e *CustomAvailabilityZoneNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CustomAvailabilityZoneNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CustomAvailabilityZoneNotFoundFault) ErrorCode() string {
	return "CustomAvailabilityZoneNotFoundFault"
}
func (e *CustomAvailabilityZoneNotFoundFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *CustomAvailabilityZoneNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CustomAvailabilityZoneNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// You have exceeded the maximum number of custom Availability Zones.
type CustomAvailabilityZoneQuotaExceededFault struct {
	Message *string
}

func (e *CustomAvailabilityZoneQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *CustomAvailabilityZoneQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *CustomAvailabilityZoneQuotaExceededFault) ErrorCode() string {
	return "CustomAvailabilityZoneQuotaExceededFault"
}
func (e *CustomAvailabilityZoneQuotaExceededFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *CustomAvailabilityZoneQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *CustomAvailabilityZoneQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The user already has a DB cluster with the given identifier.
type DBClusterAlreadyExistsFault struct {
	Message *string
}

func (e *DBClusterAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterAlreadyExistsFault) ErrorCode() string             { return "DBClusterAlreadyExistsFault" }
func (e *DBClusterAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// BacktrackIdentifier doesn't refer to an existing backtrack.
type DBClusterBacktrackNotFoundFault struct {
	Message *string
}

func (e *DBClusterBacktrackNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterBacktrackNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterBacktrackNotFoundFault) ErrorCode() string {
	return "DBClusterBacktrackNotFoundFault"
}
func (e *DBClusterBacktrackNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterBacktrackNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterBacktrackNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The specified custom endpoint can't be created because it already exists.
type DBClusterEndpointAlreadyExistsFault struct {
	Message *string
}

func (e *DBClusterEndpointAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterEndpointAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterEndpointAlreadyExistsFault) ErrorCode() string {
	return "DBClusterEndpointAlreadyExistsFault"
}
func (e *DBClusterEndpointAlreadyExistsFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBClusterEndpointAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterEndpointAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The specified custom endpoint doesn't exist.
type DBClusterEndpointNotFoundFault struct {
	Message *string
}

func (e *DBClusterEndpointNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterEndpointNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterEndpointNotFoundFault) ErrorCode() string             { return "DBClusterEndpointNotFoundFault" }
func (e *DBClusterEndpointNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterEndpointNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterEndpointNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The cluster already has the maximum number of custom endpoints.
type DBClusterEndpointQuotaExceededFault struct {
	Message *string
}

func (e *DBClusterEndpointQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterEndpointQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterEndpointQuotaExceededFault) ErrorCode() string {
	return "DBClusterEndpointQuotaExceededFault"
}
func (e *DBClusterEndpointQuotaExceededFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBClusterEndpointQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterEndpointQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// DBClusterIdentifier doesn't refer to an existing DB cluster.
type DBClusterNotFoundFault struct {
	Message *string
}

func (e *DBClusterNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterNotFoundFault) ErrorCode() string             { return "DBClusterNotFoundFault" }
func (e *DBClusterNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// DBClusterParameterGroupName doesn't refer to an existing DB cluster parameter
// group.
type DBClusterParameterGroupNotFoundFault struct {
	Message *string
}

func (e *DBClusterParameterGroupNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterParameterGroupNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterParameterGroupNotFoundFault) ErrorCode() string {
	return "DBClusterParameterGroupNotFoundFault"
}
func (e *DBClusterParameterGroupNotFoundFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBClusterParameterGroupNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterParameterGroupNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The user attempted to create a new DB cluster and the user has already reached
// the maximum allowed DB cluster quota.
type DBClusterQuotaExceededFault struct {
	Message *string
}

func (e *DBClusterQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterQuotaExceededFault) ErrorCode() string             { return "DBClusterQuotaExceededFault" }
func (e *DBClusterQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The specified IAM role Amazon Resource Name (ARN) is already associated with the
// specified DB cluster.
type DBClusterRoleAlreadyExistsFault struct {
	Message *string
}

func (e *DBClusterRoleAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterRoleAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterRoleAlreadyExistsFault) ErrorCode() string {
	return "DBClusterRoleAlreadyExistsFault"
}
func (e *DBClusterRoleAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterRoleAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterRoleAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The specified IAM role Amazon Resource Name (ARN) isn't associated with the
// specified DB cluster.
type DBClusterRoleNotFoundFault struct {
	Message *string
}

func (e *DBClusterRoleNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterRoleNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterRoleNotFoundFault) ErrorCode() string             { return "DBClusterRoleNotFoundFault" }
func (e *DBClusterRoleNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterRoleNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterRoleNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// You have exceeded the maximum number of IAM roles that can be associated with
// the specified DB cluster.
type DBClusterRoleQuotaExceededFault struct {
	Message *string
}

func (e *DBClusterRoleQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterRoleQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterRoleQuotaExceededFault) ErrorCode() string {
	return "DBClusterRoleQuotaExceededFault"
}
func (e *DBClusterRoleQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterRoleQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterRoleQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The user already has a DB cluster snapshot with the given identifier.
type DBClusterSnapshotAlreadyExistsFault struct {
	Message *string
}

func (e *DBClusterSnapshotAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterSnapshotAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterSnapshotAlreadyExistsFault) ErrorCode() string {
	return "DBClusterSnapshotAlreadyExistsFault"
}
func (e *DBClusterSnapshotAlreadyExistsFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBClusterSnapshotAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterSnapshotAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// DBClusterSnapshotIdentifier doesn't refer to an existing DB cluster snapshot.
type DBClusterSnapshotNotFoundFault struct {
	Message *string
}

func (e *DBClusterSnapshotNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBClusterSnapshotNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBClusterSnapshotNotFoundFault) ErrorCode() string             { return "DBClusterSnapshotNotFoundFault" }
func (e *DBClusterSnapshotNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBClusterSnapshotNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBClusterSnapshotNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The user already has a DB instance with the given identifier.
type DBInstanceAlreadyExistsFault struct {
	Message *string
}

func (e *DBInstanceAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBInstanceAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBInstanceAlreadyExistsFault) ErrorCode() string             { return "DBInstanceAlreadyExistsFault" }
func (e *DBInstanceAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBInstanceAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBInstanceAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// No automated backup for this DB instance was found.
type DBInstanceAutomatedBackupNotFoundFault struct {
	Message *string
}

func (e *DBInstanceAutomatedBackupNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBInstanceAutomatedBackupNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBInstanceAutomatedBackupNotFoundFault) ErrorCode() string {
	return "DBInstanceAutomatedBackupNotFoundFault"
}
func (e *DBInstanceAutomatedBackupNotFoundFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBInstanceAutomatedBackupNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBInstanceAutomatedBackupNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The quota for retained automated backups was exceeded. This prevents you from
// retaining any additional automated backups. The retained automated backups quota
// is the same as your DB Instance quota.
type DBInstanceAutomatedBackupQuotaExceededFault struct {
	Message *string
}

func (e *DBInstanceAutomatedBackupQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBInstanceAutomatedBackupQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBInstanceAutomatedBackupQuotaExceededFault) ErrorCode() string {
	return "DBInstanceAutomatedBackupQuotaExceededFault"
}
func (e *DBInstanceAutomatedBackupQuotaExceededFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBInstanceAutomatedBackupQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBInstanceAutomatedBackupQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// DBInstanceIdentifier doesn't refer to an existing DB instance.
type DBInstanceNotFoundFault struct {
	Message *string
}

func (e *DBInstanceNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBInstanceNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBInstanceNotFoundFault) ErrorCode() string             { return "DBInstanceNotFoundFault" }
func (e *DBInstanceNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBInstanceNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBInstanceNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The specified RoleArn or FeatureName value is already associated with the DB
// instance.
type DBInstanceRoleAlreadyExistsFault struct {
	Message *string
}

func (e *DBInstanceRoleAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBInstanceRoleAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBInstanceRoleAlreadyExistsFault) ErrorCode() string {
	return "DBInstanceRoleAlreadyExistsFault"
}
func (e *DBInstanceRoleAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBInstanceRoleAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBInstanceRoleAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The specified RoleArn value doesn't match the specified feature for the DB
// instance.
type DBInstanceRoleNotFoundFault struct {
	Message *string
}

func (e *DBInstanceRoleNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBInstanceRoleNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBInstanceRoleNotFoundFault) ErrorCode() string             { return "DBInstanceRoleNotFoundFault" }
func (e *DBInstanceRoleNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBInstanceRoleNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBInstanceRoleNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// You can't associate any more AWS Identity and Access Management (IAM) roles with
// the DB instance because the quota has been reached.
type DBInstanceRoleQuotaExceededFault struct {
	Message *string
}

func (e *DBInstanceRoleQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBInstanceRoleQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBInstanceRoleQuotaExceededFault) ErrorCode() string {
	return "DBInstanceRoleQuotaExceededFault"
}
func (e *DBInstanceRoleQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBInstanceRoleQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBInstanceRoleQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// LogFileName doesn't refer to an existing DB log file.
type DBLogFileNotFoundFault struct {
	Message *string
}

func (e *DBLogFileNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBLogFileNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBLogFileNotFoundFault) ErrorCode() string             { return "DBLogFileNotFoundFault" }
func (e *DBLogFileNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBLogFileNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBLogFileNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// A DB parameter group with the same name exists.
type DBParameterGroupAlreadyExistsFault struct {
	Message *string
}

func (e *DBParameterGroupAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBParameterGroupAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBParameterGroupAlreadyExistsFault) ErrorCode() string {
	return "DBParameterGroupAlreadyExistsFault"
}
func (e *DBParameterGroupAlreadyExistsFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBParameterGroupAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBParameterGroupAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// DBParameterGroupName doesn't refer to an existing DB parameter group.
type DBParameterGroupNotFoundFault struct {
	Message *string
}

func (e *DBParameterGroupNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBParameterGroupNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBParameterGroupNotFoundFault) ErrorCode() string             { return "DBParameterGroupNotFoundFault" }
func (e *DBParameterGroupNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBParameterGroupNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBParameterGroupNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The request would result in the user exceeding the allowed number of DB
// parameter groups.
type DBParameterGroupQuotaExceededFault struct {
	Message *string
}

func (e *DBParameterGroupQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBParameterGroupQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBParameterGroupQuotaExceededFault) ErrorCode() string {
	return "DBParameterGroupQuotaExceededFault"
}
func (e *DBParameterGroupQuotaExceededFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBParameterGroupQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBParameterGroupQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The specified proxy name must be unique for all proxies owned by your AWS
// account in the specified AWS Region.
type DBProxyAlreadyExistsFault struct {
	Message *string
}

func (e *DBProxyAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBProxyAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBProxyAlreadyExistsFault) ErrorCode() string             { return "DBProxyAlreadyExistsFault" }
func (e *DBProxyAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBProxyAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBProxyAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The specified proxy name doesn't correspond to a proxy owned by your AWS accoutn
// in the specified AWS Region.
type DBProxyNotFoundFault struct {
	Message *string
}

func (e *DBProxyNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBProxyNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBProxyNotFoundFault) ErrorCode() string             { return "DBProxyNotFoundFault" }
func (e *DBProxyNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBProxyNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBProxyNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// Your AWS account already has the maximum number of proxies in the specified AWS
// Region.
type DBProxyQuotaExceededFault struct {
	Message *string
}

func (e *DBProxyQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBProxyQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBProxyQuotaExceededFault) ErrorCode() string             { return "DBProxyQuotaExceededFault" }
func (e *DBProxyQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBProxyQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBProxyQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The proxy is already associated with the specified RDS DB instance or Aurora DB
// cluster.
type DBProxyTargetAlreadyRegisteredFault struct {
	Message *string
}

func (e *DBProxyTargetAlreadyRegisteredFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBProxyTargetAlreadyRegisteredFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBProxyTargetAlreadyRegisteredFault) ErrorCode() string {
	return "DBProxyTargetAlreadyRegisteredFault"
}
func (e *DBProxyTargetAlreadyRegisteredFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBProxyTargetAlreadyRegisteredFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBProxyTargetAlreadyRegisteredFault) HasMessage() bool {
	return e.Message != nil
}

// The specified target group isn't available for a proxy owned by your AWS account
// in the specified AWS Region.
type DBProxyTargetGroupNotFoundFault struct {
	Message *string
}

func (e *DBProxyTargetGroupNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBProxyTargetGroupNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBProxyTargetGroupNotFoundFault) ErrorCode() string {
	return "DBProxyTargetGroupNotFoundFault"
}
func (e *DBProxyTargetGroupNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBProxyTargetGroupNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBProxyTargetGroupNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The specified RDS DB instance or Aurora DB cluster isn't available for a proxy
// owned by your AWS account in the specified AWS Region.
type DBProxyTargetNotFoundFault struct {
	Message *string
}

func (e *DBProxyTargetNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBProxyTargetNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBProxyTargetNotFoundFault) ErrorCode() string             { return "DBProxyTargetNotFoundFault" }
func (e *DBProxyTargetNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBProxyTargetNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBProxyTargetNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// A DB security group with the name specified in DBSecurityGroupName already
// exists.
type DBSecurityGroupAlreadyExistsFault struct {
	Message *string
}

func (e *DBSecurityGroupAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSecurityGroupAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSecurityGroupAlreadyExistsFault) ErrorCode() string {
	return "DBSecurityGroupAlreadyExistsFault"
}
func (e *DBSecurityGroupAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSecurityGroupAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSecurityGroupAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// DBSecurityGroupName doesn't refer to an existing DB security group.
type DBSecurityGroupNotFoundFault struct {
	Message *string
}

func (e *DBSecurityGroupNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSecurityGroupNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSecurityGroupNotFoundFault) ErrorCode() string             { return "DBSecurityGroupNotFoundFault" }
func (e *DBSecurityGroupNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSecurityGroupNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSecurityGroupNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// A DB security group isn't allowed for this action.
type DBSecurityGroupNotSupportedFault struct {
	Message *string
}

func (e *DBSecurityGroupNotSupportedFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSecurityGroupNotSupportedFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSecurityGroupNotSupportedFault) ErrorCode() string {
	return "DBSecurityGroupNotSupportedFault"
}
func (e *DBSecurityGroupNotSupportedFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSecurityGroupNotSupportedFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSecurityGroupNotSupportedFault) HasMessage() bool {
	return e.Message != nil
}

// The request would result in the user exceeding the allowed number of DB security
// groups.
type DBSecurityGroupQuotaExceededFault struct {
	Message *string
}

func (e *DBSecurityGroupQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSecurityGroupQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSecurityGroupQuotaExceededFault) ErrorCode() string {
	return "DBSecurityGroupQuotaExceededFault"
}
func (e *DBSecurityGroupQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSecurityGroupQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSecurityGroupQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// DBSnapshotIdentifier is already used by an existing snapshot.
type DBSnapshotAlreadyExistsFault struct {
	Message *string
}

func (e *DBSnapshotAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSnapshotAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSnapshotAlreadyExistsFault) ErrorCode() string             { return "DBSnapshotAlreadyExistsFault" }
func (e *DBSnapshotAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSnapshotAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSnapshotAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// DBSnapshotIdentifier doesn't refer to an existing DB snapshot.
type DBSnapshotNotFoundFault struct {
	Message *string
}

func (e *DBSnapshotNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSnapshotNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSnapshotNotFoundFault) ErrorCode() string             { return "DBSnapshotNotFoundFault" }
func (e *DBSnapshotNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSnapshotNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSnapshotNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// DBSubnetGroupName is already used by an existing DB subnet group.
type DBSubnetGroupAlreadyExistsFault struct {
	Message *string
}

func (e *DBSubnetGroupAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSubnetGroupAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSubnetGroupAlreadyExistsFault) ErrorCode() string {
	return "DBSubnetGroupAlreadyExistsFault"
}
func (e *DBSubnetGroupAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSubnetGroupAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSubnetGroupAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// Subnets in the DB subnet group should cover at least two Availability Zones
// unless there is only one Availability Zone.
type DBSubnetGroupDoesNotCoverEnoughAZs struct {
	Message *string
}

func (e *DBSubnetGroupDoesNotCoverEnoughAZs) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSubnetGroupDoesNotCoverEnoughAZs) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSubnetGroupDoesNotCoverEnoughAZs) ErrorCode() string {
	return "DBSubnetGroupDoesNotCoverEnoughAZs"
}
func (e *DBSubnetGroupDoesNotCoverEnoughAZs) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *DBSubnetGroupDoesNotCoverEnoughAZs) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSubnetGroupDoesNotCoverEnoughAZs) HasMessage() bool {
	return e.Message != nil
}

// The DBSubnetGroup shouldn't be specified while creating read replicas that lie
// in the same region as the source instance.
type DBSubnetGroupNotAllowedFault struct {
	Message *string
}

func (e *DBSubnetGroupNotAllowedFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSubnetGroupNotAllowedFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSubnetGroupNotAllowedFault) ErrorCode() string             { return "DBSubnetGroupNotAllowedFault" }
func (e *DBSubnetGroupNotAllowedFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSubnetGroupNotAllowedFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSubnetGroupNotAllowedFault) HasMessage() bool {
	return e.Message != nil
}

// DBSubnetGroupName doesn't refer to an existing DB subnet group.
type DBSubnetGroupNotFoundFault struct {
	Message *string
}

func (e *DBSubnetGroupNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSubnetGroupNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSubnetGroupNotFoundFault) ErrorCode() string             { return "DBSubnetGroupNotFoundFault" }
func (e *DBSubnetGroupNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSubnetGroupNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSubnetGroupNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The request would result in the user exceeding the allowed number of DB subnet
// groups.
type DBSubnetGroupQuotaExceededFault struct {
	Message *string
}

func (e *DBSubnetGroupQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSubnetGroupQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSubnetGroupQuotaExceededFault) ErrorCode() string {
	return "DBSubnetGroupQuotaExceededFault"
}
func (e *DBSubnetGroupQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSubnetGroupQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSubnetGroupQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The request would result in the user exceeding the allowed number of subnets in
// a DB subnet groups.
type DBSubnetQuotaExceededFault struct {
	Message *string
}

func (e *DBSubnetQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBSubnetQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBSubnetQuotaExceededFault) ErrorCode() string             { return "DBSubnetQuotaExceededFault" }
func (e *DBSubnetQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBSubnetQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBSubnetQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The DB upgrade failed because a resource the DB depends on can't be modified.
type DBUpgradeDependencyFailureFault struct {
	Message *string
}

func (e *DBUpgradeDependencyFailureFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DBUpgradeDependencyFailureFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DBUpgradeDependencyFailureFault) ErrorCode() string {
	return "DBUpgradeDependencyFailureFault"
}
func (e *DBUpgradeDependencyFailureFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DBUpgradeDependencyFailureFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DBUpgradeDependencyFailureFault) HasMessage() bool {
	return e.Message != nil
}

// Domain doesn't refer to an existing Active Directory domain.
type DomainNotFoundFault struct {
	Message *string
}

func (e *DomainNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DomainNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DomainNotFoundFault) ErrorCode() string             { return "DomainNotFoundFault" }
func (e *DomainNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *DomainNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *DomainNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// You have reached the maximum number of event subscriptions.
type EventSubscriptionQuotaExceededFault struct {
	Message *string
}

func (e *EventSubscriptionQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *EventSubscriptionQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *EventSubscriptionQuotaExceededFault) ErrorCode() string {
	return "EventSubscriptionQuotaExceededFault"
}
func (e *EventSubscriptionQuotaExceededFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *EventSubscriptionQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *EventSubscriptionQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// You can't start an export task that's already running.
type ExportTaskAlreadyExistsFault struct {
	Message *string
}

func (e *ExportTaskAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ExportTaskAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ExportTaskAlreadyExistsFault) ErrorCode() string             { return "ExportTaskAlreadyExistsFault" }
func (e *ExportTaskAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ExportTaskAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ExportTaskAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The export task doesn't exist.
type ExportTaskNotFoundFault struct {
	Message *string
}

func (e *ExportTaskNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ExportTaskNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ExportTaskNotFoundFault) ErrorCode() string             { return "ExportTaskNotFoundFault" }
func (e *ExportTaskNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ExportTaskNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ExportTaskNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

//
type GlobalClusterAlreadyExistsFault struct {
	Message *string
}

func (e *GlobalClusterAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *GlobalClusterAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *GlobalClusterAlreadyExistsFault) ErrorCode() string {
	return "GlobalClusterAlreadyExistsFault"
}
func (e *GlobalClusterAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *GlobalClusterAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *GlobalClusterAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

//
type GlobalClusterNotFoundFault struct {
	Message *string
}

func (e *GlobalClusterNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *GlobalClusterNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *GlobalClusterNotFoundFault) ErrorCode() string             { return "GlobalClusterNotFoundFault" }
func (e *GlobalClusterNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *GlobalClusterNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *GlobalClusterNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

//
type GlobalClusterQuotaExceededFault struct {
	Message *string
}

func (e *GlobalClusterQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *GlobalClusterQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *GlobalClusterQuotaExceededFault) ErrorCode() string {
	return "GlobalClusterQuotaExceededFault"
}
func (e *GlobalClusterQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *GlobalClusterQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *GlobalClusterQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The IAM role requires additional permissions to export to an Amazon S3 bucket.
type IamRoleMissingPermissionsFault struct {
	Message *string
}

func (e *IamRoleMissingPermissionsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IamRoleMissingPermissionsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IamRoleMissingPermissionsFault) ErrorCode() string             { return "IamRoleMissingPermissionsFault" }
func (e *IamRoleMissingPermissionsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IamRoleMissingPermissionsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IamRoleMissingPermissionsFault) HasMessage() bool {
	return e.Message != nil
}

// The IAM role is missing for exporting to an Amazon S3 bucket.
type IamRoleNotFoundFault struct {
	Message *string
}

func (e *IamRoleNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IamRoleNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IamRoleNotFoundFault) ErrorCode() string             { return "IamRoleNotFoundFault" }
func (e *IamRoleNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *IamRoleNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *IamRoleNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The specified installation medium has already been imported.
type InstallationMediaAlreadyExistsFault struct {
	Message *string
}

func (e *InstallationMediaAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InstallationMediaAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InstallationMediaAlreadyExistsFault) ErrorCode() string {
	return "InstallationMediaAlreadyExistsFault"
}
func (e *InstallationMediaAlreadyExistsFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InstallationMediaAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InstallationMediaAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// InstallationMediaID doesn't refer to an existing installation medium.
type InstallationMediaNotFoundFault struct {
	Message *string
}

func (e *InstallationMediaNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InstallationMediaNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InstallationMediaNotFoundFault) ErrorCode() string             { return "InstallationMediaNotFoundFault" }
func (e *InstallationMediaNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InstallationMediaNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InstallationMediaNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The request would result in the user exceeding the allowed number of DB
// instances.
type InstanceQuotaExceededFault struct {
	Message *string
}

func (e *InstanceQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InstanceQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InstanceQuotaExceededFault) ErrorCode() string             { return "InstanceQuotaExceededFault" }
func (e *InstanceQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InstanceQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InstanceQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The DB cluster doesn't have enough capacity for the current operation.
type InsufficientDBClusterCapacityFault struct {
	Message *string
}

func (e *InsufficientDBClusterCapacityFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InsufficientDBClusterCapacityFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InsufficientDBClusterCapacityFault) ErrorCode() string {
	return "InsufficientDBClusterCapacityFault"
}
func (e *InsufficientDBClusterCapacityFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InsufficientDBClusterCapacityFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InsufficientDBClusterCapacityFault) HasMessage() bool {
	return e.Message != nil
}

// The specified DB instance class isn't available in the specified Availability
// Zone.
type InsufficientDBInstanceCapacityFault struct {
	Message *string
}

func (e *InsufficientDBInstanceCapacityFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InsufficientDBInstanceCapacityFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InsufficientDBInstanceCapacityFault) ErrorCode() string {
	return "InsufficientDBInstanceCapacityFault"
}
func (e *InsufficientDBInstanceCapacityFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InsufficientDBInstanceCapacityFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InsufficientDBInstanceCapacityFault) HasMessage() bool {
	return e.Message != nil
}

// There is insufficient storage available for the current action. You might be
// able to resolve this error by updating your subnet group to use different
// Availability Zones that have more storage available.
type InsufficientStorageClusterCapacityFault struct {
	Message *string
}

func (e *InsufficientStorageClusterCapacityFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InsufficientStorageClusterCapacityFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InsufficientStorageClusterCapacityFault) ErrorCode() string {
	return "InsufficientStorageClusterCapacityFault"
}
func (e *InsufficientStorageClusterCapacityFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InsufficientStorageClusterCapacityFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InsufficientStorageClusterCapacityFault) HasMessage() bool {
	return e.Message != nil
}

// Capacity isn't a valid Aurora Serverless DB cluster capacity. Valid capacity
// values are 2, 4, 8, 16, 32, 64, 128, and 256.
type InvalidDBClusterCapacityFault struct {
	Message *string
}

func (e *InvalidDBClusterCapacityFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBClusterCapacityFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBClusterCapacityFault) ErrorCode() string             { return "InvalidDBClusterCapacityFault" }
func (e *InvalidDBClusterCapacityFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBClusterCapacityFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBClusterCapacityFault) HasMessage() bool {
	return e.Message != nil
}

// The requested operation can't be performed on the endpoint while the endpoint is
// in this state.
type InvalidDBClusterEndpointStateFault struct {
	Message *string
}

func (e *InvalidDBClusterEndpointStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBClusterEndpointStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBClusterEndpointStateFault) ErrorCode() string {
	return "InvalidDBClusterEndpointStateFault"
}
func (e *InvalidDBClusterEndpointStateFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InvalidDBClusterEndpointStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBClusterEndpointStateFault) HasMessage() bool {
	return e.Message != nil
}

// The supplied value isn't a valid DB cluster snapshot state.
type InvalidDBClusterSnapshotStateFault struct {
	Message *string
}

func (e *InvalidDBClusterSnapshotStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBClusterSnapshotStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBClusterSnapshotStateFault) ErrorCode() string {
	return "InvalidDBClusterSnapshotStateFault"
}
func (e *InvalidDBClusterSnapshotStateFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InvalidDBClusterSnapshotStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBClusterSnapshotStateFault) HasMessage() bool {
	return e.Message != nil
}

// The requested operation can't be performed while the cluster is in this state.
type InvalidDBClusterStateFault struct {
	Message *string
}

func (e *InvalidDBClusterStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBClusterStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBClusterStateFault) ErrorCode() string             { return "InvalidDBClusterStateFault" }
func (e *InvalidDBClusterStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBClusterStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBClusterStateFault) HasMessage() bool {
	return e.Message != nil
}

// The automated backup is in an invalid state. For example, this automated backup
// is associated with an active instance.
type InvalidDBInstanceAutomatedBackupStateFault struct {
	Message *string
}

func (e *InvalidDBInstanceAutomatedBackupStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBInstanceAutomatedBackupStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBInstanceAutomatedBackupStateFault) ErrorCode() string {
	return "InvalidDBInstanceAutomatedBackupStateFault"
}
func (e *InvalidDBInstanceAutomatedBackupStateFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InvalidDBInstanceAutomatedBackupStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBInstanceAutomatedBackupStateFault) HasMessage() bool {
	return e.Message != nil
}

// The DB instance isn't in a valid state.
type InvalidDBInstanceStateFault struct {
	Message *string
}

func (e *InvalidDBInstanceStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBInstanceStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBInstanceStateFault) ErrorCode() string             { return "InvalidDBInstanceStateFault" }
func (e *InvalidDBInstanceStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBInstanceStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBInstanceStateFault) HasMessage() bool {
	return e.Message != nil
}

// The DB parameter group is in use or is in an invalid state. If you are
// attempting to delete the parameter group, you can't delete it when the parameter
// group is in this state.
type InvalidDBParameterGroupStateFault struct {
	Message *string
}

func (e *InvalidDBParameterGroupStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBParameterGroupStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBParameterGroupStateFault) ErrorCode() string {
	return "InvalidDBParameterGroupStateFault"
}
func (e *InvalidDBParameterGroupStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBParameterGroupStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBParameterGroupStateFault) HasMessage() bool {
	return e.Message != nil
}

// The requested operation can't be performed while the proxy is in this state.
type InvalidDBProxyStateFault struct {
	Message *string
}

func (e *InvalidDBProxyStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBProxyStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBProxyStateFault) ErrorCode() string             { return "InvalidDBProxyStateFault" }
func (e *InvalidDBProxyStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBProxyStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBProxyStateFault) HasMessage() bool {
	return e.Message != nil
}

// The state of the DB security group doesn't allow deletion.
type InvalidDBSecurityGroupStateFault struct {
	Message *string
}

func (e *InvalidDBSecurityGroupStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBSecurityGroupStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBSecurityGroupStateFault) ErrorCode() string {
	return "InvalidDBSecurityGroupStateFault"
}
func (e *InvalidDBSecurityGroupStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBSecurityGroupStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBSecurityGroupStateFault) HasMessage() bool {
	return e.Message != nil
}

// The state of the DB snapshot doesn't allow deletion.
type InvalidDBSnapshotStateFault struct {
	Message *string
}

func (e *InvalidDBSnapshotStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBSnapshotStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBSnapshotStateFault) ErrorCode() string             { return "InvalidDBSnapshotStateFault" }
func (e *InvalidDBSnapshotStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBSnapshotStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBSnapshotStateFault) HasMessage() bool {
	return e.Message != nil
}

// The DBSubnetGroup doesn't belong to the same VPC as that of an existing
// cross-region read replica of the same source instance.
type InvalidDBSubnetGroupFault struct {
	Message *string
}

func (e *InvalidDBSubnetGroupFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBSubnetGroupFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBSubnetGroupFault) ErrorCode() string             { return "InvalidDBSubnetGroupFault" }
func (e *InvalidDBSubnetGroupFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBSubnetGroupFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBSubnetGroupFault) HasMessage() bool {
	return e.Message != nil
}

// The DB subnet group cannot be deleted because it's in use.
type InvalidDBSubnetGroupStateFault struct {
	Message *string
}

func (e *InvalidDBSubnetGroupStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBSubnetGroupStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBSubnetGroupStateFault) ErrorCode() string             { return "InvalidDBSubnetGroupStateFault" }
func (e *InvalidDBSubnetGroupStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBSubnetGroupStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBSubnetGroupStateFault) HasMessage() bool {
	return e.Message != nil
}

// The DB subnet isn't in the available state.
type InvalidDBSubnetStateFault struct {
	Message *string
}

func (e *InvalidDBSubnetStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidDBSubnetStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidDBSubnetStateFault) ErrorCode() string             { return "InvalidDBSubnetStateFault" }
func (e *InvalidDBSubnetStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidDBSubnetStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidDBSubnetStateFault) HasMessage() bool {
	return e.Message != nil
}

// This error can occur if someone else is modifying a subscription. You should
// retry the action.
type InvalidEventSubscriptionStateFault struct {
	Message *string
}

func (e *InvalidEventSubscriptionStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidEventSubscriptionStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidEventSubscriptionStateFault) ErrorCode() string {
	return "InvalidEventSubscriptionStateFault"
}
func (e *InvalidEventSubscriptionStateFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *InvalidEventSubscriptionStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidEventSubscriptionStateFault) HasMessage() bool {
	return e.Message != nil
}

// The export is invalid for exporting to an Amazon S3 bucket.
type InvalidExportOnlyFault struct {
	Message *string
}

func (e *InvalidExportOnlyFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidExportOnlyFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidExportOnlyFault) ErrorCode() string             { return "InvalidExportOnlyFault" }
func (e *InvalidExportOnlyFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidExportOnlyFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidExportOnlyFault) HasMessage() bool {
	return e.Message != nil
}

// The state of the export snapshot is invalid for exporting to an Amazon S3
// bucket.
type InvalidExportSourceStateFault struct {
	Message *string
}

func (e *InvalidExportSourceStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidExportSourceStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidExportSourceStateFault) ErrorCode() string             { return "InvalidExportSourceStateFault" }
func (e *InvalidExportSourceStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidExportSourceStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidExportSourceStateFault) HasMessage() bool {
	return e.Message != nil
}

// You can't cancel an export task that has completed.
type InvalidExportTaskStateFault struct {
	Message *string
}

func (e *InvalidExportTaskStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidExportTaskStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidExportTaskStateFault) ErrorCode() string             { return "InvalidExportTaskStateFault" }
func (e *InvalidExportTaskStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidExportTaskStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidExportTaskStateFault) HasMessage() bool {
	return e.Message != nil
}

//
type InvalidGlobalClusterStateFault struct {
	Message *string
}

func (e *InvalidGlobalClusterStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidGlobalClusterStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidGlobalClusterStateFault) ErrorCode() string             { return "InvalidGlobalClusterStateFault" }
func (e *InvalidGlobalClusterStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidGlobalClusterStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidGlobalClusterStateFault) HasMessage() bool {
	return e.Message != nil
}

// The option group isn't in the available state.
type InvalidOptionGroupStateFault struct {
	Message *string
}

func (e *InvalidOptionGroupStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidOptionGroupStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidOptionGroupStateFault) ErrorCode() string             { return "InvalidOptionGroupStateFault" }
func (e *InvalidOptionGroupStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidOptionGroupStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidOptionGroupStateFault) HasMessage() bool {
	return e.Message != nil
}

// Cannot restore from VPC backup to non-VPC DB instance.
type InvalidRestoreFault struct {
	Message *string
}

func (e *InvalidRestoreFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidRestoreFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidRestoreFault) ErrorCode() string             { return "InvalidRestoreFault" }
func (e *InvalidRestoreFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidRestoreFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidRestoreFault) HasMessage() bool {
	return e.Message != nil
}

// The specified Amazon S3 bucket name can't be found or Amazon RDS isn't
// authorized to access the specified Amazon S3 bucket. Verify the
// SourceS3BucketName and S3IngestionRoleArn values and try again.
type InvalidS3BucketFault struct {
	Message *string
}

func (e *InvalidS3BucketFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidS3BucketFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidS3BucketFault) ErrorCode() string             { return "InvalidS3BucketFault" }
func (e *InvalidS3BucketFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidS3BucketFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidS3BucketFault) HasMessage() bool {
	return e.Message != nil
}

// The requested subnet is invalid, or multiple subnets were requested that are not
// all in a common VPC.
type InvalidSubnet struct {
	Message *string
}

func (e *InvalidSubnet) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidSubnet) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidSubnet) ErrorCode() string             { return "InvalidSubnet" }
func (e *InvalidSubnet) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidSubnet) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidSubnet) HasMessage() bool {
	return e.Message != nil
}

// The DB subnet group doesn't cover all Availability Zones after it's created
// because of users' change.
type InvalidVPCNetworkStateFault struct {
	Message *string
}

func (e *InvalidVPCNetworkStateFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidVPCNetworkStateFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidVPCNetworkStateFault) ErrorCode() string             { return "InvalidVPCNetworkStateFault" }
func (e *InvalidVPCNetworkStateFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *InvalidVPCNetworkStateFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *InvalidVPCNetworkStateFault) HasMessage() bool {
	return e.Message != nil
}

// An error occurred accessing an AWS KMS key.
type KMSKeyNotAccessibleFault struct {
	Message *string
}

func (e *KMSKeyNotAccessibleFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *KMSKeyNotAccessibleFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *KMSKeyNotAccessibleFault) ErrorCode() string             { return "KMSKeyNotAccessibleFault" }
func (e *KMSKeyNotAccessibleFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *KMSKeyNotAccessibleFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *KMSKeyNotAccessibleFault) HasMessage() bool {
	return e.Message != nil
}

// The option group you are trying to create already exists.
type OptionGroupAlreadyExistsFault struct {
	Message *string
}

func (e *OptionGroupAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OptionGroupAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OptionGroupAlreadyExistsFault) ErrorCode() string             { return "OptionGroupAlreadyExistsFault" }
func (e *OptionGroupAlreadyExistsFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OptionGroupAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OptionGroupAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The specified option group could not be found.
type OptionGroupNotFoundFault struct {
	Message *string
}

func (e *OptionGroupNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OptionGroupNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OptionGroupNotFoundFault) ErrorCode() string             { return "OptionGroupNotFoundFault" }
func (e *OptionGroupNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OptionGroupNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OptionGroupNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The quota of 20 option groups was exceeded for this AWS account.
type OptionGroupQuotaExceededFault struct {
	Message *string
}

func (e *OptionGroupQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *OptionGroupQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *OptionGroupQuotaExceededFault) ErrorCode() string             { return "OptionGroupQuotaExceededFault" }
func (e *OptionGroupQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *OptionGroupQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *OptionGroupQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// SourceDBInstanceIdentifier refers to a DB instance with BackupRetentionPeriod
// equal to 0.
type PointInTimeRestoreNotEnabledFault struct {
	Message *string
}

func (e *PointInTimeRestoreNotEnabledFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *PointInTimeRestoreNotEnabledFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *PointInTimeRestoreNotEnabledFault) ErrorCode() string {
	return "PointInTimeRestoreNotEnabledFault"
}
func (e *PointInTimeRestoreNotEnabledFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *PointInTimeRestoreNotEnabledFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *PointInTimeRestoreNotEnabledFault) HasMessage() bool {
	return e.Message != nil
}

// Provisioned IOPS not available in the specified Availability Zone.
type ProvisionedIopsNotAvailableInAZFault struct {
	Message *string
}

func (e *ProvisionedIopsNotAvailableInAZFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ProvisionedIopsNotAvailableInAZFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ProvisionedIopsNotAvailableInAZFault) ErrorCode() string {
	return "ProvisionedIopsNotAvailableInAZFault"
}
func (e *ProvisionedIopsNotAvailableInAZFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ProvisionedIopsNotAvailableInAZFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ProvisionedIopsNotAvailableInAZFault) HasMessage() bool {
	return e.Message != nil
}

// User already has a reservation with the given identifier.
type ReservedDBInstanceAlreadyExistsFault struct {
	Message *string
}

func (e *ReservedDBInstanceAlreadyExistsFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ReservedDBInstanceAlreadyExistsFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ReservedDBInstanceAlreadyExistsFault) ErrorCode() string {
	return "ReservedDBInstanceAlreadyExistsFault"
}
func (e *ReservedDBInstanceAlreadyExistsFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ReservedDBInstanceAlreadyExistsFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ReservedDBInstanceAlreadyExistsFault) HasMessage() bool {
	return e.Message != nil
}

// The specified reserved DB Instance not found.
type ReservedDBInstanceNotFoundFault struct {
	Message *string
}

func (e *ReservedDBInstanceNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ReservedDBInstanceNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ReservedDBInstanceNotFoundFault) ErrorCode() string {
	return "ReservedDBInstanceNotFoundFault"
}
func (e *ReservedDBInstanceNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ReservedDBInstanceNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ReservedDBInstanceNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// Request would exceed the user's DB Instance quota.
type ReservedDBInstanceQuotaExceededFault struct {
	Message *string
}

func (e *ReservedDBInstanceQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ReservedDBInstanceQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ReservedDBInstanceQuotaExceededFault) ErrorCode() string {
	return "ReservedDBInstanceQuotaExceededFault"
}
func (e *ReservedDBInstanceQuotaExceededFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ReservedDBInstanceQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ReservedDBInstanceQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// Specified offering does not exist.
type ReservedDBInstancesOfferingNotFoundFault struct {
	Message *string
}

func (e *ReservedDBInstancesOfferingNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ReservedDBInstancesOfferingNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ReservedDBInstancesOfferingNotFoundFault) ErrorCode() string {
	return "ReservedDBInstancesOfferingNotFoundFault"
}
func (e *ReservedDBInstancesOfferingNotFoundFault) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}
func (e *ReservedDBInstancesOfferingNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ReservedDBInstancesOfferingNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The specified resource ID was not found.
type ResourceNotFoundFault struct {
	Message *string
}

func (e *ResourceNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundFault) ErrorCode() string             { return "ResourceNotFoundFault" }
func (e *ResourceNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *ResourceNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *ResourceNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// You have exceeded the maximum number of accounts that you can share a manual DB
// snapshot with.
type SharedSnapshotQuotaExceededFault struct {
	Message *string
}

func (e *SharedSnapshotQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SharedSnapshotQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SharedSnapshotQuotaExceededFault) ErrorCode() string {
	return "SharedSnapshotQuotaExceededFault"
}
func (e *SharedSnapshotQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SharedSnapshotQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SharedSnapshotQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// The request would result in the user exceeding the allowed number of DB
// snapshots.
type SnapshotQuotaExceededFault struct {
	Message *string
}

func (e *SnapshotQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SnapshotQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SnapshotQuotaExceededFault) ErrorCode() string             { return "SnapshotQuotaExceededFault" }
func (e *SnapshotQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SnapshotQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SnapshotQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// SNS has responded that there is a problem with the SND topic specified.
type SNSInvalidTopicFault struct {
	Message *string
}

func (e *SNSInvalidTopicFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SNSInvalidTopicFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SNSInvalidTopicFault) ErrorCode() string             { return "SNSInvalidTopicFault" }
func (e *SNSInvalidTopicFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SNSInvalidTopicFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SNSInvalidTopicFault) HasMessage() bool {
	return e.Message != nil
}

// You do not have permission to publish to the SNS topic ARN.
type SNSNoAuthorizationFault struct {
	Message *string
}

func (e *SNSNoAuthorizationFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SNSNoAuthorizationFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SNSNoAuthorizationFault) ErrorCode() string             { return "SNSNoAuthorizationFault" }
func (e *SNSNoAuthorizationFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SNSNoAuthorizationFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SNSNoAuthorizationFault) HasMessage() bool {
	return e.Message != nil
}

// The SNS topic ARN does not exist.
type SNSTopicArnNotFoundFault struct {
	Message *string
}

func (e *SNSTopicArnNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SNSTopicArnNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SNSTopicArnNotFoundFault) ErrorCode() string             { return "SNSTopicArnNotFoundFault" }
func (e *SNSTopicArnNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SNSTopicArnNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SNSTopicArnNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The requested source could not be found.
type SourceNotFoundFault struct {
	Message *string
}

func (e *SourceNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SourceNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SourceNotFoundFault) ErrorCode() string             { return "SourceNotFoundFault" }
func (e *SourceNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SourceNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SourceNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The request would result in the user exceeding the allowed amount of storage
// available across all DB instances.
type StorageQuotaExceededFault struct {
	Message *string
}

func (e *StorageQuotaExceededFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *StorageQuotaExceededFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *StorageQuotaExceededFault) ErrorCode() string             { return "StorageQuotaExceededFault" }
func (e *StorageQuotaExceededFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *StorageQuotaExceededFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *StorageQuotaExceededFault) HasMessage() bool {
	return e.Message != nil
}

// Storage of the StorageType specified can't be associated with the DB instance.
type StorageTypeNotSupportedFault struct {
	Message *string
}

func (e *StorageTypeNotSupportedFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *StorageTypeNotSupportedFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *StorageTypeNotSupportedFault) ErrorCode() string             { return "StorageTypeNotSupportedFault" }
func (e *StorageTypeNotSupportedFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *StorageTypeNotSupportedFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *StorageTypeNotSupportedFault) HasMessage() bool {
	return e.Message != nil
}

// The DB subnet is already in use in the Availability Zone.
type SubnetAlreadyInUse struct {
	Message *string
}

func (e *SubnetAlreadyInUse) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SubnetAlreadyInUse) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SubnetAlreadyInUse) ErrorCode() string             { return "SubnetAlreadyInUse" }
func (e *SubnetAlreadyInUse) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SubnetAlreadyInUse) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SubnetAlreadyInUse) HasMessage() bool {
	return e.Message != nil
}

// The supplied subscription name already exists.
type SubscriptionAlreadyExistFault struct {
	Message *string
}

func (e *SubscriptionAlreadyExistFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SubscriptionAlreadyExistFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SubscriptionAlreadyExistFault) ErrorCode() string             { return "SubscriptionAlreadyExistFault" }
func (e *SubscriptionAlreadyExistFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SubscriptionAlreadyExistFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SubscriptionAlreadyExistFault) HasMessage() bool {
	return e.Message != nil
}

// The supplied category does not exist.
type SubscriptionCategoryNotFoundFault struct {
	Message *string
}

func (e *SubscriptionCategoryNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SubscriptionCategoryNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SubscriptionCategoryNotFoundFault) ErrorCode() string {
	return "SubscriptionCategoryNotFoundFault"
}
func (e *SubscriptionCategoryNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SubscriptionCategoryNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SubscriptionCategoryNotFoundFault) HasMessage() bool {
	return e.Message != nil
}

// The subscription name does not exist.
type SubscriptionNotFoundFault struct {
	Message *string
}

func (e *SubscriptionNotFoundFault) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *SubscriptionNotFoundFault) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *SubscriptionNotFoundFault) ErrorCode() string             { return "SubscriptionNotFoundFault" }
func (e *SubscriptionNotFoundFault) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
func (e *SubscriptionNotFoundFault) GetMessage() string {
	return ptr.ToString(e.Message)
}
func (e *SubscriptionNotFoundFault) HasMessage() bool {
	return e.Message != nil
}
