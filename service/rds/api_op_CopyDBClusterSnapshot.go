// Code generated by smithy-go-codegen DO NOT EDIT.

package rds

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Copies a snapshot of a DB cluster. To copy a DB cluster snapshot from a shared
// manual DB cluster snapshot, SourceDBClusterSnapshotIdentifier must be the Amazon
// Resource Name (ARN) of the shared DB cluster snapshot.  <p>You can copy an
// encrypted DB cluster snapshot from another AWS Region. In that case, the AWS
// Region where you call the <code>CopyDBClusterSnapshot</code> action is the
// destination AWS Region for the encrypted DB cluster snapshot to be copied to. To
// copy an encrypted DB cluster snapshot from another AWS Region, you must provide
// the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key
// Management System (AWS KMS) key identifier for the key to use to encrypt the
// copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li>
// <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed
// request for the <code>CopyDBClusterSnapshot</code> action to be called in the
// source AWS Region where the DB cluster snapshot is copied from. The pre-signed
// URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API
// action that can be executed in the source AWS Region that contains the encrypted
// DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain
// the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The
// KMS key identifier for the key to use to encrypt the copy of the DB cluster
// snapshot in the destination AWS Region. This is the same identifier for both the
// <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS
// Region, and the action contained in the pre-signed URL.</p> </li> <li> <p>
// <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster
// snapshot is to be created in.</p> </li> <li> <p>
// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot
// identifier for the encrypted DB cluster snapshot to be copied. This identifier
// must be in the Amazon Resource Name (ARN) format for the source AWS Region. For
// example, if you are copying an encrypted DB cluster snapshot from the us-west-2
// AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like
// the following example:
// <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
// </li> </ul> <p>To learn how to generate a Signature Version 4 signed request,
// see <a
// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
// Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a>
// and <a
// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
// Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS
// SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or
// <code>--source-region</code> for the AWS CLI) instead of specifying
// <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code>
// autogenerates a pre-signed URL that is a valid request for the operation that
// can be executed in the source AWS Region.</p> </note> </li> <li> <p>
// <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy
// of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p>
// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot
// identifier for the encrypted DB cluster snapshot to be copied. This identifier
// must be in the ARN format for the source AWS Region and is the same value as the
// <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li>
// </ul> <p>To cancel the copy operation once it is in progress, delete the target
// DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code>
// while that DB cluster snapshot is in "copying" status.</p> <p>For more
// information on copying encrypted DB cluster snapshots from one AWS Region to
// another, see <a
// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html">
// Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more
// information on Amazon Aurora, see <a
// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
// What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note>
// <p>This action only applies to Aurora DB clusters.</p> </note>
func (c *Client) CopyDBClusterSnapshot(ctx context.Context, params *CopyDBClusterSnapshotInput, optFns ...func(*Options)) (*CopyDBClusterSnapshotOutput, error) {
	stack := middleware.NewStack("CopyDBClusterSnapshot", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsquery_serdeOpCopyDBClusterSnapshotMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCopyDBClusterSnapshotValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCopyDBClusterSnapshot(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CopyDBClusterSnapshot",
			Err:           err,
		}
	}
	out := result.(*CopyDBClusterSnapshotOutput)
	out.ResultMetadata = metadata
	return out, nil
}

//
type CopyDBClusterSnapshotInput struct {
	// The identifier of the new DB cluster snapshot to create from the source DB
	// cluster snapshot. This parameter isn't case-sensitive. Constraints:
	//
	//     * Must
	// contain from 1 to 63 letters, numbers, or hyphens.
	//
	//     * First character must
	// be a letter.
	//
	//     * Can't end with a hyphen or contain two consecutive
	// hyphens.
	//
	// Example: my-cluster-snapshot2
	TargetDBClusterSnapshotIdentifier *string
	// The URL that contains a Signature Version 4 signed request for the
	// CopyDBClusterSnapshot API action in the AWS Region that contains the source DB
	// cluster snapshot to copy. The PreSignedUrl parameter must be used when copying
	// an encrypted DB cluster snapshot from another AWS Region. Don't specify
	// PreSignedUrl when you are copying an encrypted DB cluster snapshot in the same
	// AWS Region. The pre-signed URL must be a valid request for the
	// CopyDBClusterSnapshot API action that can be executed in the source AWS Region
	// that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL
	// request must contain the following parameter values:  <ul> <li> <p>
	// <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt
	// the copy of the DB cluster snapshot in the destination AWS Region. This is the
	// same identifier for both the <code>CopyDBClusterSnapshot</code> action that is
	// called in the destination AWS Region, and the action contained in the pre-signed
	// URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS
	// Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p>
	// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot
	// identifier for the encrypted DB cluster snapshot to be copied. This identifier
	// must be in the Amazon Resource Name (ARN) format for the source AWS Region. For
	// example, if you are copying an encrypted DB cluster snapshot from the us-west-2
	// AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like
	// the following example:
	// <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
	// </li> </ul> <p>To learn how to generate a Signature Version 4 signed request,
	// see <a
	// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
	// Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a>
	// and <a
	// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
	// Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS
	// SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or
	// <code>--source-region</code> for the AWS CLI) instead of specifying
	// <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code>
	// autogenerates a pre-signed URL that is a valid request for the operation that
	// can be executed in the source AWS Region.</p> </note>
	PreSignedUrl *string
	// The identifier of the DB cluster snapshot to copy. This parameter isn't
	// case-sensitive. You can't copy an encrypted, shared DB cluster snapshot from one
	// AWS Region to another. Constraints:
	//
	//     * Must specify a valid system snapshot
	// in the "available" state.
	//
	//     * If the source snapshot is in the same AWS
	// Region as the copy, specify a valid DB snapshot identifier.
	//
	//     * If the source
	// snapshot is in a different AWS Region than the copy, specify a valid DB cluster
	// snapshot ARN. For more information, go to  Copying Snapshots Across AWS Regions
	// (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions)
	// in the Amazon Aurora User Guide.
	//
	// Example: my-cluster-snapshot1
	SourceDBClusterSnapshotIdentifier *string
	// A value that indicates whether to copy all tags from the source DB cluster
	// snapshot to the target DB cluster snapshot. By default, tags are not copied.
	CopyTags *bool
	// A list of tags. For more information, see Tagging Amazon RDS Resources
	// (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in
	// the Amazon RDS User Guide.
	Tags []*types.Tag
	// The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the
	// Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS
	// encryption key.  <p>If you copy an encrypted DB cluster snapshot from your AWS
	// account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy
	// with a new KMS encryption key. If you don't specify a value for
	// <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted
	// with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an
	// encrypted DB cluster snapshot that is shared from another AWS account, then you
	// must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB
	// cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to
	// the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in
	// the destination AWS Region. KMS encryption keys are specific to the AWS Region
	// that they are created in, and you can't use encryption keys from one AWS Region
	// in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and
	// specify a value for the <code>KmsKeyId</code> parameter, an error is
	// returned.</p>
	KmsKeyId *string
}

type CopyDBClusterSnapshotOutput struct {
	// Contains the details for an Amazon RDS DB cluster snapshot This data type is
	// used as a response element in the DescribeDBClusterSnapshots action.
	DBClusterSnapshot *types.DBClusterSnapshot

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsquery_serdeOpCopyDBClusterSnapshotMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsquery_serializeOpCopyDBClusterSnapshot{}, middleware.After)
	stack.Deserialize.Add(&awsAwsquery_deserializeOpCopyDBClusterSnapshot{}, middleware.After)
}

func newServiceMetadataMiddleware_opCopyDBClusterSnapshot(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "rds",
		OperationName: "CopyDBClusterSnapshot",
	}
}
