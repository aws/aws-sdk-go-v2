// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package gamelift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
)

const opUpdateScript = "UpdateScript"

// UpdateScriptRequest returns a request value for making API operation for
// Amazon GameLift.
//
// Updates Realtime script metadata and content.
//
// To update script metadata, specify the script ID and provide updated name
// and/or version values.
//
// To update script content, provide an updated zip file by pointing to either
// a local file or an Amazon S3 bucket location. You can use either method regardless
// of how the original script was uploaded. Use the Version parameter to track
// updates to the script.
//
// If the call is successful, the updated metadata is stored in the script record
// and a revised script is uploaded to the Amazon GameLift service. Once the
// script is updated and acquired by a fleet instance, the new version is used
// for all new game sessions.
//
// Learn more
//
// Amazon GameLift Realtime Servers (https://docs.aws.amazon.com/gamelift/latest/developerguide/realtime-intro.html)
//
// Related operations
//
//    * CreateScript
//
//    * ListScripts
//
//    * DescribeScript
//
//    * UpdateScript
//
//    * DeleteScript
//
//    // Example sending a request using UpdateScriptRequest.
//    req := client.UpdateScriptRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/gamelift-2015-10-01/UpdateScript
func (c *Client) UpdateScriptRequest(input *types.UpdateScriptInput) UpdateScriptRequest {
	op := &aws.Operation{
		Name:       opUpdateScript,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.UpdateScriptInput{}
	}

	req := c.newRequest(op, input, &types.UpdateScriptOutput{})
	return UpdateScriptRequest{Request: req, Input: input, Copy: c.UpdateScriptRequest}
}

// UpdateScriptRequest is the request type for the
// UpdateScript API operation.
type UpdateScriptRequest struct {
	*aws.Request
	Input *types.UpdateScriptInput
	Copy  func(*types.UpdateScriptInput) UpdateScriptRequest
}

// Send marshals and sends the UpdateScript API request.
func (r UpdateScriptRequest) Send(ctx context.Context) (*UpdateScriptResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateScriptResponse{
		UpdateScriptOutput: r.Request.Data.(*types.UpdateScriptOutput),
		response:           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateScriptResponse is the response type for the
// UpdateScript API operation.
type UpdateScriptResponse struct {
	*types.UpdateScriptOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateScript request.
func (r *UpdateScriptResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
