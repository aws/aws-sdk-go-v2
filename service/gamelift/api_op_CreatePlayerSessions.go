// Code generated by smithy-go-codegen DO NOT EDIT.

package gamelift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Reserves open slots in a game session for a group of players. Before players can
// be added, a game session must have an ACTIVE status, have a creation policy of
// ALLOW_ALL, and have an open player slot. To add a single player to a game
// session, use CreatePlayerSession (). When a player connects to the game server
// and references a player session ID, the game server contacts the Amazon GameLift
// service to validate the player reservation and accept the player. To create
// player sessions, specify a game session ID, a list of player IDs, and optionally
// a set of player data strings. If successful, a slot is reserved in the game
// session for each player and a set of new PlayerSession () objects is returned.
// Player sessions cannot be updated. Available in Amazon GameLift Local.
//
//     *
// CreatePlayerSession ()
//
//     * CreatePlayerSessions ()
//
//     *
// DescribePlayerSessions ()
//
//     * Game session placements
//
//         *
// StartGameSessionPlacement ()
//
//         * DescribeGameSessionPlacement ()
//
//
// * StopGameSessionPlacement ()
func (c *Client) CreatePlayerSessions(ctx context.Context, params *CreatePlayerSessionsInput, optFns ...func(*Options)) (*CreatePlayerSessionsOutput, error) {
	stack := middleware.NewStack("CreatePlayerSessions", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpCreatePlayerSessionsMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpCreatePlayerSessionsValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opCreatePlayerSessions(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "CreatePlayerSessions",
			Err:           err,
		}
	}
	out := result.(*CreatePlayerSessionsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input for a request action.
type CreatePlayerSessionsInput struct {
	// A unique identifier for the game session to add players to.
	GameSessionId *string
	// List of unique identifiers for the players to be added.
	PlayerIds []*string
	// Map of string pairs, each specifying a player ID and a set of developer-defined
	// information related to the player. Amazon GameLift does not use this data, so it
	// can be formatted as needed for use in the game. Player data strings for player
	// IDs not included in the PlayerIds parameter are ignored.
	PlayerDataMap map[string]*string
}

// Represents the returned data in response to a request action.
type CreatePlayerSessionsOutput struct {
	// A collection of player session objects created for the added players.
	PlayerSessions []*types.PlayerSession

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpCreatePlayerSessionsMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpCreatePlayerSessions{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreatePlayerSessions{}, middleware.After)
}

func newServiceMetadataMiddleware_opCreatePlayerSessions(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamelift",
		OperationName: "CreatePlayerSessions",
	}
}
