// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package gamelift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
)

const opCreatePlayerSessions = "CreatePlayerSessions"

// CreatePlayerSessionsRequest returns a request value for making API operation for
// Amazon GameLift.
//
// Reserves open slots in a game session for a group of players. Before players
// can be added, a game session must have an ACTIVE status, have a creation
// policy of ALLOW_ALL, and have an open player slot. To add a single player
// to a game session, use CreatePlayerSession. When a player connects to the
// game server and references a player session ID, the game server contacts
// the Amazon GameLift service to validate the player reservation and accept
// the player.
//
// To create player sessions, specify a game session ID, a list of player IDs,
// and optionally a set of player data strings. If successful, a slot is reserved
// in the game session for each player and a set of new PlayerSession objects
// is returned. Player sessions cannot be updated.
//
// Available in Amazon GameLift Local.
//
//    * CreatePlayerSession
//
//    * CreatePlayerSessions
//
//    * DescribePlayerSessions
//
//    * Game session placements StartGameSessionPlacement DescribeGameSessionPlacement
//    StopGameSessionPlacement
//
//    // Example sending a request using CreatePlayerSessionsRequest.
//    req := client.CreatePlayerSessionsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/gamelift-2015-10-01/CreatePlayerSessions
func (c *Client) CreatePlayerSessionsRequest(input *types.CreatePlayerSessionsInput) CreatePlayerSessionsRequest {
	op := &aws.Operation{
		Name:       opCreatePlayerSessions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreatePlayerSessionsInput{}
	}

	req := c.newRequest(op, input, &types.CreatePlayerSessionsOutput{})
	return CreatePlayerSessionsRequest{Request: req, Input: input, Copy: c.CreatePlayerSessionsRequest}
}

// CreatePlayerSessionsRequest is the request type for the
// CreatePlayerSessions API operation.
type CreatePlayerSessionsRequest struct {
	*aws.Request
	Input *types.CreatePlayerSessionsInput
	Copy  func(*types.CreatePlayerSessionsInput) CreatePlayerSessionsRequest
}

// Send marshals and sends the CreatePlayerSessions API request.
func (r CreatePlayerSessionsRequest) Send(ctx context.Context) (*CreatePlayerSessionsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreatePlayerSessionsResponse{
		CreatePlayerSessionsOutput: r.Request.Data.(*types.CreatePlayerSessionsOutput),
		response:                   &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreatePlayerSessionsResponse is the response type for the
// CreatePlayerSessions API operation.
type CreatePlayerSessionsResponse struct {
	*types.CreatePlayerSessionsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreatePlayerSessions request.
func (r *CreatePlayerSessionsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
