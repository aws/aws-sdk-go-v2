// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AcceptanceType string

// Enum values for AcceptanceType
const (
	AcceptanceTypeAccept AcceptanceType = "ACCEPT"
	AcceptanceTypeReject AcceptanceType = "REJECT"
)

type BackfillMode string

// Enum values for BackfillMode
const (
	BackfillModeAutomatic BackfillMode = "AUTOMATIC"
	BackfillModeManual    BackfillMode = "MANUAL"
)

type BalancingStrategy string

// Enum values for BalancingStrategy
const (
	BalancingStrategySpot_only      BalancingStrategy = "SPOT_ONLY"
	BalancingStrategySpot_preferred BalancingStrategy = "SPOT_PREFERRED"
)

type BuildStatus string

// Enum values for BuildStatus
const (
	BuildStatusInitialized BuildStatus = "INITIALIZED"
	BuildStatusReady       BuildStatus = "READY"
	BuildStatusFailed      BuildStatus = "FAILED"
)

type CertificateType string

// Enum values for CertificateType
const (
	CertificateTypeDisabled  CertificateType = "DISABLED"
	CertificateTypeGenerated CertificateType = "GENERATED"
)

type ComparisonOperatorType string

// Enum values for ComparisonOperatorType
const (
	ComparisonOperatorTypeGreaterthanorequaltothreshold ComparisonOperatorType = "GreaterThanOrEqualToThreshold"
	ComparisonOperatorTypeGreaterthanthreshold          ComparisonOperatorType = "GreaterThanThreshold"
	ComparisonOperatorTypeLessthanthreshold             ComparisonOperatorType = "LessThanThreshold"
	ComparisonOperatorTypeLessthanorequaltothreshold    ComparisonOperatorType = "LessThanOrEqualToThreshold"
)

type EC2InstanceType string

// Enum values for EC2InstanceType
const (
	EC2InstanceTypeT2Micro    EC2InstanceType = "t2.micro"
	EC2InstanceTypeT2Small    EC2InstanceType = "t2.small"
	EC2InstanceTypeT2Medium   EC2InstanceType = "t2.medium"
	EC2InstanceTypeT2Large    EC2InstanceType = "t2.large"
	EC2InstanceTypeC3Large    EC2InstanceType = "c3.large"
	EC2InstanceTypeC3Xlarge   EC2InstanceType = "c3.xlarge"
	EC2InstanceTypeC32xlarge  EC2InstanceType = "c3.2xlarge"
	EC2InstanceTypeC34xlarge  EC2InstanceType = "c3.4xlarge"
	EC2InstanceTypeC38xlarge  EC2InstanceType = "c3.8xlarge"
	EC2InstanceTypeC4Large    EC2InstanceType = "c4.large"
	EC2InstanceTypeC4Xlarge   EC2InstanceType = "c4.xlarge"
	EC2InstanceTypeC42xlarge  EC2InstanceType = "c4.2xlarge"
	EC2InstanceTypeC44xlarge  EC2InstanceType = "c4.4xlarge"
	EC2InstanceTypeC48xlarge  EC2InstanceType = "c4.8xlarge"
	EC2InstanceTypeC5Large    EC2InstanceType = "c5.large"
	EC2InstanceTypeC5Xlarge   EC2InstanceType = "c5.xlarge"
	EC2InstanceTypeC52xlarge  EC2InstanceType = "c5.2xlarge"
	EC2InstanceTypeC54xlarge  EC2InstanceType = "c5.4xlarge"
	EC2InstanceTypeC59xlarge  EC2InstanceType = "c5.9xlarge"
	EC2InstanceTypeC512xlarge EC2InstanceType = "c5.12xlarge"
	EC2InstanceTypeC518xlarge EC2InstanceType = "c5.18xlarge"
	EC2InstanceTypeC524xlarge EC2InstanceType = "c5.24xlarge"
	EC2InstanceTypeR3Large    EC2InstanceType = "r3.large"
	EC2InstanceTypeR3Xlarge   EC2InstanceType = "r3.xlarge"
	EC2InstanceTypeR32xlarge  EC2InstanceType = "r3.2xlarge"
	EC2InstanceTypeR34xlarge  EC2InstanceType = "r3.4xlarge"
	EC2InstanceTypeR38xlarge  EC2InstanceType = "r3.8xlarge"
	EC2InstanceTypeR4Large    EC2InstanceType = "r4.large"
	EC2InstanceTypeR4Xlarge   EC2InstanceType = "r4.xlarge"
	EC2InstanceTypeR42xlarge  EC2InstanceType = "r4.2xlarge"
	EC2InstanceTypeR44xlarge  EC2InstanceType = "r4.4xlarge"
	EC2InstanceTypeR48xlarge  EC2InstanceType = "r4.8xlarge"
	EC2InstanceTypeR416xlarge EC2InstanceType = "r4.16xlarge"
	EC2InstanceTypeR5Large    EC2InstanceType = "r5.large"
	EC2InstanceTypeR5Xlarge   EC2InstanceType = "r5.xlarge"
	EC2InstanceTypeR52xlarge  EC2InstanceType = "r5.2xlarge"
	EC2InstanceTypeR54xlarge  EC2InstanceType = "r5.4xlarge"
	EC2InstanceTypeR58xlarge  EC2InstanceType = "r5.8xlarge"
	EC2InstanceTypeR512xlarge EC2InstanceType = "r5.12xlarge"
	EC2InstanceTypeR516xlarge EC2InstanceType = "r5.16xlarge"
	EC2InstanceTypeR524xlarge EC2InstanceType = "r5.24xlarge"
	EC2InstanceTypeM3Medium   EC2InstanceType = "m3.medium"
	EC2InstanceTypeM3Large    EC2InstanceType = "m3.large"
	EC2InstanceTypeM3Xlarge   EC2InstanceType = "m3.xlarge"
	EC2InstanceTypeM32xlarge  EC2InstanceType = "m3.2xlarge"
	EC2InstanceTypeM4Large    EC2InstanceType = "m4.large"
	EC2InstanceTypeM4Xlarge   EC2InstanceType = "m4.xlarge"
	EC2InstanceTypeM42xlarge  EC2InstanceType = "m4.2xlarge"
	EC2InstanceTypeM44xlarge  EC2InstanceType = "m4.4xlarge"
	EC2InstanceTypeM410xlarge EC2InstanceType = "m4.10xlarge"
	EC2InstanceTypeM5Large    EC2InstanceType = "m5.large"
	EC2InstanceTypeM5Xlarge   EC2InstanceType = "m5.xlarge"
	EC2InstanceTypeM52xlarge  EC2InstanceType = "m5.2xlarge"
	EC2InstanceTypeM54xlarge  EC2InstanceType = "m5.4xlarge"
	EC2InstanceTypeM58xlarge  EC2InstanceType = "m5.8xlarge"
	EC2InstanceTypeM512xlarge EC2InstanceType = "m5.12xlarge"
	EC2InstanceTypeM516xlarge EC2InstanceType = "m5.16xlarge"
	EC2InstanceTypeM524xlarge EC2InstanceType = "m5.24xlarge"
)

type EventCode string

// Enum values for EventCode
const (
	EventCodeGeneric_event                                    EventCode = "GENERIC_EVENT"
	EventCodeFleet_created                                    EventCode = "FLEET_CREATED"
	EventCodeFleet_deleted                                    EventCode = "FLEET_DELETED"
	EventCodeFleet_scaling_event                              EventCode = "FLEET_SCALING_EVENT"
	EventCodeFleet_state_downloading                          EventCode = "FLEET_STATE_DOWNLOADING"
	EventCodeFleet_state_validating                           EventCode = "FLEET_STATE_VALIDATING"
	EventCodeFleet_state_building                             EventCode = "FLEET_STATE_BUILDING"
	EventCodeFleet_state_activating                           EventCode = "FLEET_STATE_ACTIVATING"
	EventCodeFleet_state_active                               EventCode = "FLEET_STATE_ACTIVE"
	EventCodeFleet_state_error                                EventCode = "FLEET_STATE_ERROR"
	EventCodeFleet_initialization_failed                      EventCode = "FLEET_INITIALIZATION_FAILED"
	EventCodeFleet_binary_download_failed                     EventCode = "FLEET_BINARY_DOWNLOAD_FAILED"
	EventCodeFleet_validation_launch_path_not_found           EventCode = "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
	EventCodeFleet_validation_executable_runtime_failure      EventCode = "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
	EventCodeFleet_validation_timed_out                       EventCode = "FLEET_VALIDATION_TIMED_OUT"
	EventCodeFleet_activation_failed                          EventCode = "FLEET_ACTIVATION_FAILED"
	EventCodeFleet_activation_failed_no_instances             EventCode = "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
	EventCodeFleet_new_game_session_protection_policy_updated EventCode = "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
	EventCodeServer_process_invalid_path                      EventCode = "SERVER_PROCESS_INVALID_PATH"
	EventCodeServer_process_sdk_initialization_timeout        EventCode = "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
	EventCodeServer_process_process_ready_timeout             EventCode = "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
	EventCodeServer_process_crashed                           EventCode = "SERVER_PROCESS_CRASHED"
	EventCodeServer_process_terminated_unhealthy              EventCode = "SERVER_PROCESS_TERMINATED_UNHEALTHY"
	EventCodeServer_process_force_terminated                  EventCode = "SERVER_PROCESS_FORCE_TERMINATED"
	EventCodeServer_process_process_exit_timeout              EventCode = "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
	EventCodeGame_session_activation_timeout                  EventCode = "GAME_SESSION_ACTIVATION_TIMEOUT"
	EventCodeFleet_creation_extracting_build                  EventCode = "FLEET_CREATION_EXTRACTING_BUILD"
	EventCodeFleet_creation_running_installer                 EventCode = "FLEET_CREATION_RUNNING_INSTALLER"
	EventCodeFleet_creation_validating_runtime_config         EventCode = "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
	EventCodeFleet_vpc_peering_succeeded                      EventCode = "FLEET_VPC_PEERING_SUCCEEDED"
	EventCodeFleet_vpc_peering_failed                         EventCode = "FLEET_VPC_PEERING_FAILED"
	EventCodeFleet_vpc_peering_deleted                        EventCode = "FLEET_VPC_PEERING_DELETED"
	EventCodeInstance_interrupted                             EventCode = "INSTANCE_INTERRUPTED"
)

type FleetAction string

// Enum values for FleetAction
const (
	FleetActionAutoscaling FleetAction = "AUTO_SCALING"
)

type FleetStatus string

// Enum values for FleetStatus
const (
	FleetStatusNew         FleetStatus = "NEW"
	FleetStatusDownloading FleetStatus = "DOWNLOADING"
	FleetStatusValidating  FleetStatus = "VALIDATING"
	FleetStatusBuilding    FleetStatus = "BUILDING"
	FleetStatusActivating  FleetStatus = "ACTIVATING"
	FleetStatusActive      FleetStatus = "ACTIVE"
	FleetStatusDeleting    FleetStatus = "DELETING"
	FleetStatusError       FleetStatus = "ERROR"
	FleetStatusTerminated  FleetStatus = "TERMINATED"
)

type FleetType string

// Enum values for FleetType
const (
	FleetTypeOndemand FleetType = "ON_DEMAND"
	FleetTypeSpot     FleetType = "SPOT"
)

type GameServerClaimStatus string

// Enum values for GameServerClaimStatus
const (
	GameServerClaimStatusClaimed GameServerClaimStatus = "CLAIMED"
)

type GameServerGroupAction string

// Enum values for GameServerGroupAction
const (
	GameServerGroupActionReplace_instance_types GameServerGroupAction = "REPLACE_INSTANCE_TYPES"
)

type GameServerGroupDeleteOption string

// Enum values for GameServerGroupDeleteOption
const (
	GameServerGroupDeleteOptionSafe_delete  GameServerGroupDeleteOption = "SAFE_DELETE"
	GameServerGroupDeleteOptionForce_delete GameServerGroupDeleteOption = "FORCE_DELETE"
	GameServerGroupDeleteOptionRetain       GameServerGroupDeleteOption = "RETAIN"
)

type GameServerGroupInstanceType string

// Enum values for GameServerGroupInstanceType
const (
	GameServerGroupInstanceTypeC4Large    GameServerGroupInstanceType = "c4.large"
	GameServerGroupInstanceTypeC4Xlarge   GameServerGroupInstanceType = "c4.xlarge"
	GameServerGroupInstanceTypeC42xlarge  GameServerGroupInstanceType = "c4.2xlarge"
	GameServerGroupInstanceTypeC44xlarge  GameServerGroupInstanceType = "c4.4xlarge"
	GameServerGroupInstanceTypeC48xlarge  GameServerGroupInstanceType = "c4.8xlarge"
	GameServerGroupInstanceTypeC5Large    GameServerGroupInstanceType = "c5.large"
	GameServerGroupInstanceTypeC5Xlarge   GameServerGroupInstanceType = "c5.xlarge"
	GameServerGroupInstanceTypeC52xlarge  GameServerGroupInstanceType = "c5.2xlarge"
	GameServerGroupInstanceTypeC54xlarge  GameServerGroupInstanceType = "c5.4xlarge"
	GameServerGroupInstanceTypeC59xlarge  GameServerGroupInstanceType = "c5.9xlarge"
	GameServerGroupInstanceTypeC512xlarge GameServerGroupInstanceType = "c5.12xlarge"
	GameServerGroupInstanceTypeC518xlarge GameServerGroupInstanceType = "c5.18xlarge"
	GameServerGroupInstanceTypeC524xlarge GameServerGroupInstanceType = "c5.24xlarge"
	GameServerGroupInstanceTypeR4Large    GameServerGroupInstanceType = "r4.large"
	GameServerGroupInstanceTypeR4Xlarge   GameServerGroupInstanceType = "r4.xlarge"
	GameServerGroupInstanceTypeR42xlarge  GameServerGroupInstanceType = "r4.2xlarge"
	GameServerGroupInstanceTypeR44xlarge  GameServerGroupInstanceType = "r4.4xlarge"
	GameServerGroupInstanceTypeR48xlarge  GameServerGroupInstanceType = "r4.8xlarge"
	GameServerGroupInstanceTypeR416xlarge GameServerGroupInstanceType = "r4.16xlarge"
	GameServerGroupInstanceTypeR5Large    GameServerGroupInstanceType = "r5.large"
	GameServerGroupInstanceTypeR5Xlarge   GameServerGroupInstanceType = "r5.xlarge"
	GameServerGroupInstanceTypeR52xlarge  GameServerGroupInstanceType = "r5.2xlarge"
	GameServerGroupInstanceTypeR54xlarge  GameServerGroupInstanceType = "r5.4xlarge"
	GameServerGroupInstanceTypeR58xlarge  GameServerGroupInstanceType = "r5.8xlarge"
	GameServerGroupInstanceTypeR512xlarge GameServerGroupInstanceType = "r5.12xlarge"
	GameServerGroupInstanceTypeR516xlarge GameServerGroupInstanceType = "r5.16xlarge"
	GameServerGroupInstanceTypeR524xlarge GameServerGroupInstanceType = "r5.24xlarge"
	GameServerGroupInstanceTypeM4Large    GameServerGroupInstanceType = "m4.large"
	GameServerGroupInstanceTypeM4Xlarge   GameServerGroupInstanceType = "m4.xlarge"
	GameServerGroupInstanceTypeM42xlarge  GameServerGroupInstanceType = "m4.2xlarge"
	GameServerGroupInstanceTypeM44xlarge  GameServerGroupInstanceType = "m4.4xlarge"
	GameServerGroupInstanceTypeM410xlarge GameServerGroupInstanceType = "m4.10xlarge"
	GameServerGroupInstanceTypeM5Large    GameServerGroupInstanceType = "m5.large"
	GameServerGroupInstanceTypeM5Xlarge   GameServerGroupInstanceType = "m5.xlarge"
	GameServerGroupInstanceTypeM52xlarge  GameServerGroupInstanceType = "m5.2xlarge"
	GameServerGroupInstanceTypeM54xlarge  GameServerGroupInstanceType = "m5.4xlarge"
	GameServerGroupInstanceTypeM58xlarge  GameServerGroupInstanceType = "m5.8xlarge"
	GameServerGroupInstanceTypeM512xlarge GameServerGroupInstanceType = "m5.12xlarge"
	GameServerGroupInstanceTypeM516xlarge GameServerGroupInstanceType = "m5.16xlarge"
	GameServerGroupInstanceTypeM524xlarge GameServerGroupInstanceType = "m5.24xlarge"
)

type GameServerGroupStatus string

// Enum values for GameServerGroupStatus
const (
	GameServerGroupStatusNew              GameServerGroupStatus = "NEW"
	GameServerGroupStatusActivating       GameServerGroupStatus = "ACTIVATING"
	GameServerGroupStatusActive           GameServerGroupStatus = "ACTIVE"
	GameServerGroupStatusDelete_scheduled GameServerGroupStatus = "DELETE_SCHEDULED"
	GameServerGroupStatusDeleting         GameServerGroupStatus = "DELETING"
	GameServerGroupStatusDeleted          GameServerGroupStatus = "DELETED"
	GameServerGroupStatusError            GameServerGroupStatus = "ERROR"
)

type GameServerHealthCheck string

// Enum values for GameServerHealthCheck
const (
	GameServerHealthCheckHealthy GameServerHealthCheck = "HEALTHY"
)

type GameServerProtectionPolicy string

// Enum values for GameServerProtectionPolicy
const (
	GameServerProtectionPolicyNo_protection   GameServerProtectionPolicy = "NO_PROTECTION"
	GameServerProtectionPolicyFull_protection GameServerProtectionPolicy = "FULL_PROTECTION"
)

type GameServerUtilizationStatus string

// Enum values for GameServerUtilizationStatus
const (
	GameServerUtilizationStatusAvailable GameServerUtilizationStatus = "AVAILABLE"
	GameServerUtilizationStatusUtilized  GameServerUtilizationStatus = "UTILIZED"
)

type GameSessionPlacementState string

// Enum values for GameSessionPlacementState
const (
	GameSessionPlacementStatePending   GameSessionPlacementState = "PENDING"
	GameSessionPlacementStateFulfilled GameSessionPlacementState = "FULFILLED"
	GameSessionPlacementStateCancelled GameSessionPlacementState = "CANCELLED"
	GameSessionPlacementStateTimed_out GameSessionPlacementState = "TIMED_OUT"
	GameSessionPlacementStateFailed    GameSessionPlacementState = "FAILED"
)

type GameSessionStatus string

// Enum values for GameSessionStatus
const (
	GameSessionStatusActive      GameSessionStatus = "ACTIVE"
	GameSessionStatusActivating  GameSessionStatus = "ACTIVATING"
	GameSessionStatusTerminated  GameSessionStatus = "TERMINATED"
	GameSessionStatusTerminating GameSessionStatus = "TERMINATING"
	GameSessionStatusError       GameSessionStatus = "ERROR"
)

type GameSessionStatusReason string

// Enum values for GameSessionStatusReason
const (
	GameSessionStatusReasonInterrupted GameSessionStatusReason = "INTERRUPTED"
)

type InstanceStatus string

// Enum values for InstanceStatus
const (
	InstanceStatusPending     InstanceStatus = "PENDING"
	InstanceStatusActive      InstanceStatus = "ACTIVE"
	InstanceStatusTerminating InstanceStatus = "TERMINATING"
)

type IpProtocol string

// Enum values for IpProtocol
const (
	IpProtocolTcp IpProtocol = "TCP"
	IpProtocolUdp IpProtocol = "UDP"
)

type MatchmakingConfigurationStatus string

// Enum values for MatchmakingConfigurationStatus
const (
	MatchmakingConfigurationStatusCancelled           MatchmakingConfigurationStatus = "CANCELLED"
	MatchmakingConfigurationStatusCompleted           MatchmakingConfigurationStatus = "COMPLETED"
	MatchmakingConfigurationStatusFailed              MatchmakingConfigurationStatus = "FAILED"
	MatchmakingConfigurationStatusPlacing             MatchmakingConfigurationStatus = "PLACING"
	MatchmakingConfigurationStatusQueued              MatchmakingConfigurationStatus = "QUEUED"
	MatchmakingConfigurationStatusRequires_acceptance MatchmakingConfigurationStatus = "REQUIRES_ACCEPTANCE"
	MatchmakingConfigurationStatusSearching           MatchmakingConfigurationStatus = "SEARCHING"
	MatchmakingConfigurationStatusTimed_out           MatchmakingConfigurationStatus = "TIMED_OUT"
)

type MetricName string

// Enum values for MetricName
const (
	MetricNameActivatinggamesessions       MetricName = "ActivatingGameSessions"
	MetricNameActivegamesessions           MetricName = "ActiveGameSessions"
	MetricNameActiveinstances              MetricName = "ActiveInstances"
	MetricNameAvailablegamesessions        MetricName = "AvailableGameSessions"
	MetricNameAvailableplayersessions      MetricName = "AvailablePlayerSessions"
	MetricNameCurrentplayersessions        MetricName = "CurrentPlayerSessions"
	MetricNameIdleinstances                MetricName = "IdleInstances"
	MetricNamePercentavailablegamesessions MetricName = "PercentAvailableGameSessions"
	MetricNamePercentidleinstances         MetricName = "PercentIdleInstances"
	MetricNameQueuedepth                   MetricName = "QueueDepth"
	MetricNameWaittime                     MetricName = "WaitTime"
)

type OperatingSystem string

// Enum values for OperatingSystem
const (
	OperatingSystemWindows_2012   OperatingSystem = "WINDOWS_2012"
	OperatingSystemAmazon_linux   OperatingSystem = "AMAZON_LINUX"
	OperatingSystemAmazon_linux_2 OperatingSystem = "AMAZON_LINUX_2"
)

type PlayerSessionCreationPolicy string

// Enum values for PlayerSessionCreationPolicy
const (
	PlayerSessionCreationPolicyAccept_all PlayerSessionCreationPolicy = "ACCEPT_ALL"
	PlayerSessionCreationPolicyDeny_all   PlayerSessionCreationPolicy = "DENY_ALL"
)

type PlayerSessionStatus string

// Enum values for PlayerSessionStatus
const (
	PlayerSessionStatusReserved  PlayerSessionStatus = "RESERVED"
	PlayerSessionStatusActive    PlayerSessionStatus = "ACTIVE"
	PlayerSessionStatusCompleted PlayerSessionStatus = "COMPLETED"
	PlayerSessionStatusTimedout  PlayerSessionStatus = "TIMEDOUT"
)

type PolicyType string

// Enum values for PolicyType
const (
	PolicyTypeRulebased   PolicyType = "RuleBased"
	PolicyTypeTargetbased PolicyType = "TargetBased"
)

type ProtectionPolicy string

// Enum values for ProtectionPolicy
const (
	ProtectionPolicyNoprotection   ProtectionPolicy = "NoProtection"
	ProtectionPolicyFullprotection ProtectionPolicy = "FullProtection"
)

type RoutingStrategyType string

// Enum values for RoutingStrategyType
const (
	RoutingStrategyTypeSimple   RoutingStrategyType = "SIMPLE"
	RoutingStrategyTypeTerminal RoutingStrategyType = "TERMINAL"
)

type ScalingAdjustmentType string

// Enum values for ScalingAdjustmentType
const (
	ScalingAdjustmentTypeChangeincapacity        ScalingAdjustmentType = "ChangeInCapacity"
	ScalingAdjustmentTypeExactcapacity           ScalingAdjustmentType = "ExactCapacity"
	ScalingAdjustmentTypePercentchangeincapacity ScalingAdjustmentType = "PercentChangeInCapacity"
)

type ScalingStatusType string

// Enum values for ScalingStatusType
const (
	ScalingStatusTypeActive           ScalingStatusType = "ACTIVE"
	ScalingStatusTypeUpdate_requested ScalingStatusType = "UPDATE_REQUESTED"
	ScalingStatusTypeUpdating         ScalingStatusType = "UPDATING"
	ScalingStatusTypeDelete_requested ScalingStatusType = "DELETE_REQUESTED"
	ScalingStatusTypeDeleting         ScalingStatusType = "DELETING"
	ScalingStatusTypeDeleted          ScalingStatusType = "DELETED"
	ScalingStatusTypeError            ScalingStatusType = "ERROR"
)

type SortOrder string

// Enum values for SortOrder
const (
	SortOrderAscending  SortOrder = "ASCENDING"
	SortOrderDescending SortOrder = "DESCENDING"
)
