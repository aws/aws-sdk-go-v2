// Code generated by smithy-go-codegen DO NOT EDIT.

package gamelift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Retrieves the details of FlexMatch matchmaking configurations. With this
// operation, you have the following options: (1) retrieve all existing
// configurations, (2) provide the names of one or more configurations to retrieve,
// or (3) retrieve all configurations that use a specified rule set name. When
// requesting multiple items, use the pagination parameters to retrieve results as
// a set of sequential pages. If successful, a configuration is returned for each
// requested name. When specifying a list of names, only configurations that
// currently exist are returned. Learn more  Setting Up FlexMatch Matchmakers
// (https://docs.aws.amazon.com/gamelift/latest/developerguide/matchmaker-build.html)
// Related operations
//
//     * CreateMatchmakingConfiguration
//
//     *
// DescribeMatchmakingConfigurations
//
//     * UpdateMatchmakingConfiguration
//
//     *
// DeleteMatchmakingConfiguration
//
//     * CreateMatchmakingRuleSet
//
//     *
// DescribeMatchmakingRuleSets
//
//     * ValidateMatchmakingRuleSet
//
//     *
// DeleteMatchmakingRuleSet
func (c *Client) DescribeMatchmakingConfigurations(ctx context.Context, params *DescribeMatchmakingConfigurationsInput, optFns ...func(*Options)) (*DescribeMatchmakingConfigurationsOutput, error) {
	if params == nil {
		params = &DescribeMatchmakingConfigurationsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeMatchmakingConfigurations", params, optFns, addOperationDescribeMatchmakingConfigurationsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeMatchmakingConfigurationsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input for a request action.
type DescribeMatchmakingConfigurationsInput struct {

	// The maximum number of results to return. Use this parameter with NextToken to
	// get results as a set of sequential pages. This parameter is limited to 10.
	Limit *int32

	// A unique identifier for a matchmaking configuration(s) to retrieve. You can use
	// either the configuration name or ARN value. To request all existing
	// configurations, leave this parameter empty.
	Names []*string

	// A token that indicates the start of the next sequential page of results. Use the
	// token that is returned with a previous call to this action. To start at the
	// beginning of the result set, do not specify a value.
	NextToken *string

	// A unique identifier for a matchmaking rule set. You can use either the rule set
	// name or ARN value. Use this parameter to retrieve all matchmaking configurations
	// that use this rule set.
	RuleSetName *string
}

// Represents the returned data in response to a request action.
type DescribeMatchmakingConfigurationsOutput struct {

	// A collection of requested matchmaking configurations.
	Configurations []*types.MatchmakingConfiguration

	// A token that indicates where to resume retrieving results on the next call to
	// this action. If no token is returned, these results represent the end of the
	// list.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDescribeMatchmakingConfigurationsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeMatchmakingConfigurations{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeMatchmakingConfigurations{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeMatchmakingConfigurations(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDescribeMatchmakingConfigurations(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamelift",
		OperationName: "DescribeMatchmakingConfigurations",
	}
}
