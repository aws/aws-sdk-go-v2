// Code generated by smithy-go-codegen DO NOT EDIT.

package gamelift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Deletes a Realtime script. This action permanently deletes the script record. If
// script files were uploaded, they are also deleted (files stored in an S3 bucket
// are not deleted). To delete a script, specify the script ID. Before deleting a
// script, be sure to terminate all fleets that are deployed with the script being
// deleted. Fleet instances periodically check for script updates, and if the
// script record no longer exists, the instance will go into an error state and be
// unable to host game sessions. Learn more Amazon GameLift Realtime Servers
// (https://docs.aws.amazon.com/gamelift/latest/developerguide/realtime-intro.html)
// Related operations
//
//     * CreateScript ()
//
//     * ListScripts ()
//
//     *
// DescribeScript ()
//
//     * UpdateScript ()
//
//     * DeleteScript ()
func (c *Client) DeleteScript(ctx context.Context, params *DeleteScriptInput, optFns ...func(*Options)) (*DeleteScriptOutput, error) {
	stack := middleware.NewStack("DeleteScript", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpDeleteScriptMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDeleteScriptValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDeleteScript(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "DeleteScript",
			Err:           err,
		}
	}
	out := result.(*DeleteScriptOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DeleteScriptInput struct {
	// A unique identifier for a Realtime script to delete. You can use either the
	// script ID or ARN value.
	ScriptId *string
}

type DeleteScriptOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpDeleteScriptMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpDeleteScript{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpDeleteScript{}, middleware.After)
}

func newServiceMetadataMiddleware_opDeleteScript(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamelift",
		OperationName: "DeleteScript",
	}
}
