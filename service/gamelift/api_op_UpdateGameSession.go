// Code generated by smithy-go-codegen DO NOT EDIT.

package gamelift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates game session properties. This includes the session name, maximum player
// count, protection policy, which controls whether or not an active game session
// can be terminated during a scale-down event, and the player session creation
// policy, which controls whether or not new players can join the session. To
// update a game session, specify the game session ID and the values you want to
// change. If successful, an updated GameSession object is returned.
//
// *
// CreateGameSession
//
// * DescribeGameSessions
//
// * DescribeGameSessionDetails
//
// *
// SearchGameSessions
//
// * UpdateGameSession
//
// * GetGameSessionLogUrl
//
// * Game session
// placements
//
// * StartGameSessionPlacement
//
// * DescribeGameSessionPlacement
//
// *
// StopGameSessionPlacement
func (c *Client) UpdateGameSession(ctx context.Context, params *UpdateGameSessionInput, optFns ...func(*Options)) (*UpdateGameSessionOutput, error) {
	if params == nil {
		params = &UpdateGameSessionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdateGameSession", params, optFns, addOperationUpdateGameSessionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdateGameSessionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input for a request operation.
type UpdateGameSessionInput struct {

	// A unique identifier for the game session to update.
	//
	// This member is required.
	GameSessionId *string

	// The maximum number of players that can be connected simultaneously to the game
	// session.
	MaximumPlayerSessionCount *int32

	// A descriptive label that is associated with a game session. Session names do not
	// need to be unique.
	Name *string

	// Policy determining whether or not the game session accepts new players.
	PlayerSessionCreationPolicy types.PlayerSessionCreationPolicy

	// Game session protection policy to apply to this game session only.
	//
	// *
	// NoProtection -- The game session can be terminated during a scale-down event.
	//
	// *
	// FullProtection -- If the game session is in an ACTIVE status, it cannot be
	// terminated during a scale-down event.
	ProtectionPolicy types.ProtectionPolicy
}

// Represents the returned data in response to a request operation.
type UpdateGameSessionOutput struct {

	// The updated game session metadata.
	GameSession *types.GameSession

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationUpdateGameSessionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpUpdateGameSession{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpUpdateGameSession{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddAttemptClockSkewMiddleware(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addOpUpdateGameSessionValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateGameSession(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opUpdateGameSession(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamelift",
		OperationName: "UpdateGameSession",
	}
}
