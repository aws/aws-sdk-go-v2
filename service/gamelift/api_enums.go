// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package gamelift

type AcceptanceType string

// Enum values for AcceptanceType
const (
	AcceptanceTypeAccept AcceptanceType = "ACCEPT"
	AcceptanceTypeReject AcceptanceType = "REJECT"
)

func (enum AcceptanceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum AcceptanceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type BackfillMode string

// Enum values for BackfillMode
const (
	BackfillModeAutomatic BackfillMode = "AUTOMATIC"
	BackfillModeManual    BackfillMode = "MANUAL"
)

func (enum BackfillMode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum BackfillMode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type BalancingStrategy string

// Enum values for BalancingStrategy
const (
	BalancingStrategySpotOnly      BalancingStrategy = "SPOT_ONLY"
	BalancingStrategySpotPreferred BalancingStrategy = "SPOT_PREFERRED"
)

func (enum BalancingStrategy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum BalancingStrategy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type BuildStatus string

// Enum values for BuildStatus
const (
	BuildStatusInitialized BuildStatus = "INITIALIZED"
	BuildStatusReady       BuildStatus = "READY"
	BuildStatusFailed      BuildStatus = "FAILED"
)

func (enum BuildStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum BuildStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type CertificateType string

// Enum values for CertificateType
const (
	CertificateTypeDisabled  CertificateType = "DISABLED"
	CertificateTypeGenerated CertificateType = "GENERATED"
)

func (enum CertificateType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum CertificateType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ComparisonOperatorType string

// Enum values for ComparisonOperatorType
const (
	ComparisonOperatorTypeGreaterThanOrEqualToThreshold ComparisonOperatorType = "GreaterThanOrEqualToThreshold"
	ComparisonOperatorTypeGreaterThanThreshold          ComparisonOperatorType = "GreaterThanThreshold"
	ComparisonOperatorTypeLessThanThreshold             ComparisonOperatorType = "LessThanThreshold"
	ComparisonOperatorTypeLessThanOrEqualToThreshold    ComparisonOperatorType = "LessThanOrEqualToThreshold"
)

func (enum ComparisonOperatorType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ComparisonOperatorType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EC2InstanceType string

// Enum values for EC2InstanceType
const (
	EC2InstanceTypeT2Micro    EC2InstanceType = "t2.micro"
	EC2InstanceTypeT2Small    EC2InstanceType = "t2.small"
	EC2InstanceTypeT2Medium   EC2InstanceType = "t2.medium"
	EC2InstanceTypeT2Large    EC2InstanceType = "t2.large"
	EC2InstanceTypeC3Large    EC2InstanceType = "c3.large"
	EC2InstanceTypeC3Xlarge   EC2InstanceType = "c3.xlarge"
	EC2InstanceTypeC32xlarge  EC2InstanceType = "c3.2xlarge"
	EC2InstanceTypeC34xlarge  EC2InstanceType = "c3.4xlarge"
	EC2InstanceTypeC38xlarge  EC2InstanceType = "c3.8xlarge"
	EC2InstanceTypeC4Large    EC2InstanceType = "c4.large"
	EC2InstanceTypeC4Xlarge   EC2InstanceType = "c4.xlarge"
	EC2InstanceTypeC42xlarge  EC2InstanceType = "c4.2xlarge"
	EC2InstanceTypeC44xlarge  EC2InstanceType = "c4.4xlarge"
	EC2InstanceTypeC48xlarge  EC2InstanceType = "c4.8xlarge"
	EC2InstanceTypeC5Large    EC2InstanceType = "c5.large"
	EC2InstanceTypeC5Xlarge   EC2InstanceType = "c5.xlarge"
	EC2InstanceTypeC52xlarge  EC2InstanceType = "c5.2xlarge"
	EC2InstanceTypeC54xlarge  EC2InstanceType = "c5.4xlarge"
	EC2InstanceTypeC59xlarge  EC2InstanceType = "c5.9xlarge"
	EC2InstanceTypeC512xlarge EC2InstanceType = "c5.12xlarge"
	EC2InstanceTypeC518xlarge EC2InstanceType = "c5.18xlarge"
	EC2InstanceTypeC524xlarge EC2InstanceType = "c5.24xlarge"
	EC2InstanceTypeR3Large    EC2InstanceType = "r3.large"
	EC2InstanceTypeR3Xlarge   EC2InstanceType = "r3.xlarge"
	EC2InstanceTypeR32xlarge  EC2InstanceType = "r3.2xlarge"
	EC2InstanceTypeR34xlarge  EC2InstanceType = "r3.4xlarge"
	EC2InstanceTypeR38xlarge  EC2InstanceType = "r3.8xlarge"
	EC2InstanceTypeR4Large    EC2InstanceType = "r4.large"
	EC2InstanceTypeR4Xlarge   EC2InstanceType = "r4.xlarge"
	EC2InstanceTypeR42xlarge  EC2InstanceType = "r4.2xlarge"
	EC2InstanceTypeR44xlarge  EC2InstanceType = "r4.4xlarge"
	EC2InstanceTypeR48xlarge  EC2InstanceType = "r4.8xlarge"
	EC2InstanceTypeR416xlarge EC2InstanceType = "r4.16xlarge"
	EC2InstanceTypeR5Large    EC2InstanceType = "r5.large"
	EC2InstanceTypeR5Xlarge   EC2InstanceType = "r5.xlarge"
	EC2InstanceTypeR52xlarge  EC2InstanceType = "r5.2xlarge"
	EC2InstanceTypeR54xlarge  EC2InstanceType = "r5.4xlarge"
	EC2InstanceTypeR58xlarge  EC2InstanceType = "r5.8xlarge"
	EC2InstanceTypeR512xlarge EC2InstanceType = "r5.12xlarge"
	EC2InstanceTypeR516xlarge EC2InstanceType = "r5.16xlarge"
	EC2InstanceTypeR524xlarge EC2InstanceType = "r5.24xlarge"
	EC2InstanceTypeM3Medium   EC2InstanceType = "m3.medium"
	EC2InstanceTypeM3Large    EC2InstanceType = "m3.large"
	EC2InstanceTypeM3Xlarge   EC2InstanceType = "m3.xlarge"
	EC2InstanceTypeM32xlarge  EC2InstanceType = "m3.2xlarge"
	EC2InstanceTypeM4Large    EC2InstanceType = "m4.large"
	EC2InstanceTypeM4Xlarge   EC2InstanceType = "m4.xlarge"
	EC2InstanceTypeM42xlarge  EC2InstanceType = "m4.2xlarge"
	EC2InstanceTypeM44xlarge  EC2InstanceType = "m4.4xlarge"
	EC2InstanceTypeM410xlarge EC2InstanceType = "m4.10xlarge"
	EC2InstanceTypeM5Large    EC2InstanceType = "m5.large"
	EC2InstanceTypeM5Xlarge   EC2InstanceType = "m5.xlarge"
	EC2InstanceTypeM52xlarge  EC2InstanceType = "m5.2xlarge"
	EC2InstanceTypeM54xlarge  EC2InstanceType = "m5.4xlarge"
	EC2InstanceTypeM58xlarge  EC2InstanceType = "m5.8xlarge"
	EC2InstanceTypeM512xlarge EC2InstanceType = "m5.12xlarge"
	EC2InstanceTypeM516xlarge EC2InstanceType = "m5.16xlarge"
	EC2InstanceTypeM524xlarge EC2InstanceType = "m5.24xlarge"
)

func (enum EC2InstanceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EC2InstanceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type EventCode string

// Enum values for EventCode
const (
	EventCodeGenericEvent                               EventCode = "GENERIC_EVENT"
	EventCodeFleetCreated                               EventCode = "FLEET_CREATED"
	EventCodeFleetDeleted                               EventCode = "FLEET_DELETED"
	EventCodeFleetScalingEvent                          EventCode = "FLEET_SCALING_EVENT"
	EventCodeFleetStateDownloading                      EventCode = "FLEET_STATE_DOWNLOADING"
	EventCodeFleetStateValidating                       EventCode = "FLEET_STATE_VALIDATING"
	EventCodeFleetStateBuilding                         EventCode = "FLEET_STATE_BUILDING"
	EventCodeFleetStateActivating                       EventCode = "FLEET_STATE_ACTIVATING"
	EventCodeFleetStateActive                           EventCode = "FLEET_STATE_ACTIVE"
	EventCodeFleetStateError                            EventCode = "FLEET_STATE_ERROR"
	EventCodeFleetInitializationFailed                  EventCode = "FLEET_INITIALIZATION_FAILED"
	EventCodeFleetBinaryDownloadFailed                  EventCode = "FLEET_BINARY_DOWNLOAD_FAILED"
	EventCodeFleetValidationLaunchPathNotFound          EventCode = "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
	EventCodeFleetValidationExecutableRuntimeFailure    EventCode = "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
	EventCodeFleetValidationTimedOut                    EventCode = "FLEET_VALIDATION_TIMED_OUT"
	EventCodeFleetActivationFailed                      EventCode = "FLEET_ACTIVATION_FAILED"
	EventCodeFleetActivationFailedNoInstances           EventCode = "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
	EventCodeFleetNewGameSessionProtectionPolicyUpdated EventCode = "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
	EventCodeServerProcessInvalidPath                   EventCode = "SERVER_PROCESS_INVALID_PATH"
	EventCodeServerProcessSdkInitializationTimeout      EventCode = "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
	EventCodeServerProcessProcessReadyTimeout           EventCode = "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
	EventCodeServerProcessCrashed                       EventCode = "SERVER_PROCESS_CRASHED"
	EventCodeServerProcessTerminatedUnhealthy           EventCode = "SERVER_PROCESS_TERMINATED_UNHEALTHY"
	EventCodeServerProcessForceTerminated               EventCode = "SERVER_PROCESS_FORCE_TERMINATED"
	EventCodeServerProcessProcessExitTimeout            EventCode = "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
	EventCodeGameSessionActivationTimeout               EventCode = "GAME_SESSION_ACTIVATION_TIMEOUT"
	EventCodeFleetCreationExtractingBuild               EventCode = "FLEET_CREATION_EXTRACTING_BUILD"
	EventCodeFleetCreationRunningInstaller              EventCode = "FLEET_CREATION_RUNNING_INSTALLER"
	EventCodeFleetCreationValidatingRuntimeConfig       EventCode = "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
	EventCodeFleetVpcPeeringSucceeded                   EventCode = "FLEET_VPC_PEERING_SUCCEEDED"
	EventCodeFleetVpcPeeringFailed                      EventCode = "FLEET_VPC_PEERING_FAILED"
	EventCodeFleetVpcPeeringDeleted                     EventCode = "FLEET_VPC_PEERING_DELETED"
	EventCodeInstanceInterrupted                        EventCode = "INSTANCE_INTERRUPTED"
)

func (enum EventCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum EventCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FleetAction string

// Enum values for FleetAction
const (
	FleetActionAutoScaling FleetAction = "AUTO_SCALING"
)

func (enum FleetAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FleetAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FleetStatus string

// Enum values for FleetStatus
const (
	FleetStatusNew         FleetStatus = "NEW"
	FleetStatusDownloading FleetStatus = "DOWNLOADING"
	FleetStatusValidating  FleetStatus = "VALIDATING"
	FleetStatusBuilding    FleetStatus = "BUILDING"
	FleetStatusActivating  FleetStatus = "ACTIVATING"
	FleetStatusActive      FleetStatus = "ACTIVE"
	FleetStatusDeleting    FleetStatus = "DELETING"
	FleetStatusError       FleetStatus = "ERROR"
	FleetStatusTerminated  FleetStatus = "TERMINATED"
)

func (enum FleetStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FleetStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type FleetType string

// Enum values for FleetType
const (
	FleetTypeOnDemand FleetType = "ON_DEMAND"
	FleetTypeSpot     FleetType = "SPOT"
)

func (enum FleetType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum FleetType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerClaimStatus string

// Enum values for GameServerClaimStatus
const (
	GameServerClaimStatusClaimed GameServerClaimStatus = "CLAIMED"
)

func (enum GameServerClaimStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerClaimStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerGroupAction string

// Enum values for GameServerGroupAction
const (
	GameServerGroupActionReplaceInstanceTypes GameServerGroupAction = "REPLACE_INSTANCE_TYPES"
)

func (enum GameServerGroupAction) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerGroupAction) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerGroupDeleteOption string

// Enum values for GameServerGroupDeleteOption
const (
	GameServerGroupDeleteOptionSafeDelete  GameServerGroupDeleteOption = "SAFE_DELETE"
	GameServerGroupDeleteOptionForceDelete GameServerGroupDeleteOption = "FORCE_DELETE"
	GameServerGroupDeleteOptionRetain      GameServerGroupDeleteOption = "RETAIN"
)

func (enum GameServerGroupDeleteOption) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerGroupDeleteOption) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerGroupInstanceType string

// Enum values for GameServerGroupInstanceType
const (
	GameServerGroupInstanceTypeC4Large    GameServerGroupInstanceType = "c4.large"
	GameServerGroupInstanceTypeC4Xlarge   GameServerGroupInstanceType = "c4.xlarge"
	GameServerGroupInstanceTypeC42xlarge  GameServerGroupInstanceType = "c4.2xlarge"
	GameServerGroupInstanceTypeC44xlarge  GameServerGroupInstanceType = "c4.4xlarge"
	GameServerGroupInstanceTypeC48xlarge  GameServerGroupInstanceType = "c4.8xlarge"
	GameServerGroupInstanceTypeC5Large    GameServerGroupInstanceType = "c5.large"
	GameServerGroupInstanceTypeC5Xlarge   GameServerGroupInstanceType = "c5.xlarge"
	GameServerGroupInstanceTypeC52xlarge  GameServerGroupInstanceType = "c5.2xlarge"
	GameServerGroupInstanceTypeC54xlarge  GameServerGroupInstanceType = "c5.4xlarge"
	GameServerGroupInstanceTypeC59xlarge  GameServerGroupInstanceType = "c5.9xlarge"
	GameServerGroupInstanceTypeC512xlarge GameServerGroupInstanceType = "c5.12xlarge"
	GameServerGroupInstanceTypeC518xlarge GameServerGroupInstanceType = "c5.18xlarge"
	GameServerGroupInstanceTypeC524xlarge GameServerGroupInstanceType = "c5.24xlarge"
	GameServerGroupInstanceTypeR4Large    GameServerGroupInstanceType = "r4.large"
	GameServerGroupInstanceTypeR4Xlarge   GameServerGroupInstanceType = "r4.xlarge"
	GameServerGroupInstanceTypeR42xlarge  GameServerGroupInstanceType = "r4.2xlarge"
	GameServerGroupInstanceTypeR44xlarge  GameServerGroupInstanceType = "r4.4xlarge"
	GameServerGroupInstanceTypeR48xlarge  GameServerGroupInstanceType = "r4.8xlarge"
	GameServerGroupInstanceTypeR416xlarge GameServerGroupInstanceType = "r4.16xlarge"
	GameServerGroupInstanceTypeR5Large    GameServerGroupInstanceType = "r5.large"
	GameServerGroupInstanceTypeR5Xlarge   GameServerGroupInstanceType = "r5.xlarge"
	GameServerGroupInstanceTypeR52xlarge  GameServerGroupInstanceType = "r5.2xlarge"
	GameServerGroupInstanceTypeR54xlarge  GameServerGroupInstanceType = "r5.4xlarge"
	GameServerGroupInstanceTypeR58xlarge  GameServerGroupInstanceType = "r5.8xlarge"
	GameServerGroupInstanceTypeR512xlarge GameServerGroupInstanceType = "r5.12xlarge"
	GameServerGroupInstanceTypeR516xlarge GameServerGroupInstanceType = "r5.16xlarge"
	GameServerGroupInstanceTypeR524xlarge GameServerGroupInstanceType = "r5.24xlarge"
	GameServerGroupInstanceTypeM4Large    GameServerGroupInstanceType = "m4.large"
	GameServerGroupInstanceTypeM4Xlarge   GameServerGroupInstanceType = "m4.xlarge"
	GameServerGroupInstanceTypeM42xlarge  GameServerGroupInstanceType = "m4.2xlarge"
	GameServerGroupInstanceTypeM44xlarge  GameServerGroupInstanceType = "m4.4xlarge"
	GameServerGroupInstanceTypeM410xlarge GameServerGroupInstanceType = "m4.10xlarge"
	GameServerGroupInstanceTypeM5Large    GameServerGroupInstanceType = "m5.large"
	GameServerGroupInstanceTypeM5Xlarge   GameServerGroupInstanceType = "m5.xlarge"
	GameServerGroupInstanceTypeM52xlarge  GameServerGroupInstanceType = "m5.2xlarge"
	GameServerGroupInstanceTypeM54xlarge  GameServerGroupInstanceType = "m5.4xlarge"
	GameServerGroupInstanceTypeM58xlarge  GameServerGroupInstanceType = "m5.8xlarge"
	GameServerGroupInstanceTypeM512xlarge GameServerGroupInstanceType = "m5.12xlarge"
	GameServerGroupInstanceTypeM516xlarge GameServerGroupInstanceType = "m5.16xlarge"
	GameServerGroupInstanceTypeM524xlarge GameServerGroupInstanceType = "m5.24xlarge"
)

func (enum GameServerGroupInstanceType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerGroupInstanceType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerGroupStatus string

// Enum values for GameServerGroupStatus
const (
	GameServerGroupStatusNew             GameServerGroupStatus = "NEW"
	GameServerGroupStatusActivating      GameServerGroupStatus = "ACTIVATING"
	GameServerGroupStatusActive          GameServerGroupStatus = "ACTIVE"
	GameServerGroupStatusDeleteScheduled GameServerGroupStatus = "DELETE_SCHEDULED"
	GameServerGroupStatusDeleting        GameServerGroupStatus = "DELETING"
	GameServerGroupStatusDeleted         GameServerGroupStatus = "DELETED"
	GameServerGroupStatusError           GameServerGroupStatus = "ERROR"
)

func (enum GameServerGroupStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerGroupStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerHealthCheck string

// Enum values for GameServerHealthCheck
const (
	GameServerHealthCheckHealthy GameServerHealthCheck = "HEALTHY"
)

func (enum GameServerHealthCheck) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerHealthCheck) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerProtectionPolicy string

// Enum values for GameServerProtectionPolicy
const (
	GameServerProtectionPolicyNoProtection   GameServerProtectionPolicy = "NO_PROTECTION"
	GameServerProtectionPolicyFullProtection GameServerProtectionPolicy = "FULL_PROTECTION"
)

func (enum GameServerProtectionPolicy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerProtectionPolicy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameServerUtilizationStatus string

// Enum values for GameServerUtilizationStatus
const (
	GameServerUtilizationStatusAvailable GameServerUtilizationStatus = "AVAILABLE"
	GameServerUtilizationStatusUtilized  GameServerUtilizationStatus = "UTILIZED"
)

func (enum GameServerUtilizationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameServerUtilizationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameSessionPlacementState string

// Enum values for GameSessionPlacementState
const (
	GameSessionPlacementStatePending   GameSessionPlacementState = "PENDING"
	GameSessionPlacementStateFulfilled GameSessionPlacementState = "FULFILLED"
	GameSessionPlacementStateCancelled GameSessionPlacementState = "CANCELLED"
	GameSessionPlacementStateTimedOut  GameSessionPlacementState = "TIMED_OUT"
	GameSessionPlacementStateFailed    GameSessionPlacementState = "FAILED"
)

func (enum GameSessionPlacementState) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameSessionPlacementState) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameSessionStatus string

// Enum values for GameSessionStatus
const (
	GameSessionStatusActive      GameSessionStatus = "ACTIVE"
	GameSessionStatusActivating  GameSessionStatus = "ACTIVATING"
	GameSessionStatusTerminated  GameSessionStatus = "TERMINATED"
	GameSessionStatusTerminating GameSessionStatus = "TERMINATING"
	GameSessionStatusError       GameSessionStatus = "ERROR"
)

func (enum GameSessionStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameSessionStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type GameSessionStatusReason string

// Enum values for GameSessionStatusReason
const (
	GameSessionStatusReasonInterrupted GameSessionStatusReason = "INTERRUPTED"
)

func (enum GameSessionStatusReason) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum GameSessionStatusReason) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type InstanceStatus string

// Enum values for InstanceStatus
const (
	InstanceStatusPending     InstanceStatus = "PENDING"
	InstanceStatusActive      InstanceStatus = "ACTIVE"
	InstanceStatusTerminating InstanceStatus = "TERMINATING"
)

func (enum InstanceStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum InstanceStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type IpProtocol string

// Enum values for IpProtocol
const (
	IpProtocolTcp IpProtocol = "TCP"
	IpProtocolUdp IpProtocol = "UDP"
)

func (enum IpProtocol) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum IpProtocol) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type MatchmakingConfigurationStatus string

// Enum values for MatchmakingConfigurationStatus
const (
	MatchmakingConfigurationStatusCancelled          MatchmakingConfigurationStatus = "CANCELLED"
	MatchmakingConfigurationStatusCompleted          MatchmakingConfigurationStatus = "COMPLETED"
	MatchmakingConfigurationStatusFailed             MatchmakingConfigurationStatus = "FAILED"
	MatchmakingConfigurationStatusPlacing            MatchmakingConfigurationStatus = "PLACING"
	MatchmakingConfigurationStatusQueued             MatchmakingConfigurationStatus = "QUEUED"
	MatchmakingConfigurationStatusRequiresAcceptance MatchmakingConfigurationStatus = "REQUIRES_ACCEPTANCE"
	MatchmakingConfigurationStatusSearching          MatchmakingConfigurationStatus = "SEARCHING"
	MatchmakingConfigurationStatusTimedOut           MatchmakingConfigurationStatus = "TIMED_OUT"
)

func (enum MatchmakingConfigurationStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum MatchmakingConfigurationStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type MetricName string

// Enum values for MetricName
const (
	MetricNameActivatingGameSessions       MetricName = "ActivatingGameSessions"
	MetricNameActiveGameSessions           MetricName = "ActiveGameSessions"
	MetricNameActiveInstances              MetricName = "ActiveInstances"
	MetricNameAvailableGameSessions        MetricName = "AvailableGameSessions"
	MetricNameAvailablePlayerSessions      MetricName = "AvailablePlayerSessions"
	MetricNameCurrentPlayerSessions        MetricName = "CurrentPlayerSessions"
	MetricNameIdleInstances                MetricName = "IdleInstances"
	MetricNamePercentAvailableGameSessions MetricName = "PercentAvailableGameSessions"
	MetricNamePercentIdleInstances         MetricName = "PercentIdleInstances"
	MetricNameQueueDepth                   MetricName = "QueueDepth"
	MetricNameWaitTime                     MetricName = "WaitTime"
)

func (enum MetricName) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum MetricName) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OperatingSystem string

// Enum values for OperatingSystem
const (
	OperatingSystemWindows2012  OperatingSystem = "WINDOWS_2012"
	OperatingSystemAmazonLinux  OperatingSystem = "AMAZON_LINUX"
	OperatingSystemAmazonLinux2 OperatingSystem = "AMAZON_LINUX_2"
)

func (enum OperatingSystem) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OperatingSystem) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type PlayerSessionCreationPolicy string

// Enum values for PlayerSessionCreationPolicy
const (
	PlayerSessionCreationPolicyAcceptAll PlayerSessionCreationPolicy = "ACCEPT_ALL"
	PlayerSessionCreationPolicyDenyAll   PlayerSessionCreationPolicy = "DENY_ALL"
)

func (enum PlayerSessionCreationPolicy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum PlayerSessionCreationPolicy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type PlayerSessionStatus string

// Enum values for PlayerSessionStatus
const (
	PlayerSessionStatusReserved  PlayerSessionStatus = "RESERVED"
	PlayerSessionStatusActive    PlayerSessionStatus = "ACTIVE"
	PlayerSessionStatusCompleted PlayerSessionStatus = "COMPLETED"
	PlayerSessionStatusTimedout  PlayerSessionStatus = "TIMEDOUT"
)

func (enum PlayerSessionStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum PlayerSessionStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type PolicyType string

// Enum values for PolicyType
const (
	PolicyTypeRuleBased   PolicyType = "RuleBased"
	PolicyTypeTargetBased PolicyType = "TargetBased"
)

func (enum PolicyType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum PolicyType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ProtectionPolicy string

// Enum values for ProtectionPolicy
const (
	ProtectionPolicyNoProtection   ProtectionPolicy = "NoProtection"
	ProtectionPolicyFullProtection ProtectionPolicy = "FullProtection"
)

func (enum ProtectionPolicy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ProtectionPolicy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type RoutingStrategyType string

// Enum values for RoutingStrategyType
const (
	RoutingStrategyTypeSimple   RoutingStrategyType = "SIMPLE"
	RoutingStrategyTypeTerminal RoutingStrategyType = "TERMINAL"
)

func (enum RoutingStrategyType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum RoutingStrategyType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ScalingAdjustmentType string

// Enum values for ScalingAdjustmentType
const (
	ScalingAdjustmentTypeChangeInCapacity        ScalingAdjustmentType = "ChangeInCapacity"
	ScalingAdjustmentTypeExactCapacity           ScalingAdjustmentType = "ExactCapacity"
	ScalingAdjustmentTypePercentChangeInCapacity ScalingAdjustmentType = "PercentChangeInCapacity"
)

func (enum ScalingAdjustmentType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ScalingAdjustmentType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ScalingStatusType string

// Enum values for ScalingStatusType
const (
	ScalingStatusTypeActive          ScalingStatusType = "ACTIVE"
	ScalingStatusTypeUpdateRequested ScalingStatusType = "UPDATE_REQUESTED"
	ScalingStatusTypeUpdating        ScalingStatusType = "UPDATING"
	ScalingStatusTypeDeleteRequested ScalingStatusType = "DELETE_REQUESTED"
	ScalingStatusTypeDeleting        ScalingStatusType = "DELETING"
	ScalingStatusTypeDeleted         ScalingStatusType = "DELETED"
	ScalingStatusTypeError           ScalingStatusType = "ERROR"
)

func (enum ScalingStatusType) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ScalingStatusType) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type SortOrder string

// Enum values for SortOrder
const (
	SortOrderAscending  SortOrder = "ASCENDING"
	SortOrderDescending SortOrder = "DESCENDING"
)

func (enum SortOrder) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum SortOrder) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
