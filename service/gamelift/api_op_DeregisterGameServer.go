// Code generated by smithy-go-codegen DO NOT EDIT.

package gamelift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// This action is part of Amazon GameLift FleetIQ with game server groups, which is
// in preview release and is subject to change. Removes the game server resource
// from the game server group. As a result of this action, the de-registered game
// server can no longer be claimed and will not returned in a list of active game
// servers. To de-register a game server, specify the game server group and game
// server ID. If successful, this action emits a CloudWatch event with termination
// time stamp and reason. Learn more GameLift FleetIQ Guide
// (https://docs.aws.amazon.com/gamelift/latest/developerguide/gsg-intro.html)
// Related operations
//
//     * RegisterGameServer
//
//     * ListGameServers
//
//     *
// ClaimGameServer
//
//     * DescribeGameServer
//
//     * UpdateGameServer
//
//     *
// DeregisterGameServer
func (c *Client) DeregisterGameServer(ctx context.Context, params *DeregisterGameServerInput, optFns ...func(*Options)) (*DeregisterGameServerOutput, error) {
	if params == nil {
		params = &DeregisterGameServerInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DeregisterGameServer", params, optFns, addOperationDeregisterGameServerMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DeregisterGameServerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DeregisterGameServerInput struct {

	// An identifier for the game server group where the game server to be
	// de-registered is running. Use either the GameServerGroup name or ARN value.
	//
	// This member is required.
	GameServerGroupName *string

	// The identifier for the game server to be de-registered.
	//
	// This member is required.
	GameServerId *string
}

type DeregisterGameServerOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addOperationDeregisterGameServerMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpDeregisterGameServer{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpDeregisterGameServer{}, middleware.After)
	if err != nil {
		return err
	}
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	addResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	addRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpDeregisterGameServerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opDeregisterGameServer(options.Region), middleware.Before)
	addRequestIDRetrieverMiddleware(stack)
	addResponseErrorMiddleware(stack)
	return nil
}

func newServiceMetadataMiddleware_opDeregisterGameServer(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamelift",
		OperationName: "DeregisterGameServer",
	}
}
