// Code generated by smithy-go-codegen DO NOT EDIT.

package gamelift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// Updates settings for a FlexMatch matchmaking configuration. These changes affect
// all matches and game sessions that are created after the update. To update
// settings, specify the configuration name to be updated and provide the new
// settings. Learn more  Design a FlexMatch Matchmaker
// (https://docs.aws.amazon.com/gamelift/latest/developerguide/match-configuration.html)
// Related operations
//
//     * CreateMatchmakingConfiguration ()
//
//     *
// DescribeMatchmakingConfigurations ()
//
//     * UpdateMatchmakingConfiguration ()
//
//
// * DeleteMatchmakingConfiguration ()
//
//     * CreateMatchmakingRuleSet ()
//
//     *
// DescribeMatchmakingRuleSets ()
//
//     * ValidateMatchmakingRuleSet ()
//
//     *
// DeleteMatchmakingRuleSet ()
func (c *Client) UpdateMatchmakingConfiguration(ctx context.Context, params *UpdateMatchmakingConfigurationInput, optFns ...func(*Options)) (*UpdateMatchmakingConfigurationOutput, error) {
	stack := middleware.NewStack("UpdateMatchmakingConfiguration", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpUpdateMatchmakingConfigurationMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpUpdateMatchmakingConfigurationValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateMatchmakingConfiguration(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "UpdateMatchmakingConfiguration",
			Err:           err,
		}
	}
	out := result.(*UpdateMatchmakingConfigurationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

// Represents the input for a request action.
type UpdateMatchmakingConfigurationInput struct {
	// A unique identifier for a matchmaking rule set to use with this configuration.
	// You can use either the rule set name or ARN value. A matchmaking configuration
	// can only use rule sets that are defined in the same Region.
	RuleSetName *string
	// The length of time (in seconds) to wait for players to accept a proposed match.
	// If any player rejects the match or fails to accept before the timeout, the
	// ticket continues to look for an acceptable match.
	AcceptanceTimeoutSeconds *int32
	// A set of custom game session properties, formatted as a single string value.
	// This data is passed to a game server process in the GameSession () object with a
	// request to start a new game session (see Start a Game Session
	// (https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
	// This information is added to the new GameSession () object that is created for a
	// successful match.
	GameSessionData *string
	// A set of custom properties for a game session, formatted as key-value pairs.
	// These properties are passed to a game server process in the GameSession ()
	// object with a request to start a new game session (see Start a Game Session
	// (https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
	// This information is added to the new GameSession () object that is created for a
	// successful match.
	GameProperties []*types.GameProperty
	// A descriptive label that is associated with matchmaking configuration.
	Description *string
	// Amazon Resource Name (ARN
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html))
	// that is assigned to a GameLift game session queue resource and uniquely
	// identifies it. ARNs are unique across all Regions. These queues are used when
	// placing game sessions for matches that are created with this matchmaking
	// configuration. Queues can be located in any Region.
	GameSessionQueueArns []*string
	// A flag that indicates whether a match that was created with this configuration
	// must be accepted by the matched players. To require acceptance, set to TRUE.
	AcceptanceRequired *bool
	// The number of player slots in a match to keep open for future players. For
	// example, assume that the configuration's rule set specifies a match for a single
	// 12-person team. If the additional player count is set to 2, only 10 players are
	// initially selected for the match.
	AdditionalPlayerCount *int32
	// The maximum duration, in seconds, that a matchmaking ticket can remain in
	// process before timing out. Requests that fail due to timing out can be
	// resubmitted as needed.
	RequestTimeoutSeconds *int32
	// The method that is used to backfill game sessions created with this matchmaking
	// configuration. Specify MANUAL when your game manages backfill requests manually
	// or does not use the match backfill feature. Specify AUTOMATIC to have GameLift
	// create a StartMatchBackfill () request whenever a game session has one or more
	// open slots. Learn more about manual and automatic backfill in Backfill Existing
	// Games with FlexMatch
	// (https://docs.aws.amazon.com/gamelift/latest/developerguide/match-backfill.html).
	BackfillMode types.BackfillMode
	// An SNS topic ARN that is set up to receive matchmaking notifications. See
	// Setting up Notifications for Matchmaking
	// (https://docs.aws.amazon.com/gamelift/latest/developerguide/match-notification.html)
	// for more information.
	NotificationTarget *string
	// A unique identifier for a matchmaking configuration to update. You can use
	// either the configuration name or ARN value.
	Name *string
	// Information to add to all events related to the matchmaking configuration.
	CustomEventData *string
}

// Represents the returned data in response to a request action.
type UpdateMatchmakingConfigurationOutput struct {
	// The updated matchmaking configuration.
	Configuration *types.MatchmakingConfiguration

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpUpdateMatchmakingConfigurationMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpUpdateMatchmakingConfiguration{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpUpdateMatchmakingConfiguration{}, middleware.After)
}

func newServiceMetadataMiddleware_opUpdateMatchmakingConfiguration(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamelift",
		OperationName: "UpdateMatchmakingConfiguration",
	}
}
