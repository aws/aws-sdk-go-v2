// Code generated by smithy-go-codegen DO NOT EDIT.

package gamelift

import (
	"context"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	smithy "github.com/awslabs/smithy-go"
	"github.com/awslabs/smithy-go/middleware"
	smithyhttp "github.com/awslabs/smithy-go/transport/http"
)

// This action is part of Amazon GameLift FleetIQ with game server groups, which is
// in preview release and is subject to change. Creates a new game server resource
// and notifies GameLift FleetIQ that the game server is ready to host gameplay and
// players. This action is called by a game server process that is running on an
// instance in a game server group. Registering game servers enables GameLift
// FleetIQ to track available game servers and enables game clients and services to
// claim a game server for a new game session. To register a game server, identify
// the game server group and instance where the game server is running, and provide
// a unique identifier for the game server. You can also include connection and
// game server data; when a game client or service requests a game server by
// calling ClaimGameServer (), this information is returned in response. Once a
// game server is successfully registered, it is put in status AVAILABLE. A request
// to register a game server may fail if the instance it is in the process of
// shutting down as part of instance rebalancing or scale-down activity. Learn more
// GameLift FleetIQ Guide
// (https://docs.aws.amazon.com/gamelift/latest/developerguide/gsg-intro.html)
// Related operations
//
//     * RegisterGameServer ()
//
//     * ListGameServers ()
//
//     *
// ClaimGameServer ()
//
//     * DescribeGameServer ()
//
//     * UpdateGameServer ()
//
//
// * DeregisterGameServer ()
func (c *Client) RegisterGameServer(ctx context.Context, params *RegisterGameServerInput, optFns ...func(*Options)) (*RegisterGameServerOutput, error) {
	stack := middleware.NewStack("RegisterGameServer", smithyhttp.NewStackRequest)
	options := c.options.Copy()
	for _, fn := range optFns {
		fn(&options)
	}
	addawsAwsjson11_serdeOpRegisterGameServerMiddlewares(stack)
	awsmiddleware.AddRequestInvocationIDMiddleware(stack)
	smithyhttp.AddContentLengthMiddleware(stack)
	AddResolveEndpointMiddleware(stack, options)
	v4.AddComputePayloadSHA256Middleware(stack)
	retry.AddRetryMiddlewares(stack, options)
	addHTTPSignerV4Middleware(stack, options)
	awsmiddleware.AddAttemptClockSkewMiddleware(stack)
	addClientUserAgent(stack)
	smithyhttp.AddErrorCloseResponseBodyMiddleware(stack)
	smithyhttp.AddCloseResponseBodyMiddleware(stack)
	addOpRegisterGameServerValidationMiddleware(stack)
	stack.Initialize.Add(newServiceMetadataMiddleware_opRegisterGameServer(options.Region), middleware.Before)

	for _, fn := range options.APIOptions {
		if err := fn(stack); err != nil {
			return nil, err
		}
	}
	handler := middleware.DecorateHandler(smithyhttp.NewClientHandler(options.HTTPClient), stack)
	result, metadata, err := handler.Handle(ctx, params)
	if err != nil {
		return nil, &smithy.OperationError{
			ServiceID:     ServiceID,
			OperationName: "RegisterGameServer",
			Err:           err,
		}
	}
	out := result.(*RegisterGameServerOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RegisterGameServerInput struct {
	// A list of labels to assign to the new game server resource. Tags are
	// developer-defined key-value pairs. Tagging AWS resources are useful for resource
	// management, access management, and cost allocation. For more information, see
	// Tagging AWS Resources
	// (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the AWS
	// General Reference. Once the resource is created, you can use TagResource (),
	// UntagResource (), and ListTagsForResource () to add, remove, and view tags. The
	// maximum tag limit may be lower than stated. See the AWS General Reference for
	// actual tagging limits.
	Tags []*types.Tag
	// A custom string that uniquely identifies the new game server. Game server IDs
	// are developer-defined and must be unique across all game server groups in your
	// AWS account.
	GameServerId *string
	// A set of custom game server properties, formatted as a single string value. This
	// data is passed to a game client or service when it requests information on a
	// game servers using ListGameServers () or ClaimGameServer ().
	GameServerData *string
	// A game server tag that can be used to request sorted lists of game servers using
	// ListGameServers (). Custom sort keys are developer-defined based on how you want
	// to organize the retrieved game server information.
	CustomSortKey *string
	// Information needed to make inbound client connections to the game server. This
	// might include IP address and port, DNS name, etc.
	ConnectionInfo *string
	// The unique identifier for the instance where the game server is running. This ID
	// is available in the instance metadata.
	InstanceId *string
	// An identifier for the game server group where the game server is running. You
	// can use either the GameServerGroup () name or ARN value.
	GameServerGroupName *string
}

type RegisterGameServerOutput struct {
	// Object that describes the newly created game server resource.
	GameServer *types.GameServer

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
}

func addawsAwsjson11_serdeOpRegisterGameServerMiddlewares(stack *middleware.Stack) {
	stack.Serialize.Add(&awsAwsjson11_serializeOpRegisterGameServer{}, middleware.After)
	stack.Deserialize.Add(&awsAwsjson11_deserializeOpRegisterGameServer{}, middleware.After)
}

func newServiceMetadataMiddleware_opRegisterGameServer(region string) awsmiddleware.RegisterServiceMetadata {
	return awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamelift",
		OperationName: "RegisterGameServer",
	}
}
