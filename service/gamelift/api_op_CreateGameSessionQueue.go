// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package gamelift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
)

const opCreateGameSessionQueue = "CreateGameSessionQueue"

// CreateGameSessionQueueRequest returns a request value for making API operation for
// Amazon GameLift.
//
// Establishes a new queue for processing requests to place new game sessions.
// A queue identifies where new game sessions can be hosted -- by specifying
// a list of destinations (fleets or aliases) -- and how long requests can wait
// in the queue before timing out. You can set up a queue to try to place game
// sessions on fleets in multiple regions. To add placement requests to a queue,
// call StartGameSessionPlacement and reference the queue name.
//
// Destination order. When processing a request for a game session, Amazon GameLift
// tries each destination in order until it finds one with available resources
// to host the new game session. A queue's default order is determined by how
// destinations are listed. The default order is overridden when a game session
// placement request provides player latency information. Player latency information
// enables Amazon GameLift to prioritize destinations where players report the
// lowest average latency, as a result placing the new game session where the
// majority of players will have the best possible gameplay experience.
//
// Player latency policies. For placement requests containing player latency
// information, use player latency policies to protect individual players from
// very high latencies. With a latency cap, even when a destination can deliver
// a low latency for most players, the game is not placed where any individual
// player is reporting latency higher than a policy's maximum. A queue can have
// multiple latency policies, which are enforced consecutively starting with
// the policy with the lowest latency cap. Use multiple policies to gradually
// relax latency controls; for example, you might set a policy with a low latency
// cap for the first 60 seconds, a second policy with a higher cap for the next
// 60 seconds, etc.
//
// To create a new queue, provide a name, timeout value, a list of destinations
// and, if desired, a set of latency policies. If successful, a new queue object
// is returned.
//
//    * CreateGameSessionQueue
//
//    * DescribeGameSessionQueues
//
//    * UpdateGameSessionQueue
//
//    * DeleteGameSessionQueue
//
//    // Example sending a request using CreateGameSessionQueueRequest.
//    req := client.CreateGameSessionQueueRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/gamelift-2015-10-01/CreateGameSessionQueue
func (c *Client) CreateGameSessionQueueRequest(input *types.CreateGameSessionQueueInput) CreateGameSessionQueueRequest {
	op := &aws.Operation{
		Name:       opCreateGameSessionQueue,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.CreateGameSessionQueueInput{}
	}

	req := c.newRequest(op, input, &types.CreateGameSessionQueueOutput{})
	return CreateGameSessionQueueRequest{Request: req, Input: input, Copy: c.CreateGameSessionQueueRequest}
}

// CreateGameSessionQueueRequest is the request type for the
// CreateGameSessionQueue API operation.
type CreateGameSessionQueueRequest struct {
	*aws.Request
	Input *types.CreateGameSessionQueueInput
	Copy  func(*types.CreateGameSessionQueueInput) CreateGameSessionQueueRequest
}

// Send marshals and sends the CreateGameSessionQueue API request.
func (r CreateGameSessionQueueRequest) Send(ctx context.Context) (*CreateGameSessionQueueResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateGameSessionQueueResponse{
		CreateGameSessionQueueOutput: r.Request.Data.(*types.CreateGameSessionQueueOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateGameSessionQueueResponse is the response type for the
// CreateGameSessionQueue API operation.
type CreateGameSessionQueueResponse struct {
	*types.CreateGameSessionQueueOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateGameSessionQueue request.
func (r *CreateGameSessionQueueResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
