// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package gamelift

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/gamelift/types"
)

const opStartGameSessionPlacement = "StartGameSessionPlacement"

// StartGameSessionPlacementRequest returns a request value for making API operation for
// Amazon GameLift.
//
// Places a request for a new game session in a queue (see CreateGameSessionQueue).
// When processing a placement request, Amazon GameLift searches for available
// resources on the queue's destinations, scanning each until it finds resources
// or the placement request times out.
//
// A game session placement request can also request player sessions. When a
// new game session is successfully created, Amazon GameLift creates a player
// session for each player included in the request.
//
// When placing a game session, by default Amazon GameLift tries each fleet
// in the order they are listed in the queue configuration. Ideally, a queue's
// destinations are listed in preference order.
//
// Alternatively, when requesting a game session with players, you can also
// provide latency data for each player in relevant regions. Latency data indicates
// the performance lag a player experiences when connected to a fleet in the
// region. Amazon GameLift uses latency data to reorder the list of destinations
// to place the game session in a region with minimal lag. If latency data is
// provided for multiple players, Amazon GameLift calculates each region's average
// lag for all players and reorders to get the best game play across all players.
//
// To place a new game session request, specify the following:
//
//    * The queue name and a set of game session properties and settings
//
//    * A unique ID (such as a UUID) for the placement. You use this ID to track
//    the status of the placement request
//
//    * (Optional) A set of player data and a unique player ID for each player
//    that you are joining to the new game session (player data is optional,
//    but if you include it, you must also provide a unique ID for each player)
//
//    * Latency data for all players (if you want to optimize game play for
//    the players)
//
// If successful, a new game session placement is created.
//
// To track the status of a placement request, call DescribeGameSessionPlacement
// and check the request's status. If the status is FULFILLED, a new game session
// has been created and a game session ARN and region are referenced. If the
// placement request times out, you can resubmit the request or retry it with
// a different queue.
//
//    * CreateGameSession
//
//    * DescribeGameSessions
//
//    * DescribeGameSessionDetails
//
//    * SearchGameSessions
//
//    * UpdateGameSession
//
//    * GetGameSessionLogUrl
//
//    * Game session placements StartGameSessionPlacement DescribeGameSessionPlacement
//    StopGameSessionPlacement
//
//    // Example sending a request using StartGameSessionPlacementRequest.
//    req := client.StartGameSessionPlacementRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/gamelift-2015-10-01/StartGameSessionPlacement
func (c *Client) StartGameSessionPlacementRequest(input *types.StartGameSessionPlacementInput) StartGameSessionPlacementRequest {
	op := &aws.Operation{
		Name:       opStartGameSessionPlacement,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &types.StartGameSessionPlacementInput{}
	}

	req := c.newRequest(op, input, &types.StartGameSessionPlacementOutput{})
	return StartGameSessionPlacementRequest{Request: req, Input: input, Copy: c.StartGameSessionPlacementRequest}
}

// StartGameSessionPlacementRequest is the request type for the
// StartGameSessionPlacement API operation.
type StartGameSessionPlacementRequest struct {
	*aws.Request
	Input *types.StartGameSessionPlacementInput
	Copy  func(*types.StartGameSessionPlacementInput) StartGameSessionPlacementRequest
}

// Send marshals and sends the StartGameSessionPlacement API request.
func (r StartGameSessionPlacementRequest) Send(ctx context.Context) (*StartGameSessionPlacementResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &StartGameSessionPlacementResponse{
		StartGameSessionPlacementOutput: r.Request.Data.(*types.StartGameSessionPlacementOutput),
		response:                        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// StartGameSessionPlacementResponse is the response type for the
// StartGameSessionPlacement API operation.
type StartGameSessionPlacementResponse struct {
	*types.StartGameSessionPlacementOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// StartGameSessionPlacement request.
func (r *StartGameSessionPlacementResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
